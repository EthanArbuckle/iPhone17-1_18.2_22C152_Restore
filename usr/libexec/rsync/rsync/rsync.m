uint64_t sub_100001C90(uint64_t a1, uint64_t *a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  long long *v10;
  const char *v11;
  char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v37;
  char v38;
  unint64_t v39;
  copyfile_flags_t flags;
  char *v41;

  if (!*(_DWORD *)(*(void *)a1 + 600)) {
    return 1;
  }
  if (*(_DWORD *)(*(void *)a1 + 84)) {
    v3 = 851973;
  }
  else {
    v3 = 65541;
  }
  flags = v3;
  v4 = a2[1];
  if (!v4) {
    return 1;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = "._";
  v39 = a2[1];
  while (1)
  {
    v41 = 0;
    v9 = *a2;
    v10 = (long long *)(*a2 + v5);
    v11 = *(const char **)v10;
    v12 = strrchr(*(char **)v10, 47);
    if (v12) {
      v13 = v12 + 1;
    }
    else {
      v13 = v11;
    }
    if (!strncmp(v13, v8, 2uLL) || !copyfile(v11, 0, 0, flags)) {
      goto LABEL_14;
    }
    v14 = v8;
    v15 = v9 + v5;
    v16 = *(void *)(v15 + 16);
    v17 = *(const char **)v15;
    v18 = &v13[-*(void *)v15];
    v19 = basename(*(char **)v15);
    if (asprintf(&v41, "%.*s._%s", (int)v18, v17, v19) == -1) {
      break;
    }
    v27 = sub_1000136E8((uint64_t)a2);
    v28 = *((void *)v10 + 18);
    v29 = v10[6];
    v30 = v10[7];
    *(_OWORD *)(v27 + 128) = v10[8];
    v31 = *v10;
    *(_OWORD *)(v27 + 16) = v10[1];
    v32 = v10[2];
    v33 = v10[3];
    v34 = v10[4];
    v35 = v10[5];
    *(_OWORD *)(v27 + 96) = v29;
    *(_OWORD *)(v27 + 112) = v30;
    *(_OWORD *)v27 = v31;
    *(_OWORD *)(v27 + 64) = v34;
    *(_OWORD *)(v27 + 80) = v35;
    *(_OWORD *)(v27 + 32) = v32;
    *(_OWORD *)(v27 + 48) = v33;
    *(void *)v27 = v41;
    *(void *)(v27 + 16) = &v41[v16 - (void)v17];
    *(void *)(v27 + 88) = 0;
    *(void *)(v27 + 128) = sub_100001EC4;
    *(void *)(v27 + 136) = sub_100002134;
    *(void *)(v27 + 144) = v28;
    *(_DWORD *)(v15 + 56) |= 0x10000000u;
    v8 = v14;
    v4 = v39;
LABEL_14:
    *((void *)v10 + 17) = sub_100002134;
    v6 = ++v7 >= v4;
    v5 += 152;
    if (v4 == v7) {
      return 1;
    }
  }
  if (dword_100058FD8)
  {
    v37 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003AFEC();
    }
    *__error() = v37;
  }
  sub_10001FBD8("asprintf --extended-attributes path", v20, v21, v22, v23, v24, v25, v26, v38);
  return v6;
}

uint64_t sub_100001EC4(uint64_t a1, uint64_t a2, int a3)
{
  v6 = *(char **)a2;
  if (!strstr(*(char **)a2, "._")) {
    sub_10003B020();
  }
  from = 0;
  if (*(_DWORD *)(*(void *)a1 + 84)) {
    copyfile_flags_t v7 = 4980741;
  }
  else {
    copyfile_flags_t v7 = 4194309;
  }
  v8 = dirname(v6);
  v9 = basename(*(char **)a2);
  if (asprintf(&from, "%s/%s", v8, v9 + 2) == -1)
  {
    if (dword_100058FD8)
    {
      int v26 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B04C();
      }
      *__error() = v26;
    }
    v27 = "asprintf";
    goto LABEL_27;
  }
  pid_t v17 = getpid();
  int v18 = snprintf(__str, 0x400uLL, "%s.%d.", "/tmp/", v17);
  unint64_t v19 = v18;
  v20 = *(unsigned char **)(a2 + 16);
  int v21 = *v20;
  if (*v20 && v18 <= 0x3FE)
  {
    v22 = v20 + 1;
    do
    {
      if (v21 == 47) {
        LOBYTE(v21) = 95;
      }
      __str[v19] = v21;
      unint64_t v23 = v19 + 1;
      int v24 = *v22++;
      int v21 = v24;
      if (!v24) {
        break;
      }
    }
    while (v19++ < 0x3FE);
  }
  else
  {
    unint64_t v23 = v18;
  }
  __str[v23] = 0;
  int v28 = copyfile(from, __str, 0, v7);
  int v29 = *__error();
  free(from);
  if (v28)
  {
    *__error() = v29;
    if (dword_100058FD8)
    {
      int v30 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B080();
      }
      *__error() = v30;
    }
    v27 = "copyfile";
LABEL_27:
    sub_10001FBD8(v27, v10, v11, v12, v13, v14, v15, v16, v34);
    return 0xFFFFFFFFLL;
  }
  uint64_t v31 = open(__str, a3);
  int v33 = *__error();
  unlink(__str);
  if (v31 == -1) {
    *__error() = v33;
  }
  return v31;
}

uint64_t sub_100002134(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(_DWORD *)(*(void *)a1 + 600)) {
    sub_10003B0B4();
  }
  if (sub_10001D9A8(a1, a2, (*(_DWORD *)(a3 + 56) & 0x10000000) != 0)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v4 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B0E0();
    }
    *__error() = v4;
  }
  sub_10001FB50("io_write_byte");
  return 0;
}

uint64_t sub_1000021D0(uint64_t result, long long *a2, unint64_t a3)
{
  if (*(_DWORD *)(*(void *)result + 600))
  {
    unint64_t v22 = a3 - 1;
    if (a3 != 1)
    {
      uint64_t v4 = 0;
      v5 = a2;
      do
      {
        v6 = (long long *)((char *)a2 + 152 * v4);
        if ((*((_WORD *)v6 + 12) & 0xF000) == 0x8000)
        {
          copyfile_flags_t v7 = *(const char **)v6;
          v8 = strrchr(*(char **)v6, 47);
          v9 = v8 ? v8 + 1 : v7;
          result = strncmp(v9, "._", 2uLL);
          if (!result)
          {
            size_t v10 = v9 - v7;
            uint64_t v11 = v9 + 2;
            uint64_t v12 = v5;
            uint64_t v13 = v4;
            while (++v13 < a3)
            {
              uint64_t v14 = (const char *)*((void *)v12 + 19);
              result = strncmp(v14, v7, v10);
              if (result) {
                break;
              }
              uint64_t v12 = (long long *)((char *)v12 + 152);
              result = strcmp(&v14[v10], v11);
              if (!result)
              {
                long long v30 = v12[6];
                long long v31 = v12[7];
                long long v32 = v12[8];
                uint64_t v33 = *((void *)v12 + 18);
                long long v26 = v12[2];
                long long v27 = v12[3];
                long long v28 = v12[4];
                long long v29 = v12[5];
                long long v24 = *v12;
                long long v25 = v12[1];
                long long v15 = v6[1];
                *uint64_t v12 = *v6;
                v12[1] = v15;
                long long v16 = v6[2];
                long long v17 = v6[3];
                long long v18 = v6[5];
                v12[4] = v6[4];
                v12[5] = v18;
                v12[2] = v16;
                v12[3] = v17;
                long long v19 = v6[6];
                long long v20 = v6[7];
                long long v21 = v6[8];
                *((void *)v12 + 18) = *((void *)v6 + 18);
                v12[7] = v20;
                v12[8] = v21;
                v12[6] = v19;
                v6[6] = v30;
                v6[7] = v31;
                v6[8] = v32;
                *((void *)v6 + 18) = v33;
                v6[2] = v26;
                v6[3] = v27;
                v6[4] = v28;
                v6[5] = v29;
                long long *v6 = v24;
                v6[1] = v25;
                break;
              }
            }
          }
        }
        ++v4;
        v5 = (long long *)((char *)v5 + 152);
      }
      while (v4 != v22);
    }
  }
  return result;
}

uint64_t sub_1000023A8(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(_DWORD *)(*(void *)a1 + 600)) {
    return 1;
  }
  char v8 = 0;
  if (sub_10001DD4C(a1, a2, &v8))
  {
    int v4 = *(_DWORD *)(a3 + 56);
    if (v8) {
      int v5 = v4 | 0x10000000;
    }
    else {
      int v5 = v4 | 0x20000000;
    }
    *(_DWORD *)(a3 + 56) = v5;
    return 1;
  }
  if (dword_100058FD8)
  {
    int v6 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B114();
    }
    *__error() = v6;
  }
  sub_10001FC88("io_read_byte");
  return 0;
}

uint64_t sub_100002468(uint64_t a1, uint64_t a2, int a3, const char *a4, int a5, char *a6, int a7)
{
  if (a7 && *(_DWORD *)(*(void *)a1 + 600) && (uint64_t v14 = basename(a6), !strncmp(v14, "._", 2uLL)))
  {
    return sub_1000025B8(a1, a2, a3, a4, a5, a6);
  }
  else if (sub_10000B308(a3, a4, a5, a6, a7))
  {
    if (dword_100058FD8)
    {
      int v22 = *__error();
      unint64_t v23 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B148((uint64_t)a4, (uint64_t)a6, v23);
      }
      *__error() = v22;
    }
    sub_10001FBD8("%s: move_file: %s", v15, v16, v17, v18, v19, v20, v21, (char)a4);
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_1000025B8(uint64_t a1, uint64_t a2, int a3, const char *a4, int a5, char *__s)
{
  uint64_t v12 = strrchr(__s, 47);
  if (v12) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = __s;
  }
  if (snprintf(__str, 0x400uLL, "%.*s%s", v13 - __s, __s, v13 + 2) == -1)
  {
    if (dword_100058FD8)
    {
      int v37 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B1D0();
      }
      *__error() = v37;
    }
    v38 = "snprintf";
    goto LABEL_26;
  }
  int v21 = openat(a3, a4, 0);
  if (v21 == -1)
  {
    if (dword_100058FD8)
    {
      int v39 = *__error();
      v40 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B204((uint64_t)a4, v40);
      }
      *__error() = v39;
    }
    char v48 = (char)a4;
    v38 = "%s: openat";
LABEL_26:
    sub_10001FBD8(v38, v14, v15, v16, v17, v18, v19, v20, v48);
    return 0;
  }
  int v22 = v21;
  if (*(_DWORD *)(*(void *)a1 + 84)) {
    int v23 = openat(a5, __str, 257);
  }
  else {
    int v23 = openat(a5, __str, 1);
  }
  if (v23 == -1)
  {
    if (dword_100058FD8)
    {
      int v42 = *__error();
      v43 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B204((uint64_t)__str, v43);
      }
      *__error() = v42;
    }
    sub_10001FBD8("%s: openat", v24, v25, v26, v27, v28, v29, v30, (char)__str);
    close(v22);
    return 0;
  }
  int v31 = v23;
  int v32 = fcopyfile(v22, v23, 0, 0x800005u);
  int v33 = *__error();
  close(v31);
  close(v22);
  if (v32)
  {
    if (dword_100058FD8)
    {
      int v34 = *__error();
      v35 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v50 = __str;
        __int16 v51 = 2080;
        v52 = a4;
        __int16 v53 = 2080;
        v54 = strerror(v33);
        _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%s: copyfile extended attributes from %s: %s", buf, 0x20u);
      }
      *__error() = v34;
    }
    v36 = strerror(v33);
    sub_10001FC88("%s: copyfile extended attributes from %s: %s", __str, a4, v36);
    return 0;
  }
  if (unlinkat(a3, a4, 0))
  {
    if (dword_100058FD8)
    {
      int v44 = *__error();
      v45 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B27C((uint64_t)a4, v45);
      }
      *__error() = v44;
    }
    v46 = __error();
    v47 = strerror(*v46);
    sub_10001FC88("%s: unlink: %s", a4, v47);
  }
  *(_DWORD *)(a2 + 56) |= 0x40000000u;
  return 1;
}

uint64_t sub_100002960(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  if (!*(_DWORD *)(*(void *)a1 + 600)) {
    return 1;
  }
  if (*(_DWORD *)(*(void *)a1 + 196)) {
    return 1;
  }
  if ((*(unsigned char *)(a2 + 59) & 0x40) != 0) {
    return 1;
  }
  char v8 = basename(a4);
  if (strncmp(v8, "._", 2uLL)) {
    return 1;
  }

  return sub_1000025B8(a1, a2, a3, a4, a3, a4);
}

void sub_100002A08(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void *sub_100002A30()
{
  v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
  if (!v0)
  {
    if (dword_100058FD8)
    {
      int v18 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B320();
      }
      *__error() = v18;
    }
    sub_10001FBD8("calloc", v1, v2, v3, v4, v5, v6, v7, v20);
    return 0;
  }
  char v8 = v0;
  v0[1] = 0x10000;
  uint64_t v9 = malloc_type_calloc(0x10000uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  void *v8 = v9;
  if (!v9)
  {
    if (dword_100058FD8)
    {
      int v17 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B320();
      }
      *__error() = v17;
    }
    sub_10001FBD8("calloc", v10, v11, v12, v13, v14, v15, v16, v20);
    free(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_100002B60(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v4 = (uint64_t *)(a2 + 40);
  unint64_t v3 = *(void *)(a2 + 40);
  if (!v3) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    do
    {
      *uint64_t v7 = 0;
      v7[1] = v7;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  if (!*(void *)(a2 + 32)) {
    return 1;
  }
  char v8 = (char *)sub_1000048CC(*(void **)(a1 + 16), v3, 0x18uLL);
  *(void *)(a1 + 16) = v8;
  if (v8)
  {
    uint64_t v16 = *v4;
    if (*v4)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v20 = *(void **)a1;
      unint64_t v19 = *(void *)(a1 + 8);
      do
      {
        uint64_t v21 = *(void *)(a2 + 32) + v17;
        unint64_t v22 = *(unsigned int *)(v21 + 24) % v19;
        int v23 = &v8[v18];
        *(void *)int v23 = v21;
        *((void *)v23 + 1) = 0;
        uint64_t v24 = (void *)v20[2 * v22 + 1];
        *((void *)v23 + 2) = v24;
        *uint64_t v24 = &v8[v18];
        char v8 = *(char **)(a1 + 16);
        char v20 = *(void **)a1;
        *(void *)(*(void *)a1 + 16 * v22 + 8) = &v8[v18 + 8];
        v18 += 24;
        v17 += 48;
        --v16;
      }
      while (v16);
    }
    return 1;
  }
  if (dword_100058FD8)
  {
    int v26 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B354();
    }
    *__error() = v26;
  }
  sub_10001FBD8("reallocarray 3 %ld * %ld bytes", v9, v10, v11, v12, v13, v14, v15, *v4);
  return 0;
}

void sub_100002CC0(void **a1)
{
  free(a1[2]);
  free(*a1);

  free(a1);
}

uint64_t sub_100002D04(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a4 + 40);
  if (!v11)
  {
    int v15 = 3;
LABEL_8:
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 64) = v11;
    *(_DWORD *)(a4 + 72) = 0;
    *(_DWORD *)(a4 + 52) = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v11;
    *(void *)(a1 + 88) += v11;
    sub_10001FA38(3, "%s: flushing whole file %zu B", (uint64_t)a3, a4, a5, a6, a7, a8, (char)a3);
    return 1;
  }
  uint64_t v13 = a2[5];
  if (!v13)
  {
    int v15 = 2;
    goto LABEL_8;
  }
  if (**(_DWORD **)(a1 + 200))
  {
    uint64_t v14 = *a2;
    if (v11 < *a2) {
      sub_10003B400();
    }
    *(void *)a4 = v14;
    goto LABEL_14;
  }
  uint64_t v16 = v11 - *(void *)(a2[4] + 48 * v13 - 32) + 1;
  uint64_t v14 = *(void *)a4;
  if (*(void *)a4 >= v16)
  {
LABEL_14:
    unint64_t v20 = v11 - v14;
    char v30 = (char)a3;
    if (v11 == v14) {
      int v21 = 3;
    }
    else {
      int v21 = 2;
    }
    sub_10001FA38(3, "%s: flushing remaining %jd B", (uint64_t)a3, a4, a5, a6, a7, a8, v30);
    *(int64x2_t *)(a4 + 8) = vaddq_s64(*(int64x2_t *)(a4 + 8), vdupq_n_s64(v20));
    *(void *)(a1 + 88) += v20;
    *(void *)(a4 + 56) = v14;
    *(void *)(a4 + 64) = v11;
    *(_DWORD *)(a4 + 72) = 0;
    *(_DWORD *)(a4 + 52) = v21;
    return 1;
  }
  uint64_t v17 = 0;
  while (1)
  {
    uint64_t v18 = sub_100002F20(a1, a4, a2, a3, v17 == 0, a6, a7, a8);
    if (v18) {
      break;
    }
    uint64_t v19 = *(void *)a4 + 1;
    *(void *)a4 = v19;
    --v17;
    if (v19 >= v16)
    {
      uint64_t v11 = *(void *)(a4 + 40);
      goto LABEL_14;
    }
  }
  uint64_t v23 = v18;
  if (v18 != -1)
  {
    uint64_t v24 = *(void *)a4;
    unint64_t v25 = *(void *)a4 - v14;
    *(int64x2_t *)(a4 + 8) = vaddq_s64(*(int64x2_t *)(a4 + 8), vdupq_n_s64(v25));
    *(void *)(a1 + 88) += v25;
    sub_10001FA38(3, "%s: flushing %jd B before %zu B block %zu", (uint64_t)a3, a4, a5, a6, a7, a8, (char)a3);
    uint64_t v26 = *(void *)(v23 + 8);
    int v27 = ~*(_DWORD *)(v23 + 8);
    *(void *)(a4 + 56) = v14;
    *(void *)(a4 + 64) = v24;
    *(_DWORD *)(a4 + 72) = v27;
    if (v26 == -1) {
      sub_10003B3D4();
    }
    if (v24 == v14) {
      int v28 = 3;
    }
    else {
      int v28 = 2;
    }
    *(_DWORD *)(a4 + 52) = v28;
    unint64_t v29 = *(void *)(v23 + 16);
    *(void *)(a1 + 96) += v29;
    *(int64x2_t *)a4 = vaddq_s64(*(int64x2_t *)a4, vdupq_n_s64(v29));
    *(void *)(a4 + 24) = v26 + 1;
    return 1;
  }
  return 0;
}

uint64_t sub_100002F20(uint64_t a1, uint64_t a2, void *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = v8 - *(void *)a2;
  if (v8 == *(void *)a2) {
    sub_10003B42C();
  }
  uint64_t v12 = a3[2];
  if (v9 >= v12) {
    unint64_t v13 = a3[2];
  }
  else {
    unint64_t v13 = v8 - *(void *)a2;
  }
  if (a5)
  {
    if (qword_100058F00) {
      BOOL v14 = qword_100058F08 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      sub_10003B508();
    }
    if (qword_100058F00) {
      qword_100058F08 = qword_100058F00;
    }
    if (sigsetjmp(dword_100058F10, 0) >= 1)
    {
      qword_100058F00 = qword_100058F08;
      qword_100058F08 = 0;
      if (!dword_100058FD8) {
        goto LABEL_68;
      }
      int v15 = *__error();
      uint64_t v16 = qword_100058FE8;
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO)) {
        goto LABEL_67;
      }
      int __s1 = 136315138;
      v43 = a4;
      goto LABEL_17;
    }
    uint64_t v38 = v12;
    qword_100058F00 = *(void *)(a2 + 32);
    uint64_t v19 = sub_100010F34((void *)qword_100058F00, *(void *)a2);
    unsigned int v20 = sub_10001BF18((uint64_t)v19, v13);
    if (qword_100058F00 != *(void *)(a2 + 32)) {
      sub_10003B4B0();
    }
    unsigned int v18 = v20;
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
    *(_DWORD *)(a2 + 88) = (unsigned __int16)v20;
    *(_DWORD *)(a2 + 92) = HIWORD(v20);
  }
  else
  {
    uint64_t v38 = a3[2];
    unsigned int v18 = *(unsigned __int16 *)(a2 + 88) | (*(_DWORD *)(a2 + 92) << 16);
  }
  unint64_t v21 = *(void *)(a2 + 24);
  if (v21 < a3[5] && (uint64_t v22 = a3[4], v18 == *(_DWORD *)(v22 + 48 * v21 + 24)) && v13 == *(void *)(v22 + 48 * v21 + 16))
  {
    if (qword_100058F00) {
      BOOL v23 = qword_100058F08 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23) {
      sub_10003B458();
    }
    if (qword_100058F00) {
      qword_100058F08 = qword_100058F00;
    }
    if (sigsetjmp(dword_100058F10, 0) >= 1)
    {
      qword_100058F00 = qword_100058F08;
      qword_100058F08 = 0;
      if (!dword_100058FD8) {
        goto LABEL_68;
      }
      int v15 = *__error();
      uint64_t v16 = qword_100058FE8;
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO)) {
        goto LABEL_67;
      }
      int __s1 = 136315138;
      v43 = a4;
LABEL_17:
      p_s1 = (uint8_t *)&__s1;
      goto LABEL_66;
    }
    qword_100058F00 = *(void *)(a2 + 32);
    v36 = (char *)sub_100010F34((void *)qword_100058F00, *(void *)a2);
    sub_10001BFB0(v36, v13, (unsigned __int8 *)&__s1, a1);
    if (qword_100058F00 != *(void *)(a2 + 32)) {
      sub_10003B4B0();
    }
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
    if (!memcmp(&__s1, (const void *)(a3[4] + 48 * *(void *)(a2 + 24) + 28), a3[3]))
    {
      sub_10001FA38(3, "%s: found matching hinted match: position %jd, block %zu (position %jd, size %zu)", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a4);
      return a3[4] + 48 * *(void *)(a2 + 24);
    }
    int v24 = 1;
  }
  else
  {
    int v24 = 0;
  }
  unint64_t v25 = *(void **)(**(void **)(a2 + 80) + 16 * ((unint64_t)v18 % *(void *)(*(void *)(a2 + 80) + 8)));
  if (v25)
  {
    int v26 = v24;
    do
    {
      if (v18 == *(_DWORD *)(*v25 + 24) && v13 == *(void *)(*v25 + 16))
      {
        sub_10001FA38(3, "%s: found matching fast match: position %jd, block %zu (position %jd, size %zu)", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a4);
        if (!v26)
        {
          if (qword_100058F00) {
            BOOL v27 = qword_100058F08 == 0;
          }
          else {
            BOOL v27 = 1;
          }
          if (!v27) {
            sub_10003B4DC();
          }
          if (qword_100058F00) {
            qword_100058F08 = qword_100058F00;
          }
          if (sigsetjmp(dword_100058F10, 0) >= 1)
          {
            qword_100058F00 = qword_100058F08;
            qword_100058F08 = 0;
            if (dword_100058FD8)
            {
              int v15 = *__error();
              uint64_t v16 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315138;
                v41 = a4;
LABEL_65:
                p_s1 = buf;
LABEL_66:
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s: file truncated while reading", p_s1, 0xCu);
              }
LABEL_67:
              *__error() = v15;
            }
            goto LABEL_68;
          }
          qword_100058F00 = *(void *)(a2 + 32);
          int v28 = (char *)sub_100010F34((void *)qword_100058F00, *(void *)a2);
          sub_10001BFB0(v28, v13, (unsigned __int8 *)&__s1, a1);
          if (qword_100058F00 != *(void *)(a2 + 32)) {
            sub_10003B4B0();
          }
          qword_100058F00 = qword_100058F08;
          qword_100058F08 = 0;
        }
        if (!memcmp(&__s1, (const void *)(*v25 + 28), a3[3]))
        {
          sub_10001FA38(3, "%s: sender verifies slow match", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a4);
          return *v25;
        }
        int v26 = 1;
      }
      unint64_t v25 = (void *)v25[1];
    }
    while (v25);
  }
  if (qword_100058F00) {
    BOOL v29 = qword_100058F08 == 0;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29) {
    sub_10003B484();
  }
  if (qword_100058F00) {
    qword_100058F08 = qword_100058F00;
  }
  if (sigsetjmp(dword_100058F10, 0) < 1)
  {
    qword_100058F00 = *(void *)(a2 + 32);
    int v31 = sub_100010F34((void *)qword_100058F00, *(void *)a2);
    int v32 = *(_DWORD *)(a2 + 92);
    int v33 = *(_DWORD *)(a2 + 88) - *(char *)v31;
    *(_DWORD *)(a2 + 88) = v33;
    int v34 = v32 - v13 * *(char *)v31;
    *(_DWORD *)(a2 + 92) = v34;
    if (v9 > v38)
    {
      int v35 = v33 + *((char *)v31 + v13);
      *(_DWORD *)(a2 + 88) = v35;
      *(_DWORD *)(a2 + 92) = v35 + v34;
    }
    if (qword_100058F00 != *(void *)(a2 + 32)) {
      sub_10003B4B0();
    }
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
    return 0;
  }
  else
  {
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
    if (dword_100058FD8)
    {
      int v15 = *__error();
      uint64_t v16 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v41 = a4;
        goto LABEL_65;
      }
      goto LABEL_67;
    }
LABEL_68:
    sub_10001FDC8("%s: file truncated while reading", a4);
    return -1;
  }
}

void *sub_100003580(uint64_t a1, int *a2)
{
  uint64_t v5 = 0;
  sub_10001E37C(a1, &v5, 0x10uLL, a2[10]);
  sub_10001E37C(a1, &v5, 0x10uLL, a2[4]);
  sub_10001E37C(a1, &v5, 0x10uLL, a2[6]);
  result = sub_10001E37C(a1, &v5, 0x10uLL, a2[2]);
  if (v5 != 16) {
    sub_10003B534();
  }
  return result;
}

uint64_t *sub_10000360C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v9 = (void *)a6;
  uint64_t v10 = (uint64_t *)a5;
  int v70 = 0;
  int v14 = *a7;
  if (!a5 && v14) {
    sub_10003B560();
  }
  if ((v14 | 2) != 2) {
    sub_10003B58C();
  }
  if (!a5)
  {
    unsigned int v18 = (uint64_t *)malloc_type_calloc(1uLL, 0x30uLL, 0x1020040C9D978F5uLL);
    if (!v18)
    {
      if (dword_100058FD8)
      {
        int v38 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B320();
        }
        *__error() = v38;
      }
      sub_10001FBD8("calloc", v19, v20, v21, v22, v23, v24, v25, v66);
      return 0;
    }
    uint64_t v10 = v18;
    if (!sub_10001EED0(a1, a3, 0x500uLL))
    {
      if (dword_100058FD8)
      {
        int v26 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B5B8();
        }
        *__error() = v26;
      }
      sub_10001FC88("iobuf_alloc");
      goto LABEL_76;
    }
  }
  if (!v14)
  {
    if ((unint64_t)sub_10001EF94((uint64_t)a3) < 0x10) {
      return v10;
    }
    if (sub_10001F6C8(a3, v10 + 5))
    {
      BOOL v27 = v10 + 2;
      if (sub_10001F6C8(a3, v10 + 2))
      {
        if (sub_10001F6C8(a3, v10 + 3))
        {
          v69 = v9;
          int v28 = (unint64_t *)(v10 + 1);
          if (sub_10001F6C8(a3, v10 + 1))
          {
            unint64_t v35 = *v28;
            if (!*v28 || (uint64_t v36 = *v27, v35 < *v27))
            {
              if (dword_100058FD8)
              {
                int v37 = *__error();
                log = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v62 = v10[5];
                  uint64_t v63 = *v27;
                  unint64_t v64 = *v28;
                  uint64_t v65 = v10[3];
                  *(_DWORD *)buf = 136316162;
                  uint64_t v72 = a4;
                  __int16 v73 = 2048;
                  uint64_t v74 = v62;
                  __int16 v75 = 2048;
                  uint64_t v76 = v63;
                  __int16 v77 = 2048;
                  unint64_t v78 = v64;
                  __int16 v79 = 2048;
                  uint64_t v80 = v65;
                  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s: read block prologue: %zu blocks of %zu B, %zu B remainder, %zu B checksum", buf, 0x34u);
                }
                *__error() = v37;
              }
              sub_10001FA38(2, "%s: read block prologue: %zu blocks of %zu B, %zu B remainder, %zu B checksum", v29, v30, v31, v32, v33, v34, a4);
              *a7 = 2;
              uint64_t v9 = v69;
              void *v69 = 0;
              goto LABEL_6;
            }
            if (dword_100058FD8)
            {
              int v61 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003B6A4();
              }
              *__error() = v61;
              unint64_t v35 = *v28;
              uint64_t v36 = *v27;
            }
            sub_10001FB50("block remainder %zu is greater than block size %zu", v35, v36);
LABEL_76:
            free((void *)v10[4]);
            free(v10);
            return 0;
          }
          if (dword_100058FD8)
          {
            int v55 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_73:
            }
              sub_10003B670();
LABEL_74:
            *__error() = v55;
          }
        }
        else if (dword_100058FD8)
        {
          int v55 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_73;
          }
          goto LABEL_74;
        }
      }
      else if (dword_100058FD8)
      {
        int v55 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_73;
        }
        goto LABEL_74;
      }
    }
    else if (dword_100058FD8)
    {
      int v55 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    sub_10001FC88("iobuf_read_size");
    goto LABEL_76;
  }
LABEL_6:
  if (*a7 != 2) {
    sub_10003B644();
  }
  size_t v15 = v10[5];
  if (v15 && !v10[4])
  {
    uint64_t v39 = *(void *)(a1 + 200);
    if (!**(_DWORD **)(v39 + 8) && *(_DWORD *)v39)
    {
      uint64_t v56 = v10[1];
      if (v56) {
        size_t v17 = v56 + v10[2] * (v15 - 1);
      }
      else {
        size_t v17 = v10[2] * v15;
      }
LABEL_49:
      *a7 = 3;
      *uint64_t v10 = v17;
      if (dword_100058FD8)
      {
        int v53 = *__error();
        v54 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v59 = v10[5];
          uint64_t v60 = *v10;
          *(_DWORD *)buf = 136315650;
          uint64_t v72 = a4;
          __int16 v73 = 2048;
          uint64_t v74 = v59;
          __int16 v75 = 2048;
          uint64_t v76 = v60;
          _os_log_debug_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "%s: read blocks: %zu blocks, %jd B total blocked data", buf, 0x20u);
        }
        *__error() = v53;
      }
      sub_10001FA38(2, "%s: read blocks: %zu blocks, %jd B total blocked data", (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a4);
      return v10;
    }
    v40 = malloc_type_calloc(v15, 0x30uLL, 0x100004064842E6AuLL);
    v10[4] = (uint64_t)v40;
    if (v40)
    {
      size_t v17 = 0;
      v68 = v9;
      size_t v16 = *v9;
      size_t v15 = v10[5];
      goto LABEL_39;
    }
    if (dword_100058FD8)
    {
      int v57 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B320();
      }
      *__error() = v57;
    }
    sub_10001FBD8("calloc", v41, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, v66);
    goto LABEL_76;
  }
  v68 = v9;
  size_t v16 = *v9;
  if (*v9) {
    size_t v17 = v10[2] * v16;
  }
  else {
    size_t v17 = 0;
  }
LABEL_39:
  if (v16 < v15)
  {
    uint64_t v42 = 48 * v16;
    do
    {
      if (sub_10001EF94((uint64_t)a3) < (unint64_t)(v10[3] + 4)) {
        break;
      }
      uint64_t v43 = v10[4];
      sub_10001F604(a3, &v70);
      int v44 = (size_t *)(v43 + v42);
      *(_DWORD *)(v43 + v42 + 24) = v70;
      size_t v45 = v10[3];
      if (v45 >= 0x11) {
        sub_10003B5EC();
      }
      sub_10001F508(a3, (char *)v44 + 28, v45);
      *int v44 = v17;
      v44[1] = v16;
      if (v16 == v10[5] - 1 && (uint64_t v52 = v10[1]) != 0)
      {
        *(void *)(v43 + v42 + 16) = v52;
      }
      else
      {
        uint64_t v52 = v10[2];
        *(void *)(v43 + v42 + 16) = v52;
        if (!v52) {
          sub_10003B618();
        }
      }
      v17 += v52;
      sub_10001FA38(3, "%s: read block %zu, length %zu B", v46, v47, v48, v49, v50, v51, a4);
      ++v16;
      v42 += 48;
    }
    while (v16 < v10[5]);
  }
  size_t *v68 = v16;
  if (v16 >= v10[5]) {
    goto LABEL_49;
  }
  return v10;
}

uint64_t sub_100003D44(uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = 0;
  if (sub_10001DDD4(a1, a2, v11, 0x10uLL))
  {
    if (sub_10001EC28((uint64_t)v11, &v10, 0x10uLL, a3 + 5))
    {
      uint64_t v4 = a3 + 2;
      if (sub_10001EC28((uint64_t)v11, &v10, 0x10uLL, a3 + 2))
      {
        uint64_t v5 = a3 + 3;
        if (sub_10001EC28((uint64_t)v11, &v10, 0x10uLL, a3 + 3))
        {
          uint64_t v6 = a3 + 1;
          if (sub_10001EC28((uint64_t)v11, &v10, 0x10uLL, v6))
          {
            if (*v4 && *v6 >= *v4)
            {
              if (!dword_100058FD8)
              {
                sub_10001FC88("non-zero length is less than remainder", v10);
                return 0;
              }
              int v8 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003B7C4();
              }
              uint64_t v9 = "non-zero length is less than remainder";
            }
            else
            {
              if (*v5 <= 0x10uLL && (*v5 & 0x80000000) == 0) {
                return 1;
              }
              if (!dword_100058FD8)
              {
                sub_10001FC88("inappropriate checksum length", v10);
                return 0;
              }
              int v8 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003B790();
              }
              uint64_t v9 = "inappropriate checksum length";
            }
            goto LABEL_29;
          }
          if (dword_100058FD8)
          {
            int v8 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_27:
            }
              sub_10003B75C();
LABEL_28:
            uint64_t v9 = "io_unbuffer_size";
LABEL_29:
            *__error() = v8;
LABEL_31:
            sub_10001FC88(v9, v10);
            return 0;
          }
        }
        else if (dword_100058FD8)
        {
          int v8 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_27;
          }
          goto LABEL_28;
        }
      }
      else if (dword_100058FD8)
      {
        int v8 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }
    }
    else if (dword_100058FD8)
    {
      int v8 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    uint64_t v9 = "io_unbuffer_size";
    goto LABEL_31;
  }
  if (dword_100058FD8)
  {
    int v8 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B728();
    }
    uint64_t v9 = "io_read_buf";
    goto LABEL_29;
  }
  sub_10001FC88("io_read_buf", v10);
  return 0;
}

uint64_t sub_100004090(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(&v55[1], 0, 112);
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  v55[0] = a2;
  int v7 = *(_DWORD *)(a2 + 8);
  LODWORD(v55[1]) = *(_DWORD *)(a4 + 40);
  LODWORD(v55[2]) = v7;
  HIDWORD(v64) = v7;
  DWORD1(v60) = -1;
  int v8 = *(const char **)(a2 + 24);
  if (v8) {
    sub_100022F70(v8, v55);
  }
  sub_100030E38(a1, (uint64_t)v55);
  sub_100030C18((uint64_t)a1);
  if (!sub_10001E174((uint64_t)v55, a3, v55[2]))
  {
    if (dword_100058FD8)
    {
      int v18 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B7F8();
      }
      *__error() = v18;
    }
    sub_10001FC88("io_write_int");
    goto LABEL_25;
  }
  if (!sub_10001E948(v55, a3, (char *)&v55[2] + 4))
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
LABEL_24:
    sub_10001FC88("io_read_int");
LABEL_25:
    uint64_t v20 = 1;
    goto LABEL_26;
  }
  if (!sub_10001E948(v55, a3, (char *)&v55[1] + 4))
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_22:
      }
        sub_10003B82C();
LABEL_23:
      *__error() = v19;
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  int v15 = HIDWORD(v55[2]);
  if (SHIDWORD(v55[2]) <= 26)
  {
    if (dword_100058FD8)
    {
      int v16 = *__error();
      size_t v17 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B860((int *)&v55[2] + 1, v17);
      }
      *__error() = v16;
      int v15 = HIDWORD(v55[2]);
    }
    sub_10001FB50("remote protocol %d is older than our minimum supported %d: exiting", v15, 27);
LABEL_40:
    uint64_t v20 = 2;
    goto LABEL_26;
  }
  char v22 = v55[2];
  if (SHIDWORD(v55[2]) < SLODWORD(v55[2])) {
    HIDWORD(v64) = HIDWORD(v55[2]);
  }
  if (dword_100058FD8)
  {
    int v23 = *__error();
    uint64_t v24 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)char v66 = v55[2];
      *(_WORD *)&v66[4] = 1024;
      *(_DWORD *)&v66[6] = HIDWORD(v55[2]);
      __int16 v67 = 1024;
      int v68 = HIDWORD(v64);
      __int16 v69 = 1024;
      int v70 = HIDWORD(v55[1]);
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "client detected client version %d, server version %d, negotiated protocol version %d, seed %d", buf, 0x1Au);
    }
    *__error() = v23;
    char v22 = v55[2];
  }
  uint64_t v20 = 1;
  sub_10001FA38(1, "client detected client version %d, server version %d, negotiated protocol version %d, seed %d", v9, v10, v11, v12, v13, v14, v22);
  uint64_t v31 = v55[0];
  if (*(void *)(v55[0] + 528))
  {
    if (sub_100007BEC(v55))
    {
      if (dword_100058FD8)
      {
        int v32 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B9E0();
        }
        *__error() = v32;
      }
      sub_10001FC88("batch_open");
      goto LABEL_40;
    }
    uint64_t v20 = 0;
    uint64_t v31 = v55[0];
  }
  if (*(void *)(v31 + 496) && !*(_DWORD *)(a4 + 40)) {
    LODWORD(v60) = a3;
  }
  else {
    DWORD2(v56) = 1;
  }
  int v33 = *(_DWORD *)(v31 + 512);
  if (v33 == -1) {
    sub_10003B8EC();
  }
  if (dword_100058FD8)
  {
    int v34 = *__error();
    unint64_t v35 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      if (*(_DWORD *)(v55[0] + 512)) {
        uint64_t v36 = "disabled";
      }
      else {
        uint64_t v36 = "enabled";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)char v66 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Delta transmission %s for this transfer", buf, 0xCu);
    }
    *__error() = v34;
    int v33 = *(_DWORD *)(v55[0] + 512);
  }
  if (v33) {
    int v37 = "disabled";
  }
  else {
    int v37 = "enabled";
  }
  sub_10001FA38(1, "Delta transmission %s for this transfer", v25, v26, v27, v28, v29, v30, (char)v37);
  if (*(_DWORD *)(a4 + 40) == 1)
  {
    if (dword_100058FD8)
    {
      int v44 = *__error();
      size_t v45 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        uint64_t v46 = *(const char **)(a4 + 8);
        if (!v46) {
          uint64_t v46 = "(local)";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)char v66 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "client starting receiver: %s", buf, 0xCu);
      }
      *__error() = v44;
    }
    uint64_t v47 = *(const char **)(a4 + 8);
    if (!v47) {
      uint64_t v47 = "(local)";
    }
    sub_10001FA38(1, "client starting receiver: %s", v38, v39, v40, v41, v42, v43, (char)v47);
    if (*(_DWORD *)(v55[0] + 204)) {
      DWORD2(v57) = 1;
    }
    if (!sub_1000276FC((uint64_t)v55, (uint64_t)a1, a3, a3, *(char **)(a4 + 32)))
    {
      if (dword_100058FD8)
      {
        int v48 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B918();
        }
        *__error() = v48;
      }
      sub_10001FC88("rsync_receiver");
      goto LABEL_26;
    }
    goto LABEL_83;
  }
  if (dword_100058FD8)
  {
    int v49 = *__error();
    uint64_t v50 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      uint64_t v51 = *(const char **)(a4 + 8);
      if (!v51) {
        uint64_t v51 = "(local)";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)char v66 = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "client starting sender: %s", buf, 0xCu);
    }
    *__error() = v49;
  }
  uint64_t v52 = *(const char **)(a4 + 8);
  if (!v52) {
    uint64_t v52 = "(local)";
  }
  sub_10001FA38(1, "client starting sender: %s", v38, v39, v40, v41, v42, v43, (char)v52);
  if (sub_10002B1D4((uint64_t)v55, a3, a3, *(void *)(a4 + 24), *(const char ***)(a4 + 16)))
  {
LABEL_83:
    if (sub_10001CE94(v55, a3))
    {
      if (BYTE8(v64))
      {
        if ((uint64_t)v64 < *(void *)(v55[0] + 592)) {
          sub_10003B980();
        }
        uint64_t v20 = 25;
      }
      else if (*((void *)&v63 + 1))
      {
        uint64_t v20 = 23;
      }
      else
      {
        uint64_t v20 = 0;
      }
    }
    else
    {
      if (dword_100058FD8)
      {
        int v53 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B94C();
        }
        *__error() = v53;
      }
      sub_10001FC88("data remains in read pipe");
      uint64_t v20 = 14;
    }
    goto LABEL_26;
  }
  if (dword_100058FD8)
  {
    int v54 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B9AC();
    }
    *__error() = v54;
  }
  sub_10001FC88("rsync_sender");
LABEL_26:
  sub_100007E48(v55, a4, v20);
  return v20;
}

uint64_t sub_100004800(int a1, int a2)
{
  uint64_t result = fork();
  if (result != -1)
  {
    if (result) {
      _exit(0);
    }
    uint64_t result = setsid();
    if (result != -1)
    {
      if (a1)
      {
        if (!a2)
        {
LABEL_8:
          int v5 = open("/dev/null", 2);
          if (v5 != -1)
          {
            int v6 = v5;
            dup2(v5, 0);
            dup2(v6, 1);
            dup2(v6, 2);
            uint64_t result = 0;
            if (v6 < 3) {
              return result;
            }
            close(v6);
          }
        }
      }
      else
      {
        chdir("/");
        if (!a2) {
          goto LABEL_8;
        }
      }
      return 0;
    }
  }
  return result;
}

void *sub_1000048B8(void *result, rsize_t __n)
{
  if (__n) {
    return (void *)memset_s(result, __n, 0, __n);
  }
  return result;
}

void *sub_1000048CC(void *a1, unint64_t a2, unint64_t a3)
{
  if (a2 && (a3 | a2) >> 32 && !is_mul_ok(a2, a3))
  {
    *__error() = 12;
    return 0;
  }
  else
  {
    size_t v5 = a3 * a2;
    return malloc_type_realloc(a1, v5, 0x2D8944B5uLL);
  }
}

char *sub_100004924(char *a1, unint64_t a2, size_t count, size_t size)
{
  if (a1)
  {
    if (count && (size | count) >> 32 && !is_mul_ok(count, size))
    {
      int v6 = __error();
      int v7 = 0;
      int v8 = 12;
LABEL_10:
      int *v6 = v8;
      return v7;
    }
    if (a2 && (size | a2) >> 32 && !is_mul_ok(a2, size))
    {
      int v6 = __error();
      int v7 = 0;
      int v8 = 22;
      goto LABEL_10;
    }
    size_t v10 = size * count;
    size_t v11 = size * a2;
    size_t v12 = size * count - size * a2;
    if (size * count <= size * a2)
    {
      if (v11 - v10 < v11 >> 1 && v11 - v10 < getpagesize())
      {
        bzero(&a1[v10], v11 - v10);
        return a1;
      }
      uint64_t v14 = (char *)malloc_type_malloc(v10, 0xF00773C3uLL);
      int v7 = v14;
      if (!v14) {
        return v7;
      }
      memcpy(v14, a1, v10);
      if (!v11) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v13 = (char *)malloc_type_malloc(size * count, 0xF00773C3uLL);
      int v7 = v13;
      if (!v13) {
        return v7;
      }
      memcpy(v13, a1, v11);
      bzero(&v7[v11], v12);
      if (!v11)
      {
LABEL_18:
        free(a1);
        return v7;
      }
    }
    memset_s(a1, v11, 0, v11);
    goto LABEL_18;
  }
  return (char *)malloc_type_calloc(count, size, 0xFA0F27A6uLL);
}

uint64_t sub_100004A94(char *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    do
    {
      if ((_DefaultRuneLocale.__runetype[v4] & 0x4000) == 0) {
        break;
      }
      int v5 = *++v3;
      uint64_t v4 = v5;
    }
    while ((v5 & 0x80000000) == 0);
  }
  unsigned int v6 = 0;
  while (v4 == 43)
  {
    if (v6) {
      goto LABEL_42;
    }
    unsigned int v6 = 1;
LABEL_11:
    unsigned int v7 = *++v3;
    uint64_t v4 = v7;
  }
  if (v4 == 45)
  {
    if (v6) {
      goto LABEL_42;
    }
    unsigned int v6 = -1;
    goto LABEL_11;
  }
  if ((v4 & 0x80) != 0)
  {
    unsigned int v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
LABEL_31:
    if (v6 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = v6;
    }
    uint64_t v16 = v9 * v15;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    int v11 = 0;
    while (1)
    {
      uint64_t v12 = v4 - 48;
      if (v4 != 46 && v12 > 9) {
        break;
      }
      if (v4 == 46)
      {
        if (v10) {
          goto LABEL_42;
        }
        unsigned int v10 = 1;
      }
      else if (v10)
      {
        if (v10 <= 0x13)
        {
          if (v8 > 0xCCCCCCCCCCCCCCCLL || ((10 * v8) ^ 0x7FFFFFFFFFFFFFFFuLL) < v12) {
            goto LABEL_52;
          }
          ++v10;
          uint64_t v8 = 10 * v8 + v12;
        }
      }
      else
      {
        if (++v11 >= 0x15) {
          goto LABEL_52;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_52;
        }
        uint64_t v13 = 10 * v9;
        if ((v13 ^ 0x7FFFFFFFFFFFFFFFuLL) < v12) {
          goto LABEL_52;
        }
        unsigned int v10 = 0;
        uint64_t v9 = v13 + v12;
      }
      int v14 = *++v3;
      uint64_t v4 = v14;
      if (v14 < 0) {
        goto LABEL_31;
      }
    }
    if (v6 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v6;
    }
    uint64_t v16 = v9 * v24;
    if (!v4)
    {
      uint64_t result = 0;
      *a2 = v16;
      return result;
    }
  }
  uint64_t v17 = 0;
  while (1)
  {
    int v18 = *v3;
    __darwin_ct_rune_t v19 = aBkmgtpe[v17];
    if (v18 == v19 || __tolower(v19) == (char)v18) {
      break;
    }
    if (++v17 == 7) {
      goto LABEL_42;
    }
  }
  uint64_t v20 = v3[1];
  if (v3[1] < 0)
  {
    if (!__maskrune(v20, 0x500uLL)) {
      goto LABEL_50;
    }
LABEL_42:
    uint64_t v21 = __error();
    int v22 = 22;
LABEL_43:
    *uint64_t v21 = v22;
    return 0xFFFFFFFFLL;
  }
  if ((_DefaultRuneLocale.__runetype[v20] & 0x500) != 0) {
    goto LABEL_42;
  }
LABEL_50:
  uint64_t v25 = qword_1000451A0[v17];
  uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL / v25;
  if (v16 > 0x7FFFFFFFFFFFFFFFLL / v25 || v16 < (uint64_t)0x8000000000000000 / v25)
  {
LABEL_52:
    uint64_t v21 = __error();
    int v22 = 34;
    goto LABEL_43;
  }
  for (; v8 >= v26; --v10)
    v8 /= 10;
  uint64_t v27 = v25 * v16;
  uint64_t v28 = v8 * v25;
  if (v10)
  {
    unsigned int v29 = v10 - 1;
    if (v10 != 1)
    {
      do
      {
        v28 /= 10;
        --v29;
      }
      while (v29);
    }
  }
  uint64_t result = 0;
  if (v6 == -1) {
    uint64_t v28 = -v28;
  }
  *a2 = v28 + v27;
  return result;
}

uint64_t sub_100004D54(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 200);
  if (*(_DWORD *)a3) {
    unsigned int v7 = "outgoing chmod";
  }
  else {
    unsigned int v7 = "incoming chmod";
  }
  if (sub_100019BE8(*(uint64_t **)(v6 + 1128), a2, v7))
  {
    uint64_t v16 = 0;
    if (sub_100019F34(*(void *)(v6 + 1128), a2, v7, &v16)) {
      sub_10003BA14();
    }
    int v8 = sub_100022F70(v16, (_WORD *)a1);
    if (v8)
    {
      strerror(v8);
      sub_100004E24(a1, "%s: failed to parse '%s': %s", v9, v10, v11, v12, v13, v14, (char)a2);
      return 0;
    }
    *(void *)(a3 + 24) = v16;
  }
  return 1;
}

void sub_100004E24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *(void *)(a1 + 200);
  __s = 0;
  int v11 = vasprintf(&__s, a2, &a9);
  if (v11 != -1)
  {
    int v12 = *(_DWORD *)(v10 + 1172);
    if (!*(_DWORD *)(a1 + 144))
    {
      if (sub_10001D870(a1, v12, "@ERROR ", 7uLL)
        && sub_10001D878(a1, *(_DWORD *)(v10 + 1172), __s))
      {
        goto LABEL_18;
      }
      if (!dword_100058FD8) {
        goto LABEL_17;
      }
      int v20 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    if (sub_10001D668(a1, v12, __s, v11, 1))
    {
      if (sub_10001D668(a1, *(_DWORD *)(v10 + 1172), "\n", 1uLL, 1))
      {
LABEL_18:
        free(__s);
        return;
      }
      if (dword_100058FD8)
      {
        int v20 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    else if (dword_100058FD8)
    {
      int v20 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_15:
      }
        sub_10003BA40();
LABEL_16:
      *__error() = v20;
    }
LABEL_17:
    sub_10001FBD8("io_write", v13, v14, v15, v16, v17, v18, v19, (char)&a9);
    goto LABEL_18;
  }
}

uint64_t sub_100004FB8(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a3 + 120)) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 200);
  if (!sub_100019BE8(*(uint64_t **)(v8 + 1128), a2, "numeric ids"))
  {
    *(_DWORD *)(a3 + 120) = a4 != 0;
    return 1;
  }
  int v17 = 0;
  if (sub_100019CF4(*(uint64_t **)(v8 + 1128), a2, "numeric ids", &v17))
  {
    if (dword_100058FD8)
    {
      int v16 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BA74();
      }
      *__error() = v16;
    }
    sub_10001FBD8("%s: 'numeric ids' invalid", v9, v10, v11, v12, v13, v14, v15, (char)a2);
    return 0;
  }
  else
  {
    uint64_t result = 1;
    if (v17) {
      *(_DWORD *)(a3 + 120) = 1;
    }
  }
  return result;
}

uint64_t sub_1000050BC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 200);
  if (!*(_DWORD *)(a3 + 568)
    && sub_100019CF4(*(uint64_t **)(v6 + 1128), a2, "ignore errors", (int *)(a3 + 568)))
  {
    uint64_t v13 = "%s: 'ignore errors' invalid";
    goto LABEL_6;
  }
  if (sub_100019CF4(*(uint64_t **)(v6 + 1128), a2, "ignore nonreadable", (int *)(a3 + 604)))
  {
    uint64_t v13 = "%s: 'ignore nonreadable' invalid";
LABEL_6:
    sub_100004E24(a1, v13, v7, v8, v9, v10, v11, v12, v15);
    return 0;
  }
  return 1;
}

uint64_t sub_100005158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 200);
  uid_t v5 = geteuid();
  *(unsigned char *)(v4 + 1177) = v5 == 0;
  if (v5) {
    return 1;
  }
  uint64_t v21 = 0;
  int v22 = 0;
  if (sub_100019F34(*(void *)(v4 + 1128), a2, "uid", &v21)) {
    sub_10003BB08();
  }
  if (!sub_100005250(v21, 0, (_DWORD *)(v4 + 1164)))
  {
    sub_100004E24(a1, "%s: uid '%s' invalid", v7, v8, v9, v10, v11, v12, a2);
    return 0;
  }
  if (sub_100019F34(*(void *)(v4 + 1128), a2, "gid", &v22)) {
    sub_10003BADC();
  }
  uint64_t v13 = (_DWORD *)(v4 + 1168);
  uint64_t v6 = 1;
  if (!sub_100005250(v22, 1, v13))
  {
    sub_100004E24(a1, "%s: gid '%s' invalid", v14, v15, v16, v17, v18, v19, a2);
    return 0;
  }
  return v6;
}

uint64_t sub_100005250(const char *a1, int a2, _DWORD *a3)
{
  if (a2)
  {
    uid_t v5 = getgrnam(a1);
    if (v5)
    {
LABEL_3:
      LODWORD(v6) = v5[4];
LABEL_4:
      *a3 = v6;
      return 1;
    }
  }
  else
  {
    uid_t v5 = getpwnam(a1);
    if (v5) {
      goto LABEL_3;
    }
  }
  __endptr = 0;
  *__error() = 0;
  uint64_t v6 = strtoll(a1, &__endptr, 10);
  uint64_t v8 = __error();
  uint64_t result = 0;
  if (!*v8)
  {
    if (*__endptr) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = (unint64_t)(v6 - 0x80000000) >= 0xFFFFFFFF00000000;
    }
    if (v9) {
      goto LABEL_4;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000052F8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  if (!*(unsigned char *)(v2 + 1177)) {
    return 1;
  }
  gid_t v5 = *(_DWORD *)(v2 + 1168);
  if (v5 && setgid(v5) == -1)
  {
    sub_100004E24(a1, "%s: setgid to '%d' failed", v6, v7, v8, v9, v10, v11, a2);
  }
  else
  {
    uid_t v12 = *(_DWORD *)(v2 + 1164);
    if (!v12 || setuid(v12) != -1) {
      return 1;
    }
    sub_100004E24(a1, "%s: setuid to '%d' failed", v13, v14, v15, v16, v17, v18, a2);
  }
  return 0;
}

uint64_t sub_100005398(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 200);
  sub_100005448(v3, a2, "filter", 0, 0);
  sub_100005448(v3, a2, "include from", 2, 1);
  sub_100005448(v3, a2, "include", 2, 0);
  sub_100005448(v3, a2, "exclude from", 1, 1);
  sub_100005448(v3, a2, "exclude", 1, 0);
  return 1;
}

uint64_t sub_100005448(uint64_t a1, const char *a2, char *a3, uint64_t a4, int a5)
{
  uint64_t result = sub_100019BE8(*(uint64_t **)(a1 + 1128), a2, a3);
  if (result)
  {
    uint64_t v11 = 0;
    if (sub_100019F34(*(void *)(a1 + 1128), a2, a3, &v11)) {
      sub_10003BB34();
    }
    if (a5) {
      return (uint64_t)sub_100029A48(v11, a4, 10);
    }
    else {
      return sub_10002936C(v11, a4, 0xAu);
    }
  }
  return result;
}

uint64_t sub_1000054D8(uint64_t a1, const char *a2)
{
  uint64_t v17 = 0;
  int __s1 = 0;
  BOOL v16 = 0;
  uint64_t v4 = *(void *)(a1 + 200);
  BOOL v5 = sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "hosts deny");
  if (!sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "hosts allow"))
  {
    int v12 = 0;
LABEL_9:
    if (!v5) {
      return 1;
    }
    goto LABEL_10;
  }
  if (sub_100019F34(*(void *)(v4 + 1128), a2, "hosts allow", &__s1)) {
    sub_10003BB8C();
  }
  if (sub_10000565C(a1, __s1, &v16, (_DWORD *)&v17 + 1) == -1)
  {
    uint64_t v13 = "failed to process allow host list";
LABEL_19:
    sub_100004E24(a1, v13, v6, v7, v8, v9, v10, v11, v15);
    return 0;
  }
  int v12 = HIDWORD(v17);
  if (SHIDWORD(v17) < 1) {
    goto LABEL_9;
  }
  if (v16) {
    return 1;
  }
  if (!v5) {
    goto LABEL_18;
  }
LABEL_10:
  if (sub_100019F34(*(void *)(v4 + 1128), a2, "hosts deny", &__s1)) {
    sub_10003BB60();
  }
  if (sub_10000565C(a1, __s1, &v16, &v17) == -1)
  {
    uint64_t v13 = "failed to process deny host list";
    goto LABEL_19;
  }
  if ((int)v17 < 1)
  {
    if (v12 >= 1)
    {
LABEL_18:
      char v15 = v4 + 16;
      uint64_t v13 = "access denied by allow policy from %s [%s]";
      goto LABEL_19;
    }
  }
  else if (v16)
  {
    sub_100004E24(a1, "access denied by deny policy from %s [%s]", v6, v7, v8, v9, v10, v11, v4 + 16);
    return 0;
  }
  return 1;
}

uint64_t sub_10000565C(uint64_t a1, char *__s1, BOOL *a3, _DWORD *a4)
{
  __stringp = strdup(__s1);
  if (__stringp)
  {
    int v13 = 0;
    uint64_t v14 = (char **)((char *)&__endptr[17] + 4);
    while (1)
    {
      while (1)
      {
        do
        {
          char v15 = (unsigned __int8 *)strsep(&__stringp, ", \t");
          BOOL v16 = (char *)v15;
          if (!v15)
          {
LABEL_46:
            *a4 = v13;
            *a3 = v16 != 0;
            free(__stringp);
            return 0;
          }
        }
        while (!*v15);
        ++v13;
        uint64_t v17 = *(void *)(a1 + 200);
        if (*(unsigned char *)(v17 + 16) && !sub_100028DE0(v15, (char *)(v17 + 16), 0)) {
          goto LABEL_46;
        }
        uint64_t v18 = strrchr(v16, 47);
        if (v18) {
          break;
        }
        if (!strcmp(v16, (const char *)(v17 + 1041))) {
          goto LABEL_46;
        }
      }
      uint64_t v19 = v18;
      uint64_t v40 = a4;
      uint64_t v41 = a3;
      int v20 = v14;
      uint64_t v21 = *(unsigned __int8 **)(v17 + 1088);
      int v22 = v21[1];
      int v23 = v18 + 1;
      memset(__endptr, 0, sizeof(__endptr));
      *__error() = 0;
      unint64_t v24 = strtoul(v23, __endptr, 10);
      if (*__error() || *__endptr[0])
      {
        if (v22 == 2) {
          uint64_t v25 = (char **)((char *)&__endptr[1] + 4);
        }
        else {
          uint64_t v25 = &__endptr[2];
        }
        if (inet_pton(v22, v23, v25) == 1)
        {
          BYTE1(__endptr[1]) = v22;
          goto LABEL_15;
        }
LABEL_36:
        uint64_t v14 = v20;
        a4 = v40;
        a3 = v41;
      }
      else
      {
        if (v22 == 2) {
          uint64_t v31 = (char **)((char *)&__endptr[1] + 4);
        }
        else {
          uint64_t v31 = &__endptr[2];
        }
        if (v22 == 2) {
          size_t v32 = 4;
        }
        else {
          size_t v32 = 16;
        }
        __b = v31;
        bzero(v31, v32);
        if (v24 > 8 * v32) {
          goto LABEL_36;
        }
        memset(__b, 255, v24 >> 3);
        if ((v24 & 7) != 0) {
          *((unsigned char *)__b + (v24 >> 3)) |= -1 << (8 - (v24 & 7));
        }
LABEL_15:
        *uint64_t v19 = 0;
        uint64_t v14 = v20;
        if (v22 == 2) {
          uint64_t v26 = v20;
        }
        else {
          uint64_t v26 = &__endptr[18];
        }
        a4 = v40;
        a3 = v41;
        if (inet_pton(v22, v16, v26) == 1)
        {
          BYTE1(__endptr[17]) = v22;
          uint64_t v27 = v21 + 8;
          unint64_t v28 = 16;
          if (v22 == 2)
          {
            unint64_t v28 = 4;
            uint64_t v27 = v21 + 4;
          }
          unsigned int v29 = (char **)((char *)&__endptr[1] + 4);
          if (v22 != 2) {
            unsigned int v29 = &__endptr[2];
          }
          uint64_t v30 = &__endptr[18];
          if (v22 == 2) {
            uint64_t v30 = v14;
          }
          if (((*v27 ^ *(unsigned __int8 *)v30) & *(unsigned __int8 *)v29) == 0)
          {
            uint64_t v33 = 1;
            while (v28 != v33)
            {
              int v34 = v27[v33] ^ *((unsigned __int8 *)v30 + v33);
              int v35 = *((unsigned __int8 *)v29 + v33++);
              if ((v34 & v35) != 0)
              {
                unint64_t v36 = v33 - 1;
                goto LABEL_45;
              }
            }
            unint64_t v36 = v28;
LABEL_45:
            if (v36 >= v28) {
              goto LABEL_46;
            }
          }
        }
      }
    }
  }
  sub_100004E24(a1, "out of memory", v7, v8, v9, v10, v11, v12, v38);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100005994(uint64_t a1, const char *a2)
{
  unint64_t v36 = 0;
  unsigned int v35 = 0;
  uint64_t v4 = *(void *)(a1 + 200);
  if (sub_100019ED0(*(uint64_t **)(v4 + 1128), a2, "max connections", &v35))
  {
    if (dword_100058FD8)
    {
      int v11 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BCB4();
      }
      *__error() = v11;
    }
    sub_10001FB50("%s: 'max connections' invalid", a2);
  }
  else if ((v35 & 0x80000000) != 0)
  {
    sub_100004E24(a1, "module '%s' is currently disabled", v5, v6, v7, v8, v9, v10, (char)a2);
  }
  else
  {
    if (!v35) {
      return 0;
    }
    if (sub_100019F34(*(void *)(v4 + 1128), a2, "lock file", &v36)) {
      sub_10003BC88();
    }
    char v19 = (char)v36;
    if (*v36)
    {
      uint64_t v20 = v35;
      long long v37 = xmmword_1000451D8;
      uint64_t v38 = 0x300000000;
      uint64_t v21 = *(void *)(a1 + 200);
      int v22 = open(v36, 513, 420);
      if (v22 == -1)
      {
        sub_100004E24(a1, "%s: failed to open the lock file", v23, v24, v25, v26, v27, v28, (char)a2);
      }
      else
      {
        int v29 = v22;
        if ((int)v20 >= 1)
        {
          uint64_t v30 = 0;
          while (1)
          {
            *(void *)&long long v37 = v30 & 0xFFFFFFFC;
            *((void *)&v37 + 1) = 4;
            if (fcntl(v29, 8, &v37) != -1)
            {
              uint64_t result = 0;
              *(_DWORD *)(v21 + 1160) = v29;
              return result;
            }
            if (*__error() != 35) {
              break;
            }
            v30 += 4;
            if (4 * v20 == v30) {
              goto LABEL_32;
            }
          }
          if (dword_100058FD8)
          {
            int v34 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003BC20();
            }
            *__error() = v34;
          }
          sub_10001FBD8("%s: lock fcntl", v31, v23, v24, v25, v26, v27, v28, v19);
        }
LABEL_32:
        sub_100004E24(a1, "%s: too many connections (%d max)", v23, v24, v25, v26, v27, v28, (char)a2);
        close(v29);
      }
    }
    else
    {
      if (dword_100058FD8)
      {
        int v33 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003BBB8();
        }
        *__error() = v33;
      }
      sub_10001FBD8("%s: 'lock file' is empty with 'max connections' in place", v12, v13, v14, v15, v16, v17, v18, (char)a2);
    }
  }
  return 1;
}

uint64_t sub_100005C4C(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 200);
  if (!sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "pre-xfer exec")
    && !sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "post-xfer exec"))
  {
    return 1;
  }
  unsigned int v35 = 0;
  if (sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "post-xfer exec"))
  {
    if (sub_100019F34(*(void *)(v4 + 1128), a2, "post-xfer exec", &v35)) {
      sub_10003BD74();
    }
    uint64_t v5 = v35;
    if (*v35)
    {
      pid_t v6 = fork();
      if (v6)
      {
        pid_t v13 = v6;
        if (v6 != -1)
        {
          *(_DWORD *)__str = 0;
          sub_100007308(*(void *)(a1 + 200), a2);
          sub_1000073A4("RSYNC_PID", v13);
          do
            pid_t v21 = waitpid(v13, (int *)__str, 0);
          while (v21 == -1 && *__error() == 4);
          if (v21 == v13)
          {
            uint64_t v22 = *(int *)__str;
          }
          else
          {
            *(_DWORD *)__str = -1;
            uint64_t v22 = -1;
          }
          sub_1000073A4("RSYNC_RAW_STATUS", v22);
          if ((__str[0] & 0x7F) != 0) {
            int v27 = -1;
          }
          else {
            int v27 = __str[1];
          }
          *(_DWORD *)__str = v27;
          sub_1000073A4("RSYNC_EXIT_STATUS", v27);
          system(v5);
          _exit(*(int *)__str);
        }
        uint64_t v14 = "%s: failed to fork for post-xfer";
        goto LABEL_18;
      }
    }
  }
  if (!sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "pre-xfer exec")) {
    return 1;
  }
  if (sub_100019F34(*(void *)(v4 + 1128), a2, "pre-xfer exec", &v35)) {
    sub_10003BD48();
  }
  uint64_t v15 = v35;
  if (!*v35) {
    return 1;
  }
  uint64_t v16 = *(void *)(a1 + 200);
  pid_t v17 = getpid();
  if (pipe(v38) == -1 || (pid_t v18 = fork(), v18 == -1))
  {
    char v34 = (char)a2;
    uint64_t v14 = "%s: failed to stage pre-xfer process";
LABEL_18:
    sub_100004E24(a1, v14, v7, v8, v9, v10, v11, v12, v34);
    return 0;
  }
  pid_t v19 = v18;
  if (v18)
  {
    close(v38[0]);
    *(_DWORD *)(v16 + 1152) = v38[1];
    *(_DWORD *)(v16 + 1156) = v19;
    return 1;
  }
  size_t __n = 0;
  close(v38[1]);
  sub_1000073A4("RSYNC_PID", v17);
  sub_100007308(v16, a2);
  uint64_t v23 = (char *)sub_100007428(v38[0], &__n);
  uint64_t result = setenv("RSYNC_ARG0", "rsyncd", 1);
  size_t v24 = __n;
  if (!__n)
  {
LABEL_27:
    free(v23);
    close(0);
    close(1);
    __int16 v25 = system(v15);
    if ((v25 & 0x7F) != 0) {
      int v26 = 1;
    }
    else {
      int v26 = HIBYTE(v25);
    }
    _exit(v26);
  }
  uint64_t v28 = 0;
  int v29 = v23;
  while (v28 != 513)
  {
    uint64_t v30 = (char *)memchr(v29, 0, v24);
    if (!v30) {
      goto LABEL_27;
    }
    uint64_t v31 = v30;
    if (v28)
    {
      int v32 = snprintf(__str, 0x10uLL, "RSYNC_ARG%ld", v28);
      if (v32 == -1) {
        goto LABEL_27;
      }
    }
    else
    {
      int v32 = __strlcpy_chk();
    }
    if (v32 >= 16) {
      sub_10003BD1C();
    }
    uint64_t result = setenv(__str, v29, 1);
    int v33 = (char *)(v29 - (v31 + 1));
    ++v28;
    int v29 = v31 + 1;
    v24 += (size_t)v33;
    if (!v24) {
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_100005FD8(uint64_t a1, char *__s, char *a3, size_t a4)
{
  uint64_t v4 = *(void *)(a1 + 200);
  pid_t v5 = *(_DWORD *)(v4 + 1156);
  int v6 = *(_DWORD *)(v4 + 1152);
  if (v6 == -1 || v5 <= 0) {
    sub_10003BDA0();
  }
  size_t __buf = 0;
  int v31 = 0;
  BOOL v13 = 0;
  if (__s)
  {
    size_t v12 = strlen(__s) + 1;
    size_t __buf = v12 + a4;
    if (!sub_100006144(v6, (char *)&__buf, 8uLL)
      || !sub_100006144(v6, __s, v12)
      || !sub_100006144(v6, a3, a4))
    {
      BOOL v13 = 1;
    }
  }
  close(v6);
  *(_DWORD *)(v4 + 1152) = -1;
  while (1)
  {
    pid_t v14 = waitpid(v5, &v31, 0);
    if (v14 == v5) {
      break;
    }
    if (v14 == -1 && *__error() != 4)
    {
      sub_100004E24(a1, "error waiting for pre-exec xfer child", v21, v22, v23, v24, v25, v26, v30);
      return 0;
    }
  }
  if ((v31 & 0x7F) == 0 && (v31 & 0xFF00) != 0)
  {
    int v29 = "pre-xfer exec command denies transfer";
LABEL_23:
    sub_100004E24(a1, v29, v15, v16, v17, v18, v19, v20, v30);
    BOOL v13 = 1;
    goto LABEL_24;
  }
  if ((v31 & 0x7F) != 0)
  {
    int v29 = "pre-xfer exec command failed";
    goto LABEL_23;
  }
LABEL_24:
  *(_DWORD *)(v4 + 1156) = 0;
  return !v13;
}

uint64_t sub_100006144(int __fd, char *__buf, size_t __nbyte)
{
  if (!__nbyte) {
    return 1;
  }
  size_t v3 = __nbyte;
  uint64_t v6 = 0;
  uint64_t v7 = __buf;
  while (1)
  {
    while (1)
    {
      ssize_t v8 = write(__fd, v7, v3);
      ssize_t v9 = v8;
      if (v8 <= 0) {
        break;
      }
      v6 += v8;
      uint64_t v7 = &__buf[v6];
      uint64_t result = 1;
      v3 -= v9;
      if (!v3) {
        return result;
      }
    }
    if (v8 != -1) {
      break;
    }
    if (*__error() != 4)
    {
      if (dword_100058FD8)
      {
        int v18 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003BDCC();
        }
        *__error() = v18;
      }
      sub_10001FBD8("write", v10, v11, v12, v13, v14, v15, v16, v19);
      return 0;
    }
  }
  return 0;
}

uint64_t sub_10000623C(uint64_t a1, const char *a2, const sockaddr *a3, socklen_t a4)
{
  uint64_t v8 = *(void *)(a1 + 200);
  if (!sub_100019BE8(*(uint64_t **)(v8 + 1128), a2, "hosts allow")
    && !sub_100019BE8(*(uint64_t **)(v8 + 1128), a2, "hosts deny")
    && !sub_100019BE8(*(uint64_t **)(v8 + 1128), a2, "pre-xfer exec")
    && !sub_100019BE8(*(uint64_t **)(v8 + 1128), a2, "post-xfer exec"))
  {
    return 1;
  }
  int v9 = getnameinfo(a3, a4, (char *)(v8 + 16), 0x401u, 0, 0, 0);
  if (!v9) {
    return 1;
  }
  gai_strerror(v9);
  sub_100004E24(a1, "%s: reverse dns lookup failed: %s", v10, v11, v12, v13, v14, v15, (char)a2);
  return 0;
}

uint64_t sub_100006328(uint64_t a1, const char *a2, int a3)
{
  BOOL v6 = a3 != 0;
  BOOL v24 = a3 == 0;
  uint64_t v7 = *(void *)(a1 + 200);
  if (sub_100019BE8(*(uint64_t **)(v7 + 1128), a2, "munge symlinks"))
  {
    if (sub_100019CF4(*(uint64_t **)(v7 + 1128), a2, "munge symlinks", (int *)&v24))
    {
      sub_100004E24(a1, "%s: 'munge symlinks' invalid", v8, v9, v10, v11, v12, v13, (char)a2);
      return 0;
    }
    BOOL v6 = !v24;
  }
  if (!a3 || !v6)
  {
    if (v6)
    {
      uint64_t v15 = sub_1000065AC;
LABEL_15:
      *(void *)(a1 + 232) = v15;
      return 1;
    }
    memset(&v23, 0, sizeof(v23));
    if (stat("/rsyncd-munged/", &v23) == -1)
    {
      if (*__error() != 2)
      {
        uint64_t v22 = "%s: failed to stat munge dir";
        goto LABEL_18;
      }
    }
    else if ((v23.st_mode & 0xF000) == 0x4000)
    {
      uint64_t v22 = "%s: security violation: munger failure";
LABEL_18:
      sub_100004E24(a1, v22, v16, v17, v18, v19, v20, v21, (char)a2);
      return 0;
    }
    uint64_t v15 = sub_100006470;
    goto LABEL_15;
  }
  return 1;
}

uint64_t sub_100006470(char *__s1, char **a2, int a3)
{
  if (a3)
  {
    if (asprintf(a2, "%s%s", "/rsyncd-munged/", __s1) != -1) {
      return 0;
    }
    if (dword_100058FD8)
    {
      int v13 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B04C();
      }
      *__error() = v13;
    }
    uint64_t v14 = "asprintf";
  }
  else
  {
    if (strncmp(__s1, "/rsyncd-munged/", 0xFuLL))
    {
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    uint64_t v15 = strdup(__s1 + 15);
    *a2 = v15;
    if (v15) {
      return 0;
    }
    if (dword_100058FD8)
    {
      int v16 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v16;
    }
    uint64_t v14 = "strdup";
  }
  sub_10001FBD8(v14, v5, v6, v7, v8, v9, v10, v11, v17);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000065AC(const char *a1, char **a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = sub_10000A700(a1);
    *a2 = v4;
    if (v4)
    {
      return 0;
    }
    else
    {
      if (dword_100058FD8)
      {
        int v6 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003BE34();
        }
        *__error() = v6;
      }
      sub_10001FC88("make_safe_link");
      return 12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t sub_100006648(uint64_t a1, const char *a2)
{
  int v6 = 0;
  if (sub_100019ED0(*(uint64_t **)(*(void *)(a1 + 200) + 1128), a2, "max verbosity", &v6))
  {
    if (dword_100058FD8)
    {
      int v3 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE68();
      }
      *__error() = v3;
    }
    sub_10001FB50("%s: 'max verbosity' invalid", a2);
    return 0;
  }
  else
  {
    int v5 = dword_100058FDC;
    if (dword_100058FDC >= v6) {
      int v5 = v6;
    }
    dword_100058FDC = v5;
    return 1;
  }
}

uint64_t sub_10000671C(char *__s2, size_t __n, char *__s1)
{
  size_t v4 = __n;
  if (!__n) {
    size_t v4 = strlen(__s2);
  }
  uint64_t result = strncmp(__s1, __s2, v4);
  if (!result)
  {
    if (__s1[v4] == 47)
    {
      uint64_t v7 = &__s1[v4 + 1];
      size_t v8 = strlen(v7) + 1;
      return (uint64_t)memmove(__s1, v7, v8);
    }
    else if (!__s1[v4])
    {
      *int __s1 = 0;
    }
  }
  return result;
}

size_t sub_1000067C4(char *a1, int a2, char **a3)
{
  LODWORD(v4) = a2;
  size_t result = strlen(a1);
  if ((int)v4 >= 1)
  {
    size_t v7 = result;
    uint64_t v4 = v4;
    do
    {
      size_t v8 = *a3++;
      size_t result = sub_10000671C(a1, v7, v8);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100006820(char *__filename, int a2)
{
  if (!__filename || (char v2 = (char)__filename, !*__filename))
  {
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  uint64_t v4 = fopen(__filename, "a");
  if (v4)
  {
LABEL_12:
    sub_10001F990((uint64_t)v4);
    return 1;
  }
  if (a2)
  {
    if (dword_100058FD8)
    {
      int v12 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BED0();
      }
      *__error() = v12;
    }
    sub_10001FBD8("%s: fopen", v5, v6, v7, v8, v9, v10, v11, v2);
  }
  return 0;
}

BOOL sub_1000068E8(uint64_t a1, _DWORD *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (char)a3;
  unsigned int v14 = 0;
  uint64_t v10 = *(void *)(a1 + 200);
  if (*a2)
  {
    if (sub_100019CF4(*(uint64_t **)(v10 + 1128), a3, "write only", (int *)&v14))
    {
      if (dword_100058FD8)
      {
        int v11 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003BFA0();
        }
        *__error() = v11;
      }
      sub_10001FB50("%s: 'write only' invalid");
      return 0;
    }
    goto LABEL_18;
  }
  if (a4 == -1)
  {
    if (sub_100019CF4(*(uint64_t **)(v10 + 1128), a3, "read only", (int *)&v14))
    {
      if (dword_100058FD8)
      {
        int v13 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003BF38();
        }
        *__error() = v13;
      }
      sub_10001FB50("%s: 'read only' invalid");
      return 0;
    }
LABEL_18:
    a4 = v14;
    if (v14) {
      goto LABEL_19;
    }
    return 1;
  }
  unsigned int v14 = a4;
  if (!a4) {
    return 1;
  }
LABEL_19:
  sub_100004E24(a1, "module '%s' is %s-protected", (uint64_t)a3, a4, a5, a6, a7, a8, v8);
  return v14 == 0;
}

uint64_t sub_100006A84(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 200);
  if (!sub_100019BE8(*(uint64_t **)(v4 + 1128), a2, "refuse options")) {
    return 1;
  }
  int __s1 = 0;
  if (sub_100019F34(*(void *)(v4 + 1128), a2, "refuse options", &__s1)) {
    sub_10003C060();
  }
  __stringp = strdup(__s1);
  if (!__stringp)
  {
    sub_100004E24(a1, "out of memory", v5, v6, v7, v8, v9, v10, v27);
    return 0;
  }
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  size_t v27 = 0;
  size_t v28 = 0;
  int v33 = 0;
  __s = 0;
  int v11 = strsep(&__stringp, " ");
  if (!v11) {
    goto LABEL_50;
  }
  int v12 = v11;
  int v13 = 0;
  while (1)
  {
    __darwin_ct_rune_t v14 = *v12;
    if (*v12)
    {
      if (v14 < 0)
      {
        if (!__maskrune(v14, 0x40000uLL)) {
          break;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v14] & 0x40000) == 0)
      {
        break;
      }
      if (v12[1] && (v12[1] != 42 || v12[2] || !sub_100006ED4(0, *v12))) {
        break;
      }
      char v15 = *v12;
      if (!sub_100006FA0(a1, &__s, &v28, &v27, *v12)) {
        goto LABEL_48;
      }
      if (v15 == 97) {
        v13 |= v12[1] == 0;
      }
      if (v12[1]) {
        break;
      }
    }
LABEL_40:
    int v12 = strsep(&__stringp, " ");
    if (!v12)
    {
      if (__s)
      {
        if (v13)
        {
          char v22 = 114;
          uint64_t v23 = &_mh_execute_header.magic + 1;
          do
          {
            if (!sub_100006FA0(a1, &__s, &v28, &v27, v22)) {
              sub_10003C008();
            }
            char v22 = aRlptgod[v23++];
          }
          while (v23 != 8);
        }
        else if (!strchr(__s, 97))
        {
          uint64_t v26 = 7;
          do
          {
            if (!sub_100006FA0(a1, &__s, &v28, &v27, 97)) {
              sub_10003C034();
            }
            --v26;
          }
          while (v26);
        }
        uint64_t v25 = __s;
        if (strchr(__s, 68))
        {
          uint64_t result = sub_100007130(a1, &v33, &v30, &v29, "devices");
          if (!result) {
            return result;
          }
          uint64_t result = sub_100007130(a1, &v33, &v30, &v29, "specials");
          if (!result) {
            return result;
          }
        }
        if (strchr(v25, 80))
        {
          uint64_t result = sub_100007130(a1, &v33, &v30, &v29, "partial");
          if (!result) {
            return result;
          }
          uint64_t result = sub_100007130(a1, &v33, &v30, &v29, "progress");
          if (!result) {
            return result;
          }
        }
        goto LABEL_51;
      }
LABEL_50:
      uint64_t v25 = 0;
LABEL_51:
      *(void *)(v4 + 1192) = v25;
      *(void *)(v4 + 1184) = v33;
      *(void *)(v4 + 1200) = v30;
      return 1;
    }
  }
  int v16 = strchr(v12, 42);
  char v17 = "address";
  if ("address")
  {
    uint64_t v18 = v16;
    uint64_t v19 = &off_100054AF8;
    while (1)
    {
      if (sub_100028DE0((unsigned __int8 *)v12, v17, 0)) {
        goto LABEL_36;
      }
      if (v19[2]) {
        break;
      }
      uint64_t v20 = *((unsigned int *)v19 + 6);
      if (v20 > 0x7F)
      {
        if (!__maskrune(*((_DWORD *)v19 + 6), 0x40000uLL)) {
          break;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v20] & 0x40000) == 0)
      {
        break;
      }
      if (!v18 || sub_100006ED4(0, (char)v20))
      {
        if (v20 == 97) {
          v13 |= strcmp(v12, "archive") == 0;
        }
        if (!sub_100006FA0(a1, &__s, &v28, &v27, (char)v20)) {
          goto LABEL_48;
        }
      }
LABEL_36:
      uint64_t v21 = v19[4];
      v19 += 4;
      char v17 = v21;
      if (!v21) {
        goto LABEL_37;
      }
    }
    if ((!v18 || sub_100006ED4(v17, 0))
      && !sub_100007064(a1, &v33, &v30, &v29, (uint64_t)v19))
    {
      goto LABEL_48;
    }
    goto LABEL_36;
  }
LABEL_37:
  if (sub_100028DE0((unsigned __int8 *)v12, "delete", 0)
    || sub_100007130(a1, &v33, &v30, &v29, "remove-sent-files")
    && sub_100007130(a1, &v33, &v30, &v29, "remove-source-files"))
  {
    goto LABEL_40;
  }
LABEL_48:
  free(__stringp);
  free(__s);
  free(v33);
  return 0;
}

unint64_t sub_100006ED4(char *__s1, int a2)
{
  if (!__s1 && !a2) {
    sub_10003C0B8();
  }
  if ((__s1 != 0) == (a2 != 0)) {
    sub_10003C08C();
  }
  if (a2)
  {
    unint64_t v3 = 0x3FDFFFFFFFFFFFFEuLL >> (a2 - 48);
    if ((a2 - 48) >= 0x3F) {
      LOBYTE(v3) = 1;
    }
  }
  else if (!strcmp(__s1, "server"))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = v4;
      if (v4 == 6) {
        break;
      }
      int v6 = strcmp(__s1, off_100054688[v4 + 1]);
      unint64_t v4 = v5 + 1;
    }
    while (v6);
    LOBYTE(v3) = v5 > 5;
  }
  return v3 & 1;
}

uint64_t sub_100006FA0(uint64_t a1, char **a2, size_t *a3, size_t *a4, int __c)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    size_t v11 = strlen("0468B:CDEFHIKLOPRSVWabcde:f:ghklnopqrtuvxyz");
    *a4 = v11;
    int v12 = (char *)malloc_type_calloc(1uLL, v11 + 1, 0x88B5A70CuLL);
    if (!v12)
    {
      sub_100004E24(a1, "out of memory", v13, v14, v15, v16, v17, v18, v21);
      return 0;
    }
    uint64_t v8 = v12;
    *a2 = v12;
  }
  if (!strchr(v8, __c))
  {
    size_t v19 = *a3;
    if (*a3 >= *a4) {
      sub_10003C0E4();
    }
    *a3 = v19 + 1;
    v8[v19] = __c;
  }
  return 1;
}

uint64_t sub_100007064(uint64_t a1, void **a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  unint64_t v10 = *a3;
  if (*a3 == *a4)
  {
    *a4 = v10 + 8;
    uint64_t v9 = sub_1000048CC(v9, v10 + 8, 8uLL);
    if (!v9)
    {
      sub_100004E24(a1, "out of memory", v12, v13, v14, v15, v16, v17, v21);
      return 0;
    }
    *a2 = v9;
    unint64_t v10 = *a3;
  }
  if (v10)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v10;
    while (*v18 != a5)
    {
      ++v18;
      if (!--v19) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v10 >= *a4) {
      sub_10003C110();
    }
    *a3 = v10 + 1;
    *((void *)v9 + v10) = a5;
  }
  return 1;
}

uint64_t sub_100007130(uint64_t a1, void **a2, unint64_t *a3, unint64_t *a4, char *__s2)
{
  int v6 = "address";
  if (!"address") {
    return 1;
  }
  size_t v11 = &off_100054AF8;
  while (strcmp(v6, __s2))
  {
    uint64_t v12 = v11[4];
    v11 += 4;
    int v6 = v12;
    if (!v12) {
      return 1;
    }
  }

  return sub_100007064(a1, a2, a3, a4, (uint64_t)v11);
}

uint64_t sub_1000071D8(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 200);
  __filename = 0;
  if (!sub_100019BE8(*(uint64_t **)(v3 + 1128), a2, "log file")) {
    return 1;
  }
  if (sub_100019F34(*(void *)(v3 + 1128), a2, "log file", &__filename)) {
    sub_10003C1F0();
  }
  if (!__filename || !*__filename || sub_100006820(__filename, 0)) {
    return 1;
  }
  sub_10001F990(0);
  int v6 = 0;
  if (sub_100019F34(*(void *)(v3 + 1128), a2, "syslog facility", &v6)) {
    sub_10003C1C4();
  }
  if (!sub_10001F918(v6)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v5 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003C13C();
    }
    *__error() = v5;
  }
  sub_10001FC88("%s: 'syslog facility' does not exist: %s", a2, v6);
  return 0;
}

uint64_t sub_100007308(uint64_t a1, const char *a2)
{
  setenv("RSYNC_MODULE_NAME", a2, 1);
  setenv("RSYNC_MODULE_PATH", *(const char **)(a1 + 1120), 1);
  setenv("RSYNC_HOST_ADDR", (const char *)(a1 + 1041), 1);
  setenv("RSYNC_HOST_NAME", (const char *)(a1 + 16), 1);
  if (*(void *)(a1 + 1096)) {
    uint64_t v3 = *(const char **)(a1 + 1096);
  }
  else {
    uint64_t v3 = "";
  }

  return setenv("RSYNC_USER_NAME", v3, 1);
}

uint64_t sub_1000073A4(const char *a1, uint64_t a2)
{
  uint64_t result = snprintf(__str, 0x20uLL, "%ld", a2);
  if (result <= 0x1F) {
    return setenv(a1, __str, 1);
  }
  return result;
}

void *sub_100007428(int a1, size_t *a2)
{
  int v4 = fcntl(a1, 3);
  if (v4 != -1 && (v4 & 4) != 0) {
    fcntl(a1, 4, v4 & 0xFFFFFFFB);
  }
  size_t size = 0;
  if (!sub_1000074E8(a1, (uint64_t)&size, 8uLL)
    || (int v6 = malloc_type_malloc(size, 0x71D99128uLL)) == 0
    || (uint64_t v7 = v6, !sub_1000074E8(a1, (uint64_t)v6, size)))
  {
    _exit(1);
  }
  close(a1);
  *a2 = size;
  return v7;
}

uint64_t sub_1000074E8(int a1, uint64_t a2, size_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v3 = a3;
  uint64_t v6 = 0;
  while (1)
  {
    ssize_t v7 = read(a1, (void *)(a2 + v6), v3);
    if (v7 <= 0) {
      break;
    }
LABEL_4:
    v6 += v7;
    v3 -= v7;
    if (!v3) {
      return 1;
    }
  }
  while (v7 == -1 && (*__error() == 4 || *__error() == 35))
  {
    ssize_t v7 = read(a1, (void *)(a2 + v6), v3);
    if (v7 >= 1) {
      goto LABEL_4;
    }
  }
  return 0;
}

void sub_1000075B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1000075D8(void *a1, uint64_t a2, uint64_t a3)
{
  int v51 = 0;
  uint64_t v50 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v52 = a2;
  LODWORD(v53) = 1;
  DWORD2(v53) = 29;
  HIDWORD(v68) = 29;
  DWORD1(v64) = -1;
  sub_100030E38(a1, (uint64_t)&v52);
  sub_100030C18((uint64_t)a1);
  uint64_t v6 = open(*(const char **)(v52 + 520), 0);
  if (v6 != -1)
  {
    uint64_t v14 = v6;
    if (sub_10001E948(&v52, v6, &v50))
    {
      if (sub_10001E948(&v52, v14, (char *)&v50 + 4))
      {
        if (sub_10001E948(&v52, v14, &v51))
        {
          if (SHIDWORD(v50) <= 26)
          {
            if (dword_100058FD8)
            {
              int v21 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003C290();
              }
              *__error() = v21;
            }
            sub_10001FB50("batch protocol %d is older than our minimum supported %d: exiting");
LABEL_33:
            uint64_t v30 = 14;
            goto LABEL_34;
          }
          if (SHIDWORD(v50) > SDWORD2(v53))
          {
            if (dword_100058FD8)
            {
              int v32 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003C310();
              }
              *__error() = v32;
            }
            sub_10001FB50("batch protocol %d is newer than our maximum supported %d: exiting");
            goto LABEL_33;
          }
          uint64_t v49 = a3;
          uint64_t v34 = 0;
          unsigned int v35 = &off_1000546C0;
          unint64_t v36 = &dword_100058FD8;
          while (v34 != 7 || SHIDWORD(v68) >= 29)
          {
            unsigned int v37 = (v50 >> v34) & 1;
            uint64_t v38 = v35[1];
            if (*(_DWORD *)&v38[a2] != v37)
            {
              if (*v36)
              {
                uint64_t v39 = v36;
                int v40 = *__error();
                uint64_t v41 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v42 = *v35;
                  int v43 = *(_DWORD *)&v38[a2];
                  *(_DWORD *)buf = 136315650;
                  *(void *)int v70 = v42;
                  *(_WORD *)&v70[8] = 1024;
                  *(_DWORD *)v71 = v43;
                  *(_WORD *)&v71[4] = 1024;
                  unsigned int v72 = v37;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Mismatch of %s option, changing from %d -> %d", buf, 0x18u);
                }
                *__error() = v40;
                unint64_t v36 = v39;
              }
              sub_10001FA38(0, "Mismatch of %s option, changing from %d -> %d", v15, v16, v17, v18, v19, v20, (char)*v35);
            }
            *(_DWORD *)&v38[a2] = v37;
            ++v34;
            v35 += 3;
            if (v34 == 8)
            {
              if (SHIDWORD(v68) > 28) {
                goto LABEL_52;
              }
              break;
            }
          }
          if (*(_DWORD *)(a2 + 32))
          {
            int v44 = 1;
          }
          else
          {
            if (*(_DWORD *)(a2 + 192) != 1)
            {
LABEL_52:
              HIDWORD(v53) = HIDWORD(v50);
              char v45 = BYTE8(v53);
              if (SHIDWORD(v50) < SDWORD2(v53)) {
                HIDWORD(v68) = HIDWORD(v50);
              }
              DWORD1(v53) = v51;
              if (*v36)
              {
                int v46 = *__error();
                uint64_t v47 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)int v70 = DWORD2(v53);
                  *(_WORD *)&v70[4] = 1024;
                  *(_DWORD *)&v70[6] = HIDWORD(v53);
                  *(_WORD *)v71 = 1024;
                  *(_DWORD *)&v71[2] = DWORD1(v53);
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "batch detected client version %d, batch version %d, seed %d\n", buf, 0x14u);
                }
                *__error() = v46;
                char v45 = BYTE8(v53);
              }
              sub_10001FA38(1, "batch detected client version %d, batch version %d, seed %d\n", v15, v16, v17, v18, v19, v20, v45);
              if (sub_1000276FC((uint64_t)&v52, (uint64_t)a1, v14, v14, *(char **)(v49 + 32)))
              {
                uint64_t v30 = 0;
                goto LABEL_34;
              }
              if (*v36)
              {
                int v48 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_10003B918();
                }
                *__error() = v48;
              }
              sub_10001FC88("rsync_receiver");
              goto LABEL_33;
            }
            int v44 = 0;
          }
          *(_DWORD *)(a2 + 192) = v44;
          goto LABEL_52;
        }
        if (dword_100058FD8)
        {
          int v31 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_24:
          }
            sub_10003B82C();
LABEL_25:
          *__error() = v31;
        }
      }
      else if (dword_100058FD8)
      {
        int v31 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }
    }
    else if (dword_100058FD8)
    {
      int v31 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    sub_10001FC88("io_read_int");
    uint64_t v30 = 2;
LABEL_34:
    close(v14);
    return v30;
  }
  if (dword_100058FD8)
  {
    int v22 = *__error();
    uint64_t v23 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003C21C((uint64_t)&v52, v23, v24, v25, v26, v27, v28, v29);
    }
    *__error() = v22;
  }
  sub_10001FBD8("%s: open", v7, v8, v9, v10, v11, v12, v13, *(void *)(v52 + 520));
  return 14;
}

uint64_t sub_100007BEC(_DWORD *a1)
{
  char v2 = *(const char **)(*(void *)a1 + 528);
  if (!v2) {
    sub_10003C394();
  }
  if (a1[47] != -1) {
    sub_10003C434();
  }
  int v3 = open(v2, 1537, 384);
  if (v3 != -1)
  {
    int v11 = v3;
    int v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = &qword_1000546C8;
    while (1)
    {
      if (v14 == 7)
      {
        int v16 = a1[65];
        if (v16 < 29) {
          break;
        }
      }
      uint64_t v17 = *v15;
      v15 += 3;
      if (*(_DWORD *)(v17 + *(void *)a1))
      {
        int v12 = (1 << v14) | v13;
        int v13 = v12;
      }
      if (++v14 == 8)
      {
        int v16 = a1[65];
        break;
      }
    }
    int v18 = a1[3];
    if (sub_10001E174((uint64_t)a1, v3, v12))
    {
      if (sub_10001E174((uint64_t)a1, v11, v16))
      {
        if (sub_10001E174((uint64_t)a1, v11, v18))
        {
          uint64_t result = 0;
          a1[47] = v11;
          return result;
        }
        if (!dword_100058FD8) {
          goto LABEL_30;
        }
        int v28 = *__error();
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      if (dword_100058FD8)
      {
        int v28 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
    }
    else if (dword_100058FD8)
    {
      int v28 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_28:
      }
        sub_10003B7F8();
LABEL_29:
      *__error() = v28;
    }
LABEL_30:
    sub_10001FC88("io_write_int");
    close(v11);
    return 2;
  }
  if (dword_100058FD8)
  {
    int v20 = *__error();
    int v21 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003C3C0((uint64_t)a1, v21, v22, v23, v24, v25, v26, v27);
    }
    *__error() = v20;
  }
  sub_10001FBD8("%s: open", v4, v5, v6, v7, v8, v9, v10, *(void *)(*(void *)a1 + 528));
  return 14;
}

void sub_100007E48(_DWORD *a1, uint64_t a2, int a3)
{
  int v4 = a1[47];
  if (v4 != -1)
  {
    close(v4);
    a1[47] = -1;
    if (!a3)
    {
      if (snprintf(__str, 0x400uLL, "%s.sh", *(const char **)(*(void *)a1 + 528)) < 1024)
      {
        long long v40 = 0u;
        long long v41 = 0u;
        *(_OWORD *)buf = 0u;
        uint64_t v10 = *(void *)(a2 + 32);
        uint64_t v42 = 0;
        *(void *)&long long v41 = v10;
        int v11 = (void *)sub_100011358(a1, (uint64_t)buf, 0);
        int v12 = (const char **)sub_10002AA94((uint64_t)a1);
        int v13 = fopen(__str, "w");
        if (v13)
        {
          int v21 = v13;
          fwrite("#!/bin/sh\n\n", 0xBuLL, 1uLL, v13);
          if (v11[1])
          {
            uint64_t v22 = v11 + 2;
            do
            {
              uint64_t v23 = (const char *)*(v22 - 2);
              if (!strcmp(v23, ".")) {
                break;
              }
              if (strcmp(v23, "--server"))
              {
                if (!strncmp(v23, "--only-write-batch", 0x12uLL)) {
                  fprintf(v21, "--read-batch=%s ");
                }
                else {
                  fprintf(v21, "%s ");
                }
              }
            }
            while (*v22++);
          }
          free(v11);
          if (*v12)
          {
            if ((int)a1[65] <= 28)
            {
              uint64_t v25 = "--exclude-from=- ";
              size_t v26 = 17;
            }
            else
            {
              uint64_t v25 = "--filter=\". -\"";
              size_t v26 = 14;
            }
            fwrite(v25, v26, 1uLL, v21);
          }
          fprintf(v21, "${1-%s}", (const char *)v41);
          if (*v12)
          {
            fwrite(" <<@REOF@\n", 0xAuLL, 1uLL, v21);
            unsigned int v35 = *v12;
            if (*v12)
            {
              unint64_t v36 = v12 + 1;
              do
              {
                fprintf(v21, "%s\n", v35);
                unsigned int v37 = *v36++;
                unsigned int v35 = v37;
              }
              while (v37);
            }
            fwrite("@REOF@", 6uLL, 1uLL, v21);
          }
          free(v12);
          fputc(10, v21);
          fclose(v21);
        }
        else
        {
          if (dword_100058FD8)
          {
            int v27 = *__error();
            int v28 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003C460((uint64_t)__str, v28, v29, v30, v31, v32, v33, v34);
            }
            *__error() = v27;
          }
          sub_10001FBD8("%s: fopen", v14, v15, v16, v17, v18, v19, v20, (char)__str);
        }
      }
      else
      {
        if (dword_100058FD8)
        {
          int v7 = *__error();
          uint64_t v8 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v9 = *(void *)(*(void *)a1 + 528);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s.sh: path too long, did not write batch shell", buf, 0xCu);
          }
          *__error() = v7;
        }
        sub_10001FD28("%s.sh: path too long, did not write batch shell", *(const char **)(*(void *)a1 + 528));
      }
    }
  }
}

uint64_t sub_1000081F0(int a1, char *const *a2, uint64_t a3)
{
  int __s1 = 0;
  uint64_t v74 = 0;
  bzero(v101, 0x4B8uLL);
  bzero((void *)a3, 0x260uLL);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  long long v88 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  uint64_t v75 = a3;
  *(void *)&long long v88 = v101;
  v102 = "/etc/rsyncd.conf";
  int v108 = -1;
  uint64_t v8 = 1;
  int v107 = -1;
  v71 = (void *)(a3 + 464);
  unsigned int v72 = (void *)(a3 + 256);
  optreset = 1;
  int v70 = (void *)(a3 + 264);
  optind = 1;
  while (1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v7;
    int v11 = getopt_long(a1, a2, "46hv", (const option *)&off_100054780, 0);
    if (v11 > 103)
    {
      uint64_t v8 = 0;
      uint64_t v7 = v10;
      switch(v11)
      {
        case 118:
          ++dword_100058FDC;
          goto LABEL_20;
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 135:
          goto LABEL_76;
        case 128:
          uint64_t v7 = 1;
          uint64_t v8 = v9;
          if (v10) {
            sub_10003C6B8();
          }
          continue;
        case 129:
          continue;
        case 130:
          int v13 = optarg;
          uint64_t v14 = (char **)(a3 + 264);
          goto LABEL_15;
        case 131:
          if (sub_100022EC8(optarg, &v74, 107) == -1) {
            sub_10003C69C();
          }
          *(void *)(a3 + 472) = v74;
          goto LABEL_20;
        case 132:
          v102 = optarg;
          goto LABEL_20;
        case 133:
          int v13 = optarg;
          uint64_t v14 = (char **)(a3 + 256);
          goto LABEL_15;
        case 134:
          uint64_t v6 = optarg;
          goto LABEL_20;
        case 136:
          int v13 = optarg;
          uint64_t v14 = (char **)(a3 + 464);
LABEL_15:
          *uint64_t v14 = v13;
          goto LABEL_20;
        default:
          if (v11 == 104) {
            sub_1000088CC(0);
          }
          goto LABEL_76;
      }
    }
    if (v11 == 52)
    {
      int v12 = 4;
      goto LABEL_9;
    }
    if (v11 != 54) {
      break;
    }
    int v12 = 6;
LABEL_9:
    *(_DWORD *)(a3 + 560) = v12;
LABEL_20:
    uint64_t v7 = v10;
    uint64_t v8 = v9;
  }
  if (v11 != -1) {
LABEL_76:
  }
    sub_1000088CC(1);
  if (!sub_100006820(v6, 1)) {
    return 14;
  }
  dword_100058FF0 = -1;
  BOOL v15 = sub_100033CFC(0);
  if (!v15 && v9 && sub_100004800(0, 0) == -1) {
    sub_10003C4CC();
  }
  uint64_t v16 = sub_1000192D8((uint64_t)&v75, v102, 0);
  uint64_t v104 = v16;
  if (!v16) {
    return 14;
  }
  if (v15) {
    goto LABEL_28;
  }
  *(void *)&long long v94 = 0x300000000;
  sockaddr v93 = (sockaddr)xmmword_1000451F8;
  *(void *)v92 = 0;
  uint64_t v18 = v88;
  if (sub_100019F34(v16, "global", "pid file", v92))
  {
    uint64_t v19 = "";
    *(void *)v92 = "";
  }
  else
  {
    uint64_t v19 = *(const char **)v92;
  }
  if (!*v19) {
    goto LABEL_28;
  }
  int v27 = fopen(v19, "w");
  if (!v27)
  {
    if (dword_100058FD8)
    {
      int v52 = *__error();
      long long v53 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C54C((uint64_t)v92, v53, v54, v55, v56, v57, v58, v59);
      }
      *__error() = v52;
    }
    sub_10001FBD8("%s: fopen", v28, v29, v30, v31, v32, v33, v34, v92[0]);
    return 14;
  }
  unsigned int v35 = v27;
  int v36 = fileno(v27);
  if (fcntl(v36, 8, &v93))
  {
    fclose(v35);
    if (*__error() == 35)
    {
      if (dword_100058FD8)
      {
        int v44 = *__error();
        char v45 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003C5BC((uint64_t)v92, v45, v46, v47, v48, v49, v50, v51);
        }
        *__error() = v44;
      }
      sub_10001FB50("%s: failed to obtain lock (is another rsyncd running?)", *(const char **)v92);
    }
    else
    {
      if (dword_100058FD8)
      {
        int v61 = *__error();
        long long v62 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003C62C((uint64_t)v92, v62, v63, v64, v65, v66, v67, v68);
        }
        *__error() = v61;
      }
      sub_10001FBD8("%s: acquiring lock", v37, v38, v39, v40, v41, v42, v43, v92[0]);
    }
    return 14;
  }
  pid_t v60 = getpid();
  fprintf(v35, "%d\n", v60);
  fflush(v35);
  *(void *)(v18 + 1136) = *(void *)v92;
  *(void *)(v18 + 1144) = v35;
LABEL_28:
  if (!*v70)
  {
    if (sub_100019F34(v104, "global", "address", v70) == -1)
    {
      if (*__error() == 2) {
        sub_10003C4E8();
      }
    }
    else if (!*(unsigned char *)*v70)
    {
      *int v70 = 0;
    }
  }
  if (!*v72 && sub_100019F34(v104, "global", "port", v72)) {
    *unsigned int v72 = "";
  }
  if (sub_100019F34(v104, "global", "motd file", &__s1))
  {
    uint64_t v17 = "";
    int __s1 = "";
  }
  else
  {
    uint64_t v17 = __s1;
  }
  if (!strdup(v17)) {
    sub_10003C514();
  }
  if (!*v71 && sub_100019F34(v104, "global", "socket options", v71)) {
    void *v71 = "";
  }
  if (v15)
  {
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    sockaddr v93 = (sockaddr)0;
    long long v94 = 0u;
    v92[0] = 128;
    if (getpeername(0, &v93, v92) == -1) {
      sub_10003C530();
    }
    return sub_100008920((uint64_t)&v75, 0, &v93, v92[0]);
  }
  else
  {
    sub_10001FA38(-1, "openrsync listening on port '%s'", v20, v21, v22, v23, v24, v25, *v72);
    uint64_t v26 = sub_100031DC8(&v75, (uint64_t (*)(uint64_t *, uint64_t, char **, void))sub_100008920);
    if (v106)
    {
      unlink(v105);
      fclose(v106);
    }
  }
  return v26;
}

void sub_1000088CC(int a1)
{
  char v2 = &__stdoutp;
  if (a1) {
    char v2 = &__stderrp;
  }
  int v3 = *v2;
  int v4 = getprogname();
  fprintf(v3, "usage: %s --daemon [-46hv] [--address=bindaddr] [--bwlimit=limit] [--no-detach]\n\t[--log-file=logfile] [--port=portnumber] [--sockopts=sockopts]\n", v4);
  exit(a1);
}

uint64_t sub_100008920(uint64_t a1, uint64_t a2, const sockaddr *a3, socklen_t a4)
{
  int v136 = 0;
  v137 = 0;
  unsigned int v134 = -1;
  uint64_t v4 = *(void *)(a1 + 200);
  *(void *)(v4 + 1152) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 1172) = a2;
  if (*(_DWORD *)(v4 + 1160) != -1) {
    sub_10003C794();
  }
  uint64_t v9 = *(char **)(v4 + 1112);
  *(void *)(v4 + 1112) = 0;
  uint64_t v10 = *(FILE **)(v4 + 1144);
  if (v10) {
    fclose(v10);
  }
  sub_100019284(*(void *)(v4 + 1128));
  *(void *)(v4 + 1128) = 0;
  sub_1000325DC(a2, "SO_KEEPALIVE");
  sub_1000325DC(a2, *(void *)(*(void *)a1 + 464));
  int sa_family = a3->sa_family;
  if (sa_family != 2 && sa_family != 30) {
    sub_10003C6D4();
  }
  int v135 = 0;
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(v12 + 1088) = a3;
  if (sa_family == 2) {
    int v13 = &a3->sa_data[2];
  }
  else {
    int v13 = &a3->sa_data[6];
  }
  if (!inet_ntop(sa_family, v13, (char *)(v12 + 1041), 0x2Eu))
  {
    if (dword_100058FD8)
    {
      int v38 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C700();
      }
      *__error() = v38;
    }
    sub_10001FBD8("inet_ntop", v14, v15, v16, v17, v18, v19, v20, v131);
    return 14;
  }
  *(_DWORD *)(a1 + 260) = 29;
  *(_DWORD *)(a1 + 16) = 29;
  sub_100030C6C((uint64_t)off_1000586D8);
  LOBYTE(v132) = 0;
  int v21 = fcntl(a2, 3);
  if (v21 == -1 || (LOBYTE(v132) = v21 | 4, fcntl(a2, 4) == -1))
  {
    sub_100004E24(a1, "failed to set non-blocking", v22, v23, v24, v25, v26, v27, (char)v132);
    return 14;
  }
  uint64_t v28 = sub_1000192D8(a1, *(const char **)(v4 + 1104), 1);
  *(void *)(v4 + 1128) = v28;
  if (!v28) {
    return 14;
  }
  socklen_t v133 = a4;
  uint64_t v29 = 0;
  *(_DWORD *)(a1 + 20) = -1;
  char v30 = 1;
  while (1)
  {
    size_t __linecapp = 1024;
    if (!sub_10001DC5C(a1, a2, (uint64_t)__str, (uint64_t *)&__linecapp) || !(__linecapp | v29))
    {
      sub_100004E24(a1, "protocol violation: expected version and module information", v31, v32, v33, v34, v35, v36, (char)v132);
LABEL_40:
      uint64_t v41 = 0;
      goto LABEL_41;
    }
    if (__linecapp == 1024)
    {
      uint64_t v39 = "line buffer overrun";
LABEL_38:
      sub_100004E24(a1, v39, v31, v32, v33, v34, v35, v36, (char)v132);
LABEL_39:
      *__error() = 22;
      goto LABEL_40;
    }
    if ((v30 & 1) == 0) {
      break;
    }
    uint64_t v138 = 0;
    if (*(void *)__str != 0x3A44434E59535240 || __str[8] != 32)
    {
      sub_100004E24(a1, "protocol violation: expected version line, got '%s'", v31, v32, v33, v34, v35, v36, (char)__str);
      goto LABEL_39;
    }
    if (sscanf(&__str[9], "%d.%d", (char *)&v138 + 4, &v138) != 2 && sscanf(&__str[9], "%d", (char *)&v138 + 4) != 1)
    {
      v132 = &__str[9];
      uint64_t v39 = "protocol violation: malformed version line, got '%s'";
      goto LABEL_38;
    }
    *(_DWORD *)(a1 + 20) = HIDWORD(v138);
    snprintf(__str, 0x400uLL, "@RSYNCD: %d", *(_DWORD *)(a1 + 16));
    char v30 = 0;
    uint64_t v29 = 1;
    if (!sub_10001D878(a1, a2, __str)) {
      goto LABEL_40;
    }
  }
  if (__linecapp) {
    uint64_t v40 = __str;
  }
  else {
    uint64_t v40 = "#list";
  }
  uint64_t v41 = strdup(v40);
  if (!v41)
  {
    if (dword_100058FD8)
    {
      int v56 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v56;
    }
    sub_10001FBD8("strdup", v48, v49, v50, v51, v52, v53, v54, (char)v132);
    goto LABEL_40;
  }
  int v55 = *(_DWORD *)(a1 + 20);
  if (v55 <= 26)
  {
    sub_100004E24(a1, "could not negotiate a protocol; client requested %d (supported range: %d to %d)",
      v49,
      v50,
      v51,
      v52,
      v53,
      v54,
      v55);
    goto LABEL_41;
  }
  if (v55 < *(_DWORD *)(a1 + 16)) {
    *(_DWORD *)(a1 + 260) = v55;
  }
  if (*v9)
  {
    size_t __linecapp = 0;
    *(void *)__str = 0;
    uint64_t v57 = fopen(v9, "r");
    if (v57)
    {
      uint64_t v58 = v57;
      while (1)
      {
        ssize_t v59 = getline((char **)__str, &__linecapp, v58);
        if (v59 < 1) {
          break;
        }
        if (!sub_10001D870(a1, a2, *(char **)__str, v59))
        {
          fclose(v58);
          free(*(void **)__str);
          free(v9);
          goto LABEL_41;
        }
      }
      fclose(v58);
      free(*(void **)__str);
    }
  }
  free(v9);
  if (*v41 == 35)
  {
    if (strcmp(v41 + 1, "list"))
    {
      sub_100004E24(a1, "%s is not a known command", v60, v61, v62, v63, v64, v65, (char)v41);
      goto LABEL_41;
    }
    if (!sub_100019B54(*(void **)(*(void *)(a1 + 200) + 1128), (uint64_t (*)(void *, const char *, uint64_t))sub_100009F98, a1))goto LABEL_41; {
    if (sub_10001D878(a1, a2, "@RSYNCD: EXIT"))
    }
    {
      v118 = 0;
      LODWORD(v119) = 0;
      goto LABEL_116;
    }
    if (dword_100058FD8)
    {
      int v124 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C734();
      }
      *__error() = v124;
    }
    v125 = "io_write_line";
LABEL_130:
    sub_10001FBD8(v125, v111, v112, v113, v114, v115, v116, v117, (char)v132);
    goto LABEL_41;
  }
  if (!sub_100019B08(*(uint64_t ***)(v4 + 1128), v41))
  {
    LOBYTE(v132) = (_BYTE)v41;
    v110 = "%s is not a valid module";
    goto LABEL_123;
  }
  if (!sub_10000623C(a1, v41, a3, v133)
    || !sub_1000054D8(a1, v41)
    || sub_100005994(a1, v41))
  {
    goto LABEL_41;
  }
  if (!sub_100009688(a1, v41, (uint64_t)&v134))
  {
    sub_100004E24(a1, "%s: authentication failed", v72, v73, v74, v75, v76, v77, (char)v41);
    goto LABEL_41;
  }
  if (sub_100019CF4(*(uint64_t **)(v4 + 1128), v41, "use chroot", &v135))
  {
    if (dword_100058FD8)
    {
      int v84 = *__error();
      long long v85 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(void *)&char __str[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "%s: 'use chroot' malformed", __str, 0xCu);
      }
      *__error() = v84;
    }
    sub_10001FE50(0, "%s: 'use chroot' malformed", v78, v79, v80, v81, v82, v83, (char)v41);
  }
  else if (v135 && !sub_100019BE8(*(uint64_t **)(v4 + 1128), v41, "use chroot"))
  {
    int v135 = 2;
  }
  if (sub_100019F34(*(void *)(v4 + 1128), v41, "path", v4 + 1120)) {
    sub_10003C768();
  }
  if (!sub_100005398(a1, v41)
    || !sub_1000071D8(a1, v41)
    || !sub_100005C4C(a1, v41))
  {
    goto LABEL_41;
  }
  if (sub_100019BE8(*(uint64_t **)(v4 + 1128), v41, "dont compress"))
  {
    if (dword_100058FD8)
    {
      int v86 = *__error();
      long long v87 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(void *)&char __str[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "%s: 'dont compress' is present but not honored", __str, 0xCu);
      }
      *__error() = v86;
    }
    sub_10001FDC8("%s: 'dont compress' is present but not honored", v41);
  }
  if (!sub_100005158(a1, (uint64_t)v41)) {
    goto LABEL_41;
  }
  chdir(*(const char **)(v4 + 1120));
  if (v135 && chroot(".") == -1)
  {
    if (*__error() != 1 || v135 == 1) {
      goto LABEL_41;
    }
    if (dword_100058FD8)
    {
      int v94 = *__error();
      long long v95 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(void *)&char __str[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "%s: attempt to chroot failed, falling back to 'no' since it is not explicitly set", __str, 0xCu);
      }
      *__error() = v94;
    }
    sub_10001FE50(0, "%s: attempt to chroot failed, falling back to 'no' since it is not explicitly set", v88, v89, v90, v91, v92, v93, (char)v41);
    int v135 = 0;
  }
  *(unsigned char *)(v4 + 1176) = 1;
  if (!sub_1000052F8(a1, (char)v41)) {
    goto LABEL_41;
  }
  if (!sub_10001D878(a1, a2, "@RSYNCD: OK"))
  {
    if (dword_100058FD8)
    {
      int v126 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C734();
      }
      *__error() = v126;
    }
    sub_10001FC88("io_write_line");
    goto LABEL_41;
  }
  if ((sub_100009A3C(a1, v41, a2, &v136, &v137) & 0x80000000) != 0) {
    goto LABEL_41;
  }
  dword_100058FF0 = 0;
  if (sub_100019ED0(*(uint64_t **)(v4 + 1128), v41, "timeout", &dword_100058FF0))
  {
    if (dword_100058FD8)
    {
      int v102 = *__error();
      v103 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(void *)&char __str[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "%s: bad value for 'timeout'", __str, 0xCu);
      }
      *__error() = v102;
    }
    sub_10001FE50(0, "%s: bad value for 'timeout'", v96, v97, v98, v99, v100, v101, (char)v41);
  }
  if (!sub_100006A84(a1, v41)
    || (optreset = 1,
        optind = 1,
        int v104 = v136,
        v105 = (char *)v137,
        (uint64_t v106 = sub_1000232B8(v136, v137, sub_100009EBC, a1)) == 0))
  {
LABEL_41:
    free(v41);
    sub_100019284(*(void *)(v4 + 1128));
    *(void *)(v4 + 1128) = 0;
    int v42 = *(_DWORD *)(v4 + 1160);
    if (v42 != -1)
    {
      close(v42);
      *(_DWORD *)(v4 + 1160) = -1;
    }
    close(*(_DWORD *)(v4 + 1152));
    free(*(void **)(v4 + 1096));
    uint64_t v43 = v136;
    int v44 = v137;
    if (v136 >= 1)
    {
      char v45 = (void **)v137;
      do
      {
        uint64_t v46 = *v45++;
        free(v46);
        --v43;
      }
      while (v43);
    }
    free(v44);
    return 14;
  }
  uint64_t v107 = v106;
  uint64_t v108 = v104 - (uint64_t)optind;
  int v136 = v108;
  v109 = (const char **)&v105[8 * optind];
  v137 = v109;
  if (strcmp(*v109, "."))
  {
    v110 = "protocol violation: expected hard stop before file list";
LABEL_123:
    sub_100004E24(a1, v110, v66, v67, v68, v69, v70, v71, (char)v132);
    goto LABEL_41;
  }
  size_t v119 = v108 - 1;
  int v136 = v119;
  v118 = (char **)(v109 + 1);
  v137 = v118;
  if (!sub_100006648(a1, v41)) {
    goto LABEL_41;
  }
  uint32_t v127 = *(_DWORD *)(v107 + 20);
  if (!v127) {
    uint32_t v127 = arc4random();
  }
  *(_DWORD *)(a1 + 12) = v127;
  if (!sub_10001E174(a1, a2, v127))
  {
    if (dword_100058FD8)
    {
      int v129 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B7F8();
      }
      *__error() = v129;
    }
    v125 = "io_write_int";
    goto LABEL_130;
  }
  *(_DWORD *)(a1 + 144) = 1;
  if (!sub_1000068E8(a1, (_DWORD *)v107, v41, v134, v114, v115, v116, v117)) {
    goto LABEL_41;
  }
  if (*(void *)(v107 + 504)) {
    sub_1000067C4(v41, 1, (char **)(v107 + 504));
  }
  if (!sub_100004D54(a1, v41, v107)
    || !sub_100004FB8(a1, v41, v107, v135)
    || !sub_1000050BC(a1, v41, v107)
    || !sub_100006328(a1, v41, v135))
  {
    goto LABEL_41;
  }
  if ((*(_DWORD *)(v107 + 512) & 0x80000000) != 0) {
    *(_DWORD *)(v107 + 512) = 0;
  }
  *(void *)a1 = v107;
  sub_100030E38(off_1000586D8, a1);
  sub_100030C18((uint64_t)off_1000586D8);
  if (**(_DWORD **)a1)
  {
    if (!sub_10002B1D4(a1, a2, a2, v119, (const char **)v118))
    {
      if (dword_100058FD8)
      {
        int v128 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B9AC();
        }
        *__error() = v128;
      }
      v125 = "rsync_sender";
      goto LABEL_130;
    }
  }
  else if (!sub_1000276FC(a1, (uint64_t)off_1000586D8, a2, a2, *v118))
  {
    if (dword_100058FD8)
    {
      int v130 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B918();
      }
      *__error() = v130;
    }
    v125 = "rsync_receiver";
    goto LABEL_130;
  }
LABEL_116:
  int v120 = *(_DWORD *)(v4 + 1160);
  if (v120 != -1)
  {
    close(v120);
    *(_DWORD *)(v4 + 1160) = -1;
  }
  close(*(_DWORD *)(v4 + 1152));
  free(*(void **)(v4 + 1096));
  if ((int)v119 >= 1)
  {
    uint64_t v121 = v119;
    v122 = (void **)v118;
    do
    {
      v123 = *v122++;
      free(v123);
      --v121;
    }
    while (v121);
  }
  free(v118);
  return 0;
}

uint64_t sub_100009688(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 200);
  if (!sub_100019BE8(*(uint64_t **)(v6 + 1128), a2, "auth users")) {
    return 1;
  }
  if (!sub_100019BE8(*(uint64_t **)(v6 + 1128), a2, "secrets file")) {
    goto LABEL_8;
  }
  int __s1 = 0;
  __filename = 0;
  int v74 = 0;
  if (sub_100019F34(*(void *)(v6 + 1128), a2, "secrets file", &__filename)) {
    sub_10003C820();
  }
  if (!*__filename)
  {
LABEL_8:
    sub_100004E24(a1, "%s: missing secrets file", v7, v8, v9, v10, v11, v12, (char)a2);
    return 0;
  }
  if (sub_100019F34(*(void *)(v6 + 1128), a2, "auth users", &__s1)) {
    sub_10003C7F4();
  }
  if (sub_100019CF4(*(uint64_t **)(v6 + 1128), a2, "strict modes", &v74))
  {
    sub_100004E24(a1, "%s: 'strict modes' invalid", v13, v14, v15, v16, v17, v18, (char)a2);
    return 0;
  }
  uint64_t v20 = fopen(__filename, "r");
  if (!v20)
  {
    sub_100004E24(a1, "%s: could not open secrets file", v21, v22, v23, v24, v25, v26, (char)a2);
    return 0;
  }
  uint64_t v27 = v20;
  if (v74)
  {
    uint64_t v28 = __filename;
    int v29 = fileno(v20);
    if (!sub_100025D6C((uint64_t)v28, v29))
    {
      fclose(v27);
      sub_100004E24(a1, "%s: bad permissions on secrets file", v45, v46, v47, v48, v49, v50, (char)a2);
      return 0;
    }
  }
  arc4random_buf(__buf, 0x80uLL);
  res_9_b64_ntop((const u_char *)__buf, 0x80uLL, (char *)v80, 0x44uLL);
  v77[0] = v80[0];
  v77[1] = v80[1];
  v77[2] = v80[2];
  v77[3] = v80[3];
  char v78 = 10;
  if (!sub_10001D870(a1, *(_DWORD *)(v6 + 1172), "@RSYNCD: AUTHREQD ", 0x12uLL))
  {
    fclose(v27);
    if (dword_100058FD8)
    {
      int v43 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C7C0();
      }
      *__error() = v43;
    }
    int v44 = "io_write_buf";
    goto LABEL_30;
  }
  if (!sub_10001D870(a1, *(_DWORD *)(v6 + 1172), (char *)v77, 0x41uLL))
  {
    fclose(v27);
    if (dword_100058FD8)
    {
      int v51 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C734();
      }
      *__error() = v51;
    }
    int v44 = "io_write_line";
LABEL_30:
    sub_10001FBD8(v44, v36, v37, v38, v39, v40, v41, v42, v73);
    return 0;
  }
  char v78 = 0;
  *(void *)&v80[0] = 2048;
  if (!sub_10001DC5C(a1, *(_DWORD *)(v6 + 1172), (uint64_t)__buf, (uint64_t *)v80))
  {
    fclose(v27);
    sub_100004E24(a1, "%s: expected auth response", v52, v53, v54, v55, v56, v57, (char)a2);
    return 0;
  }
  if (*(void *)&v80[0] == 2048)
  {
    fclose(v27);
    sub_100004E24(a1, "%s: line buffer overflow on auth", v30, v31, v32, v33, v34, v35, (char)a2);
    return 0;
  }
  uint64_t v58 = strchr(__buf, 32);
  if (!v58)
  {
    fclose(v27);
    sub_100004E24(a1, "%s: malformed auth response", v67, v68, v69, v70, v71, v72, (char)a2);
    return 0;
  }
  *uint64_t v58 = 0;
  int v59 = sub_10000A1DC(a1, (char)a2, __s1, v27, __buf, (const char *)v77, v58 + 1, a3);
  fclose(v27);
  if (!v59) {
    return 0;
  }
  uint64_t v60 = strdup(__buf);
  *(void *)(v6 + 1096) = v60;
  if (!v60)
  {
    sub_100004E24(a1, "%s: out of memory", v61, v62, v63, v64, v65, v66, (char)a2);
    return 0;
  }
  return 1;
}

uint64_t sub_100009A3C(uint64_t a1, char *a2, int a3, _DWORD *a4, void *a5)
{
  uint64_t v10 = *(void *)(a1 + 200);
  if (*(_DWORD *)(v10 + 1152) == -1)
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v11 = usbuf_new();
    if (!v11 || (uint64_t v18 = v11, (v19 = usbuf_new()) == 0))
    {
      sub_100004E24(a1, "daemon out of memory", v12, v13, v14, v15, v16, v17, v56);
      return 0xFFFFFFFFLL;
    }
    uint64_t v20 = v19;
  }
  uint64_t v58 = 5;
  uint64_t v21 = sub_100004924(0, 0, 5uLL, 8uLL);
  uint64_t v60 = v21;
  if (!v21)
  {
    sub_100004E24(a1, "daemon out of memory", v22, v23, v24, v25, v26, v27, v56);
    usbuf_delete();
    usbuf_delete();
    if (!v18) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  unint64_t v59 = 1;
  *(void *)uint64_t v21 = 0;
  uint64_t v57 = 1024;
  if (!sub_10001DC5C(a1, a3, (uint64_t)__s1, &v57))
  {
LABEL_34:
    uint64_t v41 = "protocol violation: expected option line";
LABEL_35:
    sub_100004E24(a1, v41, v28, v29, v30, v31, v32, v33, v56);
    *__error() = 22;
    if (!v18) {
      goto LABEL_39;
    }
LABEL_38:
    usbuf_delete();
LABEL_39:
    if (v20) {
      usbuf_delete();
    }
    return 0xFFFFFFFFLL;
  }
  char v34 = 0;
  while (v57)
  {
    if (v57 == 1024)
    {
      uint64_t v41 = "line buffer overrun";
      goto LABEL_35;
    }
    if (v34)
    {
      if (v20)
      {
        if (usbuf_len()) {
          usbuf_putc();
        }
        usbuf_cat();
      }
      memset(&v61, 0, sizeof(v61));
      sub_10000671C(a2, 0, __s1);
      int v35 = glob(__s1, 0, 0, &v61);
      if (v35 != -3 && v35)
      {
        fprintf(__stderrp, "returned %d\n", v35);
        sub_100004E24(a1, "glob '%s' failed", v49, v50, v51, v52, v53, v54, (char)__s1);
        if (!v18) {
          goto LABEL_44;
        }
LABEL_43:
        usbuf_delete();
LABEL_44:
        if (v20) {
          usbuf_delete();
        }
        if (*(_DWORD *)(v10 + 1152) != -1) {
          sub_100005FD8(a1, 0, 0, 0);
        }
        unint64_t v43 = v59;
        uint64_t v42 = v60;
        if (v59)
        {
          int v44 = (void **)v60;
          do
          {
            uint64_t v45 = *v44++;
            free(v45);
            --v43;
          }
          while (v43);
        }
        free(v42);
        return 0xFFFFFFFFLL;
      }
      if (v61.gl_pathc)
      {
        uint64_t v39 = 0;
        while (1)
        {
          if (v18)
          {
            usbuf_cat();
            usbuf_putc();
          }
          if ((sub_10000A604(a1, &v59, &v60, &v58, v61.gl_pathv[v39], v36, v37, v38) & 1) == 0) {
            break;
          }
          if (++v39 >= v61.gl_pathc)
          {
            globfree(&v61);
            goto LABEL_33;
          }
        }
        globfree(&v61);
LABEL_42:
        if (v18) {
          goto LABEL_43;
        }
        goto LABEL_44;
      }
      if (v18)
      {
        usbuf_cat();
        usbuf_putc();
      }
      char v40 = sub_10000A604(a1, &v59, &v60, &v58, __s1, v36, v37, v38);
      globfree(&v61);
      if ((v40 & 1) == 0) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v18)
      {
        usbuf_cat();
        usbuf_putc();
      }
      if (!sub_10000A604(a1, &v59, &v60, &v58, __s1, v31, v32, v33)) {
        goto LABEL_42;
      }
    }
LABEL_33:
    v34 |= *(unsigned __int16 *)__s1 == 46;
    uint64_t v57 = 1024;
    if (!sub_10001DC5C(a1, a3, (uint64_t)__s1, &v57)) {
      goto LABEL_34;
    }
  }
  if (*(_DWORD *)(v10 + 1152) != -1)
  {
    if (usbuf_finish())
    {
      uint64_t v47 = 0;
      size_t v48 = 0;
    }
    else
    {
      uint64_t v47 = (char *)usbuf_data();
      size_t v48 = usbuf_len();
    }
    if (usbuf_finish()) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = (char *)usbuf_data();
    }
    sub_100005FD8(a1, v55, v47, v48);
    usbuf_delete();
    usbuf_delete();
  }
  uint64_t result = 0;
  *a4 = v59;
  *a5 = v60;
  return result;
}

uint64_t sub_100009EBC(uint64_t a1, int __c, const char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void **)(a1 + 200);
  if (a3 && !strcmp(*a3, "daemon"))
  {
    sub_100004E24(a1, "protection error: --daemon sent as client option", (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    return 0;
  }
  if (__c)
  {
    uint64_t v12 = (char *)v11[149];
    if (v12)
    {
      if (!strchr(v12, __c)) {
        return 1;
      }
      sub_100004E24(a1, "option refused: -%c", v13, v14, v15, v16, v17, v18, __c);
      return 0;
    }
  }
  uint64_t result = 1;
  if (a3)
  {
    uint64_t v20 = (const char ***)v11[148];
    if (v20)
    {
      uint64_t v21 = v11[150];
      if (v21)
      {
        while (*v20 != a3)
        {
          ++v20;
          if (!--v21) {
            return 1;
          }
        }
        sub_100004E24(a1, "option refused: --%s", (uint64_t)a3, a4, a5, a6, a7, a8, (char)*a3);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100009F98(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v29 = 0;
  __s = 0;
  int v28 = 0;
  int v6 = *(_DWORD *)(*(void *)(a3 + 200) + 1172);
  if (sub_100019CF4(a1, a2, "list", &v28))
  {
    if (dword_100058FD8)
    {
      int v7 = *__error();
      uint64_t v8 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C878((uint64_t)a2, v8, v9, v10, v11, v12, v13, v14);
      }
      *__error() = v7;
    }
    sub_10001FB50("%s: 'list' is not valid", a2);
    return 0;
  }
  if (v28)
  {
    if (sub_100019BE8(a1, a2, "comment"))
    {
      if (sub_100019F34(a1, a2, "comment", &v29)) {
        sub_10003C84C();
      }
      if (asprintf(&__s, "%-15s%s", a2, v29) == -1)
      {
        if (dword_100058FD8)
        {
          int v25 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B04C();
          }
          *__error() = v25;
        }
        uint64_t v26 = "asprintf";
        goto LABEL_28;
      }
      int v23 = sub_10001D878(a3, v6, __s);
      free(__s);
      if (!v23)
      {
        if (dword_100058FD8)
        {
          int v24 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_25;
          }
          goto LABEL_26;
        }
        goto LABEL_27;
      }
    }
    else if (!sub_10001D878(a3, v6, a2))
    {
      if (dword_100058FD8)
      {
        int v24 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_25:
        }
          sub_10003C734();
LABEL_26:
        *__error() = v24;
      }
LABEL_27:
      uint64_t v26 = "io_write_line";
LABEL_28:
      sub_10001FBD8(v26, v16, v17, v18, v19, v20, v21, v22, v27);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_10000A1DC(uint64_t a1, char a2, char *__s1, FILE *a4, const char *a5, const char *a6, const char *a7, uint64_t a8)
{
  if (*a5 == 35)
  {
    sub_100004E24(a1, "%s: bad username", (uint64_t)__s1, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a2);
    return 0;
  }
  uint64_t v10 = (_DWORD *)a8;
  uint64_t v15 = strdup(__s1);
  __stringp = v15;
  if (!v15)
  {
    sub_100004E24(a1, "%s: out of memory", v16, v17, v18, v19, v20, v21, a2);
    return 0;
  }
  if (*v15 == 44) {
    uint64_t v22 = ",";
  }
  else {
    uint64_t v22 = ", \t";
  }
  int v23 = strsep(&__stringp, v22);
  if (!v23) {
    goto LABEL_65;
  }
  int v24 = v23;
  while (1)
  {
    do
    {
      int v25 = v24;
      int v26 = *v24;
      if (v26 < 0) {
        __uint32_t v27 = __maskrune(*v24, 0x4000uLL);
      }
      else {
        __uint32_t v27 = _DefaultRuneLocale.__runetype[v26] & 0x4000;
      }
      ++v24;
    }
    while (v27);
    if (v26)
    {
      int v28 = &v25[strlen(v25) - 1];
      while (1)
      {
        __darwin_ct_rune_t v29 = *v28;
        if (v29 < 0) {
          break;
        }
        if ((_DefaultRuneLocale.__runetype[v29] & 0x4000) == 0) {
          goto LABEL_21;
        }
LABEL_19:
        *v28-- = 0;
        if (v28 <= v25) {
          sub_10003C924();
        }
      }
      if (__maskrune(v29, 0x4000uLL)) {
        goto LABEL_19;
      }
LABEL_21:
      uint64_t v30 = strchr(v25, 58);
      uint64_t v31 = v30;
      if (v30)
      {
        *uint64_t v30 = 0;
        uint64_t v31 = v30 + 1;
      }
      if (*v25 != 64)
      {
        if (!strcmp(v25, a5)) {
          goto LABEL_35;
        }
        goto LABEL_31;
      }
      uint64_t v32 = getgrnam(v25 + 1);
      if (v32)
      {
        gr_mem = (const char **)v32->gr_mem;
        char v34 = *gr_mem;
        if (*gr_mem) {
          break;
        }
      }
    }
LABEL_31:
    int v24 = strsep(&__stringp, v22);
    if (!v24) {
      goto LABEL_65;
    }
  }
  int v35 = gr_mem + 1;
  while (strcmp(v34, a5))
  {
    uint64_t v36 = *v35++;
    char v34 = v36;
    if (!v36) {
      goto LABEL_31;
    }
  }
LABEL_35:
  int v38 = *v25;
  if (v38 == 64) {
    uint64_t v39 = v25;
  }
  else {
    uint64_t v39 = 0;
  }
  __s2 = v39;
  size_t __linecapp = 0;
  __linep = 0;
  ssize_t v40 = getline(&__linep, &__linecapp, a4);
  if (v40 < 1)
  {
    char v52 = 1;
    goto LABEL_62;
  }
  ssize_t v41 = v40;
  uint64_t v53 = v10;
  do
  {
    while (2)
    {
      uint64_t v42 = __linep;
      __darwin_ct_rune_t v43 = __linep[v41 - 1];
      if (v43 < 0)
      {
        if (__maskrune(v43, 0x4000uLL))
        {
LABEL_42:
          v42[--v41] = 0;
          continue;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v43] & 0x4000) != 0)
      {
        goto LABEL_42;
      }
      break;
    }
    if (v41)
    {
      if (*v42 != 35)
      {
        int v44 = strchr(v42, 58);
        if (v44)
        {
          *int v44 = 0;
          uint64_t v45 = v44 + 1;
          uint64_t v46 = __linep;
          if (!strcmp(__linep, a5) || v38 == 64 && !strcmp(v46, __s2))
          {
            if (sub_100030EF0(v45, a6, __s1a, 0x100uLL))
            {
              if (!strcmp(__s1a, a7))
              {
                char v52 = 0;
                goto LABEL_60;
              }
            }
            else
            {
              if (dword_100058FD8)
              {
                int v47 = *__error();
                size_t v48 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_10003C8E4(&buf, v57, v48);
                }
                *__error() = v47;
              }
              sub_10001FC88("rsync_password_hash");
            }
          }
        }
      }
    }
    ssize_t v41 = getline(&__linep, &__linecapp, a4);
  }
  while (v41 > 0);
  char v52 = 1;
LABEL_60:
  uint64_t v10 = v53;
LABEL_62:
  uint64_t v49 = __linep;
  if (__linep)
  {
    sub_1000048B8(__linep, __linecapp);
    uint64_t v49 = __linep;
  }
  free(v49);
  if (v52)
  {
LABEL_65:
    uint64_t v37 = 0;
    goto LABEL_66;
  }
  if (!v31)
  {
    int v51 = -1;
LABEL_75:
    *uint64_t v10 = v51;
    goto LABEL_76;
  }
  if (!strcmp(v31, "deny")) {
    goto LABEL_65;
  }
  *uint64_t v10 = -1;
  if (!strcmp(v31, "ro"))
  {
    int v51 = 1;
    goto LABEL_75;
  }
  if (!strcmp(v31, "rw"))
  {
    int v51 = 0;
    goto LABEL_75;
  }
LABEL_76:
  uint64_t v37 = 1;
LABEL_66:
  free(__stringp);
  return v37;
}

uint64_t sub_10000A604(uint64_t a1, unint64_t *a2, char **a3, void *a4, char *__s1, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *a2;
  if (*a2 != 0x7FFFFFFF)
  {
    uint64_t v15 = *a3;
    if (v9 == *a4)
    {
      uint64_t v16 = sub_100004924(*a3, *a2, v9 + 5, 8uLL);
      if (!v16)
      {
LABEL_8:
        uint64_t v10 = "daemon out of memory";
        goto LABEL_9;
      }
      uint64_t v15 = v16;
      *a4 = v9 + 5;
      *a3 = v16;
    }
    uint64_t v17 = strdup(__s1);
    *(void *)&v15[8 * v9] = v17;
    if (v17)
    {
      ++*a2;
      return 1;
    }
    goto LABEL_8;
  }
  uint64_t v10 = "protection error: too many arguments sent";
LABEL_9:
  sub_100004E24(a1, v10, (uint64_t)a3, (uint64_t)a4, (uint64_t)__s1, a6, a7, a8, v19);
  return 0;
}

uint64_t sub_10000A6D8(unsigned char *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  while (!*a1)
  {
    ++a1;
    if (!--a2) {
      return 1;
    }
  }
  return 0;
}

char *sub_10000A700(const char *a1)
{
  __stringp = 0;
  size_t v2 = strlen(a1);
  size_t v3 = v2;
  uint64_t v4 = 2;
  if (v2 > 2) {
    uint64_t v4 = v2;
  }
  size_t v5 = v4 + 1;
  int v6 = (char *)malloc_type_malloc(v4 + 1, 0x64ACEC80uLL);
  uint64_t v14 = v6;
  if (!v6)
  {
    if (dword_100058FD8)
    {
      int v17 = *__error();
      uint64_t v18 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C950(v18);
      }
      *__error() = v17;
    }
    sub_10001FBD8("malloc", v7, v8, v9, v10, v11, v12, v13, v28);
    return v14;
  }
  if (!v3)
  {
    char *v6 = 0;
    char v19 = "";
    goto LABEL_39;
  }
  strlcpy(v6, a1, v5);
  uint64_t v15 = 0;
  int v29 = a1[v3 - 1];
  uint64_t v16 = &v14[v3 + 1];
  while (v14[v15] == 47)
    ++v15;
  if (!v14[v15])
  {
LABEL_9:
    *uint64_t v14 = 0;
    goto LABEL_37;
  }
  memmove(v14, &v14[v15], v3 + 1 - v15);
  __stringp = v14;
  uint64_t v20 = strsep(&__stringp, "/");
  if (!v20) {
    goto LABEL_36;
  }
  uint64_t v21 = v20;
  unint64_t v22 = 0;
  while (1)
  {
    if (v21 > v14) {
      *(v21 - 1) = 47;
    }
    if (!*v21)
    {
      if (!__stringp) {
        goto LABEL_36;
      }
      memmove(v21, v21 + 1, v16 - (v21 + 1));
      --__stringp;
      --v16;
      goto LABEL_35;
    }
    int v23 = __stringp ? __stringp : v16 - 1;
    int64_t v24 = v23 - v21;
    if (!strncmp(v21, ".", v23 - v21)) {
      break;
    }
    if (!strncmp(v21, "..", v23 - v21))
    {
      if (v22-- <= 1)
      {
        if (!*v23) {
          goto LABEL_9;
        }
        memmove(v14, v23, v16 - v23);
        unint64_t v22 = 0;
        v16 += v14 - v23;
        int v25 = &__stringp[v14 - v23];
        goto LABEL_34;
      }
    }
    else
    {
      ++v22;
    }
LABEL_35:
    uint64_t v21 = strsep(&__stringp, "/");
    if (!v21) {
      goto LABEL_36;
    }
  }
  if (*v23)
  {
    memmove(v21, v23, v16 - v23);
    v16 -= v24;
    int v25 = &__stringp[-v24];
LABEL_34:
    __stringp = v25;
    goto LABEL_35;
  }
  *uint64_t v21 = v21[1];
LABEL_36:
  if (!*v14)
  {
LABEL_37:
    char v19 = "/";
    if (v29 != 47) {
      char v19 = "";
    }
LABEL_39:
    snprintf(v14, v5, ".%s", v19);
  }
  return v14;
}

uint64_t sub_10000A9B8(unsigned char *a1, const char *a2, char *__s)
{
  if (!a1) {
    return 1;
  }
  int v4 = *a1;
  uint64_t result = 1;
  if (v4 && v4 != 47)
  {
    size_t v8 = strlen(__s);
    if (!strncmp(a2, __s, v8))
    {
      if (a2[v8] == 47) {
        uint64_t v11 = (char *)&a2[v8 + 1];
      }
      else {
        uint64_t v11 = (char *)&a2[v8];
      }
      uint64_t v12 = sub_10000ABB0(v11, 0, 0);
      if ((v12 & 0x80000000) == 0) {
        return sub_10000ABB0(a1, v12, 1) >> 31;
      }
      if (dword_100058FD8)
      {
        int v13 = *__error();
        uint64_t v14 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 136315394;
          uint64_t v16 = v11;
          __int16 v17 = 2080;
          uint64_t v18 = __s;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s: is_unsafe_link: src escaped the root: %s\n", buf, 0x16u);
        }
        *__error() = v13;
      }
      sub_10001FDC8("%s: is_unsafe_link: src escaped the root: %s\n");
    }
    else
    {
      if (dword_100058FD8)
      {
        int v9 = *__error();
        uint64_t v10 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 136315394;
          uint64_t v16 = a2;
          __int16 v17 = 2080;
          uint64_t v18 = __s;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s: is_unsafe_link: src file is outside of the root: %s\n", buf, 0x16u);
        }
        *__error() = v9;
      }
      sub_10001FDC8("%s: is_unsafe_link: src file is outside of the root: %s\n");
    }
    return 1;
  }
  return result;
}

uint64_t sub_10000ABB0(unsigned char *a1, uint64_t a2, int a3)
{
  if (a1 && *a1)
  {
    while (1)
    {
      size_t v5 = a1 - 1;
      do
        int v6 = *++v5;
      while (v6 == 47);
      if (!strncmp(v5, "../", 3uLL))
      {
        a2 = (a2 - 1);
        if (!a3) {
          goto LABEL_14;
        }
      }
      else
      {
        if (strncmp(v5, "./", 2uLL))
        {
          if (strchr(v5, 47)) {
            a2 = (a2 + 1);
          }
          else {
            a2 = a2;
          }
        }
        if (!a3) {
          goto LABEL_14;
        }
      }
      if ((a2 & 0x80000000) != 0) {
        return 0xFFFFFFFFLL;
      }
LABEL_14:
      uint64_t v7 = strchr(v5, 47);
      a1 = v7 + 1;
      if (!v7) {
        return a2;
      }
    }
  }
  return 0;
}

uint64_t sub_10000AC8C(uint64_t a1, int a2, const char **a3, const char *a4, mode_t a5)
{
  uint64_t v7 = a3;
  memset(&v90, 0, sizeof(v90));
  if (fstatat(a2, *a3, &v90, 32) < 0) {
    return 0;
  }
  uint64_t v10 = strdup(a4);
  if (!v10)
  {
    uint64_t v31 = 12;
LABEL_48:
    if (dword_100058FD8)
    {
      int v60 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003C994();
      }
      *__error() = v60;
    }
    sub_10001FBD8("%s: mk_backup_dir: %s", v11, v12, v13, v14, v15, v16, v17, (char)*v7);
    return v31;
  }
  uint64_t v18 = v10;
  size_t v19 = strlen(v10);
  uint64_t v20 = 0;
  do
  {
    int v21 = strncmp(&v18[v20], "./", 2uLL);
    v20 += 2;
  }
  while (!v21);
  size_t v86 = v19;
  size_t v22 = strlen(*(const char **)(*(void *)a1 + 160));
  int v23 = &v18[v20];
  int64_t v24 = &v18[v20 + v22];
  uint64_t v89 = &v18[v19];
  if (v24 - 2 >= &v18[v19]) {
    sub_10003CC64();
  }
  size_t v25 = v22;
  long long v87 = v7;
  uint64_t v88 = a4;
  uint64_t v84 = a1;
  mode_t v85 = a5;
  int v26 = v23 - 2;
  memset(&v91, 0, sizeof(v91));
  int v27 = *(v24 - 2);
  BOOL v28 = v27 == 47;
  if (v27 == 47) {
    size_t v29 = v22 + 1;
  }
  else {
    size_t v29 = v22;
  }
  uint64_t v30 = strrchr(v23 - 2, 47);
  if (v30)
  {
    while (1)
    {
      *uint64_t v30 = 0;
      uint64_t v31 = mkdirat(a2, v23 - 2, 0x1EDu);
      if (!v31) {
        goto LABEL_17;
      }
      if (*__error() == 17) {
        goto LABEL_16;
      }
      if (*__error() != 2) {
        break;
      }
      uint64_t v30 = strrchr(v23 - 2, 47);
      if (!v30) {
        goto LABEL_17;
      }
    }
    uint64_t v7 = v87;
    if (dword_100058FD8)
    {
      int v49 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
LABEL_41:
    sub_10001FBD8("%s: mkdir", v32, v33, v34, v35, v36, v37, v38, (char)v26);
    goto LABEL_47;
  }
LABEL_16:
  uint64_t v31 = 0;
LABEL_17:
  uint64_t v39 = &v18[strlen(v23 - 2) - 2 + v20];
  if (v39 >= v89) {
    sub_10003CC38();
  }
  ssize_t v40 = &v23[v29];
  uint64_t v41 = -(uint64_t)(v25 + v28);
  while (1)
  {
    if (v86 + 2 + v41 - strlen(v40 - 2) != v20 && *(v40 - 2))
    {
      uint64_t v31 = fstatat(a2, v40 - 2, &v91, 0);
      if ((v31 & 0x80000000) != 0)
      {
        uint64_t v7 = v87;
        if (dword_100058FD8)
        {
          int v59 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003CBD0();
          }
          *__error() = v59;
        }
        sub_10001FBD8("%s: stat", v42, v43, v44, v45, v46, v47, v48, (_BYTE)v40 - 2);
LABEL_47:
        free(v18);
        goto LABEL_48;
      }
      fchownat(a2, v26, v91.st_uid, v91.st_gid, 32);
      fchmodat(a2, v26, v91.st_mode, 32);
    }
    *uint64_t v39 = 47;
    v39 += strlen(v39);
    if (v39 == v89) {
      break;
    }
    if (v39 >= v89) {
      sub_10003CBA4();
    }
    uint64_t v31 = mkdirat(a2, v26, 0x1EDu);
    if ((v31 & 0x80000000) != 0)
    {
      uint64_t v7 = v87;
      if (!dword_100058FD8) {
        goto LABEL_41;
      }
      int v49 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_39:
      }
        sub_10003CB3C();
LABEL_40:
      *__error() = v49;
      goto LABEL_41;
    }
  }
  free(v18);
  uint64_t v7 = v87;
  if (v31) {
    goto LABEL_48;
  }
  int v50 = v85 & 0xF000;
  if (v50 == 0x4000)
  {
    uint64_t v31 = mkdirat(a2, v88, v85);
    if ((int)v31 >= 1)
    {
      if (dword_100058FD8)
      {
        int v58 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CA00();
        }
        *__error() = v58;
      }
      sub_10001FBD8("%s: mkdirat", v51, v52, v53, v54, v55, v56, v57, (char)v88);
      return v31;
    }
    uint64_t v68 = *v87;
    int v69 = a2;
    int v70 = 128;
LABEL_65:
    unlinkat(v69, v68, v70);
    return v31;
  }
  if (v50 != 40960 || !*(_DWORD *)(*(void *)v84 + 84))
  {
    if (v50 == 0x8000)
    {
      if ((sub_10000B308(a2, *v87, a2, v88, 1) & 0x80000000) == 0) {
        return 0;
      }
      if (dword_100058FD8)
      {
        int v78 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CAD0();
        }
        *__error() = v78;
      }
      sub_10001FBD8("%s: move_file: %s", v71, v72, v73, v74, v75, v76, v77, (char)*v87);
      return 0xFFFFFFFFLL;
    }
    if (dword_100058FD8)
    {
      int v79 = *__error();
      uint64_t v80 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        uint64_t v81 = *v87;
        v91.st_dev = 136315138;
        *(void *)&v91.st_mode = v81;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "backup_to_dir: skipping non-regular file %s\n", (uint8_t *)&v91, 0xCu);
      }
      *__error() = v79;
    }
    sub_10001FDC8("backup_to_dir: skipping non-regular file %s\n", *v87);
    return 0;
  }
  unlinkat(a2, v88, 0);
  uint64_t v31 = symlinkat(v87[11], a2, v88);
  if ((v31 & 0x80000000) == 0)
  {
    uint64_t v68 = *v87;
    int v69 = a2;
    int v70 = 0;
    goto LABEL_65;
  }
  if (dword_100058FD8)
  {
    int v83 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003CA68();
    }
    *__error() = v83;
  }
  sub_10001FBD8("%s: symlinkat", v61, v62, v63, v64, v65, v66, v67, (char)v88);
  return v31;
}

uint64_t sub_10000B308(int a1, const char *a2, int a3, const char *a4, int a5)
{
  if (a5) {
    int v9 = 1793;
  }
  else {
    int v9 = 3841;
  }
  uint64_t result = renameat(a1, a2, a3, a4);
  if (result)
  {
    if (result != -1 || *__error() == 18)
    {
      uint64_t result = openat(a1, a2, 256);
      if (result == -1) {
        return result;
      }
      int v11 = result;
      int v12 = openat(a3, a4, v9, 384);
      if (v12 == -1)
      {
        int v16 = *__error();
        close(v11);
        *__error() = v16;
      }
      else
      {
        int v13 = v12;
        int v14 = sub_10000B424();
        int v15 = *__error();
        close(v11);
        close(v13);
        *__error() = v15;
        if (!v14)
        {
          unlinkat(a1, a2, 0);
          return 0;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_10000B424()
{
  int v0 = __chkstk_darwin();
  int v2 = v1;
  int v3 = v0;
  ssize_t v4 = read(v0, __buf, 0x10000uLL);
  if (v4 >= 1)
  {
    while (2)
    {
      uint64_t v5 = 0;
      while (!__buf[v5])
      {
        if (++v5 == 0x10000)
        {
          if (lseek(v2, v4, 1) == -1) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_9;
        }
      }
      ssize_t v6 = write(v2, __buf, v4);
      uint64_t result = 0xFFFFFFFFLL;
      if (v4 != v6 || v6 == -1) {
        return result;
      }
LABEL_9:
      ssize_t v4 = read(v3, __buf, 0x10000uLL);
      if (v4 > 0) {
        continue;
      }
      break;
    }
  }
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  off_t v8 = lseek(v2, 0, 1);
  if (ftruncate(v2, v8) == -1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_10000B574(int a1, const char *a2, const char **a3)
{
  int v5 = openat(a1, a2, 0x100000);
  if (v5 == -1) {
    err(11, "%s: copy_file dfd: openat");
  }
  int v6 = v5;
  int v7 = openat(v5, *a3, 256);
  if (v7 == -1) {
    err(11, "%s/%s: copy_file fromfd: openat");
  }
  int v8 = v7;
  close(v6);
  int v9 = openat(a1, *a3, 3841, 384);
  if (v9 == -1) {
    sub_10003CC90(a3);
  }
  int v10 = v9;
  if (sub_10000B424() == -1) {
    sub_10003CCB8(a3);
  }
  close(v8);

  return close(v10);
}

void sub_10000B68C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

char *sub_10000B6AC(uint64_t a1, char **a2, char *a3, size_t a4)
{
  uint64_t v4 = *(const char **)(*(void *)a1 + 48);
  if (!v4) {
    sub_10003CCE0();
  }
  if (!a2) {
    sub_10003CD0C();
  }
  if (*v4 == 47) {
    return *(char **)(*(void *)a1 + 48);
  }
  int v5 = a3;
  int v8 = *a2;
  int v9 = strrchr(*a2, 47);
  if (v9)
  {
    int v10 = v9 - v8;
    do
    {
      int v11 = v9;
      int v12 = v10;
      if (v9 <= v8) {
        break;
      }
      --v9;
      --v10;
    }
    while (*(v11 - 1) == 47);
    if (v11 == v8) {
      sub_10003CD38();
    }
    if (v12 <= 0) {
      sub_10003CD64();
    }
  }
  else
  {
    int v8 = ".";
    int v12 = 1;
  }
  if (snprintf(v5, a4, "%.*s/%s", v12, v8, v4) > a4)
  {
    if (dword_100058FD8)
    {
      int v20 = *__error();
      int v21 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(*(void *)a1 + 48);
        *(_DWORD *)uint8_t buf = 136316162;
        size_t v25 = v8;
        __int16 v26 = 1040;
        int v27 = v12;
        __int16 v28 = 2080;
        size_t v29 = v8;
        __int16 v30 = 2080;
        uint64_t v31 = v23;
        __int16 v32 = 2048;
        size_t v33 = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s: partial-dir: path too long: %.*s/%s > %lu", buf, 0x30u);
      }
      *__error() = v20;
    }
    sub_10001FBD8("%s: partial-dir: path too long: %.*s/%s > %lu", v13, v14, v15, v16, v17, v18, v19, (char)v8);
  }
  return v5;
}

char *sub_10000B8A0(char **a1)
{
  int v1 = *a1;
  int v2 = strrchr(*a1, 47);
  if (v2) {
    return v2 + 1;
  }
  else {
    return v1;
  }
}

void *sub_10000B8D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v12 = malloc_type_malloc(0x110uLL, 0x10300401A0F0AAAuLL);
  if (!v12)
  {
    if (dword_100058FD8)
    {
      int v30 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CD90();
      }
      *__error() = v30;
    }
    sub_10001FBD8("malloc", v13, v14, v15, v16, v17, v18, v19, v32);
    return 0;
  }
  int v20 = v12;
  *(_DWORD *)int v12 = 0;
  v12[25] = a3;
  v12[26] = a4;
  *((_DWORD *)v12 + 54) = a5;
  *((_DWORD *)v12 + 55) = a6;
  *((_DWORD *)v12 + 56) = a2;
  v12[32] = 0;
  sub_10000BA44(a1, (uint64_t)v12, 0);
  v20[29] = 0;
  v20[30] = 0;
  v20[31] = 0x100000;
  int v21 = malloc_type_malloc(0x100000uLL, 0x6CD75FEDuLL);
  v20[29] = v21;
  if (!v21)
  {
    if (dword_100058FD8)
    {
      int v29 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CD90();
      }
      *__error() = v29;
    }
    sub_10001FBD8("malloc", v22, v23, v24, v25, v26, v27, v28, v32);
    free(v20);
    return 0;
  }
  return v20;
}

uint64_t sub_10000BA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int data = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)a2) {
    sub_10003CDC4();
  }
  *(void *)(a2 + 8) = a3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = -1;
  uint64_t v4 = (CC_MD4_CTX *)(a2 + 88);
  *(void *)(a2 + 80) = 0;
  CC_MD4_Init((CC_MD4_CTX *)(a2 + 88));
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  CC_MD4_Update(v4, &data, 4u);
  return sub_10000FF88();
}

uint64_t sub_10000BAC8(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

void sub_10000BAD0(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_10000BB1C(a1, (uint64_t)a2, 1);
    free(a2[29]);
    free(a2);
  }
}

void sub_10000BB1C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6)
  {
    sub_100010F50(v6);
    *(void *)(a2 + 64) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 72);
  if (v7 != -1)
  {
    close(v7);
    *(_DWORD *)(a2 + 72) = -1;
  }
  if (a3)
  {
    if (!sub_10000BC3C(a1, a2))
    {
      if (dword_100058FD8)
      {
        int v15 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CDF0();
        }
        *__error() = v15;
      }
      sub_10001FBD8("%s: partial cleanup failed, left at %s", v8, v9, v10, v11, v12, v13, v14, *(void *)(*(void *)(a2 + 200) + 152 * *(void *)(a2 + 8)));
    }
  }
  else
  {
    int v16 = *(_DWORD *)(a2 + 76);
    if (v16 != -1)
    {
      close(v16);
      *(_DWORD *)(a2 + 76) = -1;
    }
  }
  free(*(void **)(a2 + 80));
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)a2 = 0;
}

uint64_t sub_10000BC30(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return sub_10000BC3C(a1, a2);
  }
  return a1;
}

uint64_t sub_10000BC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 200);
  if (!v2) {
    return 1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (char **)(v2 + 152 * v5);
  int v7 = *(_DWORD *)(a2 + 76);
  if (v7 == -1)
  {
    if ((*(_DWORD *)(v2 + 152 * v5 + 8) & 0x80000000) != 0) {
      return 1;
    }
    memset(&v27, 0, sizeof(v27));
    uint64_t v13 = sub_10000B6AC(a1, (char **)(v2 + 152 * v5), v28, 0x400uLL);
    if (fstatat(*(_DWORD *)(a2 + 216), v13, &v27, 32) == -1 || (v27.st_mode & 0xF000) != 0x4000) {
      return 1;
    }
    int v14 = *(_DWORD *)(a2 + 216);
    int v15 = v13;
    int v16 = 128;
    goto LABEL_21;
  }
  close(v7);
  *(_DWORD *)(a2 + 76) = -1;
  uint64_t v8 = *(const char **)(a2 + 80);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = *(void *)a1;
  if (!*(_DWORD *)(*(void *)a1 + 44))
  {
    if (!*(void *)(v9 + 544) || *(_DWORD *)(v9 + 40) || *(_DWORD *)(v9 + 12))
    {
      int v14 = *(_DWORD *)(a2 + 216);
      int v15 = *(const char **)(a2 + 80);
    }
    else
    {
      int v20 = *v6;
      int v21 = strrchr(v20, 47);
      if (v21) {
        int v15 = v21 + 1;
      }
      else {
        int v15 = v20;
      }
      int v14 = *(_DWORD *)(a2 + 220);
    }
    int v16 = 0;
LABEL_21:
    unlinkat(v14, v15, v16);
    return 1;
  }
  if (*(_DWORD *)(v9 + 40) || (*(_DWORD *)(v2 + 152 * v5 + 8) & 0x80000000) == 0) {
    return 1;
  }
  int v10 = *(_DWORD *)(a2 + 216);
  if (*(void *)(v9 + 48))
  {
    memset(&v27, 0, sizeof(v27));
    uint64_t v11 = sub_10000B6AC(a1, v6, v28, 0x400uLL);
    int v12 = fstatat(v10, v11, &v27, 32);
    if (v12)
    {
      if (v12 != -1) {
        goto LABEL_33;
      }
      if (*__error() != 2) {
        return 0;
      }
    }
    else
    {
      if ((v27.st_mode & 0xF000) == 0x4000) {
        goto LABEL_33;
      }
      if (unlinkat(v10, v11, 0) == -1) {
        return 0;
      }
    }
    if (sub_100026008(v10, v11, 0x1C0u) == -1 && *__error() != 17) {
      return 0;
    }
LABEL_33:
    int v22 = openat(v10, v11, 0x100000, *(_OWORD *)&v27.st_dev, *(_OWORD *)&v27.st_uid, *(_OWORD *)&v27.st_atimespec, *(_OWORD *)&v27.st_mtimespec, *(_OWORD *)&v27.st_ctimespec, *(_OWORD *)&v27.st_birthtimespec, *(_OWORD *)&v27.st_size, *(_OWORD *)&v27.st_blksize, *(_OWORD *)v27.st_qspare);
    if (v22 != -1)
    {
      int v19 = v22;
      uint64_t v23 = *v6;
      uint64_t v24 = strrchr(*v6, 47);
      if (v24) {
        uint64_t v18 = v24 + 1;
      }
      else {
        uint64_t v18 = v23;
      }
      int v10 = *(_DWORD *)(a2 + 216);
      uint64_t v8 = *(const char **)(a2 + 80);
      goto LABEL_38;
    }
    return 0;
  }
  uint64_t v18 = *v6;
  int v19 = *(_DWORD *)(a2 + 216);
LABEL_38:
  int v25 = sub_100002468(a1, (uint64_t)v6, v10, v8, v19, v18, 0);
  int v26 = *(_DWORD *)(a2 + 216);
  if (v25 == -1)
  {
    if (v19 != v26)
    {
      unlinkat(v26, *(const char **)(a2 + 80), 0);
      close(v19);
    }
    return 0;
  }
  if (v19 != v26) {
    close(v19);
  }
  return 1;
}

void sub_10000BF2C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (int *)a1[24];
  if (v8)
  {
    if (v8[6] >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = *((void *)v8 + 1);
      do
      {
        uint64_t v13 = *(char **)v8;
        if (dword_100058FD8)
        {
          int v14 = *__error();
          int v15 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v38 = *(void *)&v13[v10];
            uint64_t v37 = *(void *)&v13[v10 + 8];
            *(_DWORD *)uint8_t buf = 136315394;
            uint64_t v47 = v38;
            __int16 v48 = 2080;
            uint64_t v49 = v37;
            _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "mv '%s' -> '%s'", buf, 0x16u);
          }
          *__error() = v14;
        }
        int v16 = &v13[v10];
        sub_10001FA38(2, "mv '%s' -> '%s'", a3, a4, a5, a6, a7, a8, *(void *)&v13[v10]);
        if (*((_DWORD *)*a1 + 50)) {
          uint64_t v17 = (const char **)sub_100027688(*((void *)v16 + 2), *((unsigned int **)v8 + 2));
        }
        else {
          uint64_t v17 = 0;
        }
        if (sub_100002468((uint64_t)a1, *((void *)v16 + 2), v8[7], *(const char **)v16, v8[8], *((char **)v16 + 1), 1))int v18 = 4; {
        else
        }
          int v18 = 8;
        if (v17)
        {
          int v19 = (const char *)*((void *)v16 + 1);
          if (unlinkat(*(_DWORD *)(v12 + 216), v19, 0) == -1 && *__error() != 2)
          {
            if (dword_100058FD8)
            {
              int v40 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003CEAC(&v44, v45);
              }
              *__error() = v40;
            }
            sub_10001FC88("unlink");
            int v18 = 8;
          }
          if (linkat(*(_DWORD *)(v12 + 216), *v17, *(_DWORD *)(v12 + 216), v19, 0) == -1)
          {
            sub_10001FA38(-1, "While hard linking '%s' to '%s' ", v20, v21, v22, v23, v24, v25, (char)*v17);
            if (dword_100058FD8)
            {
              int v26 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003CE7C(&v42, v43);
              }
              *__error() = v26;
            }
            sub_10001FC88("linkat");
          }
        }
        stat v27 = &v13[v10];
        uint64_t v28 = *(const char **)&v13[v10 + 24];
        if (v28 && unlinkat(v8[8], v28, 128) == -1 && *__error() != 66)
        {
          if (dword_100058FD8)
          {
            int v41 = *__error();
            uint64_t v36 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v39 = *((void *)v27 + 3);
              *(_DWORD *)uint8_t buf = 136315138;
              uint64_t v47 = v39;
              _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "rmdir '%s'", buf, 0xCu);
            }
            *__error() = v41;
          }
          sub_10001FBD8("rmdir '%s'", v29, v30, v31, v32, v33, v34, v35, *((void *)v27 + 3));
        }
        *(_DWORD *)(*((void *)v16 + 2) + 112) |= v18;
        free(*(void **)&v13[v10]);
        free(*((void **)v27 + 3));
        *(void *)&v13[v10] = 0;
        *((void *)v27 + 3) = 0;
        ++v11;
        v10 += 32;
      }
      while (v11 < v8[6]);
    }
    free(*(void **)v8);
    *(void *)uint64_t v8 = 0;
    free(a1[24]);
    a1[24] = 0;
  }
}

uint64_t sub_10000C31C(uint64_t a1, uint64_t *a2, int *a3, size_t a4, unsigned int *a5)
{
  uint64_t v8 = a2;
  unsigned int v397 = 0;
  memset(&v396, 0, sizeof(v396));
  memset(&v395, 0, sizeof(v395));
  if (*(_DWORD *)(*a2 + 196))
  {
    uint64_t v10 = (void *)a2[24];
    if (!v10)
    {
      uint64_t v11 = malloc_type_malloc(0x28uLL, 0x106004076ECE9AAuLL);
      v8[24] = (uint64_t)v11;
      if (!v11)
      {
        if (dword_100058FD8)
        {
          int v177 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003DC90();
          }
          *__error() = v177;
        }
        sub_10001FBD8("malloc renamer", v12, v13, v14, v15, v16, v17, v18, v382);
        goto LABEL_383;
      }
      v11[1] = a1;
      v11[2] = a5;
      *uint64_t v11 = 0;
      *((_DWORD *)v11 + 6) = 0;
      int v19 = *(_DWORD *)(a1 + 216);
      *((_DWORD *)v11 + 7) = v19;
      *((_DWORD *)v11 + 8) = v19;
      uint64_t v10 = v11;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v20 = v10;
  int v21 = *(_DWORD *)a1;
  if (*(_DWORD *)a1) {
    goto LABEL_7;
  }
  if (!sub_10001E948(v8, *(unsigned int *)(a1 + 224), &v397))
  {
    if (dword_100058FD8)
    {
      int v161 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B82C();
      }
      *__error() = v161;
    }
    sub_10001FC88("io_read_int");
    return 0xFFFFFFFFLL;
  }
  if ((v397 & 0x80000000) != 0)
  {
    if (dword_100058FD8)
    {
      int v178 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
        sub_10003DC50();
      }
      *__error() = v178;
    }
    sub_10001FA38(2, "downloader: phase complete", v25, v26, v27, v28, v29, v30, v382);
    return 0;
  }
  unint64_t v31 = *(void *)(a1 + 208);
  if (v31 <= v397)
  {
    if (dword_100058FD8)
    {
      int v179 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003DC1C();
      }
      *__error() = v179;
    }
    sub_10001FB50("index out of bounds");
    return 0xFFFFFFFFLL;
  }
  v391 = a5;
  uint64_t v32 = *(void *)(a1 + 200);
  uint64_t v33 = (int *)(v32 + 144);
  uint64_t v34 = 0;
  while (1)
  {
    int v35 = *v33;
    v33 += 38;
    if (v35 == v397) {
      break;
    }
    if (v31 == ++v34)
    {
      int v36 = *(_DWORD *)(a1 + 224);
      unsigned int v37 = v397;
      goto LABEL_298;
    }
  }
  unsigned int v37 = v34;
  unsigned int v397 = v34;
  int v36 = *(_DWORD *)(a1 + 224);
LABEL_298:
  if (*((int *)v8 + 65) <= 28)
  {
    v191 = v20;
    *(_DWORD *)(v32 + 152 * v37 + 116) = 0x8000;
  }
  else
  {
    v440[0] = 0;
    if (!sub_10001EB90((uint64_t)v8, v36, v440))
    {
      if (dword_100058FD8)
      {
        int v242 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CF10();
        }
        *__error() = v242;
      }
      sub_10001FC88("io_read_short");
      goto LABEL_418;
    }
    v191 = v20;
    __int16 v192 = v440[0];
    *(_DWORD *)(v32 + 152 * v37 + 116) = v440[0];
    if ((v192 & 0x800) != 0)
    {
      buf[0] = 0;
      if (!sub_10001DD4C((uint64_t)v8, v36, (char *)buf))
      {
        if (dword_100058FD8)
        {
          int v269 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003DBE8();
          }
          *__error() = v269;
        }
        sub_10001FC88("io_read_byte");
        goto LABEL_418;
      }
      *(_DWORD *)(v32 + 152 * v37 + 120) = buf[0];
      __int16 v192 = v440[0];
    }
    if ((v192 & 0x1000) != 0)
    {
      uint64_t v193 = v32 + 152 * v37;
      v196 = *(void **)(v193 + 88);
      v195 = (char **)(v193 + 88);
      v194 = v196;
      if (v196) {
        free(v194);
      }
      v197 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0xCDDA719FuLL);
      *v195 = v197;
      if (!v197)
      {
        if (dword_100058FD8)
        {
          int v271 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003DB80();
          }
          *__error() = v271;
        }
        sub_10001FBD8("calloc hlink vstring", v198, v199, v200, v201, v202, v203, v204, v382);
        goto LABEL_418;
      }
      if (!sub_10001ECCC((uint64_t)v8, v36, v197, 0x400uLL))
      {
        if (dword_100058FD8)
        {
          int v205 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003DBB4();
          }
          *__error() = v205;
        }
        sub_10001FC88("io_read_vstring");
LABEL_418:
        if (dword_100058FD8)
        {
          int v270 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003CEDC();
          }
          *__error() = v270;
        }
        sub_10001FB50("get_iflags");
        return 0;
      }
    }
  }
  uint64_t v206 = *(void *)(a1 + 200);
  unsigned int v207 = v397;
  v208 = (const char **)(v206 + 152 * (int)v397);
  if (*((_DWORD *)v208 + 29) == 0x2000 || *(_DWORD *)(*v8 + 36) && *((_DWORD *)v8 + 47) == -1) {
    return 1;
  }
  uint64_t v209 = (int)v397;
  if (*(_DWORD *)(v206 + 152 * (int)v397 + 144) != v397)
  {
    uint64_t v210 = *(void *)(a1 + 208);
    uint64_t v209 = (int)v397;
    if (v210)
    {
      v211 = (int *)(v206 + 144);
      uint64_t v212 = 0;
      uint64_t v213 = 0;
      while (1)
      {
        int v214 = *v211;
        v211 += 38;
        if (v214 == v397) {
          break;
        }
        ++v212;
        v213 += (uint64_t)&_mh_execute_header;
        if (v210 == v212)
        {
          uint64_t v209 = (int)v397;
          goto LABEL_444;
        }
      }
      unsigned int v397 = v212;
      uint64_t v209 = v213 >> 32;
    }
  }
LABEL_444:
  sub_10000BA44((uint64_t)v8, a1, v209);
  if (!sub_100003D44((uint64_t)v8, *(_DWORD *)(a1 + 224), (void *)(a1 + 16)))
  {
    if (dword_100058FD8)
    {
      int v285 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CF44();
      }
      *__error() = v285;
    }
    sub_10001FC88("blk_send_ack");
    goto LABEL_382;
  }
  *(_DWORD *)a1 = 1;
  v281 = *v208;
  if ((*(_DWORD *)(v206 + 152 * (int)v207 + 8) & 0x80000000) != 0)
  {
    v281 = *v208;
    int v284 = *(_DWORD *)(a1 + 216);
  }
  else
  {
    int v282 = *(_DWORD *)(v206 + 152 * (int)v207 + 8);
    v283 = strrchr((char *)*v208, 47);
    if (v283) {
      v281 = v283 + 1;
    }
    int v284 = v282;
  }
  if (*(_DWORD *)(v206 + 152 * (int)v207 + 120) == 131
    && (v286 = *(const char **)(v206 + 152 * (int)v207 + 88)) != 0)
  {
    int v287 = openat(v284, v286, 4);
  }
  else
  {
    int v287 = openat(v284, v281, 4);
  }
  int v288 = v287;
  *(_DWORD *)(a1 + 72) = v287;
  uint64_t v20 = v191;
  if (*(_DWORD *)(*v8 + 136) && !dword_100058FDC)
  {
    fprintf(__stderrp, "%s\n", *v208);
    int v288 = *(_DWORD *)(a1 + 72);
  }
  if (v288 != -1) {
    goto LABEL_463;
  }
  if (*__error() != 2)
  {
    if (dword_100058FD8)
    {
      int v289 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003DB18();
      }
      *__error() = v289;
    }
    LOBYTE(v385) = (_BYTE)v281;
    v268 = "%s: rsync_downloader: openat";
    goto LABEL_619;
  }
  int v288 = *(_DWORD *)(a1 + 72);
  if (v288 != -1)
  {
LABEL_463:
    *a3 = v288;
    if (*(_DWORD *)(*v8 + 112)) {
      fcntl(*(_DWORD *)(a1 + 72), 48);
    }
    return 1;
  }
  int v21 = *(_DWORD *)a1;
  a5 = v391;
LABEL_7:
  size_t count = a4;
  uint64_t v22 = *(void *)(a1 + 200);
  uint64_t v389 = *(void *)(a1 + 8);
  uint64_t v23 = (const char **)(v22 + 152 * v389);
  if (v21 == 1)
  {
    uint64_t v24 = (const char **)(a1 + 80);
    if (*(void *)(a1 + 80)) {
      sub_10003D288();
    }
    if (*(_DWORD *)(*v8 + 36))
    {
      *a3 = -1;
LABEL_11:
      *(_DWORD *)a1 = 2;
      return 1;
    }
    int v162 = *(_DWORD *)(a1 + 72);
    if (v162 != -1)
    {
      if (fstat(v162, &v396) == -1)
      {
        if (dword_100058FD8)
        {
          int v216 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D220();
          }
          *__error() = v216;
        }
        v383 = (char *)*v23;
        v217 = "%s: fstat";
        goto LABEL_370;
      }
      if (*(_DWORD *)(a1 + 72) != -1 && (v396.st_mode & 0xF000) != 0x8000)
      {
        if (dword_100058FD8)
        {
          int v238 = *__error();
          v239 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            v240 = *v23;
            v440[0] = 136315138;
            *(void *)&v440[1] = v240;
            _os_log_impl((void *)&_mh_execute_header, v239, OS_LOG_TYPE_INFO, "%s: not regular", (uint8_t *)v440, 0xCu);
          }
          *__error() = v238;
        }
        sub_10001FDC8("%s: not regular", *v23);
        goto LABEL_381;
      }
    }
    sub_100027688((uint64_t)v23, a5);
    int v170 = *(_DWORD *)(a1 + 72);
    if (v170 == -1
      || v396.st_size < 1
      || (v171 = sub_100010DA4(v170, v396.st_size, 1), (*(void *)(a1 + 64) = v171) != 0))
    {
      *a3 = -1;
      uint64_t v172 = *v8;
      if (*(_DWORD *)(*v8 + 40) || *(_DWORD *)(v172 + 12) || (*(_DWORD *)(v22 + 152 * v389 + 8) & 0x80000000) == 0)
      {
        v173 = *v23;
        if ((*(_DWORD *)(v22 + 152 * v389 + 8) & 0x80000000) != 0)
        {
          v173 = *v23;
          int v176 = *(_DWORD *)(a1 + 216);
        }
        else
        {
          int v174 = *(_DWORD *)(v22 + 152 * v389 + 8);
          v175 = strrchr((char *)*v23, 47);
          if (v175) {
            v173 = v175 + 1;
          }
          int v176 = v174;
        }
        int v218 = openat(v176, v173, 518, *(_WORD *)(v22 + 152 * v389 + 24) & 0x1FF);
        *(_DWORD *)(a1 + 76) = v218;
        if (v218 == -1)
        {
          if (dword_100058FD8)
          {
            int v231 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003CFE0();
            }
            *__error() = v231;
          }
          sub_10001FC88("%s: open");
        }
        else
        {
          v219 = (char *)*v23;
          v220 = strrchr((char *)*v23, 47);
          if (v220) {
            v221 = v220 + 1;
          }
          else {
            v221 = v219;
          }
          v222 = strdup(v221);
          *uint64_t v24 = v222;
          if (v222)
          {
            if (dword_100058FD8)
            {
              int v229 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
                sub_10003D0A8();
              }
              *__error() = v229;
              v230 = (char *)*v23;
            }
            else
            {
              LOBYTE(v230) = (_BYTE)v219;
            }
            sub_10001FA38(2, "%s: writing inplace", v223, v224, v225, v226, v227, v228, (char)v230);
            if (*(_DWORD *)v8[25] && sub_100010F44(*(void *)(a1 + 64)))
            {
              if (qword_100058F00 && qword_100058F08) {
                sub_10003D048();
              }
              if (qword_100058F00) {
                qword_100058F08 = qword_100058F00;
              }
              if (sigsetjmp(dword_100058F10, 0) < 1)
              {
                v394 = (const char **)(v22 + 152 * v389);
                qword_100058F00 = *(void *)(a1 + 64);
                v272 = sub_100010F34((void *)qword_100058F00, 0);
                uint64_t v273 = sub_100010F44(*(void *)(a1 + 64));
                if (v273)
                {
                  unint64_t v274 = v273;
                  do
                  {
                    unint64_t v275 = v274;
                    if (v274 >= 0xFFFFFFFF) {
                      uint64_t v276 = 0xFFFFFFFFLL;
                    }
                    else {
                      uint64_t v276 = v274;
                    }
                    CC_MD4_Update((CC_MD4_CTX *)(a1 + 88), v272, v276);
                    v272 = (void *)((char *)v272 + v276);
                    unint64_t v274 = v275 - v276;
                  }
                  while (v275 != v276);
                }
                sub_10000F55C(*(void *)(a1 + 64));
                off_t v277 = lseek(*(_DWORD *)(a1 + 76), 0, 2);
                if (v277 != v396.st_size)
                {
                  if (dword_100058FD8)
                  {
                    int v278 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_10003D074();
                    }
                    *__error() = v278;
                  }
                  sub_10001FC88("lseek");
                  goto LABEL_356;
                }
              }
              else
              {
                qword_100058F00 = qword_100058F08;
                qword_100058F08 = 0;
                if (dword_100058FD8)
                {
                  int v244 = *__error();
                  v245 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v246 = *(void *)(*(void *)(a1 + 200) + 152 * *(void *)(a1 + 8));
                    v440[0] = 136315138;
                    *(void *)&v440[1] = v246;
                    _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_INFO, "%s: file truncated while reading", (uint8_t *)v440, 0xCu);
                  }
                  *__error() = v244;
                }
                sub_10001FDC8("%s: file truncated while reading", *(const char **)(*(void *)(a1 + 200) + 152 * *(void *)(a1 + 8)));
                *(_DWORD *)a1 = 3;
              }
            }
            goto LABEL_492;
          }
          if (dword_100058FD8)
          {
            int v243 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003BE00();
            }
            *__error() = v243;
          }
          sub_10001FC88("strdup", v384);
        }
        goto LABEL_381;
      }
      v279 = (char *)*v23;
      if (*(_DWORD *)(v172 + 32)) {
        BOOL v280 = 1;
      }
      else {
        BOOL v280 = strchr((char *)*v23, 47) != 0;
      }
      if (sub_10002649C((char **)(a1 + 80), v279, v280, *(void *)(v172 + 544) != 0) == -1)
      {
        if (dword_100058FD8)
        {
          int v294 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D11C();
          }
          *__error() = v294;
        }
        sub_10001FC88("mktemplate", v382);
        goto LABEL_381;
      }
      uint64_t v291 = 220;
      if (!*(void *)(*v8 + 544)) {
        uint64_t v291 = 216;
      }
      int v292 = sub_100026114(*(_DWORD *)(a1 + v291), *(char **)(a1 + 80));
      *(_DWORD *)(a1 + 76) = v292;
      if (v292 != -1)
      {
        if (*(_DWORD *)(a1 + 72) == -1 || sub_10000F59C(v8, *v24, v292, (uint64_t)&v396))
        {
          if (dword_100058FD8)
          {
            int v293 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
              sub_10003D1B8();
            }
            *__error() = v293;
          }
          sub_10001FA38(2, "%s: temporary: %s", v164, v165, v166, v167, v168, v169, (char)*v23);
LABEL_492:
          if (*(_DWORD *)(*v8 + 112))
          {
            fcntl(*(_DWORD *)(a1 + 72), 48);
            fcntl(*(_DWORD *)(a1 + 76), 48);
          }
          goto LABEL_11;
        }
LABEL_381:
        v208 = (const char **)(v22 + 152 * v389);
        goto LABEL_382;
      }
      if (dword_100058FD8)
      {
        int v298 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003D150();
        }
        *__error() = v298;
      }
      v383 = (char *)*v24;
      v217 = "mkstempat: '%s'";
    }
    else
    {
      if (dword_100058FD8)
      {
        int v241 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CF78();
        }
        *__error() = v241;
      }
      v383 = (char *)*v23;
      v217 = "%s: mmap";
    }
LABEL_370:
    sub_10001FBD8(v217, v163, v164, v165, v166, v167, v168, v169, (char)v383);
    goto LABEL_381;
  }
  v393 = v20;
  v394 = (const char **)(v22 + 152 * v389);
  v392 = a5;
  if (*(_DWORD *)(*v8 + 112))
  {
    fcntl(*(_DWORD *)(a1 + 72), 48);
    fcntl(*(_DWORD *)(a1 + 76), 48);
  }
  uint64_t v388 = (uint64_t)v8;
  do
  {
    sub_10000F830((uint64_t)v8, *(void *)(*(void *)(a1 + 200) + 152 * *(void *)(a1 + 8) + 40), *(void *)(a1 + 192), 0);
    if ((*(_DWORD *)a1 & 0xFFFFFFFE) != 2) {
      sub_10003DAEC();
    }
    if (!*(void *)(a1 + 80) && !*(_DWORD *)(*v8 + 36)) {
      sub_10003D2B4();
    }
    if (*(_DWORD *)(a1 + 76) == -1 && !*(_DWORD *)(*v8 + 36)) {
      sub_10003D2E0();
    }
    uint64_t v38 = *(unsigned int *)(a1 + 224);
    if (v38 == -1) {
      sub_10003D30C();
    }
    if (*(_DWORD *)(*v8 + 552))
    {
      *(_DWORD *)md = *(void *)(a1 + 264);
      LOBYTE(v443[0]) = 0;
      if (!sub_10001DD4C((uint64_t)v8, v38, (char *)v443))
      {
        if (!dword_100058FD8)
        {
LABEL_56:
          sub_10001FC88("io_read_byte");
LABEL_57:
          int v79 = 0;
LABEL_152:
          int v120 = v79;
          continue;
        }
        int v78 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003D9C8(&v416, v417);
        }
LABEL_55:
        *__error() = v78;
        goto LABEL_56;
      }
      unsigned int v45 = LOBYTE(v443[0]);
      if ((v443[0] & 0xC0) == 0x40)
      {
        buf[0] = 0;
        if (!sub_10001DD4C((uint64_t)v8, *(_DWORD *)(a1 + 224), (char *)buf))
        {
          if (dword_100058FD8)
          {
            int v103 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003D8D8(&v414, v415);
            }
            *__error() = v103;
          }
          sub_10001FC88("io_read_int");
          goto LABEL_105;
        }
        unsigned int v46 = buf[0] | ((v443[0] & 0xBF) << 8);
        uint64_t v47 = v46;
        __int16 v48 = malloc_type_malloc(v46, 0x1BAA4B90uLL);
        if (v48)
        {
          uint64_t v49 = v48;
          int v50 = (char *)malloc_type_malloc(0x8030uLL, 0x1692C25BuLL);
          if (v50)
          {
            int data = v50;
            if (sub_10001DDD4((uint64_t)v8, *(_DWORD *)(a1 + 224), (char *)v49, v46))
            {
              if (*(_DWORD *)a1 == 3)
              {
                int v57 = 2;
LABEL_151:
                int v79 = v57;
                goto LABEL_152;
              }
              v387 = v49;
              sub_10001FA38(3, "decompress_state transition %d -> %d", v51, v52, v53, v54, v55, v56, dword_100058760);
              dword_100058760 = 3;
              qword_100058768 = (uint64_t)v49;
              dword_100058770 = v46;
              qword_100058780 = (uint64_t)data;
              dword_100058788 = 32816;
              if (!v46)
              {
LABEL_174:
                unint64_t v133 = 0;
LABEL_175:
                unint64_t v134 = *(void *)(a1 + 192) + v133;
                *(void *)(a1 + 184) += v47;
                *(void *)(a1 + 192) = v134;
                v8[11] += v133;
                free(v49);
                free(data);
                if (dword_100058770) {
                  sub_10003D9F8();
                }
                sub_10001FA38(3, "decompress_state transition %d -> %d", v135, v136, v137, v138, v139, v140, dword_100058760);
                dword_100058760 = 4;
                int v57 = 3;
                goto LABEL_151;
              }
              while (1)
              {
                int v125 = sub_10001A204((unsigned __int8 **)&qword_100058768, 0);
                if (v125) {
                  break;
                }
                int v126 = dword_100058788;
                size_t v127 = (32816 - dword_100058788);
                if (!sub_10000FA74(data, v127, a1, (uint64_t)v8))
                {
                  uint64_t v49 = v387;
                  if (dword_100058FD8)
                  {
                    int v158 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_10003DA74(&v406, v407);
                    }
                    goto LABEL_229;
                  }
                  goto LABEL_230;
                }
                uint64_t v128 = v22;
                if (v126 != 32816)
                {
                  unint64_t v129 = v127;
                  int v130 = data;
                  do
                  {
                    if (v129 >= 0xFFFFFFFF) {
                      uint64_t v131 = 0xFFFFFFFFLL;
                    }
                    else {
                      uint64_t v131 = v129;
                    }
                    CC_MD4_Update((CC_MD4_CTX *)(a1 + 88), v130, v131);
                    v130 += v131;
                    v129 -= v131;
                  }
                  while (v129);
                }
                size_t v132 = *(void *)(a1 + 192) + v127;
                *(void *)(a1 + 184) += v47;
                *(void *)(a1 + 192) = v132;
                uint64_t v8 = (uint64_t *)v388;
                *(void *)(v388 + 88) += v127;
                uint64_t v49 = v387;
                qword_100058780 = (uint64_t)data;
                dword_100058788 = 32816;
                uint64_t v22 = v128;
                if (!dword_100058770) {
                  goto LABEL_174;
                }
              }
              int v146 = v125;
              if (v125 == -5)
              {
                unint64_t v133 = (32816 - dword_100058788);
                if (dword_100058788 == 32816) {
                  goto LABEL_175;
                }
                uint64_t v147 = v22;
                v148 = data;
                int v149 = sub_10000FA74(data, (32816 - dword_100058788), a1, (uint64_t)v8);
                unint64_t v150 = v133;
                if (!v149)
                {
                  uint64_t v8 = (uint64_t *)v388;
                  uint64_t v49 = v387;
                  if (dword_100058FD8)
                  {
                    int v158 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_10003DA74(&v404, v405);
                    }
LABEL_229:
                    *__error() = v158;
                  }
LABEL_230:
                  sub_10001FB50("buf_copy dbuf");
                  goto LABEL_149;
                }
                do
                {
                  unint64_t v151 = v150;
                  if (v150 >= 0xFFFFFFFF) {
                    uint64_t v152 = 0xFFFFFFFFLL;
                  }
                  else {
                    uint64_t v152 = v150;
                  }
                  CC_MD4_Update((CC_MD4_CTX *)(a1 + 88), v148, v152);
                  v148 += v152;
                  unint64_t v150 = v151 - v152;
                }
                while (v151 != v152);
                uint64_t v22 = v147;
                uint64_t v8 = (uint64_t *)v388;
                uint64_t v49 = v387;
                goto LABEL_175;
              }
              if (dword_100058FD8)
              {
                int v153 = *__error();
                v154 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                {
                  v440[0] = 67109120;
                  v440[1] = v146;
                  _os_log_error_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_ERROR, "inflate res=%d", (uint8_t *)v440, 8u);
                }
                *__error() = v153;
              }
              sub_10001FB50("inflate res=%d", v146);
              v155 = (const char *)qword_100058798;
              if (qword_100058798)
              {
                if (dword_100058FD8)
                {
                  int v156 = *__error();
                  v157 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_10003DA24(v448, &v449, v157);
                  }
                  *__error() = v156;
                  v155 = (const char *)qword_100058798;
                }
                sub_10001FB50("inflate error: %s", v155);
              }
              free(v49);
              free(data);
LABEL_105:
              int v57 = 0;
              goto LABEL_151;
            }
            if (dword_100058FD8)
            {
              int v119 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D938(&v408, v409);
              }
              *__error() = v119;
            }
            sub_10001FC88("io_read_buf");
LABEL_149:
            free(v49);
            uint64_t v111 = data;
          }
          else
          {
            if (dword_100058FD8)
            {
              int v110 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D908(&v410, v411);
              }
              *__error() = v110;
            }
            sub_10001FC88("malloc");
            uint64_t v111 = v49;
          }
          free(v111);
          int v57 = 0;
          goto LABEL_151;
        }
        if (dword_100058FD8)
        {
          int v105 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D908(&v412, v413);
          }
          *__error() = v105;
        }
        sub_10001FC88("malloc");
        goto LABEL_105;
      }
      if (dword_100058760 != 4)
      {
        char v92 = dword_100058760;
        if (!LOBYTE(v443[0])) {
          goto LABEL_73;
        }
        goto LABEL_80;
      }
      sub_10001FA38(3, "decompress_state: flushing end of stream", v39, v40, v41, v42, v43, v44, v382);
      if (!qword_100058780)
      {
LABEL_72:
        sub_10001FA38(3, "decompress_state transition %d -> %d", v80, v81, v82, v83, v84, v85, dword_100058760);
        dword_100058760 = 1;
        unsigned int v45 = LOBYTE(v443[0]);
        char v92 = 1;
        if (!LOBYTE(v443[0]))
        {
LABEL_73:
          sub_10001FA38(3, "decompress_state transition %d -> %d", v39, v40, v41, v42, v43, v44, v92);
          dword_100058760 = 0;
          int v79 = 1;
          goto LABEL_152;
        }
LABEL_80:
        if ((v45 & 0x80) != 0)
        {
          *(_DWORD *)md += v45 & 0x3F;
          LOBYTE(v443[0]) = v45 >> 6;
          if ((v45 & 0x40) != 0) {
            goto LABEL_84;
          }
        }
        else if ((v45 & 0x20) != 0)
        {
          if (!sub_10001E948(v8, *(unsigned int *)(a1 + 224), md))
          {
            if (dword_100058FD8)
            {
              int v141 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D8D8(&v402, v403);
              }
              *__error() = v141;
            }
            sub_10001FC88("io_read_int");
            goto LABEL_57;
          }
          if (v443[0])
          {
LABEL_84:
            LOBYTE(v440[0]) = 0;
            if (sub_10001DD4C((uint64_t)v8, *(_DWORD *)(a1 + 224), (char *)v440))
            {
              uint64_t v94 = LOBYTE(v440[0]);
              if (sub_10001DD4C((uint64_t)v8, *(_DWORD *)(a1 + 224), (char *)v440))
              {
                unint64_t v101 = v94 | ((unint64_t)LOBYTE(v440[0]) << 8);
                sub_10001FA38(3, "decompress_state transition %d -> %d", v95, v96, v97, v98, v99, v100, dword_100058760);
                dword_100058760 = 2;
                unint64_t v102 = v101;
                goto LABEL_108;
              }
              if (!dword_100058FD8) {
                goto LABEL_56;
              }
              int v78 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D9C8(&v398, v399);
              }
            }
            else
            {
              if (!dword_100058FD8) {
                goto LABEL_56;
              }
              int v78 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D9C8(&v400, v401);
              }
            }
            goto LABEL_55;
          }
        }
        unint64_t v102 = 0;
LABEL_108:
        uint64_t v106 = -(uint64_t)v102;
        while (1)
        {
          if (*(_DWORD *)a1 == 3)
          {
LABEL_114:
            *(void *)(a1 + 264) = *(int *)md - 1;
            int v79 = 3;
            goto LABEL_152;
          }
          if (!v106)
          {
            sub_10001FA38(3, "decompress_state transition %d -> %d", v39, v40, v41, v42, v43, v44, dword_100058760);
            dword_100058760 = 1;
          }
          unint64_t v107 = *(int *)md;
          ++*(_DWORD *)md;
          int v108 = sub_1000100C8(v8, a1, v107);
          if (v108 != 3) {
            break;
          }
          if (++v106 == 1) {
            goto LABEL_114;
          }
        }
        int v112 = v108;
        int v79 = v108;
        if (*(_DWORD *)a1 != 3)
        {
          if (dword_100058FD8)
          {
            int v113 = *__error();
            uint64_t v114 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              v440[0] = 67109120;
              v440[1] = v79;
              _os_log_error_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "protocol_token_ff res=%d", (uint8_t *)v440, 8u);
            }
            *__error() = v113;
          }
          sub_10001FB50("protocol_token_ff res=%d", v112);
        }
        goto LABEL_152;
      }
      dword_100058770 = 0;
      dword_100058788 = 32816;
      int v86 = sub_10001A204((unsigned __int8 **)&qword_100058768, 2uLL);
      int v87 = v86;
      if (v86 != -5 && v86)
      {
        if (dword_100058FD8)
        {
          int v115 = *__error();
          uint64_t v116 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
          {
            v440[0] = 67109120;
            v440[1] = v87;
            _os_log_error_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "inflate protocol_token_cflush res=%d", (uint8_t *)v440, 8u);
          }
          *__error() = v115;
        }
        sub_10001FB50("inflate protocol_token_cflush res=%d", v87);
        if (qword_100058798)
        {
          if (dword_100058FD8)
          {
            int v117 = *__error();
            v118 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003DA24(v450, &v451, v118);
            }
            *__error() = v117;
          }
          sub_10001FB50("inflate error: %s");
        }
        goto LABEL_199;
      }
      if (v86 != -5 && dword_100058788 != 32816)
      {
        size_t v88 = (32816 - dword_100058788);
        uint64_t v8 = (uint64_t *)v388;
        if (!sub_10000FA74(0, v88, a1, v388))
        {
          if (dword_100058FD8)
          {
            int v143 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003DA74(&v418, v419);
            }
            *__error() = v143;
          }
          sub_10001FB50("buf_copy dbuf");
          goto LABEL_199;
        }
        uint64_t v89 = 0;
        do
        {
          if (v88 >= 0xFFFFFFFF) {
            uint64_t v90 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v90 = v88;
          }
          CC_MD4_Update((CC_MD4_CTX *)(a1 + 88), v89, v90);
          v89 += v90;
          v88 -= v90;
        }
        while (v88);
      }
      int v91 = sub_10001BB10((uint64_t)&qword_100058768);
      if (v91 == 1)
      {
        dword_100058770 = 4;
        qword_100058768 = (uint64_t)buf;
        *(_DWORD *)uint8_t buf = -65536;
        sub_10001A204((unsigned __int8 **)&qword_100058768, 2uLL);
        uint64_t v8 = (uint64_t *)v388;
        goto LABEL_72;
      }
      int v122 = v91;
      if (dword_100058FD8)
      {
        int v123 = *__error();
        int v124 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
        {
          v440[0] = 67109120;
          v440[1] = v122;
          _os_log_error_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "inflateSyncPoint res=%d", (uint8_t *)v440, 8u);
        }
        *__error() = v123;
      }
      sub_10001FB50("inflateSyncPoint res=%d", v122);
      uint64_t v8 = (uint64_t *)v388;
LABEL_199:
      if (dword_100058FD8)
      {
        int v144 = *__error();
        v145 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003DAA4(v446, v447, v145);
        }
        *__error() = v144;
      }
      sub_10001FB50("protocol_token_cflush=%d", 0);
      int v79 = 0;
      goto LABEL_152;
    }
    v440[0] = 0;
    if (!sub_10001E948(v8, v38, v440))
    {
      if (dword_100058FD8)
      {
        int v93 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003D8D8(&v428, v429);
        }
        *__error() = v93;
      }
      sub_10001FC88("io_read_int");
      goto LABEL_99;
    }
    unint64_t v58 = v440[0];
    if (v440[0] < 1)
    {
      if ((v440[0] & 0x80000000) != 0)
      {
        if (*(_DWORD *)a1 == 3) {
          int v77 = 2;
        }
        else {
          int v77 = sub_1000100C8(v8, a1, ~v440[0]);
        }
      }
      else
      {
        int v77 = 1;
      }
      goto LABEL_188;
    }
    int v59 = (char *)malloc_type_malloc(v440[0], 0xBEDA3AA2uLL);
    if (!v59)
    {
      if (dword_100058FD8)
      {
        int v104 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003D908(&v426, v427);
        }
        *__error() = v104;
      }
      sub_10001FBD8("malloc", v60, v61, v62, v63, v64, v65, v66, v382);
LABEL_99:
      int v77 = 0;
      goto LABEL_188;
    }
    uint64_t v67 = v59;
    if (sub_10001DDD4((uint64_t)v8, *(_DWORD *)(a1 + 224), v59, v58))
    {
      if (*(_DWORD *)a1 == 3 || sub_10000FA74(v67, v58, a1, (uint64_t)v8))
      {
        *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), vdupq_n_s64(v58));
        v8[11] += v58;
        sub_10001FA38(3, "%s: received %zu B block", v68, v69, v70, v71, v72, v73, *(void *)(a1 + 80));
        uint64_t v74 = v67;
        do
        {
          if (v58 >= 0xFFFFFFFF) {
            uint64_t v75 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v75 = v58;
          }
          CC_MD4_Update((CC_MD4_CTX *)(a1 + 88), v74, v75);
          v74 += v75;
          v58 -= v75;
        }
        while (v58);
        free(v67);
        int v76 = sub_10001CDD8((uint64_t)v8, *(_DWORD *)(a1 + 224));
        if (v76 < 0)
        {
          if (dword_100058FD8)
          {
            int v121 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003D968(&v420, v421);
            }
            *__error() = v121;
          }
          sub_10001FC88("io_read_check");
          int v77 = 0;
        }
        else if (v76)
        {
          int v77 = 3;
        }
        else
        {
          int v77 = 2;
        }
        goto LABEL_188;
      }
      if (dword_100058FD8)
      {
        int v142 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003D998(&v422, v423);
        }
        *__error() = v142;
      }
      sub_10001FB50("buf_copy");
    }
    else
    {
      if (dword_100058FD8)
      {
        int v109 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003D938(&v424, v425);
        }
        *__error() = v109;
      }
      sub_10001FC88("io_read_buf");
    }
    free(v67);
    int v77 = 0;
LABEL_188:
    int v120 = v77;
  }
  while (v120 == 3);
  if (v120 == 2) {
    return 1;
  }
  if (v120 != 1) {
    goto LABEL_356;
  }
  if (*(_DWORD *)(*v8 + 36)) {
    BOOL v159 = 0;
  }
  else {
    BOOL v159 = *(_DWORD *)a1 == 2;
  }
  int v160 = *(_DWORD *)a1;
  if (v159)
  {
    if (sub_10000FA74(0, 0, a1, (uint64_t)v8))
    {
      int v160 = *(_DWORD *)a1;
      goto LABEL_243;
    }
    if (dword_100058FD8)
    {
      int v237 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003D338();
      }
      *__error() = v237;
    }
    sub_10001FB50("buf_copy");
    goto LABEL_356;
  }
LABEL_243:
  if (v160 == 3)
  {
    *(void *)(a1 + 240) = 0;
  }
  else if (*(void *)(a1 + 240))
  {
    sub_10003D8AC();
  }
  CC_MD4_Final(md, (CC_MD4_CTX *)(a1 + 88));
  if (!sub_10001DDD4((uint64_t)v8, *(_DWORD *)(a1 + 224), (char *)v443, 0x10uLL))
  {
    if (dword_100058FD8)
    {
      int v215 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B728();
      }
      *__error() = v215;
    }
    sub_10001FC88("io_read_buf");
    goto LABEL_356;
  }
  if (v443[0] != *(void *)md || v443[1] != v445)
  {
    if (dword_100058FD8)
    {
      int v181 = *__error();
      v182 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        uint64_t v183 = *(void *)(a1 + 80);
        if ((*(_DWORD *)(v22 + 152 * v389 + 112) & 2) != 0) {
          v184 = "will not";
        }
        else {
          v184 = "will";
        }
        v440[0] = 136315394;
        *(void *)&v440[1] = v183;
        __int16 v441 = 2080;
        v442 = v184;
        _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_INFO, "%s: hash does not match, %s redo", (uint8_t *)v440, 0x16u);
      }
      *__error() = v181;
    }
    uint64_t v185 = v22 + 152 * v389;
    int v187 = *(_DWORD *)(v185 + 112);
    v186 = (int *)(v185 + 112);
    if ((v187 & 2) != 0) {
      v188 = "will not";
    }
    else {
      v188 = "will";
    }
    sub_10001FDC8("%s: hash does not match, %s redo", *(const char **)(a1 + 80), v188);
    int v189 = *v186;
    if ((*v186 & 2) == 0)
    {
      unsigned int v190 = v189 | 2;
      int *v186 = v190;
      ++*(void *)(a1 + 256);
      goto LABEL_349;
    }
    int *v186 = v189 | 8;
LABEL_359:
    v208 = v394;
    goto LABEL_382;
  }
  uint64_t v232 = v22 + 152 * v389;
  int v234 = *(_DWORD *)(v232 + 112);
  v233 = (unsigned int *)(v232 + 112);
  unsigned int v190 = v234 & 0xFFFFFFFC | 1;
  unsigned int *v233 = v190;
  uint64_t v235 = v8[10];
  ++v8[9];
  v8[10] = v235 + *((void *)v233 - 9);
  if (*(_DWORD *)(*v8 + 36))
  {
LABEL_349:
    sub_10000BB1C((uint64_t)v8, a1, (v190 >> 1) & 1);
    return 1;
  }
  if (*(_DWORD *)(*v8 + 152))
  {
    if (fstatat(*(_DWORD *)(a1 + 216), *v394, &v395, 0) == -1)
    {
      if (*__error() != 2)
      {
        if (dword_100058FD8)
        {
          int v290 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D5F8();
          }
          *__error() = v290;
        }
        v208 = v394;
        v385 = *v394;
        v268 = "%s: stat during --backup";
        goto LABEL_619;
      }
    }
    else if (*(void *)(*v8 + 160))
    {
      if (dword_100058FD8)
      {
        int v253 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
          sub_10003D840();
        }
        *__error() = v253;
      }
      sub_10001FA38(2, "%s: doing backup-dir to %s", v247, v248, v249, v250, v251, v252, (char)*v394);
      uint64_t v254 = (uint64_t)(*v394 - 2);
      v255 = *v394;
      do
      {
        v256 = v255;
        uint64_t v257 = v254;
        int v258 = strncmp(v255, "./", 2uLL);
        v255 = v256 + 2;
        uint64_t v254 = v257 + 2;
      }
      while (!v258);
      if (snprintf((char *)v440, 0x400uLL, "%s/%s%s", *(const char **)(*v8 + 160), v256, *(const char **)(*v8 + 168)) >= 1025)
      {
        if (dword_100058FD8)
        {
          int v266 = *__error();
          v267 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
          {
            v379 = *v394;
            uint64_t v381 = *(void *)(*v8 + 160);
            uint64_t v380 = *(void *)(*v8 + 168);
            *(_DWORD *)uint8_t buf = 136316162;
            v431 = v379;
            __int16 v432 = 2080;
            uint64_t v433 = v381;
            __int16 v434 = 2080;
            uint64_t v435 = v257 + 2;
            __int16 v436 = 2080;
            uint64_t v437 = v380;
            __int16 v438 = 1024;
            int v439 = 1024;
            _os_log_error_impl((void *)&_mh_execute_header, v267, OS_LOG_TYPE_ERROR, "%s: backup-dir: compound backup path too long: %s/%s%s > %d", buf, 0x30u);
          }
          *__error() = v266;
        }
        v208 = v394;
        v385 = *v394;
        v268 = "%s: backup-dir: compound backup path too long: %s/%s%s > %d";
LABEL_619:
        sub_10001FBD8(v268, v259, v260, v261, v262, v263, v264, v265, (char)v385);
        goto LABEL_382;
      }
      a5 = v392;
      if (sub_10000AC8C((uint64_t)v8, *(_DWORD *)(a1 + 216), v394, (const char *)v440, v395.st_mode) == -1)
      {
        if (dword_100058FD8)
        {
          int v297 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D7D8();
          }
          *__error() = v297;
        }
        v208 = v394;
        v385 = *v394;
        v268 = "%s: backup_to_dir: %s";
        goto LABEL_619;
      }
    }
    else if ((v395.st_mode & 0xF000) != 0x4000)
    {
      if (dword_100058FD8)
      {
        int v295 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
          sub_10003D764();
        }
        *__error() = v295;
      }
      sub_10001FA38(2, "%s: doing backup", v247, v248, v249, v250, v251, v252, (char)*v394);
      if (snprintf((char *)v440, 0x400uLL, "%s%s", *v394, *(const char **)(*v8 + 168)) >= 1025)
      {
        if (dword_100058FD8)
        {
          int v296 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D660();
          }
          *__error() = v296;
        }
        v208 = v394;
        v385 = *v394;
        v268 = "%s: backup: compound backup path too long: %s%s > %d";
        goto LABEL_619;
      }
      if (sub_10000B308(*(_DWORD *)(a1 + 216), *v394, *(_DWORD *)(a1 + 216), (const char *)v440, 1) == -1)
      {
        if (dword_100058FD8)
        {
          int v378 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D6FC();
          }
          *__error() = v378;
          uint64_t v8 = (uint64_t *)v388;
        }
        v208 = v394;
        v385 = *v394;
        v268 = "%s: move_file: %s";
        goto LABEL_619;
      }
    }
  }
  if (!sub_100026CC4((uint64_t)v8, *(_DWORD *)(a1 + 72) == -1, *(_DWORD *)(a1 + 76), (uint64_t *)v394, *(void *)(a1 + 80)))
  {
    if (dword_100058FD8)
    {
      int v302 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003D36C();
      }
      *__error() = v302;
    }
    sub_10001FC88("rsync_set_metadata");
    goto LABEL_356;
  }
  if (*((_DWORD *)v8 + 41)) {
    sub_10002005C(v8, (uint64_t)v394, 1);
  }
  if (*(_DWORD *)(*v8 + 196))
  {
    if (*v393)
    {
      int v299 = *((_DWORD *)v393 + 6);
      if (v299 >= 1)
      {
        uint64_t v300 = *v393 + 32 * (v299 - 1);
        v301 = (void *)*v393;
        goto LABEL_542;
      }
      v301 = (void *)*v393;
LABEL_541:
      uint64_t v300 = 0;
LABEL_542:
      *((_DWORD *)v393 + 6) = v299 + 1;
      v313 = *v394;
      v314 = strrchr((char *)*v394, 47);
      if (v314) {
        v315 = v314 + 1;
      }
      else {
        v315 = (char *)v313;
      }
      int v316 = v315 - v313;
      if (v315 != v313 && *(v315 - 1) != 47) {
        sub_10003D5CC();
      }
      if (snprintf((char *)v440, 0x400uLL, "%.*s.~tmp~", v316, v313) >= 1025)
      {
        if (dword_100058FD8)
        {
          int v324 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D43C();
          }
          *__error() = v324;
        }
        sub_10001FBD8("%s: delayed-update: compound path too long: %.*s.~tmp~ > %d", v317, v318, v319, v320, v321, v322, v323, (char)*v394);
        v208 = v394;
        goto LABEL_382;
      }
      if (v300 && (v325 = *(const char **)(v300 + 24), !strcmp((const char *)v440, v325)))
      {
        v301[4 * v299 + 3] = v325;
        *(void *)(v300 + 24) = 0;
      }
      else
      {
        v326 = strdup((const char *)v440);
        v327 = (char *)&v301[4 * v299];
        *((void *)v327 + 3) = v326;
        v328 = (void **)(v327 + 24);
        if (!v326)
        {
          v208 = v394;
          if (dword_100058FD8)
          {
            int v338 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003BE00();
            }
            *__error() = v338;
          }
          v268 = "strdup";
          goto LABEL_619;
        }
        if (sub_100026008(*(_DWORD *)(a1 + 216), v326, 0x1C0u) == -1 && *__error() != 17)
        {
          if (dword_100058FD8)
          {
            int v336 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003D564();
            }
            *__error() = v336;
            uint64_t v8 = (uint64_t *)v388;
          }
          sub_10001FBD8("mkpathat '%s'", v329, v330, v331, v332, v333, v334, v335, (char)*v328);
          free(*v328);
          *v328 = 0;
          goto LABEL_359;
        }
      }
      v303 = (char *)v440;
      if (snprintf((char *)v440, 0x400uLL, "%s/%s", (const char *)v301[4 * v299 + 3], &(*v394)[v316]) >= 1025)
      {
        if (dword_100058FD8)
        {
          int v346 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D4D8();
          }
          *__error() = v346;
        }
        sub_10001FBD8("%s: delayed-update: compound path too long: .~tmp~/%s > %d", v339, v340, v341, v342, v343, v344, v345, (char)*v394);
        v208 = v394;
        goto LABEL_382;
      }
LABEL_580:
      v304 = 0;
      goto LABEL_581;
    }
    v305 = malloc_type_calloc(count, 0x20uLL, 0x700409A72FACAuLL);
    uint64_t *v393 = (uint64_t)v305;
    if (v305)
    {
      *((_DWORD *)v393 + 6) = 0;
      int v299 = 0;
      v301 = v305;
      goto LABEL_541;
    }
    if (dword_100058FD8)
    {
      int v337 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003D408();
      }
      *__error() = v337;
    }
    sub_10001FBD8("malloc dlrenamer entries", v306, v307, v308, v309, v310, v311, v312, v382);
LABEL_356:
    v208 = v394;
    if (v22) {
      goto LABEL_382;
    }
  }
  else
  {
    v303 = (char *)*v394;
    if (!*(_DWORD *)(*v8 + 200)) {
      goto LABEL_580;
    }
    v304 = (const char **)sub_100027688((uint64_t)v394, a5);
LABEL_581:
    uint64_t v347 = *v8;
    if (!*(_DWORD *)(*v8 + 40) && !*(_DWORD *)(v347 + 12))
    {
      BOOL v159 = *(void *)(v347 + 544) == 0;
      uint64_t v348 = 220;
      if (v159) {
        uint64_t v348 = 216;
      }
      int v349 = *(_DWORD *)(a1 + v348);
      int v350 = *(int *)(v22 + 152 * v389 + 8) >= 0 ? *(_DWORD *)(v22 + 152 * v389 + 8) : v349;
      if (!sub_100002468((uint64_t)v8, (uint64_t)v394, v350, *(const char **)(a1 + 80), *(_DWORD *)(a1 + 216), v303, v303 == *v394))goto LABEL_359; {
    }
      }
    v208 = v394;
    if (sub_100002960((uint64_t)v8, (uint64_t)v394, *(_DWORD *)(a1 + 216), v303))
    {
      if (*(_DWORD *)(*v8 + 196))
      {
        uint64_t v351 = *v393;
        uint64_t v352 = *((int *)v393 + 6) - 1;
        v353 = strdup(v303);
        *(void *)(v351 + 32 * v352) = v353;
        if (!v353)
        {
          if (dword_100058FD8)
          {
            int v377 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003BE00();
            }
            *__error() = v377;
          }
          sub_10001FBD8("strdup", v354, v355, v356, v357, v358, v359, v360, v382);
          goto LABEL_359;
        }
        uint64_t v361 = v351 + 32 * v352;
        v362 = (uint64_t *)v394;
        *(void *)(v361 + 16) = v394;
        *(void *)(v361 + 8) = *v394;
      }
      else
      {
        *v233 |= 4u;
        v362 = (uint64_t *)v394;
        if (v304)
        {
          if (unlinkat(*(_DWORD *)(a1 + 216), *v394, 0) == -1 && *__error() != 2)
          {
            if (dword_100058FD8)
            {
              int v363 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D3D4();
              }
              *__error() = v363;
            }
            sub_10001FC88("unlink");
            uint64_t v8 = (uint64_t *)v388;
          }
          if (linkat(*(_DWORD *)(a1 + 216), *v304, *(_DWORD *)(a1 + 216), *v394, 0) == -1)
          {
            sub_10001FA38(-1, "While hard linking '%s' to '%s' ", v364, v365, v366, v367, v368, v369, (char)*v304);
            if (dword_100058FD8)
            {
              int v370 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003D3A0();
              }
              *__error() = v370;
              uint64_t v8 = (uint64_t *)v388;
            }
            sub_10001FC88("linkat");
          }
        }
      }
      unint64_t v371 = *(void *)(*(void *)(a1 + 200) + 152 * *(void *)(a1 + 8) + 40);
      sub_10000F830((uint64_t)v8, v371, v371, 1);
      sub_10000FD70((uint64_t)v8, a1, v362, v372, v373, v374, v375, v376);
      unsigned int v190 = *v233;
      goto LABEL_349;
    }
LABEL_382:
    *((_DWORD *)v208 + 28) |= 8u;
  }
LABEL_383:
  sub_10000BB1C((uint64_t)v8, a1, 1);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10000F55C(uint64_t result)
{
  if (qword_100058F00 != result) {
    sub_10003B4B0();
  }
  qword_100058F00 = qword_100058F08;
  qword_100058F08 = 0;
  return result;
}

uint64_t sub_10000F59C(uint64_t *a1, const char *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  if (*(_DWORD *)(*a1 + 92))
  {
    uid_t v9 = -1;
  }
  else
  {
    uid_t v10 = geteuid();
    if (*(_DWORD *)(a4 + 16)) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11) {
      uid_t v9 = *(_DWORD *)(a4 + 16);
    }
    else {
      uid_t v9 = -1;
    }
    uint64_t v8 = *a1;
  }
  if (*(_DWORD *)(v8 + 88))
  {
    gid_t v12 = -1;
  }
  else if (getegid() == *(_DWORD *)(a4 + 20))
  {
    gid_t v12 = -1;
  }
  else
  {
    gid_t v12 = *(_DWORD *)(a4 + 20);
  }
  __int16 v13 = *(_WORD *)(a4 + 4);
  if ((v12 & v9) != 0xFFFFFFFF && fchown(a3, v9, v12) == -1)
  {
    if (*__error() != 1)
    {
      if (!dword_100058FD8)
      {
        uint64_t v25 = "%s: fchown";
        goto LABEL_38;
      }
      int v24 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003DD2C();
      }
      uint64_t v25 = "%s: fchown";
      goto LABEL_35;
    }
    if (!geteuid())
    {
      if (dword_100058FD8)
      {
        int v22 = *__error();
        uint64_t v23 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 136315650;
          uint64_t v27 = a2;
          __int16 v28 = 1024;
          uid_t v29 = v9;
          __int16 v30 = 1024;
          gid_t v31 = v12;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s: identity unknown or not available to user.group: %u.%u", buf, 0x18u);
        }
        *__error() = v22;
      }
      sub_10001FDC8("%s: identity unknown or not available to user.group: %u.%u", a2, v9, v12);
    }
  }
  if (*(_DWORD *)(*a1 + 60) || fchmod(a3, v13 & 0xFFF) != -1) {
    return 1;
  }
  if (!dword_100058FD8)
  {
    uint64_t v25 = "%s: fchmod";
    goto LABEL_38;
  }
  int v24 = *__error();
  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
    sub_10003DCC4();
  }
  uint64_t v25 = "%s: fchmod";
LABEL_35:
  *__error() = v24;
LABEL_38:
  sub_10001FBD8(v25, v14, v15, v16, v17, v18, v19, v20, (char)a2);
  return 0;
}

uint64_t sub_10000F830(uint64_t result, unint64_t a2, unint64_t a3, int a4)
{
  if (*(_DWORD *)(*(void *)result + 136))
  {
    uint64_t v7 = result;
    v12.tv_sec = 0;
    *(void *)&v12.tv_usec = 0;
    uint64_t result = gettimeofday(&v12, 0);
    double v8 = (double)v12.tv_usec / 1000000.0 + (double)v12.tv_sec;
    double v9 = *(double *)(v7 + 152);
    if (v9 == 0.0)
    {
LABEL_16:
      *(double *)(v7 + 152) = v8;
      return result;
    }
    if (v8 - v9 >= 0.1 || a4 != 0)
    {
      fprintf(__stderrp, " %14llu", a3);
      fprintf(__stderrp, " %3.0f%%", (double)a3 / (double)a2 * 100.0);
      double v11 = (double)a3 / (v8 - *(double *)(v7 + 152));
      if (v11 <= 1073741820.0)
      {
        if (v11 <= 1048576.0)
        {
          if (v11 > 1024.0) {
            fprintf(__stderrp, " %7.2fKB/s");
          }
        }
        else
        {
          fprintf(__stderrp, " %7.2fMB/s");
        }
      }
      else
      {
        fprintf(__stderrp, " %7.2fGB/s");
      }
      fprintf(__stderrp, "   %02d:%02d:%02d", (int)((double)(a2 - a3) / v11) / 3600, (int)((double)(a2 - a3) / v11) % 3600 / 60, (int)((double)(a2 - a3) / v11) % 60);
      if (a4) {
        uint64_t result = fprintf(__stderrp, "\n");
      }
      else {
        uint64_t result = fprintf(__stderrp, "\r");
      }
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_10000FA74(char *__buf, size_t __nbyte, uint64_t a3, uint64_t a4)
{
  size_t v5 = *(void *)(a3 + 240);
  size_t v6 = *(void *)(a3 + 248);
  if (v6 < v5) {
    sub_10003DD94();
  }
  size_t v8 = __nbyte;
  double v9 = __buf;
  if (__nbyte)
  {
    size_t v10 = v6 - v5;
    if (v6 > v5)
    {
      uint64_t v11 = *(void *)(a3 + 232);
      if (!v11) {
        sub_10003DF7C();
      }
      if (v10 >= __nbyte) {
        size_t v12 = __nbyte;
      }
      else {
        size_t v12 = v10;
      }
      memcpy((void *)(v11 + v5), __buf, v12);
      size_t v6 = *(void *)(a3 + 248);
      size_t v5 = *(void *)(a3 + 240) + v12;
      *(void *)(a3 + 240) = v5;
      if (v5 > v6) {
        sub_10003DFA8();
      }
      v8 -= v12;
      if (!v8) {
        return 1;
      }
      v9 += v12;
    }
  }
  if (!v5)
  {
LABEL_27:
    if (!v8) {
      return 1;
    }
    ssize_t v30 = write(*(_DWORD *)(a3 + 76), v9, v8);
    if ((v30 & 0x8000000000000000) == 0)
    {
      if (v30 == v8) {
        return 1;
      }
      if (!dword_100058FD8) {
        goto LABEL_46;
      }
      int v33 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    if (dword_100058FD8)
    {
      int v32 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (!v6) {
    sub_10003DE90();
  }
  if (v5 > v6) {
    sub_10003DEBC();
  }
  __int16 v13 = *(const void **)(a3 + 232);
  if (!v13) {
    sub_10003DEE8();
  }
  if (*(_DWORD *)(*(void *)a4 + 144))
  {
    if (sub_10000A6D8(*(unsigned char **)(a3 + 232), v5))
    {
      if (lseek(*(_DWORD *)(a3 + 76), *(void *)(a3 + 240), 1) == -1)
      {
        if (dword_100058FD8)
        {
          int v21 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003DF14();
          }
          *__error() = v21;
        }
        sub_10001FBD8("%s: lseek", v14, v15, v16, v17, v18, v19, v20, *(void *)(a3 + 80));
        return 0;
      }
LABEL_26:
      *(void *)(a3 + 240) = 0;
      goto LABEL_27;
    }
    __int16 v13 = *(const void **)(a3 + 232);
    size_t v5 = *(void *)(a3 + 240);
  }
  ssize_t v22 = write(*(_DWORD *)(a3 + 76), v13, v5);
  if ((v22 & 0x8000000000000000) == 0)
  {
    if (v22 != *(void *)(a3 + 240))
    {
      if (!dword_100058FD8)
      {
LABEL_46:
        sub_10001FB50("%s: short write", *(const char **)(a3 + 80));
        return 0;
      }
      int v33 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
LABEL_45:
        *__error() = v33;
        goto LABEL_46;
      }
LABEL_44:
      sub_10003DE28();
      goto LABEL_45;
    }
    goto LABEL_26;
  }
  if (dword_100058FD8)
  {
    int v32 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_36:
    }
      sub_10003DDC0();
LABEL_37:
    *__error() = v32;
  }
LABEL_38:
  sub_10001FBD8("%s: write", v23, v24, v25, v26, v27, v28, v29, *(void *)(a3 + 80));
  return 0;
}

void sub_10000FD70(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_DWORD *)(*(void *)a1 + 4))
  {
    uint64_t v9 = *(void *)(a2 + 192);
    float v10 = (float)v9;
    if (v9)
    {
      double v11 = (double)v9;
      float v12 = (double)*(uint64_t *)(a2 + 184) * 100.0 / (double)v9;
      double v13 = v12;
      if (v9 < 1073741825)
      {
        if (v9 <= 0x100000)
        {
          if (v9 < 1025)
          {
            int v15 = 0;
            uint64_t v14 = "B";
          }
          else
          {
            float v10 = v11 * 0.0009765625;
            uint64_t v14 = "KB";
            int v15 = 1;
          }
        }
        else
        {
          float v10 = v11 * 0.000000953674316;
          uint64_t v14 = "MB";
          int v15 = 2;
        }
      }
      else
      {
        float v10 = v11 * 9.31322575e-10;
        uint64_t v14 = "GB";
        int v15 = 3;
      }
    }
    else
    {
      int v15 = 0;
      uint64_t v14 = "B";
      double v13 = 100.0;
    }
    if (dword_100058FD8)
    {
      int v16 = *__error();
      uint64_t v17 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *a3;
        *(_DWORD *)uint8_t buf = 136316162;
        uint64_t v20 = v18;
        __int16 v21 = 1024;
        int v22 = v15;
        __int16 v23 = 2048;
        double v24 = v10;
        __int16 v25 = 2080;
        uint64_t v26 = v14;
        __int16 v27 = 2048;
        double v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s (%.*f %s, %.1f%% downloaded)", buf, 0x30u);
      }
      *__error() = v16;
    }
    sub_10001FA38(0, "%s (%.*f %s, %.1f%% downloaded)", (uint64_t)a3, a4, a5, a6, a7, a8, *a3);
  }
}

uint64_t sub_10000FF88()
{
  if (dword_100058760)
  {
    uint64_t v0 = 1;
    if (dword_100058760 >= 4)
    {
      qword_100058768 = 0;
      dword_100058770 = 0;
      qword_100058780 = 0;
      dword_100058788 = 0;
      sub_10001A08C(&qword_100058768);
      sub_10001FA38(3, "decompress_state transition %d -> %d", v1, v2, v3, v4, v5, v6, dword_100058760);
      dword_100058760 = 1;
    }
  }
  else
  {
    qword_100058768 = 0;
    dword_100058770 = 0;
    qword_100058780 = 0;
    dword_100058788 = 0;
    qword_1000587A8 = 0;
    unk_1000587B0 = 0;
    int v7 = sub_10001A0F4(&qword_100058768, -15, "1.2.3", 112);
    if (v7)
    {
      int v14 = v7;
      if (dword_100058FD8)
      {
        int v15 = *__error();
        int v16 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003DFD4(v14, v16);
        }
        *__error() = v15;
      }
      sub_10001FB50("inflateInit2 res=%d", v14);
      return 0;
    }
    else
    {
      uint64_t v0 = 1;
      sub_10001FA38(3, "decompress_state transition %d -> %d", v8, v9, v10, v11, v12, v13, dword_100058760);
      dword_100058760 = 1;
    }
  }
  return v0;
}

uint64_t sub_1000100C8(void *a1, uint64_t a2, unint64_t a3)
{
  if (*(_DWORD *)a2 == 3) {
    sub_10003E04C();
  }
  unint64_t v5 = *(void *)(a2 + 56);
  if (v5 <= a3)
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      uint64_t v20 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = *(void *)(a2 + 80);
        uint64_t v36 = *(void *)(a2 + 56);
        *(_DWORD *)uint8_t buf = 136315650;
        uint64_t v39 = v35;
        __int16 v40 = 2048;
        unint64_t v41 = a3;
        __int16 v42 = 2048;
        uint64_t v43 = v36;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s: token not in block set: %zu (have %zu blocks)", buf, 0x20u);
      }
      *__error() = v19;
    }
    sub_10001FB50("%s: token not in block set: %zu (have %zu blocks)");
    return 0;
  }
  if (v5 - 1 != a3 || (size_t v7 = *(void *)(a2 + 24)) == 0)
  {
    size_t v7 = *(void *)(a2 + 32);
    if (!v7) {
      sub_10003E078();
    }
  }
  uint64_t v8 = *(void **)(a2 + 64);
  if (!v8) {
    sub_10003E0A4();
  }
  uint64_t v9 = *(void *)(a2 + 32) * a3;
  uint64_t v10 = (char *)sub_100010F34(v8, v9);
  uint64_t v11 = *a1;
  if ((*(_DWORD *)(*a1 + 40) || *(_DWORD *)(v11 + 12))
    && (*(_DWORD *)(a2 + 72) & 0x80000000) == 0
    && *(void *)(a2 + 192) == v9)
  {
    if (!*(_DWORD *)(v11 + 36) && !sub_10000FA74(0, 0, a2, (uint64_t)a1))
    {
      if (dword_100058FD8)
      {
        int v29 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_78:
        }
          sub_10003E0FC();
LABEL_79:
        *__error() = v29;
      }
LABEL_80:
      sub_10001FB50("buf_copy");
      return 0;
    }
    if (lseek(*(_DWORD *)(a2 + 76), v7, 1) == -1)
    {
      if (dword_100058FD8)
      {
        int v18 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E1C4();
        }
        *__error() = v18;
      }
      sub_10001FC88("lseek");
      return 0;
    }
  }
  else
  {
    if (qword_100058F00 && qword_100058F08) {
      sub_10003E0D0();
    }
    if (qword_100058F00) {
      qword_100058F08 = qword_100058F00;
    }
    if (sigsetjmp(dword_100058F10, 0) >= 1)
    {
      qword_100058F00 = qword_100058F08;
      qword_100058F08 = 0;
      if (!dword_100058FD8)
      {
LABEL_35:
        sub_10001FDC8("%s: file truncated while reading", *(const char **)(*(void *)(a2 + 200) + 152 * *(void *)(a2 + 8)));
        *(_DWORD *)a2 = 3;
        return 2;
      }
      int v22 = *__error();
      __int16 v23 = qword_100058FE8;
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
LABEL_34:
        *__error() = v22;
        goto LABEL_35;
      }
      uint64_t v24 = *(void *)(*(void *)(a2 + 200) + 152 * *(void *)(a2 + 8));
      *(_DWORD *)uint8_t buf = 136315138;
      uint64_t v39 = v24;
LABEL_33:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s: file truncated while reading", buf, 0xCu);
      goto LABEL_34;
    }
    qword_100058F00 = *(void *)(a2 + 64);
    int v25 = sub_10000FA74(v10, v7, a2, (uint64_t)a1);
    uint64_t v26 = *(void *)(a2 + 64);
    if (!v25)
    {
      if (qword_100058F00 != v26) {
        sub_10003B4B0();
      }
      qword_100058F00 = qword_100058F08;
      qword_100058F08 = 0;
      if (!dword_100058FD8) {
        goto LABEL_80;
      }
      int v29 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (qword_100058F00 != v26) {
      sub_10003B4B0();
    }
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
  }
  uint64_t v27 = *a1;
  if (!*(_DWORD *)(*a1 + 36))
  {
    if (sub_10000FA74(0, 0, a2, (uint64_t)a1))
    {
      uint64_t v27 = *a1;
      goto LABEL_44;
    }
    if (dword_100058FD8)
    {
      int v29 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_78;
      }
      goto LABEL_79;
    }
    goto LABEL_80;
  }
LABEL_44:
  if (*(_DWORD *)(v27 + 552))
  {
    if (!sub_1000107B8(a2, a3))
    {
      if (dword_100058FD8)
      {
        int v30 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E190();
        }
        *__error() = v30;
      }
      sub_10001FC88("protocol_token_ff_compress");
      return 0;
    }
    if (*(_DWORD *)a2 == 3) {
      return 2;
    }
  }
  *(void *)(a2 + 192) += v7;
  a1[12] += v7;
  sub_10001FA38(3, "%s: copied %zu B", v12, v13, v14, v15, v16, v17, *(void *)(a2 + 80));
  if (qword_100058F00 && qword_100058F08) {
    sub_10003E130();
  }
  if (qword_100058F00) {
    qword_100058F08 = qword_100058F00;
  }
  if (sigsetjmp(dword_100058F10, 0) >= 1)
  {
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
    if (!dword_100058FD8) {
      goto LABEL_35;
    }
    int v22 = *__error();
    __int16 v23 = qword_100058FE8;
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
    uint64_t v28 = *(void *)(*(void *)(a2 + 200) + 152 * *(void *)(a2 + 8));
    *(_DWORD *)uint8_t buf = 136315138;
    uint64_t v39 = v28;
    goto LABEL_33;
  }
  qword_100058F00 = *(void *)(a2 + 64);
  unint64_t v31 = v7;
  int v32 = v10;
  do
  {
    unint64_t v33 = v31;
    if (v31 >= 0xFFFFFFFF) {
      uint64_t v34 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v34 = v31;
    }
    CC_MD4_Update((CC_MD4_CTX *)(a2 + 88), v32, v34);
    v32 += v34;
    unint64_t v31 = v33 - v34;
  }
  while (v33 != v34);
  if (qword_100058F00 != *(void *)(a2 + 64)) {
    sub_10003B4B0();
  }
  qword_100058F00 = qword_100058F08;
  qword_100058F08 = 0;
  if ((sub_10001CDD8((uint64_t)a1, *(_DWORD *)(a2 + 224)) & 0x80000000) != 0)
  {
    if (dword_100058FD8)
    {
      int v37 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003E15C();
      }
      *__error() = v37;
    }
    sub_10001FC88("io_read_check");
    return 0;
  }
  return 3;
}

uint64_t sub_1000107B8(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 56);
  if (v4 <= a2)
  {
    if (dword_100058FD8)
    {
      int v15 = *__error();
      uint64_t v16 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(void *)(a1 + 80);
        uint64_t v28 = *(void *)(a1 + 56);
        *(_DWORD *)uint8_t buf = 136315650;
        uint64_t v34 = v27;
        __int16 v35 = 2048;
        unint64_t v36 = a2;
        __int16 v37 = 2048;
        uint64_t v38 = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s: token not in block set: %zu (have %zu blocks)", buf, 0x20u);
      }
      *__error() = v15;
    }
    sub_10001FB50("%s: token not in block set: %zu (have %zu blocks)");
    return 0;
  }
  if (v4 - 1 != a2 || (unint64_t v5 = *(void *)(a1 + 24)) == 0)
  {
    unint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      sub_10003E1F8();
    }
  }
  uint64_t v6 = *(void **)(a1 + 64);
  if (!v6) {
    sub_10003E224();
  }
  size_t v7 = sub_100010F34(v6, *(void *)(a1 + 32) * a2);
  if (!sub_10000FF88())
  {
    if (dword_100058FD8)
    {
      int v17 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003E250();
      }
      *__error() = v17;
    }
    sub_10001FB50("decompress_reinit");
    return 0;
  }
  uint64_t v8 = malloc_type_malloc(0x8030uLL, 0x8B892CBAuLL);
  if (!v8)
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CD90();
      }
      *__error() = v19;
    }
    sub_10001FC88("malloc");
    return 0;
  }
  uint64_t v29 = (uint64_t)v7;
  uint64_t v9 = v8;
  dword_100058770 = 0;
  char v30 = 0;
  uint64_t v10 = 0;
LABEL_10:
  if (v10)
  {
    uint64_t v11 = 0;
    qword_100058768 = v29;
    dword_100058770 = v10;
    v5 -= v10;
  }
  else
  {
    if (v5 >= 0xFFFF) {
      uint64_t v11 = 0xFFFFLL;
    }
    else {
      uint64_t v11 = v5;
    }
    __int16 v31 = v11;
    __int16 v32 = ~(_WORD)v11;
    qword_100058768 = (uint64_t)&v30;
    dword_100058770 = 5;
  }
  while (1)
  {
    qword_100058780 = (uint64_t)v9;
    dword_100058788 = 32816;
    if (qword_100058F00) {
      BOOL v12 = qword_100058F08 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      sub_10003E284();
    }
    if (qword_100058F00) {
      qword_100058F08 = qword_100058F00;
    }
    if (sigsetjmp(dword_100058F10, 0) >= 1)
    {
      qword_100058F00 = qword_100058F08;
      qword_100058F08 = 0;
      if (dword_100058FD8)
      {
        int v20 = *__error();
        __int16 v21 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v22 = *(void *)(*(void *)(a1 + 200) + 152 * *(void *)(a1 + 8));
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v34 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s: file truncated while reading", buf, 0xCu);
        }
        *__error() = v20;
      }
      sub_10001FDC8("%s: file truncated while reading", *(const char **)(*(void *)(a1 + 200) + 152 * *(void *)(a1 + 8)));
      *(_DWORD *)a1 = 3;
      return 2;
    }
    qword_100058F00 = *(void *)(a1 + 64);
    int v13 = sub_10001A204((unsigned __int8 **)&qword_100058768, 2uLL);
    if (qword_100058F00 != *(void *)(a1 + 64)) {
      sub_10003B4B0();
    }
    int v14 = v13;
    qword_100058F00 = qword_100058F08;
    qword_100058F08 = 0;
    if (v13) {
      break;
    }
    if (!dword_100058788 || !v5)
    {
      free(v9);
      return 2;
    }
    uint64_t v10 = v11;
    if (!dword_100058770) {
      goto LABEL_10;
    }
  }
  if (dword_100058FD8)
  {
    int v23 = *__error();
    uint64_t v24 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E324(v14, v24);
    }
    *__error() = v23;
  }
  sub_10001FB50("inflate ff res=%d", v14);
  int v25 = (const char *)qword_100058798;
  if (qword_100058798)
  {
    if (dword_100058FD8)
    {
      int v26 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003E2B0();
      }
      *__error() = v26;
      int v25 = (const char *)qword_100058798;
    }
    sub_10001FB50("inflate error: %s", v25);
  }
  free(v9);
  return 0;
}

void sub_100010D10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

unsigned char *sub_100010D28(unsigned char *result, unsigned char *a2)
{
  void *result = 0;
  *a2 = 0;
  return result;
}

void sub_100010D44(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100010D68(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100010D78(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100010D84(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void *sub_100010DA4(int a1, size_t a2, int a3)
{
  uint64_t v6 = malloc_type_malloc(0x10uLL, 0x1080040FC6463CFuLL);
  size_t v7 = v6;
  if (v6)
  {
    v6[1] = a2;
    uint64_t v8 = mmap(0, a2, a3, 1, a1, 0);
    *size_t v7 = v8;
    if (v8 == (void *)-1)
    {
      int v10 = *__error();
      free(v7);
      size_t v7 = 0;
      *__error() = v10;
    }
    else if (!dword_1000587D8++)
    {
      *(void *)&v12.sa_mask = 0x4000000000;
      v12.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_100010E98;
      sigaction(10, &v12, (sigaction *)&qword_1000587E0);
    }
  }
  return v7;
}

uint64_t sub_100010E98(uint64_t result, uint64_t a2)
{
  if (result != 10) {
    sub_10003E39C();
  }
  if (qword_100058F00)
  {
    unint64_t v2 = *(void *)(a2 + 24);
    if (v2 >= *(void *)qword_100058F00 && v2 < *(void *)qword_100058F00 + *(void *)(qword_100058F00 + 8)) {
      siglongjmp(dword_100058F10, 10);
    }
  }
  if (qword_1000587E0 != 1)
  {
    sigaction(10, (const sigaction *)&qword_1000587E0, 0);
    return raise(10);
  }
  return result;
}

void *sub_100010F34(void *result, uint64_t a2)
{
  if (result) {
    return (void *)(*result + a2);
  }
  return result;
}

uint64_t sub_100010F44(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_100010F50(uint64_t a1)
{
  if (a1)
  {
    if (qword_100058F00 == a1 || qword_100058F08 == a1) {
      sub_10003E3C8();
    }
    munmap(*(void **)a1, *(void *)(a1 + 8));
    free((void *)a1);
    if (!--dword_1000587D8)
    {
      sigaction(10, (const sigaction *)&qword_1000587E0, 0);
    }
  }
}

uint64_t sub_100010FE4(int a1, unsigned __int8 *a2, unsigned int a3)
{
  unint64_t v3 = HIWORD(a1);
  unint64_t v4 = (unsigned __int16)a1;
  if (a3 != 1)
  {
    if (!a2) {
      return 1;
    }
    if (a3 < 0x10)
    {
      for (; a3; --a3)
      {
        unsigned int v9 = *a2++;
        v4 += v9;
        v3 += v4;
      }
      if (v4 > 0xFFF0) {
        v4 -= 65521;
      }
      v3 %= 0xFFF1uLL;
      return v4 | (v3 << 16);
    }
    if (a3 >> 4 >= 0x15B)
    {
      do
      {
        a3 -= 5552;
        int v10 = -347;
        uint64_t v11 = a2;
        do
        {
          unint64_t v12 = v4 + *v11;
          uint64_t v13 = v12 + v3;
          unint64_t v14 = v12 + v11[1];
          uint64_t v15 = v13 + v14;
          unint64_t v16 = v14 + v11[2];
          uint64_t v17 = v15 + v16;
          unint64_t v18 = v16 + v11[3];
          uint64_t v19 = v17 + v18;
          unint64_t v20 = v18 + v11[4];
          uint64_t v21 = v19 + v20;
          unint64_t v22 = v20 + v11[5];
          uint64_t v23 = v21 + v22;
          unint64_t v24 = v22 + v11[6];
          uint64_t v25 = v23 + v24;
          unint64_t v26 = v24 + v11[7];
          uint64_t v27 = v25 + v26;
          unint64_t v28 = v26 + v11[8];
          uint64_t v29 = v27 + v28;
          uint64_t v30 = v28 + v11[9];
          uint64_t v31 = v29 + v30;
          uint64_t v32 = v30 + v11[10];
          uint64_t v33 = v31 + v32;
          uint64_t v34 = v32 + v11[11];
          uint64_t v35 = v33 + v34;
          uint64_t v36 = v34 + v11[12];
          uint64_t v37 = v35 + v36;
          uint64_t v38 = v36 + v11[13];
          uint64_t v39 = v37 + v38;
          uint64_t v40 = v38 + v11[14];
          uint64_t v41 = v39 + v40;
          unint64_t v4 = v40 + v11[15];
          unint64_t v3 = v41 + v4;
          v11 += 16;
        }
        while (!__CFADD__(v10++, 1));
        a2 += 5552;
        v4 %= 0xFFF1uLL;
        v3 %= 0xFFF1uLL;
      }
      while (a3 >> 4 > 0x15A);
      if (!a3) {
        return v4 | (v3 << 16);
      }
      if (a3 < 0x10) {
        goto LABEL_30;
      }
    }
    do
    {
      a3 -= 16;
      unint64_t v43 = v4 + *a2;
      uint64_t v44 = v43 + v3;
      unint64_t v45 = v43 + a2[1];
      uint64_t v46 = v44 + v45;
      unint64_t v47 = v45 + a2[2];
      uint64_t v48 = v46 + v47;
      unint64_t v49 = v47 + a2[3];
      uint64_t v50 = v48 + v49;
      unint64_t v51 = v49 + a2[4];
      uint64_t v52 = v50 + v51;
      unint64_t v53 = v51 + a2[5];
      uint64_t v54 = v52 + v53;
      unint64_t v55 = v53 + a2[6];
      uint64_t v56 = v54 + v55;
      unint64_t v57 = v55 + a2[7];
      uint64_t v58 = v56 + v57;
      unint64_t v59 = v57 + a2[8];
      uint64_t v60 = v58 + v59;
      uint64_t v61 = v59 + a2[9];
      uint64_t v62 = v60 + v61;
      uint64_t v63 = v61 + a2[10];
      uint64_t v64 = v62 + v63;
      uint64_t v65 = v63 + a2[11];
      uint64_t v66 = v64 + v65;
      uint64_t v67 = v65 + a2[12];
      uint64_t v68 = v66 + v67;
      uint64_t v69 = v67 + a2[13];
      uint64_t v70 = v68 + v69;
      uint64_t v71 = v69 + a2[14];
      uint64_t v72 = v70 + v71;
      unint64_t v4 = v71 + a2[15];
      unint64_t v3 = v72 + v4;
      a2 += 16;
    }
    while (a3 > 0xF);
    if (a3)
    {
LABEL_30:
      do
      {
        unsigned int v73 = *a2++;
        v4 += v73;
        v3 += v4;
        --a3;
      }
      while (a3);
    }
    v4 %= 0xFFF1uLL;
    v3 %= 0xFFF1uLL;
    return v4 | (v3 << 16);
  }
  unint64_t v5 = (unsigned __int16)a1 + (unint64_t)*a2;
  if (v5 > 0xFFF0) {
    v5 -= 65521;
  }
  unint64_t v6 = v5 + HIWORD(a1);
  if (v6 <= 0xFFF0) {
    uint64_t v7 = v6 << 16;
  }
  else {
    uint64_t v7 = (v6 << 16) - 4293984256u;
  }
  return v7 | v5;
}

char *sub_100011310(int a1)
{
  if ((a1 - 1) >= 3) {
    errx(1, "unknown base mode %d", a1);
  }
  return off_100054920[a1 - 1];
}

uint64_t sub_100011358(_DWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  if (!a2) {
    sub_10003E3F4();
  }
  if (!*(void *)(a2 + 24) && *(_DWORD *)(a2 + 40) == 1) {
    sub_10003E420();
  }
  if (*(void *)(*(void *)a1 + 240)) {
    unint64_t v6 = *(char **)(*(void *)a1 + 240);
  }
  else {
    unint64_t v6 = "rsync";
  }
  if (*(void *)(a2 + 8))
  {
    uint64_t v7 = *(char **)(*(void *)a1 + 248);
    if (v7 || (uint64_t v7 = getenv("RSYNC_RSH")) != 0) {
      sub_100012048((uint64_t)&v89, v7);
    }
    else {
      sub_100025C9C((uint64_t)&v89, "ssh", v8, v9, v10, v11, v12, v13, v86);
    }
    if (*(int *)(*(void *)a1 + 560) >= 1)
    {
      unint64_t v20 = (char *)sub_100025D48((uint64_t)&v89, 0);
      if (v20)
      {
        uint64_t v21 = v20;
        unint64_t v22 = strrchr(v20, 47);
        uint64_t v23 = v22 ? v22 + 1 : v21;
        if (!strcmp(v23, "ssh")) {
          sub_100025C9C((uint64_t)&v89, "-%d", v14, v15, v16, v17, v18, v19, *(_DWORD *)(*(void *)a1 + 560));
        }
      }
    }
    sub_100025C9C((uint64_t)&v89, "%s", v14, v15, v16, v17, v18, v19, *(void *)(a2 + 8));
    sub_100012048((uint64_t)&v89, v6);
    if (a3) {
      *a3 = v90;
    }
    sub_100025C9C((uint64_t)&v89, "--server", v24, v25, v26, v27, v28, v29, v87);
    if (*(_DWORD *)(a2 + 40) != 1) {
      goto LABEL_24;
    }
    uint64_t v36 = "--sender";
  }
  else
  {
    sub_100012048((uint64_t)&v89, v6);
    uint64_t v36 = "--server";
  }
  sub_100025C9C((uint64_t)&v89, v36, v30, v31, v32, v33, v34, v35, v86);
LABEL_24:
  uint64_t v37 = "--delete";
  switch(*(_DWORD *)(*(void *)a1 + 96))
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 2:
      uint64_t v37 = "--delete-before";
      goto LABEL_29;
    case 3:
      uint64_t v37 = "--delete-during";
      goto LABEL_29;
    case 4:
      uint64_t v37 = "--delete-delay";
      goto LABEL_29;
    case 5:
      uint64_t v37 = "--delete-after";
LABEL_29:
      sub_100025C9C((uint64_t)&v89, v37, v30, v31, v32, v33, v34, v35, v86);
LABEL_30:
      uint64_t v38 = *(void *)a1;
      if (*(_DWORD *)(*(void *)a1 + 12))
      {
        sub_100025C9C((uint64_t)&v89, "--append", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v38 = *(void *)a1;
      }
      if (*(_DWORD *)(v38 + 16)) {
        sub_100025C9C((uint64_t)&v89, "-c", v30, v31, v32, v33, v34, v35, v86);
      }
      if (a1[3]) {
        sub_100025C9C((uint64_t)&v89, "--checksum-seed=%d", v30, v31, v32, v33, v34, v35, a1[3]);
      }
      uint64_t v39 = *(void *)a1;
      if (*(_DWORD *)(*(void *)a1 + 100))
      {
        sub_100025C9C((uint64_t)&v89, "--delete-excluded", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v39 = *(void *)a1;
      }
      if (*(_DWORD *)(v39 + 120) == 2)
      {
        sub_100025C9C((uint64_t)&v89, "--numeric-ids", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v39 = *(void *)a1;
      }
      if (*(_DWORD *)(v39 + 88))
      {
        sub_100025C9C((uint64_t)&v89, "-g", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v39 = *(void *)a1;
      }
      if (*(_DWORD *)(v39 + 84))
      {
        sub_100025C9C((uint64_t)&v89, "-l", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v39 = *(void *)a1;
      }
      if (*(_DWORD *)(v39 + 36) == 2)
      {
        sub_100025C9C((uint64_t)&v89, "-n", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v39 = *(void *)a1;
      }
      if (*(_DWORD *)(v39 + 40))
      {
        sub_100025C9C((uint64_t)&v89, "--inplace", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v39 = *(void *)a1;
      }
      if (*(void *)(v39 + 48) && !*(_DWORD *)(a2 + 40))
      {
        sub_100025C9C((uint64_t)&v89, "--partial-dir", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v86 = *(void *)(*(void *)a1 + 48);
        uint64_t v40 = "%s";
        goto LABEL_54;
      }
      if (*(_DWORD *)(v39 + 44) && !*(_DWORD *)(a2 + 40))
      {
        uint64_t v40 = "--partial";
LABEL_54:
        sub_100025C9C((uint64_t)&v89, v40, v30, v31, v32, v33, v34, v35, v86);
      }
      uint64_t v41 = *(_DWORD **)a1;
      if (*(_DWORD *)(*(void *)a1 + 92))
      {
        sub_100025C9C((uint64_t)&v89, "-o", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[15])
      {
        sub_100025C9C((uint64_t)&v89, "-p", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[26])
      {
        sub_100025C9C((uint64_t)&v89, "-D", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[8])
      {
        sub_100025C9C((uint64_t)&v89, "-r", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[14])
      {
        sub_100025C9C((uint64_t)&v89, "-t", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[32])
      {
        sub_100025C9C((uint64_t)&v89, "-O", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[36])
      {
        sub_100025C9C((uint64_t)&v89, "-S", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[50])
      {
        sub_100025C9C((uint64_t)&v89, "-H", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v41 = *(_DWORD **)a1;
      }
      if (v41[37]) {
        sub_100025C9C((uint64_t)&v89, "-u", v30, v31, v32, v33, v34, v35, v86);
      }
      int v42 = dword_100058FDC;
      if (dword_100058FDC > 3)
      {
        sub_100025C9C((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
        int v42 = dword_100058FDC;
      }
      if (v42 > 2)
      {
        sub_100025C9C((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
        int v42 = dword_100058FDC;
      }
      if (v42 > 1)
      {
        sub_100025C9C((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
        int v42 = dword_100058FDC;
      }
      if (v42 >= 1) {
        sub_100025C9C((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
      }
      uint64_t v43 = *(void *)a1;
      int v44 = *(_DWORD *)(*(void *)a1 + 176);
      if (v44 > 1)
      {
        sub_100025C9C((uint64_t)&v89, "-h", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
        int v44 = *(_DWORD *)(*(void *)a1 + 176);
      }
      if (v44 >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "-h", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 512) >= 1 && !*(_DWORD *)(v43 + 12))
      {
        sub_100025C9C((uint64_t)&v89, "-W", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 136) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--progress", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 152) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--backup", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(void *)(v43 + 160))
      {
        sub_100025C9C((uint64_t)&v89, "--backup-dir", v30, v31, v32, v33, v34, v35, v86);
        sub_100025C9C((uint64_t)&v89, "%s", v45, v46, v47, v48, v49, v50, *(void *)(*(void *)a1 + 160));
        uint64_t v43 = *(void *)a1;
      }
      unint64_t v51 = *(unsigned char **)(v43 + 168);
      if (v51 && strcmp(*(const char **)(v43 + 168), "~") && *v51)
      {
        sub_100025C9C((uint64_t)&v89, "--suffix", v30, v31, v32, v33, v34, v35, v86);
        sub_100025C9C((uint64_t)&v89, "%s", v52, v53, v54, v55, v56, v57, *(void *)(*(void *)a1 + 168));
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 180) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--ignore-existing", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 184) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--ignore-non-existing", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      int v58 = *(_DWORD *)(v43 + 124);
      if (v58 > 1)
      {
        sub_100025C9C((uint64_t)&v89, "-x", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
        int v58 = *(_DWORD *)(*(void *)a1 + 124);
      }
      if (v58 >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "-x", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 552))
      {
        sub_100025C9C((uint64_t)&v89, "-z", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
        if (*(_DWORD *)(*(void *)a1 + 552))
        {
          if (*(_DWORD *)(v43 + 556) != -1)
          {
            sub_100025C9C((uint64_t)&v89, "--compress-level=%d", v30, v31, v32, v33, v34, v35, *(_DWORD *)(v43 + 556));
            uint64_t v43 = *(void *)a1;
          }
        }
      }
      if (!*(_DWORD *)(v43 + 108)
        || !*(_DWORD *)(v43 + 104)
        && (sub_100025C9C((uint64_t)&v89, "--specials", v30, v31, v32, v33, v34, v35, v86),
            uint64_t v43 = *(void *)a1,
            !*(_DWORD *)(*(void *)a1 + 108)))
      {
        if (*(_DWORD *)(v43 + 104))
        {
          sub_100025C9C((uint64_t)&v89, "--no-specials", v30, v31, v32, v33, v34, v35, v86);
          uint64_t v43 = *(void *)a1;
        }
      }
      if ((*(void *)(v43 + 224) & 0x8000000000000000) == 0)
      {
        sub_100025C9C((uint64_t)&v89, "--max-size=%lld", v30, v31, v32, v33, v34, v35, *(void *)(v43 + 224));
        uint64_t v43 = *(void *)a1;
      }
      if ((*(void *)(v43 + 232) & 0x8000000000000000) == 0)
      {
        sub_100025C9C((uint64_t)&v89, "--min-size=%lld", v30, v31, v32, v33, v34, v35, *(void *)(v43 + 232));
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 188) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--relative", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 192))
      {
        sub_100025C9C((uint64_t)&v89, "--dirs", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 196) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--delay-updates", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 64))
      {
        sub_100025C9C((uint64_t)&v89, "-L", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 68))
      {
        sub_100025C9C((uint64_t)&v89, "--copy-unsafe-links", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 72))
      {
        sub_100025C9C((uint64_t)&v89, "--safe-links", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 76))
      {
        sub_100025C9C((uint64_t)&v89, "-k", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 80))
      {
        sub_100025C9C((uint64_t)&v89, "-K", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 204))
      {
        sub_100025C9C((uint64_t)&v89, "--remove-source-files", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 600))
      {
        sub_100025C9C((uint64_t)&v89, "--extended-attributes", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (!*(_DWORD *)(a2 + 40))
      {
        if (*(int *)(v43 + 132) < 1
          || (sub_100025C9C((uint64_t)&v89, "--ignore-times", v30, v31, v32, v33, v34, v35, v86),
              uint64_t v43 = *(void *)a1,
              !*(_DWORD *)(a2 + 40)))
        {
          if (*(_DWORD *)(v43 + 580))
          {
            sub_100025C9C((uint64_t)&v89, "--fuzzy", v30, v31, v32, v33, v34, v35, v86);
            uint64_t v43 = *(void *)a1;
          }
        }
      }
      if (*(void *)(v43 + 448))
      {
        sub_100025C9C((uint64_t)&v89, "--out-format=%s", v30, v31, v32, v33, v34, v35, *(void *)(v43 + 448));
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 212) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "-8", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      uint64_t v59 = *(void *)(v43 + 472);
      if (v59 >= 1024)
      {
        sub_100025C9C((uint64_t)&v89, "--bwlimit=%lld", v30, v31, v32, v33, v34, v35, (unint64_t)v59 >> 10);
        uint64_t v43 = *(void *)a1;
      }
      if (*(int *)(v43 + 576) >= 1)
      {
        sub_100025C9C((uint64_t)&v89, "--modify-window=%d", v30, v31, v32, v33, v34, v35, *(_DWORD *)(v43 + 576));
        uint64_t v43 = *(void *)a1;
      }
      if (!*(_DWORD *)(a2 + 40))
      {
        if (!*(void *)(v43 + 544)
          || (sub_100025C9C((uint64_t)&v89, "--temp-dir", v30, v31, v32, v33, v34, v35, v86),
              sub_100025C9C((uint64_t)&v89, "%s", v62, v63, v64, v65, v66, v67, *(void *)(*(void *)a1 + 544)),
              uint64_t v43 = *(void *)a1,
              !*(_DWORD *)(a2 + 40)))
        {
          if (*(uint64_t *)(v43 + 488) >= 1)
          {
            sub_100025C9C((uint64_t)&v89, "-B%ld", v30, v31, v32, v33, v34, v35, *(void *)(v43 + 488));
            uint64_t v43 = *(void *)a1;
          }
        }
      }
      if (*(_DWORD *)(v43 + 564))
      {
        sub_100025C9C((uint64_t)&v89, "--force", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 568))
      {
        sub_100025C9C((uint64_t)&v89, "--ignore-errors", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 572))
      {
        sub_100025C9C((uint64_t)&v89, "--executability", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(_DWORD *)(v43 + 584))
      {
        sub_100025C9C((uint64_t)&v89, "-q", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      if (*(void *)(v43 + 592))
      {
        sub_100025C9C((uint64_t)&v89, "--max-delete=%ld", v30, v31, v32, v33, v34, v35, *(void *)(v43 + 592));
        uint64_t v43 = *(void *)a1;
      }
      if (!*(_DWORD *)(v43 + 112))
      {
        sub_100025C9C((uint64_t)&v89, "--cache", v30, v31, v32, v33, v34, v35, v86);
        uint64_t v43 = *(void *)a1;
      }
      int v60 = *(_DWORD *)(v43 + 208);
      if (v60)
      {
        if (v60 == 1)
        {
          uint64_t v61 = "--super";
        }
        else
        {
          if (v60 != 2) {
            sub_10003E44C();
          }
          uint64_t v61 = "--no-super";
        }
        sub_100025C9C((uint64_t)&v89, v61, v30, v31, v32, v33, v34, v35, v86);
      }
      if (*(void *)(*(void *)a1 + 432) && *(void *)(*(void *)a1 + 496))
      {
        sub_100025C9C((uint64_t)&v89, "--files-from", v30, v31, v32, v33, v34, v35, v86);
        sub_100025C9C((uint64_t)&v89, "%s", v68, v69, v70, v71, v72, v73, *(void *)(*(void *)a1 + 504));
        uint64_t v74 = *(int **)a1;
        if (!*(_DWORD *)(*(void *)a1 + 188))
        {
          sub_100025C9C((uint64_t)&v89, "--no-relative", v30, v31, v32, v33, v34, v35, v86);
          uint64_t v74 = *(int **)a1;
        }
        if (!v74[48])
        {
          sub_100025C9C((uint64_t)&v89, "--no-dirs", v30, v31, v32, v33, v34, v35, v86);
          uint64_t v74 = *(int **)a1;
        }
        if (v74[8] >= 1)
        {
          sub_100025C9C((uint64_t)&v89, "--recursive", v30, v31, v32, v33, v34, v35, v86);
          uint64_t v74 = *(int **)a1;
        }
        if (v74[110]) {
          sub_100025C9C((uint64_t)&v89, "--from0", v30, v31, v32, v33, v34, v35, v86);
        }
      }
      if (!*(_DWORD *)(a2 + 40))
      {
        uint64_t v82 = *(_DWORD **)a1;
        if (*(void *)(*(void *)a1 + 528) && v82[9] == 1)
        {
          sub_100025C9C((uint64_t)&v89, "--only-write-batch=%s", v30, v31, v32, v33, v34, v35, *(void *)(*(void *)a1 + 528));
          uint64_t v82 = *(_DWORD **)a1;
        }
        if (v82[120])
        {
          sub_100025C9C((uint64_t)&v89, "--size-only", v30, v31, v32, v33, v34, v35, v86);
          uint64_t v82 = *(_DWORD **)a1;
        }
        if (v82[35])
        {
          for (uint64_t i = 272; i != 432; i += 8)
          {
            if (!*(void *)(*(void *)a1 + i)) {
              break;
            }
            unsigned int v84 = *(_DWORD *)(*(void *)a1 + 140) - 1;
            if (v84 >= 3) {
              errx(1, "unknown base mode %d");
            }
            sub_100025C9C((uint64_t)&v89, "%s=%s", v30, v31, v32, v33, v34, v35, (char)off_100054920[v84]);
          }
        }
      }
      sub_100025C9C((uint64_t)&v89, ".", v30, v31, v32, v33, v34, v35, v86);
      if (*(_DWORD *)(a2 + 40) == 1)
      {
        if (*(void *)(a2 + 24))
        {
          unint64_t v81 = 0;
          do
          {
            if (**(unsigned char **)(*(void *)(a2 + 16) + 8 * v81)) {
              sub_100025C9C((uint64_t)&v89, "%s", v75, v76, v77, v78, v79, v80, *(void *)(*(void *)(a2 + 16) + 8 * v81));
            }
            else {
              sub_100025C9C((uint64_t)&v89, ".", v75, v76, v77, v78, v79, v80, v88);
            }
            ++v81;
          }
          while (v81 < *(void *)(a2 + 24));
        }
      }
      else if (**(unsigned char **)(a2 + 32))
      {
        sub_100025C9C((uint64_t)&v89, "%s", v75, v76, v77, v78, v79, v80, *(void *)(a2 + 32));
      }
      else
      {
        sub_100025C9C((uint64_t)&v89, ".", v75, v76, v77, v78, v79, v80, v88);
      }
      return v89;
    default:
      errx(1, "bogus delete mode %d\n");
  }
}

void sub_100012048(uint64_t a1, char *__s1)
{
  unint64_t v3 = strdup(__s1);
  if (!v3) {
    sub_10003C514();
  }
  unint64_t v4 = v3;
  char v5 = *v3;
  if (!*v3) {
    goto LABEL_31;
  }
  uint64_t v6 = 0;
  size_t v13 = (size_t)&v3[strlen(v3) + 1];
  uint64_t v14 = v4;
  uint64_t v23 = v4;
  while (1)
  {
    if (v5 < 0)
    {
      if (__maskrune(v5, 0x4000uLL))
      {
LABEL_6:
        sub_100025C9C(a1, "%.*s", v7, v8, v9, v10, v11, v12, (_BYTE)v4 - (_BYTE)v14);
        do
        {
          while (1)
          {
            __darwin_ct_rune_t v16 = *++v4;
            __darwin_ct_rune_t v15 = v16;
            if (v16 < 0) {
              break;
            }
            if ((_DefaultRuneLocale.__runetype[v15] & 0x4000) == 0) {
              goto LABEL_11;
            }
          }
        }
        while (__maskrune(v15, 0x4000uLL));
LABEL_11:
        uint64_t v17 = 0;
        uint64_t v14 = v4;
        goto LABEL_22;
      }
    }
    else if ((_DefaultRuneLocale.__runetype[v5] & 0x4000) != 0)
    {
      goto LABEL_6;
    }
    if (v5 != 39 && v5 != 34)
    {
      uint64_t v17 = v6;
      goto LABEL_23;
    }
    uint64_t v18 = *v4;
    uint64_t v17 = *v4;
    if (v14 == v4 || v17 != v6)
    {
      memmove(v4, v4 + 1, v13 - (void)(v4 + 1));
      --v13;
    }
    else
    {
      ++v4;
    }
    uint64_t v19 = strchr(v4, v18);
    if (!v19) {
      break;
    }
    unint64_t v4 = v19;
    memmove(v19, v19 + 1, v13 - (void)(v19 + 1));
    if (v4 <= v14) {
      sub_10003E478();
    }
    --v13;
LABEL_22:
    --v4;
LABEL_23:
    int v20 = *++v4;
    char v5 = v20;
    uint64_t v6 = v17;
    if (!v20) {
      goto LABEL_28;
    }
  }
  if (v17)
  {
    free(v23);
  }
  unint64_t v4 = 0;
LABEL_28:
  char v22 = (_BYTE)v4 - (_BYTE)v14;
  BOOL v21 = v4 > v14;
  unint64_t v4 = v23;
  if (v21) {
    sub_100025C9C(a1, "%.*s", v7, v8, v9, v10, v11, v12, v22);
  }
LABEL_31:

  free(v4);
}

uint64_t sub_100012234(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const char **)(a1 + 16);
  size_t v4 = strlen(v3);
  char v5 = *(const char **)(a2 + 16);
  size_t v6 = strlen(v5);
  size_t v7 = v6;
  if (v4 >= v6) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v4;
  }
  if (!strncmp(v3, v5, v8))
  {
    if (v4 < v7) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    return strcmp(v3, v5);
  }
}

BOOL sub_1000122C8(void *a1, uint64_t a2, int a3)
{
  BOOL result = 1;
  switch(*(_WORD *)(a2 + 88))
  {
    case 1:
    case 8:
      return result;
    case 2:
      if (dword_100058FD8)
      {
        int v6 = *__error();
        size_t v7 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v8 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s: directory cycle", buf, 0xCu);
        }
        *__error() = v6;
      }
      sub_10001FDC8("%s: directory cycle");
      return 0;
    case 3:
      if (*(_DWORD *)(*a1 + 104) && (*(_WORD *)(*(void *)(a2 + 96) + 4) & 0xB000 | 0x4000) == 0x6000) {
        return result;
      }
      if (*(_DWORD *)(*a1 + 108))
      {
        int v9 = *(_WORD *)(*(void *)(a2 + 96) + 4) & 0xF000;
        if (v9 == 4096 || !a3 || v9 == 49152) {
          return result;
        }
      }
      else if (!a3)
      {
        return result;
      }
      if (dword_100058FD8)
      {
        int v47 = *__error();
        uint64_t v48 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v49 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "%s: skipping special", buf, 0xCu);
        }
        *__error() = v47;
      }
      sub_10001FDC8("%s: skipping special");
      return 0;
    case 4:
      int v10 = *(_DWORD *)(a2 + 56);
      *__error() = v10;
      if (dword_100058FD8)
      {
        int v17 = *__error();
        uint64_t v18 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s: unreadable directory", buf, 0xCu);
        }
        *__error() = v17;
      }
      sub_10001FE50(0, "%s: unreadable directory", v11, v12, v13, v14, v15, v16, *(void *)(a2 + 48));
      return 0;
    case 5:
      if (dword_100058FD8)
      {
        int v20 = *__error();
        BOOL v21 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v22 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s: skipping dot-file", buf, 0xCu);
        }
        *__error() = v20;
      }
      sub_10001FDC8("%s: skipping dot-file");
      return 0;
    case 7:
      int v23 = *(_DWORD *)(a2 + 56);
      *__error() = v23;
      if (dword_100058FD8)
      {
        int v30 = *__error();
        uint64_t v31 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v32 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
        }
        *__error() = v30;
      }
      sub_10001FE50(0, "%s", v24, v25, v26, v27, v28, v29, *(void *)(a2 + 48));
      return 0;
    case 0xA:
      int v33 = *(_DWORD *)(a2 + 56);
      *__error() = v33;
      ++a1[30];
      if (dword_100058FD8)
      {
        int v40 = *__error();
        uint64_t v41 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v42 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s: could not stat", buf, 0xCu);
        }
        *__error() = v40;
      }
      sub_10001FE50(0, "%s: could not stat", v34, v35, v36, v37, v38, v39, *(void *)(a2 + 48));
      return 0;
    case 0xC:
      if (*(_DWORD *)(*a1 + 84) || !a3 || *(_DWORD *)(*a1 + 76)) {
        return result;
      }
      if (dword_100058FD8)
      {
        int v43 = *__error();
        int v44 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v45 = *(void *)(a2 + 48);
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v51 = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "%s: skipping symlink (5)", buf, 0xCu);
        }
        *__error() = v43;
      }
      sub_10001FDC8("%s: skipping symlink (5)");
      return 0;
    case 0xD:
      uint64_t v46 = (_DWORD *)*a1;
      if (!*(_DWORD *)(*a1 + 64) && !v46[18] && !v46[17]) {
        return v46[21] != 0;
      }
      BOOL result = 0;
      ++a1[30];
      return result;
    default:
      return 0;
  }
}

void sub_100012830(char *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a2;
    if (a2)
    {
      size_t v4 = a1;
      do
      {
        int v5 = *((_DWORD *)v4 + 2);
        if ((v5 & 0x80000000) == 0) {
          close(v5);
        }
        free(*(void **)v4);
        free(*((void **)v4 + 11));
        v4 += 152;
        --v2;
      }
      while (v2);
    }
    free(a1);
  }
}

uint64_t sub_1000128A8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a5;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v12 = (os_log_t *)&qword_100058FE8;
  if (dword_100058FD8)
  {
    int v13 = *__error();
    uint64_t v14 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v72 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "sending file metadata list: %zu", buf, 0xCu);
    }
    *__error() = v13;
  }
  sub_10001FA38(1, "sending file metadata list: %zu", a3, a4, a5, a6, a7, a8, v8);
  if (v8)
  {
    uint64_t v15 = a4 + 72;
    while (1)
    {
      uint64_t v16 = *(char **)(v15 - 56);
      size_t v17 = strlen(v16);
      if (!v17) {
        sub_10003E50C();
      }
      size_t v24 = v17;
      if (v17 >= 0x7FFFFFFF) {
        sub_10003E538();
      }
      if (*(_DWORD *)(a1 + 128)
        && sub_10001CDD8(a1, a2)
        && !sub_10001CF78((void *)a1, a2))
      {
        break;
      }
      if (*(unsigned char *)(v15 - 16)) {
        unsigned __int16 v25 = 65;
      }
      else {
        unsigned __int16 v25 = 64;
      }
      int v26 = *(_DWORD *)(a1 + 260);
      if (*(_DWORD *)(*(void *)a1 + 200))
      {
        int v27 = *(_WORD *)(v15 - 48) & 0xF000;
        if (v26 < 28 || v27 == 0x4000 || *(void *)(v15 + 8) < 2uLL)
        {
          if (v27 == 0x8000) {
            v25 |= 0x200u;
          }
        }
        else
        {
          if (*(unsigned __int16 *)(v15 - 35) << 8) {
            __int16 v28 = 512;
          }
          else {
            __int16 v28 = 2560;
          }
          v25 |= v28;
        }
      }
      if (v25 < 0x100u || v26 < 28) {
        unsigned __int16 v30 = v25;
      }
      else {
        unsigned __int16 v30 = v25 | 4;
      }
      if (dword_100058FD8)
      {
        int v31 = *__error();
        uint64_t v32 = v12;
        int v33 = *v12;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v44 = *(void *)(v15 - 32);
          uint64_t v45 = *(void *)(v15 - 24);
          int v46 = *(unsigned __int16 *)(v15 - 48);
          *(_DWORD *)uint8_t buf = 136316162;
          uint64_t v72 = (uint64_t)v16;
          __int16 v73 = 2048;
          uint64_t v74 = v44;
          __int16 v75 = 2048;
          uint64_t v76 = v45;
          __int16 v77 = 1024;
          int v78 = v46;
          __int16 v79 = 1024;
          int v80 = v30;
          _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s: sending file metadata: size %jd, mtime %jd, mode %o, flag %o", buf, 0x2Cu);
        }
        *__error() = v31;
        uint64_t v12 = v32;
      }
      sub_10001FA38(2, "%s: sending file metadata: size %jd, mtime %jd, mode %o, flag %o", v18, v19, v20, v21, v22, v23, (char)v16);
      int v34 = *(_DWORD *)(a1 + 260);
      int v35 = sub_10001D9A8(a1, a3, v30);
      if ((v30 & 4) != 0 && v34 >= 28)
      {
        if (!v35)
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_90;
            }
            goto LABEL_91;
          }
          goto LABEL_205;
        }
        if (!sub_10001D9A8(a1, a3, SHIBYTE(v30)))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_90;
            }
            goto LABEL_91;
          }
          goto LABEL_205;
        }
      }
      else if (!v35)
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_90;
          }
          goto LABEL_91;
        }
        goto LABEL_205;
      }
      if (!sub_10001E174(a1, a3, v24))
      {
        if (!dword_100058FD8) {
          goto LABEL_191;
        }
        int v56 = *__error();
        if (!os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
          goto LABEL_187;
        }
LABEL_186:
        sub_10003B7F8();
        goto LABEL_187;
      }
      if (!sub_10001D870(a1, a3, v16, v24))
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_110;
        }
LABEL_195:
        sub_10001FC88("io_write_buf");
        goto LABEL_189;
      }
      if (!sub_10001E17C(a1, a3, *(void *)(v15 - 32)))
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_172;
          }
          goto LABEL_173;
        }
LABEL_174:
        sub_10001FC88("io_write_long");
        goto LABEL_189;
      }
      if (!sub_10001E174(a1, a3, *(_DWORD *)(v15 - 24)))
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_148;
          }
LABEL_149:
          uint64_t v57 = "io_write_uint";
          goto LABEL_188;
        }
LABEL_150:
        sub_10001FC88("io_write_uint");
        goto LABEL_189;
      }
      if (!sub_10001E174(a1, a3, *(unsigned __int16 *)(v15 - 48)))
      {
        if (!dword_100058FD8) {
          goto LABEL_150;
        }
        int v56 = *__error();
        if (!os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
          goto LABEL_149;
        }
LABEL_148:
        sub_10003E5CC();
        goto LABEL_149;
      }
      uint64_t v36 = *(_DWORD **)a1;
      if (*(_DWORD *)(*(void *)a1 + 92))
      {
        if (!sub_10001E174(a1, a3, *(_DWORD *)(v15 - 44)))
        {
          if (!dword_100058FD8) {
            goto LABEL_150;
          }
          int v56 = *__error();
          if (!os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_149;
          }
          goto LABEL_148;
        }
        if (!sub_10001C4F0(0, &v67, &v69, *(unsigned int *)(v15 - 44)))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
LABEL_156:
            }
              sub_10003E694();
LABEL_157:
            uint64_t v57 = "idents_add";
            goto LABEL_188;
          }
LABEL_166:
          sub_10001FC88("idents_add");
          goto LABEL_189;
        }
        uint64_t v36 = *(_DWORD **)a1;
      }
      if (v36[22])
      {
        if (!sub_10001E174(a1, a3, *(_DWORD *)(v15 - 40)))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_148;
            }
            goto LABEL_149;
          }
          goto LABEL_150;
        }
        if (!sub_10001C4F0(1, &v68, &v70, *(unsigned int *)(v15 - 40)))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_156;
            }
            goto LABEL_157;
          }
          goto LABEL_166;
        }
        uint64_t v36 = *(_DWORD **)a1;
      }
      if (v36[26] && (*(_WORD *)(v15 - 48) & 0xB000 | 0x4000) == 0x6000
        || v36[27] && ((int v37 = *(_WORD *)(v15 - 48) & 0xF000, v37 == 49152) || v37 == 4096))
      {
        unsigned int v38 = *(_DWORD *)(v15 - 36);
        if (*(int *)(a1 + 260) <= 27)
        {
          if (!sub_10001E174(a1, a3, v38))
          {
            if (!dword_100058FD8) {
              goto LABEL_191;
            }
            int v56 = *__error();
            if (!os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_187;
            }
            goto LABEL_186;
          }
        }
        else
        {
          if (!sub_10001E174(a1, a3, HIBYTE(v38)))
          {
            if (!dword_100058FD8) {
              goto LABEL_191;
            }
            int v56 = *__error();
            if (!os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_187;
            }
            goto LABEL_186;
          }
          if ((v30 & 0x800) != 0 && !sub_10001D9A8(a1, a3, *(unsigned char *)(v15 - 36)))
          {
            if (dword_100058FD8)
            {
              int v56 = *__error();
              if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
LABEL_90:
              }
                sub_10003E4A4();
LABEL_91:
              uint64_t v57 = "io_write_byte";
              goto LABEL_188;
            }
LABEL_205:
            sub_10001FC88("io_write_byte");
            goto LABEL_189;
          }
          if (!sub_10001E174(a1, a3, *(_DWORD *)(v15 - 36) & 0xFFFFFF))
          {
            if (!dword_100058FD8) {
              goto LABEL_191;
            }
            int v56 = *__error();
            if (!os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_187;
            }
            goto LABEL_186;
          }
        }
      }
      if ((*(_WORD *)(v15 - 48) & 0xF000) == 0xA000 && *(_DWORD *)(*(void *)a1 + 84))
      {
        uint64_t v39 = *(char **)(v15 + 16);
        size_t v40 = strlen(v39);
        if (v40 >= 0x7FFFFFFF) {
          sub_10003E668();
        }
        size_t v41 = v40;
        if (!sub_10001E174(a1, a3, v40))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_186;
            }
LABEL_187:
            uint64_t v57 = "io_write_int";
LABEL_188:
            *__error() = v56;
            sub_10001FC88(v57);
            goto LABEL_189;
          }
LABEL_191:
          sub_10001FC88("io_write_int");
          goto LABEL_189;
        }
        if (!sub_10001D870(a1, a3, v39, v41))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
LABEL_109:
            }
              sub_10003E564();
LABEL_110:
            uint64_t v57 = "io_write_buf";
            goto LABEL_188;
          }
          goto LABEL_195;
        }
      }
      if ((v30 & 0x200) != 0)
      {
        if (!sub_10001E17C(a1, a3, *(void *)(v15 - 8)))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
LABEL_172:
            }
              sub_10003E598();
LABEL_173:
            uint64_t v57 = "io_write_long";
            goto LABEL_188;
          }
          goto LABEL_174;
        }
        if (!sub_10001E17C(a1, a3, *(void *)v15))
        {
          if (dword_100058FD8)
          {
            int v56 = *__error();
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_172;
            }
            goto LABEL_173;
          }
          goto LABEL_174;
        }
      }
      int v42 = *(_WORD *)(v15 - 48) & 0xF000;
      if ((v42 | 0x2000) == 0xA000) {
        *(void *)(a1 + 40) += *(void *)(v15 - 32);
      }
      if (*(_DWORD *)(*(void *)a1 + 16)
        && (v42 == 0x8000 || *(int *)(a1 + 260) <= 27)
        && !sub_10001D870(a1, a3, (char *)(v15 + 24), 0x10uLL))
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            sub_10003E634();
          }
          uint64_t v57 = "io_write_buf checksum";
          goto LABEL_188;
        }
        sub_10001FC88("io_write_buf checksum");
        goto LABEL_189;
      }
      int v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 64);
      if (v43 && !v43(a1, a3, v15 - 72))
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
            sub_10003E600();
          }
          uint64_t v57 = "platform sent";
          goto LABEL_188;
        }
        sub_10001FC88("platform sent");
        goto LABEL_189;
      }
      v15 += 152;
      if (!--v8) {
        goto LABEL_83;
      }
    }
    if (dword_100058FD8)
    {
      int v56 = *__error();
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
        sub_10003E6C8();
      }
      uint64_t v57 = "io_read_flush";
      goto LABEL_188;
    }
    sub_10001FC88("io_read_flush");
LABEL_189:
    uint64_t v62 = 0;
    goto LABEL_190;
  }
LABEL_83:
  if (!sub_10001D9A8(a1, a3, 0))
  {
    if (dword_100058FD8)
    {
      int v56 = *__error();
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    goto LABEL_205;
  }
  uint64_t v53 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 + 92))
  {
    int v54 = *(_DWORD *)(v53 + 120);
    if (v54 != 2)
    {
      if (v54) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = v69;
      }
      if (dword_100058FD8)
      {
        int v58 = *__error();
        uint64_t v59 = *v12;
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 134217984;
          uint64_t v72 = v55;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "sending uid list: %zu", buf, 0xCu);
        }
        *__error() = v58;
      }
      sub_10001FA38(1, "sending uid list: %zu", v47, v48, v49, v50, v51, v52, v55);
      if (!sub_10001C850(a1, a3, (uint64_t)v67, v55))
      {
        if (dword_100058FD8)
        {
          int v56 = *__error();
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
LABEL_131:
          }
            sub_10003E4D8();
LABEL_132:
          uint64_t v57 = "idents_send";
          goto LABEL_188;
        }
LABEL_133:
        sub_10001FC88("idents_send");
        goto LABEL_189;
      }
      uint64_t v53 = *(void *)a1;
    }
  }
  if (!*(_DWORD *)(v53 + 88) || (int v60 = *(_DWORD *)(v53 + 120), v60 == 2))
  {
    uint64_t v62 = 1;
    goto LABEL_190;
  }
  if (v60) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = v70;
  }
  if (dword_100058FD8)
  {
    int v63 = *__error();
    uint64_t v64 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v72 = v61;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "sending gid list: %zu", buf, 0xCu);
    }
    *__error() = v63;
  }
  uint64_t v62 = 1;
  sub_10001FA38(1, "sending gid list: %zu", v47, v48, v49, v50, v51, v52, v61);
  if (!sub_10001C850(a1, a3, (uint64_t)v68, v61))
  {
    if (dword_100058FD8)
    {
      int v56 = *__error();
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
        goto LABEL_131;
      }
      goto LABEL_132;
    }
    goto LABEL_133;
  }
LABEL_190:
  sub_10001C2B8((void **)v68, v70);
  sub_10001C2B8((void **)v67, v69);
  return v62;
}

uint64_t sub_1000135E0(char **a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2 + 1;
  if (v4 <= *a3)
  {
LABEL_7:
    *a2 = v4;
    return 1;
  }
  size_t v7 = sub_100004924(*a1, *a3, *a3 + 1024, 0x98uLL);
  if (v7)
  {
    *a1 = v7;
    unint64_t v15 = *a3;
    unint64_t v16 = *a3 + 1024;
    *a3 = v16;
    unint64_t v17 = *a2;
    if (*a2 < v16)
    {
      uint64_t v18 = v15 - v17 + 1024;
      uint64_t v19 = &v7[152 * v17 + 144];
      do
      {
        *(_DWORD *)uint64_t v19 = -1;
        *((_DWORD *)v19 - 34) = -1;
        v19 += 152;
        --v18;
      }
      while (v18);
    }
    unint64_t v4 = v17 + 1;
    goto LABEL_7;
  }
  if (dword_100058FD8)
  {
    int v21 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E6FC();
    }
    *__error() = v21;
  }
  sub_10001FBD8("recallocarray flist", v8, v9, v10, v11, v12, v13, v14, v22);
  return 0;
}

uint64_t sub_1000136E8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  if (sub_1000135E0((char **)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a1 + 16)) && *v2) {
    return *(void *)a1 + 152 * *v2 - 152;
  }
  else {
    return 0;
  }
}

void *sub_10001373C(void *result)
{
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_100013748(void *a1, unint64_t a2)
{
  if (a1[1] > a2) {
    return *a1 + 152 * a2;
  }
  if (dword_100058FD8)
  {
    int v3 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E730();
    }
    *__error() = v3;
  }
  sub_10001FB50("flist index error");
  return 0;
}

uint64_t sub_1000137D8(int *a1, uint64_t a2, uint64_t a3, long long **a4, unint64_t *a5)
{
  unint64_t v157 = 0;
  __base = 0;
  size_t v155 = 0;
  unint64_t v156 = 0;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  unsigned __int8 v150 = 0;
  v148 = 0;
  int v149 = 0;
  __src[0] = 0;
  if (!sub_10001DD4C((uint64_t)a1, a2, (char *)&v150))
  {
LABEL_170:
    if (dword_100058FD8)
    {
      int v91 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
LABEL_173:
        *__error() = v91;
        goto LABEL_174;
      }
LABEL_172:
      sub_10003DBE8();
      goto LABEL_173;
    }
LABEL_174:
    sub_10001FC88("io_read_byte");
    goto LABEL_268;
  }
  uint64_t v14 = &dword_100058FD8;
  while (1)
  {
    int v15 = v150;
    if (!v150)
    {
      uint64_t v93 = *(void *)a1;
      if (*(_DWORD *)(*(void *)a1 + 92) && *(_DWORD *)(v93 + 120) != 2)
      {
        int v94 = sub_10001CA98((uint64_t)a1, a2, &v148, &v153);
        int v101 = *v14;
        if (!v94)
        {
          if (v101)
          {
            int v140 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_338;
            }
            goto LABEL_339;
          }
LABEL_340:
          sub_10001FC88("idents_recv");
          goto LABEL_268;
        }
        if (v101)
        {
          int v102 = *__error();
          int v103 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 134217984;
            *(void *)&uint8_t buf[4] = v153;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "received uid list: %zu", buf, 0xCu);
          }
          *__error() = v102;
        }
        sub_10001FA38(1, "received uid list: %zu", v95, v96, v97, v98, v99, v100, v153);
        uint64_t v93 = *(void *)a1;
      }
      if (!*(_DWORD *)(v93 + 88) || *(_DWORD *)(v93 + 120) == 2)
      {
LABEL_196:
        if (*v14)
        {
          int v114 = *__error();
          int v115 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 134217984;
            *(void *)&uint8_t buf[4] = v157;
            _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_INFO, "received file metadata list: %zu", buf, 0xCu);
          }
          *__error() = v114;
        }
        unint64_t v116 = v157;
        sub_10001FA38(1, "received file metadata list: %zu", v8, v9, v10, v11, v12, v13, v157);
        int v117 = (long long *)__base;
        if (a1[65] <= 28) {
          v118 = (int (__cdecl *)(const void *, const void *))sub_100015234;
        }
        else {
          v118 = (int (__cdecl *)(const void *, const void *))sub_100014FB8;
        }
        qsort(__base, v116, 0x98uLL, v118);
        if (v116)
        {
          uint64_t v119 = 0;
          int v120 = v117 + 9;
          do
          {
            *int v120 = v119;
            v120 += 38;
            ++v119;
          }
          while (v116 != v119);
        }
        sub_1000021D0((uint64_t)a1, v117, v116);
        *a5 = v116;
        *a4 = v117;
        uint64_t v121 = *(void *)a1;
        if (*(_DWORD *)(*(void *)a1 + 92) && !*(_DWORD *)(v121 + 120))
        {
          sub_10001C418((uint64_t)a1, 0, (uint64_t)v148, v153);
          sub_10001C398((uint64_t)a1, (uint64_t)v117, v116, (uint64_t)v148, v153);
          uint64_t v121 = *(void *)a1;
        }
        if (*(_DWORD *)(v121 + 88) && !*(_DWORD *)(v121 + 120))
        {
          sub_10001C418((uint64_t)a1, 1, (uint64_t)v149, v154);
          sub_10001C318((uint64_t)a1, (uint64_t)v117, v116, (uint64_t)v149, v154);
        }
        sub_10001C2B8((void **)v149, v154);
        sub_10001C2B8((void **)v148, v153);
        return 1;
      }
      int v104 = sub_10001CA98((uint64_t)a1, a2, &v149, &v154);
      int v111 = *v14;
      if (v104)
      {
        if (v111)
        {
          int v112 = *__error();
          int v113 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 134217984;
            *(void *)&uint8_t buf[4] = v154;
            _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "received gid list: %zu", buf, 0xCu);
          }
          *__error() = v112;
        }
        sub_10001FA38(1, "received gid list: %zu", v105, v106, v107, v108, v109, v110, v154);
        goto LABEL_196;
      }
      if (v111)
      {
        int v140 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_338:
        }
          sub_10003E764();
LABEL_339:
        *__error() = v140;
        goto LABEL_340;
      }
      goto LABEL_340;
    }
    if ((v150 & 4) != 0 && a1[65] >= 28)
    {
      if (sub_10001DD4C((uint64_t)a1, a2, (char *)&v150))
      {
        v15 |= v150 << 8;
        goto LABEL_8;
      }
      if (*v14)
      {
        int v91 = *__error();
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_173;
        }
        goto LABEL_172;
      }
      goto LABEL_174;
    }
LABEL_8:
    if (v157 == 0x7FFFFFFF)
    {
      if (*v14)
      {
        int v123 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E798();
        }
        *__error() = v123;
      }
      int v124 = "remote sent too many files";
      goto LABEL_218;
    }
    if (!sub_1000135E0((char **)&__base, &v157, &v156))
    {
      if (*v14)
      {
        int v125 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E7CC();
        }
        *__error() = v125;
      }
      sub_10001FC88("flist_realloc");
      goto LABEL_268;
    }
    size_t v16 = 0;
    int v146 = __base;
    unint64_t v17 = (char *)__base + 152 * v157;
    uint64_t v147 = v157 - 1;
    if (v157 <= 1) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17 - 304;
    }
    v145 = v18;
    unsigned __int8 v159 = 0;
    *(void *)uint8_t buf = 0;
    if ((v15 & 0x20) != 0)
    {
      if (!sub_10001DD4C((uint64_t)a1, a2, (char *)&v159))
      {
        if (*v14)
        {
          int v130 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_250;
          }
          goto LABEL_251;
        }
LABEL_252:
        sub_10001FC88("io_read_byte");
        goto LABEL_263;
      }
      size_t v16 = v159;
    }
    if ((v15 & 0x40) == 0)
    {
      if (sub_10001DD4C((uint64_t)a1, a2, (char *)&v159))
      {
        uint64_t v19 = v14;
        uint64_t v20 = v159;
        *(void *)uint8_t buf = v159;
        goto LABEL_21;
      }
      if (*v14)
      {
        int v130 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_250:
        }
          sub_10003DBE8();
LABEL_251:
        *__error() = v130;
        goto LABEL_252;
      }
      goto LABEL_252;
    }
    if (!sub_10001E94C((uint64_t)a1, a2, buf))
    {
      if (*v14)
      {
        int v131 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E9A8();
        }
        *__error() = v131;
      }
      sub_10001FC88("io_read_size");
      goto LABEL_263;
    }
    uint64_t v19 = v14;
    uint64_t v20 = *(void *)buf;
LABEL_21:
    unint64_t v21 = v20 + v16;
    if (!(v20 + v16))
    {
      uint64_t v14 = v19;
      if (*v19)
      {
        int v126 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E834();
        }
        *__error() = v126;
      }
      sub_10001FB50("security violation: zero-length pathname");
      goto LABEL_263;
    }
    char v22 = (void **)(v17 - 152);
    size_t v23 = v21 + 1;
    size_t v24 = malloc_type_malloc(v21 + 1, 0x4DBD832BuLL);
    char *v22 = v24;
    if (!v24)
    {
      uint64_t v14 = v19;
      if (*v19)
      {
        int v127 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CD90();
        }
        *__error() = v127;
      }
      sub_10001FBD8("malloc", v25, v26, v27, v28, v29, v30, v31, v142);
      goto LABEL_263;
    }
    *((unsigned char *)v24 + v21) = 0;
    if ((v15 & 0x20) != 0) {
      memcpy(*v22, __src, v16);
    }
    if (!sub_10001DDD4((uint64_t)a1, a2, (char *)*v22 + v16, *(size_t *)buf))
    {
      uint64_t v14 = v19;
      if (*v19)
      {
        int v128 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B728();
        }
        *__error() = v128;
      }
      sub_10001FC88("io_read_buf");
      goto LABEL_263;
    }
    uint64_t v32 = (const char *)*v22;
    if (*(unsigned char *)*v22 == 47 && !*(_DWORD *)(*(void *)a1 + 188))
    {
      uint64_t v14 = v19;
      if (*v19)
      {
        int v132 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E868();
        }
        *__error() = v132;
      }
      sub_10001FB50("security violation: absolute pathname: %s");
LABEL_263:
      if (*v14)
      {
        int v133 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E800();
        }
        *__error() = v133;
      }
      sub_10001FC88("flist_recv_name");
      goto LABEL_268;
    }
    if (strstr((char *)*v22, "/../")
      || v21 >= 3 && (!strcmp(&v32[v21 - 3], "/..") || !strncmp(v32, "../", 3uLL))
      || !strcmp(v32, ".."))
    {
      uint64_t v14 = v19;
      if (*v19)
      {
        int v92 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E8D4();
        }
        *__error() = v92;
      }
      sub_10001FB50("%s: security violation: backtracking pathname");
      goto LABEL_263;
    }
    __strlcpy_chk();
    int v33 = (unsigned __int8 *)*v22;
    if (*(_DWORD *)(*(void *)a1 + 188) && *v33 == 47)
    {
      int v34 = (char *)&v146[19 * v147];
      *((void *)v34 + 2) = v33;
      int v35 = v34 + 16;
      uint64_t v36 = v33;
      uint64_t v14 = v19;
      if (*v33 == 47)
      {
        size_t v23 = v16 + v20 + 1;
        int v37 = v33 + 1;
        do
        {
          void *v35 = v37;
          int v38 = *v37++;
          --v23;
        }
        while (v38 == 47);
        uint64_t v36 = v37 - 1;
      }
      memmove(v33, v36, v23);
      int v33 = (unsigned __int8 *)*v22;
    }
    else
    {
      uint64_t v14 = v19;
    }
    size_t v40 = v146;
    uint64_t v39 = v147;
    v146[19 * v147 + 2] = v33;
    if (!sub_10001E710((uint64_t)a1, a2, &v152)) {
      break;
    }
    size_t v41 = (char *)&v146[19 * v147];
    *((void *)v41 + 5) = v152;
    int v42 = (uint64_t *)(v41 + 40);
    int v43 = v42 - 2;
    if ((v15 & 0x80) == 0)
    {
      if (sub_10001EA48((uint64_t)a1, a2, &v151))
      {
        uint64_t v44 = v151;
        goto LABEL_47;
      }
      if (!*v14) {
        goto LABEL_285;
      }
      int v134 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_284;
      }
LABEL_283:
      sub_10003E974();
      goto LABEL_284;
    }
    if (!v145)
    {
      if (*v14)
      {
        int v46 = *__error();
        uint64_t v47 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "same time without last entry", buf, 2u);
        }
        *__error() = v46;
        size_t v40 = v146;
        uint64_t v39 = v147;
      }
      sub_10001FD28("same time without last entry");
      v40[19 * v39 + 6] = 0;
      if ((v15 & 2) != 0) {
        goto LABEL_60;
      }
LABEL_48:
      if (sub_10001EA48((uint64_t)a1, a2, &v151))
      {
        __int16 v45 = v151;
LABEL_52:
        *(_WORD *)int v43 = v45;
        if ((v15 & 1) != 0 && (v45 & 0xF000) == 0x4000) {
          LODWORD(v40[19 * v39 + 7]) |= 1u;
        }
        goto LABEL_65;
      }
      if (!*v14) {
        goto LABEL_285;
      }
      int v134 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_284;
      }
      goto LABEL_283;
    }
    uint64_t v44 = *((void *)v145 + 6);
LABEL_47:
    v146[19 * v147 + 6] = v44;
    if ((v15 & 2) == 0) {
      goto LABEL_48;
    }
    if (v145)
    {
      __int16 v45 = *((_WORD *)v145 + 12);
      goto LABEL_52;
    }
LABEL_60:
    if (*v14)
    {
      int v48 = *__error();
      uint64_t v49 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "same mode without last entry", buf, 2u);
      }
      *__error() = v48;
      size_t v40 = v146;
      uint64_t v39 = v147;
    }
    sub_10001FD28("same mode without last entry");
    *(_WORD *)int v43 = 0;
LABEL_65:
    uint64_t v50 = *(void *)a1;
    if (*(void *)(*(void *)a1 + 24))
    {
      sub_100014F60(a1, (uint64_t)v22);
      uint64_t v50 = *(void *)a1;
    }
    if (*(_DWORD *)(v50 + 92))
    {
      if ((v15 & 8) != 0)
      {
        if (v145)
        {
          int v51 = *((_DWORD *)v145 + 7);
        }
        else
        {
          if (*v14)
          {
            int v52 = *__error();
            uint64_t v53 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "same uid without last entry", buf, 2u);
            }
            *__error() = v52;
            size_t v40 = v146;
            uint64_t v39 = v147;
          }
          sub_10001FD28("same uid without last entry");
          int v51 = 0;
        }
      }
      else
      {
        if (!sub_10001EA48((uint64_t)a1, a2, &v151))
        {
          if (!*v14) {
            goto LABEL_335;
          }
          int v135 = *__error();
          if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_334;
          }
          goto LABEL_333;
        }
        int v51 = v151;
      }
      HIDWORD(v40[19 * v39 + 3]) = v51;
    }
    if (*(_DWORD *)(*(void *)a1 + 88))
    {
      if ((v15 & 0x10) != 0)
      {
        if (v145)
        {
          int v54 = *((_DWORD *)v145 + 8);
        }
        else
        {
          if (*v14)
          {
            int v55 = *__error();
            int v56 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "same gid without last entry", buf, 2u);
            }
            *__error() = v55;
            size_t v40 = v146;
            uint64_t v39 = v147;
          }
          sub_10001FD28("same gid without last entry");
          int v54 = 0;
        }
        goto LABEL_90;
      }
      if (sub_10001EA48((uint64_t)a1, a2, &v151))
      {
        int v54 = v151;
LABEL_90:
        LODWORD(v40[19 * v39 + 4]) = v54;
        goto LABEL_91;
      }
      if (*v14)
      {
        int v134 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_283;
        }
LABEL_284:
        *__error() = v134;
      }
LABEL_285:
      sub_10001FC88("io_read_uint");
      goto LABEL_268;
    }
LABEL_91:
    uint64_t v57 = *(void *)a1;
    int v58 = *(_DWORD *)(*(void *)a1 + 104);
    if (v58 && (*(_WORD *)v43 & 0xB000 | 0x4000) == 0x6000
      || *(_DWORD *)(v57 + 108) && ((int v59 = *(_WORD *)v43 & 0xF000, v59 == 49152) || v59 == 4096))
    {
      if (a1[65] <= 27)
      {
        if ((v15 & 4) != 0)
        {
          if (v145)
          {
            int v63 = *((_DWORD *)v145 + 9);
          }
          else
          {
            if (*v14)
            {
              int v84 = *__error();
              uint64_t v85 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)uint8_t buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "same device without last entry", buf, 2u);
              }
              *__error() = v84;
              size_t v40 = v146;
              uint64_t v39 = v147;
            }
            sub_10001FD28("same device without last entry");
            int v63 = 0;
          }
          goto LABEL_115;
        }
        if (sub_10001E948(a1, a2, (char *)&v151 + 4))
        {
          int v63 = HIDWORD(v151);
LABEL_115:
          HIDWORD(v40[19 * v39 + 4]) = v63;
          goto LABEL_116;
        }
        if (!*v14) {
          goto LABEL_335;
        }
        int v135 = *__error();
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_334;
        }
        goto LABEL_333;
      }
    }
    if (v58 && (*(_WORD *)v43 & 0xB000 | 0x4000) == 0x6000
      || *(_DWORD *)(v57 + 108) && ((int v60 = *(_WORD *)v43 & 0xF000, v60 == 49152) || v60 == 4096))
    {
      if ((v15 & 0x100) != 0)
      {
        if (v145)
        {
          int v61 = *((_DWORD *)v145 + 9);
          if ((v15 & 0x800) != 0) {
            goto LABEL_112;
          }
        }
        else
        {
          if (*v14)
          {
            int v82 = *__error();
            uint64_t v83 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "same device major without last entry", buf, 2u);
            }
            *__error() = v82;
            size_t v40 = v146;
          }
          sub_10001FD28("same device major without last entry");
          int v61 = 0;
          if ((v15 & 0x800) != 0) {
            goto LABEL_112;
          }
        }
LABEL_105:
        if (sub_10001E948(a1, a2, (char *)&v151 + 4))
        {
          int v62 = HIDWORD(v151);
LABEL_114:
          int v63 = v62 | (v61 << 24);
          uint64_t v39 = v147;
          goto LABEL_115;
        }
        if (*v14)
        {
          int v135 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_333;
          }
LABEL_334:
          *__error() = v135;
          goto LABEL_335;
        }
        goto LABEL_335;
      }
      if (sub_10001E948(a1, a2, (char *)&v151 + 4))
      {
        int v61 = HIDWORD(v151);
        if ((v15 & 0x800) == 0) {
          goto LABEL_105;
        }
LABEL_112:
        if (sub_10001DD4C((uint64_t)a1, a2, (char *)&v150))
        {
          int v62 = v150;
          goto LABEL_114;
        }
        if (*v14)
        {
          int v135 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_333;
          }
          goto LABEL_334;
        }
LABEL_335:
        sub_10001FC88("io_read_int");
        goto LABEL_268;
      }
      if (!*v14) {
        goto LABEL_335;
      }
      int v135 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_334;
      }
LABEL_333:
      sub_10003B82C();
      goto LABEL_334;
    }
LABEL_116:
    if ((*(_WORD *)v43 & 0xF000) == 0xA000 && *(_DWORD *)(*(void *)a1 + 84))
    {
      if (!sub_10001E94C((uint64_t)a1, a2, &v155))
      {
        if (*v14)
        {
          int v136 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003E9A8();
          }
          *__error() = v136;
        }
        sub_10001FC88("io_read_size");
        goto LABEL_268;
      }
      if (!v155)
      {
        if (*v14)
        {
          int v137 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003E9DC();
          }
          *__error() = v137;
        }
        sub_10001FB50("empty link name");
        goto LABEL_268;
      }
      uint64_t v64 = (char *)malloc_type_calloc(v155 + 1, 1uLL, 0x6859AFEDuLL);
      if (!v64)
      {
        if (*v14)
        {
          int v138 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B320();
          }
          *__error() = v138;
        }
        int v124 = "calloc";
LABEL_218:
        sub_10001FBD8(v124, v7, v8, v9, v10, v11, v12, v13, v142);
        goto LABEL_268;
      }
      uint64_t v65 = v64;
      if (!sub_10001DDD4((uint64_t)a1, a2, v64, v155))
      {
        free(v65);
        if (*v14)
        {
          int v139 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_306:
          }
            sub_10003B728();
LABEL_307:
          *__error() = v139;
        }
LABEL_308:
        sub_10001FC88("io_read_buf");
        goto LABEL_268;
      }
      uint64_t v66 = (unsigned int (*)(char *, void *, uint64_t))*((void *)a1 + 29);
      uint64_t v67 = &v40[19 * v147];
      uint64_t v68 = (char **)(v67 + 11);
      if (!v66) {
        goto LABEL_128;
      }
      if (v66(v65, v67 + 11, 1))
      {
        free(v65);
        if (*v14)
        {
          int v141 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003EA10();
          }
          *__error() = v141;
        }
        sub_10001FC88("symlink_filter");
        goto LABEL_268;
      }
      if (*v68) {
        free(v65);
      }
      else {
LABEL_128:
      }
        void *v68 = v65;
      size_t v40 = v146;
      uint64_t v39 = v147;
    }
    if (*(_DWORD *)(*(void *)a1 + 200) && a1[65] <= 27 && (*(_WORD *)v43 & 0xF000) == 0x8000) {
      v15 |= 0x200u;
    }
    if ((v15 & 0x200) != 0)
    {
      if ((v15 & 0x400) != 0)
      {
        if (v145)
        {
          uint64_t v69 = *((void *)v145 + 8);
        }
        else
        {
          if (*v14)
          {
            int v70 = *__error();
            uint64_t v71 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "same device without last entry", buf, 2u);
            }
            *__error() = v70;
            size_t v40 = v146;
            uint64_t v39 = v147;
          }
          sub_10001FD28("same device without last entry");
          uint64_t v69 = 0;
        }
      }
      else
      {
        if (!sub_10001E81C((uint64_t)a1, a2, &v152))
        {
          if (*v14)
          {
            int v129 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_311;
            }
            goto LABEL_312;
          }
          goto LABEL_313;
        }
        uint64_t v69 = v152;
      }
      uint64_t v72 = &v40[19 * v39];
      v72[8] = v69;
      if (!sub_10001E710((uint64_t)a1, a2, v72 + 9))
      {
        if (*v14)
        {
          int v129 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_311:
          }
            sub_10003E940();
LABEL_312:
          *__error() = v129;
        }
        goto LABEL_313;
      }
    }
    if (!sub_1000023A8((uint64_t)a1, a2, (uint64_t)v22)) {
      goto LABEL_268;
    }
    if (*v14)
    {
      int v79 = *__error();
      int v80 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v86 = *v22;
        uint64_t v87 = *v42;
        char v88 = (char *)&v146[19 * v147];
        uint64_t v89 = *((void *)v88 + 6);
        int v90 = *(unsigned __int16 *)v43;
        LODWORD(v88) = *((_DWORD *)v88 + 9);
        *(_DWORD *)uint8_t buf = 136316674;
        *(void *)&uint8_t buf[4] = v86;
        __int16 v161 = 2048;
        uint64_t v162 = v87;
        __int16 v163 = 2048;
        uint64_t v164 = v89;
        __int16 v165 = 1024;
        int v166 = v90;
        __int16 v167 = 1024;
        unsigned int v168 = v88 >> 24;
        __int16 v169 = 1024;
        unsigned int v170 = v88 & 0xFFFFFF;
        __int16 v171 = 1024;
        int v172 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "%s: received file metadata: size %jd, mtime %jd, mode %o, rdev (%d, %d), flag %x", buf, 0x38u);
      }
      *__error() = v79;
      size_t v40 = v146;
      uint64_t v39 = v147;
    }
    sub_10001FA38(2, "%s: received file metadata: size %jd, mtime %jd, mode %o, rdev (%d, %d), flag %x", v73, v74, v75, v76, v77, v78, (char)*v22);
    int v81 = *(_WORD *)v43 & 0xF000;
    if ((v81 | 0x2000) == 0xA000) {
      *((void *)a1 + 5) += *v42;
    }
    if (*(_DWORD *)(*(void *)a1 + 16)
      && (v81 == 0x8000 || a1[65] <= 27)
      && !sub_10001DDD4((uint64_t)a1, a2, (char *)&v40[19 * v39 + 12], 0x10uLL))
    {
      if (*v14)
      {
        int v139 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_306;
        }
        goto LABEL_307;
      }
      goto LABEL_308;
    }
    if (!sub_10001DD4C((uint64_t)a1, a2, (char *)&v150)) {
      goto LABEL_170;
    }
  }
  if (*v14)
  {
    int v129 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_311;
    }
    goto LABEL_312;
  }
LABEL_313:
  sub_10001FC88("io_read_long");
LABEL_268:
  sub_10001C2B8((void **)v149, v154);
  sub_10001C2B8((void **)v148, v153);
  uint64_t result = 0;
  *a5 = 0;
  *a4 = 0;
  return result;
}

_WORD *sub_100014F60(_WORD *result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 24);
  if ((v2 & 0xF000) == 0x4000)
  {
    __int16 v3 = v2 & ~result[104] | result[105] | result[106];
  }
  else
  {
    __int16 v3 = v2 & ~result[107] | result[108];
    if ((v2 & 0x49) != 0) {
      v3 |= result[109];
    }
  }
  *(_WORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_100014FB8(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(char **)(a1 + 16);
  unint64_t v4 = *(char **)(a2 + 16);
  int v5 = *v3;
  if (v5 == 46 && !v3[1]) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *v4;
  if (v6 == 46 && !v4[1]) {
    return 1;
  }
  while (v5 == v6)
  {
    if (!v5) {
      return 0;
    }
    int v8 = *++v3;
    int v5 = v8;
    int v9 = *++v4;
    int v6 = v9;
  }
  int v10 = *(_WORD *)(a1 + 24) & 0xF000;
  if (v5 || v10 != 0x4000)
  {
    if (v6) {
      uint64_t v11 = v4;
    }
    else {
      uint64_t v11 = "/";
    }
    if ((*(_WORD *)(a2 + 24) & 0xF000) == 0x4000) {
      unint64_t v4 = (char *)v11;
    }
  }
  else
  {
    __int16 v3 = "/";
  }
  uint64_t v12 = strrchr(v3, 47);
  uint64_t v13 = strrchr(v4, 47);
  if (v10 == 0x4000 && !v12) {
    uint64_t v12 = &v3[strlen(v3)];
  }
  if (!v13)
  {
    if ((*(_WORD *)(a2 + 24) & 0xF000) != 0x4000)
    {
      BOOL v15 = 0;
      BOOL v14 = v12 != 0;
LABEL_35:
      if (v14) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      if (v14 || v15) {
        return result;
      }
      goto LABEL_40;
    }
    uint64_t v13 = &v4[strlen(v4)];
  }
  BOOL v14 = v12 != 0;
  BOOL v15 = v13 != 0;
  if (!v12 || !v13) {
    goto LABEL_35;
  }
  if (v12 - v3 >= v13 - v4) {
    int64_t v16 = v13 - v4;
  }
  else {
    int64_t v16 = v12 - v3;
  }
  if (strncmp(v3, v4, v16 + 1))
  {
LABEL_40:
    int v18 = *v3;
    for (int i = *v4; v18 == i; int i = v21)
    {
      if (!v18) {
        return 0;
      }
      int v20 = *++v3;
      int v18 = v20;
      int v21 = *++v4;
    }
    if (v10 != 0x4000 || v18)
    {
      if ((*(_WORD *)(a2 + 24) & 0xF000) == 0x4000)
      {
        if (i) {
          char v22 = v4;
        }
        else {
          char v22 = "/";
        }
        int i = *(unsigned __int8 *)v22;
      }
    }
    else
    {
      __int16 v3 = "/";
    }
    return *v3 - i;
  }
  if (v10 == 0x4000 && (*(_WORD *)(a2 + 24) & 0xF000) == 0x4000)
  {
    size_t v17 = strlen(v3);
    if (v17 > strlen(v4)) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  size_t v23 = &v3[(int)v16 + 1];
  size_t v24 = &v4[(int)v16 + 1];
  uint64_t v25 = strrchr(v23, 47);
  uint64_t v26 = strrchr(v24, 47);
  if (!v25 && v26) {
    return 0xFFFFFFFFLL;
  }
  if (v25 && !v26) {
    return 1;
  }

  return strcmp(v23, v24);
}

uint64_t sub_100015234(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16));
}

uint64_t sub_100015240(uint64_t *a1, size_t a2, char **a3, uint64_t a4)
{
  if (!a2) {
    sub_10003EA44();
  }
  uint64_t v4 = a4;
  size_t v6 = a2;
  uint64_t v7 = a1;
  if (*(_DWORD *)(*a1 + 32))
  {
    int v8 = 0;
    do
    {
      if (**a3) {
        int v9 = *a3;
      }
      else {
        int v9 = ".";
      }
      sub_10002A020(v9);
      if (*(_DWORD *)(*v7 + 188) && !sub_100017878(v9, v4))
      {
        if (dword_100058FD8)
        {
          int v58 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003EB6C();
          }
          *__error() = v58;
        }
        sub_10001FBD8("flist_append_dirs", v10, v11, v12, v13, v14, v15, v16, v132);
        goto LABEL_72;
      }
      if (!sub_100017B2C()) {
        ++v8;
      }
      ++a3;
      --v6;
    }
    while (v6);
    if (dword_100058FD8)
    {
      int v23 = *__error();
      size_t v24 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = *(void *)(v4 + 8);
        buf.st_dev = 134217984;
        *(void *)&buf.st_mode = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "recursively generated %zu filenames", (uint8_t *)&buf, 0xCu);
      }
      *__error() = v23;
    }
    sub_10001FA38(1, "recursively generated %zu filenames", v17, v18, v19, v20, v21, v22, *(void *)(v4 + 8));
    if (!v8) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  memset(&buf, 0, sizeof(buf));
  sub_10002A020(".");
  uint64_t v26 = malloc_type_calloc(v6, 0x98uLL, 0x10D0040CCDC9D6FuLL);
  *(void *)uint64_t v4 = v26;
  if (!v26)
  {
    if (dword_100058FD8)
    {
      int v59 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B320();
      }
      *__error() = v59;
    }
    sub_10001FBD8("calloc", v27, v28, v29, v30, v31, v32, v33, v132);
LABEL_72:
    if (v7[30]) {
      goto LABEL_73;
    }
    return 0;
  }
  uint64_t v34 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = v6;
  do
  {
    if (*a3[v34]) {
      int v35 = a3[v34];
    }
    else {
      int v35 = ".";
    }
    if (*(_DWORD *)(*v7 + 64)) {
      int v36 = stat(v35, &buf);
    }
    else {
      int v36 = lstat(v35, &buf);
    }
    if (v36 == -1)
    {
      ++v7[30];
      if (dword_100058FD8)
      {
        int v60 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003EAD0();
        }
        *__error() = v60;
      }
      sub_10001FBD8("'%s': (l)stat", v37, v38, v39, v40, v41, v42, v43, (char)v35);
      goto LABEL_71;
    }
    int v44 = buf.st_mode & 0xF000;
    if (v44 == 0x4000 && !*(_DWORD *)(*v7 + 192))
    {
      if (!dword_100058FD8)
      {
        uint64_t v53 = "%s: skipping directory";
        goto LABEL_43;
      }
      int v51 = *__error();
      int v54 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int v137 = 136315138;
        int v138 = v35;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "%s: skipping directory", v137, 0xCu);
      }
      uint64_t v53 = "%s: skipping directory";
LABEL_40:
      *__error() = v51;
LABEL_43:
      sub_10001FDC8(v53, v35);
      goto LABEL_44;
    }
    if (sub_10002A51C(v35, v44 == 0x4000, 0, 0) == -1)
    {
      if (!dword_100058FD8)
      {
        sub_10001FDC8("%s: skipping excluded file");
LABEL_44:
        uint64_t v4 = a4;
        goto LABEL_45;
      }
      int v51 = *__error();
      int v52 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int v137 = 136315138;
        int v138 = v35;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "%s: skipping excluded file", v137, 0xCu);
      }
      uint64_t v53 = "%s: skipping excluded file";
      goto LABEL_40;
    }
    if (!sub_100018E70(v7, &buf.st_dev, v35, v4))
    {
      if (dword_100058FD8)
      {
        int v61 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003EB38();
        }
        *__error() = v61;
      }
      sub_10001FC88("flist_append");
LABEL_71:
      sub_100012830(*(char **)v4, v6);
      *(void *)uint64_t v4 = 0;
      goto LABEL_72;
    }
LABEL_45:
    ++v34;
  }
  while (v6 != v34);
  if (dword_100058FD8)
  {
    int v55 = *__error();
    int v56 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      uint64_t v57 = *(char **)(v4 + 8);
      *(_DWORD *)int v137 = 134217984;
      int v138 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "non-recursively generated %zu filenames", v137, 0xCu);
    }
    *__error() = v55;
  }
  sub_10001FA38(1, "non-recursively generated %zu filenames", v45, v46, v47, v48, v49, v50, *(void *)(v4 + 8));
LABEL_73:
  uint64_t result = sub_100001C90((uint64_t)v7, (uint64_t *)v4);
  if (result)
  {
    if (*((int *)v7 + 65) <= 28) {
      int v63 = (int (__cdecl *)(const void *, const void *))sub_100015234;
    }
    else {
      int v63 = (int (__cdecl *)(const void *, const void *))sub_100014FB8;
    }
    qsort(*(void **)v4, *(void *)(v4 + 8), 0x98uLL, v63);
    size_t v64 = *(void *)(v4 + 8);
    if (!v64) {
      return 1;
    }
    uint64_t v134 = *v7;
    uint64_t v65 = (const char **)malloc_type_calloc(v64, 0x98uLL, 0x10D0040CCDC9D6FuLL);
    if (v65)
    {
      uint64_t v73 = v65;
      if (*(void *)(v4 + 8) == 1)
      {
        uint64_t v74 = 0;
        unint64_t v75 = 0;
      }
      else
      {
        int v133 = v7;
        uint64_t v74 = 0;
        unint64_t v75 = 0;
        uint64_t v78 = v65;
        do
        {
          int v79 = *(char **)v4;
          int v80 = (const char **)(*(void *)v4 + 152 * v75);
          int v81 = v80 + 2;
          int v82 = v80[2];
          if (strcmp(v82, v80[21]) || !strcmp(v82, "."))
          {
            long long v83 = *((_OWORD *)v80 + 1);
            *(_OWORD *)uint64_t v78 = *(_OWORD *)v80;
            *((_OWORD *)v78 + 1) = v83;
            long long v84 = *((_OWORD *)v80 + 2);
            long long v85 = *((_OWORD *)v80 + 3);
            long long v86 = *((_OWORD *)v80 + 5);
            *((_OWORD *)v78 + 4) = *((_OWORD *)v80 + 4);
            *((_OWORD *)v78 + 5) = v86;
            *((_OWORD *)v78 + 2) = v84;
            *((_OWORD *)v78 + 3) = v85;
            long long v87 = *((_OWORD *)v80 + 6);
            long long v88 = *((_OWORD *)v80 + 7);
            long long v89 = *((_OWORD *)v80 + 8);
            v78[18] = v80[18];
            *((_OWORD *)v78 + 7) = v88;
            *((_OWORD *)v78 + 8) = v89;
            *((_OWORD *)v78 + 6) = v87;
            ++v75;
          }
          else
          {
            int v90 = *v80;
            int v135 = (void **)(v80 + 19);
            int v91 = v80[19];
            if (strcmp(*v80, v91))
            {
              if (dword_100058FD8)
              {
                int v127 = *__error();
                int v128 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                {
                  int v129 = *v81;
                  __darwin_ino64_t v130 = (__darwin_ino64_t)*v80;
                  int v131 = *v135;
                  buf.st_dev = 136315650;
                  *(void *)&buf.st_mode = v129;
                  WORD2(buf.st_ino) = 2080;
                  *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = v130;
                  HIWORD(buf.st_gid) = 2080;
                  *(void *)&buf.st_rdev = v131;
                  _os_log_error_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "%s: duplicate working path for possibly different file: '%s' '%s'", (uint8_t *)&buf, 0x20u);
                }
                *__error() = v127;
                int v82 = *v81;
                int v90 = *v80;
                int v91 = (const char *)*v135;
              }
              sub_10001FB50("%s: duplicate working path for possibly different file: '%s' '%s'", v82, v90, v91);
              free(v73);
              uint64_t v4 = a4;
              goto LABEL_87;
            }
            long long v92 = *((_OWORD *)v80 + 1);
            *(_OWORD *)uint64_t v78 = *(_OWORD *)v80;
            *((_OWORD *)v78 + 1) = v92;
            long long v93 = *((_OWORD *)v80 + 2);
            long long v94 = *((_OWORD *)v80 + 3);
            long long v95 = *((_OWORD *)v80 + 5);
            *((_OWORD *)v78 + 4) = *((_OWORD *)v80 + 4);
            *((_OWORD *)v78 + 5) = v95;
            *((_OWORD *)v78 + 2) = v93;
            *((_OWORD *)v78 + 3) = v94;
            long long v96 = *((_OWORD *)v80 + 6);
            long long v97 = *((_OWORD *)v80 + 7);
            long long v98 = *((_OWORD *)v80 + 8);
            v78[18] = v80[18];
            *((_OWORD *)v78 + 7) = v97;
            *((_OWORD *)v78 + 8) = v98;
            *((_OWORD *)v78 + 6) = v96;
            uint64_t v4 = a4;
            if (!*(_DWORD *)(v134 + 188) && (*(_WORD *)&v79[152 * v75 + 24] & 0xF000) != 0x4000)
            {
              if (dword_100058FD8)
              {
                int v99 = *__error();
                uint64_t v100 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                {
                  int v101 = *v81;
                  int v102 = *v80;
                  buf.st_dev = 136315394;
                  *(void *)&buf.st_mode = v101;
                  WORD2(buf.st_ino) = 2080;
                  *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v102;
                  _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_INFO, "%s: duplicate path: %s", (uint8_t *)&buf, 0x16u);
                }
                *__error() = v99;
              }
              sub_10001FDC8("%s: duplicate path: %s", *v81, *v80);
            }
            free(*v135);
            int v103 = &v79[152 * v75 + 152];
            free(*((void **)v103 + 11));
            *((void *)v103 + 11) = 0;
            *int v135 = 0;
            v75 += 2;
          }
          ++v74;
          unint64_t v104 = *(void *)(v4 + 8) - 1;
          v78 += 19;
        }
        while (v75 < v104);
        uint64_t v7 = v133;
        if (v75 != v104) {
          goto LABEL_108;
        }
      }
      uint64_t v105 = &v73[19 * v74++];
      uint64_t v106 = *(void *)v4 + 152 * v75;
      long long v107 = *(_OWORD *)(v106 + 16);
      *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
      *((_OWORD *)v105 + 1) = v107;
      long long v108 = *(_OWORD *)(v106 + 32);
      long long v109 = *(_OWORD *)(v106 + 48);
      long long v110 = *(_OWORD *)(v106 + 80);
      *((_OWORD *)v105 + 4) = *(_OWORD *)(v106 + 64);
      *((_OWORD *)v105 + 5) = v110;
      *((_OWORD *)v105 + 2) = v108;
      *((_OWORD *)v105 + 3) = v109;
      long long v111 = *(_OWORD *)(v106 + 96);
      long long v112 = *(_OWORD *)(v106 + 112);
      long long v113 = *(_OWORD *)(v106 + 128);
      v105[18] = *(const char **)(v106 + 144);
      *((_OWORD *)v105 + 7) = v112;
      *((_OWORD *)v105 + 8) = v113;
      *((_OWORD *)v105 + 6) = v111;
LABEL_108:
      free(*(void **)v4);
      *(void *)uint64_t v4 = v73;
      *(void *)(v4 + 8) = v74;
      if (!v74) {
        sub_10003EAA4();
      }
      if (*(_DWORD *)(*v7 + 32) || *(_DWORD *)(*v7 + 192))
      {
        int v120 = 0;
        do
        {
          if (((_WORD)v73[3] & 0xF000) == 0x4000)
          {
            if (!v120 || (size_t v121 = strlen(*v120), v122 = *v73, strncmp(*v120, *v73, v121)) || v122[v121] != 47)
            {
              int v123 = (char *)v73[2];
              if (*(_DWORD *)(*v7 + 32)
                || !strcmp(v73[2], ".")
                || (int v124 = strrchr(v123, 47)) != 0
                && ((int v126 = v124[1], v125 = v124 + 1, !v126) || !strcmp(v125, ".")))
              {
                *((_DWORD *)v73 + 14) |= 1u;
                sub_10001FA38(3, "%s: top-level", v114, v115, v116, v117, v118, v119, (char)v123);
                int v120 = v73;
              }
            }
          }
          v73 += 19;
          --v74;
        }
        while (v74);
      }
      return 1;
    }
    else
    {
      if (dword_100058FD8)
      {
        int v76 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B320();
        }
        *__error() = v76;
      }
      sub_10001FBD8("calloc", v66, v67, v68, v69, v70, v71, v72, v132);
LABEL_87:
      if (dword_100058FD8)
      {
        int v77 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003EA70();
        }
        *__error() = v77;
      }
      sub_10001FC88("flist_dedupe");
      sub_100012830(*(char **)v4, *(void *)(v4 + 8));
      uint64_t result = 0;
      *(void *)uint64_t v4 = 0;
    }
  }
  return result;
}

uint64_t sub_100015D50(int *a1, const char *a2, void **a3, size_t *a4, uint64_t a5, size_t a6)
{
  memset(&v113, 0, sizeof(v113));
  unint64_t v112 = 0;
  *a3 = 0;
  *a4 = 0;
  if (!*(_DWORD *)(*(void *)a1 + 32)) {
    return 1;
  }
  size_t v6 = a6;
  if (!a6) {
    return 1;
  }
  uint64_t v7 = (const char **)a5;
  uint64_t v11 = 0;
  uint64_t v12 = (int *)(a5 + 56);
  size_t v13 = a6;
  do
  {
    int v14 = *v12;
    v12 += 38;
    v11 += v14 & 1;
    --v13;
  }
  while (v13);
  if (!v11) {
    return 1;
  }
  uint64_t v15 = (const char **)malloc_type_calloc((size_t)(v11 + 1), 8uLL, 0x10040436913F5uLL);
  if (v15)
  {
    int v23 = v15;
    long long v109 = a1;
    uint64_t v106 = a3;
    long long v107 = a4;
    unint64_t v24 = 0;
    if (v6)
    {
      uint64_t v25 = 0;
      while (1)
      {
        if (((uint64_t)v7[19 * v25 + 7] & 1) == 0) {
          goto LABEL_20;
        }
        if (((uint64_t)v7[19 * v25 + 3] & 0xF000) != 0x4000) {
          sub_10003ED68();
        }
        uint64_t v26 = (char **)&v23[v24];
        if (asprintf(v26, "%s/%s", a2, v7[19 * v25 + 2]) == -1)
        {
          if (dword_100058FD8)
          {
            int v89 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003B04C();
            }
            *__error() = v89;
          }
          sub_10001FBD8("asprintf", v27, v17, v18, v19, v20, v21, v22, v102);
          uint64_t v85 = 0;
          *uint64_t v26 = 0;
          goto LABEL_153;
        }
        uint64_t v28 = v7;
        size_t v29 = v6;
        uint64_t v30 = *v26;
        uint64_t v31 = v23;
        unint64_t v32 = v24;
        if (v24) {
          break;
        }
LABEL_15:
        if (!v30) {
          goto LABEL_18;
        }
        sub_10001FA38(3, "%s: will scan for deletions", v17, v18, v19, v20, v21, v22, (char)v30);
        ++v24;
LABEL_19:
        int v23 = v31;
        size_t v6 = v29;
        uint64_t v7 = v28;
LABEL_20:
        if (++v25 >= v6 || v24 >= (unint64_t)v11) {
          goto LABEL_22;
        }
      }
      while (strcmp(*v23, v30))
      {
        ++v23;
        if (!--v32) {
          goto LABEL_15;
        }
      }
      free(v30);
      *uint64_t v26 = 0;
LABEL_18:
      --v11;
      goto LABEL_19;
    }
LABEL_22:
    v23[v24] = 0;
    if (dword_100058FD8)
    {
      uint64_t v33 = v23;
      int v34 = *__error();
      int v35 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 134217984;
        uint64_t v115 = v11;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "delete from %zu directories", buf, 0xCu);
      }
      *__error() = v34;
      int v23 = v33;
    }
    sub_10001FA38(1, "delete from %zu directories", v17, v18, v19, v20, v21, v22, (char)v11);
    if (!hcreate(v6))
    {
      if (dword_100058FD8)
      {
        int v88 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003EBA0();
        }
        *__error() = v88;
      }
      v36.key = "hcreate";
      goto LABEL_139;
    }
    long long v108 = (char **)v23;
    if (v6)
    {
      uint64_t v43 = 0;
      while (1)
      {
        int v44 = v7[19 * v43 + 2];
        do
        {
          int v45 = strncmp(v44, "./", 2uLL);
          v44 += 2;
        }
        while (!v45);
        v36.key = strdup(v44 - 2);
        if (!v36.key) {
          break;
        }
        key = v36.key;
        v36.int data = 0;
        v36.key = (char *)hsearch(v36, ENTER);
        if (!v36.key)
        {
          if (dword_100058FD8)
          {
            int v94 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003ED34();
            }
            *__error() = v94;
          }
          v36.key = "hsearch";
          goto LABEL_139;
        }
        if (*(char **)v36.key != key) {
          free(key);
        }
        if (++v43 == v6) {
          goto LABEL_36;
        }
      }
      if (dword_100058FD8)
      {
        int v93 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003BE00();
        }
        *__error() = v93;
      }
      v36.key = "strdup";
LABEL_139:
      sub_10001FBD8(v36.key, (uint64_t)v36.data, v37, v38, v39, v40, v41, v42, (char)v103);
      uint64_t v85 = 0;
      if (v11) {
        goto LABEL_153;
      }
LABEL_155:
      free(v23);
      hdestroy();
      return v85;
    }
LABEL_36:
    v36.key = (char *)fts_open((char *const *)v23, 16, 0);
    if (!v36.key)
    {
      if (dword_100058FD8)
      {
        int v92 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003EBD4();
        }
        *__error() = v92;
      }
      v36.key = "fts_open";
      goto LABEL_139;
    }
    uint64_t v47 = v36.key;
    size_t v48 = strlen(a2);
    *__error() = 0;
    uint64_t v49 = fts_read((FTS *)v47);
    if (!v49)
    {
LABEL_118:
      if (*__error())
      {
        if (dword_100058FD8)
        {
          int v90 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003EC08();
          }
          *__error() = v90;
        }
        int v91 = "fts_read";
LABEL_148:
        sub_10001FBD8(v91, v58, v59, v60, v61, v62, v63, v64, (char)v103);
LABEL_149:
        uint64_t v85 = 0;
      }
      else
      {
        if (v109[65] < 29) {
          long long v95 = (int (__cdecl *)(const void *, const void *))sub_100012234;
        }
        else {
          long long v95 = (int (__cdecl *)(const void *, const void *))sub_100014FB8;
        }
        qsort(*v106, *v107, 0x98uLL, v95);
        uint64_t v85 = 1;
      }
      fts_close((FTS *)v47);
      int v23 = (const char **)v108;
      if (v11)
      {
LABEL_153:
        long long v97 = (void **)v23;
        do
        {
          long long v98 = *v97++;
          free(v98);
          --v11;
        }
        while (v11);
      }
      goto LABEL_155;
    }
    uint64_t v50 = v49;
    __sa = 0;
    int v51 = 0;
    int v52 = "./";
    unint64_t v53 = v48 + 1;
    while (1)
    {
      int fts_info = v50->fts_info;
      if (fts_info != 10)
      {
        if (!v51 || fts_info != 6)
        {
          int v55 = v52;
          if (fts_info == 6 || sub_1000122C8(v109, (uint64_t)v50, 1))
          {
            if (v53 < v50->fts_pathlen)
            {
              if (!v50->fts_statp) {
                sub_10003EC3C();
              }
              if (*(_DWORD *)(*(void *)v109 + 124))
              {
                int v56 = v7;
                size_t v57 = v6;
                if (v6)
                {
                  while (stat(*v56, &v113) != -1)
                  {
                    if (v50->fts_statp->st_dev == v113.st_dev) {
                      goto LABEL_53;
                    }
                    v56 += 19;
                    if (!--v57) {
                      goto LABEL_70;
                    }
                  }
                  if (dword_100058FD8)
                  {
                    int v96 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_10003ECC8();
                    }
                    *__error() = v96;
                  }
                  int v103 = *v56;
                  int v91 = "%s: stat";
                  goto LABEL_148;
                }
                goto LABEL_70;
              }
LABEL_53:
              fts_path = v50->fts_path;
              uint64_t v66 = &fts_path[v53];
              uint64_t v67 = (uint64_t)&fts_path[v53 + 1];
              int v68 = fts_path[v53];
              if (v68 == 47) {
                ++v53;
              }
              unint64_t v105 = v53;
              uint64_t v69 = &fts_path[v53];
              if (v68 == 47) {
                uint64_t v70 = v67;
              }
              else {
                uint64_t v70 = (uint64_t)v66;
              }
              uint64_t v71 = (char *)(v70 - 2);
              int v52 = v55;
              do
              {
                int v72 = strncmp(v69, v55, 2uLL);
                v69 += 2;
                v71 += 2;
              }
              while (!v72);
              int v73 = v50->fts_info;
              if (*(_DWORD *)(*(void *)v109 + 100))
              {
LABEL_61:
                if (v73 == 1 && __sa != 0) {
                  goto LABEL_95;
                }
              }
              else if (v73 != 6)
              {
                int v76 = (char *)(v69 - 2);
                if (sub_10002A51C(v76, v73 == 1, 1, __sa != 0) == -1)
                {
                  if (dword_100058FD8)
                  {
                    unint64_t v104 = v76;
                    int v77 = *__error();
                    uint64_t v78 = qword_100058FE8;
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)stat buf = 136315138;
                      uint64_t v115 = v71;
                      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "skip excluded file %s", buf, 0xCu);
                    }
                    *__error() = v77;
                    int v52 = v55;
                    int v76 = v104;
                  }
                  sub_10001FDC8("skip excluded file %s", v76);
                  if (v50->fts_info == 1) {
                    int v51 = 1;
                  }
                  ++v50->fts_parent->fts_number;
                  fts_set((FTS *)v47, v50, 4);
                  goto LABEL_95;
                }
                int v73 = v50->fts_info;
                goto LABEL_61;
              }
              v116.key = v71;
              v116.int data = 0;
              if (hsearch(v116, FIND)) {
                goto LABEL_95;
              }
              int v75 = v50->fts_info;
              if (v75 == 1)
              {
                __sa = (char *)v50;
LABEL_95:
                unint64_t v53 = v105;
                goto LABEL_96;
              }
              if (v50 == (FTSENT *)__sa)
              {
                if (v75 != 6) {
                  sub_10003EC9C();
                }
                __sa = 0;
              }
              else if (v75 != 6)
              {
                goto LABEL_98;
              }
              if (v50->fts_number >= 1)
              {
                if (dword_100058FD8)
                {
                  int v79 = *__error();
                  int v80 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                  {
                    int v81 = v50->fts_path;
                    *(_DWORD *)stat buf = 136315138;
                    uint64_t v115 = v81;
                    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "%s: not empty, cannot delete", buf, 0xCu);
                  }
                  *__error() = v79;
                }
                sub_10001FDC8("%s: not empty, cannot delete", v50->fts_path);
                ++v50->fts_parent->fts_number;
                int v52 = v55;
                goto LABEL_95;
              }
LABEL_98:
              if (!sub_1000135E0((char **)v106, v107, &v112))
              {
                if (dword_100058FD8)
                {
                  int v99 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_10003EC68();
                  }
                  *__error() = v99;
                }
                sub_10001FC88("flist_realloc");
                goto LABEL_149;
              }
              int v82 = *v106;
              uint64_t v83 = *v107 - 1;
              long long v84 = strdup(v50->fts_path);
              v82[19 * v83] = v84;
              if (!v84)
              {
                if (dword_100058FD8)
                {
                  int v100 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_10003BE00();
                  }
                  *__error() = v100;
                }
                int v91 = "strdup";
                goto LABEL_148;
              }
              v82[19 * v83 + 2] = &v84[v105];
              unint64_t v53 = v105;
              sub_100016878((uint64_t)&v82[19 * v83], &v50->fts_statp->st_dev);
LABEL_69:
              *__error() = 0;
            }
LABEL_70:
            int v52 = v55;
            goto LABEL_96;
          }
          if (v50->fts_errno) {
            ++*((void *)v109 + 30);
          }
          ++v50->fts_parent->fts_number;
          goto LABEL_69;
        }
        int v51 = 0;
      }
LABEL_96:
      uint64_t v50 = fts_read((FTS *)v47);
      if (!v50) {
        goto LABEL_118;
      }
    }
  }
  if (dword_100058FD8)
  {
    int v87 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B320();
    }
    *__error() = v87;
  }
  sub_10001FBD8("calloc", v16, v17, v18, v19, v20, v21, v22, v101);
  return 0;
}

double sub_100016878(uint64_t a1, int *a2)
{
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 2);
  double result = *((double *)a2 + 2);
  *(double *)(a1 + 28) = result;
  uint64_t v3 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = *((void *)a2 + 12);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 36) = a2[6];
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = *((unsigned __int16 *)a2 + 3);
  return result;
}

uint64_t sub_1000168B4(uint64_t a1, const char *a2, uint64_t a3, char **a4, unint64_t *a5, unint64_t *a6, int *a7)
{
  if (sub_1000135E0(a4, a5, a6))
  {
    uint64_t v12 = *a4;
    uint64_t v13 = *a5 - 1;
    int v14 = strdup(a2);
    *(void *)&v12[152 * v13] = v14;
    if (v14)
    {
      uint64_t v22 = &v12[152 * v13];
      *((void *)v22 + 2) = &v14[a3];
      *((_WORD *)v22 + 12) = *((_WORD *)a7 + 2);
      *(void *)(v22 + 28) = *((void *)a7 + 2);
      uint64_t v23 = *((void *)a7 + 6);
      *((void *)v22 + 5) = *((void *)a7 + 12);
      *((void *)v22 + 6) = v23;
      *((_DWORD *)v22 + 9) = a7[6];
      uint64_t v24 = *((void *)a7 + 1);
      *((void *)v22 + 8) = *a7;
      *((void *)v22 + 9) = v24;
      *((void *)v22 + 10) = *((unsigned __int16 *)a7 + 3);
      return 1;
    }
    if (dword_100058FD8)
    {
      int v27 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v27;
    }
    sub_10001FBD8("strdup", v15, v16, v17, v18, v19, v20, v21, v28);
  }
  else
  {
    if (dword_100058FD8)
    {
      int v26 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EC68();
      }
      *__error() = v26;
    }
    sub_10001FC88("flist_realloc");
  }
  return 0;
}

uint64_t sub_100016A2C(void *a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    uint64_t v10 = *a1;
    if (!*(_DWORD *)(*a1 + 96) && !*(_DWORD *)(v10 + 564)) {
      sub_10003ED94();
    }
    if (!*(_DWORD *)(v10 + 32) && !*(_DWORD *)(v10 + 564)) {
      sub_10003EDC0();
    }
    if (!a1[30] || *(_DWORD *)(v10 + 568))
    {
      uint64_t v11 = *(void *)(v10 + 592);
      if ((v11 & 0x8000000000000000) == 0)
      {
        unint64_t v12 = a4;
        if (v11)
        {
          uint64_t v13 = a1[31];
          if (v11 <= v13 || *((unsigned char *)a1 + 256)) {
            return 1;
          }
          unint64_t v12 = a4;
          if (v13 + a4 > v11)
          {
            *((unsigned char *)a1 + 256) = 1;
            unint64_t v12 = v11 - v13;
          }
        }
        unint64_t v86 = v12;
        int v14 = *((_DWORD *)a1 + 65);
        BOOL v15 = v14 < 29;
        if (v14 >= 29) {
          unint64_t v16 = v12 - 1;
        }
        else {
          unint64_t v16 = 0;
        }
        if (v15) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = -1;
        }
        if (v15) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = -1;
        }
        unint64_t v19 = v16 - v17;
        if (v16 == v17)
        {
LABEL_24:
          if (a4 > v86) {
            sub_10001FA38(-1, "Deletions stopped due to --max-delete limit (%zu skipped)", a3, a4, a5, a6, a7, a8, a4 - v86);
          }
          return 1;
        }
        uint64_t v21 = a3 + 152 * v16;
        uint64_t v22 = &dword_100058FD8;
        while (1)
        {
          if (*v22)
          {
            int v23 = *__error();
            uint64_t v24 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v25 = *(char **)(v21 + 16);
              *(_DWORD *)stat buf = 136315138;
              int v88 = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s: deleting", buf, 0xCu);
            }
            *__error() = v23;
          }
          sub_10001FA38(0, "%s: deleting", a3, a4, a5, a6, a7, a8, *(void *)(v21 + 16));
          uint64_t v26 = *a1;
          if (*(_DWORD *)(*a1 + 36)) {
            goto LABEL_72;
          }
          if (a2 == -1) {
            sub_10003EDEC();
          }
          ++a1[31];
          int v27 = *(_WORD *)(v21 + 24) & 0xF000;
          int v28 = v27 == 0x4000;
          if (*(_DWORD *)(v26 + 152))
          {
            if (*(void *)(v26 + 160))
            {
              if (*v22)
              {
                size_t v29 = v22;
                int v30 = *__error();
                uint64_t v31 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v74 = *(char **)(v21 + 16);
                  int v75 = *(char **)(*a1 + 160);
                  *(_DWORD *)stat buf = 136315394;
                  int v88 = v74;
                  __int16 v89 = 2080;
                  int v90 = v75;
                  _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%s: doing backup-dir to %s", buf, 0x16u);
                }
                *__error() = v30;
                uint64_t v22 = v29;
              }
              sub_10001FA38(2, "%s: doing backup-dir to %s", a3, a4, a5, a6, a7, a8, *(void *)(v21 + 16));
              if (snprintf(__str, 0x400uLL, "%s/%s%s", *(const char **)(*a1 + 160), *(const char **)(v21 + 16), *(const char **)(*a1 + 168)) >= 1024)
              {
                if (*v22)
                {
                  int v39 = *__error();
                  uint64_t v40 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    int v76 = *(char **)(v21 + 16);
                    uint64_t v78 = *(char **)(*a1 + 160);
                    uint64_t v77 = *(void *)(*a1 + 168);
                    *(_DWORD *)stat buf = 136316162;
                    int v88 = v76;
                    __int16 v89 = 2080;
                    int v90 = v78;
                    __int16 v91 = 2080;
                    int v92 = v76;
                    __int16 v93 = 2080;
                    uint64_t v94 = v77;
                    __int16 v95 = 1024;
                    int v96 = 1024;
                    _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%s: backup-dir: compound backup path too long: %s/%s%s > %d", buf, 0x30u);
                  }
                  *__error() = v39;
                }
                sub_10001FBD8("%s: backup-dir: compound backup path too long: %s/%s%s > %d", v32, v33, v34, v35, v36, v37, v38, *(void *)(v21 + 16));
                goto LABEL_71;
              }
              if (sub_10000AC8C((uint64_t)a1, a2, (const char **)v21, __str, *(_WORD *)(v21 + 24)) == -1)
              {
                if (*v22)
                {
                  int v60 = *__error();
                  uint64_t v61 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    int v81 = *(char **)(v21 + 16);
                    *(_DWORD *)stat buf = 136315394;
                    int v88 = v81;
                    __int16 v89 = 2080;
                    int v90 = __str;
                    _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%s: backup_to_dir: %s", buf, 0x16u);
                  }
                  *__error() = v60;
                }
                sub_10001FBD8("%s: backup_to_dir: %s", v53, v54, v55, v56, v57, v58, v59, *(void *)(v21 + 16));
                goto LABEL_71;
              }
            }
            else if (v27 != 0x4000)
            {
              if (*v22)
              {
                uint64_t v41 = v22;
                int v42 = *__error();
                uint64_t v43 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
                {
                  int v80 = *(char **)(v21 + 16);
                  *(_DWORD *)stat buf = 136315138;
                  int v88 = v80;
                  _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "%s: doing backup", buf, 0xCu);
                }
                *__error() = v42;
                uint64_t v22 = v41;
              }
              sub_10001FA38(2, "%s: doing backup", a3, a4, a5, a6, a7, a8, *(void *)(v21 + 16));
              if (snprintf(__str, 0x400uLL, "%s%s", *(const char **)(v21 + 16), *(const char **)(*a1 + 168)) >= 1024)
              {
                if (*v22)
                {
                  int v51 = *__error();
                  int v52 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    int v82 = *(char **)(v21 + 16);
                    uint64_t v83 = *(char **)(*a1 + 168);
                    *(_DWORD *)stat buf = 136315906;
                    int v88 = v82;
                    __int16 v89 = 2080;
                    int v90 = v82;
                    __int16 v91 = 2080;
                    int v92 = v83;
                    __int16 v93 = 1024;
                    LODWORD(v94) = 1024;
                    _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%s: backup: compound backup path too long: %s%s > %d", buf, 0x26u);
                  }
                  *__error() = v51;
                }
                sub_10001FBD8("%s: backup: compound backup path too long: %s%s > %d", v44, v45, v46, v47, v48, v49, v50, *(void *)(v21 + 16));
                goto LABEL_71;
              }
              if (sub_10000B308(a2, *(const char **)(v21 + 16), a2, __str, 1) == -1)
              {
                if (*v22)
                {
                  int v72 = *__error();
                  int v73 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    long long v84 = *(char **)(v21 + 16);
                    *(_DWORD *)stat buf = 136315394;
                    int v88 = v84;
                    __int16 v89 = 2080;
                    int v90 = __str;
                    _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%s: move_file: %s", buf, 0x16u);
                  }
                  *__error() = v72;
                }
                sub_10001FBD8("%s: move_file: %s", v62, v63, v64, v65, v66, v67, v68, *(void *)(v21 + 16));
                goto LABEL_71;
              }
            }
          }
          if (unlinkat(a2, *(const char **)(v21 + 16), v28 << 7) != -1 || *__error() == 2) {
            goto LABEL_72;
          }
          if (*v22)
          {
            int v70 = *__error();
            uint64_t v71 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              int v79 = *(char **)(v21 + 16);
              *(_DWORD *)stat buf = 136315138;
              int v88 = v79;
              _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%s: unlinkat", buf, 0xCu);
            }
            *__error() = v70;
          }
          sub_10001FBD8("%s: unlinkat", v69, a3, a4, a5, a6, a7, a8, *(void *)(v21 + 16));
LABEL_71:
          ++a1[30];
LABEL_72:
          v21 += 152 * v18;
          v19 += v18;
          if (!v19) {
            goto LABEL_24;
          }
        }
      }
    }
  }
  return 1;
}

void sub_1000171CC(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 432) && *(void *)(a1 + 176))
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      free(*(void **)(*(void *)(a1 + 168) + 8 * v2));
      uint64_t v2 = v3;
    }
    while (*(void *)(a1 + 176) > (unint64_t)v3++);
  }
  free(*(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
}

uint64_t sub_100017234(uint64_t a1)
{
  bzero(__s, 0x400uLL);
  uint64_t v2 = *(void *)a1;
  if (!strcmp(*(const char **)(*(void *)a1 + 432), "-"))
  {
    unsigned int v3 = __stdinp;
  }
  else if (*(void *)(v2 + 496))
  {
    unsigned int v3 = 0;
  }
  else
  {
    unsigned int v3 = fopen(*(const char **)(v2 + 504), "r");
    if (!v3)
    {
      if (dword_100058FD8)
      {
        int v30 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003EEE8();
        }
        *__error() = v30;
      }
      sub_10001FBD8("fopen ro: '%s'", v4, v5, v6, v7, v8, v9, v10, *(void *)(*(void *)a1 + 432));
      return 0;
    }
  }
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  while (*(void *)(*(void *)a1 + 496))
  {
    if (sub_1000174EC(a1, *(_DWORD *)(a1 + 184), (uint64_t)__s) == -1) {
      goto LABEL_20;
    }
LABEL_11:
    if (!sub_100017614(a1, __s)) {
      goto LABEL_20;
    }
    if (!__s[0])
    {
      qsort(*(void **)(a1 + 168), *(void *)(a1 + 176), 8uLL, (int (__cdecl *)(const void *, const void *))sub_10001786C);
      int v19 = 0;
      if (!v3) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
  }
  int v11 = fileno(v3);
  if (sub_1000174EC(a1, v11, (uint64_t)__s) != -1) {
    goto LABEL_11;
  }
  if (dword_100058FD8)
  {
    int v20 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003EE80();
    }
    *__error() = v20;
  }
  sub_10001FBD8("fdgets: '%s'", v12, v13, v14, v15, v16, v17, v18, *(void *)(*(void *)a1 + 432));
LABEL_20:
  int v19 = 1;
  if (!v3) {
    goto LABEL_23;
  }
LABEL_21:
  if (v3 != __stdinp && fclose(v3) == -1)
  {
    if (dword_100058FD8)
    {
      int v29 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EE18();
      }
      *__error() = v29;
    }
    sub_10001FBD8("fclose: '%s'", v21, v22, v23, v24, v25, v26, v27, *(void *)(*(void *)a1 + 432));
    goto LABEL_30;
  }
LABEL_23:
  if (!v19) {
    return 1;
  }
LABEL_30:
  sub_1000171CC(a1);
  return 0;
}

uint64_t sub_1000174EC(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6 = 0;
  ssize_t v7 = 1;
  while (v7 == 1 && v6 <= 0x3FF)
  {
    uint64_t v8 = (unsigned char *)(a3 + v6);
    while (1)
    {
      ssize_t v7 = read(a2, (void *)(a3 + v6), 1uLL);
      if (v7 != -1) {
        break;
      }
      if (*__error() != 35 && *__error() != 4 && *__error() != 35)
      {
        if (dword_100058FD8)
        {
          int v16 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003EF50();
          }
          *__error() = v16;
        }
        sub_10001FBD8("read(2) of files-from file failed", v9, v10, v11, v12, v13, v14, v15, v18);
        return 0xFFFFFFFFLL;
      }
    }
    ++v6;
    if (!*v8) {
      return v6;
    }
    if (*v8 == 10 && !*(_DWORD *)(*(void *)a1 + 440))
    {
      *(unsigned char *)(a3 + v6 - 1) = 0;
      return v6;
    }
  }
  return v6;
}

uint64_t sub_100017614(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (__s[v4 - 1] == 10) {
    __s[v4 - 1] = 0;
  }
  int v5 = *__s;
  uint64_t result = 1;
  if (v5 != 35 && v5 != 59)
  {
    if (!strncmp(__s, "..", 2uLL))
    {
      if (dword_100058FD8)
      {
        int v7 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_12:
        }
          sub_10003EF84();
LABEL_13:
        *__error() = v7;
      }
    }
    else
    {
      if (!strstr(__s, "/.."))
      {
        uint64_t v8 = (char **)malloc_type_realloc(*(void **)(a1 + 168), 8 * *(void *)(a1 + 176) + 8, 0x10040436913F5uLL);
        *(void *)(a1 + 168) = v8;
        if (v8)
        {
          asprintf(&v8[*(void *)(a1 + 176)], "%s", __s);
          uint64_t v23 = *(void *)(a1 + 176);
          if (*(void *)(*(void *)(a1 + 168) + 8 * v23))
          {
            sub_10001FA38(3, "Added '%s' to flist", v17, v18, v19, v20, v21, v22, *(void *)(*(void *)(a1 + 168) + 8 * v23));
            ++*(void *)(a1 + 176);
            return 1;
          }
          if (dword_100058FD8)
          {
            int v25 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003B04C();
            }
            *__error() = v25;
          }
          sub_10001FBD8("asprintf", v16, v17, v18, v19, v20, v21, v22, v27);
          sub_1000171CC(a1);
        }
        else
        {
          if (dword_100058FD8)
          {
            int v24 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003EFB8();
            }
            *__error() = v24;
          }
          sub_10001FBD8("realloc", v9, v10, v11, v12, v13, v14, v15, v26);
        }
        return 0;
      }
      if (dword_100058FD8)
      {
        int v7 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_12;
        }
        goto LABEL_13;
      }
    }
    sub_10001FB50("Can't have files-from with '..'");
    return 0;
  }
  return result;
}

uint64_t sub_10001786C(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_100017878(const char *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  do
    int v5 = a1[v4++];
  while (v5 == 47);
  unint64_t v6 = strrchr((char *)&a1[v4 - 1], 47);
  if (!v6) {
    return 1;
  }
  int v7 = v6;
  memset(&v32, 0, sizeof(v32));
  uint64_t v8 = strdup(a1);
  if (!v8)
  {
    if (dword_100058FD8)
    {
      int v27 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v27;
    }
    sub_10001FBD8("strdup", v9, v10, v11, v12, v13, v14, v15, v31);
    return 0;
  }
  uint64_t v16 = v8;
  v8[v7 - a1] = 0;
  if (stat(v8, &v32) == -1)
  {
    if (dword_100058FD8)
    {
      int v28 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CBD0();
      }
      *__error() = v28;
    }
    sub_10001FBD8("%s: stat", v17, v18, v19, v20, v21, v22, v23, (char)v16);
    goto LABEL_25;
  }
  uint64_t v24 = sub_1000136E8(a2);
  if (!v24)
  {
    if (dword_100058FD8)
    {
      int v29 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EC68();
      }
      *__error() = v29;
    }
    sub_10001FC88("flist_realloc");
LABEL_25:
    free(v16);
    return 0;
  }
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(void *)(v24 + 144) = 0;
  *(void *)uint64_t v24 = v16;
  *(void *)(v24 + 16) = &v16[v4 - 1];
  *(_WORD *)(v24 + 24) = v32.st_mode;
  *(void *)(v24 + 28) = *(void *)&v32.st_uid;
  *(void *)(v24 + 40) = v32.st_size;
  *(void *)(v24 + 48) = v32.st_mtimespec.tv_sec;
  *(_DWORD *)(v24 + 36) = v32.st_rdev;
  __darwin_ino64_t st_ino = v32.st_ino;
  *(void *)(v24 + 64) = v32.st_dev;
  *(void *)(v24 + 72) = st_ino;
  *(void *)(v24 + 80) = v32.st_nlink;
  if (!strchr(&v16[v4 - 1], 47) || sub_100017878(v16, a2)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v30 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003EB6C();
    }
    *__error() = v30;
  }
  sub_10001FC88("flist_append_dirs");
  return 0;
}

uint64_t sub_100017B2C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (char *)v1;
  int v7 = (uint64_t *)v0;
  uint64_t v193 = 0;
  uint64_t v194 = 0;
  memset(&v183, 0, sizeof(v183));
  memset(&v182, 0, sizeof(v182));
  if (*(_DWORD *)(*(void *)v0 + 64)) {
    int v8 = stat(v1, &v183);
  }
  else {
    int v8 = lstat(v1, &v183);
  }
  if (v8 == -1)
  {
    ++v7[30];
    if (dword_100058FD8)
    {
      int v18 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EFEC();
      }
      *__error() = v18;
    }
    char v176 = (char)v6;
    uint64_t v19 = "%s: (l)stat";
    goto LABEL_14;
  }
  int v16 = v183.st_mode & 0xF000;
  if (v16 != 0x4000)
  {
    if (v16 != 40960)
    {
      if (v16 == 0x8000) {
        uint64_t v17 = "file";
      }
      else {
        uint64_t v17 = "special";
      }
      goto LABEL_34;
    }
    char v31 = (_DWORD *)*v7;
    if (*(_DWORD *)(*v7 + 76) || v31[17] || v31[18])
    {
      if (stat(v6, &v182) == -1)
      {
        ++v7[30];
        if (dword_100058FD8)
        {
          int v147 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003CBD0();
          }
          *__error() = v147;
        }
        sub_10001FBD8("%s: stat", v32, v33, v34, v35, v36, v37, v38, (char)v6);
        return 0;
      }
      int v39 = readlink(v6, v192, 0x400uLL);
      if (v39 == -1)
      {
        ++v7[30];
        if (dword_100058FD8)
        {
          int v47 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003F054();
          }
          *__error() = v47;
        }
        sub_10001FBD8("%s: readlink", v40, v41, v42, v43, v44, v45, v46, (char)v6);
        return 0;
      }
      v192[v39] = 0;
      char v31 = (_DWORD *)*v7;
      if (*(_DWORD *)(*v7 + 72))
      {
        if (sub_10000A9B8(v192, v6, v6))
        {
          if (dword_100058FD8)
          {
            int v154 = *__error();
            size_t v155 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v188 = 136315394;
              int v189 = v6;
              __int16 v190 = 2080;
              v191 = v192;
              _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "ignoring unsafe symlink: %s -> %s", v188, 0x16u);
            }
            *__error() = v154;
          }
          sub_10001FA38(0, "ignoring unsafe symlink: %s -> %s", v148, v149, v150, v151, v152, v153, (char)v6);
          return 1;
        }
        char v31 = (_DWORD *)*v7;
      }
    }
    if (!v31[19] || (v182.st_mode & 0xF000) != 0x4000)
    {
      if (v31[17] && sub_10000A9B8(v192, v6, v6))
      {
        if ((v182.st_mode & 0xF000) == 0x4000)
        {
          if (v3 == -1) {
            uint64_t v3 = sub_100018DFC((uint64_t)v7, v6);
          }
          snprintf((char *)v188, 0x400uLL, "%s/", v6);
          sub_10001FA38(3, "symlinks: recursing '%s' -> '%s' '%s'", v166, v167, v168, v169, v170, v171, (char)v6);
          return sub_100017B2C(v7, v188, v5, v3);
        }
        uint64_t v17 = "file";
        uint64_t v48 = &v182;
        return sub_100018C40(v7, v17, v6, v5, (uint64_t)v48);
      }
      uint64_t v17 = "symlink";
LABEL_34:
      uint64_t v48 = &v183;
      return sub_100018C40(v7, v17, v6, v5, (uint64_t)v48);
    }
    if (v3 == -1) {
      uint64_t v3 = sub_100018DFC((uint64_t)v7, v6);
    }
    snprintf((char *)v188, 0x400uLL, "%s/", v6);
    sub_10001FA38(3, "symlinks: recursing '%s' -> '%s' '%s'\n", v160, v161, v162, v163, v164, v165, (char)v6);
    sub_100017B2C(v7, v188, v5, v3);
    return 1;
  }
  size_t v21 = strlen(v6);
  size_t v22 = v21;
  if (v21 >= 3)
  {
    size_t v22 = v21 - (strcmp(&v6[v21 - 3], "/./") == 0);
    if (v22 >> 10 > 4)
    {
      if (dword_100058FD8)
      {
        int v30 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F0BC();
        }
        *__error() = v30;
      }
      sub_10001FBD8("%s: flist_normalize_path", v23, v24, v25, v26, v27, v28, v29, (char)v6);
      return 0;
    }
  }
  __memcpy_chk();
  if (v188[v22 - 1] == 47) {
    v188[v22++] = 46;
  }
  v188[v22] = 0;
  uint64_t v51 = v3;
  uint64_t v193 = (char *)v188;
  uint64_t v194 = 0;
  if (v3 == -1) {
    uint64_t v51 = sub_100018DFC((uint64_t)v7, (char *)v188);
  }
  if (*(_DWORD *)(*v7 + 64)) {
    int v52 = 2;
  }
  else {
    int v52 = 20;
  }
  uint64_t v53 = fts_open(&v193, v52, 0);
  if (!v53)
  {
    ++v7[30];
    if (dword_100058FD8)
    {
      int v156 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EBD4();
      }
      *__error() = v156;
    }
    uint64_t v19 = "fts_open";
LABEL_14:
    sub_10001FBD8(v19, v9, v10, v11, v12, v13, v14, v15, v176);
    return 0;
  }
  uint64_t v54 = v53;
  *__error() = 0;
  uint64_t v55 = fts_read(v54);
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v178 = 0;
    int v179 = 0;
    uint64_t v20 = 0;
    while (1)
    {
      if (v56->fts_info == 6) {
        sub_10002A394((uint64_t)v56->fts_path, v51);
      }
      if (!sub_1000122C8(v7, (uint64_t)v56, 0)) {
        goto LABEL_140;
      }
      if (v56->fts_info == 1)
      {
        if (*(_DWORD *)(*v7 + 440)) {
          unsigned int v57 = 0;
        }
        else {
          unsigned int v57 = 10;
        }
        sub_10002A138((uint64_t)v56->fts_path, v51, v57);
      }
      fts_statp = v56->fts_statp;
      if (!fts_statp) {
        sub_10003F1AC();
      }
      int v59 = fts_statp->st_mode & 0xF000;
      int v60 = (_DWORD *)*v7;
      if (v59 == 40960)
      {
        if (v60[19] || v60[17] || v60[18])
        {
          if (stat(v56->fts_accpath, &v182) == -1)
          {
            if (dword_100058FD8)
            {
              int v78 = *__error();
              int v79 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
              {
                fts_accpath = v56->fts_accpath;
                *(_DWORD *)stat buf = 136315138;
                uint64_t v185 = fts_accpath;
                _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%s: stat", buf, 0xCu);
              }
              *__error() = v78;
            }
            sub_10001FBD8("%s: stat", v61, v62, v63, v64, v65, v66, v67, (char)v56->fts_accpath);
            goto LABEL_73;
          }
          int v68 = readlink(v56->fts_accpath, v192, 0x400uLL);
          if (v68 == -1)
          {
            if (dword_100058FD8)
            {
              int v76 = *__error();
              uint64_t v77 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
              {
                int v144 = v56->fts_accpath;
                *(_DWORD *)stat buf = 136315138;
                uint64_t v185 = v144;
                _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "%s: readlink", buf, 0xCu);
              }
              *__error() = v76;
            }
            sub_10001FBD8("%s: readlink", v69, v70, v71, v72, v73, v74, v75, (char)v56->fts_accpath);
LABEL_73:
            ++v7[30];
            goto LABEL_141;
          }
          v192[v68] = 0;
          int v60 = (_DWORD *)*v7;
          if (*(_DWORD *)(*v7 + 72))
          {
            if (sub_10000A9B8(v192, v56->fts_accpath, (char *)v188))
            {
              if (dword_100058FD8)
              {
                int v86 = *__error();
                int v87 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
                {
                  int v88 = v56->fts_accpath;
                  *(_DWORD *)stat buf = 136315394;
                  uint64_t v185 = v88;
                  __int16 v186 = 2080;
                  int v187 = v192;
                  _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "ignoring unsafe symlink %s -> %s", buf, 0x16u);
                }
                *__error() = v86;
              }
              sub_10001FA38(0, "ignoring unsafe symlink %s -> %s", v80, v81, v82, v83, v84, v85, (char)v56->fts_accpath);
              goto LABEL_141;
            }
            int v60 = (_DWORD *)*v7;
          }
        }
        if (v60[19] && (v182.st_mode & 0xF000) == 0x4000)
        {
          if (sub_100017B2C(v7, v56->fts_path, v5, v51)) {
            goto LABEL_141;
          }
          goto LABEL_73;
        }
      }
      int v89 = v60[31];
      if (v89)
      {
        int v90 = v56->fts_statp;
        dev_t st_dev = v90->st_dev;
        if (v90->st_dev != v183.st_dev)
        {
          if (v89 > 1 || (v90->st_mode & 0xF000) != 0x4000) {
            goto LABEL_141;
          }
          if (v178)
          {
            uint64_t v104 = 0;
            while (v179[v104] != st_dev)
            {
              if (v178 == ++v104) {
                goto LABEL_103;
              }
            }
            goto LABEL_141;
          }
LABEL_103:
          unint64_t v105 = sub_1000048CC(v179, v178 + 1, 4uLL);
          if (!v105)
          {
            if (dword_100058FD8)
            {
              int v175 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003F244();
              }
              *__error() = v175;
            }
            sub_10001FC88("reallocarray flist_gen_dirent()");
            goto LABEL_179;
          }
          v105[v178++] = v56->fts_statp->st_dev;
          int v179 = v105;
        }
      }
      fts_path = v56->fts_path;
      if (fts_path[v51] == 47) {
        ++v51;
      }
      if (sub_10002A51C(&fts_path[v51], v56->fts_info == 1, 0, 0) == -1)
      {
        if (dword_100058FD8)
        {
          int v106 = *__error();
          long long v107 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            long long v108 = &v56->fts_path[v51];
            *(_DWORD *)stat buf = 136315138;
            uint64_t v185 = v108;
            _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_INFO, "%s: skipping excluded file", buf, 0xCu);
          }
          *__error() = v106;
        }
        sub_10001FDC8("%s: skipping excluded file", &v56->fts_path[v51]);
        fts_set(v54, v56, 4);
        goto LABEL_141;
      }
      if (!*(_DWORD *)(*v7 + 604) || !access(v56->fts_path, 4))
      {
        uint64_t v93 = sub_1000136E8(v5);
        if (!v93)
        {
          if (dword_100058FD8)
          {
            int v172 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003EC68();
            }
            *__error() = v172;
          }
          sub_10001FC88("flist_realloc");
          goto LABEL_179;
        }
        uint64_t v94 = v93;
        __int16 v95 = v56->fts_path;
        if (v95[v51])
        {
          int v103 = strdup(v95);
          *(void *)uint64_t v94 = v103;
          if (!v103)
          {
            if (dword_100058FD8)
            {
              int v173 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003BE00();
              }
              *__error() = v173;
            }
            int v158 = "strdup";
            goto LABEL_173;
          }
        }
        else
        {
          if (asprintf((char **)v94, "%s.", v56->fts_path) == -1)
          {
            if (dword_100058FD8)
            {
              int v174 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003B04C();
              }
              *__error() = v174;
            }
            sub_10001FBD8("asprintf", v109, v110, v111, v112, v113, v114, v115, v176);
            *(void *)uint64_t v94 = 0;
            goto LABEL_179;
          }
          int v103 = *(const char **)v94;
        }
        if (v3 != -1)
        {
          size_t v116 = strlen(v103);
          size_t v117 = v116 - 2;
          if (v116 < 2)
          {
            if (v116)
            {
              size_t v118 = 0;
              goto LABEL_119;
            }
          }
          else
          {
            size_t v118 = v116 - 1;
            if (v103[v116 - 1] == 46 && v103[v117] == 47)
            {
              v103[v117] = 0;
              int v103 = *(const char **)v94;
            }
LABEL_119:
            if (v103[v118] == 47)
            {
              v103[v118] = 0;
              int v103 = *(const char **)v94;
            }
          }
        }
        *(void *)(v94 + 16) = &v103[v51];
        uint64_t v119 = v56->fts_statp;
        mode_t st_mode = v119->st_mode;
        *(_WORD *)(v94 + 24) = st_mode;
        *(void *)(v94 + 28) = *(void *)&v119->st_uid;
        *(void *)(v94 + 40) = v119->st_size;
        *(void *)(v94 + 48) = v119->st_mtimespec.tv_sec;
        *(_DWORD *)(v94 + 36) = v119->st_rdev;
        *(void *)(v94 + 64) = v119->st_dev;
        *(void *)(v94 + 72) = v119->st_ino;
        *(void *)(v94 + 80) = v119->st_nlink;
        if ((st_mode & 0xF000) == 0xA000)
        {
          if (*(_DWORD *)(*v7 + 68) && sub_10000A9B8(v192, v56->fts_path, (char *)v188))
          {
            *(_WORD *)(v94 + 24) = v182.st_mode;
            *(void *)(v94 + 28) = *(void *)&v182.st_uid;
            *(void *)(v94 + 40) = v182.st_size;
            *(void *)(v94 + 48) = v182.st_mtimespec.tv_sec;
            *(_DWORD *)(v94 + 36) = v182.st_rdev;
            __darwin_ino64_t st_ino = v182.st_ino;
            *(void *)(v94 + 64) = v182.st_dev;
            *(void *)(v94 + 72) = st_ino;
            *(void *)(v94 + 80) = v182.st_nlink;
            if (dword_100058FD8)
            {
              int v177 = *__error();
              int v128 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
              {
                v145 = v56->fts_path;
                *(_DWORD *)stat buf = 136315394;
                uint64_t v185 = v145;
                __int16 v186 = 2080;
                int v187 = v192;
                _os_log_debug_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "copy_unsafe_links: converting unsafe link %s -> %s to a regular file\n", buf, 0x16u);
              }
              *__error() = v177;
            }
            sub_10001FA38(2, "copy_unsafe_links: converting unsafe link %s -> %s to a regular file\n", v121, v122, v123, v124, v125, v126, (char)v56->fts_path);
          }
          else
          {
            int v129 = sub_100033E20(v56->fts_accpath);
            *(void *)(v94 + 88) = v129;
            if (!v129)
            {
              if (dword_100058FD8)
              {
                int v141 = *__error();
                char v142 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_10003F204(&v180, v181, v142);
                }
                *__error() = v141;
              }
              sub_10001FC88("symlink_read");
              ++v7[30];
              uint64_t v140 = *(void *)(v5 + 8);
              if (!v140) {
                sub_10003F1D8();
              }
              goto LABEL_148;
            }
          }
        }
        if (*(_DWORD *)(*v7 + 16))
        {
          if ((*(_WORD *)(v94 + 24) & 0xF000) == 0x8000)
          {
            int64_t v130 = *(void *)(v94 + 40);
            if (v130 >= 1)
            {
              uint64_t v20 = sub_10001C110(-2, *(const char **)v94, v130, (unsigned __int8 *)(v94 + 96));
              if (v20)
              {
                if (dword_100058FD8)
                {
                  int v138 = *__error();
                  int v139 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    int v146 = *(char **)v94;
                    *(_DWORD *)stat buf = 136315138;
                    uint64_t v185 = v146;
                    _os_log_error_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_ERROR, "%s: hash_file_by_path", buf, 0xCu);
                  }
                  *__error() = v138;
                }
                sub_10001FBD8("%s: hash_file_by_path", v131, v132, v133, v134, v135, v136, v137, *(void *)v94);
                ++v7[30];
                uint64_t v140 = *(void *)(v5 + 8);
                if (!v140) {
                  sub_10003F1D8();
                }
LABEL_148:
                *(void *)(v5 + 8) = v140 - 1;
                goto LABEL_141;
              }
            }
          }
        }
LABEL_140:
        *__error() = 0;
      }
LABEL_141:
      uint64_t v56 = fts_read(v54);
      if (!v56) {
        goto LABEL_167;
      }
    }
  }
  uint64_t v20 = 0;
  int v179 = 0;
LABEL_167:
  if (*__error())
  {
    if (dword_100058FD8)
    {
      int v157 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EC08();
      }
      *__error() = v157;
    }
    int v158 = "fts_read";
LABEL_173:
    sub_10001FBD8(v158, v96, v97, v98, v99, v100, v101, v102, v176);
  }
  else
  {
    if (dword_100058FD8)
    {
      int v159 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
        sub_10003F124();
      }
      *__error() = v159;
    }
    sub_10001FA38(2, "generated %zu filenames: %s", v97, v98, v99, v100, v101, v102, *(void *)(v5 + 8));
    uint64_t v20 = 1;
  }
LABEL_179:
  fts_close(v54);
  free(v179);
  return v20;
}

uint64_t sub_100018C40(uint64_t *a1, const char *a2, char *__s, uint64_t a4, uint64_t a5)
{
  if (sub_10002A51C(__s, (*(_WORD *)(a5 + 4) & 0xF000) == 0x4000, 0, 0) == -1)
  {
    if (dword_100058FD8)
    {
      int v12 = *__error();
      uint64_t v13 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315394;
        uint64_t v15 = __s;
        __int16 v16 = 2080;
        uint64_t v17 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s: skipping excluded %s", buf, 0x16u);
      }
      *__error() = v12;
    }
    sub_10001FDC8("%s: skipping excluded %s", __s, a2);
    return 1;
  }
  if (*(_DWORD *)(*a1 + 604) && access(__s, 4) || sub_100018E70(a1, (int *)a5, __s, a4)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v10 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003EB38();
    }
    *__error() = v10;
  }
  sub_10001FC88("flist_append");
  return 0;
}

uint64_t sub_100018DFC(uint64_t a1, char *__s)
{
  uint64_t result = strlen(__s);
  if (result <= 0) {
    sub_10003F278();
  }
  if (__s[result - 1] != 47)
  {
    if (*(_DWORD *)(*(void *)a1 + 188))
    {
      return 0;
    }
    else
    {
      uint64_t v5 = strrchr(__s, 47);
      if (v5) {
        return v5 - __s + 1;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100018E70(uint64_t *a1, int *a2, const char *a3, uint64_t a4)
{
  int v8 = (uint64_t *)(a4 + 8);
  if (!sub_1000135E0((char **)a4, (unint64_t *)(a4 + 8), (unint64_t *)(a4 + 16))
    || (uint64_t v9 = *v8) == 0)
  {
    if (dword_100058FD8)
    {
      int v24 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003F2A4();
      }
      *__error() = v24;
    }
    sub_10001FB50("fl_new failed");
    return 0;
  }
  unint64_t v10 = v9 - 1;
  uint64_t v11 = sub_100013748((void *)a4, v9 - 1);
  int v12 = strdup(a3);
  *(void *)uint64_t v11 = v12;
  if (!v12)
  {
    if (dword_100058FD8)
    {
      int v25 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v25;
    }
    uint64_t v26 = "strdup";
    goto LABEL_26;
  }
  uint64_t v20 = v12;
  uint64_t v21 = *a1;
  if (*(_DWORD *)(*a1 + 188))
  {
    size_t v22 = v12;
    do
    {
      *(void *)(v11 + 16) = v22;
      int v23 = *v22++;
    }
    while (v23 == 47);
    if (sub_100017878(v12, a4))
    {
      uint64_t v11 = sub_100013748((void *)a4, v10);
      uint64_t v21 = *a1;
      goto LABEL_28;
    }
    if (dword_100058FD8)
    {
      int v28 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003EB6C();
      }
      *__error() = v28;
    }
    uint64_t v26 = "flist_append_dirs";
LABEL_26:
    sub_10001FBD8(v26, v13, v14, v15, v16, v17, v18, v19, v41);
    return 0;
  }
  uint64_t v27 = strrchr(v12, 47);
  if (v27) {
    *(void *)(v11 + 16) = v27 + 1;
  }
  else {
    *(void *)(v11 + 16) = v20;
  }
LABEL_28:
  __int16 v29 = *((_WORD *)a2 + 2);
  *(_WORD *)(v11 + 24) = v29;
  *(void *)(v11 + 28) = *((void *)a2 + 2);
  uint64_t v30 = *((void *)a2 + 6);
  *(void *)(v11 + 40) = *((void *)a2 + 12);
  *(void *)(v11 + 48) = v30;
  *(_DWORD *)(v11 + 36) = a2[6];
  uint64_t v31 = *((void *)a2 + 1);
  *(void *)(v11 + 64) = *a2;
  *(void *)(v11 + 72) = v31;
  *(void *)(v11 + 80) = *((unsigned __int16 *)a2 + 3);
  if (*(void *)(v21 + 24))
  {
    sub_100014F60(a1, v11);
    __int16 v29 = *((_WORD *)a2 + 2);
  }
  if ((v29 & 0xF000) == 0xA000)
  {
    uint64_t v32 = sub_100033E20(*(const char **)v11);
    if (!v32)
    {
      ++a1[30];
      if (dword_100058FD8)
      {
        int v37 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F2D8();
        }
        *__error() = v37;
      }
      sub_10001FC88("symlink_read");
      return 0;
    }
    uint64_t v33 = v32;
    uint64_t v34 = (unsigned int (*)(char *, uint64_t, void))a1[29];
    uint64_t v35 = (char **)(v11 + 88);
    if (!v34) {
      goto LABEL_46;
    }
    if (v34(v32, v11 + 88, 0))
    {
      ++a1[30];
      if (dword_100058FD8)
      {
        int v36 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F340();
        }
        *__error() = v36;
      }
      sub_10001FC88("symlink_filter");
      return 0;
    }
    if (*v35) {
      free(v33);
    }
    else {
LABEL_46:
    }
      NSObject *v35 = v33;
  }
  if (*(_DWORD *)(*a1 + 16))
  {
    if ((*(_WORD *)(v11 + 24) & 0xF000) == 0x8000)
    {
      int64_t v38 = *(void *)(v11 + 40);
      if (v38 >= 1)
      {
        if (sub_10001C110(-2, *(const char **)v11, v38, (unsigned __int8 *)(v11 + 96)))
        {
          ++a1[30];
          if (dword_100058FD8)
          {
            int v39 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003F30C();
            }
            *__error() = v39;
          }
          sub_10001FC88("hash_file_by_path");
          return 0;
        }
      }
    }
  }
  return 1;
}

void sub_100019274(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100019284(uint64_t a1)
{
  if (!a1) {
    sub_10003F374();
  }
  while (1)
  {
    uint64_t v2 = *(void ***)a1;
    if (!*(void *)a1) {
      break;
    }
    uint64_t v3 = *v2;
    *(void *)a1 = *v2;
    if (!v3) {
      *(void *)(a1 + 8) = a1;
    }
    free(v2[3]);
    free(v2);
  }
}

uint64_t sub_1000192D8(uint64_t a1, const char *a2, int a3)
{
  size_t __linecapp = 0;
  __linep = 0;
  uint64_t v5 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
  if (!v5)
  {
    if (dword_100058FD8)
    {
      int v98 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CD90();
      }
      *__error() = v98;
    }
    sub_10001FBD8("malloc", v6, v7, v8, v9, v10, v11, v12, v108);
    return 0;
  }
  uint64_t v13 = (uint64_t)v5;
  void *v5 = 0;
  v5[1] = v5;
  uint64_t v14 = strdup("global");
  if (!v14)
  {
    if (dword_100058FD8)
    {
      int v99 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v99;
    }
    uint64_t v100 = "strdup";
    goto LABEL_130;
  }
  size_t v22 = v14;
  int v23 = sub_100019F38(v13, (uint64_t)v14);
  if (!v23)
  {
    free(v22);
LABEL_131:
    sub_100019284(v13);
    return 0;
  }
  int v24 = v23;
  int v25 = fopen(a2, "r");
  if (!v25)
  {
    if (dword_100058FD8)
    {
      int v102 = *__error();
      int v103 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003F3A0((uint64_t)a2, v103);
      }
      *__error() = v102;
    }
    char v108 = (char)a2;
    uint64_t v100 = "%s: open";
LABEL_130:
    sub_10001FBD8(v100, v15, v16, v17, v18, v19, v20, v21, v108);
    goto LABEL_131;
  }
  uint64_t v26 = v25;
  uint64_t v113 = v13;
  uint64_t v110 = a2;
  uint64_t v111 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  char v29 = 0;
LABEL_6:
  __dst = v27;
LABEL_7:
  size_t v116 = v28;
  while (1)
  {
    ssize_t v30 = getline(&__linep, &__linecapp, v26);
    if (v30 == -1) {
      break;
    }
    ssize_t v31 = v30;
    ssize_t v32 = v30 - 1;
    __linep[v30 - 1] = 0;
    uint64_t v33 = __linep;
    if (v29)
    {
      int v68 = __linep[v30 - 2];
      BOOL v69 = v68 == 92;
      if (v68 == 92)
      {
        __linep[v30 - 2] = 0;
        uint64_t v33 = __linep;
      }
      uint64_t v27 = __dst;
      int v28 = v116;
      if (*v33)
      {
        uint64_t v27 = &__dst[strlen(v33)];
        uint64_t v70 = (char *)malloc_type_realloc(v116, (size_t)(v27 + 1), 0x8A98E034uLL);
        if (!v70)
        {
          free(v116);
          int v28 = 0;
          char v29 = 1;
          if (v68 == 92) {
            goto LABEL_6;
          }
LABEL_103:
          int v89 = (char *)(v24 + 1);
          while (1)
          {
            int v89 = *(char **)v89;
            if (!v89) {
              break;
            }
            if (*((char ***)v89 + 2) == v111) {
              goto LABEL_111;
            }
          }
          int v90 = (char *)malloc_type_malloc(0x20uLL, 0x70040D49C7B5CuLL);
          if (!v90)
          {
            if (dword_100058FD8)
            {
              int v105 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003CD90();
              }
              *__error() = v105;
            }
            sub_10001FBD8("malloc", v91, v92, v93, v94, v95, v96, v97, v108);
            int v106 = v28;
            goto LABEL_146;
          }
          int v89 = v90;
          *((void *)v90 + 1) = v24;
          *((void *)v90 + 2) = v111;
          *((void *)v90 + 3) = 0;
          if (!strcmp((const char *)v24[3], "global")) {
            v111[4] = v89;
          }
          *(void *)int v89 = 0;
          *(void *)v24[2] = v89;
          v24[2] = v89;
LABEL_111:
          free(*((void **)v89 + 3));
          uint64_t v27 = 0;
          char v29 = 0;
          *((void *)v89 + 3) = v28;
          int v28 = 0;
          goto LABEL_6;
        }
        int v28 = v70;
        if ((char *)strlcat(v70, v33, (size_t)(v27 + 1)) != v27) {
          sub_10003F418();
        }
      }
LABEL_102:
      char v29 = 1;
      if (v69) {
        goto LABEL_6;
      }
      goto LABEL_103;
    }
    uint64_t v34 = -(uint64_t)__linep;
    do
    {
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      int v37 = *v33;
      if (v37 < 0) {
        __uint32_t v38 = __maskrune(*v33, 0x4000uLL);
      }
      else {
        __uint32_t v38 = _DefaultRuneLocale.__runetype[v37] & 0x4000;
      }
      ++v33;
      uint64_t v34 = v36 - 1;
    }
    while (v38);
    char v29 = 0;
    if (v37 && v37 != 35)
    {
      if (v37 != 91)
      {
        uint64_t v54 = strchr(v35, 61);
        int v28 = 0;
        char v29 = 0;
        if (v54)
        {
          int __s1 = v54;
          if (v54 > v35)
          {
            uint64_t v55 = v54;
            do
            {
              __darwin_ct_rune_t v57 = *--v55;
              __darwin_ct_rune_t v56 = v57;
              if (v57 < 0) {
                __uint32_t v58 = __maskrune(v56, 0x4000uLL);
              }
              else {
                __uint32_t v58 = _DefaultRuneLocale.__runetype[v56] & 0x4000;
              }
              if (!v58) {
                break;
              }
              *uint64_t v55 = 0;
            }
            while (v55 > v35);
          }
          size_t v59 = strlen(v35);
          if (v59)
          {
            size_t v60 = v59;
            size_t v61 = 0;
            size_t v117 = v35 + 1;
            do
            {
              __dsta = &v35[v61];
              __darwin_ct_rune_t v62 = v35[v61];
              if (v62 < 0) {
                __uint32_t v63 = __maskrune(v35[v61], 0x4000uLL);
              }
              else {
                __uint32_t v63 = _DefaultRuneLocale.__runetype[v62] & 0x4000;
              }
              if (v63)
              {
                size_t v112 = v61;
                uint64_t v64 = v117;
                do
                {
                  int v65 = *v64;
                  if (v65 < 0) {
                    __uint32_t v66 = __maskrune(*v64, 0x4000uLL);
                  }
                  else {
                    __uint32_t v66 = _DefaultRuneLocale.__runetype[v65] & 0x4000;
                  }
                  --v60;
                  ++v64;
                }
                while (v66);
                if (!v65)
                {
                  char *__dsta = 0;
                  break;
                }
                uint64_t v67 = v64 - 1;
                size_t v61 = v112;
                memmove(__dsta, v67, v60 - v112);
                v35[v60] = 0;
              }
              else
              {
                char *__dsta = __tolower(v62);
              }
              ++v61;
              ++v117;
            }
            while (v61 < v60);
          }
          if (*v35 && (uint64_t v71 = sub_100019FFC(v35)) != 0)
          {
            uint64_t v72 = v71;
            uint64_t v73 = __s1;
            *int __s1 = 0;
            uint64_t v74 = __s1;
            do
            {
              __darwin_ct_rune_t v76 = *++v73;
              __darwin_ct_rune_t v75 = v76;
              if (v76 < 0)
              {
                int v78 = v73;
                __uint32_t v77 = __maskrune(v75, 0x4000uLL);
                uint64_t v73 = v78;
              }
              else
              {
                __uint32_t v77 = _DefaultRuneLocale.__runetype[v75] & 0x4000;
              }
              ++v74;
            }
            while (v77);
            uint64_t v111 = v72;
            int v79 = __linep;
            int v80 = __linep[v31 - 2];
            BOOL v69 = v80 == 92;
            if (v80 == 92)
            {
              __linep[v31 - 2] = 0;
              int v79 = __linep;
              ssize_t v32 = v31 - 2;
            }
            uint64_t v81 = strdup(v73);
            if (v81)
            {
              uint64_t v27 = (char *)(&v79[v32] - v74);
              int v28 = v81;
              goto LABEL_102;
            }
            if (dword_100058FD8)
            {
              int v107 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003BE00();
              }
              *__error() = v107;
            }
            sub_10001FBD8("strdup", v82, v83, v84, v85, v86, v87, v88, v108);
            int v106 = v35;
LABEL_146:
            free(v106);
          }
          else
          {
            fprintf(__stderrp, "Invalid key in rsyncd.conf: '%s'\n", v35);
          }
LABEL_147:
          free(__linep);
LABEL_148:
          err(1, "failed to parse file %s", v110);
        }
        goto LABEL_7;
      }
      if (!a3) {
        break;
      }
      int v39 = strrchr(v35 + 1, 93);
      if (!v39) {
        goto LABEL_147;
      }
      uint64_t v40 = v39;
      char v41 = &v39[v36];
      do
      {
        uint64_t v42 = v40;
        uint64_t v43 = v41;
        if (v40 <= v33) {
          break;
        }
        --v40;
        __darwin_ct_rune_t v44 = *(v42 - 1);
        __uint32_t v45 = v44 < 0 ? __maskrune(v44, 0x4000uLL) : _DefaultRuneLocale.__runetype[v44] & 0x4000;
        char v41 = v43 - 1;
      }
      while (v45);
      if (v42 == v33) {
        goto LABEL_147;
      }
      do
      {
        __darwin_ct_rune_t v46 = v35[1];
        if (v46 < 0) {
          __uint32_t v47 = __maskrune(v46, 0x4000uLL);
        }
        else {
          __uint32_t v47 = _DefaultRuneLocale.__runetype[v46] & 0x4000;
        }
        ++v35;
        --v43;
      }
      while (v47);
      uint64_t v48 = (char *)malloc_type_malloc((size_t)(v43 + 1), 0xDE505A60uLL);
      if (!v48) {
        goto LABEL_147;
      }
      uint64_t v49 = v48;
      uint64_t v50 = v48;
      if (v35 != v42)
      {
        uint64_t v50 = v48;
        do
        {
          int v51 = *v35;
          if (v51 < 0)
          {
            if (__maskrune(*v35, 0x4000uLL))
            {
LABEL_36:
              char *v50 = 32;
              --v35;
              do
              {
                __darwin_ct_rune_t v52 = v35[2];
                if (v52 < 0) {
                  __uint32_t v53 = __maskrune(v52, 0x4000uLL);
                }
                else {
                  __uint32_t v53 = _DefaultRuneLocale.__runetype[v52] & 0x4000;
                }
                ++v35;
              }
              while (v53);
              goto LABEL_46;
            }
          }
          else if ((_DefaultRuneLocale.__runetype[v51] & 0x4000) != 0)
          {
            goto LABEL_36;
          }
          if (v51 == 47 || v51 == 93)
          {
            int v24 = 0;
            goto LABEL_55;
          }
          char *v50 = v51;
LABEL_46:
          ++v50;
          ++v35;
        }
        while (v42 != v35);
      }
      if (v50 - v49 > (uint64_t)v43) {
        sub_10003F444();
      }
      char *v50 = 0;
      int v24 = (void *)v113;
      while (1)
      {
        int v24 = (void *)*v24;
        if (!v24) {
          break;
        }
        if (!strcasecmp((const char *)v24[3], v49)) {
          goto LABEL_55;
        }
      }
      int v24 = sub_100019F38(v113, (uint64_t)v49);
      if (!v24) {
LABEL_55:
      }
        free(v49);
      char v29 = 0;
      if (!v24) {
        goto LABEL_147;
      }
    }
  }
  free(__linep);
  uint64_t v101 = v113;
  if (ferror(v26)) {
    goto LABEL_148;
  }
  fclose(v26);
  return v101;
}

BOOL sub_100019B08(uint64_t **a1, char *__s2)
{
  if (!__s2) {
    sub_10003F470();
  }
  do
    a1 = (uint64_t **)*a1;
  while (a1 && strcmp((const char *)a1[3], __s2));
  return a1 != 0;
}

uint64_t sub_100019B54(void *a1, uint64_t (*a2)(void *, const char *, uint64_t), uint64_t a3)
{
  uint64_t v3 = (void *)*a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = (const char *)v3[3];
    if (strcmp(v8, "global"))
    {
      uint64_t v7 = a2(a1, v8, a3);
      if (!v7) {
        break;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  return v7;
}

BOOL sub_100019BE8(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (sub_100019C24(a1, a2, a3, &v6, &v5)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v5 == 0;
  }
  return !v3;
}

uint64_t sub_100019C24(uint64_t *a1, const char *a2, char *__s2, char ***a4, char **a5)
{
  if (a2) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = "global";
  }
  uint64_t v9 = sub_100019FFC(__s2);
  if (!v9) {
    sub_10003F49C();
  }
  uint64_t v10 = v9;
  do
  {
    a1 = (uint64_t *)*a1;
    if (!a1)
    {
      *__error() = 2;
      return 0xFFFFFFFFLL;
    }
  }
  while (strcmp((const char *)a1[3], v8));
  if (strcmp(v8, "global"))
  {
    uint64_t v11 = (char *)(a1 + 1);
    while (1)
    {
      uint64_t v11 = *(char **)v11;
      if (!v11) {
        break;
      }
      if (*((char ***)v11 + 2) == v10)
      {
        if (!a4) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
    }
  }
  uint64_t v11 = v10[4];
  if (a4) {
LABEL_13:
  }
    *a4 = v10;
LABEL_14:
  uint64_t result = 0;
  *a5 = v11;
  return result;
}

uint64_t sub_100019CF4(uint64_t *a1, const char *a2, char *a3, int *a4)
{
  uint64_t v8 = 0;
  if (sub_100019DD4(a1, a2, a3, &v8)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = v8;
  if (!strcasecmp(v8, "yes") || !strcasecmp(v6, "true") || !strcasecmp(v6, "1"))
  {
    int v7 = 1;
  }
  else
  {
    if (strcasecmp(v6, "no") && strcasecmp(v6, "false") && strcasecmp(v6, "0"))
    {
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }
    int v7 = 0;
  }
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t sub_100019DD4(uint64_t *a1, const char *a2, char *a3, void *a4)
{
  int v7 = 0;
  uint64_t v8 = 0;
  if (sub_100019C24(a1, a2, a3, &v8, &v7) || !v7 && !*((unsigned char *)v8 + 24)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  if (v7) {
    uint64_t v6 = v7 + 24;
  }
  else {
    uint64_t v6 = (char *)(v8 + 2);
  }
  *a4 = *(void *)v6;
  return result;
}

uint64_t sub_100019E44(uint64_t *a1, const char *a2, char *a3, uint64_t *a4)
{
  __str = 0;
  if (!sub_100019DD4(a1, a2, a3, &__str))
  {
    __endptr = 0;
    *__error() = 0;
    uint64_t v5 = strtol(__str, &__endptr, 10);
    if (!*__error() && !*__endptr)
    {
      uint64_t result = 0;
      *a4 = v5;
      return result;
    }
    *__error() = 22;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100019ED0(uint64_t *a1, const char *a2, char *a3, _DWORD *a4)
{
  uint64_t v6 = 0;
  uint64_t result = sub_100019E44(a1, a2, a3, &v6);
  if (result != -1)
  {
    if (v6 == (int)v6)
    {
      uint64_t result = 0;
      *a4 = v6;
    }
    else
    {
      *__error() = 34;
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void *sub_100019F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_malloc(0x20uLL, 0xB00400934D706uLL);
  uint64_t v12 = v4;
  if (v4)
  {
    v4[1] = 0;
    v4[2] = v4 + 1;
    v4[3] = a2;
    *uint64_t v4 = 0;
    **(void **)(a1 + 8) = v4;
    *(void *)(a1 + 8) = v4;
  }
  else
  {
    if (dword_100058FD8)
    {
      int v13 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CD90();
      }
      *__error() = v13;
    }
    sub_10001FBD8("malloc", v5, v6, v7, v8, v9, v10, v11, v15);
  }
  return v12;
}

char **sub_100019FFC(char *__s2)
{
  uint64_t v2 = 0;
  for (uint64_t i = 0; ; ++i)
  {
    if (!strcmp((&off_100058000)[v2], __s2)) {
      return &(&off_100058000)[5 * i];
    }
    uint64_t v4 = (&off_100058000)[v2 + 1];
    if (v4)
    {
      if (!strcmp(v4, __s2)) {
        break;
      }
    }
    v2 += 5;
    if (v2 == 205) {
      return 0;
    }
  }
  return &(&off_100058000)[v2];
}

uint64_t sub_10001A08C(void *a1)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v2 = a1[7];
  if (!v2) {
    return 4294967294;
  }
  uint64_t result = 0;
  a1[12] = 1;
  *(void *)(v2 + 32) = 0;
  a1[2] = 0;
  a1[5] = 0;
  a1[6] = 0;
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 20) = 0x8000;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 60) = 0;
  *(void *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 80) = 0;
  *(void *)(v2 + 136) = v2 + 1360;
  *(void *)(v2 + 96) = v2 + 1360;
  *(void *)(v2 + 104) = v2 + 1360;
  return result;
}

uint64_t sub_10001A0F4(void *a1, int a2, unsigned char *a3, int a4)
{
  if (!a3) {
    return 4294967290;
  }
  uint64_t result = 4294967290;
  if (a4 == 112 && *a3 == 49)
  {
    if (!a1) {
      return 4294967294;
    }
    a1[6] = 0;
    uint64_t v7 = (void *(*)(uint64_t, int, int))a1[8];
    if (!v7)
    {
      uint64_t v7 = sub_100026CAC;
      a1[8] = sub_100026CAC;
      a1[10] = 0;
    }
    if (!a1[9]) {
      a1[9] = sub_100026CBC;
    }
    uint64_t v8 = (uint64_t)v7(a1[10], 1, 9552);
    if (v8)
    {
      a1[7] = v8;
      int v9 = a2 & 0xF;
      if (a2 >= 0x30) {
        int v9 = a2;
      }
      if (a2 >= 0) {
        int v10 = (a2 >> 4) + 1;
      }
      else {
        int v10 = 0;
      }
      if (a2 < 0) {
        int v11 = -a2;
      }
      else {
        int v11 = v9;
      }
      *(_DWORD *)(v8 + 8) = v10;
      if ((v11 - 16) <= 0xFFFFFFF7)
      {
        ((void (*)(void, uint64_t))a1[9])(a1[10], v8);
        a1[7] = 0;
        return 4294967294;
      }
      *(_DWORD *)(v8 + 48) = v11;
      *(void *)(v8 + 64) = 0;
      return sub_10001A08C(a1);
    }
    else
    {
      return 4294967292;
    }
  }
  return result;
}

uint64_t sub_10001A204(unsigned __int8 **a1, unint64_t a2)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v2 = (uint64_t)a1;
  BOOL v3 = a1[7];
  if (!v3) {
    return 4294967294;
  }
  uint64_t v4 = a1[3];
  if (!v4) {
    return 4294967294;
  }
  uint64_t v6 = *a1;
  if (!*a1)
  {
    if (*((_DWORD *)a1 + 2)) {
      return 4294967294;
    }
  }
  if (*(_DWORD *)v3 == 11) {
    *(_DWORD *)BOOL v3 = 12;
  }
  unint64_t v7 = *((unsigned int *)a1 + 8);
  unint64_t v8 = *((void *)v3 + 9);
  int v9 = (_WORD **)(v3 + 136);
  v220 = (unsigned int *)(v3 + 112);
  v221 = v3 + 1360;
  int v10 = (unsigned __int16 *)(v3 + 144);
  unint64_t v11 = *((unsigned int *)v3 + 20);
  v219 = v3 + 784;
  unsigned int v228 = *((_DWORD *)a1 + 2);
  unsigned int v229 = 0;
  unint64_t v12 = v228;
  unint64_t v13 = v7;
  unsigned int v230 = a2;
LABEL_8:
  while (2)
  {
    int v14 = -3;
    unsigned int v15 = 1;
    switch(word_100045260)
    {
      case 0u:
        int v16 = *((_DWORD *)v3 + 2);
        if (!v16)
        {
          int v34 = 12;
          goto LABEL_357;
        }
        if (v11 <= 0xF)
        {
          uint64_t v17 = 0;
          do
          {
            if (!v12) {
              goto LABEL_368;
            }
            unint64_t v12 = (v12 - 1);
            unsigned int v18 = *v6++;
            v8 += (unint64_t)v18 << (v11 + v17);
            v17 += 8;
          }
          while ((unint64_t)v11 + v17 - 8 < 8);
          unint64_t v11 = (v11 + v17);
        }
        if ((v16 & 2) != 0 && v8 == 35615)
        {
          uint64_t v19 = sub_10001BB48(0, 0, 0);
          *((void *)v3 + 3) = v19;
          LOWORD(v231) = -29921;
          uint64_t v20 = sub_10001BB48(v19, &v231, 2u);
          int v10 = (unsigned __int16 *)(v3 + 144);
          int v9 = (_WORD **)(v3 + 136);
          unint64_t v8 = 0;
          unint64_t v11 = 0;
          *((void *)v3 + 3) = v20;
          int v21 = 1;
        }
        else
        {
          *((_DWORD *)v3 + 4) = 0;
          uint64_t v126 = *((void *)v3 + 5);
          if (v126) {
            *(_DWORD *)(v126 + 72) = -1;
          }
          if ((v16 & 1) != 0
            && 0xEF7BDEF7BDEF7BDFLL * (((unint64_t)v8 << 8) + (v8 >> 8)) < 0x842108421084211)
          {
            a2 = v230;
            if ((v8 & 0xF) == 8)
            {
              int v207 = v8 >> 4;
              if ((v207 + 8) <= *((_DWORD *)v3 + 12))
              {
                *((_DWORD *)v3 + 5) = 256 << v207;
                uint64_t v208 = sub_100010FE4(0, 0, 0);
                int v10 = (unsigned __int16 *)(v3 + 144);
                int v9 = (_WORD **)(v3 + 136);
                unint64_t v11 = 0;
                *((void *)v3 + 3) = v208;
                *(void *)(v2 + 96) = v208;
                if ((v8 & 0x2000) != 0) {
                  int v209 = 9;
                }
                else {
                  int v209 = 11;
                }
                *(_DWORD *)BOOL v3 = v209;
                unint64_t v8 = 0;
                continue;
              }
              v8 >>= 4;
              unint64_t v11 = (v11 - 4);
              int v24 = "invalid window size";
            }
            else
            {
LABEL_355:
              int v24 = "unknown compression method";
            }
            goto LABEL_356;
          }
          *(void *)(v2 + 48) = "incorrect header check";
          int v21 = 27;
        }
        *(_DWORD *)BOOL v3 = v21;
        a2 = v230;
        continue;
      case 1u:
        if (v11 > 0xF) {
          goto LABEL_23;
        }
        uint64_t v22 = 0;
        do
        {
          if (!v12) {
            goto LABEL_370;
          }
          unint64_t v12 = (v12 - 1);
          unsigned int v23 = *v6++;
          v8 += (unint64_t)v23 << (v11 + v22);
          v22 += 8;
        }
        while ((unint64_t)v11 + v22 - 8 < 8);
        unint64_t v11 = (v11 + v22);
LABEL_23:
        *((_DWORD *)v3 + 4) = v8;
        if (v8 != 8) {
          goto LABEL_355;
        }
        if ((v8 & 0xE000) != 0)
        {
          int v24 = "unknown header flags set";
          goto LABEL_356;
        }
        int64_t v130 = (unsigned int *)*((void *)v3 + 5);
        if (v130) {
          *int64_t v130 = (v8 >> 8) & 1;
        }
        a2 = v7;
        if ((v8 & 0x200) != 0)
        {
          LOWORD(v231) = v8;
          uint64_t v131 = sub_10001BB48(*((void *)v3 + 3), &v231, 2u);
          int v10 = (unsigned __int16 *)(v3 + 144);
          int v9 = (_WORD **)(v3 + 136);
          *((void *)v3 + 3) = v131;
        }
        LODWORD(v11) = 0;
        unint64_t v8 = 0;
        *(_DWORD *)BOOL v3 = 2;
LABEL_212:
        unint64_t v7 = v11;
        do
        {
          if (!v12) {
            goto LABEL_369;
          }
          unsigned int v132 = *v6++;
          LODWORD(v12) = v12 - 1;
          v8 += (unint64_t)v132 << v7;
          BOOL v168 = v7 >= 0x18;
          v7 += 8;
        }
        while (!v168);
LABEL_216:
        uint64_t v133 = *((void *)v3 + 5);
        if (v133) {
          *(void *)(v133 + 8) = v8;
        }
        if ((v3[17] & 2) != 0)
        {
          int v231 = v8;
          uint64_t v134 = sub_10001BB48(*((void *)v3 + 3), &v231, 4u);
          int v10 = (unsigned __int16 *)(v3 + 144);
          int v9 = (_WORD **)(v3 + 136);
          *((void *)v3 + 3) = v134;
        }
        LODWORD(v11) = 0;
        unint64_t v8 = 0;
        *(_DWORD *)BOOL v3 = 3;
LABEL_221:
        unint64_t v7 = v11;
        do
        {
          if (!v12) {
            goto LABEL_369;
          }
          unsigned int v135 = *v6++;
          unint64_t v12 = (v12 - 1);
          v8 += (unint64_t)v135 << v7;
          BOOL v168 = v7 >= 8;
          v7 += 8;
        }
        while (!v168);
LABEL_225:
        uint64_t v136 = *((void *)v3 + 5);
        if (v136)
        {
          *(_DWORD *)(v136 + 16) = v8;
          *(_DWORD *)(v136 + 20) = v8 >> 8;
        }
        if ((v3[17] & 2) != 0)
        {
          LOWORD(v231) = v8;
          uint64_t v137 = sub_10001BB48(*((void *)v3 + 3), &v231, 2u);
          int v10 = (unsigned __int16 *)(v3 + 144);
          int v9 = (_WORD **)(v3 + 136);
          *((void *)v3 + 3) = v137;
        }
        unint64_t v8 = 0;
        LODWORD(v11) = 0;
        unint64_t v26 = 0;
        *(_DWORD *)BOOL v3 = 4;
        int v25 = *((_DWORD *)v3 + 4);
        unint64_t v7 = a2;
        a2 = v230;
        if ((v25 & 0x400) == 0) {
          goto LABEL_230;
        }
        goto LABEL_232;
      case 2u:
        a2 = v7;
        if (v11 > 0x1F) {
          goto LABEL_216;
        }
        goto LABEL_212;
      case 3u:
        a2 = v7;
        if (v11 > 0xF) {
          goto LABEL_225;
        }
        goto LABEL_221;
      case 4u:
        int v25 = *((_DWORD *)v3 + 4);
        if ((v25 & 0x400) != 0)
        {
          if (v11 <= 0xF)
          {
LABEL_232:
            unint64_t v139 = v7;
            unint64_t v7 = v11;
            while (v12)
            {
              unsigned int v140 = *v6++;
              unint64_t v12 = (v12 - 1);
              v8 += (unint64_t)v140 << v7;
              BOOL v168 = v7 >= 8;
              v7 += 8;
              if (v168)
              {
                unint64_t v7 = v139;
                goto LABEL_237;
              }
            }
            LODWORD(v11) = v7;
            unsigned int v15 = v229;
            LODWORD(v7) = v139;
            goto LABEL_377;
          }
LABEL_237:
          *((_DWORD *)v3 + 21) = v8;
          uint64_t v141 = *((void *)v3 + 5);
          if (v141) {
            *(_DWORD *)(v141 + 32) = v8;
          }
          if ((v25 & 0x200) != 0)
          {
            LOWORD(v231) = v8;
            uint64_t v142 = sub_10001BB48(*((void *)v3 + 3), &v231, 2u);
            int v10 = (unsigned __int16 *)(v3 + 144);
            int v9 = (_WORD **)(v3 + 136);
            unint64_t v8 = 0;
            unint64_t v26 = 0;
            *((void *)v3 + 3) = v142;
          }
          else
          {
            unint64_t v8 = 0;
            unint64_t v26 = 0;
          }
        }
        else
        {
          unint64_t v26 = v11;
LABEL_230:
          uint64_t v138 = *((void *)v3 + 5);
          if (v138) {
            *(void *)(v138 + 24) = 0;
          }
        }
        *(_DWORD *)BOOL v3 = 5;
        unint64_t v11 = v26;
LABEL_243:
        int v143 = *((_DWORD *)v3 + 4);
        if ((v143 & 0x400) != 0)
        {
          unsigned int v144 = *((_DWORD *)v3 + 21);
          if (v144 >= v12) {
            unsigned int v145 = v12;
          }
          else {
            unsigned int v145 = *((_DWORD *)v3 + 21);
          }
          if (v145)
          {
            uint64_t v146 = *((void *)v3 + 5);
            if (v146)
            {
              uint64_t v147 = *(void *)(v146 + 24);
              if (v147)
              {
                int v148 = *(_DWORD *)(v146 + 32);
                unsigned int v149 = *(_DWORD *)(v146 + 36);
                uint64_t v150 = v148 - v144;
                uint64_t v151 = (void *)(v147 + v150);
                unsigned int v152 = v150 + v145;
                unsigned int v153 = v149 - v150;
                if (v152 <= v149) {
                  size_t v154 = v145;
                }
                else {
                  size_t v154 = v153;
                }
                unsigned int v225 = v7;
                unint64_t v155 = a2;
                unint64_t v156 = v13;
                unint64_t v157 = v11;
                memcpy(v151, v6, v154);
                unint64_t v11 = v157;
                unint64_t v13 = v156;
                a2 = v155;
                unint64_t v7 = v225;
                int v10 = (unsigned __int16 *)(v3 + 144);
                int v9 = (_WORD **)(v3 + 136);
                int v143 = *((_DWORD *)v3 + 4);
              }
            }
            if ((v143 & 0x200) != 0)
            {
              unsigned int v226 = v7;
              unint64_t v158 = a2;
              unint64_t v159 = v13;
              unint64_t v160 = v11;
              uint64_t v161 = sub_10001BB48(*((void *)v3 + 3), (int *)v6, v145);
              unint64_t v11 = v160;
              unint64_t v13 = v159;
              a2 = v158;
              unint64_t v7 = v226;
              int v10 = (unsigned __int16 *)(v3 + 144);
              int v9 = (_WORD **)(v3 + 136);
              *((void *)v3 + 3) = v161;
            }
            unint64_t v12 = v12 - v145;
            v6 += v145;
            unsigned int v144 = *((_DWORD *)v3 + 21) - v145;
            *((_DWORD *)v3 + 21) = v144;
          }
          if (v144) {
            goto LABEL_376;
          }
        }
        *((_DWORD *)v3 + 21) = 0;
        *(_DWORD *)BOOL v3 = 6;
LABEL_259:
        if ((v3[17] & 8) != 0)
        {
          if (!v12) {
            goto LABEL_376;
          }
          unsigned int v222 = v13;
          unsigned int v227 = v7;
          unint64_t v163 = 0;
          do
          {
            int v164 = v6[v163];
            uint64_t v165 = *((void *)v3 + 5);
            if (v165)
            {
              uint64_t v166 = *(void *)(v165 + 40);
              if (v166)
              {
                uint64_t v167 = *((unsigned int *)v3 + 21);
                if (v167 < *(_DWORD *)(v165 + 48))
                {
                  *((_DWORD *)v3 + 21) = v167 + 1;
                  *(unsigned char *)(v166 + v167) = v164;
                }
              }
            }
            ++v163;
            if (v164) {
              BOOL v168 = v163 >= v12;
            }
            else {
              BOOL v168 = 1;
            }
          }
          while (!v168);
          if ((v3[17] & 2) != 0)
          {
            unint64_t v169 = v11;
            uint64_t v170 = sub_10001BB48(*((void *)v3 + 3), (int *)v6, v163);
            unint64_t v11 = v169;
            int v10 = (unsigned __int16 *)(v3 + 144);
            int v9 = (_WORD **)(v3 + 136);
            *((void *)v3 + 3) = v170;
          }
          v6 += v163;
          if (v164) {
            goto LABEL_404;
          }
          unint64_t v12 = v12 - v163;
          a2 = v230;
          unint64_t v13 = v222;
          unint64_t v7 = v227;
        }
        else
        {
          uint64_t v162 = *((void *)v3 + 5);
          if (v162) {
            *(void *)(v162 + 40) = 0;
          }
        }
        *((_DWORD *)v3 + 21) = 0;
        *(_DWORD *)BOOL v3 = 7;
LABEL_278:
        if ((v3[17] & 0x10) == 0)
        {
          uint64_t v171 = *((void *)v3 + 5);
          if (v171) {
            *(void *)(v171 + 56) = 0;
          }
          goto LABEL_296;
        }
        if (v12)
        {
          unsigned int v222 = v13;
          unsigned int v227 = v7;
          unint64_t v163 = 0;
          do
          {
            int v172 = v6[v163];
            uint64_t v173 = *((void *)v3 + 5);
            if (v173)
            {
              uint64_t v174 = *(void *)(v173 + 56);
              if (v174)
              {
                uint64_t v175 = *((unsigned int *)v3 + 21);
                if (v175 < *(_DWORD *)(v173 + 64))
                {
                  *((_DWORD *)v3 + 21) = v175 + 1;
                  *(unsigned char *)(v174 + v175) = v172;
                }
              }
            }
            ++v163;
            if (v172) {
              BOOL v176 = v163 >= v12;
            }
            else {
              BOOL v176 = 1;
            }
          }
          while (!v176);
          if ((v3[17] & 2) != 0)
          {
            unint64_t v177 = v11;
            uint64_t v178 = sub_10001BB48(*((void *)v3 + 3), (int *)v6, v163);
            unint64_t v11 = v177;
            int v10 = (unsigned __int16 *)(v3 + 144);
            int v9 = (_WORD **)(v3 + 136);
            *((void *)v3 + 3) = v178;
          }
          v6 += v163;
          if (!v172)
          {
            unint64_t v12 = v12 - v163;
            a2 = v230;
            unint64_t v13 = v222;
            unint64_t v7 = v227;
LABEL_296:
            *(_DWORD *)BOOL v3 = 8;
LABEL_297:
            unsigned int v179 = *((_DWORD *)v3 + 4);
            if ((v179 & 0x200) != 0)
            {
              if (v11 <= 0xF)
              {
                uint64_t v17 = 0;
                do
                {
                  if (!v12) {
                    goto LABEL_368;
                  }
                  unint64_t v12 = (v12 - 1);
                  unsigned int v181 = *v6++;
                  v8 += (unint64_t)v181 << (v11 + v17);
                  v17 += 8;
                }
                while ((unint64_t)v11 + v17 - 8 < 8);
                unint64_t v11 = (v11 + v17);
              }
              if (v8 != *((unsigned __int16 *)v3 + 12))
              {
                int v24 = "header crc mismatch";
                goto LABEL_356;
              }
              unint64_t v180 = v13;
              unint64_t v8 = 0;
              unint64_t v11 = 0;
            }
            else
            {
              unint64_t v180 = v13;
            }
            unint64_t v182 = v11;
            uint64_t v183 = *((void *)v3 + 5);
            if (v183)
            {
              *(_DWORD *)(v183 + 68) = (v179 >> 9) & 1;
              *(_DWORD *)(v183 + 72) = 1;
            }
            uint64_t v184 = sub_10001BB48(0, 0, 0);
            *((void *)v3 + 3) = v184;
            *(void *)(v2 + 96) = v184;
            *(_DWORD *)BOOL v3 = 11;
            int v10 = (unsigned __int16 *)(v3 + 144);
            int v9 = (_WORD **)(v3 + 136);
            unint64_t v11 = v182;
            unint64_t v13 = v180;
            continue;
          }
LABEL_404:
          LODWORD(v12) = v12 - v163;
          unsigned int v15 = v229;
          LODWORD(a2) = v230;
          LODWORD(v13) = v222;
          LODWORD(v7) = v227;
          goto LABEL_377;
        }
        goto LABEL_376;
      case 5u:
        goto LABEL_243;
      case 6u:
        goto LABEL_259;
      case 7u:
        goto LABEL_278;
      case 8u:
        goto LABEL_297;
      case 9u:
        unint64_t v27 = v7;
        if (v11 > 0x1F) {
          goto LABEL_37;
        }
        unint64_t v7 = v11;
        do
        {
          if (!v12)
          {
            LODWORD(v11) = v7;
            unsigned int v15 = v229;
            LODWORD(v7) = v27;
            goto LABEL_377;
          }
          unsigned int v28 = *v6++;
          unint64_t v12 = (v12 - 1);
          v8 += (unint64_t)v28 << v7;
          BOOL v168 = v7 >= 0x18;
          v7 += 8;
        }
        while (!v168);
LABEL_37:
        LODWORD(v11) = 0;
        uint64_t v29 = bswap32(v8);
        *((void *)v3 + 3) = v29;
        *(void *)(v2 + 96) = v29;
        *(_DWORD *)BOOL v3 = 10;
        unint64_t v8 = 0;
        unint64_t v7 = v27;
LABEL_38:
        if (!*((_DWORD *)v3 + 3))
        {
          *(void *)(v2 + 24) = v4;
          *(_DWORD *)(v2 + 32) = v7;
          *(void *)uint64_t v2 = v6;
          *(_DWORD *)(v2 + 8) = v12;
          *((void *)v3 + 9) = v8;
          uint64_t result = 2;
          *((_DWORD *)v3 + 20) = v11;
          return result;
        }
        unint64_t v30 = a2;
        unint64_t v31 = v13;
        int v32 = v11;
        uint64_t v33 = sub_100010FE4(0, 0, 0);
        LODWORD(v11) = v32;
        unint64_t v13 = v31;
        a2 = v30;
        int v10 = (unsigned __int16 *)(v3 + 144);
        int v9 = (_WORD **)(v3 + 136);
        *((void *)v3 + 3) = v33;
        *(void *)(v2 + 96) = v33;
        *(_DWORD *)BOOL v3 = 11;
LABEL_40:
        if (a2 != 5)
        {
LABEL_41:
          if (*((_DWORD *)v3 + 1))
          {
            v8 >>= v11 & 7;
            unint64_t v11 = v11 & 0xFFFFFFF8;
            int v34 = 24;
            goto LABEL_357;
          }
          if (v11 >= 3)
          {
LABEL_46:
            *((_DWORD *)v3 + 1) = v8 & 1;
            int v36 = 13;
            switch((v8 >> 1) & 3)
            {
              case 1u:
                *((void *)v3 + 12) = &unk_100045286;
                *((void *)v3 + 13) = &unk_100045A86;
                *((void *)v3 + 14) = 0x500000009;
                int v36 = 18;
                break;
              case 2u:
                int v36 = 15;
                break;
              case 3u:
                *(void *)(v2 + 48) = "invalid block type";
                int v36 = 27;
                break;
              default:
                break;
            }
            *(_DWORD *)BOOL v3 = v36;
            v8 >>= 3;
            unint64_t v11 = (v11 - 3);
            continue;
          }
          if (v12)
          {
            unint64_t v12 = (v12 - 1);
            unsigned int v35 = *v6++;
            v8 += (unint64_t)v35 << v11;
            LODWORD(v11) = v11 + 8;
            goto LABEL_46;
          }
          int v14 = v229;
LABEL_409:
          unsigned int v15 = v14;
          goto LABEL_377;
        }
        goto LABEL_376;
      case 0xAu:
        goto LABEL_38;
      case 0xBu:
        goto LABEL_40;
      case 0xCu:
        goto LABEL_41;
      case 0xDu:
        v8 >>= v11 & 7;
        uint64_t v37 = v11 & 0xFFFFFFF8;
        if (v37 <= 0x1F)
        {
          uint64_t v38 = 0;
          while (v12)
          {
            unint64_t v12 = (v12 - 1);
            unsigned int v39 = *v6++;
            v8 += (unint64_t)v39 << ((v11 & 0xF8u) + v38);
            v38 += 8;
            if ((unint64_t)(v37 + v38 - 8) >= 0x18)
            {
              unint64_t v11 = (v37 + v38);
              goto LABEL_103;
            }
          }
          LODWORD(v11) = (v11 & 0xFFFFFFF8) + v38;
          goto LABEL_376;
        }
        unint64_t v11 = v11 & 0xFFFFFFF8;
LABEL_103:
        if (((v8 >> 16) ^ 0xFFFF) != (unsigned __int16)v8)
        {
          int v24 = "invalid stored block lengths";
          goto LABEL_356;
        }
        unint64_t v11 = 0;
        unsigned int v40 = (unsigned __int16)v8;
        *((_DWORD *)v3 + 21) = (unsigned __int16)v8;
        *(_DWORD *)BOOL v3 = 14;
        unint64_t v8 = 0;
        if (!v40) {
          goto LABEL_331;
        }
LABEL_105:
        if (v40 >= v12) {
          unsigned int v40 = v12;
        }
        if (v40 >= v7) {
          size_t v66 = v7;
        }
        else {
          size_t v66 = v40;
        }
        if (v66)
        {
          uint64_t v223 = v2;
          int v67 = v7;
          unint64_t v68 = a2;
          unint64_t v69 = v13;
          unint64_t v70 = v11;
          memcpy(v4, v6, v66);
          unint64_t v11 = v70;
          unint64_t v13 = v69;
          a2 = v68;
          LODWORD(v68) = v67;
          uint64_t v2 = v223;
          int v10 = (unsigned __int16 *)(v3 + 144);
          int v9 = (_WORD **)(v3 + 136);
          unint64_t v12 = (v12 - v66);
          v6 += v66;
          unint64_t v7 = (v68 - v66);
          v4 += v66;
          *((_DWORD *)v3 + 21) -= v66;
          continue;
        }
        goto LABEL_376;
      case 0xEu:
        unsigned int v40 = *((_DWORD *)v3 + 21);
        if (!v40) {
          goto LABEL_331;
        }
        goto LABEL_105;
      case 0xFu:
        if (v11 > 0xD) {
          goto LABEL_60;
        }
        uint64_t v17 = 0;
        do
        {
          if (!v12)
          {
LABEL_368:
            LODWORD(v11) = v11 + v17;
            goto LABEL_376;
          }
          unint64_t v12 = (v12 - 1);
          unsigned int v41 = *v6++;
          v8 += (unint64_t)v41 << (v11 + v17);
          v17 += 8;
        }
        while ((unint64_t)v11 + v17 - 8 < 6);
        LODWORD(v11) = v11 + v17;
LABEL_60:
        unint64_t v42 = v8 & 0x1F;
        unint64_t v43 = (v8 >> 5) & 0x1F;
        *((_DWORD *)v3 + 31) = (v8 & 0x1F) + 257;
        *((_DWORD *)v3 + 32) = v43 + 1;
        unint64_t v44 = ((v8 >> 10) & 0xF) + 4;
        *((_DWORD *)v3 + 30) = v44;
        v8 >>= 14;
        unint64_t v11 = (v11 - 14);
        if (v42 > 0x1D || v43 >= 0x1E)
        {
          int v24 = "too many length or distance symbols";
          goto LABEL_356;
        }
        a2 = v7;
        unint64_t v45 = 0;
        *((_DWORD *)v3 + 33) = 0;
        *(_DWORD *)BOOL v3 = 16;
LABEL_64:
        LODWORD(v7) = v11;
        while (2)
        {
          if (v7 > 2)
          {
LABEL_68:
            uint64_t v47 = word_100045260[v45];
            *((_DWORD *)v3 + 33) = v45 + 1;
            *(_WORD *)&v3[2 * v47 + 144] = v8 & 7;
            v8 >>= 3;
            unint64_t v7 = (v7 - 3);
            if (v44 != ++v45) {
              continue;
            }
            unint64_t v11 = v7;
            unint64_t v45 = v44;
LABEL_70:
            unint64_t v48 = v11;
            if (v45 <= 0x12)
            {
              do
                *(_WORD *)&v3[2 * word_100045260[v45++] + 144] = 0;
              while (v45 != 19);
              *((_DWORD *)v3 + 33) = 19;
            }
            *((void *)v3 + 17) = v221;
            *((void *)v3 + 12) = v221;
            *((_DWORD *)v3 + 28) = 7;
            unsigned int v49 = sub_100022A90(0, v10, 0x13u, v9, v220, v219);
            unint64_t v7 = a2;
            if (v49)
            {
              unsigned int v229 = v49;
              *(void *)(v2 + 48) = "invalid code lengths set";
              *(_DWORD *)BOOL v3 = 27;
              a2 = v230;
              int v10 = (unsigned __int16 *)(v3 + 144);
              int v9 = (_WORD **)(v3 + 136);
              unint64_t v11 = v48;
              goto LABEL_8;
            }
            unsigned int v50 = 0;
            unsigned int v229 = 0;
            *((_DWORD *)v3 + 33) = 0;
            *(_DWORD *)BOOL v3 = 17;
            a2 = v230;
            int v10 = (unsigned __int16 *)(v3 + 144);
            int v9 = (_WORD **)(v3 + 136);
            unint64_t v11 = v48;
LABEL_113:
            unsigned int v71 = *((_DWORD *)v3 + 31);
            unsigned int v72 = *((_DWORD *)v3 + 32) + v71;
            if (v50 >= v72) {
              goto LABEL_152;
            }
            uint64_t v73 = *((void *)v3 + 12);
            int v74 = ~(-1 << *((_DWORD *)v3 + 28));
            while (2)
            {
              uint64_t v75 = v74 & v8;
              LODWORD(v76) = *(unsigned __int8 *)(v73 + 4 * v75 + 1);
              if (v11 < v76)
              {
                uint64_t v77 = 0;
                LODWORD(v78) = v12;
                int v79 = v6;
                do
                {
                  if (!v78) {
                    goto LABEL_367;
                  }
                  unint64_t v78 = (v78 - 1);
                  unsigned int v80 = *v79++;
                  v8 += (unint64_t)v80 << (v11 + v77);
                  uint64_t v75 = v74 & v8;
                  unint64_t v76 = *(unsigned __int8 *)(v73 + 4 * v75 + 1);
                  v77 += 8;
                }
                while ((unint64_t)v11 + v77 < v76);
                LODWORD(v11) = v11 + v77;
                uint64_t v6 = v79;
                unint64_t v12 = v78;
              }
              unsigned int v81 = *(unsigned __int16 *)(v73 + 4 * v75 + 2);
              if (v81 > 0xF)
              {
                if (v81 != 16)
                {
                  if (v81 == 17)
                  {
                    unint64_t v85 = (v76 + 3);
                    if (v11 < v85)
                    {
                      uint64_t v86 = 0;
                      do
                      {
                        if (!v12) {
                          goto LABEL_375;
                        }
                        unsigned int v87 = *v6++;
                        unint64_t v12 = (v12 - 1);
                        v8 += (unint64_t)v87 << (v11 + v86);
                        v86 += 8;
                      }
                      while ((unint64_t)v11 + v86 < v85);
                      LODWORD(v11) = v11 + v86;
                    }
                    __int16 v88 = 0;
                    int v89 = ((v8 >> v76) & 7) + 3;
                    unint64_t v8 = v8 >> v76 >> 3;
                    unint64_t v11 = (v11 - v76 - 3);
                  }
                  else
                  {
                    unint64_t v92 = (v76 + 7);
                    if (v11 < v92)
                    {
                      uint64_t v86 = 0;
                      do
                      {
                        if (!v12) {
                          goto LABEL_375;
                        }
                        unsigned int v93 = *v6++;
                        unint64_t v12 = (v12 - 1);
                        v8 += (unint64_t)v93 << (v11 + v86);
                        v86 += 8;
                      }
                      while ((unint64_t)v11 + v86 < v92);
                      LODWORD(v11) = v11 + v86;
                    }
                    __int16 v88 = 0;
                    int v89 = ((v8 >> v76) & 0x7F) + 11;
                    unint64_t v8 = v8 >> v76 >> 7;
                    unint64_t v11 = (v11 - v76 - 7);
                  }
LABEL_148:
                  if (v89 + v50 <= v72)
                  {
                    do
                    {
                      uint64_t v94 = &v3[2 * v50++];
                      *((_WORD *)v94 + 72) = v88;
                      --v89;
                    }
                    while (v89);
                    *((_DWORD *)v3 + 33) = v50;
                    goto LABEL_151;
                  }
                  goto LABEL_359;
                }
                unint64_t v90 = (v76 + 2);
                if (v11 >= v90) {
                  goto LABEL_140;
                }
                uint64_t v86 = 0;
                while (v12)
                {
                  unsigned int v91 = *v6++;
                  unint64_t v12 = (v12 - 1);
                  v8 += (unint64_t)v91 << (v11 + v86);
                  v86 += 8;
                  if ((unint64_t)v11 + v86 >= v90)
                  {
                    LODWORD(v11) = v11 + v86;
LABEL_140:
                    v8 >>= v76;
                    unint64_t v11 = (v11 - v76);
                    if (v50)
                    {
                      __int16 v88 = *(_WORD *)&v3[2 * v50 + 142];
                      int v89 = (v8 & 3) + 3;
                      v8 >>= 2;
                      unint64_t v11 = (v11 - 2);
                      goto LABEL_148;
                    }
LABEL_359:
                    int v24 = "invalid bit length repeat";
LABEL_356:
                    *(void *)(v2 + 48) = v24;
                    int v34 = 27;
LABEL_357:
                    *(_DWORD *)BOOL v3 = v34;
                    goto LABEL_8;
                  }
                }
LABEL_375:
                LODWORD(v11) = v11 + v86;
                goto LABEL_376;
              }
              if (v11 >= v76) {
                goto LABEL_126;
              }
              uint64_t v82 = 0;
              while (2)
              {
                if (!v12)
                {
                  LODWORD(v11) = v11 + v82;
                  goto LABEL_376;
                }
                unsigned int v83 = *v6++;
                unint64_t v12 = (v12 - 1);
                v8 += (unint64_t)v83 << (v11 + v82);
                v82 += 8;
                if ((unint64_t)v11 + v82 < v76) {
                  continue;
                }
                break;
              }
              LODWORD(v11) = v11 + v82;
LABEL_126:
              v8 >>= v76;
              unint64_t v11 = (v11 - v76);
              uint64_t v84 = &v3[2 * v50++];
              *((_DWORD *)v3 + 33) = v50;
              *((_WORD *)v84 + 72) = v81;
LABEL_151:
              if (v50 < v72) {
                continue;
              }
              break;
            }
LABEL_152:
            unint64_t v224 = v11;
            *((void *)v3 + 17) = v221;
            *((void *)v3 + 12) = v221;
            *((_DWORD *)v3 + 28) = 9;
            uint64_t v95 = v9;
            uint64_t v96 = v10;
            unsigned int v97 = sub_100022A90(1, v10, v71, v9, v220, v219);
            if (v97)
            {
              unsigned int v229 = v97;
              *(void *)(v2 + 48) = "invalid literal/lengths set";
              *(_DWORD *)BOOL v3 = 27;
              int v9 = v95;
              int v10 = v96;
              goto LABEL_198;
            }
            *((void *)v3 + 13) = *((void *)v3 + 17);
            *((_DWORD *)v3 + 29) = 6;
            unsigned int v125 = sub_100022A90(2, &v96[*((unsigned int *)v3 + 31)], *((_DWORD *)v3 + 32), v95, (unsigned int *)v3 + 29, v219);
            if (!v125)
            {
              unsigned int v229 = 0;
              *(_DWORD *)BOOL v3 = 18;
              int v10 = (unsigned __int16 *)(v3 + 144);
              int v9 = (_WORD **)(v3 + 136);
              a2 = v230;
              LODWORD(v11) = v224;
              unint64_t v13 = v13;
LABEL_311:
              if (v12 >= 6 && v7 > 0x101)
              {
                *(void *)(v2 + 24) = v4;
                *(_DWORD *)(v2 + 32) = v7;
                *(void *)uint64_t v2 = v6;
                *(_DWORD *)(v2 + 8) = v12;
                *((void *)v3 + 9) = v8;
                *((_DWORD *)v3 + 20) = v11;
                sub_1000267E4(v2, v13);
                int v10 = (unsigned __int16 *)(v3 + 144);
                int v9 = (_WORD **)(v3 + 136);
                uint64_t v4 = *(unsigned __int8 **)(v2 + 24);
                unint64_t v7 = *(unsigned int *)(v2 + 32);
                uint64_t v6 = *(unsigned __int8 **)v2;
                unint64_t v12 = *(unsigned int *)(v2 + 8);
                unint64_t v8 = *((void *)v3 + 9);
                unint64_t v11 = *((unsigned int *)v3 + 20);
                goto LABEL_8;
              }
              uint64_t v185 = *((void *)v3 + 12);
              int v186 = -1 << *((_DWORD *)v3 + 28);
              int v187 = (unsigned __int8 *)(v185 + 4 * (v8 & ~v186));
              LODWORD(v188) = v187[1];
              if (v11 < v188)
              {
                uint64_t v189 = 0;
                int v190 = ~v186;
                LODWORD(v191) = v12;
                __int16 v192 = v6;
                do
                {
                  if (!v191) {
                    goto LABEL_367;
                  }
                  unint64_t v191 = (v191 - 1);
                  unsigned int v193 = *v192++;
                  v8 += (unint64_t)v193 << (v11 + v189);
                  int v187 = (unsigned __int8 *)(v185 + 4 * (v190 & v8));
                  unint64_t v188 = v187[1];
                  v189 += 8;
                }
                while ((unint64_t)v11 + v189 < v188);
                LODWORD(v11) = v11 + v189;
                uint64_t v6 = v192;
                unint64_t v12 = v191;
              }
              int v194 = *((unsigned __int16 *)v187 + 1);
              int v195 = *v187;
              if ((v195 - 1) <= 0xE)
              {
                int v196 = -1 << (v188 + v195);
                v197 = (unsigned __int8 *)(v185 + 4 * (((v8 & ~v196) >> v188) + v194));
                int v198 = v197[1];
                if ((int)v188 + v198 > v11)
                {
                  uint64_t v199 = 0;
                  int v200 = ~v196;
                  LODWORD(v201) = v12;
                  uint64_t v202 = v6;
                  do
                  {
                    if (!v201) {
                      goto LABEL_367;
                    }
                    unsigned int v203 = *v202++;
                    unint64_t v201 = (v201 - 1);
                    v8 += (unint64_t)v203 << (v11 + v199);
                    v197 = (unsigned __int8 *)(v185 + 4 * (((v8 & v200) >> v188) + v194));
                    int v198 = v197[1];
                    v199 += 8;
                  }
                  while ((unint64_t)v11 + v199 < (v188 + v198));
                  LODWORD(v11) = v11 + v199;
                  uint64_t v6 = v202;
                  unint64_t v12 = v201;
                }
                int v194 = *((unsigned __int16 *)v197 + 1);
                int v195 = *v197;
                v8 >>= v188;
                LODWORD(v11) = v11 - v188;
                LODWORD(v188) = v198;
              }
              v8 >>= v188;
              unint64_t v11 = (v11 - v188);
              *((_DWORD *)v3 + 21) = v194;
              if (!v195)
              {
                int v34 = 23;
                goto LABEL_357;
              }
              if ((v195 & 0x20) != 0)
              {
LABEL_331:
                int v34 = 11;
                goto LABEL_357;
              }
              if ((v195 & 0x40) != 0)
              {
                int v24 = "invalid literal/length code";
                goto LABEL_356;
              }
              unsigned int v51 = v195 & 0xF;
              *((_DWORD *)v3 + 23) = v51;
              *(_DWORD *)BOOL v3 = 19;
              if ((v195 & 0xF) != 0)
              {
LABEL_77:
                if (v11 >= v51)
                {
                  uint64_t v54 = v6;
                  unint64_t v53 = v12;
                  unsigned int v52 = v11;
LABEL_161:
                  *((_DWORD *)v3 + 21) += v8 & ~(-1 << v51);
                  v8 >>= v51;
                  LODWORD(v11) = v52 - v51;
                  uint64_t v6 = v54;
                  unint64_t v12 = v53;
                  goto LABEL_162;
                }
                unsigned int v52 = v11;
                LODWORD(v53) = v12;
                uint64_t v54 = v6;
                while (v53)
                {
                  unint64_t v53 = (v53 - 1);
                  unsigned int v55 = *v54++;
                  v8 += (unint64_t)v55 << v52;
                  v52 += 8;
                  if (v52 >= v51) {
                    goto LABEL_161;
                  }
                }
              }
              else
              {
LABEL_162:
                *(_DWORD *)BOOL v3 = 20;
LABEL_163:
                uint64_t v98 = *((void *)v3 + 13);
                int v99 = -1 << *((_DWORD *)v3 + 29);
                uint64_t v100 = (unsigned __int8 *)(v98 + 4 * (v8 & ~v99));
                LODWORD(v101) = v100[1];
                if (v11 < v101)
                {
                  uint64_t v102 = 0;
                  int v103 = ~v99;
                  LODWORD(v104) = v12;
                  int v105 = v6;
                  do
                  {
                    if (!v104) {
                      goto LABEL_367;
                    }
                    unint64_t v104 = (v104 - 1);
                    unsigned int v106 = *v105++;
                    v8 += (unint64_t)v106 << (v11 + v102);
                    uint64_t v100 = (unsigned __int8 *)(v98 + 4 * (v103 & v8));
                    unint64_t v101 = v100[1];
                    v102 += 8;
                  }
                  while ((unint64_t)v11 + v102 < v101);
                  LODWORD(v11) = v11 + v102;
                  uint64_t v6 = v105;
                  unint64_t v12 = v104;
                }
                int v107 = *((unsigned __int16 *)v100 + 1);
                LODWORD(v108) = *v100;
                if (v108 <= 0xF)
                {
                  int v109 = -1 << (v101 + v108);
                  uint64_t v108 = v98 + 4 * (((v8 & ~v109) >> v101) + v107);
                  int v110 = *(unsigned __int8 *)(v108 + 1);
                  if ((int)v101 + v110 > v11)
                  {
                    uint64_t v111 = 0;
                    int v112 = ~v109;
                    LODWORD(v113) = v12;
                    uint64_t v114 = v6;
                    do
                    {
                      if (!v113) {
                        goto LABEL_367;
                      }
                      unsigned int v115 = *v114++;
                      unint64_t v113 = (v113 - 1);
                      v8 += (unint64_t)v115 << (v11 + v111);
                      uint64_t v108 = v98 + 4 * (((v8 & v112) >> v101) + v107);
                      int v110 = *(unsigned __int8 *)(v108 + 1);
                      v111 += 8;
                    }
                    while ((unint64_t)v11 + v111 < (v101 + v110));
                    LODWORD(v11) = v11 + v111;
                    uint64_t v6 = v114;
                    unint64_t v12 = v113;
                  }
                  int v107 = *(unsigned __int16 *)(v108 + 2);
                  LOBYTE(v108) = *(unsigned char *)v108;
                  v8 >>= v101;
                  LODWORD(v11) = v11 - v101;
                  LODWORD(v101) = v110;
                }
                v8 >>= v101;
                unint64_t v11 = (v11 - v101);
                if ((v108 & 0x40) != 0)
                {
                  int v24 = "invalid distance code";
                  goto LABEL_356;
                }
                unsigned int v56 = v108 & 0xF;
                *((_DWORD *)v3 + 22) = v107;
                *((_DWORD *)v3 + 23) = v56;
                *(_DWORD *)BOOL v3 = 21;
                if ((v108 & 0xF) == 0)
                {
LABEL_177:
                  unsigned int v65 = *((_DWORD *)v3 + 22);
LABEL_178:
                  if (v65 > (int)v13 - (int)v7 + *((_DWORD *)v3 + 14))
                  {
                    int v24 = "invalid distance too far back";
                    goto LABEL_356;
                  }
                  *(_DWORD *)BOOL v3 = 22;
LABEL_181:
                  if (v7)
                  {
                    uint64_t v116 = *((unsigned int *)v3 + 22);
                    if (v116 <= (int)v13 - (int)v7)
                    {
                      uint64_t v121 = &v4[-v116];
                      unsigned int v122 = *((_DWORD *)v3 + 21);
                      unsigned int v119 = v122;
                    }
                    else
                    {
                      unsigned int v117 = v116 - (v13 - v7);
                      unsigned int v118 = *((_DWORD *)v3 + 15);
                      unsigned int v119 = v117 - v118;
                      if (v117 <= v118)
                      {
                        unsigned int v120 = v118 - v117;
                        unsigned int v119 = v117;
                      }
                      else
                      {
                        unsigned int v120 = *((_DWORD *)v3 + 13) - v119;
                      }
                      uint64_t v121 = (unsigned __int8 *)(*((void *)v3 + 8) + v120);
                      unsigned int v122 = *((_DWORD *)v3 + 21);
                      if (v119 >= v122) {
                        unsigned int v119 = *((_DWORD *)v3 + 21);
                      }
                    }
                    if (v119 >= v7) {
                      unsigned int v119 = v7;
                    }
                    *((_DWORD *)v3 + 21) = v122 - v119;
                    unsigned int v123 = v119;
                    do
                    {
                      unsigned __int8 v124 = *v121++;
                      *v4++ = v124;
                      --v123;
                    }
                    while (v123);
                    unint64_t v7 = v7 - v119;
                    if (*((_DWORD *)v3 + 21)) {
                      goto LABEL_8;
                    }
LABEL_195:
                    int v34 = 18;
                    goto LABEL_357;
                  }
LABEL_376:
                  unsigned int v15 = v229;
                  goto LABEL_377;
                }
LABEL_83:
                if (v11 >= v56)
                {
                  size_t v59 = v6;
                  unint64_t v58 = v12;
                  unsigned int v57 = v11;
LABEL_99:
                  unsigned int v65 = *((_DWORD *)v3 + 22) + (v8 & ~(-1 << v56));
                  *((_DWORD *)v3 + 22) = v65;
                  v8 >>= v56;
                  unint64_t v11 = v57 - v56;
                  uint64_t v6 = v59;
                  unint64_t v12 = v58;
                  goto LABEL_178;
                }
                unsigned int v57 = v11;
                LODWORD(v58) = v12;
                size_t v59 = v6;
                while (v58)
                {
                  unint64_t v58 = (v58 - 1);
                  unsigned int v60 = *v59++;
                  v8 += (unint64_t)v60 << v57;
                  v57 += 8;
                  if (v57 >= v56) {
                    goto LABEL_99;
                  }
                }
              }
LABEL_367:
              LODWORD(v11) = v11 + 8 * v12;
              unsigned int v15 = v229;
              v6 += v12;
              LODWORD(v12) = 0;
              goto LABEL_377;
            }
            unsigned int v229 = v125;
            *(void *)(v2 + 48) = "invalid distances set";
            *(_DWORD *)BOOL v3 = 27;
            int v10 = (unsigned __int16 *)(v3 + 144);
            int v9 = (_WORD **)(v3 + 136);
LABEL_198:
            a2 = v230;
            unint64_t v11 = v224;
            unint64_t v13 = v13;
            goto LABEL_8;
          }
          break;
        }
        if (v12)
        {
          unint64_t v12 = (v12 - 1);
          unsigned int v46 = *v6++;
          v8 += (unint64_t)v46 << v7;
          LODWORD(v7) = v7 + 8;
          goto LABEL_68;
        }
LABEL_369:
        LODWORD(v11) = v7;
        LODWORD(v7) = a2;
        unsigned int v15 = v229;
        LODWORD(a2) = v230;
LABEL_377:
        *(void *)(v2 + 24) = v4;
        *(_DWORD *)(v2 + 32) = v7;
        *(void *)uint64_t v2 = v6;
        *(_DWORD *)(v2 + 8) = v12;
        *((void *)v3 + 9) = v8;
        *((_DWORD *)v3 + 20) = v11;
        if (!*((_DWORD *)v3 + 13) && (*(_DWORD *)v3 > 0x17u || v13 == v7)) {
          goto LABEL_386;
        }
        if (!sub_10001B9D8(v2, v13))
        {
          LODWORD(v12) = *(_DWORD *)(v2 + 8);
          LODWORD(v7) = *(_DWORD *)(v2 + 32);
LABEL_386:
          uint64_t v212 = (v13 - v7);
          *(void *)(v2 + 16) += v228 - v12;
          *(void *)(v2 + 40) += v212;
          *((void *)v3 + 4) += v212;
          if (*((_DWORD *)v3 + 2) && v13 != v7)
          {
            uint64_t v213 = *((void *)v3 + 3);
            int v214 = (int *)(*(void *)(v2 + 24) - v212);
            if (*((_DWORD *)v3 + 4)) {
              uint64_t v215 = sub_10001BB48(v213, v214, v212);
            }
            else {
              uint64_t v215 = sub_100010FE4(v213, (unsigned __int8 *)v214, v212);
            }
            *((void *)v3 + 3) = v215;
            *(void *)(v2 + 96) = v215;
          }
          *(_DWORD *)(v2 + 88) = *((_DWORD *)v3 + 20) + ((*((_DWORD *)v3 + 1) != 0) << 6) + ((*(_DWORD *)v3 == 11) << 7);
          if ((v13 == v7 && v228 == v12 || a2 == 4) && v15 == 0) {
            return 4294967291;
          }
          else {
            return v15;
          }
        }
        *(_DWORD *)BOOL v3 = 28;
        return 4294967292;
      case 0x10u:
        a2 = v7;
        unint64_t v44 = *((unsigned int *)v3 + 30);
        unint64_t v45 = *((unsigned int *)v3 + 33);
        if (v45 < v44) {
          goto LABEL_64;
        }
        goto LABEL_70;
      case 0x11u:
        unsigned int v50 = *((_DWORD *)v3 + 33);
        goto LABEL_113;
      case 0x12u:
        goto LABEL_311;
      case 0x13u:
        unsigned int v51 = *((_DWORD *)v3 + 23);
        if (v51) {
          goto LABEL_77;
        }
        goto LABEL_162;
      case 0x14u:
        goto LABEL_163;
      case 0x15u:
        unsigned int v56 = *((_DWORD *)v3 + 23);
        if (v56) {
          goto LABEL_83;
        }
        goto LABEL_177;
      case 0x16u:
        goto LABEL_181;
      case 0x17u:
        if (!v7) {
          goto LABEL_376;
        }
        *v4++ = *((_DWORD *)v3 + 21);
        unint64_t v7 = (v7 - 1);
        goto LABEL_195;
      case 0x18u:
        if (!*((_DWORD *)v3 + 2)) {
          goto LABEL_340;
        }
        if (v11 > 0x1F) {
          goto LABEL_96;
        }
        uint64_t v22 = 0;
        while (v12)
        {
          unint64_t v12 = (v12 - 1);
          unsigned int v61 = *v6++;
          v8 += (unint64_t)v61 << (v11 + v22);
          v22 += 8;
          if ((unint64_t)v11 + v22 - 8 >= 0x18)
          {
            unint64_t v11 = (v11 + v22);
LABEL_96:
            int v62 = *((_DWORD *)v3 + 4);
            uint64_t v63 = (v13 - v7);
            *(void *)(v2 + 40) += v63;
            *((void *)v3 + 4) += v63;
            if (v13 == v7)
            {
              uint64_t v64 = *((void *)v3 + 3);
            }
            else
            {
              unint64_t v127 = v11;
              uint64_t v128 = *((void *)v3 + 3);
              int v129 = (int *)&v4[-v63];
              if (v62) {
                uint64_t v64 = sub_10001BB48(v128, v129, v63);
              }
              else {
                uint64_t v64 = sub_100010FE4(v128, (unsigned __int8 *)v129, v63);
              }
              *((void *)v3 + 3) = v64;
              *(void *)(v2 + 96) = v64;
              int v62 = *((_DWORD *)v3 + 4);
              int v10 = (unsigned __int16 *)(v3 + 144);
              int v9 = (_WORD **)(v3 + 136);
              unint64_t v11 = v127;
            }
            unint64_t v204 = bswap32(v8);
            if (v62) {
              unint64_t v205 = v8;
            }
            else {
              unint64_t v205 = v204;
            }
            if (v205 != v64)
            {
              *(void *)(v2 + 48) = "incorrect data check";
              *(_DWORD *)BOOL v3 = 27;
              unint64_t v13 = v7;
              goto LABEL_8;
            }
            unint64_t v8 = 0;
            unint64_t v11 = 0;
            unint64_t v13 = v7;
LABEL_340:
            *(_DWORD *)BOOL v3 = 25;
LABEL_341:
            if (*((_DWORD *)v3 + 2) && *((_DWORD *)v3 + 4))
            {
              if (v11 <= 0x1F)
              {
                uint64_t v22 = 0;
                do
                {
                  if (!v12) {
                    goto LABEL_370;
                  }
                  unint64_t v12 = (v12 - 1);
                  unsigned int v206 = *v6++;
                  v8 += (unint64_t)v206 << (v11 + v22);
                  v22 += 8;
                }
                while ((unint64_t)v11 + v22 - 8 < 0x18);
                unint64_t v11 = (v11 + v22);
              }
              if (v8 != *((_DWORD *)v3 + 8))
              {
                int v24 = "incorrect length check";
                goto LABEL_356;
              }
              unint64_t v8 = 0;
              LODWORD(v11) = 0;
            }
            *(_DWORD *)BOOL v3 = 26;
            unsigned int v15 = 1;
            goto LABEL_377;
          }
        }
LABEL_370:
        LODWORD(v11) = v11 + v22;
        goto LABEL_376;
      case 0x19u:
        goto LABEL_341;
      case 0x1Au:
        goto LABEL_377;
      case 0x1Bu:
        goto LABEL_409;
      case 0x1Cu:
        return 4294967292;
      default:
        return 4294967294;
    }
  }
}

uint64_t sub_10001B9D8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(char **)(v4 + 64);
  if (v5
    || (uint64_t v6 = 1,
        uint64_t v5 = (char *)(*(uint64_t (**)(void, void, uint64_t))(a1 + 64))(*(void *)(a1 + 80), (1 << *(_DWORD *)(v4 + 48)), 1), (*(void *)(v4 + 64) = v5) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v4 + 52);
    if (!v7)
    {
      unsigned int v7 = 1 << *(_DWORD *)(v4 + 48);
      *(void *)(v4 + 56) = 0;
      *(_DWORD *)(v4 + 52) = v7;
    }
    unsigned int v8 = a2 - *(_DWORD *)(a1 + 32);
    if (v8 >= v7)
    {
      memcpy(v5, (const void *)(*(void *)(a1 + 24) - v7), v7);
      uint64_t v6 = 0;
      int v13 = *(_DWORD *)(v4 + 52);
      *(_DWORD *)(v4 + 60) = 0;
      goto LABEL_16;
    }
    uint64_t v9 = *(unsigned int *)(v4 + 60);
    unsigned int v10 = v7 - v9;
    if (v7 - v9 >= v8) {
      size_t v11 = v8;
    }
    else {
      size_t v11 = v10;
    }
    memcpy(&v5[v9], (const void *)(*(void *)(a1 + 24) - v8), v11);
    if (v8 > v10)
    {
      size_t v12 = v8 - v11;
      memcpy(*(void **)(v4 + 64), (const void *)(*(void *)(a1 + 24) - v12), v12);
      uint64_t v6 = 0;
      int v13 = *(_DWORD *)(v4 + 52);
      *(_DWORD *)(v4 + 60) = v12;
LABEL_16:
      *(_DWORD *)(v4 + 56) = v13;
      return v6;
    }
    uint64_t v6 = 0;
    int v14 = *(_DWORD *)(v4 + 60) + v11;
    unsigned int v16 = *(_DWORD *)(v4 + 52);
    unsigned int v15 = *(_DWORD *)(v4 + 56);
    if (v14 == v16) {
      int v14 = 0;
    }
    *(_DWORD *)(v4 + 60) = v14;
    if (v15 < v16)
    {
      uint64_t v6 = 0;
      int v13 = v15 + v11;
      goto LABEL_16;
    }
  }
  return v6;
}

uint64_t sub_10001BB10(uint64_t a1)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v1 = *(_DWORD **)(a1 + 56);
  if (!v1) {
    return 4294967294;
  }
  if (*v1 == 13) {
    return v1[20] == 0;
  }
  return 0;
}

uint64_t sub_10001BB48(int a1, int *a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  unsigned int v3 = ~a1;
  if (a3 && (a2 & 3) != 0)
  {
    uint64_t v4 = (char *)a2 + 1;
    do
    {
      char v5 = *(unsigned char *)a2;
      a2 = (int *)((char *)a2 + 1);
      unsigned int v3 = *((void *)&unk_100045B08 + (v5 ^ v3)) ^ (v3 >> 8);
      if (!--a3) {
        break;
      }
    }
    while ((unint64_t)(v4++ & 3));
  }
  if (a3 >= 0x20)
  {
    unsigned int v7 = (char *)&unk_100045B08 + &unk_100001800;
    do
    {
      unsigned int v8 = *a2 ^ v3;
      int v9 = qword_100046308[BYTE1(v8) + 256] ^ *(void *)&v7[8 * (*(unsigned char *)a2 ^ v3)];
      unsigned int v10 = a2[1] ^ v9 ^ qword_100046308[BYTE2(v8)] ^ *((void *)&unk_100045B08 + HIBYTE(v8));
      unsigned int v11 = a2[2] ^ qword_100046308[BYTE1(v10) + 256] ^ *(void *)&v7[8
                                                                     * (*((unsigned char *)a2 + 4) ^ v9 ^ qword_100046308[BYTE2(v8)] ^ *((void *)&unk_100045B08 + HIBYTE(v8)))] ^ qword_100046308[BYTE2(v10)] ^ *((void *)&unk_100045B08 + HIBYTE(v10));
      unsigned int v12 = a2[3] ^ qword_100046308[BYTE1(v11) + 256] ^ *(void *)&v7[8 * v11] ^ qword_100046308[BYTE2(v11)] ^ *((void *)&unk_100045B08 + HIBYTE(v11));
      unsigned int v13 = a2[4] ^ qword_100046308[BYTE1(v12) + 256] ^ *(void *)&v7[8 * v12] ^ qword_100046308[BYTE2(v12)] ^ *((void *)&unk_100045B08 + HIBYTE(v12));
      unsigned int v14 = a2[5] ^ qword_100046308[BYTE1(v13) + 256] ^ *(void *)&v7[8 * v13] ^ qword_100046308[BYTE2(v13)] ^ *((void *)&unk_100045B08 + HIBYTE(v13));
      unsigned int v15 = a2[6] ^ qword_100046308[BYTE1(v14) + 256] ^ *(void *)&v7[8 * v14] ^ qword_100046308[BYTE2(v14)] ^ *((void *)&unk_100045B08 + HIBYTE(v14));
      int v16 = qword_100046308[BYTE1(v15) + 256] ^ *(void *)&v7[8 * v15] ^ qword_100046308[BYTE2(v15)] ^ *((void *)&unk_100045B08 + HIBYTE(v15));
      uint64_t v17 = a2 + 8;
      unsigned int v18 = a2[7] ^ v16;
      unsigned int v3 = qword_100046308[BYTE1(v18) + 256] ^ *(void *)&v7[8 * v18] ^ qword_100046308[BYTE2(v18)] ^ *((void *)&unk_100045B08 + HIBYTE(v18));
      a3 -= 32;
      a2 += 8;
    }
    while (a3 > 0x1F);
    a2 = v17;
  }
  if (a3 >= 4)
  {
    do
    {
      int v19 = *a2++;
      unsigned int v3 = *((_DWORD *)&unk_100045B08 + 2 * ((unsigned __int16)(v19 ^ v3) >> 8) + 1024) ^ *((_DWORD *)&unk_100045B08 + 2 * (v19 ^ v3) + 1536) ^ *((_DWORD *)&unk_100045B08 + 2 * ((v19 ^ v3) >> 16) + 512) ^ *((void *)&unk_100045B08 + ((v19 ^ v3) >> 24));
      a3 -= 4;
    }
    while (a3 > 3);
  }
  for (; a3; --a3)
  {
    char v20 = *(unsigned char *)a2;
    a2 = (int *)((char *)a2 + 1);
    unsigned int v3 = *((void *)&unk_100045B08 + (v20 ^ v3)) ^ (v3 >> 8);
  }
  return ~v3;
}

uint64_t sub_10001BDD4(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (result & 0xF000) - 4096;
  if (v2 >> 13 > 6) {
    char v3 = 63;
  }
  else {
    char v3 = aPcDBLSW[v2 >> 12];
  }
  *(unsigned char *)a2 = v3;
  char v4 = 45;
  if ((result & 0x100) != 0) {
    char v5 = 114;
  }
  else {
    char v5 = 45;
  }
  *(unsigned char *)(a2 + 1) = v5;
  if ((result & 0x80) != 0) {
    char v6 = 119;
  }
  else {
    char v6 = 45;
  }
  *(unsigned char *)(a2 + 2) = v6;
  if (((unsigned __int16)result & 0x840u) > 0x7FF)
  {
    if ((result & 0x840) == 0x800) {
      char v4 = 83;
    }
    else {
      char v4 = 115;
    }
  }
  else if ((result & 0x840) != 0)
  {
    char v4 = 120;
  }
  *(unsigned char *)(a2 + 3) = v4;
  char v7 = 45;
  if ((result & 0x20) != 0) {
    char v8 = 114;
  }
  else {
    char v8 = 45;
  }
  *(unsigned char *)(a2 + 4) = v8;
  if ((result & 0x10) != 0) {
    char v9 = 119;
  }
  else {
    char v9 = 45;
  }
  *(unsigned char *)(a2 + 5) = v9;
  if (((unsigned __int16)result & 0x408u) > 0x3FF)
  {
    if ((result & 0x408) == 0x400) {
      char v7 = 83;
    }
    else {
      char v7 = 115;
    }
  }
  else if ((result & 0x408) != 0)
  {
    char v7 = 120;
  }
  *(unsigned char *)(a2 + 6) = v7;
  char v10 = 45;
  if ((result & 4) != 0) {
    char v11 = 114;
  }
  else {
    char v11 = 45;
  }
  *(unsigned char *)(a2 + 7) = v11;
  if ((result & 2) != 0) {
    char v12 = 119;
  }
  else {
    char v12 = 45;
  }
  *(unsigned char *)(a2 + 8) = v12;
  if (((unsigned __int16)result & 0x201u) > 0x1FF)
  {
    if ((result & 0x201) == 0x200) {
      char v10 = 84;
    }
    else {
      char v10 = 116;
    }
  }
  else if ((result & 0x201) != 0)
  {
    char v10 = 120;
  }
  *(unsigned char *)(a2 + 9) = v10;
  *(_WORD *)(a2 + 10) = 32;
  return result;
}

uint64_t sub_10001BF18(uint64_t a1, unint64_t a2)
{
  if (a2 < 5)
  {
    unint64_t v5 = 0;
    LOWORD(v4) = 0;
    unsigned __int16 v3 = 0;
  }
  else
  {
    unsigned __int16 v3 = 0;
    int v4 = 0;
    unint64_t v5 = 0;
    do
    {
      int v6 = v4 + *(char *)(a1 + v5);
      int v7 = *(char *)(a1 + v5 + 1);
      int v8 = *(char *)(a1 + v5 + 2);
      int v9 = *(char *)(a1 + v5 + 3);
      v3 += 3 * v7 + 4 * v6 + 2 * v8 + v9;
      int v4 = v6 + v7 + v8 + v9;
      v5 += 4;
    }
    while (v5 < a2 - 4);
  }
  unint64_t v10 = a2 - v5;
  if (a2 > v5)
  {
    char v11 = (char *)(a1 + v5);
    do
    {
      __int16 v12 = *v11++;
      LOWORD(v4) = v4 + v12;
      v3 += v4;
      --v10;
    }
    while (v10);
  }
  return (unsigned __int16)v4 | (v3 << 16);
}

uint64_t sub_10001BFB0(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  memset(&c, 0, sizeof(c));
  int data = *(_DWORD *)(a4 + 12);
  CC_MD4_Init(&c);
  for (; a2; a2 -= v7)
  {
    if (a2 >= 0xFFFFFFFF) {
      uint64_t v7 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v7 = a2;
    }
    CC_MD4_Update(&c, a1, v7);
    a1 += v7;
  }
  CC_MD4_Update(&c, &data, 4u);
  return CC_MD4_Final(a3, &c);
}

uint64_t sub_10001C05C(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  memset(&c, 0, sizeof(c));
  CC_MD4_Init(&c);
  if (a4)
  {
    int data = *(_DWORD *)(a4 + 12);
    CC_MD4_Update(&c, &data, 4u);
  }
  for (; a2; a2 -= v8)
  {
    if (a2 >= 0xFFFFFFFF) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v8 = a2;
    }
    CC_MD4_Update(&c, a1, v8);
    a1 += v8;
  }
  return CC_MD4_Final(a3, &c);
}

uint64_t sub_10001C110(int a1, const char *a2, size_t a3, unsigned __int8 *a4)
{
  uint64_t result = openat(a1, a2, 256);
  if (result != -1)
  {
    int v8 = result;
    int v9 = sub_100010DA4(result, a3, 1);
    if (v9)
    {
      if (qword_100058F00) {
        BOOL v10 = qword_100058F08 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10) {
        sub_10003F4C8();
      }
      char v11 = v9;
      if (qword_100058F00) {
        qword_100058F08 = qword_100058F00;
      }
      if (sigsetjmp(dword_100058F10, 0) < 1)
      {
        qword_100058F00 = (uint64_t)v11;
        unsigned int v15 = (char *)sub_100010F34(v11, 0);
        sub_10001C05C(v15, a3, a4, 0);
        if ((void *)qword_100058F00 != v11) {
          sub_10003B4B0();
        }
        qword_100058F00 = qword_100058F08;
        qword_100058F08 = 0;
      }
      else
      {
        qword_100058F00 = qword_100058F08;
        qword_100058F08 = 0;
        if (dword_100058FD8)
        {
          int v12 = *__error();
          unsigned int v13 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003F4F4((uint64_t)a2, v13);
          }
          *__error() = v12;
        }
        sub_10001FB50("%s: file truncated while hashing", a2);
      }
      sub_100010F50((uint64_t)v11);
      close(v8);
      return 0;
    }
    else
    {
      int v14 = *__error();
      close(v8);
      *__error() = v14;
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void sub_10001C2B8(void **a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a2;
    if (a2)
    {
      int v4 = a1 + 1;
      do
      {
        unint64_t v5 = *v4;
        v4 += 2;
        free(v5);
        --v2;
      }
      while (v2);
    }
    free(a1);
  }
}

uint64_t sub_10001C318(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)result + 120)) {
    sub_10003F56C();
  }
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      uint64_t v6 = a2 + 152 * i;
      int v9 = *(_DWORD *)(v6 + 32);
      uint64_t v7 = (_DWORD *)(v6 + 32);
      int v8 = v9;
      if (v9) {
        BOOL v10 = a5 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        uint64_t v11 = a5;
        int v12 = (_DWORD *)(a4 + 4);
        while (v8 != *(v12 - 1))
        {
          v12 += 4;
          if (!--v11) {
            goto LABEL_13;
          }
        }
        *uint64_t v7 = *v12;
      }
LABEL_13:
      ;
    }
  }
  return result;
}

uint64_t sub_10001C398(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)result + 120)) {
    sub_10003F598();
  }
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      uint64_t v6 = a2 + 152 * i;
      int v9 = *(_DWORD *)(v6 + 28);
      uint64_t v7 = (_DWORD *)(v6 + 28);
      int v8 = v9;
      if (v9) {
        BOOL v10 = a5 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        uint64_t v11 = a5;
        int v12 = (_DWORD *)(a4 + 4);
        while (v8 != *(v12 - 1))
        {
          v12 += 4;
          if (!--v11) {
            goto LABEL_13;
          }
        }
        *uint64_t v7 = *v12;
      }
LABEL_13:
      ;
    }
  }
  return result;
}

void sub_10001C418(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)a1 + 120)) {
    sub_10003F5F0();
  }
  uint64_t v4 = a4;
  if (a4)
  {
    uint64_t v6 = a3 + 4;
    do
    {
      if (!*(_DWORD *)(v6 - 4)) {
        sub_10003F5C4();
      }
      uint64_t v7 = *(const char **)(v6 + 4);
      if (a2)
      {
        int v8 = getgrnam(v7);
        if (v8) {
          goto LABEL_7;
        }
      }
      else
      {
        int v8 = getpwnam(v7);
        if (v8)
        {
LABEL_7:
          int v15 = 0;
          int v16 = v8[4];
          goto LABEL_10;
        }
      }
      int v16 = 0;
      int v15 = 1;
LABEL_10:
      uint64_t v17 = *(unsigned char **)(v6 + 4);
      if (*v17 && !v15) {
        *(_DWORD *)uint64_t v6 = v16;
      }
      else {
        *(_DWORD *)uint64_t v6 = *(_DWORD *)(v6 - 4);
      }
      sub_10001FA38(3, "remapped identifier %s: %d -> %d", v9, v10, v11, v12, v13, v14, (char)v17);
      v6 += 16;
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_10001C4F0(int a1, void **a2, uint64_t *a3, uint64_t a4)
{
  if (!a4) {
    return 1;
  }
  uint64_t v8 = *a3;
  if (*a3)
  {
    uint64_t v9 = (int *)*a2;
    do
    {
      int v10 = *v9;
      v9 += 4;
      if (v10 == a4) {
        return 1;
      }
    }
    while (--v8);
  }
  *__error() = 0;
  if (a1)
  {
    uint64_t v11 = (const char **)getgrgid(a4);
    if (!v11)
    {
      if (*__error())
      {
        if (dword_100058FD8)
        {
          int v19 = *__error();
          char v20 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003F7B0(a4, v20, v21, v22, v23, v24, v25, v26);
          }
          *__error() = v19;
        }
        sub_10001FBD8("%u: unknown gid", v12, v13, v14, v15, v16, v17, v18, a4);
        return 0;
      }
      return 1;
    }
  }
  else
  {
    uint64_t v11 = (const char **)getpwuid(a4);
    if (!v11)
    {
      if (*__error())
      {
        if (dword_100058FD8)
        {
          int v49 = *__error();
          unsigned int v50 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003F61C(a4, v50, v51, v52, v53, v54, v55, v56);
          }
          *__error() = v49;
        }
        sub_10001FBD8("%u: unknown uid", v42, v43, v44, v45, v46, v47, v48, a4);
        return 0;
      }
      return 1;
    }
  }
  unsigned int v28 = *v11;
  size_t v29 = strlen(*v11);
  if (v29 >= 0x100)
  {
    if (dword_100058FD8)
    {
      int v30 = *__error();
      unint64_t v31 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003F688((uint64_t)v28, a4, v31);
      }
      *__error() = v30;
    }
    sub_10001FB50("%u: name too long: %s");
    return 0;
  }
  if (!v29)
  {
    if (dword_100058FD8)
    {
      int v57 = *__error();
      unint64_t v58 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003F710(a4, v58, v59, v60, v61, v62, v63, v64);
      }
      *__error() = v57;
    }
    sub_10001FB50("%u: zero-length name");
    return 0;
  }
  int v32 = (char *)sub_1000048CC(*a2, *a3 + 1, 0x10uLL);
  if (v32)
  {
    *a2 = v32;
    uint64_t v40 = *a3;
    unsigned int v41 = &v32[16 * *a3];
    *(_DWORD *)unsigned int v41 = a4;
    *((void *)v41 + 1) = strdup(v28);
    if (*((void *)*a2 + 2 * v40 + 1))
    {
      sub_10001FA38(3, "adding identifier to list: %s (%u)", v34, v35, v36, v37, v38, v39, *((void *)*a2 + 2 * v40 + 1));
      ++*a3;
      return 1;
    }
    if (dword_100058FD8)
    {
      int v67 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v67;
    }
    size_t v66 = "strdup";
  }
  else
  {
    if (dword_100058FD8)
    {
      int v65 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003F77C();
      }
      *__error() = v65;
    }
    size_t v66 = "reallocarray";
  }
  sub_10001FBD8(v66, v33, v34, v35, v36, v37, v38, v39, v68);
  return 0;
}

uint64_t sub_10001C850(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = a4;
    uint64_t v7 = (const char **)(a3 + 8);
    while (1)
    {
      if (!*v7) {
        sub_10003F81C();
      }
      int v8 = *((_DWORD *)v7 - 2);
      if (!v8) {
        sub_10003F848();
      }
      size_t v9 = strlen(*v7);
      if (v9 - 256 <= 0xFFFFFFFFFFFFFF00) {
        sub_10003F874();
      }
      size_t v10 = v9;
      if (!sub_10001E174(a1, a2, v8))
      {
        if (!dword_100058FD8)
        {
          sub_10001FC88("io_write_uint");
          return 0;
        }
        int v12 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E5CC();
        }
        uint64_t v13 = "io_write_uint";
        goto LABEL_28;
      }
      if (!sub_10001D9A8(a1, a2, v10))
      {
        if (!dword_100058FD8)
        {
          sub_10001FC88("io_write_byte");
          return 0;
        }
        int v12 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003E4A4();
        }
        uint64_t v13 = "io_write_byte";
        goto LABEL_28;
      }
      if (!sub_10001D870(a1, a2, (char *)*v7, v10)) {
        break;
      }
      v7 += 2;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    if (!dword_100058FD8)
    {
      sub_10001FC88("io_write_buf");
      return 0;
    }
    int v12 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E564();
    }
    uint64_t v13 = "io_write_buf";
  }
  else
  {
LABEL_10:
    if (sub_10001E174(a1, a2, 0)) {
      return 1;
    }
    if (!dword_100058FD8)
    {
      sub_10001FC88("io_write_int");
      return 0;
    }
    int v12 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B7F8();
    }
    uint64_t v13 = "io_write_int";
  }
LABEL_28:
  *__error() = v12;
  sub_10001FC88(v13);
  return 0;
}

uint64_t sub_10001CA98(uint64_t a1, int a2, void **a3, uint64_t *a4)
{
  int v31 = 0;
  unsigned __int8 v30 = 0;
  if (sub_10001EA48(a1, a2, &v31))
  {
    while (1)
    {
      if (!v31) {
        return 1;
      }
      int v8 = (char *)sub_1000048CC(*a3, *a4 + 1, 0x10uLL);
      if (!v8)
      {
        if (dword_100058FD8)
        {
          int v24 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003F77C();
          }
          *__error() = v24;
        }
        uint64_t v25 = "reallocarray";
        goto LABEL_35;
      }
      *a3 = v8;
      uint64_t v16 = &v8[16 * *a4];
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      if (!sub_10001DD4C(a1, a2, (char *)&v30)) {
        break;
      }
      unsigned int v17 = v30;
      if (!v30)
      {
        if (dword_100058FD8)
        {
          int v18 = *__error();
          int v19 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            v29[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "zero-length name in identifier list", (uint8_t *)v29, 2u);
          }
          *__error() = v18;
        }
        sub_10001FDC8("zero-length name in identifier list");
        unsigned int v17 = v30;
      }
      *((_DWORD *)*a3 + 4 * *a4) = v31;
      char v20 = malloc_type_calloc(v17 + 1, 1uLL, 0x21E704CEuLL);
      uint64_t v21 = *a4;
      *((void *)*a3 + 2 * *a4 + 1) = v20;
      size_t v10 = (char *)*((void *)*a3 + 2 * v21 + 1);
      if (!v10)
      {
        if (dword_100058FD8)
        {
          int v27 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B320();
          }
          *__error() = v27;
        }
        uint64_t v25 = "calloc";
LABEL_35:
        sub_10001FBD8(v25, v9, (uint64_t)v10, v11, v12, v13, v14, v15, v29[0]);
        return 0;
      }
      if (!sub_10001DDD4(a1, a2, v10, v30))
      {
        if (dword_100058FD8)
        {
          int v28 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B728();
          }
          *__error() = v28;
        }
        sub_10001FC88("io_read_buf");
        return 0;
      }
      ++*a4;
      if (!sub_10001EA48(a1, a2, &v31)) {
        goto LABEL_14;
      }
    }
    if (dword_100058FD8)
    {
      int v26 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003DBE8();
      }
      *__error() = v26;
    }
    sub_10001FC88("io_read_byte");
  }
  else
  {
LABEL_14:
    if (dword_100058FD8)
    {
      int v22 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003E974();
      }
      *__error() = v22;
    }
    sub_10001FC88("io_read_uint");
  }
  return 0;
}

void sub_10001CDBC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t sub_10001CDD8(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 136)) {
    return 1;
  }
  *(_DWORD *)&v12.events = (unint64_t)&_mh_execute_header >> 32;
  v12.fd = a2;
  if (poll(&v12, 1u, 0) != -1) {
    return v12.revents & 1;
  }
  if (dword_100058FD8)
  {
    int v10 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003F8A0();
    }
    *__error() = v10;
  }
  sub_10001FBD8("poll", v3, v4, v5, v6, v7, v8, v9, v11);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10001CE94(void *a1, int a2)
{
  *(_DWORD *)&v8.events = (unint64_t)&_mh_execute_header >> 32;
  int v7 = 0;
  v8.fd = a2;
  while (1)
  {
    do
      int v4 = poll(&v8, 1u, -1);
    while (v4 == -1);
    if (!v4 && *__error() != 4)
    {
LABEL_13:
      uint64_t v5 = 0;
      goto LABEL_15;
    }
    if (v8.revents) {
      break;
    }
    int v7 = -1;
    if ((v8.revents & 0x10) != 0) {
      goto LABEL_14;
    }
LABEL_11:
    if (!sub_10001CF78(a1, a2) || a1[17]) {
      goto LABEL_13;
    }
  }
  if (ioctl(a2, 0x4004667FuLL, &v7) == -1) {
    goto LABEL_13;
  }
  if (v7 && (v8.revents & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v5 = 1;
LABEL_15:
  close(a2);
  return v5;
}

uint64_t sub_10001CF78(void *a1, int a2)
{
  if (a1[17]) {
    return 1;
  }
  int v18 = 0;
  if (!sub_10001DB28(a2, (char *)&v18, 4uLL))
  {
    if (!dword_100058FD8)
    {
LABEL_15:
      sub_10001FC88("io_read_blocking");
      return 0;
    }
    int v15 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      *__error() = v15;
      goto LABEL_15;
    }
LABEL_13:
    sub_10003F8D4();
    goto LABEL_14;
  }
  int v11 = v18;
  uint64_t v12 = v18 & 0xFFFFFFLL;
  a1[17] = v12;
  int v13 = (v11 >> 24) - 7;
  if (v11 >> 24 == 7) {
    return 1;
  }
  if (v12 >= 0x401)
  {
    if (dword_100058FD8)
    {
      int v14 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003F908();
      }
      *__error() = v14;
    }
    sub_10001FB50("multiplex buffer overflow");
    return 0;
  }
  if (!v12)
  {
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  if (!sub_10001DB28(a2, v19, v12))
  {
    if (!dword_100058FD8) {
      goto LABEL_15;
    }
    int v15 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19[v12 - 1] == 10) {
    v19[--v12] = 0;
  }
  a1[17] = 0;
LABEL_23:
  uint64_t v16 = &qword_1000587F0;
  while (1)
  {
    uint64_t v16 = (uint64_t *)*v16;
    if (!v16) {
      break;
    }
    if (*((_DWORD *)v16 + 6) == v13) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v16[1])(v16[2], v19, v12);
    }
  }
  if (v11 >> 26 != 2) {
    return 1;
  }
  if (v12) {
    sub_10001FA38(-1, "%.*s", v5, v6, v7, v8, v9, v10, v12);
  }
  if ((v13 & 0xFFFFFFFD) != 1) {
    return 1;
  }
  ++a1[30];
  if (v11 >> 24 == 8 || *(_DWORD *)(*a1 + 568)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v17 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003F93C();
    }
    *__error() = v17;
  }
  sub_10001FC88("error from remote host");
  return 0;
}

uint64_t sub_10001D23C(uint64_t a1, int a2, char *a3, size_t a4)
{
  *(void *)(a1 + 48) += a4;
  int v5 = *(_DWORD *)(a1 + 188);
  if (v5 == -1) {
    return 1;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  BOOL v7 = v5 != a2 && v6 == 0;
  if (!v7 || sub_10001D2F4(v5, a3, a4)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v9 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003F970();
    }
    *__error() = v9;
  }
  sub_10001FB50("write outgoing to batch");
  return 0;
}

uint64_t sub_10001D2F4(int a1, char *a2, size_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v3 = a3;
  while (1)
  {
    *(_DWORD *)&v26.events = 4;
    v26.fd = a1;
    int v6 = poll(&v26, 1u, dword_100058FF0);
    if (!v6) {
      break;
    }
    if (v6 == -1)
    {
      if (dword_100058FD8)
      {
        int v17 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F8A0();
        }
        *__error() = v17;
      }
      int v18 = "poll";
      goto LABEL_43;
    }
    if ((v26.revents & 0x28) != 0)
    {
      if (dword_100058FD8)
      {
        int v19 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003FAA8();
        }
        *__error() = v19;
      }
      sub_10001FB50("poll: bad fd");
      goto LABEL_44;
    }
    if ((v26.revents & 0x10) != 0)
    {
      if (dword_100058FD8)
      {
        int v20 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003FA74();
        }
        *__error() = v20;
      }
      sub_10001FB50("poll: hangup");
      goto LABEL_44;
    }
    if ((v26.revents & 4) == 0)
    {
      if (dword_100058FD8)
      {
        int v21 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F9D8();
        }
        *__error() = v21;
      }
      sub_10001FB50("poll: unknown event");
      goto LABEL_44;
    }
    ssize_t v14 = write(a1, a2, v3);
    if (v14 == -1)
    {
      if (dword_100058FD8)
      {
        int v22 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003FA0C();
        }
        *__error() = v22;
      }
      int v18 = "write";
LABEL_43:
      sub_10001FBD8(v18, v7, v8, v9, v10, v11, v12, v13, v25);
      goto LABEL_44;
    }
    if (!v14)
    {
      if (dword_100058FD8)
      {
        int v24 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003FA40();
        }
        *__error() = v24;
      }
      sub_10001FB50("io_write_nonblocking: short write");
      return 0;
    }
    a2 += v14;
    v3 -= v14;
    if (!v3) {
      return 1;
    }
  }
  if (dword_100058FD8)
  {
    int v16 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003FADC();
    }
    *__error() = v16;
  }
  sub_10001FB50("poll: timeout");
LABEL_44:
  if (dword_100058FD8)
  {
    int v23 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003F9A4();
    }
    *__error() = v23;
  }
  sub_10001FC88("io_write_nonblocking");
  return 0;
}

uint64_t sub_10001D668(uint64_t a1, int a2, char *a3, size_t a4, int a5)
{
  size_t v6 = a4;
  uint64_t v7 = a3;
  int v10 = *(_DWORD *)(a1 + 188);
  if (v10 != -1)
  {
    BOOL v11 = v10 != a2 && (*(_DWORD *)(a1 + 8) | a5) == 0;
    if (v11 && !sub_10001D2F4(v10, a3, a4))
    {
      if (dword_100058FD8)
      {
        int v16 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F970();
        }
        *__error() = v16;
      }
      sub_10001FB50("write outgoing to batch");
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 144))
  {
    if (!v6) {
      return 1;
    }
    int v12 = (a5 << 24) + 117440512;
    while (1)
    {
      size_t v13 = v6 >= 0xFFFFFF ? 0xFFFFFFLL : v6;
      int v17 = v12 | v13;
      if (!sub_10001D2F4(a2, (char *)&v17, 4uLL)) {
        break;
      }
      if (!sub_10001D2F4(a2, v7, v13))
      {
        if (!dword_100058FD8) {
          goto LABEL_32;
        }
        int v15 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        goto LABEL_31;
      }
      *(void *)(a1 + 48) += v13;
      v7 += v13;
      v6 -= v13;
      if (!v6) {
        return 1;
      }
    }
    if (!dword_100058FD8) {
      goto LABEL_32;
    }
    int v15 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_30:
    }
      sub_10003FB3C();
LABEL_31:
    *__error() = v15;
LABEL_32:
    sub_10001FC88("io_write_blocking");
    return 0;
  }
  if (a5) {
    sub_10003FB10();
  }
  uint64_t result = sub_10001D2F4(a2, v7, v6);
  *(void *)(a1 + 48) += v6;
  return result;
}

uint64_t sub_10001D870(uint64_t a1, int a2, char *a3, size_t a4)
{
  return sub_10001D668(a1, a2, a3, a4, 0);
}

uint64_t sub_10001D878(uint64_t a1, int a2, char *__s)
{
  size_t v6 = strlen(__s);
  if (sub_10001D668(a1, a2, __s, v6, 0))
  {
    if (sub_10001D9A8(a1, a2, 10)) {
      return 1;
    }
    if (!dword_100058FD8)
    {
      uint64_t v9 = "io_write_byte";
      goto LABEL_15;
    }
    int v8 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E4A4();
    }
    uint64_t v9 = "io_write_byte";
LABEL_12:
    *__error() = v8;
LABEL_15:
    sub_10001FC88(v9);
    return 0;
  }
  if (dword_100058FD8)
  {
    int v8 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E564();
    }
    uint64_t v9 = "io_write_buf";
    goto LABEL_12;
  }
  sub_10001FC88("io_write_buf");
  return 0;
}

uint64_t sub_10001D9A8(uint64_t a1, int a2, char a3)
{
  char v6 = a3;
  uint64_t v3 = 1;
  if (!sub_10001D668(a1, a2, &v6, 1uLL, 0))
  {
    if (dword_100058FD8)
    {
      int v4 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003E564();
      }
      *__error() = v4;
    }
    sub_10001FC88("io_write_buf");
    return 0;
  }
  return v3;
}

uint64_t sub_10001DA44(int a1, uint64_t a2, uint64_t a3)
{
  char v6 = &qword_1000587F0;
  while (1)
  {
    char v6 = (uint64_t *)*v6;
    if (!v6) {
      break;
    }
    if (*((_DWORD *)v6 + 6) == a1) {
      sub_10003FB70();
    }
  }
  uint64_t v7 = malloc_type_malloc(0x20uLL, 0x10A0040D98738FAuLL);
  if (v7)
  {
    v7[1] = a2;
    v7[2] = a3;
    *((_DWORD *)v7 + 6) = a1;
    *uint64_t v7 = qword_1000587F0;
    qword_1000587F0 = (uint64_t)v7;
    return 1;
  }
  else
  {
    if (dword_100058FD8)
    {
      int v16 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003CD90();
      }
      *__error() = v16;
    }
    sub_10001FBD8("malloc", v8, v9, v10, v11, v12, v13, v14, v17);
    return 0;
  }
}

uint64_t sub_10001DB28(int a1, char *a2, size_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v3 = a3;
  ssize_t v9 = 0;
  while (sub_10001F240(a1, a2, v3, &v9, 0))
  {
    if (!v9)
    {
      if (dword_100058FD8)
      {
        int v8 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003FBD0();
        }
        *__error() = v8;
      }
      sub_10001FB50("io_read_nonblocking: short read");
      return 0;
    }
    a2 += v9;
    v3 -= v9;
    if (!v3) {
      return 1;
    }
  }
  if (dword_100058FD8)
  {
    int v7 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003FB9C();
    }
    *__error() = v7;
  }
  sub_10001FC88("io_read_nonblocking");
  return 0;
}

uint64_t sub_10001DC5C(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (!*a4) {
    return 1;
  }
  uint64_t v9 = 0;
  char v12 = 0;
  while (sub_10001DD4C(a1, a2, &v12))
  {
    if (v12 == 10)
    {
      *(unsigned char *)(a3 + v9) = 0;
      *a4 = v9;
      return 1;
    }
    *(unsigned char *)(a3 + v9++) = v12;
    if (v4 == v9) {
      return 1;
    }
  }
  if (dword_100058FD8)
  {
    int v10 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003DBE8();
    }
    *__error() = v10;
  }
  sub_10001FC88("io_read_byte");
  return 0;
}

uint64_t sub_10001DD4C(uint64_t a1, int a2, char *a3)
{
  uint64_t v3 = 1;
  if (!sub_10001DDD4(a1, a2, a3, 1uLL))
  {
    if (dword_100058FD8)
    {
      int v4 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B728();
      }
      *__error() = v4;
    }
    sub_10001FC88("io_read_buf");
    return 0;
  }
  return v3;
}

uint64_t sub_10001DDD4(uint64_t a1, int a2, char *a3, size_t a4)
{
  if (*(_DWORD *)(a1 + 128))
  {
    if (a4)
    {
      size_t v8 = a4;
      uint64_t v9 = a3;
      while (1)
      {
        while (1)
        {
          size_t v10 = *(void *)(a1 + 136);
          if (v10) {
            break;
          }
          if (!sub_10001CF78((void *)a1, a2))
          {
            if (dword_100058FD8)
            {
              int v14 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003FC64();
              }
              *__error() = v14;
            }
            sub_10001FC88("io_read_flush");
            return 0;
          }
        }
        size_t v11 = v10 >= v8 ? v8 : *(void *)(a1 + 136);
        if (!sub_10001DB28(a2, v9, v11)) {
          break;
        }
        *(void *)(a1 + 136) -= v11;
        v9 += v11;
        *(void *)(a1 + 24) += v11;
        v8 -= v11;
        if (!v8) {
          goto LABEL_15;
        }
      }
      if (dword_100058FD8)
      {
        int v16 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F8D4();
        }
        *__error() = v16;
      }
      sub_10001FC88("io_read_blocking");
      return 0;
    }
LABEL_15:
    int v13 = *(_DWORD *)(a1 + 188);
    if (v13 == -1 || *(_DWORD *)(a1 + 8) != 1 || sub_10001D2F4(v13, a3, a4)) {
      return 1;
    }
    if (dword_100058FD8)
    {
      int v15 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003FC04();
      }
      *__error() = v15;
    }
    sub_10001FB50("write incoming to batch");
    return 0;
  }
  if (*(void *)(a1 + 136)) {
    sub_10003FC38();
  }
  uint64_t result = sub_10001DB28(a2, a3, a4);
  *(void *)(a1 + 24) += a4;
  if (result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_10001DFEC(uint64_t a1, int a2, unint64_t a3)
{
  if (!(a3 >> 31))
  {
    if (!sub_10001E180(a1, a2, a3, 0))
    {
      if (dword_100058FD8)
      {
        int v5 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    return 1;
  }
  unint64_t v8 = a3;
  if (sub_10001E180(a1, a2, -1, 0))
  {
    if (!sub_10001D668(a1, a2, (char *)&v8, 8uLL, 0))
    {
      if (!dword_100058FD8)
      {
        sub_10001FC88("io_write_buf");
        return 0;
      }
      int v5 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003E564();
      }
      int v7 = "io_write_buf";
      goto LABEL_18;
    }
    return 1;
  }
  if (dword_100058FD8)
  {
    int v5 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_11:
    }
      sub_10003B7F8();
LABEL_12:
    int v7 = "io_write_int";
LABEL_18:
    *__error() = v5;
    sub_10001FC88(v7);
    return 0;
  }
LABEL_13:
  sub_10001FC88("io_write_int");
  return 0;
}

uint64_t sub_10001E174(uint64_t a1, int a2, int a3)
{
  return sub_10001E180(a1, a2, a3, 0);
}

uint64_t sub_10001E180(uint64_t a1, int a2, int a3, int a4)
{
  int v6 = a3;
  if (sub_10001D668(a1, a2, (char *)&v6, 4uLL, a4)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v5 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E564();
    }
    *__error() = v5;
  }
  sub_10001FC88("io_write_buf");
  return 0;
}

uint64_t sub_10001E220(uint64_t a1, int a2, __int16 a3)
{
  __int16 v4 = a3;
  return sub_10001D668(a1, a2, (char *)&v4, 2uLL, 0);
}

void *sub_10001E250(uint64_t a1, void *a2, size_t a3, void *__src, size_t __n)
{
  if (*a2 + __n > a3) {
    sub_10003FC98();
  }
  uint64_t result = memcpy((void *)(a1 + *a2), __src, __n);
  *a2 += __n;
  return result;
}

_DWORD *sub_10001E2A4(_DWORD *result, uint64_t a2, void *a3, size_t a4, void *__src, size_t __n)
{
  if (__n)
  {
    if (result[36])
    {
      if (__n + *a3 + 4 > a4) {
        sub_10003FCC4();
      }
      if (__n >> 24) {
        sub_10003FCF0();
      }
      int __srca = __n + 117440512;
      sub_10001E250(a2, a3, a4, &__srca, 4uLL);
    }
    return sub_10001E250(a2, a3, a4, __src, __n);
  }
  return result;
}

void *sub_10001E37C(uint64_t a1, void *a2, size_t a3, int a4)
{
  __srCC_MD4_CTX c = a4;
  return sub_10001E250(a1, a2, a3, &__src, 4uLL);
}

_DWORD *sub_10001E3A8(_DWORD *result, uint64_t a2, void *a3, size_t a4, void *a5, size_t a6)
{
  if (a6)
  {
    if (result[36])
    {
      if (a6 + *a3 + 4 > a4) {
        sub_10003FD1C();
      }
      if (a6 >> 24) {
        sub_10003FD48();
      }
      if (a6 <= 0x7F) {
        int v11 = 1;
      }
      else {
        int v11 = 2;
      }
      __srCC_MD4_CTX c = a6 + 117440512 + v11;
      sub_10001E250(a2, a3, a4, &__src, 4uLL);
    }
    return sub_10001E490(a2, a3, a4, a5, a6);
  }
  return result;
}

void *sub_10001E490(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5)
{
  if (a5 >= 0x8000) {
    sub_10003FD74();
  }
  if (a5 >= 0x80)
  {
    __srCC_MD4_CTX c = BYTE1(a5) ^ 0x80;
    sub_10001E250(a1, a2, a3, &__src, 1uLL);
  }
  char v12 = a5;
  sub_10001E250(a1, a2, a3, &v12, 1uLL);

  return sub_10001E250(a1, a2, a3, a4, a5);
}

uint64_t sub_10001E550(uint64_t a1, void **a2, size_t *a3, size_t *a4, uint64_t a5)
{
  uint64_t v7 = a5 + 4 * (*(_DWORD *)(a1 + 144) != 0);
  size_t v8 = v7 + *a3;
  if (v8 <= *a4) {
    goto LABEL_4;
  }
  size_t v10 = malloc_type_realloc(*a2, v8, 0xFDD223FDuLL);
  if (v10)
  {
    *a2 = v10;
    *a4 = v7 + *a3;
    size_t v8 = v7 + *a3;
LABEL_4:
    *a3 = v8;
    return 1;
  }
  if (dword_100058FD8)
  {
    int v19 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003EFB8();
    }
    *__error() = v19;
  }
  sub_10001FBD8("realloc", v11, v12, v13, v14, v15, v16, v17, v20);
  return 0;
}

_DWORD *sub_10001E634(_DWORD *a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  __srCC_MD4_CTX c = a5;
  return sub_10001E2A4(a1, a2, a3, a4, &__src, 4uLL);
}

_DWORD *sub_10001E660(_DWORD *a1, uint64_t a2, void *a3, size_t a4, char a5)
{
  __srCC_MD4_CTX c = a5;
  return sub_10001E2A4(a1, a2, a3, a4, &__src, 1uLL);
}

_DWORD *sub_10001E68C(_DWORD *a1, uint64_t a2, void *a3, size_t a4, __int16 a5)
{
  __srCC_MD4_CTX c = a5;
  return sub_10001E2A4(a1, a2, a3, a4, &__src, 2uLL);
}

void *sub_10001E6B8(uint64_t a1, void *a2, size_t a3, __int16 a4)
{
  __srCC_MD4_CTX c = a4;
  return sub_10001E250(a1, a2, a3, &__src, 2uLL);
}

void *sub_10001E6E4(uint64_t a1, void *a2, size_t a3, char a4)
{
  __srCC_MD4_CTX c = a4;
  return sub_10001E250(a1, a2, a3, &__src, 1uLL);
}

uint64_t sub_10001E710(uint64_t a1, int a2, void *a3)
{
  uint64_t v8 = 0;
  if (sub_10001E81C(a1, a2, &v8))
  {
    uint64_t v4 = v8;
    *a3 = v8;
    if ((v4 & 0x8000000000000000) == 0) {
      return 1;
    }
    if (!dword_100058FD8)
    {
      uint64_t v7 = "io_read_long negative";
      goto LABEL_15;
    }
    int v6 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003FDA0();
    }
    uint64_t v7 = "io_read_long negative";
LABEL_12:
    *__error() = v6;
LABEL_15:
    sub_10001FC88(v7);
    return 0;
  }
  if (dword_100058FD8)
  {
    int v6 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003E940();
    }
    uint64_t v7 = "io_read_long";
    goto LABEL_12;
  }
  sub_10001FC88("io_read_long");
  return 0;
}

uint64_t sub_10001E81C(uint64_t a1, int a2, void *a3)
{
  uint64_t v11 = 0;
  int v10 = 0;
  if (sub_10001EA48(a1, a2, &v10))
  {
    uint64_t v6 = v10;
    if (v10 != -1)
    {
LABEL_5:
      *a3 = v6;
      return 1;
    }
    if (sub_10001DDD4(a1, a2, (char *)&v11, 8uLL))
    {
      uint64_t v6 = v11;
      goto LABEL_5;
    }
    if (dword_100058FD8)
    {
      int v9 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B728();
      }
      *__error() = v9;
    }
    sub_10001FC88("io_read_buf");
  }
  else
  {
    if (dword_100058FD8)
    {
      int v8 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B82C();
      }
      *__error() = v8;
    }
    sub_10001FC88("io_read_int");
  }
  return 0;
}

uint64_t sub_10001E94C(uint64_t a1, int a2, void *a3)
{
  unsigned int v7 = 0;
  if (sub_10001EA48(a1, a2, &v7))
  {
    if ((v7 & 0x80000000) == 0)
    {
      *a3 = v7;
      return 1;
    }
    if (dword_100058FD8)
    {
      int v6 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003FDD4();
      }
      *__error() = v6;
    }
    sub_10001FB50("io_read_size: negative value");
  }
  else
  {
    if (dword_100058FD8)
    {
      int v5 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B82C();
      }
      *__error() = v5;
    }
    sub_10001FC88("io_read_int");
  }
  return 0;
}

uint64_t sub_10001EA48(uint64_t a1, int a2, _DWORD *a3)
{
  int v6 = 0;
  if (sub_10001DDD4(a1, a2, (char *)&v6, 4uLL))
  {
    *a3 = v6;
    return 1;
  }
  else
  {
    if (dword_100058FD8)
    {
      int v5 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B728();
      }
      *__error() = v5;
    }
    sub_10001FC88("io_read_buf");
    return 0;
  }
}

uint64_t sub_10001EAEC(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned __int16 v6 = 0;
  if (sub_10001DDD4(a1, a2, (char *)&v6, 2uLL))
  {
    *a3 = v6;
    return 1;
  }
  else
  {
    if (dword_100058FD8)
    {
      int v5 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B728();
      }
      *__error() = v5;
    }
    sub_10001FC88("io_read_buf");
    return 0;
  }
}

void *sub_10001EB94(uint64_t a1, void *a2, size_t a3, void *__dst, size_t __n)
{
  if (*a2 + __n > a3) {
    sub_10003FE08();
  }
  uint64_t result = memcpy(__dst, (const void *)(a1 + *a2), __n);
  *a2 += __n;
  return result;
}

void *sub_10001EBE8(uint64_t a1, void *a2, size_t a3, _DWORD *a4)
{
  int __dst = 0;
  uint64_t result = sub_10001EB94(a1, a2, a3, &__dst, 4uLL);
  *a4 = __dst;
  return result;
}

uint64_t sub_10001EC28(uint64_t a1, void *a2, size_t a3, void *a4)
{
  unsigned int __dst = 0;
  sub_10001EB94(a1, a2, a3, &__dst, 4uLL);
  if ((__dst & 0x80000000) != 0)
  {
    if (dword_100058FD8)
    {
      int v6 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003FE34();
      }
      *__error() = v6;
    }
    sub_10001FB50("io_unbuffer_size: negative value");
    return 0;
  }
  else
  {
    *a4 = __dst;
    return 1;
  }
}

uint64_t sub_10001ECCC(uint64_t a1, int a2, char *a3, unint64_t a4)
{
  unsigned __int8 v16 = 0;
  if (!sub_10001DD4C(a1, a2, (char *)&v16))
  {
    if (!dword_100058FD8)
    {
LABEL_8:
      sub_10001FC88("io_read_vstring byte 1");
      return 0;
    }
    int v10 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
    {
LABEL_7:
      *__error() = v10;
      goto LABEL_8;
    }
LABEL_6:
    sub_10003FE68();
    goto LABEL_7;
  }
  unsigned __int8 v8 = v16;
  if (((char)v16 & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  if (!sub_10001DD4C(a1, a2, (char *)&v16))
  {
    if (!dword_100058FD8) {
      goto LABEL_8;
    }
    int v10 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = (v8 << 8) - 0x8000;
  unsigned __int8 v8 = v16;
LABEL_11:
  size_t v11 = v9 | v8;
  if (v11 >= a4)
  {
    if (dword_100058FD8)
    {
      int v13 = *__error();
      uint64_t v14 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003FED0(v11, a4, v14);
      }
      *__error() = v13;
    }
    sub_10001FC88("io_read_vstring: incoming string too large (%zu > %zu)");
  }
  else
  {
    if (sub_10001DDD4(a1, a2, a3, v11)) {
      return 1;
    }
    if (dword_100058FD8)
    {
      int v15 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003FE9C();
      }
      *__error() = v15;
    }
    sub_10001FC88("io_read_vstring buf");
  }
  return 0;
}

uint64_t sub_10001EED0(uint64_t a1, void **a2, unint64_t a3)
{
  sub_10001F200(a2);
  int v5 = a2[3];
  unint64_t v6 = v5 - (unsigned char *)a2[2];
  BOOL v7 = a3 > v6;
  unint64_t v8 = a3 - v6;
  if (!v7) {
    return 1;
  }
  uint64_t v9 = malloc_type_realloc(*a2, (size_t)&v5[v8], 0x272F257uLL);
  if (v9)
  {
    *a2 = v9;
    a2[3] = (char *)a2[3] + v8;
    return 1;
  }
  if (dword_100058FD8)
  {
    int v18 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003EFB8();
    }
    *__error() = v18;
  }
  sub_10001FBD8("realloc", v10, v11, v12, v13, v14, v15, v16, v19);
  return 0;
}

uint64_t sub_10001EF94(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_10001EF9C(uint64_t a1, void *a2, int a3)
{
  unint64_t v21 = 0;
  if (!a2[3]) {
    sub_10003FF58();
  }
  sub_10001F200(a2);
  LOBYTE(v6) = 0;
  do
  {
    while (1)
    {
      int v7 = sub_10001CDD8(a1, a3);
      if (v7 < 1) {
        goto LABEL_32;
      }
      if (!*(_DWORD *)(a1 + 128))
      {
        uint64_t v9 = a2[2] + a2[1];
        uint64_t v10 = a2[3];
        size_t v11 = v10 - v9;
        if (v10 == v9) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      unint64_t v8 = *(void *)(a1 + 136);
      if (!v8) {
        break;
      }
      uint64_t v9 = a2[2] + a2[1];
      unint64_t v12 = a2[3] - v9;
      if (!v12) {
        goto LABEL_32;
      }
      if (v12 >= v8) {
        size_t v11 = *(void *)(a1 + 136);
      }
      else {
        size_t v11 = a2[3] - v9;
      }
LABEL_14:
      if (!sub_10001F240(a3, (void *)(*a2 + v9), v11, (ssize_t *)&v21, 1))
      {
        if (dword_100058FD8)
        {
          int v19 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003FF84();
          }
          char v20 = "io_read_nonblocking";
LABEL_40:
          *__error() = v19;
          goto LABEL_43;
        }
        sub_10001FC88("io_read_nonblocking");
LABEL_44:
        unsigned int v6 = 0;
LABEL_33:
        if (v7 >= 0) {
          return v6;
        }
        else {
          return 0;
        }
      }
      unint64_t v13 = v21;
      if (!v21)
      {
        if (v6)
        {
LABEL_32:
          unsigned int v6 = 1;
          goto LABEL_33;
        }
        if (dword_100058FD8)
        {
          int v19 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003FFB8();
          }
          char v20 = "unexpected eof";
          goto LABEL_40;
        }
        char v20 = "unexpected eof";
LABEL_43:
        sub_10001FC88(v20);
        goto LABEL_44;
      }
      a2[2] += v21;
      *(void *)(a1 + 24) += v13;
      unint64_t v14 = *(void *)(a1 + 136);
      if (v14)
      {
        BOOL v15 = v14 >= v13;
        unint64_t v16 = v14 - v13;
        if (!v15) {
          sub_10003FFEC();
        }
        *(void *)(a1 + 136) = v16;
      }
      unsigned int v6 = 1;
      if (v13 == v11) {
        goto LABEL_33;
      }
    }
  }
  while (sub_10001CF78((void *)a1, a3));
  if (dword_100058FD8)
  {
    int v17 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_100040018();
    }
    *__error() = v17;
  }
  sub_10001FC88("io_read_flush");
  return 0;
}

void *sub_10001F200(void *result)
{
  uint64_t v1 = result[1];
  if (v1)
  {
    uint64_t v2 = result;
    size_t v3 = result[2];
    if (v3) {
      uint64_t result = memmove((void *)*result, (const void *)(*result + v1), v3);
    }
    v2[1] = 0;
  }
  return result;
}

uint64_t sub_10001F240(int a1, void *a2, size_t a3, ssize_t *a4, char a5)
{
  *a4 = 0;
  if (a3)
  {
    *(_DWORD *)&v28.events = (unint64_t)&_mh_execute_header >> 32;
    v28.fd = a1;
    int v10 = poll(&v28, 1u, dword_100058FF0);
    if (!v10)
    {
      if (dword_100058FD8)
      {
        int v20 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004011C();
        }
        *__error() = v20;
      }
      sub_10001FB50("poll: timeout");
      return 0;
    }
    if (v10 == -1)
    {
      if (dword_100058FD8)
      {
        int v18 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003F8A0();
        }
        *__error() = v18;
      }
      int v19 = "poll";
LABEL_9:
      sub_10001FBD8(v19, v11, v12, v13, v14, v15, v16, v17, v27);
      return 0;
    }
    if ((v28.revents & 0x28) != 0)
    {
      if (dword_100058FD8)
      {
        int v21 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000400E8();
        }
        *__error() = v21;
      }
      sub_10001FB50("poll: bad fd");
      return 0;
    }
    if ((v28.revents & 0x11) == 0)
    {
      if (dword_100058FD8)
      {
        int v25 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004004C();
        }
        *__error() = v25;
      }
      sub_10001FB50("poll: unknown event");
      return 0;
    }
    ssize_t v23 = read(a1, a2, a3);
    if (v23)
    {
      if (v23 == -1)
      {
        if (dword_100058FD8)
        {
          int v24 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100040080();
          }
          *__error() = v24;
        }
        int v19 = "read";
        goto LABEL_9;
      }
    }
    else if ((a5 & 1) == 0)
    {
      if (dword_100058FD8)
      {
        int v26 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000400B4();
        }
        *__error() = v26;
      }
      sub_10001FB50("unexpected end of file");
      return 0;
    }
    *a4 = v23;
  }
  return 1;
}

void *sub_10001F508(void *a1, void *a2, size_t a3)
{
  uint64_t result = sub_10001F54C(a1, a2, a3);
  size_t v6 = a1[2] - a3;
  a1[2] = v6;
  if (v6) {
    size_t v6 = a1[1] + a3;
  }
  a1[1] = v6;
  return result;
}

void *sub_10001F54C(void *a1, void *__dst, size_t a3)
{
  if (a1[2] < a3) {
    sub_100040150();
  }
  size_t v3 = (const void *)(*a1 + a1[1]);

  return memcpy(__dst, v3, a3);
}

void *sub_10001F590(void *a1, void *a2)
{
  uint64_t result = sub_10001F54C(a1, a2, 1uLL);
  uint64_t v4 = a1[2] - 1;
  a1[2] = v4;
  if (v4) {
    uint64_t v4 = a1[1] + 1;
  }
  a1[1] = v4;
  return result;
}

uint64_t sub_10001F5D4(void *a1)
{
  unsigned int __dst = 0;
  sub_10001F54C(a1, &__dst, 4uLL);
  return __dst;
}

void *sub_10001F604(void *a1, _DWORD *a2)
{
  int __dst = 0;
  uint64_t result = sub_10001F54C(a1, &__dst, 4uLL);
  uint64_t v5 = a1[2] - 4;
  a1[2] = v5;
  if (v5) {
    uint64_t v5 = a1[1] + 4;
  }
  a1[1] = v5;
  *a2 = __dst;
  return result;
}

void *sub_10001F664(void *a1, _DWORD *a2)
{
  unsigned __int16 __dst = 0;
  uint64_t result = sub_10001F54C(a1, &__dst, 2uLL);
  uint64_t v5 = a1[2] - 2;
  a1[2] = v5;
  if (v5) {
    uint64_t v5 = a1[1] + 2;
  }
  a1[1] = v5;
  *a2 = __dst;
  return result;
}

uint64_t sub_10001F6C8(void *a1, void *a2)
{
  unsigned int v6 = 0;
  sub_10001F604(a1, &v6);
  if ((v6 & 0x80000000) != 0)
  {
    if (dword_100058FD8)
    {
      int v4 = *__error();
      uint64_t v5 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10004017C(v5);
      }
      *__error() = v4;
    }
    sub_10001FB50("%s: negative value", "iobuf_read_size");
    return 0;
  }
  else
  {
    *a2 = v6;
    return 1;
  }
}

uint64_t sub_10001F774(void *a1, char **a2)
{
  unint64_t v2 = a1[2];
  if (!v2) {
    return 0;
  }
  unsigned __int8 __dst = 0;
  uint64_t v5 = *a2;
  if (*a2)
  {
LABEL_3:
    unsigned int v6 = a2[1];
    if (v2 >= a2[2] - v6) {
      size_t v7 = a2[2] - v6;
    }
    else {
      size_t v7 = v2;
    }
    sub_10001F54C(a1, &v6[(void)v5], v7);
    size_t v8 = a1[2] - v7;
    a1[2] = v8;
    if (v8) {
      size_t v8 = a1[1] + v7;
    }
    a1[1] = v8;
    uint64_t v9 = a2[2];
    size_t v10 = (size_t)&a2[1][v7];
    a2[1] = (char *)v10;
    return v10 == (void)v9;
  }
  if (v2 < 2) {
    return 0;
  }
  sub_10001F54C(a1, &__dst, 1uLL);
  uint64_t v12 = a1[2] - 1;
  a1[2] = v12;
  if (v12) {
    uint64_t v12 = a1[1] + 1;
  }
  a1[1] = v12;
  unsigned __int8 v13 = __dst;
  if ((char)__dst < 0)
  {
    uint64_t v14 = (__dst << 8) - 0x8000;
    sub_10001F54C(a1, &__dst, 1uLL);
    uint64_t v15 = a1[2] - 1;
    a1[2] = v15;
    if (v15) {
      uint64_t v15 = a1[1] + 1;
    }
    a1[1] = v15;
    unsigned __int8 v13 = __dst;
  }
  else
  {
    uint64_t v14 = 0;
  }
  size_t v16 = v14 | v13;
  a2[2] = (char *)v16;
  uint64_t v5 = (char *)malloc_type_malloc(v16, 0x5F5A71A3uLL);
  *a2 = v5;
  if (v5)
  {
    unint64_t v2 = a1[2];
    goto LABEL_3;
  }
  if (dword_100058FD8)
  {
    int v24 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003CD90();
    }
    *__error() = v24;
  }
  sub_10001FBD8("malloc", v17, v18, v19, v20, v21, v22, v23, v25);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10001F918(char *a1)
{
  uint64_t v2 = 0;
  while (!strcasecmp((&off_100054938)[v2], a1))
  {
    v2 += 2;
    if (v2 == 36)
    {
      *__error() = 2;
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t result = 0;
  dword_100058668 = (int)(&off_100054938)[v2 + 1];
  return result;
}

void sub_10001F990(uint64_t a1)
{
  uint64_t v2 = (FILE *)qword_1000587F8;
  qword_1000587F8 = a1;
  if (v2) {
    BOOL v3 = __stderrp == v2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    fclose(v2);
  }
  if (a1 || !v2)
  {
    if (a1 && !v2)
    {
      closelog();
    }
  }
  else
  {
    int v4 = dword_100058668;
    openlog("openrsyncd", 9, v4);
  }
}

void sub_10001FA38(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = 0;
  if (dword_100058FDC > a1)
  {
    if (!a2) {
      goto LABEL_7;
    }
    if (vasprintf(&v23, a2, &a9) == -1) {
      return;
    }
    if (a1 <= 0 && v23)
    {
      sub_10001FB08(6, "%s\n", v10, v11, v12, v13, v14, v15, (char)v23);
    }
    else
    {
LABEL_7:
      if (a1 >= 1)
      {
        char v16 = getprogname();
        sub_10001FB08(6, "%s: %s%s\n", v17, v18, v19, v20, v21, v22, v16);
      }
    }
    free(v23);
  }
}

void sub_10001FB08(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (qword_1000587F8) {
    vfprintf((FILE *)qword_1000587F8, a2, &a9);
  }
  else {
    vsyslog(a1, a2, &a9);
  }
}

void sub_10001FB50(char *a1, ...)
{
  va_start(va, a1);
  size_t v8 = 0;
  if (!a1 || vasprintf(&v8, a1, va) != -1)
  {
    char v1 = getprogname();
    sub_10001FB08(3, "%s: error%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001FBD8(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v18 = 0;
  int v10 = *__error();
  if (!a1 || vasprintf(&v18, a1, &a9) != -1)
  {
    char v11 = getprogname();
    strerror(v10);
    sub_10001FB08(3, "%s: error%s%s: %s\n", v12, v13, v14, v15, v16, v17, v11);
    free(v18);
  }
}

void sub_10001FC88(char *a1, ...)
{
  va_start(va, a1);
  size_t v8 = 0;
  if (dword_100058FDC >= 1 && (!a1 || vasprintf(&v8, a1, va) != -1))
  {
    char v1 = getprogname();
    sub_10001FB08(3, "%s: error%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001FD28(char *a1, ...)
{
  va_start(va, a1);
  size_t v8 = 0;
  if (dword_100058FDC >= 1 && (!a1 || vasprintf(&v8, a1, va) != -1))
  {
    char v1 = getprogname();
    sub_10001FB08(4, "%s: warning%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001FDC8(char *a1, ...)
{
  va_start(va, a1);
  size_t v8 = 0;
  if (!a1 || vasprintf(&v8, a1, va) != -1)
  {
    char v1 = getprogname();
    sub_10001FB08(4, "%s: warning%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001FE50(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v20 = 0;
  char v11 = __error();
  if (dword_100058FDC >= a1)
  {
    int v12 = *v11;
    if (!a2 || vasprintf(&v20, a2, &a9) != -1)
    {
      char v13 = getprogname();
      strerror(v12);
      sub_10001FB08(4, "%s: warning%s%s: %s\n", v14, v15, v16, v17, v18, v19, v13);
      free(v20);
    }
  }
}

uint64_t sub_10001FF18(uint64_t a1, char *a2, unsigned char *a3)
{
  if (*(_DWORD *)(*(void *)a1 + 212)) {
    return fprintf(*(FILE **)(*(void *)a1 + 456), a2, a3);
  }
  usbuf_new();
  __darwin_ct_rune_t v7 = *a3;
  if (*a3)
  {
    size_t v8 = a3 + 1;
    do
    {
      if ((v7 & 0x80) != 0) {
        __uint32_t v9 = __maskrune(v7, 0x40000uLL);
      }
      else {
        __uint32_t v9 = _DefaultRuneLocale.__runetype[v7] & 0x40000;
      }
      if (v7 == 9 || v9) {
        usbuf_putc();
      }
      else {
        usbuf_printf();
      }
      __darwin_ct_rune_t v10 = *v8++;
      __darwin_ct_rune_t v7 = v10;
    }
    while (v10);
  }
  usbuf_finish();
  char v11 = *(FILE **)(*(void *)a1 + 456);
  uint64_t v12 = usbuf_data();
  fprintf(v11, a2, v12);

  return usbuf_delete();
}

uint64_t sub_10002005C(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(const char **)(*a1 + 448);
  if (!v3) {
    return 0;
  }
  size_t v6 = strlen(*(const char **)(*a1 + 448));
  if (*v3)
  {
    __darwin_ct_rune_t v7 = &v3[v6];
    do
    {
      size_t v8 = v3;
      while (v3 < v7)
      {
        if (*v3 == 37)
        {
          if (a3)
          {
            fwrite(v8, 1uLL, v3 - v8, *(FILE **)(*a1 + 456));
            if (v3[1] == 37)
            {
              fputc(37, *(FILE **)(*a1 + 456));
              goto LABEL_12;
            }
LABEL_13:
            size_t v8 = sub_1000201AC();
            if (!v8) {
              return 0;
            }
            uint64_t v3 = v8;
            if (!*v8) {
              return 0;
            }
          }
          else
          {
            if (v3[1] != 37) {
              goto LABEL_13;
            }
LABEL_12:
            size_t v8 = v3 + 2;
            v3 += 2;
          }
        }
        else
        {
          ++v3;
        }
      }
      if (a3) {
        fwrite(v8, 1uLL, v3 - v8, *(FILE **)(*a1 + 456));
      }
    }
    while (*v3);
  }
  if (a3) {
    fputc(10, *(FILE **)(*a1 + 456));
  }
  a1[4] = a1[3];
  a1[7] = a1[6];
  return 0;
}

const char *sub_1000201AC()
{
  uint64_t v0 = (const char *)__chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  size_t v6 = v5;
  size_t v8 = v7;
  __uint32_t v9 = v0;
  strlen(v0);
  __darwin_ct_rune_t v10 = &v86[-((__chkstk_darwin() + 16) & 0xFFFFFFFFFFFFFFF0)];
  *(_WORD *)__darwin_ct_rune_t v10 = 37;
  char v11 = v10 + 1;
  uint64_t v12 = v9 + 1;
  v91[0] = 37;
  size_t v13 = strspn(v12, "'+- 0123456789");
  if (v13 - 8188 <= 0xFFFFFFFFFFFFDFFELL)
  {
    if (dword_100058FD8)
    {
      int v14 = *__error();
      uint64_t v15 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100040200(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      *__error() = v14;
    }
    sub_10001FB50("Insufficient buffer for width format");
    return 0;
  }
  size_t v23 = v13;
  __strlcpy_chk();
  if (strchr(v91, 39))
  {
    size_t v24 = strlen(v91);
    char v25 = malloc_type_malloc(v24, 0x68D8F8A6uLL);
    if (v25)
    {
      uint64_t v33 = v25;
      unsigned int v87 = v6;
      int v34 = 0;
      uint64_t v35 = v91;
      uint64_t v36 = v25;
      while (1)
      {
        int v37 = *v35;
        if (v37 == 39)
        {
          ++v34;
        }
        else
        {
          if (!*v35)
          {
            uint64_t v88 = v4;
            unsigned char *v36 = 0;
            __strlcpy_chk();
            v23 -= v34;
            free(v33);
            goto LABEL_17;
          }
          *v36++ = v37;
        }
        ++v35;
      }
    }
    if (dword_100058FD8)
    {
      int v58 = *__error();
      uint64_t v59 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100040270(v59, v60, v61, v62, v63, v64, v65, v66);
      }
      *__error() = v58;
    }
    sub_10001FBD8("malloc", v26, v27, v28, v29, v30, v31, v32, v86[0]);
    return 0;
  }
  unsigned int v87 = v6;
  uint64_t v88 = v4;
  int v34 = 0;
LABEL_17:
  char v38 = *v12;
  if (!*v12)
  {
LABEL_20:
    if (dword_100058FD8)
    {
      int v41 = *__error();
      uint64_t v42 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100040238(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      *__error() = v41;
    }
    sub_10001FB50("missing format character");
    return 0;
  }
  while (1)
  {
    int v39 = v38;
    if (!memchr("'-+ 0", v38, 6uLL)) {
      break;
    }
    int v40 = *(unsigned __int8 *)++v12;
    *char v11 = v38;
    *++char v11 = 0;
    char v38 = v40;
    if (!v40) {
      goto LABEL_20;
    }
  }
  if ((v38 - 48) <= 9)
  {
    do
    {
      uint64_t v52 = v11;
      int v53 = *++v12;
      int v39 = v53;
      *++char v11 = 0;
      char *v52 = v38;
      char v38 = v53;
    }
    while ((v53 - 48) < 0xA);
  }
  *char v11 = v38;
  v11[1] = 0;
  unsigned int v50 = v12 + 1;
  if (v39 > 76)
  {
    uint64_t v54 = v88;
    switch(v39)
    {
      case 'b':
        *v8 |= 2u;
        if (v2)
        {
          uint64_t v55 = v87;
          uint64_t v56 = (char *)(v87[3] + v87[6] - (v87[4] + v87[7]));
          switch(v34)
          {
            case 0:
            case 1:
              strcpy(&v91[v23 + 1], "ld");
              int v57 = *(FILE **)(*v55 + 456);
              uint64_t v84 = v56;
              goto LABEL_84;
            case 2:
            case 3:
              humanize_number();
              *(_WORD *)&v91[v23 + 1] = 115;
              uint64_t v82 = *v55;
              goto LABEL_79;
            default:
              return v50;
          }
        }
        return v50;
      case 'c':
        int v78 = *v8 | 2;
        goto LABEL_60;
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'o':
      case 'q':
      case 'r':
      case 's':
        return v50;
      case 'f':
        if (!v2) {
          return v50;
        }
        *(_WORD *)&v91[v23 + 1] = 115;
        unint64_t v69 = *(char **)v54;
        goto LABEL_69;
      case 'i':
        int v78 = *v8 | 1;
LABEL_60:
        int *v8 = v78;
        return v50;
      case 'l':
        if (v2)
        {
          switch(v34)
          {
            case 0:
              strcpy(&v91[v23 + 1], "ld");
              goto LABEL_87;
            case 1:
              *(_DWORD *)&v91[v23 + 1] = 6581287;
LABEL_87:
              int v57 = *(FILE **)(*v87 + 456);
              unsigned int v71 = *(char **)(v54 + 40);
              goto LABEL_83;
            case 2:
            case 3:
              humanize_number();
              goto LABEL_78;
            default:
              return v50;
          }
        }
        return v50;
      case 'n':
        if (!v2) {
          return v50;
        }
        *(_WORD *)&v91[v23 + 1] = 115;
        if ((*(_WORD *)(v54 + 24) & 0xF000) == 0x4000) {
          snprintf(v90, 0x2000uLL, "%s/");
        }
        else {
          snprintf(v90, 0x2000uLL, "%s");
        }
        unint64_t v69 = v90;
LABEL_69:
        uint64_t v70 = (uint64_t)v87;
        goto LABEL_70;
      case 'p':
        if (v2)
        {
          *(_WORD *)&v91[v23 + 1] = 100;
          int v79 = *(FILE **)(*v87 + 456);
          uint64_t v85 = getpid();
          fprintf(v79, v91, v85);
        }
        return v50;
      case 't':
        time_t v89 = 0;
        if (!v2) {
          return v50;
        }
        time(&v89);
        unsigned int v80 = &v89;
        goto LABEL_77;
      default:
        if (v39 == 77)
        {
          if (!v2) {
            return v50;
          }
          unsigned int v80 = (const time_t *)(v88 + 48);
LABEL_77:
          unsigned int v81 = localtime(v80);
          strftime(v90, 0x2000uLL, "%Y/%m/%d-%H:%M:%S", v81);
          goto LABEL_78;
        }
        if (v39 != 85 || !v2) {
          return v50;
        }
        unsigned int v71 = (char *)*(unsigned int *)(v88 + 28);
        size_t v72 = v23 + 1;
        size_t v73 = v23 + 2;
        if (v71)
        {
          v91[v72] = 100;
          v91[v73] = 0;
          uint64_t v74 = *v87;
          goto LABEL_55;
        }
        v91[v72] = 115;
        v91[v73] = 0;
        uint64_t v83 = *v87;
        break;
    }
    goto LABEL_82;
  }
  if (v39 == 66)
  {
    if (!v2) {
      return v50;
    }
    sub_10001BDD4(*(unsigned __int16 *)(v88 + 24), (uint64_t)v90);
LABEL_78:
    *(_WORD *)&v91[v23 + 1] = 115;
    uint64_t v82 = *v87;
LABEL_79:
    int v57 = *(FILE **)(v82 + 456);
    uint64_t v84 = v90;
LABEL_84:
    fprintf(v57, v91, v84);
    return v50;
  }
  if (v39 == 71)
  {
    uint64_t v75 = v87;
    if (!v2) {
      return v50;
    }
    unsigned int v71 = (char *)*(unsigned int *)(v88 + 32);
    size_t v76 = v23 + 1;
    size_t v77 = v23 + 2;
    if (v71)
    {
      v91[v76] = 100;
      v91[v77] = 0;
      uint64_t v74 = *v75;
LABEL_55:
      int v57 = *(FILE **)(v74 + 456);
      goto LABEL_83;
    }
    v91[v76] = 115;
    v91[v77] = 0;
    uint64_t v83 = *v75;
LABEL_82:
    int v57 = *(FILE **)(v83 + 456);
    unsigned int v71 = "DEFAULT";
LABEL_83:
    uint64_t v84 = v71;
    goto LABEL_84;
  }
  int v67 = v87;
  if (v39 == 76)
  {
    if (v2)
    {
      char v68 = *(const char **)(v88 + 88);
      if (v68)
      {
        snprintf(v90, 0x2000uLL, "-> %s", v68);
        *(_WORD *)&v91[v23 + 1] = 115;
        unint64_t v69 = v90;
        uint64_t v70 = (uint64_t)v67;
LABEL_70:
        sub_10001FF18(v70, v91, v69);
      }
    }
  }
  return v50;
}

uint64_t sub_1000209F0(uint64_t a1, char *a2, size_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 176) > 2u)
  {
    size_t v5 = 0;
  }
  else
  {
    humanize_number();
    size_t v5 = snprintf(a2, a3, "%s", v7);
  }
  if (v5 < a3) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_100020B00(void *a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6, unsigned char *a7, int a8)
{
  if (a7 && a8 == 112 && *a7 == 49 && a1)
  {
    a1[6] = 0;
    char v11 = (void *(*)(uint64_t, int, int))a1[8];
    if (!v11)
    {
      char v11 = sub_100026CAC;
      a1[8] = sub_100026CAC;
      a1[10] = 0;
    }
    if (!a1[9]) {
      a1[9] = sub_100026CBC;
    }
    if (a2 == -1) {
      unsigned int v12 = 6;
    }
    else {
      unsigned int v12 = a2;
    }
    unsigned int v13 = a4 - 16;
    if (a4 > 0xF)
    {
      int v14 = 2;
    }
    else
    {
      unsigned int v13 = a4;
      int v14 = 1;
    }
    if (a4 < 0) {
      unsigned int v15 = -a4;
    }
    else {
      unsigned int v15 = v13;
    }
    if (a4 < 0) {
      int v16 = 0;
    }
    else {
      int v16 = v14;
    }
    if (a6 <= 4 && v12 <= 9 && a3 == 8 && (a5 - 10) >= 0xFFFFFFF7 && v15 >= 8 && v15 <= 0xF)
    {
      uint64_t v17 = (uint64_t)v11(a1[10], 1, 5928);
      if (v17)
      {
        uint64_t v18 = v17;
        if (v15 == 8) {
          int v19 = 9;
        }
        else {
          int v19 = v15;
        }
        a1[7] = v17;
        *(void *)uint64_t v17 = a1;
        *(_DWORD *)(v17 + 44) = v16;
        *(void *)(v17 + 48) = 0;
        *(_DWORD *)(v17 + 68) = 1 << v19;
        *(_DWORD *)(v17 + 72) = v19;
        *(_DWORD *)(v17 + 76) = (1 << v19) - 1;
        *(_DWORD *)(v17 + 116) = 128 << a5;
        *(_DWORD *)(v17 + 120) = a5 + 7;
        *(_DWORD *)(v17 + 124) = (128 << a5) - 1;
        *(_DWORD *)(v17 + 128) = (a5 + 9) / 3u;
        *(void *)(v17 + 80) = ((uint64_t (*)(void))a1[8])(a1[10]);
        *(void *)(v18 + 96) = ((uint64_t (*)(void, void, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 68), 2);
        *(void *)(v18 + 104) = ((uint64_t (*)(void, void, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 116), 2);
        *(_DWORD *)(v18 + 5880) = 64 << a5;
        uint64_t v20 = ((uint64_t (*)(void))a1[8])(a1[10]);
        uint64_t v21 = *(unsigned int *)(v18 + 5880);
        *(void *)(v18 + 16) = v20;
        *(void *)(v18 + 24) = 4 * v21;
        if (*(void *)(v18 + 80) && *(void *)(v18 + 96) && *(void *)(v18 + 104) && v20)
        {
          *(void *)(v18 + 5888) = v20 + (v21 & 0xFFFFFFFE);
          *(void *)(v18 + 5872) = v20 + 3 * v21;
          *(_DWORD *)(v18 + 180) = v12;
          *(_DWORD *)(v18 + 184) = a6;
          *(unsigned char *)(v18 + 60) = 8;
          sub_100020E74((uint64_t)a1);
        }
        else
        {
          *(_DWORD *)(v18 + 8) = 666;
          a1[6] = "insufficient memory";
          sub_100020D80((uint64_t)a1);
        }
      }
    }
  }
}

uint64_t sub_100020D80(uint64_t a1)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    return 4294967294;
  }
  int v3 = *(_DWORD *)(v2 + 8);
  BOOL v4 = (v3 - 69) > 0x2C || ((1 << (v3 - 69)) & 0x100400400011) == 0;
  if (v4 && v3 != 666 && v3 != 42) {
    return 4294967294;
  }
  if (*(void *)(v2 + 16))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v2 + 16));
    uint64_t v2 = *(void *)(a1 + 56);
  }
  if (*(void *)(v2 + 104))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v2 + 104));
    uint64_t v2 = *(void *)(a1 + 56);
  }
  if (*(void *)(v2 + 96))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v2 + 96));
    uint64_t v2 = *(void *)(a1 + 56);
  }
  if (*(void *)(v2 + 80))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v2 + 80));
    uint64_t v2 = *(void *)(a1 + 56);
  }
  (*(void (**)(void, uint64_t))(a1 + 72))(*(void *)(a1 + 80), v2);
  *(void *)(a1 + 56) = 0;
  if (v3 == 113) {
    return 4294967293;
  }
  else {
    return 0;
  }
}

double sub_100020E74(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
      {
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 88) = 2;
        *(_DWORD *)(v2 + 40) = 0;
        *(void *)(v2 + 32) = *(void *)(v2 + 16);
        int v3 = *(_DWORD *)(v2 + 44);
        if (v3 < 0)
        {
          int v3 = -v3;
          *(_DWORD *)(v2 + 44) = v3;
        }
        if (v3) {
          int v4 = 42;
        }
        else {
          int v4 = 113;
        }
        *(_DWORD *)(v2 + 8) = v4;
        if (v3 == 2) {
          uint64_t v5 = sub_10001BB48(0, 0, 0);
        }
        else {
          uint64_t v5 = sub_100010FE4(0, 0, 0);
        }
        *(void *)(a1 + 96) = v5;
        *(_DWORD *)(v2 + 64) = 0;
        sub_100039704(v2);
        *(void *)(v2 + 88) = 2 * *(unsigned int *)(v2 + 68);
        size_t v6 = *(char **)(v2 + 104);
        size_t v7 = 2 * (*(_DWORD *)(v2 + 116) - 1);
        *(_WORD *)&v6[v7] = 0;
        bzero(v6, v7);
        size_t v8 = (unsigned __int16 *)((char *)&unk_100054A58 + 16 * *(int *)(v2 + 180));
        int v9 = v8[2];
        *(_DWORD *)(v2 + 188) = *v8;
        *(_DWORD *)(v2 + 192) = v9;
        int v10 = v8[1];
        *(_DWORD *)(v2 + 172) = v8[3];
        *(_DWORD *)(v2 + 176) = v10;
        *(void *)(v2 + 136) = 0;
        *(void *)&double result = 0x200000000;
        *(void *)(v2 + 164) = 0x200000000;
        *(_DWORD *)(v2 + 144) = 2;
        *(void *)(v2 + 152) = 0;
        *(_DWORD *)(v2 + 112) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_100020FB0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t result = 4294967294;
  if (a2 <= 6)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      if (!*(void *)(a1 + 24)
        || !*(void *)a1 && *(_DWORD *)(a1 + 8)
        || (int v6 = *(_DWORD *)(v5 + 8), a2 != 4) && v6 == 666)
      {
        *(void *)(a1 + 48) = "stream error";
        return result;
      }
      if (!*(_DWORD *)(a1 + 32)) {
        goto LABEL_136;
      }
      *(void *)uint64_t v5 = a1;
      int v7 = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(v5 + 64) = a2;
      if (v6 == 42)
      {
        if (*(_DWORD *)(v5 + 44) == 2)
        {
          *(void *)(a1 + 96) = sub_10001BB48(0, 0, 0);
          uint64_t v8 = *(void *)(v5 + 16);
          uint64_t v9 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v9 + 1;
          *(unsigned char *)(v8 + v9) = 31;
          uint64_t v10 = *(void *)(v5 + 16);
          uint64_t v11 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v11 + 1;
          *(unsigned char *)(v10 + v11) = -117;
          uint64_t v12 = *(void *)(v5 + 16);
          uint64_t v13 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v13 + 1;
          *(unsigned char *)(v12 + v13) = 8;
          uint64_t v14 = *(void *)(v5 + 48);
          if (!v14)
          {
            uint64_t v52 = *(void *)(v5 + 16);
            uint64_t v53 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v53 + 1;
            *(unsigned char *)(v52 + v53) = 0;
            uint64_t v54 = *(void *)(v5 + 16);
            uint64_t v55 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v55 + 1;
            *(unsigned char *)(v54 + v55) = 0;
            uint64_t v56 = *(void *)(v5 + 16);
            uint64_t v57 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v57 + 1;
            *(unsigned char *)(v56 + v57) = 0;
            uint64_t v58 = *(void *)(v5 + 16);
            uint64_t v59 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v59 + 1;
            *(unsigned char *)(v58 + v59) = 0;
            uint64_t v60 = *(void *)(v5 + 16);
            uint64_t v61 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v61 + 1;
            *(unsigned char *)(v60 + v61) = 0;
            int v62 = *(_DWORD *)(v5 + 180);
            if (v62 == 9)
            {
              char v63 = 2;
            }
            else if (*(int *)(v5 + 184) > 1 || v62 < 2)
            {
              char v63 = 4;
            }
            else
            {
              char v63 = 0;
            }
            uint64_t v112 = *(void *)(v5 + 16);
            uint64_t v113 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v113 + 1;
            *(unsigned char *)(v112 + v113) = v63;
            uint64_t v114 = *(void *)(v5 + 16);
            uint64_t v115 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v115 + 1;
            *(unsigned char *)(v114 + v115) = 7;
LABEL_127:
            *(_DWORD *)(v5 + 8) = 113;
            goto LABEL_128;
          }
          char v15 = (*(_DWORD *)v14 != 0) | (2 * (*(_DWORD *)(v14 + 68) != 0)) | (4 * (*(void *)(v14 + 24) != 0)) | (8 * (*(void *)(v14 + 40) != 0)) | (16 * (*(void *)(v14 + 56) != 0));
          uint64_t v16 = *(void *)(v5 + 16);
          uint64_t v17 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v17 + 1;
          *(unsigned char *)(v16 + v17) = v15;
          uint64_t v18 = *(void *)(*(void *)(v5 + 48) + 8);
          uint64_t v19 = *(void *)(v5 + 16);
          uint64_t v20 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v20 + 1;
          *(unsigned char *)(v19 + v20) = v18;
          uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8) >> 8;
          uint64_t v22 = *(void *)(v5 + 16);
          uint64_t v23 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v23 + 1;
          *(unsigned char *)(v22 + v23) = v21;
          uint64_t v24 = *(void *)(*(void *)(v5 + 48) + 8) >> 16;
          uint64_t v25 = *(void *)(v5 + 16);
          uint64_t v26 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v26 + 1;
          *(unsigned char *)(v25 + v26) = v24;
          uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8) >> 24;
          uint64_t v28 = *(void *)(v5 + 16);
          uint64_t v29 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v29 + 1;
          *(unsigned char *)(v28 + v29) = v27;
          int v30 = *(_DWORD *)(v5 + 180);
          if (v30 == 9)
          {
            char v31 = 2;
          }
          else if (*(int *)(v5 + 184) > 1 || v30 < 2)
          {
            char v31 = 4;
          }
          else
          {
            char v31 = 0;
          }
          uint64_t v65 = *(void *)(v5 + 16);
          uint64_t v66 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v66 + 1;
          *(unsigned char *)(v65 + v66) = v31;
          char v67 = *(_DWORD *)(*(void *)(v5 + 48) + 20);
          uint64_t v68 = *(void *)(v5 + 16);
          uint64_t v69 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v69 + 1;
          *(unsigned char *)(v68 + v69) = v67;
          uint64_t v70 = *(void *)(v5 + 48);
          if (*(void *)(v70 + 24))
          {
            char v71 = *(_DWORD *)(v70 + 32);
            uint64_t v72 = *(void *)(v5 + 16);
            uint64_t v73 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v73 + 1;
            *(unsigned char *)(v72 + v73) = v71;
            int v74 = *(_DWORD *)(*(void *)(v5 + 48) + 32) >> 8;
            uint64_t v75 = *(void *)(v5 + 16);
            uint64_t v76 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v76 + 1;
            *(unsigned char *)(v75 + v76) = v74;
            uint64_t v70 = *(void *)(v5 + 48);
          }
          if (*(_DWORD *)(v70 + 68)) {
            *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), *(int **)(v5 + 16), *(_DWORD *)(v5 + 40));
          }
          *(_DWORD *)(v5 + 56) = 0;
          *(_DWORD *)(v5 + 8) = 69;
LABEL_49:
          uint64_t v77 = *(void *)(v5 + 48);
          if (!*(void *)(v77 + 24)) {
            goto LABEL_68;
          }
          unsigned int v78 = *(_DWORD *)(v5 + 40);
          unsigned int v79 = *(_DWORD *)(v5 + 56);
          while (1)
          {
            if (v79 >= *(unsigned __int16 *)(v77 + 32)) {
              goto LABEL_63;
            }
            uint64_t v80 = *(unsigned int *)(v5 + 40);
            if (*(void *)(v5 + 24) == v80)
            {
              if (*(_DWORD *)(v77 + 68)) {
                BOOL v81 = v80 > v78;
              }
              else {
                BOOL v81 = 0;
              }
              if (v81) {
                *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), (int *)(*(void *)(v5 + 16) + v78), v80 - v78);
              }
              sub_100021A90((void *)a1);
              uint64_t v80 = *(unsigned int *)(v5 + 40);
              uint64_t v77 = *(void *)(v5 + 48);
              if (*(void *)(v5 + 24) == v80)
              {
                unsigned int v78 = *(_DWORD *)(v5 + 40);
LABEL_63:
                if (*(_DWORD *)(v77 + 68))
                {
                  unsigned int v84 = *(_DWORD *)(v5 + 40);
                  if (v84 > v78)
                  {
                    *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), (int *)(*(void *)(v5 + 16) + v78), v84 - v78);
                    uint64_t v77 = *(void *)(v5 + 48);
                  }
                }
                if (*(_DWORD *)(v5 + 56) == *(_DWORD *)(v77 + 32))
                {
                  *(_DWORD *)(v5 + 56) = 0;
LABEL_68:
                  *(_DWORD *)(v5 + 8) = 73;
LABEL_72:
                  if (*(void *)(v77 + 40))
                  {
                    unsigned int v85 = *(_DWORD *)(v5 + 40);
                    do
                    {
                      uint64_t v86 = *(unsigned int *)(v5 + 40);
                      uint64_t v87 = *(void *)(v5 + 48);
                      if (*(void *)(v5 + 24) == v86)
                      {
                        if (*(_DWORD *)(v87 + 68)) {
                          BOOL v88 = v86 > v85;
                        }
                        else {
                          BOOL v88 = 0;
                        }
                        if (v88) {
                          *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), (int *)(*(void *)(v5 + 16) + v85), v86 - v85);
                        }
                        sub_100021A90((void *)a1);
                        uint64_t v86 = *(unsigned int *)(v5 + 40);
                        if (*(void *)(v5 + 24) == v86)
                        {
                          char v92 = 0;
                          goto LABEL_86;
                        }
                        uint64_t v87 = *(void *)(v5 + 48);
                        unsigned int v85 = *(_DWORD *)(v5 + 40);
                      }
                      uint64_t v89 = *(void *)(v87 + 40);
                      uint64_t v90 = *(unsigned int *)(v5 + 56);
                      *(_DWORD *)(v5 + 56) = v90 + 1;
                      LODWORD(v89) = *(unsigned __int8 *)(v89 + v90);
                      uint64_t v91 = *(void *)(v5 + 16);
                      *(_DWORD *)(v5 + 40) = v86 + 1;
                      *(unsigned char *)(v91 + v86) = v89;
                    }
                    while (v89);
                    char v92 = 1;
                    LODWORD(v86) = v85;
LABEL_86:
                    if (*(_DWORD *)(*(void *)(v5 + 48) + 68))
                    {
                      unsigned int v93 = *(_DWORD *)(v5 + 40);
                      if (v93 > v86) {
                        *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), (int *)(*(void *)(v5 + 16) + v86), v93 - v86);
                      }
                    }
                    if (v92)
                    {
                      *(_DWORD *)(v5 + 56) = 0;
                      goto LABEL_91;
                    }
                    int v6 = *(_DWORD *)(v5 + 8);
LABEL_93:
                    if (v6 != 91) {
                      goto LABEL_114;
                    }
                  }
                  else
                  {
LABEL_91:
                    *(_DWORD *)(v5 + 8) = 91;
                  }
                  if (!*(void *)(*(void *)(v5 + 48) + 56)) {
                    goto LABEL_112;
                  }
                  unsigned int v94 = *(_DWORD *)(v5 + 40);
                  while (1)
                  {
                    uint64_t v95 = *(unsigned int *)(v5 + 40);
                    uint64_t v96 = *(void *)(v5 + 48);
                    if (*(void *)(v5 + 24) == v95)
                    {
                      if (*(_DWORD *)(v96 + 68)) {
                        BOOL v97 = v95 > v94;
                      }
                      else {
                        BOOL v97 = 0;
                      }
                      if (v97) {
                        *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), (int *)(*(void *)(v5 + 16) + v94), v95 - v94);
                      }
                      sub_100021A90((void *)a1);
                      uint64_t v95 = *(unsigned int *)(v5 + 40);
                      if (*(void *)(v5 + 24) == v95)
                      {
                        char v101 = 0;
LABEL_108:
                        if (*(_DWORD *)(*(void *)(v5 + 48) + 68))
                        {
                          unsigned int v102 = *(_DWORD *)(v5 + 40);
                          if (v102 > v95) {
                            *(void *)(a1 + 96) = sub_10001BB48(*(void *)(a1 + 96), (int *)(*(void *)(v5 + 16) + v95), v102 - v95);
                          }
                        }
                        if (v101)
                        {
LABEL_112:
                          *(_DWORD *)(v5 + 8) = 103;
                          goto LABEL_115;
                        }
                        int v6 = *(_DWORD *)(v5 + 8);
LABEL_114:
                        if (v6 == 103)
                        {
LABEL_115:
                          if (!*(_DWORD *)(*(void *)(v5 + 48) + 68)) {
                            goto LABEL_127;
                          }
                          unsigned int v103 = *(_DWORD *)(v5 + 40);
                          unint64_t v104 = v103 + 2;
                          unint64_t v105 = *(void *)(v5 + 24);
                          if (v105 < v104)
                          {
                            sub_100021A90((void *)a1);
                            unsigned int v103 = *(_DWORD *)(v5 + 40);
                            unint64_t v105 = *(void *)(v5 + 24);
                            unint64_t v104 = v103 + 2;
                          }
                          if (v105 >= v104)
                          {
                            uint64_t v106 = *(void *)(a1 + 96);
                            uint64_t v107 = *(void *)(v5 + 16);
                            *(_DWORD *)(v5 + 40) = v103 + 1;
                            *(unsigned char *)(v107 + v103) = v106;
                            uint64_t v108 = *(void *)(a1 + 96) >> 8;
                            uint64_t v109 = *(void *)(v5 + 16);
                            uint64_t v110 = *(unsigned int *)(v5 + 40);
                            *(_DWORD *)(v5 + 40) = v110 + 1;
                            *(unsigned char *)(v109 + v110) = v108;
                            *(void *)(a1 + 96) = sub_10001BB48(0, 0, 0);
                            goto LABEL_127;
                          }
                        }
LABEL_128:
                        if (*(_DWORD *)(v5 + 40))
                        {
                          sub_100021A90((void *)a1);
                          if (*(_DWORD *)(a1 + 32)) {
                            goto LABEL_130;
                          }
LABEL_155:
                          uint64_t result = 0;
                          *(_DWORD *)(v5 + 64) = -1;
                          return result;
                        }
                        if (!*(_DWORD *)(a1 + 8) && a2 != 4 && v7 >= (int)a2)
                        {
LABEL_136:
                          *(void *)(a1 + 48) = "buffer error";
                          return 4294967291;
                        }
LABEL_130:
                        int v116 = *(_DWORD *)(v5 + 8);
                        int v117 = *(_DWORD *)(a1 + 8);
                        if (v116 != 666)
                        {
                          if (!v117) {
                            goto LABEL_138;
                          }
                          goto LABEL_139;
                        }
                        if (v117) {
                          goto LABEL_136;
                        }
LABEL_138:
                        if (*(_DWORD *)(v5 + 164))
                        {
LABEL_139:
                          int v118 = (*((uint64_t (**)(uint64_t, uint64_t))&unk_100054A58
                                  + 2 * *(int *)(v5 + 180)
                                  + 1))(v5, a2);
                          if ((v118 & 0xFFFFFFFE) == 2) {
                            *(_DWORD *)(v5 + 8) = 666;
                          }
                          if ((v118 & 0xFFFFFFFD) != 0)
                          {
                            if (v118 == 1)
                            {
                              if (a2 == 1)
                              {
                                sub_1000398F0(v5);
                              }
                              else
                              {
                                sub_1000397B8(v5, 0, 0, 0);
                                if (a2 == 3)
                                {
                                  unsigned int v119 = *(char **)(v5 + 104);
                                  size_t v120 = 2 * (*(_DWORD *)(v5 + 116) - 1);
                                  *(_WORD *)&v119[v120] = 0;
                                  bzero(v119, v120);
                                }
                              }
                              sub_100021A90((void *)a1);
                              if (!*(_DWORD *)(a1 + 32)) {
                                goto LABEL_155;
                              }
                            }
                            goto LABEL_153;
                          }
                          if (!*(_DWORD *)(a1 + 32)) {
                            goto LABEL_155;
                          }
                        }
                        else if (a2)
                        {
                          if (v116 != 666) {
                            goto LABEL_139;
                          }
LABEL_153:
                          if (a2 == 4)
                          {
                            int v121 = *(_DWORD *)(v5 + 44);
                            if (v121 < 1) {
                              return 1;
                            }
                            unint64_t v122 = *(void *)(a1 + 96);
                            if (v121 == 2)
                            {
                              uint64_t v123 = *(void *)(v5 + 16);
                              uint64_t v124 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v124 + 1;
                              *(unsigned char *)(v123 + v124) = v122;
                              uint64_t v125 = *(void *)(a1 + 96) >> 8;
                              uint64_t v126 = *(void *)(v5 + 16);
                              uint64_t v127 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v127 + 1;
                              *(unsigned char *)(v126 + v127) = v125;
                              uint64_t v128 = *(void *)(a1 + 96) >> 16;
                              uint64_t v129 = *(void *)(v5 + 16);
                              uint64_t v130 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v130 + 1;
                              *(unsigned char *)(v129 + v130) = v128;
                              uint64_t v131 = *(void *)(a1 + 96) >> 24;
                              uint64_t v132 = *(void *)(v5 + 16);
                              uint64_t v133 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v133 + 1;
                              *(unsigned char *)(v132 + v133) = v131;
                              uint64_t v134 = *(void *)(a1 + 16);
                              uint64_t v135 = *(void *)(v5 + 16);
                              uint64_t v136 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v136 + 1;
                              *(unsigned char *)(v135 + v136) = v134;
                              uint64_t v137 = *(void *)(a1 + 16) >> 8;
                              uint64_t v138 = *(void *)(v5 + 16);
                              uint64_t v139 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v139 + 1;
                              *(unsigned char *)(v138 + v139) = v137;
                              uint64_t v140 = *(void *)(a1 + 16) >> 16;
                              uint64_t v141 = *(void *)(v5 + 16);
                              uint64_t v142 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v142 + 1;
                              *(unsigned char *)(v141 + v142) = v140;
                              uint64_t v143 = *(void *)(a1 + 16) >> 24;
                            }
                            else
                            {
                              unint64_t v144 = v122 >> 16;
                              uint64_t v145 = *(void *)(v5 + 16);
                              uint64_t v146 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v146 + 1;
                              *(unsigned char *)(v145 + v146) = BYTE3(v122);
                              uint64_t v147 = *(void *)(v5 + 16);
                              uint64_t v148 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v148 + 1;
                              *(unsigned char *)(v147 + v148) = v144;
                              uint64_t v143 = *(void *)(a1 + 96);
                              uint64_t v149 = *(void *)(v5 + 16);
                              uint64_t v150 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v150 + 1;
                              *(unsigned char *)(v149 + v150) = BYTE1(v143);
                            }
                            uint64_t v151 = *(void *)(v5 + 16);
                            uint64_t v152 = *(unsigned int *)(v5 + 40);
                            *(_DWORD *)(v5 + 40) = v152 + 1;
                            *(unsigned char *)(v151 + v152) = v143;
                            sub_100021A90((void *)a1);
                            int v153 = *(_DWORD *)(v5 + 44);
                            if (v153 >= 1) {
                              *(_DWORD *)(v5 + 44) = -v153;
                            }
                            return *(_DWORD *)(v5 + 40) == 0;
                          }
                        }
                        return 0;
                      }
                      uint64_t v96 = *(void *)(v5 + 48);
                      unsigned int v94 = *(_DWORD *)(v5 + 40);
                    }
                    uint64_t v98 = *(void *)(v96 + 56);
                    uint64_t v99 = *(unsigned int *)(v5 + 56);
                    *(_DWORD *)(v5 + 56) = v99 + 1;
                    LODWORD(v98) = *(unsigned __int8 *)(v98 + v99);
                    uint64_t v100 = *(void *)(v5 + 16);
                    *(_DWORD *)(v5 + 40) = v95 + 1;
                    *(unsigned char *)(v100 + v95) = v98;
                    if (!v98)
                    {
                      char v101 = 1;
                      LODWORD(v95) = v94;
                      goto LABEL_108;
                    }
                  }
                }
                int v6 = *(_DWORD *)(v5 + 8);
LABEL_70:
                if (v6 == 73)
                {
                  uint64_t v77 = *(void *)(v5 + 48);
                  goto LABEL_72;
                }
                goto LABEL_93;
              }
              unsigned int v79 = *(_DWORD *)(v5 + 56);
              unsigned int v78 = *(_DWORD *)(v5 + 40);
            }
            char v82 = *(unsigned char *)(*(void *)(v77 + 24) + v79);
            uint64_t v83 = *(void *)(v5 + 16);
            *(_DWORD *)(v5 + 40) = v80 + 1;
            *(unsigned char *)(v83 + v80) = v82;
            unsigned int v79 = *(_DWORD *)(v5 + 56) + 1;
            *(_DWORD *)(v5 + 56) = v79;
            uint64_t v77 = *(void *)(v5 + 48);
          }
        }
        if (*(int *)(v5 + 184) <= 1)
        {
          int v33 = *(_DWORD *)(v5 + 180);
          if (v33 == 6) {
            int v34 = 128;
          }
          else {
            int v34 = 192;
          }
          if (v33 >= 6) {
            int v35 = v34;
          }
          else {
            int v35 = 64;
          }
          if (v33 >= 2) {
            int v32 = v35;
          }
          else {
            int v32 = 0;
          }
        }
        else
        {
          int v32 = 0;
        }
        unsigned int v36 = v32 | ((*(_DWORD *)(v5 + 72) << 12) - 30720);
        if (*(_DWORD *)(v5 + 156)) {
          v36 |= 0x20u;
        }
        *(_DWORD *)(v5 + 8) = 113;
        uint64_t v37 = *(void *)(v5 + 16);
        uint64_t v38 = *(unsigned int *)(v5 + 40);
        *(_DWORD *)(v5 + 40) = v38 + 1;
        *(unsigned char *)(v37 + v38) = BYTE1(v36);
        uint64_t v39 = *(void *)(v5 + 16);
        uint64_t v40 = *(unsigned int *)(v5 + 40);
        *(_DWORD *)(v5 + 40) = v40 + 1;
        *(unsigned char *)(v39 + v40) = ((v36 % 0x1F) | v36) ^ 0x1F;
        if (*(_DWORD *)(v5 + 156))
        {
          unint64_t v41 = *(void *)(a1 + 96);
          unint64_t v42 = v41 >> 16;
          uint64_t v43 = *(void *)(v5 + 16);
          uint64_t v44 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v44 + 1;
          *(unsigned char *)(v43 + v44) = BYTE3(v41);
          uint64_t v45 = *(void *)(v5 + 16);
          uint64_t v46 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v46 + 1;
          *(unsigned char *)(v45 + v46) = v42;
          uint64_t v47 = *(void *)(a1 + 96);
          uint64_t v48 = *(void *)(v5 + 16);
          uint64_t v49 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v49 + 1;
          *(unsigned char *)(v48 + v49) = BYTE1(v47);
          uint64_t v50 = *(void *)(v5 + 16);
          uint64_t v51 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v51 + 1;
          *(unsigned char *)(v50 + v51) = v47;
        }
        *(void *)(a1 + 96) = sub_100010FE4(0, 0, 0);
        int v6 = *(_DWORD *)(v5 + 8);
      }
      if (v6 != 69) {
        goto LABEL_70;
      }
      goto LABEL_49;
    }
  }
  return result;
}

void *sub_100021A90(void *result)
{
  uint64_t v1 = *((void *)result + 7);
  unsigned int v2 = *(_DWORD *)(v1 + 40);
  unsigned int v3 = *((_DWORD *)result + 8);
  if (v2 >= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = v2;
  }
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = memcpy(*((void **)result + 3), *(const void **)(v1 + 32), v4);
    v5[3] += v4;
    uint64_t v6 = v5[7];
    *(void *)(v6 + 32) += v4;
    v5[5] += v4;
    *((_DWORD *)v5 + 8) -= v4;
    int v7 = *(_DWORD *)(v6 + 40) - v4;
    *(_DWORD *)(v6 + 40) = v7;
    if (!v7) {
      *(void *)(v6 + 32) = *(void *)(v6 + 16);
    }
  }
  return result;
}

uint64_t sub_100021B24(uint64_t a1, int a2)
{
  if ((unint64_t)(*(void *)(a1 + 24) - 5) >= 0xFFFF) {
    uint64_t v4 = 0xFFFFLL;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 24) - 5;
  }
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 164);
    if (v5 <= 1)
    {
      sub_100022550((unsigned int *)a1);
      unsigned int v5 = *(_DWORD *)(a1 + 164);
      if (!(v5 | a2)) {
        return 0;
      }
      if (!v5) {
        break;
      }
    }
    unint64_t v6 = *(_DWORD *)(a1 + 156) + v5;
    *(_DWORD *)(a1 + 156) = v6;
    *(_DWORD *)(a1 + 164) = 0;
    if (a2 == 6)
    {
      *(void *)(a1 + 136) = v6;
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 136);
      unint64_t v8 = v7 + v4;
      if (v6) {
        BOOL v9 = v8 > v6;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9)
      {
        *(_DWORD *)(a1 + 164) = v6 - v8;
        *(_DWORD *)(a1 + 156) = v8;
        if (v7 < 0) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = (char *)(*(void *)(a1 + 80) + v7);
        }
        sub_100039B64(a1, v10, (v7 + v4) - v7, 0);
        *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_100021A90(*(void **)a1);
        if (!*(_DWORD *)(*(void *)a1 + 32)) {
          return 0;
        }
        LODWORD(v6) = *(_DWORD *)(a1 + 156);
        uint64_t v7 = *(void *)(a1 + 136);
      }
      if ((int)v6 - (int)v7 >= (*(_DWORD *)(a1 + 68) - 262))
      {
        uint64_t v11 = v7 < 0 ? 0 : (char *)(*(void *)(a1 + 80) + v7);
        sub_100039B64(a1, v11, v6 - v7, 0);
        *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_100021A90(*(void **)a1);
        if (!*(_DWORD *)(*(void *)a1 + 32)) {
          return 0;
        }
      }
    }
  }
  if (a2 == 6)
  {
    uint64_t result = 0;
    *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 136);
    if (v13 < 0) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = (char *)(*(void *)(a1 + 80) + v13);
    }
    sub_100039B64(a1, v14, *(unsigned int *)(a1 + 156) - v13, a2 == 4);
    *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
    sub_100021A90(*(void **)a1);
    if (*(_DWORD *)(*(void *)a1 + 32))
    {
      if (a2 == 4) {
        return 3;
      }
      else {
        return 1;
      }
    }
    else
    {
      return 2 * (a2 == 4);
    }
  }
  return result;
}

uint64_t sub_100021CF4(uint64_t a1, int a2)
{
  unsigned int v4 = 0;
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 164);
    if (v5 > 0x105)
    {
LABEL_7:
      unsigned int v6 = *(_DWORD *)(a1 + 156);
      unsigned int v7 = ((*(_DWORD *)(a1 + 112) << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(*(void *)(a1 + 80) + v6 + 2)) & *(_DWORD *)(a1 + 124);
      *(_DWORD *)(a1 + 112) = v7;
      uint64_t v8 = *(void *)(a1 + 104);
      unsigned int v4 = *(unsigned __int16 *)(v8 + 2 * v7);
      *(_WORD *)(*(void *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 76) & v6)) = v4;
      *(_WORD *)(v8 + 2 * v7) = v6;
      goto LABEL_8;
    }
    sub_100022550((unsigned int *)a1);
    unsigned int v5 = *(_DWORD *)(a1 + 164);
    if (!a2 && v5 < 0x106) {
      return 0;
    }
    if (!v5) {
      break;
    }
    if (v5 >= 3) {
      goto LABEL_7;
    }
LABEL_8:
    if (a2 == 6)
    {
      ++*(_DWORD *)(a1 + 156);
      *(_DWORD *)(a1 + 164) = v5 - 1;
    }
    else
    {
      if (!v4) {
        goto LABEL_12;
      }
      unsigned int v9 = *(_DWORD *)(a1 + 156) - v4;
      if (v9 > *(_DWORD *)(a1 + 68) - 262) {
        goto LABEL_12;
      }
      int v11 = *(_DWORD *)(a1 + 184);
      if ((v11 & 0xFFFFFFFE) == 2)
      {
        if (v9 != 1 || v11 != 3)
        {
LABEL_12:
          unsigned int v10 = *(_DWORD *)(a1 + 144);
          goto LABEL_22;
        }
        unsigned int v10 = sub_100022930(a1, v4);
      }
      else
      {
        unsigned int v10 = sub_100022734(a1, v4);
      }
      *(_DWORD *)(a1 + 144) = v10;
LABEL_22:
      if (v10 < 3)
      {
        uint64_t v33 = *(unsigned __int8 *)(*(void *)(a1 + 80) + *(unsigned int *)(a1 + 156));
        uint64_t v34 = *(unsigned int *)(a1 + 5884);
        *(_WORD *)(*(void *)(a1 + 5888) + 2 * v34) = 0;
        uint64_t v35 = *(void *)(a1 + 5872);
        *(_DWORD *)(a1 + 5884) = v34 + 1;
        *(unsigned char *)(v35 + v34) = v33;
        ++*(_WORD *)(a1 + 4 * v33 + 196);
        int v20 = *(_DWORD *)(a1 + 5884);
        int v21 = *(_DWORD *)(a1 + 5880) - 1;
        --*(_DWORD *)(a1 + 164);
        unsigned int v32 = *(_DWORD *)(a1 + 156) + 1;
LABEL_31:
        *(_DWORD *)(a1 + 156) = v32;
        goto LABEL_33;
      }
      int v13 = *(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160);
      uint64_t v14 = *(unsigned int *)(a1 + 5884);
      *(_WORD *)(*(void *)(a1 + 5888) + 2 * v14) = v13;
      uint64_t v15 = *(void *)(a1 + 5872);
      *(_DWORD *)(a1 + 5884) = v14 + 1;
      *(unsigned char *)(v15 + v14) = v10 - 3;
      unsigned __int16 v16 = v13 - 1;
      uint64_t v17 = a1 + 4 * byte_100049FE8[(v10 - 3)];
      ++*(_WORD *)(v17 + 1224);
      unsigned __int16 v18 = (v16 >> 7) + 256;
      if ((v16 & 0xFF00) == 0) {
        unsigned __int16 v18 = v16;
      }
      uint64_t v19 = a1 + 4 * byte_100049DE8[v18];
      ++*(_WORD *)(v19 + 2488);
      int v20 = *(_DWORD *)(a1 + 5884);
      int v21 = *(_DWORD *)(a1 + 5880) - 1;
      unsigned int v22 = *(_DWORD *)(a1 + 144);
      unsigned int v23 = *(_DWORD *)(a1 + 164) - v22;
      *(_DWORD *)(a1 + 164) = v23;
      if (v22 <= *(_DWORD *)(a1 + 176) && v23 >= 3)
      {
        *(_DWORD *)(a1 + 144) = v22 - 1;
        uint64_t v24 = *(void *)(a1 + 80);
        int v26 = *(_DWORD *)(a1 + 124);
        int v25 = *(_DWORD *)(a1 + 128);
        uint64_t v28 = *(void *)(a1 + 96);
        uint64_t v27 = *(void *)(a1 + 104);
        int v29 = *(_DWORD *)(a1 + 76);
        unsigned int v30 = *(_DWORD *)(a1 + 112);
        unsigned int v31 = v22 - 2;
        unsigned int v32 = *(_DWORD *)(a1 + 156) + 1;
        do
        {
          *(_DWORD *)(a1 + 156) = v32;
          unsigned int v30 = ((v30 << v25) ^ *(unsigned __int8 *)(v24 + v32 + 2)) & v26;
          *(_DWORD *)(a1 + 112) = v30;
          unsigned int v4 = *(unsigned __int16 *)(v27 + 2 * v30);
          *(_WORD *)(v28 + 2 * (v29 & v32)) = v4;
          *(_WORD *)(v27 + 2 * v30) = v32;
          *(_DWORD *)(a1 + 144) = v31--;
          ++v32;
        }
        while (v31 != -1);
        goto LABEL_31;
      }
      unsigned int v32 = *(_DWORD *)(a1 + 156) + v22;
      *(_DWORD *)(a1 + 156) = v32;
      *(_DWORD *)(a1 + 144) = 0;
      uint64_t v36 = *(void *)(a1 + 80);
      int v37 = *(unsigned __int8 *)(v36 + v32);
      *(_DWORD *)(a1 + 112) = v37;
      *(_DWORD *)(a1 + 112) = ((v37 << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(v36 + v32 + 1)) & *(_DWORD *)(a1 + 124);
LABEL_33:
      if (v20 == v21)
      {
        uint64_t v38 = *(void *)(a1 + 136);
        uint64_t v39 = v38 < 0 ? 0 : (char *)(*(void *)(a1 + 80) + v38);
        sub_100039B64(a1, v39, v32 - v38, 0);
        *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_100021A90(*(void **)a1);
        if (!*(_DWORD *)(*(void *)a1 + 32)) {
          return 0;
        }
      }
    }
  }
  if (a2 == 6)
  {
    uint64_t result = 0;
    *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
  }
  else
  {
    uint64_t v41 = *(void *)(a1 + 136);
    if (v41 < 0) {
      unint64_t v42 = 0;
    }
    else {
      unint64_t v42 = (char *)(*(void *)(a1 + 80) + v41);
    }
    sub_100039B64(a1, v42, *(unsigned int *)(a1 + 156) - v41, a2 == 4);
    *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
    sub_100021A90(*(void **)a1);
    if (*(_DWORD *)(*(void *)a1 + 32))
    {
      if (a2 == 4) {
        return 3;
      }
      else {
        return 1;
      }
    }
    else
    {
      return 2 * (a2 == 4);
    }
  }
  return result;
}

uint64_t sub_1000220A8(uint64_t a1, int a2)
{
  unsigned int v4 = 0;
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 164);
    if (v5 <= 0x105) {
      break;
    }
LABEL_7:
    unsigned int v6 = *(_DWORD *)(a1 + 156);
    unsigned int v7 = ((*(_DWORD *)(a1 + 112) << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(*(void *)(a1 + 80) + v6 + 2)) & *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a1 + 112) = v7;
    uint64_t v8 = *(void *)(a1 + 104);
    unsigned int v4 = *(unsigned __int16 *)(v8 + 2 * v7);
    *(_WORD *)(*(void *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 76) & v6)) = v4;
    *(_WORD *)(v8 + 2 * v7) = v6;
LABEL_8:
    if (a2 == 6)
    {
      ++*(_DWORD *)(a1 + 156);
      goto LABEL_10;
    }
    unsigned int v9 = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a1 + 168) = v9;
    int v10 = *(_DWORD *)(a1 + 160);
    unsigned int v11 = 2;
    *(_DWORD *)(a1 + 144) = 2;
    *(_DWORD *)(a1 + 148) = v10;
    if (!v4) {
      goto LABEL_30;
    }
    if (v9 < *(_DWORD *)(a1 + 176))
    {
      unsigned int v12 = *(_DWORD *)(a1 + 156) - v4;
      if (v12 <= *(_DWORD *)(a1 + 68) - 262)
      {
        int v13 = *(_DWORD *)(a1 + 184);
        if ((v13 & 0xFFFFFFFE) == 2)
        {
          if (v12 != 1 || v13 != 3)
          {
            if (v13 != 1) {
              goto LABEL_29;
            }
LABEL_25:
            unsigned int v11 = 2;
            *(_DWORD *)(a1 + 144) = 2;
            goto LABEL_29;
          }
          unsigned int v11 = sub_100022930(a1, v4);
        }
        else
        {
          unsigned int v11 = sub_100022734(a1, v4);
        }
        *(_DWORD *)(a1 + 144) = v11;
        if (v11 <= 5)
        {
          if (*(_DWORD *)(a1 + 184) != 1)
          {
            if (v11 != 3) {
              goto LABEL_29;
            }
            if ((*(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160)) <= 0x1000)
            {
              unsigned int v11 = 3;
              goto LABEL_29;
            }
          }
          goto LABEL_25;
        }
      }
    }
LABEL_29:
    unsigned int v9 = *(_DWORD *)(a1 + 168);
LABEL_30:
    unsigned __int8 v15 = v9 - 3;
    if (v9 < 3 || v11 > v9)
    {
      if (*(_DWORD *)(a1 + 152))
      {
        uint64_t v33 = *(unsigned __int8 *)(*(void *)(a1 + 80) + (*(_DWORD *)(a1 + 156) - 1));
        uint64_t v34 = *(unsigned int *)(a1 + 5884);
        *(_WORD *)(*(void *)(a1 + 5888) + 2 * v34) = 0;
        uint64_t v35 = *(void *)(a1 + 5872);
        *(_DWORD *)(a1 + 5884) = v34 + 1;
        *(unsigned char *)(v35 + v34) = v33;
        ++*(_WORD *)(a1 + 4 * v33 + 196);
        if (*(_DWORD *)(a1 + 5884) == *(_DWORD *)(a1 + 5880) - 1)
        {
          uint64_t v36 = *(void *)(a1 + 136);
          if (v36 < 0) {
            int v37 = 0;
          }
          else {
            int v37 = (char *)(*(void *)(a1 + 80) + v36);
          }
          sub_100039B64(a1, v37, *(unsigned int *)(a1 + 156) - v36, 0);
          *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
          sub_100021A90(*(void **)a1);
        }
        ++*(_DWORD *)(a1 + 156);
        --*(_DWORD *)(a1 + 164);
        goto LABEL_51;
      }
      int v38 = *(_DWORD *)(a1 + 156) + 1;
      *(_DWORD *)(a1 + 152) = 1;
      *(_DWORD *)(a1 + 156) = v38;
      unsigned int v5 = *(_DWORD *)(a1 + 164);
LABEL_10:
      *(_DWORD *)(a1 + 164) = v5 - 1;
    }
    else
    {
      int v16 = *(_DWORD *)(a1 + 156);
      int v17 = v16 + *(_DWORD *)(a1 + 164);
      int v18 = v16 + ~*(_DWORD *)(a1 + 148);
      uint64_t v19 = *(unsigned int *)(a1 + 5884);
      *(_WORD *)(*(void *)(a1 + 5888) + 2 * v19) = v18;
      uint64_t v20 = *(void *)(a1 + 5872);
      *(_DWORD *)(a1 + 5884) = v19 + 1;
      *(unsigned char *)(v20 + v19) = v15;
      unsigned __int16 v21 = v18 - 1;
      uint64_t v22 = a1 + 4 * byte_100049FE8[v15];
      ++*(_WORD *)(v22 + 1224);
      unsigned __int16 v23 = (v21 >> 7) + 256;
      if ((v21 & 0xFF00) == 0) {
        unsigned __int16 v23 = v21;
      }
      unsigned int v24 = v17 - 3;
      uint64_t v28 = a1 + 4 * byte_100049DE8[v23];
      ++*(_WORD *)(v28 + 2488);
      int v25 = *(_DWORD *)(a1 + 5884);
      int v26 = *(_DWORD *)(a1 + 5880) - 1;
      LODWORD(v28) = *(_DWORD *)(a1 + 168);
      *(_DWORD *)(a1 + 164) = *(_DWORD *)(a1 + 164) - v28 + 1;
      *(_DWORD *)(a1 + 168) = v28 - 2;
      int v27 = v28 - 3;
      LODWORD(v28) = *(_DWORD *)(a1 + 156) + 1;
      do
      {
        *(_DWORD *)(a1 + 156) = v28;
        if (v28 <= v24)
        {
          unsigned int v29 = ((*(_DWORD *)(a1 + 112) << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(*(void *)(a1 + 80)
                                                                                       + (v28 + 2))) & *(_DWORD *)(a1 + 124);
          *(_DWORD *)(a1 + 112) = v29;
          uint64_t v30 = *(void *)(a1 + 104);
          unsigned int v4 = *(unsigned __int16 *)(v30 + 2 * v29);
          *(_WORD *)(*(void *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 76) & v28)) = v4;
          *(_WORD *)(v30 + 2 * v29) = v28;
        }
        *(_DWORD *)(a1 + 168) = v27--;
        uint64_t v28 = (v28 + 1);
      }
      while (v27 != -1);
      *(_DWORD *)(a1 + 144) = 2;
      *(_DWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 156) = v28;
      if (v25 == v26)
      {
        uint64_t v31 = *(void *)(a1 + 136);
        if (v31 < 0) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = (char *)(*(void *)(a1 + 80) + v31);
        }
        sub_100039B64(a1, v32, v28 - v31, 0);
        *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_100021A90(*(void **)a1);
LABEL_51:
        if (!*(_DWORD *)(*(void *)a1 + 32)) {
          return 0;
        }
      }
    }
  }
  sub_100022550((unsigned int *)a1);
  unsigned int v5 = *(_DWORD *)(a1 + 164);
  if (!a2 && v5 < 0x106) {
    return 0;
  }
  if (v5)
  {
    if (v5 < 3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a2 == 6)
  {
    uint64_t result = 0;
    *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
  }
  else
  {
    if (*(_DWORD *)(a1 + 152))
    {
      uint64_t v40 = *(unsigned __int8 *)(*(void *)(a1 + 80) + (*(_DWORD *)(a1 + 156) - 1));
      uint64_t v41 = *(unsigned int *)(a1 + 5884);
      *(_WORD *)(*(void *)(a1 + 5888) + 2 * v41) = 0;
      uint64_t v42 = *(void *)(a1 + 5872);
      *(_DWORD *)(a1 + 5884) = v41 + 1;
      *(unsigned char *)(v42 + v41) = v40;
      ++*(_WORD *)(a1 + 4 * v40 + 196);
      *(_DWORD *)(a1 + 152) = 0;
    }
    uint64_t v43 = *(void *)(a1 + 136);
    if (v43 < 0) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = (char *)(*(void *)(a1 + 80) + v43);
    }
    sub_100039B64(a1, v44, *(unsigned int *)(a1 + 156) - v43, a2 == 4);
    *(void *)(a1 + 136) = *(unsigned int *)(a1 + 156);
    sub_100021A90(*(void **)a1);
    if (*(_DWORD *)(*(void *)a1 + 32))
    {
      if (a2 == 4) {
        return 3;
      }
      else {
        return 1;
      }
    }
    else
    {
      return 2 * (a2 == 4);
    }
  }
  return result;
}

unsigned int *sub_100022550(unsigned int *result)
{
  uint64_t v1 = result;
  size_t v2 = result[17];
  unsigned int v3 = result[41];
  int32x2_t v4 = vdup_n_s32(v2);
  do
  {
    unsigned int v5 = v1[39];
    LODWORD(v6) = v1[22] - (v3 + v5);
    if (v5 >= v2 - 262 + v1[17])
    {
      uint64_t result = (unsigned int *)memcpy(*((void **)v1 + 10), (const void *)(*((void *)v1 + 10) + v2), v2);
      int32x2_t v7 = vsub_s32(*(int32x2_t *)(v1 + 39), v4);
      *(int32x2_t *)(v1 + 39) = v7;
      *((void *)v1 + 17) -= v2;
      uint64_t v8 = v1[29];
      unsigned int v9 = (_WORD *)(*((void *)v1 + 13) + 2 * v8 - 2);
      do
      {
        unsigned int v10 = (unsigned __int16)*v9;
        BOOL v11 = v10 >= v2;
        __int16 v12 = v10 - v2;
        if (!v11) {
          __int16 v12 = 0;
        }
        *v9-- = v12;
        LODWORD(v8) = v8 - 1;
      }
      while (v8);
      int v13 = (_WORD *)(*((void *)v1 + 12) + 2 * v2 - 2);
      int v14 = v2;
      do
      {
        unsigned int v15 = (unsigned __int16)*v13;
        BOOL v11 = v15 >= v2;
        __int16 v16 = v15 - v2;
        if (!v11) {
          __int16 v16 = 0;
        }
        *v13-- = v16;
        --v14;
      }
      while (v14);
      LODWORD(v6) = v2 + v6;
      unsigned int v5 = v7.i32[0];
    }
    uint64_t v17 = *(void *)v1;
    unsigned int v18 = *(_DWORD *)(*(void *)v1 + 8);
    if (!v18) {
      break;
    }
    uint64_t v19 = v1[41];
    if (v18 >= v6) {
      size_t v6 = v6;
    }
    else {
      size_t v6 = v18;
    }
    if (!v6) {
      goto LABEL_23;
    }
    uint64_t v20 = *((void *)v1 + 10);
    *(_DWORD *)(v17 + 8) = v18 - v6;
    int v21 = *(_DWORD *)(*(void *)(v17 + 56) + 44);
    if (v21 == 2)
    {
      uint64_t v22 = sub_10001BB48(*(void *)(v17 + 96), *(int **)v17, v6);
      goto LABEL_21;
    }
    if (v21 == 1)
    {
      uint64_t v22 = sub_100010FE4(*(void *)(v17 + 96), *(unsigned __int8 **)v17, v6);
LABEL_21:
      *(void *)(v17 + 96) = v22;
    }
    uint64_t result = (unsigned int *)memcpy((void *)(v20 + v5 + v19), *(const void **)v17, v6);
    *(void *)v17 += v6;
    *(void *)(v17 + 16) += v6;
    LODWORD(v19) = v1[41];
LABEL_23:
    unsigned int v3 = v19 + v6;
    v1[41] = v19 + v6;
    if ((v19 + v6) >= 3)
    {
      uint64_t v23 = *((void *)v1 + 10);
      uint64_t v24 = v1[39];
      unsigned int v25 = *(unsigned __int8 *)(v23 + v24);
      v1[28] = v25;
      v1[28] = ((v25 << v1[32]) ^ *(unsigned __int8 *)(v23 + (v24 + 1))) & v1[31];
      if (v3 > 0x105) {
        return result;
      }
    }
  }
  while (*(_DWORD *)(*(void *)v1 + 8));
  return result;
}

uint64_t sub_100022734(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 172);
  uint64_t v3 = *(int *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(unsigned int *)(a1 + 156);
  size_t v6 = (unsigned __int8 *)(v4 + v5);
  unsigned int v7 = *(_DWORD *)(a1 + 68) - 262;
  BOOL v8 = v5 >= v7;
  unsigned int v9 = v5 - v7;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 96);
  unsigned int v11 = *(_DWORD *)(a1 + 76);
  unsigned int v12 = *(_DWORD *)(a1 + 164);
  int v13 = v6[v3 - 1];
  int v14 = v6[v3];
  unsigned int v15 = *(_DWORD *)(a1 + 192);
  if (v3 >= *(_DWORD *)(a1 + 188)) {
    v2 >>= 2;
  }
  if (v15 >= v12) {
    unsigned int v15 = *(_DWORD *)(a1 + 164);
  }
  while (1)
  {
    __int16 v16 = (unsigned __int8 *)(v4 + a2);
    if (v16[(int)v3] != v14 || v16[(int)v3 - 1] != v13 || *v16 != *v6 || v16[1] != v6[1]) {
      goto LABEL_32;
    }
    uint64_t v17 = 0;
    while (1)
    {
      unsigned int v18 = &v6[v17];
      if (v6[v17 + 3] != v16[v17 + 3])
      {
        int v24 = v18 + 3;
        goto LABEL_29;
      }
      if (v18[4] != v16[v17 + 4])
      {
        int v24 = v6 + v17 + 4;
        goto LABEL_29;
      }
      uint64_t v19 = &v6[v17];
      if (v6[v17 + 5] != v16[v17 + 5])
      {
        int v24 = v19 + 5;
        goto LABEL_29;
      }
      if (v19[6] != v16[v17 + 6])
      {
        int v24 = v6 + v17 + 6;
        goto LABEL_29;
      }
      uint64_t v20 = &v6[v17];
      if (v6[v17 + 7] != v16[v17 + 7])
      {
        int v24 = v20 + 7;
        goto LABEL_29;
      }
      if (v20[8] != v16[v17 + 8])
      {
        int v24 = v6 + v17 + 8;
        goto LABEL_29;
      }
      int v21 = &v6[v17];
      uint64_t v22 = &v16[v17];
      if (v6[v17 + 9] != v16[v17 + 9]) {
        break;
      }
      unint64_t v23 = v17 + 2;
      v17 += 8;
      if (v23 > 0xF9 || v21[10] != v22[10])
      {
        int v24 = v6 + v17 + 2;
        goto LABEL_29;
      }
    }
    int v24 = v21 + 9;
LABEL_29:
    int v25 = v24 - (v6 + 258);
    int v26 = v24 - v6;
    if (v26 <= (int)v3) {
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 160) = a2;
    if (v26 >= (int)v15) {
      break;
    }
    int v13 = v6[v25 + 257];
    int v14 = v6[v26];
    LODWORD(v3) = v26;
LABEL_32:
    a2 = *(unsigned __int16 *)(v10 + 2 * (a2 & v11));
    --v2;
    if (v9 >= a2 || v2 == 0) {
      goto LABEL_37;
    }
  }
  LODWORD(v3) = v26;
LABEL_37:
  if (v3 >= v12) {
    return v12;
  }
  else {
    return v3;
  }
}

uint64_t sub_100022930(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = (unsigned __int8 *)(v2 + *(unsigned int *)(a1 + 156));
  uint64_t v4 = (unsigned __int8 *)(v2 + a2);
  if (*v4 != *v3 || v4[1] != v3[1]) {
    return 2;
  }
  uint64_t v5 = 0;
  int v6 = v3 + 258;
  while (1)
  {
    unsigned int v7 = &v3[v5];
    if (v3[v5 + 3] != v4[v5 + 3])
    {
      int v13 = v7 + 3;
      goto LABEL_21;
    }
    if (v7[4] != v4[v5 + 4])
    {
      int v13 = v3 + v5 + 4;
      goto LABEL_21;
    }
    BOOL v8 = &v3[v5];
    if (v3[v5 + 5] != v4[v5 + 5])
    {
      int v13 = v8 + 5;
      goto LABEL_21;
    }
    if (v8[6] != v4[v5 + 6])
    {
      int v13 = v3 + v5 + 6;
      goto LABEL_21;
    }
    unsigned int v9 = &v3[v5];
    if (v3[v5 + 7] != v4[v5 + 7])
    {
      int v13 = v9 + 7;
      goto LABEL_21;
    }
    if (v9[8] != v4[v5 + 8])
    {
      int v13 = v3 + v5 + 8;
      goto LABEL_21;
    }
    uint64_t v10 = &v3[v5];
    unsigned int v11 = &v4[v5];
    if (v3[v5 + 9] != v4[v5 + 9]) {
      break;
    }
    unint64_t v12 = v5 + 2;
    v5 += 8;
    if (v12 > 0xF9 || v10[10] != v11[10])
    {
      int v13 = v3 + v5 + 2;
      goto LABEL_21;
    }
  }
  int v13 = v10 + 9;
LABEL_21:
  int v14 = v13 - v6 + 258;
  if (v14 < 3) {
    return 2;
  }
  *(_DWORD *)(a1 + 160) = a2;
  unsigned int v16 = *(_DWORD *)(a1 + 164);
  if (v14 >= v16) {
    return v16;
  }
  else {
    return v14;
  }
}

uint64_t sub_100022A90(int a1, unsigned __int16 *a2, unsigned int a3, _WORD **a4, unsigned int *a5, _WORD *a6)
{
  memset(v55, 0, sizeof(v55));
  if (a3)
  {
    uint64_t v7 = a3;
    BOOL v8 = a2;
    do
    {
      unsigned int v9 = *v8++;
      ++*((_WORD *)v55 + v9);
      --v7;
    }
    while (v7);
  }
  unsigned int v10 = *a5;
  unsigned int v11 = 15;
  while (!*((_WORD *)v55 + v11))
  {
    if (!--v11)
    {
      unint64_t v12 = *a4;
      *a4 += 2;
      *unint64_t v12 = 320;
      v12[1] = 0;
      int v13 = *a4;
      *a4 += 2;
      *int v13 = 320;
      v13[1] = 0;
      unsigned int v10 = 1;
LABEL_77:
      uint64_t result = 0;
      *a5 = v10;
      return result;
    }
  }
  if (v10 >= v11) {
    unsigned int v10 = v11;
  }
  for (uint64_t i = 1; i != 16; ++i)
  {
    if (*((_WORD *)v55 + i)) {
      break;
    }
  }
  if (v10 <= i) {
    unsigned int v10 = i;
  }
  int v15 = 1;
  for (uint64_t j = 2; j != 32; j += 2)
  {
    int v15 = 2 * v15 - *(unsigned __int16 *)((char *)v55 + j);
    if (v15 < 0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (!v15 || (uint64_t result = 0xFFFFFFFFLL, a1) && v11 == 1)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    v54[1] = 0;
    do
    {
      v19 += *(unsigned __int16 *)((char *)v55 + v18 * 2 + 2);
      v54[v18 + 2] = v19;
      ++v18;
    }
    while (v18 != 14);
    if (a3)
    {
      for (uint64_t k = 0; k != a3; ++k)
      {
        uint64_t v21 = a2[k];
        if (a2[k])
        {
          uint64_t v22 = (unsigned __int16)v54[v21];
          v54[v21] = v22 + 1;
          a6[v22] = k;
        }
      }
    }
    if (a1)
    {
      if (a1 == 1)
      {
        uint64_t result = 1;
        if (v10 > 0xA) {
          return result;
        }
        unint64_t v23 = &unk_100049946;
        int v24 = &unk_100049984;
        int v25 = 256;
      }
      else
      {
        LOBYTE(result) = 0;
        unint64_t v23 = &unk_100049BC4;
        int v25 = -1;
        int v24 = &unk_100049C04;
      }
    }
    else
    {
      LOBYTE(result) = 0;
      int v25 = 19;
      int v24 = a6;
      unint64_t v23 = a6;
    }
    int v26 = 0;
    unsigned int v27 = 0;
    unsigned int v28 = 0;
    unsigned int v29 = 1 << v10;
    int v30 = (1 << v10) - 1;
    uint64_t v31 = *a4;
    char v32 = v10;
    int v33 = -1;
    while (2)
    {
      unsigned int v34 = 1 << v32;
      do
      {
        uint64_t v35 = (unsigned __int16)a6[v26];
        if (v25 <= (int)v35)
        {
          if (v25 >= (int)v35)
          {
            LOWORD(v35) = 0;
            char v36 = 96;
          }
          else
          {
            char v36 = v24[2 * v35];
            LOWORD(v35) = v23[v35];
          }
        }
        else
        {
          char v36 = 0;
        }
        char v37 = i - v27;
        int v38 = -1 << (i - v27);
        unsigned int v39 = v34;
        do
        {
          uint64_t v40 = &v31[2 * (v28 >> v27) + 2 * v38 + 2 * v39];
          *(unsigned char *)uint64_t v40 = v36;
          *((unsigned char *)v40 + 1) = v37;
          v40[1] = v35;
          v39 += v38;
        }
        while (v39);
        unsigned int v41 = 1 << (i - 1);
        do
        {
          unsigned int v42 = v41;
          v41 >>= 1;
        }
        while ((v42 & v28) != 0);
        unsigned int v43 = ((v42 - 1) & v28) + v42;
        if (v42) {
          unsigned int v28 = ((v42 - 1) & v28) + v42;
        }
        else {
          unsigned int v28 = 0;
        }
        ++v26;
        __int16 v44 = *((_WORD *)v55 + i) - 1;
        *((_WORD *)v55 + i) = v44;
        if (!v44)
        {
          if (i == v11)
          {
            if (v28)
            {
              do
              {
                if (v27 && (v43 & v30) != v33)
                {
                  unsigned int v27 = 0;
                  uint64_t v31 = *a4;
                  LOBYTE(v11) = v10;
                  char v37 = v10;
                }
                uint64_t v51 = &v31[2 * (v43 >> v27)];
                *(unsigned char *)uint64_t v51 = 64;
                *((unsigned char *)v51 + 1) = v37;
                v51[1] = 0;
                unsigned int v52 = 1 << (v11 - 1);
                do
                {
                  unsigned int v53 = v52;
                  v52 >>= 1;
                }
                while ((v53 & v43) != 0);
                if (!v53) {
                  break;
                }
                unsigned int v43 = ((v53 - 1) & v43) + v53;
              }
              while (v43);
            }
            *a4 += 2 * v29;
            goto LABEL_77;
          }
          LODWORD(i) = a2[(unsigned __int16)a6[v26]];
        }
      }
      while (i <= v10 || (v28 & v30) == v33);
      if (!v27) {
        unsigned int v27 = v10;
      }
      char v32 = i - v27;
      int v45 = 1 << (i - v27);
      if (i < v11)
      {
        char v32 = v11 - v27;
        unsigned int v46 = i;
        while (1)
        {
          int v47 = v45 - *((unsigned __int16 *)v55 + v46);
          if (v47 < 1) {
            break;
          }
          int v45 = 2 * v47;
          if (++v46 >= v11) {
            goto LABEL_62;
          }
        }
        char v32 = v46 - v27;
LABEL_62:
        int v45 = 1 << v32;
      }
      v29 += v45;
      if (v29 > 0x5AF) {
        char v48 = result;
      }
      else {
        char v48 = 0;
      }
      if ((v48 & 1) == 0)
      {
        v31 += 2 * v34;
        uint64_t v49 = *a4;
        uint64_t v50 = (uint64_t)&(*a4)[2 * (v28 & v30)];
        *(unsigned char *)uint64_t v50 = v32;
        *(unsigned char *)(v50 + 1) = v10;
        *(_WORD *)(v50 + 2) = (v31 - v49) >> 2;
        int v33 = v28 & v30;
        continue;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_100022EC8(const char *a1, uint64_t *a2, int a3)
{
  unsigned int v11 = 0;
  size_t v6 = strlen(a1);
  uint64_t v7 = 0;
  if (v6)
  {
    if ((a1[v6 - 1] & 0x80000000) == 0 && a1[v6 - 1] - 48 <= 9)
    {
      asprintf(&v11, "%s%c", a1, a3);
      uint64_t v7 = v11;
      if (!v11) {
        sub_1000402A8();
      }
    }
  }
  if (v7) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = (char *)a1;
  }
  uint64_t v9 = sub_100004A94(v8, a2);
  free(v11);
  return v9;
}

uint64_t sub_100022F70(const char *a1, _WORD *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = strdup(a1);
  __stringp = v3;
  if (!v3) {
    return *__error();
  }
  uint64_t v4 = v3;
  while (2)
  {
    uint64_t v5 = strsep(&__stringp, ",");
    if (!v5) {
      break;
    }
    int v6 = 0;
    int v7 = *v5;
    if ((v7 | 2) == 0x46) {
      BOOL v8 = v5 + 1;
    }
    else {
      BOOL v8 = v5;
    }
    if ((v7 | 2) == 0x46) {
      int v9 = *v5;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 + 1;
    for (uint64_t i = (unsigned __int8 *)(v8 + 2); ; ++i)
    {
      int v12 = *(v10 - 1);
      if (v12 <= 102) {
        break;
      }
      switch(v12)
      {
        case 'g':
          int v13 = 1080;
          break;
        case 'o':
          int v13 = 7;
          break;
        case 'u':
          int v13 = 2496;
          break;
        default:
          goto LABEL_69;
      }
LABEL_22:
      v6 |= v13;
      ++v10;
    }
    if (v12 > 96)
    {
      if (v12 != 97) {
        goto LABEL_69;
      }
      int v13 = 511;
      goto LABEL_22;
    }
    if (v12 != 43 && v12 != 45 && v12 != 61)
    {
LABEL_69:
      uint64_t v25 = 22;
      goto LABEL_70;
    }
    __int16 v14 = v6;
    if (!v6)
    {
      mode_t v15 = umask(0);
      umask(v15);
      __int16 v14 = ~v15;
    }
    char v16 = *v10;
    if (!*v10) {
      goto LABEL_66;
    }
    int v17 = 0;
    __int16 v18 = 0;
    int v19 = v14 & 0x49;
    do
    {
      switch(v16)
      {
        case 'r':
          v17 |= v14 & 0x124;
          break;
        case 's':
          v17 |= v14 & 0xC00;
          break;
        case 't':
          v17 |= 0x200u;
          break;
        case 'u':
        case 'v':
          goto LABEL_69;
        case 'w':
          v17 |= v14 & 0x92;
          break;
        case 'x':
          v17 |= v19;
          break;
        default:
          if (v16 != 88) {
            goto LABEL_69;
          }
          v18 |= v19;
          break;
      }
      int v20 = *i++;
      char v16 = v20;
    }
    while (v20);
    if (!a2) {
      goto LABEL_66;
    }
    int v21 = *(v10 - 1);
    if (v21 == 61)
    {
      if (v9)
      {
        if (v9 == 70)
        {
LABEL_62:
          __int16 v24 = v14 & 0x1FF;
          if (!v6) {
            __int16 v24 = 4095;
          }
          a2[107] = v24;
          goto LABEL_65;
        }
        if (v9 != 68) {
          goto LABEL_66;
        }
      }
      if (v6) {
        a2[107] = v14 & 0x777;
      }
      else {
        a2[104] = 4095;
      }
      a2[105] = v17;
      if (v9) {
        goto LABEL_66;
      }
      goto LABEL_62;
    }
    if (v21 == 45)
    {
      if (!v9 || v9 == 68)
      {
        a2[104] |= v17;
        __int16 v23 = ~(_WORD)v17;
        a2[105] &= ~(_WORD)v17;
        if (v9) {
          goto LABEL_66;
        }
      }
      else
      {
        if (v9 != 70) {
          goto LABEL_66;
        }
        __int16 v23 = ~(_WORD)v17;
      }
      a2[107] |= v17;
      LOWORD(v17) = a2[108] & v23;
LABEL_65:
      a2[108] = v17;
      goto LABEL_66;
    }
    if (v21 != 43) {
      goto LABEL_69;
    }
    if (!v9 || v9 == 68)
    {
      __int16 v22 = ~(_WORD)v17;
      a2[104] &= ~(_WORD)v17;
      a2[105] |= v17;
      a2[106] |= v18;
      if (!v9)
      {
LABEL_57:
        a2[107] &= v22;
        a2[108] |= v17;
        a2[109] |= v18;
      }
    }
    else if (v9 == 70)
    {
      __int16 v22 = ~(_WORD)v17;
      goto LABEL_57;
    }
LABEL_66:
    if (__stringp) {
      continue;
    }
    break;
  }
  uint64_t v25 = 0;
LABEL_70:
  free(v4);
  return v25;
}

void *sub_1000232B8(int a1, char *const *a2, uint64_t (*a3)(uint64_t, void, char **), uint64_t a4)
{
  __errstrp = 0;
  uint64_t v105 = 0;
  bzero(&unk_100058800, 0x260uLL);
  unint64_t v97 = 0;
  int v96 = 0;
  uint64_t v101 = 0;
  int v98 = 0;
  int v103 = -1;
  dword_100058A2C = -1;
  uint64_t v99 = 0;
  int v100 = -1;
  dword_100058A00 = -1;
  qword_1000588E0 = -1;
  qword_1000588E8 = -1;
  qword_1000589C8 = (uint64_t)__stderrp;
  dword_100058870 = 1;
  dword_100058808 = 29;
  while (1)
  {
    int v8 = getopt_long(a1, a2, "0468B:CDEFHIKLOPRSVWabcde:f:ghklnopqrtuvxyz", (const option *)&off_100054AF8, &v103);
    if (v8 == -1) {
      break;
    }
    int v9 = v8;
    if (!a3) {
      goto LABEL_21;
    }
    if (v103 == -1)
    {
      unsigned int v10 = &off_100054AF8;
      while (v10[2] || *((_DWORD *)v10 + 6) != v8)
      {
        int v13 = v10[4];
        v10 += 4;
        if (!v13)
        {
          unsigned int v10 = 0;
          break;
        }
      }
      char v14 = v8;
    }
    else
    {
      unsigned int v10 = &(&off_100054AF8)[4 * v103];
      uint64_t v11 = *((unsigned int *)v10 + 6);
      if (v11 > 0x7F) {
        __uint32_t v12 = __maskrune(*((_DWORD *)v10 + 6), 0x40000uLL);
      }
      else {
        __uint32_t v12 = _DefaultRuneLocale.__runetype[v11] & 0x40000;
      }
      if (v12) {
        char v14 = v11;
      }
      else {
        char v14 = 0;
      }
    }
    int v15 = a3(a4, v14, v10);
    int v16 = v15 == 0;
    if (v15 < 0) {
      int v16 = 2;
    }
    if (v16 != 2)
    {
      if (v16) {
        return 0;
      }
LABEL_21:
      switch(v9)
      {
        case 0:
        case 176:
          goto LABEL_168;
        case 48:
          dword_1000589B8 = 1;
          goto LABEL_168;
        case 52:
          int v17 = &off_100058000;
          int v18 = 4;
          goto LABEL_27;
        case 54:
          int v17 = &off_100058000;
          int v18 = 6;
LABEL_27:
          *((_DWORD *)v17 + 652) = v18;
          goto LABEL_168;
        case 56:
        case 174:
          ++dword_1000588D4;
          goto LABEL_168;
        case 66:
          if (sub_100004A94(optarg, &v105) == -1) {
            sub_100040558();
          }
          if (v105 < 0) {
            sub_100040588();
          }
          qword_1000589E8 = v105;
          goto LABEL_168;
        case 67:
          HIDWORD(v99) = 1;
          goto LABEL_168;
        case 68:
          qword_100058868 = 0x100000001;
          goto LABEL_168;
        case 69:
          dword_100058A58 = 1;
          goto LABEL_168;
        case 70:
          if (v96)
          {
            if (v96 != 1)
            {
              ++v96;
              goto LABEL_168;
            }
            int v19 = "- .rsync-filter";
          }
          else
          {
            int v19 = ": /.rsync-filter";
          }
          if (dword_1000589B8) {
            unsigned int v32 = 0;
          }
          else {
            unsigned int v32 = 10;
          }
          ++v96;
          if (sub_100029A28(v19, 0, v32)) {
            sub_1000405B8();
          }
LABEL_168:
          int v103 = -1;
          break;
        case 72:
          dword_1000588C8 = 1;
          goto LABEL_168;
        case 73:
          ++dword_100058884;
          goto LABEL_168;
        case 75:
          dword_100058850 = 1;
          goto LABEL_168;
        case 76:
          dword_100058840 = 1;
          goto LABEL_168;
        case 79:
          dword_100058880 = 1;
          goto LABEL_168;
        case 80:
          dword_10005882C = 1;
          ++dword_100058888;
          goto LABEL_168;
        case 82:
          ++dword_1000588BC;
          goto LABEL_168;
        case 83:
        case 145:
          ++dword_100058890;
          goto LABEL_168;
        case 84:
          free((void *)qword_100058A20);
          qword_100058A20 = (uint64_t)strdup(optarg);
          if (!qword_100058A20) {
            sub_10004052C();
          }
          goto LABEL_168;
        case 86:
          printf("openrsync: protocol version %u\n", 29);
          puts("rsync version 2.6.9 compatible");
          exit(0);
        case 87:
          dword_100058A00 = 1;
          goto LABEL_168;
        case 97:
          dword_100058820 = 1;
          qword_100058838 = 0x100000001;
          *(void *)&dword_100058854 = 0x100000001;
          LODWORD(v99) = 1;
          dword_10005885C = 1;
          qword_100058868 = 0x100000001;
          goto LABEL_168;
        case 98:
          ++dword_100058898;
          goto LABEL_168;
        case 99:
          dword_100058810 = 1;
          goto LABEL_168;
        case 100:
          dword_1000588C0 = 2;
          goto LABEL_168;
        case 101:
          qword_1000588F8 = (uint64_t)optarg;
          goto LABEL_168;
        case 102:
          if (dword_1000589B8) {
            unsigned int v20 = 0;
          }
          else {
            unsigned int v20 = 10;
          }
          if (sub_100029A28(optarg, 0, v20) == -1) {
            sub_1000405E4();
          }
          goto LABEL_168;
        case 103:
          dword_100058858 = 1;
          goto LABEL_168;
        case 104:
          if (a1 == 2) {
            goto LABEL_332;
          }
          ++dword_1000588B0;
          goto LABEL_168;
        case 107:
          dword_10005884C = 1;
          goto LABEL_168;
        case 108:
          dword_100058854 = 1;
          goto LABEL_168;
        case 110:
          dword_100058824 = 2;
          goto LABEL_168;
        case 111:
          dword_10005885C = 1;
          goto LABEL_168;
        case 112:
          HIDWORD(qword_100058838) = 1;
          goto LABEL_168;
        case 113:
          ++dword_100058A48;
          goto LABEL_168;
        case 114:
          LODWORD(v99) = 0;
          dword_100058820 = 1;
          goto LABEL_168;
        case 116:
          LODWORD(qword_100058838) = 1;
          goto LABEL_168;
        case 117:
          ++dword_100058894;
          goto LABEL_168;
        case 118:
          ++dword_100058FDC;
          goto LABEL_168;
        case 120:
          ++dword_10005887C;
          goto LABEL_168;
        case 121:
          dword_100058A44 = 1;
          goto LABEL_168;
        case 122:
          ++dword_100058A28;
          goto LABEL_168;
        case 128:
          qword_100058908 = (uint64_t)optarg;
          goto LABEL_168;
        case 129:
          qword_100058900 = (uint64_t)optarg;
          goto LABEL_168;
        case 130:
          qword_1000588F0 = (uint64_t)optarg;
          goto LABEL_168;
        case 131:
          int v100 = strtonum(optarg, 0, 3600, (const char **)&__errstrp);
          if (__errstrp) {
            sub_100040614(__errstrp);
          }
          goto LABEL_168;
        case 132:
          dword_100058FE0 = strtonum(optarg, 0, 3600, (const char **)&__errstrp);
          if (__errstrp) {
            sub_100040614(__errstrp);
          }
          goto LABEL_168;
        case 133:
          int v93 = sub_1000081F0(a1, a2, (uint64_t)&unk_100058800);
          exit(v93);
        case 134:
          if (sub_100029A28(optarg, 1, 0) == -1) {
            sub_100040644();
          }
          goto LABEL_168;
        case 135:
          qword_100058868 = 0;
          goto LABEL_168;
        case 136:
          if (sub_100029A28(optarg, 2, 0) == -1) {
            sub_100040674();
          }
          goto LABEL_168;
        case 137:
          int v21 = optarg;
          if (dword_1000589B8) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = 10;
          }
          uint64_t v23 = 1;
          goto LABEL_157;
        case 138:
          int v21 = optarg;
          if (dword_1000589B8) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = 10;
          }
          uint64_t v23 = 2;
LABEL_157:
          sub_100029A48(v21, v23, v22);
          goto LABEL_168;
        case 139:
          if (dword_10005888C >= 2) {
            sub_1000406A4(&v103, dword_10005888C);
          }
          int v24 = 1;
          goto LABEL_94;
        case 140:
          if ((dword_10005888C & 0xFFFFFFFD) != 0) {
            sub_1000406A4(&v103, dword_10005888C);
          }
          int v24 = 2;
          goto LABEL_94;
        case 141:
          int v24 = 3;
          if (dword_10005888C && dword_10005888C != 3) {
            sub_1000406A4(&v103, dword_10005888C);
          }
LABEL_94:
          dword_10005888C = v24;
          if (v97 >= 0x14) {
            sub_1000406E8(&v103);
          }
          *((void *)&unk_100058800 + v97++ + 34) = optarg;
          goto LABEL_168;
        case 142:
          if (sub_100004A94(optarg, &v105) == -1) {
            sub_10004073C();
          }
          qword_1000588E0 = v105;
          goto LABEL_168;
        case 143:
          if (sub_100004A94(optarg, &v105) == -1) {
            sub_100040758();
          }
          qword_1000588E8 = v105;
          goto LABEL_168;
        case 144:
          dword_100058878 = 2;
          goto LABEL_168;
        case 146:
          qword_1000589D0 = (uint64_t)optarg;
          goto LABEL_168;
        case 147:
          ++dword_1000588B4;
          goto LABEL_168;
        case 148:
          ++dword_1000588B8;
          goto LABEL_168;
        case 149:
          if (dword_100058860) {
            goto LABEL_168;
          }
          int v25 = 1;
LABEL_167:
          dword_100058860 = v25;
          goto LABEL_168;
        case 150:
          if (dword_100058860 >= 2) {
            sub_100040720();
          }
          int v25 = 2;
          goto LABEL_167;
        case 151:
          if (dword_100058860 >= 2) {
            sub_100040720();
          }
          int v25 = 3;
          goto LABEL_167;
        case 152:
          if (dword_100058860 >= 2) {
            sub_100040720();
          }
          int v25 = 4;
          goto LABEL_167;
        case 153:
          if (dword_100058860 >= 2) {
            sub_100040720();
          }
          int v25 = 5;
          goto LABEL_167;
        case 154:
          if (sub_100022EC8(optarg, &v105, 107) == -1) {
            sub_10003C69C();
          }
          qword_1000589D8 = v105;
          goto LABEL_168;
        case 155:
          dword_1000588BC = 0;
          LODWORD(v101) = v101 + 1;
          goto LABEL_168;
        case 156:
          dword_1000588C0 = 0;
          ++HIDWORD(v101);
          goto LABEL_168;
        case 157:
          qword_1000589B0 = (uint64_t)optarg;
          goto LABEL_168;
        case 158:
          ++dword_10005880C;
          goto LABEL_168;
        case 159:
          dword_10005882C = 1;
          free((void *)qword_100058830);
          qword_100058830 = (uint64_t)strdup(optarg);
          if (!qword_100058830) {
            sub_10004052C();
          }
          goto LABEL_168;
        case 160:
          if (*optarg)
          {
            *(void *)__endptr = 0;
            *__error() = 0;
            uint64_t v26 = strtoll(optarg, (char **)__endptr, 0);
            uint64_t v105 = v26;
            if (**(unsigned char **)__endptr) {
              sub_1000407DC();
            }
            if (v26 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
              sub_100040774();
            }
            if (v26 >= 0x80000000) {
              sub_1000407A8();
            }
            if (!v26) {
              LODWORD(v26) = time(0);
            }
            dword_100058814 = v26;
          }
          goto LABEL_168;
        case 161:
          if (sub_100022F70(optarg, 0)) {
            errx(1, "--chmod=%s: invalid argument");
          }
          qword_100058818 = (uint64_t)optarg;
          goto LABEL_168;
        case 162:
          free((void *)qword_1000588A0);
          qword_1000588A0 = (uint64_t)strdup(optarg);
          if (!qword_1000588A0) {
            sub_10004052C();
          }
          goto LABEL_168;
        case 163:
          if (strchr(optarg, 47)) {
            errx(1, "--suffix cannot contain slashes: %s\n");
          }
          free((void *)qword_1000588A8);
          qword_1000588A8 = (uint64_t)strdup(optarg);
          if (!qword_1000588A8) {
            sub_10004052C();
          }
          goto LABEL_168;
        case 164:
          dword_100058844 = 1;
          goto LABEL_168;
        case 166:
          ++dword_100058A34;
          goto LABEL_168;
        case 167:
          ++dword_100058A38;
          goto LABEL_168;
        case 168:
          qword_100058A18 = (uint64_t)optarg;
          goto LABEL_168;
        case 169:
          if (*optarg)
          {
            unsigned int v102 = 0;
            unsigned int v27 = strtoll(optarg, &v102, 0);
            if (*v102) {
              sub_100040848();
            }
            int v28 = v27;
            if (v27 - 41 <= 0xFFFFFFF1) {
              sub_10004080C();
            }
            if (v27 >= 0x1E)
            {
              if (dword_100058FD8)
              {
                int v95 = *__error();
                unsigned int v29 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__endptr = 136315650;
                  *(void *)&__endptr[4] = optarg;
                  __int16 v107 = 1024;
                  LODWORD(v108[0]) = 27;
                  WORD2(v108[0]) = 1024;
                  *(_DWORD *)((char *)v108 + 6) = 40;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "--protocol=%s: is not supported by this version of openrsync. min: %d, max: %d", __endptr, 0x18u);
                }
                *__error() = v95;
              }
              sub_10001FDC8("--protocol=%s: is not supported by this version of openrsync. min: %d, max: %d", optarg, 27, 40);
            }
            dword_100058808 = v28;
          }
          goto LABEL_168;
        case 170:
          qword_100058A08 = (uint64_t)optarg;
          goto LABEL_168;
        case 171:
          goto LABEL_140;
        case 172:
          int v98 = 1;
LABEL_140:
          qword_100058A10 = (uint64_t)optarg;
          goto LABEL_168;
        case 173:
          qword_1000589C0 = (uint64_t)optarg;
          goto LABEL_168;
        case 175:
LABEL_332:
          sub_100024B98(0);
        case 177:
          dword_100058A40 = atoi(optarg);
          goto LABEL_168;
        case 178:
          if (*optarg)
          {
            *(void *)__endptr = 0;
            *__error() = 0;
            int v30 = strtoll(optarg, (char **)__endptr, 0);
            if (**(unsigned char **)__endptr) {
              sub_100040910();
            }
            qword_100058A50 = v30;
          }
          goto LABEL_168;
        case 179:
          ++dword_1000588D8;
          goto LABEL_168;
        case 180:
          if (*optarg)
          {
            *(void *)__endptr = 0;
            *__error() = 0;
            int v31 = strtoll(optarg, (char **)__endptr, 0);
            if (**(unsigned char **)__endptr) {
              sub_1000408E0();
            }
            if (v31 <= -2) {
              sub_100040878();
            }
            if (v31 >= 10) {
              sub_1000408AC();
            }
            dword_100058A2C = v31;
            if (!v31) {
              dword_100058A28 = 0;
            }
          }
          goto LABEL_168;
        case 181:
          dword_100058A3C = 1;
          goto LABEL_168;
        default:
          sub_100024B98(1);
      }
    }
  }
  if (dword_100058A48 >= 1) {
    dword_100058FDC = 0;
  }
  BOOL v33 = dword_100058A30 > 6 || ((1 << dword_100058A30) & 0x51) == 0;
  unsigned int v34 = &unk_100058800;
  if (v33) {
    sub_1000402C0();
  }
  if (dword_100058828)
  {
    if (qword_100058830) {
      sub_10004053C();
    }
    dword_10005882C = 1;
  }
  else
  {
    int v38 = (char *)qword_100058830;
    if (!dword_10005882C || qword_100058830)
    {
      if (!qword_100058830) {
        goto LABEL_190;
      }
    }
    else
    {
      unsigned int v39 = getenv("RSYNC_PARTIAL_DIR");
      if (!v39 || !*v39) {
        goto LABEL_190;
      }
      int v38 = strdup(v39);
      qword_100058830 = (uint64_t)v38;
      if (!v38) {
        sub_10004052C();
      }
    }
    if (!*v38 || !strcmp(v38, "."))
    {
      free(v38);
      qword_100058830 = 0;
    }
    else
    {
      int64_t v40 = strlen(v38) - 1;
      if (v40 >= 1)
      {
        unsigned int v41 = &v38[v40];
        unsigned int v42 = &v38[v40];
        do
        {
          int v43 = *--v42;
          if (v43 != 47) {
            break;
          }
          char *v41 = 0;
          unsigned int v41 = v42;
        }
        while (v42 > v38);
      }
      if (sub_100029A28(v38, 1, 0) == -1) {
        errx(1, "syntax error in exclude: %s");
      }
    }
  }
LABEL_190:
  if (dword_10005880C) {
    BOOL v35 = dword_100058A00 < 1;
  }
  else {
    BOOL v35 = 1;
  }
  if (!v35) {
    sub_1000402EC();
  }
  char v36 = (char *)qword_1000588A8;
  if (!qword_1000588A8)
  {
    if (qword_1000588A0) {
      char v37 = "";
    }
    else {
      char v37 = "~";
    }
    char v36 = strdup(v37);
    qword_1000588A8 = (uint64_t)v36;
  }
  int v44 = dword_100058898;
  if (dword_100058898 && dword_100058860 >= 2 && !dword_100058864)
  {
    snprintf(__endptr, 0x400uLL, "P *%s", v36);
    if (sub_100029A28(__endptr, 0, 0) == -1) {
      errx(1, "error adding protect rule: %s");
    }
    int v44 = dword_100058898;
  }
  if (v44 && !qword_1000588A0) {
    dword_100058880 = 1;
  }
  if (!qword_100058900) {
    qword_100058900 = (uint64_t)"rsync";
  }
  if (dword_100058FE0) {
    int v45 = 1000 * dword_100058FE0;
  }
  else {
    int v45 = -1;
  }
  dword_100058FE0 = v45;
  int v46 = dword_100058FF0;
  if (v100 > dword_100058FF0) {
    int v46 = v100;
  }
  if (v46) {
    int v47 = 1000 * v46;
  }
  else {
    int v47 = -1;
  }
  dword_100058FF0 = v47;
  uint64_t v48 = qword_1000589B0;
  if (!qword_1000589B0) {
    goto LABEL_281;
  }
  if (*(unsigned char *)qword_1000589B0 != 58)
  {
    if (sub_100025A40((const char *)qword_1000589B0))
    {
      uint64_t v60 = v48 + 8;
      size_t v61 = strcspn((const char *)(v48 + 8), ":/");
      int v62 = strndup((const char *)(v48 + 8), v61);
      qword_1000589F0 = (uint64_t)v62;
      if (!v62)
      {
        if (dword_100058FD8)
        {
          int v73 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_270;
          }
          goto LABEL_271;
        }
        goto LABEL_272;
      }
      char v57 = (char)v62;
      if (*(unsigned char *)(v60 + v61) != 47)
      {
        size_t v61 = strcspn((const char *)(v48 + 8), "/");
        if (!*(unsigned char *)(v60 + v61))
        {
          if (dword_100058FD8)
          {
            int v90 = *__error();
            uint64_t v91 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_1000404B4(v48, v91);
            }
            *__error() = v90;
          }
          sub_10001FBD8("Missing path in --files-from: %s", v63, v64, v65, v66, v67, v68, v69, v48);
          goto LABEL_274;
        }
      }
      qword_1000589F8 = (uint64_t)strdup((const char *)(v61 + v60 + 1));
      if (!qword_1000589F8)
      {
        if (dword_100058FD8)
        {
          int v71 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10004044C();
          }
          *__error() = v71;
        }
        uint64_t v72 = "malloc path";
LABEL_324:
        sub_10001FBD8(v72, v70, v51, v52, v53, v54, v55, v56, v94);
        free((void *)qword_1000589F0);
        qword_1000589F0 = 0;
        goto LABEL_274;
      }
    }
    else
    {
      int v74 = strchr((char *)v48, 58);
      if (!v74) {
        goto LABEL_274;
      }
      uint64_t v75 = v74;
      uint64_t v76 = strndup((const char *)v48, (size_t)&v74[-v48]);
      qword_1000589F0 = (uint64_t)v76;
      if (!v76)
      {
        if (dword_100058FD8)
        {
          int v73 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_270:
          }
            sub_100040418();
LABEL_271:
          *__error() = v73;
        }
LABEL_272:
        uint64_t v59 = "malloc hostspec";
        goto LABEL_273;
      }
      char v57 = (char)v76;
      qword_1000589F8 = (uint64_t)strdup(v75 + 1);
      if (!qword_1000589F8)
      {
        if (dword_100058FD8)
        {
          int v92 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100040480();
          }
          *__error() = v92;
        }
        uint64_t v72 = "malloc hostspec path";
        goto LABEL_324;
      }
    }
LABEL_258:
    if (dword_100058FD8)
    {
      int v77 = *__error();
      unsigned int v78 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__endptr = 136315394;
        *(void *)&__endptr[4] = qword_1000589F0;
        __int16 v107 = 2080;
        v108[0] = qword_1000589F8;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "remote file for filesfrom: '%s' '%s'\n", __endptr, 0x16u);
      }
      *__error() = v77;
      char v57 = qword_1000589F0;
    }
    sub_10001FA38(1, "remote file for filesfrom: '%s' '%s'\n", v51, v52, v53, v54, v55, v56, v57);
    if (!v101) {
      goto LABEL_276;
    }
    goto LABEL_277;
  }
  uint64_t v49 = strdup("");
  qword_1000589F0 = (uint64_t)v49;
  if (!v49)
  {
    if (dword_100058FD8)
    {
      int v73 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_270;
      }
      goto LABEL_271;
    }
    goto LABEL_272;
  }
  char v57 = (char)v49;
  qword_1000589F8 = (uint64_t)strdup((const char *)(v48 + 1));
  if (qword_1000589F8) {
    goto LABEL_258;
  }
  if (dword_100058FD8)
  {
    int v58 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10004044C();
    }
    *__error() = v58;
  }
  uint64_t v59 = "malloc path";
LABEL_273:
  sub_10001FBD8(v59, v50, v51, v52, v53, v54, v55, v56, v94);
LABEL_274:
  qword_1000589F8 = (uint64_t)strdup((const char *)qword_1000589B0);
  if (!qword_1000589F8)
  {
    if (dword_100058FD8)
    {
      int v88 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000403E4();
      }
      *__error() = v88;
    }
    sub_10001FBD8("strdup filesfrom no host", v79, v80, v81, v82, v83, v84, v85, v94);
    return 0;
  }
  qword_1000589F0 = 0;
  if (!v101) {
LABEL_276:
  }
    dword_1000588BC = 1;
LABEL_277:
  if (!HIDWORD(v101)) {
    dword_1000588C0 = 1;
  }
  if (v99) {
    dword_100058820 = 0;
  }
LABEL_281:
  if (dword_1000588BC && v101)
  {
    if (dword_100058FD8)
    {
      int v86 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000403B0();
      }
      *__error() = v86;
    }
    sub_10001FC88("Cannot use --relative and --no-relative at the same time");
  }
  if (dword_1000588C0 && HIDWORD(v101))
  {
    if (dword_100058FD8)
    {
      int v87 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10004037C();
      }
      *__error() = v87;
    }
    sub_10001FC88("Cannot use --dirs and --no-dirs at the same time");
  }
  if (dword_100058860 == 1) {
    dword_100058860 = 2;
  }
  if (qword_100058A10 && qword_100058A08) {
    sub_100040308();
  }
  if (dword_100058824) {
    qword_100058A10 = 0;
  }
  else {
    dword_100058824 = v98 != 0;
  }
  if (!dword_100058804 && HIDWORD(v99))
  {
    if (sub_100029A28("-C", 0, 0xAu)) {
      sub_100040350();
    }
    if (sub_100029A28(":C", 0, 0xAu)) {
      sub_100040324();
    }
    return &unk_100058800;
  }
  return v34;
}

void sub_100024B98(int a1)
{
  uint64_t v2 = &__stdoutp;
  if (a1) {
    uint64_t v2 = &__stderrp;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = getprogname();
  fprintf(v3, "usage: %s [-0468BCDEFHIKLOPRSTWVabcdghklnopqrtuvxyz] [-e program] [-f filter]\n\t[--8-bit-output] [--address=sourceaddr]\n\t[--append] [--backup-dir=dir] [--bwlimit=limit] [--cache | --no-cache]\n\t[--compare-dest=dir] [--contimeout] [--copy-dest=dir] [--copy-unsafe-links]\n\t[--del | --delete-after | --delete-before | --delete-during]\n\t[--delay-updates] [--dirs] [--no-dirs]\n\t[--exclude] [--exclude-from=file]\n\t[--extended-attributes]\n\t[--existing] [--force] [--ignore-errors]\n\t[--ignore-existing] [--ignore-non-existing] [--include]\n\t[--include-from=file] [--inplace] [--keep-dirlinks] [--link-dest=dir]\n\t[--max-delete=NUM] [--max-size=SIZE] [--min-size=SIZE]\n\t[--modify-window=sec] [--no-motd] [--numeric-ids]\n\t[--out-format=FMT] [--partial] [--password-file=pwfile] [--port=portnumber]\n\t[--progress] [--protocol] [--read-batch=file]\n\t[--remove-source-files] [--rsync-path=program] [--safe-links] [--size-only]\n\t[--sockopts=sockopts] [--specials] [--suffix] [--super] [--timeout=seconds]\n\t[--only-write-batch=file | --write-batch=file]\n"
    "\tsource ... directory\n",
    v4);
  exit(a1);
}

void start(int a1, const char **a2)
{
  unsigned int v140 = -1;
  setprogname(*a2);
  sub_10001F990((uint64_t)__stderrp);
  if (os_variant_has_internal_content())
  {
    dword_100058FD8 = 1;
  }
  else if (!dword_100058FD8)
  {
    goto LABEL_5;
  }
  qword_100058FE8 = (uint64_t)os_log_create("com.apple.rsync", "trace");
LABEL_5:
  setlocale(0, "");
  setlocale(2, "");
  setlocale(4, "");
  if (!sub_1000232B8(a1, (char *const *)a2, 0, 0)
    || (uint64_t v4 = optind, v5 = (a1 - optind), !qword_100058A08) && !dword_100058804 && (int)v5 <= 1
    || (int)v5 < 1)
  {
    sub_100024B98(1);
  }
  int v139 = 0;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  unint64_t v122 = &dword_100058800;
  char v6 = sub_10002005C(&v122, 0, 0);
  if (v6) {
    DWORD2(v132) = 1;
  }
  if ((v6 & 2) != 0) {
    HIDWORD(v132) = 1;
  }
  uint64_t v7 = (uint64_t)&a2[v4];
  if (dword_100058FD8)
  {
    int v8 = *__error();
    int v9 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 67109632;
      LODWORD(v121) = getpid();
      WORD2(v121) = 1024;
      *(_DWORD *)((char *)&v121 + 6) = DWORD2(v132);
      WORD5(v121) = 1024;
      HIDWORD(v121) = HIDWORD(v132);
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Printing(%d): itemize %d late %d", buf, 0x14u);
    }
    *__error() = v8;
  }
  char v10 = getpid();
  uint64_t v116 = DWORD2(v132);
  uint64_t v117 = HIDWORD(v132);
  sub_10001FA38(2, "Printing(%d): itemize %d late %d", v11, v12, v13, v14, v15, v16, v10);
  sub_100030C6C((uint64_t)off_1000586D8);
  if (dword_100058804)
  {
    if (dword_100058A00 < 0) {
      dword_100058A00 = 0;
    }
    int v18 = sub_10002F7E0(off_1000586D8, &dword_100058800, v5, v7);
    exit(v18);
  }
  pid_t v17 = getpid();
  if (setpgid(0, v17) == -1) {
    err(14, "setpgid");
  }
  int v19 = malloc_type_calloc(1uLL, 0x38uLL, 0x1090040CD3CCCDCuLL);
  if (!v19) {
    goto LABEL_34;
  }
  uint64_t v20 = (uint64_t)v19;
  size_t v21 = v5 - 1;
  v19[3] = v21;
  if (v21)
  {
    uint64_t v22 = malloc_type_calloc(v21, 8uLL, 0x10040436913F5uLL);
    *(void *)(v20 + 16) = v22;
    if (v22)
    {
      uint64_t v23 = 0;
      while (1)
      {
        int v24 = strdup(*(const char **)(v7 + 8 * v23));
        *(void *)(*(void *)(v20 + 16) + 8 * v23) = v24;
        if (!v24) {
          break;
        }
        if (v21 == ++v23) {
          goto LABEL_33;
        }
      }
    }
LABEL_34:
    err(22, 0);
  }
  if (!qword_100058A08) {
    errx(1, "One argument without --read-batch not yet supported");
  }
LABEL_33:
  int v25 = strdup(*(const char **)(v7 + 8 * v21));
  *(void *)(v20 + 32) = v25;
  if (!v25) {
    goto LABEL_34;
  }
  uint64_t v26 = v25;
  unsigned int v27 = &off_100058000;
  if (qword_100058A08)
  {
    if (v25[strcspn(v25, ":/")] == 58) {
      errx(1, "rsync --read-batch destination must be local", v114);
    }
LABEL_105:
    sub_100030E10((uint64_t)off_1000586D8, v20);
    if (v27[321])
    {
      int v64 = sub_1000075D8(off_1000586D8, (uint64_t)&dword_100058800, v20);
      exit(v64);
    }
    char v61 = qword_1000589F0;
    if (qword_1000589F0)
    {
      if (!*(void *)(v20 + 8))
      {
        if (dword_100058FD8)
        {
          int v62 = *__error();
          uint64_t v63 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)stat buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "Remote --files-from with a local transfer is not valid", buf, 2u);
          }
          *__error() = v62;
        }
        sub_10001FB50("Remote --files-from with a local transfer is not valid");
        goto LABEL_113;
      }
      if (dword_100058FD8)
      {
        int v65 = *__error();
        uint64_t v66 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 136315138;
          *(void *)&long long v121 = qword_1000589F0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "--files-from host '%s'", buf, 0xCu);
        }
        *__error() = v65;
        char v61 = qword_1000589F0;
      }
      sub_10001FA38(1, "--files-from host '%s'", v55, v56, v57, v58, v59, v60, v61);
      if (*(unsigned char *)qword_1000589F0)
      {
        if (strcmp((const char *)qword_1000589F0, *(const char **)(v20 + 8)))
        {
          if (dword_100058FD8)
          {
            int v82 = *__error();
            uint64_t v83 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)stat buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "Cannot have different hostnames for --files-from and paths.", buf, 2u);
            }
            *__error() = v82;
          }
          sub_10001FB50("Cannot have different hostnames for --files-from and paths.");
LABEL_113:
          exit(2);
        }
      }
      else
      {
        if (dword_100058FD8)
        {
          int v73 = *__error();
          int v74 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "Inheriting --files-from remote side", buf, 2u);
          }
          *__error() = v73;
        }
        sub_10001FA38(1, "Inheriting --files-from remote side", v67, v68, v69, v70, v71, v72, v115);
      }
    }
    if (*(void *)(v20 + 8))
    {
      int v75 = dword_100058A00;
    }
    else
    {
      int v75 = dword_100058A00;
      if (!*(_DWORD *)(v20 + 44) && dword_100058A00 < 0)
      {
        int v76 = 1;
        goto LABEL_133;
      }
    }
    if ((v75 & 0x80000000) == 0)
    {
LABEL_134:
      if (*(_DWORD *)(v20 + 44) && !qword_1000588F8)
      {
        int v77 = sub_100031064((uint64_t)&dword_100058800, (int *)&v140, v20);
        if (!v77)
        {
          int v77 = sub_1000329F0(off_1000586D8, (uint64_t)&dword_100058800, v140, v20);
          close(v140);
        }
        exit(v77);
      }
      if (socketpair(1, 1, 0, &v141) == -1) {
        err(14, "socketpair");
      }
      int v78 = v141;
      int v79 = fcntl(v141, 3, 0, v116, v117);
      if (fcntl(v78, 4, v79 | 4u) == -1 || (int v80 = v142, v81 = fcntl(v142, 3, 0), fcntl(v80, 4, v81 | 4u) == -1)) {
        err(14, "fcntl");
      }
      pid_t v84 = fork();
      if (v84)
      {
        pid_t v85 = v84;
        if (v84 == -1) {
          err(14, "fork");
        }
        sub_100030E18((uint64_t)off_1000586D8, v84);
        close(v142);
        if (*(_DWORD *)(v20 + 44)) {
          int v102 = sub_1000329F0(off_1000586D8, (uint64_t)&dword_100058800, v141, v20);
        }
        else {
          int v102 = sub_100004090(off_1000586D8, (uint64_t)&dword_100058800, v141, v20);
        }
        int v103 = v102;
        close(v141);
        if (waitpid(v85, &v139, 0) == -1) {
          err(21, "waitpid");
        }
        sub_100030E18((uint64_t)off_1000586D8, 0);
        if (!v103)
        {
          if ((v139 & 0x7F) == 0x7F)
          {
            int v103 = 21;
          }
          else if ((v139 & 0x7F) == 0x1F)
          {
            int v103 = 0;
          }
          else if ((v139 & 0x7F) != 0)
          {
            int v103 = 16;
          }
          else
          {
            int v103 = BYTE1(v139);
          }
        }
        free((void *)qword_1000589F0);
        free((void *)qword_1000589F8);
        exit(v103);
      }
      close(v141);
      long long v123 = 0u;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v134 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      unint64_t v122 = &dword_100058800;
      DWORD1(v123) = dword_100058814;
      sub_100030E38(off_1000586D8, (uint64_t)&v122);
      sub_100030C18((uint64_t)off_1000586D8);
      int v96 = (const char **)sub_100011358(&v122, v20, 0);
      if (*v96)
      {
        uint64_t v97 = 0;
        do
        {
          if (dword_100058FD8)
          {
            int v98 = *__error();
            uint64_t v99 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              int v100 = v96[v97];
              *(_DWORD *)stat buf = 67109378;
              LODWORD(v121) = v97;
              WORD2(v121) = 2080;
              *(void *)((char *)&v121 + 6) = v100;
              _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "exec[%d] = %s", buf, 0x12u);
            }
            *__error() = v98;
          }
          sub_10001FA38(1, "exec[%d] = %s", v90, v91, v92, v93, v94, v95, v97);
          uint64_t v101 = &v96[v97++];
        }
        while (v101[1]);
      }
      if (dup2(v142, 0) == -1 || dup2(v142, 1) == -1) {
        err(14, "dup2");
      }
      if (execvp(*v96, (char *const *)v96) == -1)
      {
        if (dword_100058FD8)
        {
          int v111 = *__error();
          uint64_t v112 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v113 = *v96;
            *(_DWORD *)stat buf = 136315138;
            *(void *)&long long v121 = v113;
            _os_log_error_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, "exec on '%s'", buf, 0xCu);
          }
          *__error() = v111;
        }
        sub_10001FBD8("exec on '%s'", v104, v105, v106, v107, v108, v109, v110, (char)*v96);
      }
      _exit(14);
    }
    int v76 = 0;
LABEL_133:
    dword_100058A00 = v76;
    goto LABEL_134;
  }
  *(_DWORD *)(v20 + 40) = 0;
  if (v25[strcspn(v25, ":/")] == 58)
  {
    int v28 = strdup(v26);
    *(void *)(v20 + 8) = v28;
    if (!v28) {
      goto LABEL_34;
    }
  }
  else
  {
    int v28 = *(char **)(v20 + 8);
  }
  unsigned int v29 = **(const char ***)(v20 + 16);
  if (v29[strcspn(v29, ":/")] == 58)
  {
    if (v28) {
      errx(1, "both source and destination cannot be remote files", v114);
    }
    *(_DWORD *)(v20 + 40) = 1;
    int v28 = strdup(v29);
    *(void *)(v20 + 8) = v28;
    if (!v28) {
      goto LABEL_34;
    }
  }
  else if (!v28)
  {
    uint64_t v30 = 0;
    if (!*(_DWORD *)(v20 + 44)) {
      goto LABEL_48;
    }
    goto LABEL_81;
  }
  if (!strncasecmp(v28, "rsync://", 8uLL))
  {
    *(_DWORD *)(v20 + 44) = 1;
    BOOL v33 = v28 + 8;
    unsigned int v34 = strchr(v28 + 8, 64);
    if (v34)
    {
      unsigned int v39 = v34;
      int64_t v40 = strndup(v28 + 8, v34 - v33);
      *(void *)uint64_t v20 = v40;
      if (!v40) {
        goto LABEL_34;
      }
      BOOL v33 = v39 + 1;
      size_t v35 = strlen(v39 + 1);
    }
    else
    {
      size_t v35 = strlen(v28) - 8;
    }
    memmove(v28, v33, v35 + 1);
    unsigned int v41 = strchr(*(char **)(v20 + 8), 47);
    if (!v41) {
      errx(1, "rsync protocol requires a module name", v114);
    }
    char *v41 = 0;
    int v44 = v41 + 1;
    *(void *)(v20 + 48) = v44;
    int v45 = strchr(v44, 47);
    if (v45) {
      char *v45 = 0;
    }
    int v46 = strchr(*(char **)(v20 + 8), 58);
    if (v46)
    {
      char *v46 = 0;
      qword_100058900 = (uint64_t)(v46 + 1);
    }
  }
  else
  {
    char v36 = strchr(v28, 58);
    if (!v36) {
      __assert_rtn("fargs_parse", "main.c", 351, "cp != NULL");
    }
    char *v36 = 0;
    if (v36[1] == 58)
    {
      *(_DWORD *)(v20 + 44) = 1;
      char v37 = v36 + 2;
      *(void *)(v20 + 48) = v37;
      int v38 = strchr(v37, 47);
      if (v38) {
        char *v38 = 0;
      }
    }
  }
  size_t v47 = strlen(*(const char **)(v20 + 8));
  if (!v47) {
    errx(1, "empty remote host", v114);
  }
  int v28 = (char *)v47;
  uint64_t v118 = *(void *)(v20 + 8);
  if (!*(_DWORD *)(v20 + 44))
  {
    int v32 = *(_DWORD *)(v20 + 40);
    if (v32 == 1)
    {
      uint64_t v52 = *(void *)(v20 + 24);
      if (!v52)
      {
        int v32 = 1;
        goto LABEL_95;
      }
      int v88 = *(const char ***)(v20 + 16);
      do
      {
        uint64_t v89 = *v88;
        if (v89[strcspn(*v88, ":/")] != 58 || sub_100025A40(v89))
        {
          if (!sub_100025A40(v89)) {
            errx(1, "local file in list of remote sources: %s");
          }
          errx(1, "remote daemon in list of remote sources: %s");
        }
        ++v88;
        --v52;
      }
      while (v52);
      int v32 = 1;
LABEL_66:
      unsigned int v27 = &off_100058000;
LABEL_95:
      uint64_t v30 = v118;
      goto LABEL_96;
    }
    uint64_t v30 = *(void *)(v20 + 8);
    if (v32)
    {
LABEL_96:
      if (!v30) {
        goto LABEL_105;
      }
      if (v32 != 1)
      {
        if (!v32)
        {
          if (!v28) {
            __assert_rtn("fargs_parse", "main.c", 420, "hostlen > 0");
          }
          size_t v53 = strlen(*(const char **)(v20 + 32));
          memmove(*(void **)(v20 + 32), &v28[*(void *)(v20 + 32) + 1], v53 - (void)v28);
        }
        goto LABEL_105;
      }
      if (v28) {
        goto LABEL_102;
      }
      goto LABEL_199;
    }
LABEL_48:
    uint64_t v31 = *(void *)(v20 + 24);
    if (!v31)
    {
      int v32 = 0;
      goto LABEL_96;
    }
    uint64_t v118 = v30;
    unsigned int v42 = *(const char ***)(v20 + 16);
    do
    {
      int v43 = *v42;
      if (v43[strcspn(*v42, ":/")] == 58) {
        goto LABEL_92;
      }
      ++v42;
      --v31;
    }
    while (v31);
    int v32 = 0;
    goto LABEL_66;
  }
  if (!**(unsigned char **)(v20 + 48)) {
    errx(1, "empty remote module", v114);
  }
  int v48 = *(_DWORD *)(v20 + 40);
  if (v48 == 1)
  {
    uint64_t v86 = *(void *)(v20 + 24);
    if (v86)
    {
      int v87 = *(const char ***)(v20 + 16);
      do
      {
        if (!sub_100025A40(*v87)) {
          errx(1, "non-remote daemon file in list of remote daemon sources: %s");
        }
        ++v87;
        --v86;
      }
      while (v86);
    }
    int v48 = 1;
    unsigned int v27 = &off_100058000;
    if (v118) {
      goto LABEL_89;
    }
LABEL_83:
    __assert_rtn("fargs_parse", "main.c", 428, "f->host != NULL");
  }
  uint64_t v30 = *(void *)(v20 + 8);
  if (v48)
  {
LABEL_88:
    if (v30) {
      goto LABEL_89;
    }
    goto LABEL_83;
  }
LABEL_81:
  uint64_t v49 = *(void *)(v20 + 24);
  if (!v49)
  {
    int v48 = 0;
    if (!v30) {
      goto LABEL_83;
    }
LABEL_89:
    if (v28)
    {
      if (v48 != 1)
      {
        sub_100025AB0(v20, *(char **)(v20 + 32), (size_t)v28);
        goto LABEL_105;
      }
LABEL_102:
      if (*(void *)(v20 + 24))
      {
        unint64_t v54 = 0;
        do
          sub_100025AB0(v20, *(char **)(*(void *)(v20 + 16) + 8 * v54++), (size_t)v28);
        while (v54 < *(void *)(v20 + 24));
      }
      goto LABEL_105;
    }
LABEL_199:
    __assert_rtn("fargs_parse", "main.c", 429, "hostlen > 0");
  }
  uint64_t v119 = v30;
  uint64_t v50 = *(const char ***)(v20 + 16);
  do
  {
    uint64_t v51 = *v50;
    if (v51[strcspn(*v50, ":/")] == 58) {
LABEL_92:
    }
      errx(1, "remote file in list of local sources: %s");
    ++v50;
    --v49;
  }
  while (v49);
  int v48 = 0;
  unsigned int v27 = &off_100058000;
  uint64_t v30 = v119;
  goto LABEL_88;
}

BOOL sub_100025A40(const char *a1)
{
  if (!strncasecmp(a1, "rsync://", 8uLL)) {
    return 1;
  }
  size_t v2 = strcspn(a1, ":/");
  return a1[v2] == 58 && a1[v2 + 1] == 58;
}

void *sub_100025AB0(uint64_t a1, char *__s, size_t a3)
{
  size_t v6 = strlen(__s);
  if (!*(_DWORD *)(a1 + 44))
  {
    if (*__s == 58)
    {
      uint64_t v7 = __s + 1;
      int v9 = __s;
      size_t v8 = v6;
      goto LABEL_27;
    }
    if (!strncmp(__s, *(const char **)(a1 + 8), a3) && (!__s[a3] || __s[a3] == 58))
    {
      uint64_t v7 = &__s[a3 + 1];
      size_t v8 = v6 - a3;
      goto LABEL_21;
    }
LABEL_30:
    errx(1, "different remote host: %s", __s);
  }
  if (strncasecmp(__s, "rsync://", 8uLL))
  {
    if (!strncmp(__s, "::", 2uLL))
    {
      uint64_t v7 = __s + 2;
      size_t v8 = v6 - 1;
      goto LABEL_21;
    }
    if (!strncmp(__s, *(const char **)(a1 + 8), a3) && (!__s[a3] || __s[a3] == 58))
    {
      uint64_t v7 = &__s[a3 + 2];
      size_t v8 = v6 + ~a3;
LABEL_21:
      int v9 = __s;
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  char v10 = __s + 8;
  uint64_t v11 = strchr(__s + 8, 64);
  if (v11) {
    char v10 = v11 + 1;
  }
  uint64_t v12 = strchr(v10, 58);
  uint64_t v13 = v10;
  if (v12)
  {
    *uint64_t v12 = 0;
    uint64_t v13 = v12 + 1;
  }
  uint64_t v14 = strchr(v13 + 1, 47);
  if (v14) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = &v13[strlen(v13) - 1];
  }
  if (strncmp(v10, *(const char **)(a1 + 8), a3) || v10[a3] && v10[a3] != 47) {
    goto LABEL_30;
  }
  size_t v8 = strlen(v15) + 1;
  int v9 = __s;
  uint64_t v7 = (char *)v15;
LABEL_27:

  return memmove(v9, v7, v8);
}

void sub_100025C84()
{
  errx(22, 0);
}

char *sub_100025C9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v16[0] = 0;
  v16[1] = &a9;
  if (vasprintf(v16, a2, &a9) == -1) {
    sub_100040940();
  }
  unint64_t v10 = *(unsigned int *)(a1 + 12);
  uint64_t v11 = *(char **)a1;
  if (*(void *)a1)
  {
    unsigned int v12 = v10 << (*(_DWORD *)(a1 + 8) + 2 >= v10);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    unsigned int v12 = 32;
  }
  uint64_t result = sub_100004924(v11, v10, v12, 8uLL);
  *(void *)a1 = result;
  if (!result) {
    sub_1000402A8();
  }
  uint64_t v14 = v16[0];
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v12;
  *(void *)&result[8 * v15] = v14;
  *(void *)(*(void *)a1 + 8 * (v15 + 1)) = 0;
  return result;
}

uint64_t sub_100025D48(uint64_t a1, unint64_t a2)
{
  if (*(void *)a1 && *(unsigned int *)(a1 + 8) >= a2) {
    return *(void *)(*(void *)a1 + 8 * a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_100025D6C(uint64_t a1, int a2)
{
  memset(&v36, 0, sizeof(v36));
  if (fstat(a2, &v36) == -1)
  {
    if (dword_100058FD8)
    {
      int v18 = *__error();
      int v19 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10004095C(a1, v19, v20, v21, v22, v23, v24, v25);
      }
      *__error() = v18;
    }
    sub_10001FBD8("%s: fstat", v3, v4, v5, v6, v7, v8, v9, a1);
    return 0;
  }
  if ((v36.st_mode & 7) != 0)
  {
    if (dword_100058FD8)
    {
      int v10 = *__error();
      uint64_t v11 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100040A34(a1, v11, v12, v13, v14, v15, v16, v17);
      }
      *__error() = v10;
    }
    sub_10001FB50("%s: strict mode violation (other permission bits set)");
    return 0;
  }
  uid_t v26 = geteuid();
  uint64_t result = 1;
  if (!v26 && v36.st_uid)
  {
    if (dword_100058FD8)
    {
      int v28 = *__error();
      unsigned int v29 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000409C8(a1, v29, v30, v31, v32, v33, v34, v35);
      }
      *__error() = v28;
    }
    sub_10001FB50("%s: strict mode violation (root process, file not owned by root)");
    return 0;
  }
  return result;
}

uint64_t sub_100025F0C(char *__s, mode_t a2)
{
  uint64_t v4 = __s;
  memset(&v9, 0, sizeof(v9));
  while (1)
  {
    uint64_t v5 = &v4[strspn(v4, "/")];
    uint64_t v4 = (char *)&v5[strcspn(v5, "/")];
    int v6 = *v4;
    *uint64_t v4 = 0;
    if (mkdir(__s, a2))
    {
      int v7 = *__error();
      if (stat(__s, &v9) == -1) {
        goto LABEL_9;
      }
      if ((v9.st_mode & 0xF000) != 0x4000) {
        break;
      }
    }
    if (!v6) {
      return 0;
    }
    *uint64_t v4 = 47;
  }
  int v7 = 20;
LABEL_9:
  *__error() = v7;
  *uint64_t v4 = 47;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100026008(int a1, char *__s, mode_t a3)
{
  int v6 = __s;
  memset(&v11, 0, sizeof(v11));
  while (1)
  {
    int v7 = &v6[strspn(v6, "/")];
    int v6 = (char *)&v7[strcspn(v7, "/")];
    int v8 = *v6;
    char *v6 = 0;
    if (mkdirat(a1, __s, a3))
    {
      int v9 = *__error();
      if (fstatat(a1, __s, &v11, 0) == -1) {
        goto LABEL_9;
      }
      if ((v11.st_mode & 0xF000) != 0x4000) {
        break;
      }
    }
    if (!v8) {
      return 0;
    }
    char *v6 = 47;
  }
  int v9 = 20;
LABEL_9:
  *__error() = v9;
  char *v6 = 47;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100026114(int a1, char *a2)
{
  return sub_100026128(a1, a2, 1, 0, 0, 0);
}

uint64_t sub_100026128(int a1, char *__s, int a3, const char *a4, __int16 a5, dev_t a6)
{
  size_t v10 = strlen(__s);
  if (v10 <= 5) {
    goto LABEL_6;
  }
  uint64_t v11 = 0;
  uint64_t v12 = &__s[v10];
  do
  {
    uint64_t v13 = v11;
    uint64_t v14 = &v12[v11];
    if (&v12[v11] <= __s) {
      break;
    }
    --v11;
  }
  while (*(v14 - 1) == 88);
  if (-v13 >= 6)
  {
    int v18 = 0x7FFFFFFF;
    int v19 = a3 - 1;
    while (2)
    {
      uint64_t v20 = v14;
      do
      {
        arc4random_buf(__buf, 0x20uLL);
        if (v20 == v12) {
          break;
        }
        unint64_t v21 = 0;
        do
        {
          v20[v21] = aAbcdefghijklmn[__buf[v21] % 0x3Eu];
          uint64_t v22 = (uint64_t)&v20[v21 + 1];
          unint64_t v23 = v21 + 1;
          if (v21 > 0xE) {
            break;
          }
          ++v21;
        }
        while ((char *)v22 != v12);
        v20 += v23;
      }
      while ((char *)v22 != v12);
      switch(v19)
      {
        case 0:
          uint64_t result = openat(a1, __s, 2562, 384);
          if (result == -1) {
            goto LABEL_30;
          }
          break;
        case 1:
          uint64_t result = mkdirat(a1, __s, 0x1C0u);
          if (result) {
            goto LABEL_30;
          }
          break;
        case 2:
          uint64_t result = symlinkat(a4, a1, __s);
          if (result) {
            goto LABEL_30;
          }
          break;
        case 3:
          uint64_t result = mkfifoat(a1, __s, 0x180u);
          if (result) {
            goto LABEL_30;
          }
          break;
        case 4:
          if ((a5 & 0xBFFF) != 0x2000) {
            goto LABEL_6;
          }
          uint64_t result = mknodat(a1, __s, a5 | 0x180, a6);
          if (result) {
            goto LABEL_30;
          }
          break;
        case 5:
          uint64_t result = sub_10002663C();
          if (result)
          {
LABEL_30:
            if (*__error() != 17) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_31;
          }
          break;
        default:
LABEL_31:
          if (--v18) {
            continue;
          }
          uint64_t v15 = __error();
          int v16 = 17;
          goto LABEL_7;
      }
      break;
    }
  }
  else
  {
LABEL_6:
    uint64_t v15 = __error();
    int v16 = 22;
LABEL_7:
    *uint64_t v15 = v16;
    return 0xFFFFFFFFLL;
  }
  return result;
}

char *sub_1000263A0(const char *a1, int a2, char *__s)
{
  if (sub_100026128(a2, __s, 3, a1, 0, 0) == -1) {
    return 0;
  }
  else {
    return __s;
  }
}

char *sub_1000263E4(int a1, char *a2)
{
  if (sub_100026128(a1, a2, 4, 0, 0, 0) == -1) {
    return 0;
  }
  else {
    return a2;
  }
}

char *sub_100026420(int a1, char *a2, __int16 a3, dev_t a4)
{
  if (sub_100026128(a1, a2, 5, 0, a3, a4) == -1) {
    return 0;
  }
  else {
    return a2;
  }
}

char *sub_10002645C(const char *a1, char *a2)
{
  if (sub_100026128(0, a2, 6, a1, 0, 0) == -1) {
    return 0;
  }
  else {
    return a2;
  }
}

uint64_t sub_10002649C(char **a1, char *__s, int a3, int a4)
{
  if (!a4)
  {
    if (a3 && (uint64_t v25 = strrchr(__s, 47)) != 0)
    {
      uint64_t result = asprintf(a1, "%.*s/.%s.XXXXXXXXXX", v25 - __s, __s, &__s[(int)v25 - (int)__s + 1]);
      if (result != -1) {
        return result;
      }
      if (!dword_100058FD8) {
        goto LABEL_20;
      }
      int v16 = *__error();
      uint64_t v17 = qword_100058FE8;
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t result = asprintf(a1, ".%s.XXXXXXXXXX", __s);
      if (result != -1) {
        return result;
      }
      if (!dword_100058FD8) {
        goto LABEL_20;
      }
      int v16 = *__error();
      uint64_t v17 = qword_100058FE8;
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  int v6 = strrchr(__s, 47);
  if (v6) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = __s;
  }
  uint64_t result = asprintf(a1, ".%s.XXXXXXXXXX", v7);
  if (result == -1)
  {
    if (!dword_100058FD8)
    {
LABEL_20:
      sub_10001FBD8("asprintf", v9, v10, v11, v12, v13, v14, v15, v26);
      *a1 = 0;
      return 0xFFFFFFFFLL;
    }
    int v16 = *__error();
    uint64_t v17 = qword_100058FE8;
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
    {
LABEL_19:
      *__error() = v16;
      goto LABEL_20;
    }
LABEL_18:
    sub_100040AA0(v17, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_10002663C()
{
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v8 = 0u;
  long long v9 = 0u;
  sockaddr v6 = (sockaddr)0;
  long long v7 = 0u;
  v6.int sa_family = 1;
  unint64_t v0 = __strlcpy_chk();
  if (v0 >= 0x68
    || v6.sa_data[v0] != 47 && (unint64_t)__strlcat_chk() >= 0x68
    || (unint64_t)__strlcat_chk() >= 0x68)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  uint64_t result = socket(1, 1, 0);
  if (result != -1)
  {
    int v2 = result;
    int v3 = fcntl(result, 3, 0);
    uint64_t result = fcntl(v2, 4, v3 | 4u);
    if (result != -1)
    {
      int v4 = fcntl(v2, 1, 0);
      uint64_t result = fcntl(v2, 2, v4 | 1u);
      if (result != -1)
      {
        if (!bind(v2, &v6, 0x6Au))
        {
          close(v2);
          return 0;
        }
        int v5 = *__error();
        close(v2);
        *__error() = v5;
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_1000267E4(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 56);
  unint64_t v3 = *(void *)result - 1;
  unint64_t v4 = v3 + (*(_DWORD *)(result + 8) - 5);
  int v5 = (unsigned char *)(*(void *)(result + 24) - 1);
  int v6 = *(_DWORD *)(result + 32);
  int v7 = v5 - (a2 - v6);
  long long v8 = &v5[v6 - 257];
  int v9 = *(_DWORD *)(v2 + 52);
  unsigned int v10 = *(_DWORD *)(v2 + 56);
  unsigned int v11 = *(_DWORD *)(v2 + 60);
  uint64_t v12 = *(void *)(v2 + 64);
  unint64_t v13 = *(void *)(v2 + 72);
  unsigned int v14 = *(_DWORD *)(v2 + 80);
  uint64_t v15 = ~(-1 << *(_DWORD *)(v2 + 112));
  uint64_t v16 = *(void *)(v2 + 96);
  uint64_t v17 = *(void *)(v2 + 104);
  uint64_t v18 = ~(-1 << *(_DWORD *)(v2 + 116));
  uint64_t v19 = "invalid distance too far back";
  while (2)
  {
    if (v14 <= 0xE)
    {
      unsigned int v20 = *(unsigned __int8 *)(v3 + 2);
      v3 += 2;
      v13 += ((unint64_t)*(unsigned __int8 *)(v3 - 1) << v14)
           + ((unint64_t)v20 << (v14 + 8));
      v14 += 16;
    }
    uint64_t v21 = (unsigned __int8 *)(v16 + 4 * (v13 & v15));
    unsigned int v22 = *((unsigned __int16 *)v21 + 1);
    int v23 = v21[1];
    for (int i = *v21; ; int i = *v25)
    {
      v13 >>= v23;
      v14 -= v23;
      if (!i)
      {
        *++int v5 = v22;
        goto LABEL_10;
      }
      if ((i & 0x10) != 0) {
        break;
      }
      if ((i & 0x40) != 0)
      {
        if ((i & 0x20) != 0)
        {
          int v58 = 11;
        }
        else
        {
          uint64_t v19 = "invalid literal/length code";
LABEL_65:
          *(void *)(result + 48) = v19;
          int v58 = 27;
        }
        *(_DWORD *)uint64_t v2 = v58;
        goto LABEL_67;
      }
      uint64_t v25 = (unsigned __int8 *)(v16 + 4 * ((v13 & ~(-1 << i)) + (unint64_t)v22));
      unsigned int v22 = *((unsigned __int16 *)v25 + 1);
      int v23 = v25[1];
    }
    unsigned int v26 = i & 0xF;
    if (v26)
    {
      if (v14 < v26)
      {
        unsigned int v27 = *(unsigned __int8 *)++v3;
        v13 += (unint64_t)v27 << v14;
        v14 += 8;
      }
      v22 += v13 & ~(-1 << v26);
      v13 >>= v26;
      unsigned int v28 = v14 - v26;
    }
    else
    {
      unsigned int v28 = v14;
    }
    if (v28 <= 0xE)
    {
      unsigned int v29 = *(unsigned __int8 *)(v3 + 2);
      v3 += 2;
      v13 += ((unint64_t)*(unsigned __int8 *)(v3 - 1) << v28)
           + ((unint64_t)v29 << (v28 + 8));
      v28 += 16;
    }
    uint64_t v30 = (char *)(v17 + 4 * (v13 & v18));
    unsigned int v31 = *((unsigned __int16 *)v30 + 1);
    int v32 = v30[1];
    for (char j = *v30; ; char j = *v34)
    {
      v13 >>= v32;
      v28 -= v32;
      if ((j & 0x10) != 0) {
        break;
      }
      if ((j & 0x40) != 0)
      {
        uint64_t v19 = "invalid distance code";
        unsigned int v14 = v28;
        goto LABEL_65;
      }
      uint64_t v34 = (char *)(v17 + 4 * ((v13 & ~(-1 << j)) + (unint64_t)v31));
      unsigned int v31 = *((unsigned __int16 *)v34 + 1);
      int v32 = v34[1];
    }
    unsigned int v35 = j & 0xF;
    if (v28 >= v35)
    {
      unsigned int v36 = v28;
    }
    else
    {
      v13 += (unint64_t)*(unsigned __int8 *)(v3 + 1) << v28;
      unsigned int v36 = v28 + 8;
      if (v28 + 8 >= v35)
      {
        ++v3;
      }
      else
      {
        unsigned int v37 = *(unsigned __int8 *)(v3 + 2);
        v3 += 2;
        v13 += (unint64_t)v37 << v36;
        unsigned int v36 = v28 + 16;
      }
    }
    unsigned int v38 = (v13 & ~(-1 << v35)) + v31;
    v13 >>= v35;
    unsigned int v14 = v36 - v35;
    unsigned int v39 = v38 - (v5 - v7);
    if (v38 <= (int)v5 - v7)
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      int v48 = &v5[-v38];
      do
      {
        uint64_t v49 = &v5[v47];
        v49[1] = v48[v47 + 1];
        v49[2] = v48[v47 + 2];
        v49[3] = v48[v47 + 3];
        v47 += 3;
        v46 -= 3;
      }
      while (v22 + v46 > 2);
      uint64_t v50 = &v5[v47];
      if (v22 == v47 || (v50[1] = v48[v47 + 1], ++v50, v22 - 1 == v47))
      {
        int v5 = v50;
      }
      else
      {
        uint64_t v57 = &v5[v47];
        v57[2] = v48[v47 + 2];
        int v5 = v57 + 2;
      }
      goto LABEL_10;
    }
    if (v39 > v10) {
      goto LABEL_65;
    }
    if (!v11)
    {
      uint64_t v40 = v9 - v39;
      unsigned int v51 = v22 - v39;
      if (v22 > v39)
      {
        uint64_t v52 = (char *)(v12 + v40);
        do
        {
          char v53 = *v52++;
          *++int v5 = v53;
          --v39;
        }
        while (v39);
        goto LABEL_52;
      }
LABEL_53:
      int v44 = (unsigned char *)(v12 - 1 + v40);
      goto LABEL_54;
    }
    if (v39 > v11)
    {
      uint64_t v40 = v11 + v9 - v39;
      unsigned int v41 = v22 - (v39 - v11);
      if (v22 > v39 - v11)
      {
        unsigned int v42 = (char *)(v12 + v40);
        do
        {
          char v43 = *v42++;
          *++int v5 = v43;
          --v39;
        }
        while (v11 != v39);
        unsigned int v22 = v41;
        int v44 = (unsigned char *)(v12 - 1);
        if (v41 > v11)
        {
          uint64_t v45 = 0;
          do
          {
            v5[v45 + 1] = *(unsigned char *)(v12 + v45);
            ++v45;
          }
          while (v11 != v45);
          unsigned int v22 = v41 - v11;
          v5 += v45;
          int v44 = &v5[-v38];
        }
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    uint64_t v40 = v11 - v39;
    unsigned int v51 = v22 - v39;
    if (v22 <= v39) {
      goto LABEL_53;
    }
    unint64_t v54 = (char *)(v12 + v40);
    do
    {
      char v55 = *v54++;
      *++int v5 = v55;
      --v39;
    }
    while (v39);
LABEL_52:
    int v44 = &v5[-v38];
    unsigned int v22 = v51;
LABEL_54:
    if (v22 >= 3)
    {
      do
      {
        v5[1] = v44[1];
        v5[2] = v44[2];
        char v56 = v44[3];
        v44 += 3;
        v5[3] = v56;
        v5 += 3;
        v22 -= 3;
      }
      while (v22 > 2);
    }
    if (v22)
    {
      v5[1] = v44[1];
      if (v22 == 1)
      {
        ++v5;
      }
      else
      {
        v5[2] = v44[2];
        v5 += 2;
      }
    }
LABEL_10:
    if (v3 < v4 && v5 < v8) {
      continue;
    }
    break;
  }
LABEL_67:
  unint64_t v59 = v3 - (v14 >> 3);
  *(void *)uint64_t result = v59 + 1;
  *(void *)(result + 24) = v5 + 1;
  *(_DWORD *)(result + 8) = v4 - v59 + 5;
  *(_DWORD *)(result + 32) = v8 - v5 + 257;
  *(void *)(v2 + 72) = v13 & ~(-1 << (v14 & 7));
  *(_DWORD *)(v2 + 80) = v14 & 7;
  return result;
}

void *sub_100026CAC(uint64_t a1, int a2, int a3)
{
  return malloc_type_malloc((a3 * a2), 0xAA8DC6BFuLL);
}

void sub_100026CBC(int a1, void *a2)
{
}

uint64_t sub_100026CC4(uint64_t a1, int a2, int __fd, uint64_t *a4, char a5)
{
  memset(&v52, 0, sizeof(v52));
  if (!a2 && (a4[3] & 0xF000) == 0x8000 && *(_DWORD *)(*(void *)a1 + 572) && !*(_DWORD *)(*(void *)a1 + 60))
  {
    if (fstat(__fd, &v52) == -1)
    {
      uint64_t v10 = 1;
      if (*__error() == 2) {
        return v10;
      }
    }
    else
    {
      LODWORD(v10) = 1;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  unsigned int v11 = *(_DWORD **)a1;
  if (*(_DWORD *)(*(void *)a1 + 56) && ((a4[3] & 0xF000) != 0x4000 || !v11[32]))
  {
    uint64_t v12 = a4[6];
    __times.tv_nseCC_MD4_CTX c = -1;
    uint64_t v60 = v12;
    uint64_t v61 = 0;
    if (futimens(__fd, &__times) == -1)
    {
      if (dword_100058FD8)
      {
        int v38 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100040AD8();
        }
        *__error() = v38;
      }
      sub_10001FBD8("%s: futimens", v13, v14, v15, v16, v17, v18, v19, a5);
      return 0;
    }
    sub_10001FA38(3, "%s: updated date", v14, v15, v16, v17, v18, v19, *a4);
    unsigned int v11 = *(_DWORD **)a1;
  }
  if ((v11[52] == 1 || (v20 = geteuid(), unsigned int v11 = *(_DWORD **)a1, !v20)) && v11[23] && v11[52] != 2) {
    uid_t v21 = *((_DWORD *)a4 + 7);
  }
  else {
    uid_t v21 = -1;
  }
  if (v11[22]) {
    gid_t v22 = *((_DWORD *)a4 + 8);
  }
  else {
    gid_t v22 = -1;
  }
  mode_t v23 = *((_WORD *)a4 + 12);
  if (v21 != -1 || v22 != -1)
  {
    if (fchown(__fd, v21, v22) == -1)
    {
      if (*__error() != 1)
      {
        if (dword_100058FD8)
        {
          int v49 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003DD2C();
          }
          *__error() = v49;
        }
        sub_10001FBD8("%s: fchown", v39, v40, v41, v42, v43, v44, v45, a5);
        return 0;
      }
      if (!geteuid())
      {
        if (dword_100058FD8)
        {
          int v51 = *__error();
          uint64_t v46 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v47 = *a4;
            *(_DWORD *)stat buf = 136315650;
            uint64_t v54 = v47;
            __int16 v55 = 1024;
            uid_t v56 = v21;
            __int16 v57 = 1024;
            gid_t v58 = v22;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "%s: identity unknown or not available to user.group: %u.%u", buf, 0x18u);
          }
          *__error() = v51;
        }
        sub_10001FDC8("%s: identity unknown or not available to user.group: %u.%u", (const char *)*a4, v21, v22);
      }
    }
    else
    {
      sub_10001FA38(3, "%s: updated uid and/or gid", v24, v25, v26, v27, v28, v29, *a4);
    }
  }
  if (a2 || *(_DWORD *)(*(void *)a1 + 60))
  {
    if (fchmod(__fd, v23) != -1) {
      goto LABEL_27;
    }
    if (!dword_100058FD8) {
      goto LABEL_33;
    }
    int v37 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (!v10 || ((v23 & 0x49) != 0) != ((v52.st_mode & 0x49) == 0)) {
    return 1;
  }
  int v48 = (v23 & 0x49) != 0 ? (v52.st_mode >> 2) & 0x49 | v52.st_mode : v52.st_mode & 0xFFB6;
  if (!v48) {
    return 1;
  }
  if (fchmod(__fd, v48) == -1)
  {
    if (!dword_100058FD8) {
      goto LABEL_33;
    }
    int v37 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
    {
LABEL_32:
      *__error() = v37;
LABEL_33:
      sub_10001FBD8("%s: fchmod", v30, v31, v32, v33, v34, v35, v36, a5);
      return 0;
    }
LABEL_31:
    sub_10003DCC4();
    goto LABEL_32;
  }
LABEL_27:
  sub_10001FA38(3, "%s: updated permissions", v31, v32, v33, v34, v35, v36, *a4);
  return 1;
}

uint64_t sub_100027170(uint64_t a1, int a2, int __fd, const char **a4, char *__path)
{
  memset(&v62, 0, sizeof(v62));
  if (a2)
  {
    uint64_t v10 = *(_DWORD **)a1;
    goto LABEL_6;
  }
  uint64_t v10 = *(_DWORD **)a1;
  if (((_WORD)a4[3] & 0xF000) != 0x8000 || !v10[143] || v10[15])
  {
LABEL_6:
    int v11 = 0;
    if (!v10[46]) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  int v11 = 1;
LABEL_7:
  if (fstatat(__fd, *a4, &v62, 32) == -1 && *__error() == 2) {
    return 1;
  }
LABEL_9:
  uint64_t v12 = *(_DWORD **)a1;
  if (*(_DWORD *)(*(void *)a1 + 56) && (((_WORD)a4[3] & 0xF000) != 0x4000 || !v12[32]))
  {
    uint64_t v13 = a4[6];
    __times.tv_nseCC_MD4_CTX c = -1;
    uint64_t v70 = v13;
    uint64_t v71 = 0;
    if (utimensat(__fd, __path, &__times, 32) == -1)
    {
      if (dword_100058FD8)
      {
        int v47 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100040CB0();
        }
        *__error() = v47;
      }
      sub_10001FBD8("%s: utimensat (2)", v14, v15, v16, v17, v18, v19, v20, (char)__path);
      return 0;
    }
    sub_10001FA38(3, "%s: updated date", v15, v16, v17, v18, v19, v20, (char)*a4);
    uint64_t v12 = *(_DWORD **)a1;
  }
  if ((v12[52] == 1 || (v21 = geteuid(), uint64_t v12 = *(_DWORD **)a1, !v21)) && v12[23] && v12[52] != 2) {
    uid_t v22 = *((_DWORD *)a4 + 7);
  }
  else {
    uid_t v22 = -1;
  }
  if (v12[22]) {
    gid_t v23 = *((_DWORD *)a4 + 8);
  }
  else {
    gid_t v23 = -1;
  }
  mode_t v24 = *((_WORD *)a4 + 12);
  if (v22 != -1 || v23 != -1)
  {
    if (fchownat(__fd, __path, v22, v23, 32) == -1)
    {
      if (*__error() != 1)
      {
        if (dword_100058FD8)
        {
          int v60 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100040C48();
          }
          *__error() = v60;
        }
        sub_10001FBD8("%s: fchownat", v48, v49, v50, v51, v52, v53, v54, (char)__path);
        return 0;
      }
      if (!geteuid())
      {
        if (dword_100058FD8)
        {
          int v61 = *__error();
          __int16 v55 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uid_t v56 = *a4;
            *(_DWORD *)stat buf = 136315650;
            int v64 = v56;
            __int16 v65 = 1024;
            uid_t v66 = v22;
            __int16 v67 = 1024;
            gid_t v68 = v23;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "%s: identity unknown or not available to user.group: %u.%u", buf, 0x18u);
          }
          *__error() = v61;
        }
        sub_10001FDC8("%s: identity unknown or not available to user.group: %u.%u", *a4, v22, v23);
      }
    }
    else
    {
      sub_10001FA38(3, "%s: updated uid and/or gid", v25, v26, v27, v28, v29, v30, (char)*a4);
    }
  }
  if (!a2 && !*(_DWORD *)(*(void *)a1 + 60))
  {
    if (!v11 || ((v24 & 0x49) != 0) != ((v62.st_mode & 0x49) == 0)) {
      return 1;
    }
    int v57 = (v24 & 0x49) != 0 ? (v62.st_mode >> 2) & 0x49 | v62.st_mode : v62.st_mode & 0xFFB6;
    if (!v57) {
      return 1;
    }
    if (fchmodat(__fd, __path, v57, 32) == -1)
    {
      if (dword_100058FD8)
      {
        int v59 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100040B40();
        }
        *__error() = v59;
      }
      sub_10001FBD8("%s: fchmodat", v58, v31, v32, v33, v34, v35, v36, (char)__path);
      return 0;
    }
    goto LABEL_30;
  }
  if (fchmodat(__fd, __path, v24, 32) != -1 || ((_WORD)a4[3] & 0xF000) == 0xA000 && *__error() == 102)
  {
LABEL_30:
    sub_10001FA38(3, "%s: updated permissions", v31, v32, v33, v34, v35, v36, (char)*a4);
    return 1;
  }
  if (dword_100058FD8)
  {
    int v38 = *__error();
    uint64_t v39 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_100040BA8((uint64_t)__path, v39);
    }
    *__error() = v38;
  }
  __error();
  sub_10001FBD8("%s: fchmodat (1) %d", v40, v41, v42, v43, v44, v45, v46, (char)__path);
  return 0;
}

uint64_t sub_100027688(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a2[2];
  if ((int)v2 >= 1)
  {
    uint64_t result = 0;
    int v5 = 0;
    int v6 = (uint64_t *)(*(void *)a2 + 16);
    do
    {
      if (*(void *)(a1 + 72) == *(v6 - 1) && *(void *)(a1 + 64) == *(v6 - 2))
      {
        if (v5) {
          return result;
        }
        uint64_t result = *v6;
        if (*v6 == a1) {
          return 0;
        }
        int v5 = 1;
      }
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1000276FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  int v5 = a5;
  int v218 = 0;
  v219 = 0;
  unint64_t v216 = 0;
  uint64_t __buf = 0;
  size_t v215 = 0;
  int v214 = 0;
  memset(&v213, 0, sizeof(v213));
  v211 = 0;
  uint64_t v212 = 0;
  if (*(int *)(a1 + 260) <= 28) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  unsigned int v11 = *(_DWORD *)(*(void *)a1 + 12);
  v220[1] = 0;
  v220[0] = v11;
  *(void *)(a1 + 200) = v220;
  BOOL v12 = 0;
  if (stat(a5, &v213) == -1) {
    BOOL v12 = *__error() == 2;
  }
  uint64_t v13 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 + 4)
    || !*(void *)(v13 + 520)
    && (sub_100029BCC((_DWORD *)a1, a4), uint64_t v13 = *(void *)a1, *(_DWORD *)(*(void *)a1 + 4)))
  {
    if (!*(_DWORD *)(v13 + 96)
      || *(_DWORD *)(v13 + 100) && *(int *)(a1 + 260) < 29
      || (sub_100029EC8(), uint64_t v13 = *(void *)a1, *(_DWORD *)(*(void *)a1 + 4)))
    {
      if (*(void *)(v13 + 432))
      {
        sub_100017234(a1);
        uint64_t __buf = 0;
        if (*(void *)(a1 + 176))
        {
          unint64_t v14 = 0;
          while (1)
          {
            uint64_t v15 = *(const char **)(*(void *)(a1 + 168) + 8 * v14);
            size_t v16 = strlen(v15);
            if (v15[v16 - 1] == 10)
            {
              v15[v16 - 1] = 0;
              uint64_t v15 = *(const char **)(*(void *)(a1 + 168) + 8 * __buf);
              --v16;
            }
            if (write(a4, v15, v16 + 1) < 0) {
              break;
            }
            unint64_t v14 = __buf + 1;
            uint64_t __buf = v14;
            if (v14 >= *(void *)(a1 + 176)) {
              goto LABEL_18;
            }
          }
          if (dword_100058FD8)
          {
            int v54 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100041030();
            }
            *__error() = v54;
          }
          uint64_t v25 = "write files-from remote file";
          goto LABEL_66;
        }
LABEL_18:
        uint64_t __buf = 0;
        if (write(a4, &__buf, 1uLL) < 0)
        {
          if (dword_100058FD8)
          {
            int v24 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100040FFC();
            }
            *__error() = v24;
          }
          uint64_t v25 = "write files-from remote file terminator";
LABEL_66:
          sub_10001FBD8(v25, v17, v18, v19, v20, v21, v22, v23, v200);
          return 0;
        }
      }
    }
  }
  uint64_t v26 = *(void *)(a1 + 24);
  if (!sub_1000137D8((int *)a1, a3, a4, &v219, &v216))
  {
    if (dword_100058FD8)
    {
      int v46 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100040D18();
      }
      *__error() = v46;
    }
    sub_10001FC88("flist_recv");
    goto LABEL_56;
  }
  uint64_t v27 = (char *)sub_1000048CC(0, v216, 0x18uLL);
  if (!v27)
  {
    if (dword_100058FD8)
    {
      int v47 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100040D4C();
      }
      *__error() = v47;
    }
    sub_10001FC88("reallocarray receiver");
LABEL_56:
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v28 = 0;
    goto LABEL_57;
  }
  uint64_t v28 = v27;
  unint64_t v29 = v216;
  *(void *)(a1 + 64) = v216;
  *(void *)(a1 + 104) = *(void *)(a1 + 24) - v26;
  int v30 = 0;
  if (v29)
  {
    uint64_t v31 = v219;
    do
    {
      if (v31[4] != 0)
      {
        uint64_t v32 = &v27[24 * v30];
        *(_OWORD *)uint64_t v32 = v31[4];
        ++v30;
        *((void *)v32 + 2) = v31;
      }
      uint64_t v31 = (long long *)((char *)v31 + 152);
      --v29;
    }
    while (v29);
  }
  qsort(v27, v30, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_100028D98);
  LODWORD(v212) = v30;
  v211 = v28;
  if (sub_10001E948(a1, a3, &v214))
  {
    char v39 = v214;
    if (v214)
    {
      if (dword_100058FD8)
      {
        int v40 = *__error();
        uint64_t v41 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 67109120;
          LODWORD(v228) = v214;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Got ioerror=%d", buf, 8u);
        }
        *__error() = v40;
        char v39 = v214;
      }
      sub_10001FA38(1, "Got ioerror=%d", v33, v34, v35, v36, v37, v38, v39);
      ++*(void *)(a1 + 240);
    }
    char v42 = v216;
    int v43 = *(_DWORD *)(*(void *)a1 + 4);
    if (v216)
    {
      if (!v43)
      {
        if (dword_100058FD8)
        {
          int v44 = *__error();
          uint64_t v45 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 134217984;
            unint64_t v228 = v216;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Transfer starting: %zu files", buf, 0xCu);
          }
          *__error() = v44;
          char v42 = v216;
        }
        sub_10001FA38(0, "Transfer starting: %zu files", v33, v34, v35, v36, v37, v38, v42);
      }
    }
    else if (!v43)
    {
      if (dword_100058FD8)
      {
        int v137 = *__error();
        long long v138 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_INFO, "receiver has empty file list: exiting", buf, 2u);
        }
        *__error() = v137;
      }
      sub_10001FDC8("receiver has empty file list: exiting");
      goto LABEL_163;
    }
    if (dword_100058FD8)
    {
      int v56 = *__error();
      int v57 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315138;
        unint64_t v228 = (unint64_t)v5;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "%s: receiver destination", buf, 0xCu);
      }
      *__error() = v56;
    }
    sub_10001FA38(1, "%s: receiver destination", v33, v34, v35, v36, v37, v38, (char)v5);
    uint64_t v58 = *(void *)a1;
    if (*(_DWORD *)(*(void *)a1 + 36) || !v216)
    {
      uint64_t v210 = 0;
      goto LABEL_91;
    }
    if (v216 > 1
      || *(_DWORD *)(v58 + 188) && strchr(*(char **)v219, 47)
      || v5[strlen(v5) - 1] == 47
      || *(void *)(v58 + 432)
      || (int v59 = (void **)v219, (*((_WORD *)v219 + 12) & 0xF000) == 0x4000)
      || !v12 && (v213.st_mode & 0xF000) == 0x4000)
    {
      int v60 = strdup(v5);
      if (!v60) {
        sub_1000402A8();
      }
      int v61 = v60;
      if ((sub_100025F0C(v60, 0x1EDu) & 0x80000000) != 0) {
        err(11, "%s: mkpath", v61);
      }
      free(v61);
      uint64_t v210 = 0;
LABEL_91:
      mode_t v62 = umask(0);
      int v52 = open(v5, 0x100000, 0);
      uint64_t v70 = *(void *)a1;
      if (v52 == -1)
      {
        int v87 = *(_DWORD *)(v70 + 36);
        if (!v87 && v216)
        {
          if (dword_100058FD8)
          {
            int v88 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003CFE0();
            }
            *__error() = v88;
          }
          sub_10001FBD8("%s: open", v63, v64, v65, v66, v67, v68, v69, (char)v5);
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          int v52 = -1;
          int v53 = -1;
          goto LABEL_192;
        }
        if (!v87)
        {
          if (dword_100058FD8)
          {
            int v208 = v10;
            int v135 = *__error();
            long long v136 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)stat buf = 136315138;
              unint64_t v228 = (unint64_t)v5;
              _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_INFO, "%s: open", buf, 0xCu);
            }
            *__error() = v135;
            int v10 = v208;
          }
          sub_10001FE50(0, "%s: open", v64, v65, v66, v67, v68, v69, (char)v5);
          uint64_t v70 = *(void *)a1;
        }
      }
      uint64_t v71 = *(const char **)(v70 + 544);
      if (v71)
      {
        int v53 = open(v71, 0x100000, 0);
        uint64_t v70 = *(void *)a1;
        if (v52 == -1 && !*(_DWORD *)(v70 + 36))
        {
          if (dword_100058FD8)
          {
            int v79 = *__error();
            int v80 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100040F88(a1, v80, v81, v82, v83, v84, v85, v86);
            }
            *__error() = v79;
            uint64_t v70 = *(void *)a1;
          }
          sub_10001FBD8("%s: open", v72, v73, v74, v75, v76, v77, v78, *(void *)(v70 + 544));
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          int v52 = -1;
          goto LABEL_192;
        }
      }
      else
      {
        int v53 = -1;
      }
      if (*(_DWORD *)(v70 + 96) != 2 || v52 == -1 || !*(_DWORD *)(v70 + 32)) {
        goto LABEL_113;
      }
      if (sub_100015D50((int *)a1, v5, (void **)&v218, &v215, (uint64_t)v219, v216))
      {
        if (sub_100016A2C((void *)a1, v52, (uint64_t)v218, v215, v89, v90, v91, v92))
        {
LABEL_113:
          *(_DWORD *)stat buf = a3;
          HIDWORD(v228) = -1;
          int v231 = -1;
          int v234 = a4;
          LOWORD(v228) = 1;
          __int16 v229 = 1;
          __int16 v232 = 1;
          __int16 v235 = 4;
          uint64_t v93 = (void **)sub_100034260(v5, v52, v53, a4, 2, (uint64_t)v219, v216, v62);
          if (v93)
          {
            uint64_t v51 = v93;
            int v207 = v10;
            uint64_t v94 = (void **)sub_10000B8D4(a1, a3, (uint64_t)v219, v216, v52, v53);
            if (v94)
            {
              uint64_t v50 = v94;
              sub_100030E40(a2, (uint64_t)v94);
              if (dword_100058FD8)
              {
                int v209 = *__error();
                log = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v221 = 136315138;
                  unsigned int v222 = v5;
                  _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "%s: ready for phase 1 data", v221, 0xCu);
                }
                *__error() = v209;
              }
              sub_10001FA38(1, "%s: ready for phase 1 data", v95, v96, v97, v98, v99, v100, (char)v5);
              int loga = 0;
              while (2)
              {
                int v101 = poll((pollfd *)buf, 4u, dword_100058FF0);
                if (v101 == -1)
                {
                  if (dword_100058FD8)
                  {
                    int v173 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_10003F8A0();
                    }
                    *__error() = v173;
                  }
                  sub_10001FBD8("poll", v102, v103, v104, v105, v106, v107, v108, v202);
                }
                else if (v101)
                {
                  uint64_t v109 = 0;
                  uint64_t v110 = (__int16 *)&v228 + 1;
                  do
                  {
                    __int16 v112 = *v110;
                    v110 += 4;
                    char v111 = v112;
                    if ((v112 & 0x28) != 0)
                    {
                      uint64_t __buf = v109;
                      if (dword_100058FD8)
                      {
                        int v140 = *__error();
                        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                          sub_1000400E8();
                        }
                        *__error() = v140;
                      }
                      sub_10001FB50("poll: bad fd");
                      goto LABEL_180;
                    }
                    if ((v111 & 0x10) != 0)
                    {
                      uint64_t __buf = v109;
                      if (dword_100058FD8)
                      {
                        int v141 = *__error();
                        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                          sub_100040F54();
                        }
                        *__error() = v141;
                      }
                      sub_10001FB50("poll: hangup");
                      goto LABEL_180;
                    }
                    ++v109;
                  }
                  while (v109 != 4);
                  uint64_t __buf = 4;
                  if (*(_DWORD *)(a1 + 128) && (v228 & 0x10000) != 0)
                  {
                    if (!sub_10001CF78((void *)a1, a3))
                    {
                      if (dword_100058FD8)
                      {
                        int v180 = *__error();
                        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                          sub_100040018();
                        }
                        *__error() = v180;
                      }
                      sub_10001FC88("io_read_flush");
                      break;
                    }
                    if (!*(void *)(a1 + 136)) {
                      WORD1(v228) &= ~1u;
                    }
                  }
                  if (((v230 & 1) != 0 || (v236 & 4) != 0)
                    && (sub_1000345E4((uint64_t)v51, (char *)&v228 + 4, a1, &v234, (unsigned int *)&v211, v106, v107, v108) & 0x80000000) != 0)
                  {
                    if (dword_100058FD8)
                    {
                      int v177 = *__error();
                      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                        sub_100040F20();
                      }
                      *__error() = v177;
                    }
                    sub_10001FC88("rsync_uploader");
                  }
                  else
                  {
                    if ((v228 & 0x10000) == 0 && (v233 & 1) == 0) {
                      continue;
                    }
                    int v113 = sub_10000C31C((uint64_t)v50, (uint64_t *)a1, &v231, v216, (unsigned int *)&v211);
                    if (v113 < 0)
                    {
                      if (dword_100058FD8)
                      {
                        int v178 = *__error();
                        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                          sub_100040E50();
                        }
                        *__error() = v178;
                      }
                      sub_10001FC88("rsync_downloader");
                    }
                    else
                    {
                      if (v113) {
                        continue;
                      }
                      if (*(int *)(a1 + 260) < 29 || loga == 2)
                      {
                        sub_10000BF2C((void **)a1, v114, v115, v116, v117, v118, v119, v120);
                        free(*(void **)(a1 + 192));
                        *(void *)(a1 + 192) = 0;
                      }
                      sub_1000344E4((uint64_t)v51, a1, a4);
                      if (loga != v207)
                      {
                        if (dword_100058FD8)
                        {
                          int v204 = *__error();
                          unsigned int v203 = qword_100058FE8;
                          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                          {
                            uint64_t v127 = sub_10000BAC8((uint64_t)v50);
                            *(_DWORD *)v221 = 136315650;
                            unsigned int v222 = v5;
                            __int16 v223 = 1024;
                            int v224 = loga + 2;
                            __int16 v225 = 2048;
                            uint64_t v226 = v127;
                            _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_INFO, "%s: receiver ready for phase %d data (%zu to redo)", v221, 0x1Cu);
                          }
                          *__error() = v204;
                        }
                        sub_10000BAC8((uint64_t)v50);
                        sub_10001FA38(1, "%s: receiver ready for phase %d data (%zu to redo)", v128, v129, v130, v131, v132, v133, (char)v5);
                        **(_DWORD **)(a1 + 200) = 0;
                        sub_10003444C((uint64_t)v51);
                        int v234 = a4;
                        ++loga;
                        continue;
                      }
                      int v181 = *(_DWORD *)(*(void *)a1 + 96);
                      if (v181 == 4)
                      {
                        if (!sub_100034200((uint64_t)v51, (void *)a1))
                        {
                          if (dword_100058FD8)
                          {
                            int v197 = *__error();
                            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                              sub_100040EEC();
                            }
                            *__error() = v197;
                          }
                          sub_10001FC88("upload_del");
                          break;
                        }
                      }
                      else if (v181 == 5 && v52 != -1 && *(_DWORD *)(*(void *)a1 + 32))
                      {
                        if (!sub_100015D50((int *)a1, v5, (void **)&v218, &v215, (uint64_t)v219, v216))
                        {
                          if (dword_100058FD8)
                          {
                            int v198 = *__error();
                            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                              sub_100040D80();
                            }
                            *__error() = v198;
                          }
                          sub_10001FC88("flist_gen_dels");
                          break;
                        }
                        if (!sub_100016A2C((void *)a1, v52, (uint64_t)v218, v215, v182, v183, v184, v185))
                        {
                          if (dword_100058FD8)
                          {
                            int v186 = *__error();
                            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                              sub_100040DB4();
                            }
                            *__error() = v186;
                          }
                          sub_10001FC88("flist_del");
                          break;
                        }
                      }
                      if (sub_100037990((uint64_t)v51, a1, v121, v122, v123, v124, v125, v126))
                      {
                        if (sub_100030914(a1, a3))
                        {
                          if (*(void *)(*(void *)a1 + 520) || sub_10001E174(a1, a4, -1))
                          {
                            if (dword_100058FD8)
                            {
                              int v193 = *__error();
                              int v194 = qword_100058FE8;
                              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)v221 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_INFO, "receiver finished updating", v221, 2u);
                              }
                              *__error() = v193;
                            }
                            uint64_t v49 = 1;
                            sub_10001FA38(1, "receiver finished updating", v187, v188, v189, v190, v191, v192, v202);
                            goto LABEL_192;
                          }
                          if (dword_100058FD8)
                          {
                            int v199 = *__error();
                            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                              sub_10003B7F8();
                            }
                            *__error() = v199;
                          }
                          sub_10001FC88("io_write_int");
                        }
                        else
                        {
                          if (dword_100058FD8)
                          {
                            int v196 = *__error();
                            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                              sub_100040EB8();
                            }
                            *__error() = v196;
                          }
                          sub_10001FC88("sess_stats_recv");
                        }
                      }
                      else
                      {
                        if (dword_100058FD8)
                        {
                          int v195 = *__error();
                          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                            sub_100040E84();
                          }
                          *__error() = v195;
                        }
                        sub_10001FC88("rsync_uploader_tail");
                      }
                    }
                  }
                }
                else
                {
                  if (dword_100058FD8)
                  {
                    int v174 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_10004011C();
                    }
                    *__error() = v174;
                  }
                  sub_10001FB50("poll: timeout");
                }
                break;
              }
LABEL_180:
              uint64_t v49 = 0;
            }
            else
            {
              if (dword_100058FD8)
              {
                int v139 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100040E1C();
                }
                *__error() = v139;
              }
              sub_10001FC88("download_alloc");
              uint64_t v49 = 0;
              uint64_t v50 = 0;
            }
            goto LABEL_192;
          }
          if (dword_100058FD8)
          {
            int v134 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100040DE8();
            }
            *__error() = v134;
          }
          sub_10001FC88("upload_alloc");
          goto LABEL_191;
        }
        if (dword_100058FD8)
        {
          int v143 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100040DB4();
          }
          *__error() = v143;
        }
        sub_10001FC88("flist_del");
      }
      else
      {
        if (dword_100058FD8)
        {
          int v142 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100040D80();
          }
          *__error() = v142;
        }
        sub_10001FC88("flist_gen_dels");
      }
LABEL_191:
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
LABEL_192:
      uint64_t v48 = v210;
      goto LABEL_193;
    }
    uint64_t v152 = strrchr(v5, 47);
    if (v152)
    {
      int v153 = v152 + 1;
      size_t v154 = strndup(v5, v152 + 1 - v5);
      if (v154)
      {
        uint64_t v162 = v154;
        unint64_t v163 = strdup(v153);
        if (v163)
        {
          uint64_t v171 = v163;
          int v172 = v162;
LABEL_215:
          free(*v59);
          *(void *)v219 = v171;
          *((void *)v219 + 2) = v171;
          int v5 = v162;
          uint64_t v210 = v172;
          goto LABEL_91;
        }
        if (dword_100058FD8)
        {
          int v179 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003BE00();
          }
          *__error() = v179;
        }
        sub_10001FBD8("strdup", v164, v165, v166, v167, v168, v169, v170, v201);
        free(v162);
        uint64_t v48 = v162;
        goto LABEL_164;
      }
      if (!dword_100058FD8) {
        goto LABEL_238;
      }
      int v176 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_237;
      }
    }
    else
    {
      uint64_t v175 = strdup(v5);
      if (v175)
      {
        uint64_t v171 = v175;
        int v172 = 0;
        uint64_t v162 = ".";
        goto LABEL_215;
      }
      if (!dword_100058FD8) {
        goto LABEL_238;
      }
      int v176 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
      {
LABEL_237:
        *__error() = v176;
LABEL_238:
        sub_10001FBD8("strdup", v155, v156, v157, v158, v159, v160, v161, v201);
LABEL_163:
        uint64_t v48 = 0;
LABEL_164:
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        int v52 = -1;
        uint64_t v49 = 1;
        goto LABEL_58;
      }
    }
    sub_10003BE00();
    goto LABEL_237;
  }
  if (dword_100058FD8)
  {
    int v55 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003B82C();
    }
    *__error() = v55;
  }
  sub_10001FC88("io_read_int");
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
LABEL_57:
  int v52 = -1;
LABEL_58:
  int v53 = -1;
LABEL_193:
  free(v48);
  sub_10000BF2C((void **)a1, v144, v145, v146, v147, v148, v149, v150);
  free(*(void **)(a1 + 192));
  *(void *)(a1 + 192) = 0;
  free(v28);
  sub_100034490(v51);
  sub_100030BA8(a2);
  sub_10000BAD0(a1, v50);
  sub_100030E40(a2, 0);
  sub_100030C18(a2);
  if (v52 != -1) {
    close(v52);
  }
  if (v53 != -1) {
    close(v53);
  }
  sub_100012830((char *)v219, v216);
  sub_100012830(v218, v215);
  return v49;
}

uint64_t sub_100028D98(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (v2 != v3) {
    goto LABEL_6;
  }
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 > *a2) {
    return 1;
  }
LABEL_6:
  BOOL v5 = v2 < v3;
  BOOL v6 = v2 > v3;
  if (v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6;
  }
}

BOOL sub_100028DE0(unsigned __int8 *a1, char *__s, int a3)
{
  int v4 = *a1;
  int v5 = *__s;
  if (!*a1) {
    return v5 && (!a3 || v5 != 47);
  }
  BOOL v6 = __s;
  int v7 = a1;
  long long v8 = 0;
  int v9 = 0;
  while (1)
  {
    if (!v5) {
      return 1;
    }
    if (v4 == 92 && v7[1] == 47) {
      ++v7;
    }
    if (v5 == 47 && *v7 == 47)
    {
      ++v7;
      ++v6;
    }
    int v10 = strchr(v6, 47);
    if (!v10) {
      int v10 = &v6[strlen(v6)];
    }
LABEL_12:
    int v4 = *v7;
    if (*v7) {
      break;
    }
LABEL_66:
    int v5 = *v6;
    BOOL v26 = v5 == 47 || v5 == 0;
    if (!v26)
    {
      while (1)
      {
LABEL_73:
        if (!v8) {
          return 1;
        }
        if (*v9 == 47) {
          BOOL v6 = v9 + 1;
        }
        else {
          BOOL v6 = v9;
        }
        int v10 = strchr(v6, 47);
        if (!v10) {
          int v10 = &v6[strlen(v6)];
        }
        uint64_t v11 = 1;
        int v7 = v8;
        int v9 = v10;
        if (v6 >= v10) {
          return v11;
        }
LABEL_28:
        if (v6 >= v10)
        {
LABEL_64:
          if (v6 < v10) {
            goto LABEL_12;
          }
          int v4 = *v7;
          if (v4 == 42) {
            goto LABEL_12;
          }
          goto LABEL_66;
        }
        uint64_t v28 = v7;
        unint64_t v29 = v7;
        unint64_t v14 = v10;
        uint64_t v15 = v7;
        while (1)
        {
          unsigned int v16 = *v15;
          if (v16 > 0x5B) {
            break;
          }
          if (!*v15 || v16 == 42)
          {
            int v17 = v11;
            uint64_t v18 = v6;
            goto LABEL_41;
          }
          if (v16 == 47) {
            goto LABEL_39;
          }
LABEL_37:
          sub_1000290F0(&v28, 32);
          uint64_t v15 = v28;
          --v14;
        }
        if (v16 != 92 || v15[1] != 47) {
          goto LABEL_37;
        }
LABEL_39:
        int v17 = 0;
        uint64_t v18 = v6;
        if (v11)
        {
          int v17 = 0;
          uint64_t v18 = v14;
          if (v6 > v14) {
            continue;
          }
        }
LABEL_41:
        if (v18 > v14) {
          continue;
        }
        BOOL v19 = v16 == 0;
        BOOL v26 = v17 == 0;
        BOOL v20 = v17 != 0;
        char v21 = v26 || v19;
        uint64_t v22 = v6;
        if (v19 && v20) {
          BOOL v6 = v14;
        }
        else {
          BOOL v6 = v18;
        }
        while (1)
        {
          for (int i = v7; ; int i = v29)
          {
            int v24 = *i;
            if (v24 == 92)
            {
              int v25 = *++i;
              if (v25 != 47) {
                goto LABEL_56;
              }
              unint64_t v29 = i;
              int v24 = *i;
            }
            else if (!*i || v24 == 42)
            {
              goto LABEL_63;
            }
            if (v24 == 47)
            {
              if (v6 < v10) {
                goto LABEL_73;
              }
LABEL_63:
              int v7 = i;
              goto LABEL_64;
            }
LABEL_56:
            if (v6 >= v10) {
              goto LABEL_73;
            }
            if (sub_1000290F0(&v29, *v6)) {
              break;
            }
            ++v6;
          }
          if ((v21 & 1) == 0)
          {
            ++v22;
            unint64_t v29 = v7;
            BOOL v6 = v22;
            if (v22 <= v14) {
              continue;
            }
          }
          goto LABEL_73;
        }
      }
    }
    if (v4 != 47)
    {
      if (v4) {
        goto LABEL_73;
      }
      return v5 && (!a3 || v5 != 47);
    }
  }
  LODWORD(v11) = 0;
  int v12 = 0;
  while (v4 == 63)
  {
    if (v12)
    {
      int v9 = v10;
      long long v8 = v7;
      goto LABEL_28;
    }
    if (v6 >= v10 || *v6 == 47) {
      return 1;
    }
    int v12 = 0;
    ++v6;
LABEL_23:
    int v13 = *++v7;
    int v4 = v13;
  }
  if (v4 == 42)
  {
    if (v7[1] == 42)
    {
      ++v7;
      int v12 = 1;
    }
    LODWORD(v11) = 1;
    goto LABEL_23;
  }
  if (!v12) {
    goto LABEL_28;
  }
  int v9 = v10;
  long long v8 = v7;
  if (v4) {
    goto LABEL_28;
  }
  return 0;
}

BOOL sub_1000290F0(unsigned __int8 **a1, int a2)
{
  int v4 = *a1;
  BOOL v6 = *a1 + 1;
  int v5 = (char)**a1;
  if (v5 == 92)
  {
    int v10 = v4 + 2;
    int v11 = v4[1];
    if (v11)
    {
      BOOL v6 = v10;
      int v7 = v11;
    }
    else
    {
      int v7 = 92;
    }
    goto LABEL_13;
  }
  int v7 = **a1;
  if (v5 != 91)
  {
    if (v5 == 63)
    {
      BOOL result = a2 == 47 || a2 == 0;
      goto LABEL_14;
    }
LABEL_13:
    BOOL result = v7 != a2;
    goto LABEL_14;
  }
  BOOL result = 1;
  if (!a2 || a2 == 47) {
    goto LABEL_14;
  }
  int v12 = *v6;
  int v27 = v7;
  if (v12 == 94 || v12 == 33)
  {
    LOBYTE(v12) = v4[2];
    int v28 = 1;
    uint64_t v13 = 2;
  }
  else
  {
    int v28 = 0;
    uint64_t v13 = 1;
  }
  int v14 = 0;
  uint64_t v15 = (char *)&v4[v13 + 1];
  unsigned int v26 = a2;
  unsigned int v16 = "alnum";
  int v17 = &off_100055C18;
  do
  {
    if (v12 == 92)
    {
      char v23 = *v15++;
      LOBYTE(v12) = v23;
LABEL_33:
      if (!(_BYTE)v12) {
        goto LABEL_62;
      }
      if (v12 == 47) {
        goto LABEL_61;
      }
      int v18 = *v15;
LABEL_37:
      if (v18 != 45) {
        goto LABEL_44;
      }
      int v24 = v15[1];
      if (!v15[1] || v24 == 93) {
        goto LABEL_44;
      }
      if (v24 == 92)
      {
        LOBYTE(v24) = v15[2];
        if (!(_BYTE)v24)
        {
LABEL_62:
          int v7 = v27;
          goto LABEL_13;
        }
        BOOL v20 = v15 + 3;
      }
      else
      {
        BOOL v20 = v15 + 2;
      }
      if ((char)v24 >= a2 && (char)v12 <= a2) {
        int v14 = 1;
      }
      goto LABEL_47;
    }
    if (v12 != 91) {
      goto LABEL_33;
    }
    int v18 = *v15;
    if (v18 != 58)
    {
      LOBYTE(v12) = 91;
      goto LABEL_37;
    }
    BOOL v19 = strchr(v15 + 1, 58);
    if (!v19 || v19[1] != 93)
    {
      LOBYTE(v12) = 91;
LABEL_44:
      if (v12 == a2) {
        int v14 = 1;
      }
      BOOL v20 = v15;
      goto LABEL_47;
    }
    BOOL v20 = v19 + 2;
    size_t v21 = v19 - (v15 + 1);
    while (strncmp(v15 + 1, v16, v21) || v16[v21])
    {
      uint64_t v22 = *v17;
      v17 += 2;
      unsigned int v16 = v22;
      if (!v22)
      {
        LOBYTE(v12) = 91;
        unsigned int v16 = "alnum";
        int v17 = &off_100055C18;
        goto LABEL_44;
      }
    }
    if (((unsigned int (*)(void))*(v17 - 1))(v26)) {
      int v14 = 1;
    }
    unsigned int v16 = "alnum";
    int v17 = &off_100055C18;
LABEL_47:
    LOBYTE(v12) = *v20;
    uint64_t v15 = v20 + 1;
  }
  while (*v20 != 93);
  if (v14 == v28)
  {
    BOOL v6 = (unsigned __int8 *)(v20 + 1);
LABEL_61:
    BOOL result = 1;
    goto LABEL_14;
  }
  BOOL result = 0;
  BOOL v6 = (unsigned __int8 *)(v20 + 1);
LABEL_14:
  *a1 = v6;
  return result;
}

uint64_t sub_10002936C(char *a1, int a2, unsigned int a3)
{
  return sub_10002938C((uint64_t)&unk_100058670, a1, a2, 4096, a3);
}

uint64_t sub_10002938C(uint64_t a1, char *a2, int a3, int a4, unsigned int a5)
{
  unsigned int v42 = 0;
  char v5 = *a2;
  if (!*a2) {
    return 0;
  }
  __int16 v6 = a4;
  long long v8 = a2;
  unsigned int v41 = a4 & 0xFFFFE07F;
  while (2)
  {
    if ((v6 & 0x1000) != 0)
    {
      int v10 = v8 - 1;
      do
      {
        __darwin_ct_rune_t v11 = v10[1];
        if (v11 < 0) {
          __uint32_t v12 = __maskrune(v11, 0x4000uLL);
        }
        else {
          __uint32_t v12 = _DefaultRuneLocale.__runetype[v11] & 0x4000;
        }
        ++v10;
      }
      while (v12);
      char v5 = *v10;
    }
    else
    {
      int v10 = v8;
    }
    if (v5 == 35 || (uint64_t result = v5, result == 59))
    {
      if ((v6 & 0x1000) == 0) {
        return 0;
      }
    }
    else if (!v5)
    {
      return result;
    }
    unsigned int v42 = 0;
    if (!a3 || !strncmp(v10, "- ", 2uLL) || !strncmp(v10, "+ ", 2uLL) || !strcmp(v10, "!"))
    {
      size_t v15 = strcspn(v10, " _");
      int v16 = sub_10002AB7C((unsigned __int8 *)v10, v15, &v42);
      if (v16)
      {
        int v14 = v16;
        if (v10[v15]) {
          v10 += v15 + 1;
        }
        else {
          v10 += v15;
        }
      }
      else
      {
        int v14 = a3;
        if (!a3) {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      int v14 = a3;
    }
    if ((v14 & 0xFFFFFFFE) == 4) {
      int v17 = 8187;
    }
    else {
      int v17 = 7679;
    }
    if ((v14 - 1) < 2)
    {
      int v18 = 127;
    }
    else if ((v14 - 4) > 1)
    {
      int v18 = 0;
    }
    else
    {
      if ((~v42 & 0x180) == 0) {
        return 0xFFFFFFFFLL;
      }
      int v18 = 0x1FFF;
    }
    v42 &= v17 & v18;
    if ((v6 & 0x1000) != 0)
    {
      long long v8 = v10 - 1;
      do
      {
        int v19 = v8[1];
        if (v19 < 0) {
          __uint32_t v20 = __maskrune(v8[1], 0x4000uLL);
        }
        else {
          __uint32_t v20 = _DefaultRuneLocale.__runetype[v19] & 0x4000;
        }
        ++v8;
        if (v19) {
          BOOL v21 = v20 == 0;
        }
        else {
          BOOL v21 = 0;
        }
      }
      while (v21);
    }
    else
    {
      long long v8 = &v10[strlen(v10)];
    }
    if (v14 == 5 && v8 == v10 && (v42 & 0x200) != 0) {
      uint64_t v22 = strdup(".cvsignore");
    }
    else {
      uint64_t v22 = strndup(v10, v8 - v10);
    }
    char v23 = v22;
    if (!v22) {
      sub_100041064();
    }
    int v24 = v42;
    BOOL v25 = v14 == 3 || v14 == 1 && (v42 & 4) != 0;
    if (v25 != (*v22 == 0))
    {
      free(v22);
      return 0xFFFFFFFFLL;
    }
    if (((v14 == 5) & ((unsigned __int16)(v42 & 0x200) >> 9)) != 0) {
      int v24 = v42 | 0x1880;
    }
    int v26 = v24 | v41;
    unsigned int v42 = v26;
    if (v26 && (v14 - 4) >= 2)
    {
      if (v14 == 2)
      {
        if ((~v26 & 0x18) != 0)
        {
          if ((v26 & 8) != 0)
          {
            int v14 = 6;
          }
          else if ((v26 & 0x10) != 0)
          {
            int v14 = 9;
          }
          else
          {
            int v14 = 2;
          }
        }
        else
        {
          int v14 = 2;
        }
      }
      else
      {
        if (v14 != 1)
        {
          int v26 = 0;
LABEL_79:
          unsigned int v42 = v26;
          goto LABEL_80;
        }
        if ((~v26 & 0x18) != 0)
        {
          if ((v26 & 8) != 0)
          {
            int v14 = 7;
          }
          else if ((v26 & 0x10) != 0)
          {
            int v14 = 8;
          }
          else
          {
            int v14 = 1;
          }
        }
        else
        {
          int v14 = 1;
        }
      }
      v26 &= 0xFFFFFFE7;
      goto LABEL_79;
    }
LABEL_80:
    unint64_t v27 = *(void *)(a1 + 32);
    unint64_t v28 = *(void *)(a1 + 24) + 1;
    *(void *)(a1 + 24) = v28;
    if (v28 <= v27)
    {
      int v30 = *(char **)(a1 + 8);
    }
    else
    {
      if (v27) {
        size_t v29 = 2 * v27;
      }
      else {
        size_t v29 = 16;
      }
      int v30 = sub_100004924(*(char **)(a1 + 8), v27, v29, 0x30uLL);
      if (!v30) {
        sub_1000402A8();
      }
      *(void *)(a1 + 8) = v30;
      *(void *)(a1 + 32) = v29;
      unint64_t v28 = *(void *)(a1 + 24);
      int v26 = v42;
    }
    uint64_t v31 = &v30[48 * v28];
    *((void *)v31 - 6) = 0;
    *((void *)v31 - 5) = v31 - 48;
    *((_DWORD *)v31 - 5) = v26;
    *((_DWORD *)v31 - 4) = v26;
    *((_DWORD *)v31 - 6) = v14;
    if ((v14 & 0xFFFFFFFE) == 4)
    {
      *((_DWORD *)v31 - 4) = v26 & 0x1F80;
      goto LABEL_91;
    }
    if (v14 != 3)
    {
LABEL_91:
      if (v14 == 4)
      {
        *((void *)v31 - 4) = v23;
        break;
      }
      goto LABEL_93;
    }
    *(void *)(a1 + 16) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(48 * v28 - 48) >> 4);
LABEL_93:
    if (*v23 == 47)
    {
      ++v23;
      *(v31 - 10) = 1;
    }
    size_t v32 = strlen(v23);
    if (v32 >= 2)
    {
      size_t v33 = v32;
      if (v23[v32 - 1] == 47)
      {
        *(v31 - 7) = 1;
        v23[v32 - 1] = 0;
      }
      if (v32 >= 5 && !*(v31 - 7) && !strcmp(&v23[v32 - 4], "/***"))
      {
        *(v31 - 6) = 1;
        v23[v33 - 4] = 0;
      }
    }
    __int16 v34 = 1;
    for (int i = v23; *i == 47; ++i)
    {
      ++v34;
LABEL_107:
      ;
    }
    if (*i) {
      goto LABEL_107;
    }
    *((_WORD *)v31 - 6) = v34;
    if (v34 == 1 && !*(v31 - 10)) {
      *(v31 - 9) = 1;
    }
    if (strpbrk(v23, "*?["))
    {
      if (strstr(v23, "**")) {
        *((_WORD *)v31 - 6) = -1;
      }
    }
    else
    {
      *(v31 - 8) = 1;
    }
    *((void *)v31 - 4) = v23;
    if ((v14 & 0xFFFFFFFE) != 4)
    {
LABEL_118:
      if (v14 == 4)
      {
        if ((v42 & 0x80) != 0) {
          uint64_t v36 = 1;
        }
        else {
          uint64_t v36 = (v42 >> 7) & 2;
        }
        sub_100029A68(a1, *((char **)v31 - 4), v36, v42, 1, a5);
      }
      else if (v14 == 5)
      {
        uint64_t v37 = (void *)a1;
        do
        {
          ++v37[5];
          uint64_t v37 = (void *)*v37;
        }
        while (v37);
      }
      else if ((v42 & 4) != 0 {
             && sub_10002938C(&unk_100058670, "RCS SCCS CVS CVS.adm RCSLOG cvslog.* tags TAGS .make.state .nse_depinfo *~ #* .#* ,* _$* *$ *.old *.bak *.BAK *.orig *.rej .del-* *.a *.olb *.o *.obj *.so *.exe *.Z *.elc *.ln core .svn/ ", 1, 4096, 10) != -1)
      }
      {
        uint64_t v38 = getenv("HOME");
        if (v38 && *v38 && snprintf(__str, 0x400uLL, "%s/.cvsignore", v38) <= 1023) {
          sub_100029A68((uint64_t)&unk_100058670, __str, 1, 4096, 0, 10);
        }
        char v39 = getenv("CVSIGNORE");
        if (v39 && *v39) {
          sub_10002938C(&unk_100058670, v39, 1, 4096, 10);
        }
      }
      char v5 = *v8;
      if (!*v8) {
        return 0;
      }
      continue;
    }
    break;
  }
  if ((v42 & 0x400) == 0) {
    goto LABEL_118;
  }
  uint64_t result = sub_10002938C(a1, v23, 1, 0, a5);
  if (result != -1) {
    goto LABEL_118;
  }
  return result;
}

uint64_t sub_100029A28(char *a1, int a2, unsigned int a3)
{
  return sub_10002938C((uint64_t)&unk_100058670, a1, a2, 0, a3);
}

int *sub_100029A48(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100029A68((uint64_t)&unk_100058670, a1, a2, 0, 1, a3);
}

int *sub_100029A68(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  size_t __linecapp = 0;
  __linep = 0;
  if (!strcmp(__s1, "-"))
  {
    __uint32_t v12 = __stdinp;
  }
  else
  {
    __uint32_t v12 = fopen(__s1, "r");
    if (!v12)
    {
      uint64_t result = __error();
      if (*result != 2 || a5 != 0) {
        err(1, "open: %s");
      }
      return result;
    }
  }
  uint64_t v15 = 0;
  while (1)
  {
    ssize_t v16 = getdelim(&__linep, &__linecapp, a6, v12);
    if (v16 == -1) {
      break;
    }
    ++v15;
    __linep[v16 - 1] = 0;
    if (sub_10002938C(a1, __linep, a3, a4, a6) == -1) {
      errx(1, "syntax error in %s at entry %zu", __s1, v15);
    }
  }
  free(__linep);
  uint64_t result = (int *)ferror(v12);
  if (result) {
    err(1, "failed to parse file %s");
  }
  if (v12 != __stdinp) {
    return (int *)fclose(v12);
  }
  return result;
}

uint64_t sub_100029BCC(_DWORD *a1, int a2)
{
  if (qword_100058688)
  {
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < qword_100058688; ++i)
    {
      uint64_t v6 = qword_100058678;
      uint64_t v7 = qword_100058678 + v4;
      unsigned int v8 = *(_DWORD *)(qword_100058678 + v4 + 24);
      int v9 = a1[2];
      if (v8 == 4)
      {
        if (v9)
        {
          if ((*(_WORD *)(qword_100058678 + v4 + 32) & 0x180) == 0) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if (v9)
      {
        goto LABEL_17;
      }
      if (v8 <= 9 && ((1 << v8) & 0x306) != 0 && (v8 == 4 || *(_DWORD *)(*(void *)a1 + 100) == 0))
      {
LABEL_17:
        sub_100029D74(qword_100058678 + v4);
        sub_100029E40(v7);
        size_t v12 = strlen(&byte_100058E70);
        uint64_t v13 = v6 + v4;
        size_t v14 = strlen(*(const char **)(v6 + v4 + 16));
        size_t v15 = strlen(&byte_100058E80);
        if (!sub_10001E174((uint64_t)a1, a2, (int)v14 + (int)v12 + (int)v15)) {
          sub_100041080();
        }
        if (!sub_10001D870((uint64_t)a1, a2, &byte_100058E70, v12)) {
          sub_100041080();
        }
        if (!sub_10001D870((uint64_t)a1, a2, *(char **)(v13 + 16), v14)) {
          sub_100041080();
        }
        if (v15 && !sub_10001D870((uint64_t)a1, a2, &byte_100058E80, v15)) {
          sub_100041080();
        }
      }
LABEL_22:
      v4 += 48;
    }
  }
  uint64_t result = sub_10001E174((uint64_t)a1, a2, 0);
  if (!result) {
    sub_100041080();
  }
  return result;
}

uint64_t sub_100029D74(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 24) - 1;
  if (v1 >= 9) {
    err(1, "unknown rule type %d", *(_DWORD *)(result + 24));
  }
  uint64_t v2 = 0;
  byte_100058E70 = aShpr[v1];
  uint64_t v3 = &byte_100058E71;
  int v4 = 1;
  do
  {
    if ((*(_DWORD *)(result + 28) & v4) != 0)
    {
      *v3++ = byte_100049C70[v2 + 4];
      if (v3 >= byte_100058E7D) {
        sub_10004109C();
      }
    }
    int v4 = *(_DWORD *)&byte_100049C70[v2 + 8];
    v2 += 8;
  }
  while (v2 != 88);
  *uint64_t v3 = 32;
  char v5 = v3 + 1;
  if (*(unsigned char *)(result + 38))
  {
    char v5 = v3 + 2;
    v3[1] = 47;
  }
  unsigned char *v5 = 0;
  return result;
}

uint64_t sub_100029E40(uint64_t result)
{
  uint64_t v1 = result;
  byte_100058E80 = 0;
  if (*(unsigned char *)(result + 41)) {
    uint64_t result = __strlcpy_chk();
  }
  if (*(unsigned char *)(v1 + 42))
  {
    return __strlcpy_chk();
  }
  return result;
}

uint64_t sub_100029EC8()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v3 = v0;
  size_t v10 = 0;
  while (1)
  {
    uint64_t result = sub_10001E94C(v3, v2, &v10);
    if (!result) {
      sub_1000410B8();
    }
    if (!v10) {
      break;
    }
    if (v10 >= 0x1FFF) {
      sub_1000410D4();
    }
    if (!sub_10001DDD4(v3, v2, __s, v10)) {
      sub_1000410B8();
    }
    __s[v10] = 0;
    int v11 = 0;
    size_t v5 = strcspn(__s, " _");
    unsigned int v6 = sub_10002AB7C((unsigned __int8 *)__s, v5, &v11);
    if (v6) {
      uint64_t v7 = &__s[v5 + 1];
    }
    else {
      uint64_t v7 = __s;
    }
    if (v6) {
      int v8 = v11;
    }
    else {
      int v8 = 0;
    }
    if (v6 <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = v6;
    }
    if (sub_10002938C((uint64_t)&unk_100058670, v7, v9, v8, 0) == -1) {
      sub_1000410F0();
    }
  }
  return result;
}

unint64_t sub_10002A020(char *__s1)
{
  if (*__s1 == 47)
  {
    unint64_t result = __strlcpy_chk();
    if (result >= 0x400) {
      sub_10004110C();
    }
    qword_100058E60 = 0;
  }
  else
  {
    uint64_t v3 = (char *)qword_100058E60;
    if (!qword_100058E60)
    {
      getcwd(byte_100058A60, 0x3FFuLL);
      uint64_t v3 = &byte_100058A60[strlen(byte_100058A60)];
      qword_100058E60 = (uint64_t)v3;
    }
    *(_WORD *)uint64_t v3 = 47;
    unint64_t result = strcmp(__s1, ".");
    if (result)
    {
      size_t v4 = strlen(__s1);
      unint64_t result = __strlcat_chk();
      if (result >= 0x400) {
        sub_100041134();
      }
      if (__s1[v4 - 1] != 47)
      {
        unint64_t result = __strlcat_chk();
        if (result >= 0x400) {
          sub_100041134();
        }
      }
    }
  }
  return result;
}

uint64_t sub_10002A138(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v4[0] = a2;
  v4[1] = a3;
  ++qword_100058E68;
  return sub_10002A18C(a1, 5, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002A1CC, (uint64_t)v4);
}

uint64_t sub_10002A18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t result = sub_10002ACE0((uint64_t)&unk_100058670, a1, a2, a3, a4, a5);
  if (result == 2) {
    sub_10004115C();
  }
  return result;
}

uint64_t sub_10002A1CC(void *a1, unint64_t a2, const char *a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *((unsigned int *)a4 + 2);
  if (sub_10002AEE8(a1, a2)) {
    return 2;
  }
  memset(&v18, 0, sizeof(v18));
  snprintf(__str, 0x400uLL, "%s/%s", a3, *(const char **)(a2 + 16));
  if (stat(__str, &v18) == -1)
  {
    if (*__error() != 2) {
      sub_100041188();
    }
  }
  else
  {
    size_t v10 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B00400FE4F2DFuLL);
    if (!v10) {
      sub_1000411A4();
    }
    int v11 = v10;
    size_t v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x10200401705F15EuLL);
    v11[3] = v12;
    if (!v12) {
      sub_1000411A4();
    }
    uint64_t v13 = v12;
    size_t v14 = strdup(&a3[v7]);
    v11[4] = v14;
    if (!v14) {
      sub_1000411C0();
    }
    *uint64_t v13 = a1;
    v13[2] = -1;
    v11[2] = a2;
    unsigned int v15 = *(_DWORD *)(a2 + 32);
    *((unsigned char *)v11 + 48) = (v15 & 0x800) == 0;
    v11[5] = qword_100058E68;
    unint64_t v16 = *(void *)a2;
    *int v11 = *(void *)a2;
    if (!v16) {
      unint64_t v16 = a2;
    }
    *(void *)(v16 + 8) = v11;
    *(void *)a2 = v11;
    v11[1] = a2;
    if ((v15 & 0x80) != 0) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (v15 >> 7) & 2;
    }
    sub_100029A68((uint64_t)v13, __str, v17, v15 & 0x1F80, 1, v8);
  }
  return 3;
}

uint64_t sub_10002A394(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10002A18C(a1 + a2, 5, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002A3DC, 0);
  --qword_100058E68;
  return result;
}

uint64_t sub_10002A3DC(int a1, const char ***a2, char *__s2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    size_t v5 = a2;
    if (!strcmp(v3[4], __s2))
    {
      unsigned int v6 = *v3;
      uint64_t v7 = (char *)v3[1];
      if (*v3)
      {
        *((void *)v6 + 1) = v7;
        uint64_t v7 = (char *)v3[1];
      }
      else
      {
        v5[1] = (const char **)v7;
      }
      *(void *)uint64_t v7 = v6;
      uint64_t v8 = (char *)v3[3];
      if (*((void *)v8 + 3))
      {
        unint64_t v9 = 0;
        do
        {
          uint64_t v10 = *((void *)v8 + 1);
          int v11 = (uint64_t *)(v10 + 48 * v9);
          if (*((_DWORD *)v11 + 6) == 5)
          {
            if (!*((void *)v8 + 5)) {
              sub_100041234();
            }
            if (!*(void *)(*(void *)v8 + 40)) {
              sub_100041260();
            }
            uint64_t v12 = *v11;
            uint64_t v13 = v8;
            if (v12) {
              sub_1000412B8();
            }
            do
            {
              uint64_t v14 = *((void *)v13 + 5);
              if (!v14) {
                sub_10004128C();
              }
              *((void *)v13 + 5) = v14 - 1;
              uint64_t v13 = *(char **)v13;
            }
            while (v13);
          }
          free(*(void **)(v10 + 48 * v9++ + 16));
        }
        while (v9 < *((void *)v8 + 3));
      }
      if (*((void *)v8 + 5)) {
        sub_100041208();
      }
      free(*((void **)v8 + 1));
      free(v8);
      free((void *)v3[4]);
      free(v3);
    }
    while (1)
    {
      size_t v5 = (const char ***)*v5;
      if (!v5) {
        break;
      }
      if (!strcmp((const char *)v5[4], __s2)) {
        sub_1000411DC();
      }
    }
  }
  return 3;
}

uint64_t sub_10002A51C(char *__s, int a2, int a3, int a4)
{
  if (!a2 || (uint64_t result = strcmp(__s, "."), result) && (uint64_t result = strcmp(__s, "./"), result))
  {
    memset(v11, 0, 512);
    int v13 = a2;
    unsigned int v15 = 0;
    int v14 = a4;
    int v16 = a3;
    unint64_t v9 = strrchr(__s, 47);
    if (v9) {
      uint64_t v10 = v9 + 1;
    }
    else {
      uint64_t v10 = __s;
    }
    uint64_t v12 = v10;
    sub_10002A18C((uint64_t)__s, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002A64C, (uint64_t)v11);
    return v15;
  }
  return result;
}

uint64_t sub_10002A64C(void *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  if (sub_10002AEE8(a1, a2)) {
    return 2;
  }
  int v8 = *(_DWORD *)(a2 + 24);
  if (v8 == 3) {
    return 1;
  }
  int v9 = *(_DWORD *)(a4 + 1044);
  int v10 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a4 + 1036) && (v10 & 0x20) != 0) {
    return 3;
  }
  uint64_t result = 3;
  switch(v8)
  {
    case 1:
      if ((v10 & 4) == 0) {
        goto LABEL_14;
      }
      return result;
    case 2:
      goto LABEL_14;
    case 6:
    case 7:
      if (!v9) {
        goto LABEL_14;
      }
      return result;
    case 8:
    case 9:
      if (v9 != 1) {
        return result;
      }
LABEL_14:
      if (*(unsigned char *)(a2 + 41) && !*(_DWORD *)(a4 + 1032))
      {
        int v12 = 0;
        goto LABEL_45;
      }
      if (v10)
      {
        int v11 = (char *)a4;
        if (!*(unsigned char *)a4)
        {
          if (*a3 == 47)
          {
            int v11 = (char *)a4;
            if (strlcpy((char *)a4, a3, 0x400uLL) >= 0x400) {
              sub_100041310(a3);
            }
          }
          else
          {
            if (strlcpy((char *)a4, byte_100058A60, 0x400uLL) >= 0x400) {
              sub_100041348();
            }
            int v11 = (char *)a4;
            if (strlcat((char *)a4, a3, 0x400uLL) >= 0x400)
            {
              *__error() = 63;
              err(3, "%s/%s", (const char *)a4, a3);
            }
          }
        }
      }
      else
      {
        int v11 = (char *)a3;
      }
      if (*(unsigned char *)(a2 + 40))
      {
        if (*(unsigned char *)(a2 + 39))
        {
          int v13 = *(_DWORD *)(a2 + 32);
          if (((v13 & 2) == 0) != (strcmp(*(const char **)(a4 + 1024), *(const char **)(a2 + 16)) == 0)) {
            goto LABEL_41;
          }
          unsigned int v14 = *(_DWORD *)(a2 + 24) - 1;
          if (v14 >= 9 || ((0x1E3u >> v14) & 1) == 0) {
            sub_1000412E4();
          }
        }
        else if (*(unsigned char *)(a2 + 38))
        {
          int v15 = *(_DWORD *)(a2 + 32);
          if (((v15 & 2) == 0) != (strcmp(v11, *(const char **)(a2 + 16)) == 0)) {
            goto LABEL_41;
          }
          unsigned int v14 = *(_DWORD *)(a2 + 24) - 1;
          if (v14 >= 9 || ((0x1E3u >> v14) & 1) == 0) {
            sub_1000412E4();
          }
        }
        else if (*(unsigned char *)(a2 + 42))
        {
          size_t v17 = strlen(*(const char **)(a2 + 16));
          stat v18 = strstr(v11, *(const char **)(a2 + 16));
          if (!v18 || v18 != v11 && *(v18 - 1) != 47 || v18[v17] != 47 && v18[v17]) {
            goto LABEL_41;
          }
          unsigned int v14 = *(_DWORD *)(a2 + 24) - 1;
          if (v14 >= 9 || ((0x1E3u >> v14) & 1) == 0) {
            sub_1000412E4();
          }
        }
        else
        {
          size_t v22 = strlen(v11);
          size_t v23 = strlen(*(const char **)(a2 + 16));
          if (v22 < v23) {
            goto LABEL_41;
          }
          size_t v24 = v23;
          int v25 = *(_DWORD *)(a2 + 32);
          if (((v25 & 2) == 0) != (strcmp(&v11[v22 - v23], *(const char **)(a2 + 16)) == 0)
            || v22 != v24 && v11[v22 + ~v24] != 47)
          {
            goto LABEL_41;
          }
          unsigned int v14 = *(_DWORD *)(a2 + 24) - 1;
          if (v14 >= 9 || ((0x1E3u >> v14) & 1) == 0) {
            sub_1000412E4();
          }
        }
        goto LABEL_44;
      }
      if (*(unsigned char *)(a2 + 39))
      {
        int v11 = *(char **)(a4 + 1024);
        goto LABEL_39;
      }
      if (*(unsigned char *)(a2 + 38) || (int v19 = *(__int16 *)(a2 + 36), v19 == -1))
      {
LABEL_39:
        if (v11) {
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      __int16 v20 = 1;
      BOOL v21 = v11;
      break;
    default:
      return result;
  }
  while (*v21 == 47)
  {
    ++v20;
LABEL_62:
    ++v21;
  }
  if (*v21) {
    goto LABEL_62;
  }
  if (v19 > v20) {
    goto LABEL_41;
  }
  int v26 = *v11;
  if (*v11)
  {
    int v27 = (__int16)(v20 - v19);
    if (v27 >= 1)
    {
      do
      {
        LOWORD(v27) = v27 - (v26 == 47);
        int v28 = *++v11;
        int v26 = v28;
        if (v28) {
          BOOL v29 = (unsigned __int16)v27 == 0;
        }
        else {
          BOOL v29 = 1;
        }
      }
      while (!v29);
    }
  }
LABEL_40:
  int v16 = *(_DWORD *)(a2 + 32);
  if ((sub_100028DE0(*(unsigned __int8 **)(a2 + 16), v11, *(unsigned __int8 *)(a2 + 42)) ^ ((v16 & 2) >> 1)))
  {
LABEL_41:
    int v12 = 0;
    uint64_t result = 3;
    goto LABEL_45;
  }
  unsigned int v14 = *(_DWORD *)(a2 + 24) - 1;
  if (v14 >= 9 || ((0x1E3u >> v14) & 1) == 0) {
    sub_1000412E4();
  }
LABEL_44:
  uint64_t result = 0;
  int v12 = dword_100049D98[v14];
LABEL_45:
  *(_DWORD *)(a4 + 1040) = v12;
  return result;
}

uint64_t sub_10002AA94(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  v2[0] = v3;
  v2[1] = a1;
  sub_10002A18C(0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002AAE4, (uint64_t)v2);
  return v3[0];
}

uint64_t sub_10002AAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 4) {
    return 2;
  }
  if ((v4 - 1) < 2 || *(_DWORD *)(a4[1] + 16) >= 29)
  {
    uint64_t v8 = *a4;
    sub_100029D74(a2);
    sub_100029E40(a2);
    sub_100025C9C(v8, "%s%s%s", v9, v10, v11, v12, v13, v14, (char)&byte_100058E70);
  }
  return 3;
}

uint64_t sub_10002AB7C(unsigned __int8 *a1, size_t __n, _DWORD *a3)
{
  if (!__n) {
    return 0;
  }
  unsigned int v6 = memchr(a1, 44, __n);
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  uint64_t v9 = v6 + 1;
  if (v6) {
    size_t v10 = v6 - a1;
  }
  else {
    size_t v10 = __n;
  }
  while (1)
  {
    if (!strncmp(*(const char **)&dword_100055CD8[v8 + 2], (const char *)a1, v10))
    {
      if (v7) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
    if (LOBYTE(dword_100055CD8[v8 + 1]) == *a1) {
      break;
    }
    v8 += 4;
    if (v8 == 36) {
      return 0;
    }
  }
  if (!v7)
  {
    uint64_t v9 = a1 + 1;
    int v12 = a1[1];
    if (!a1[1]) {
      goto LABEL_26;
    }
  }
LABEL_14:
  uint64_t v13 = (unsigned __int8 *)(a1 - v9 + __n);
  if (!v13)
  {
LABEL_24:
    int v12 = 0;
    goto LABEL_26;
  }
  uint64_t v14 = 0;
  int v12 = 0;
  while (1)
  {
    int v15 = v14[(void)v9];
    if (v15 != 47) {
      break;
    }
    int v16 = 1;
LABEL_22:
    v12 |= v16;
    if (++v14 == v13) {
      goto LABEL_26;
    }
  }
  uint64_t v17 = 0;
  while (1)
  {
    uint64_t v18 = v17 + 8;
    if (v17 == 80) {
      break;
    }
    int v19 = byte_100049C70[v17 + 12];
    v17 += 8;
    if (v19 == v15)
    {
      int v16 = *(_DWORD *)&byte_100049C70[v18];
      goto LABEL_22;
    }
  }
  if (v13 != v14) {
    return 0;
  }
LABEL_26:
  if (a3) {
    *a3 = v12;
  }
  return dword_100055CD8[v8];
}

uint64_t sub_10002ACE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  if (!*(void *)(a1 + 24)) {
    return 3;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 3;
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 8);
    if (a3 && *(_DWORD *)(v13 + 48 * v11 + 24) != a3) {
      goto LABEL_25;
    }
    uint64_t v14 = (uint64_t **)(v13 + 48 * v11);
    if (a4 && *(_DWORD *)(v13 + 48 * v11 + 24) == 5)
    {
      uint64_t v15 = 3;
LABEL_11:
      uint64_t v12 = v15;
      uint64_t v16 = v10;
      goto LABEL_13;
    }
    uint64_t v15 = a5(a1, v13 + 48 * v11, a2, a6);
    uint64_t v12 = 3;
    if (v15 == 1) {
      break;
    }
    if (v15 != 2)
    {
      if (!v15) {
        return v15;
      }
      goto LABEL_11;
    }
LABEL_25:
    if ((unint64_t)++v11 >= *(void *)(a1 + 24))
    {
      if (v10) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = 3;
      }
      uint64_t v15 = v12;
      if (v12 == 3) {
        return v18;
      }
      return v15;
    }
  }
  uint64_t v16 = 1;
LABEL_13:
  if (*(_DWORD *)(v13 + 48 * v11 + 24) != 5)
  {
LABEL_24:
    uint64_t v10 = v16;
    goto LABEL_25;
  }
  uint64_t v17 = *v14;
  if (!*v14)
  {
LABEL_22:
    if (a4)
    {
      a5(a1, (uint64_t)v14, a2, a6);
      uint64_t v12 = 3;
    }
    goto LABEL_24;
  }
  while (1)
  {
    if (*((unsigned char *)v17 + 48) || qword_100058E68 <= (unint64_t)v17[5])
    {
      uint64_t v12 = sub_10002ACE0(v17[3], a2, a3, a4, a5, a6);
      if (v12 == 1)
      {
        uint64_t v12 = 3;
        goto LABEL_22;
      }
      if (v12 != 3) {
        break;
      }
    }
    uint64_t v17 = (uint64_t *)*v17;
    if (!v17) {
      goto LABEL_22;
    }
  }
  if (v12) {
    sub_1000413D8();
  }
  return v12;
}

BOOL sub_10002AEE8(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 > a2 || v2 + 48 * a1[3] <= a2) {
    sub_100041404();
  }
  unint64_t v3 = a1[2];
  return v3 != -1 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v2) >> 4) < v3;
}

uint64_t sub_10002AF50(_DWORD *a1, uint64_t *a2, size_t *a3, size_t *a4, void *a5, uint64_t a6, int a7)
{
  if (sub_10001E550((uint64_t)a1, (void **)a2, a3, a4, 4))
  {
    sub_10001E634(a1, *a2, a5, *a3, a7);
    if ((int)a1[65] < 29) {
      return 1;
    }
    if (!sub_10001E550((uint64_t)a1, (void **)a2, a3, a4, 2))
    {
      if (dword_100058FD8)
      {
        int v26 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    int v14 = a7;
    uint64_t v15 = a6 + 152 * a7;
    int v17 = *(_DWORD *)(v15 + 116);
    uint64_t v16 = (int *)(v15 + 116);
    sub_10001E68C(a1, *a2, a5, *a3, v17);
    int v18 = *v16;
    if ((*v16 & 0x800) != 0)
    {
      if (!sub_10001E550((uint64_t)a1, (void **)a2, a3, a4, 1))
      {
        if (dword_100058FD8)
        {
          int v26 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_24;
          }
          goto LABEL_25;
        }
        goto LABEL_26;
      }
      sub_10001E660(a1, *a2, a5, *a3, *(unsigned char *)(a6 + 152 * v14 + 120));
      int v18 = *v16;
    }
    if ((v18 & 0x1000) == 0) {
      return 1;
    }
    uint64_t v19 = a6 + 152 * v14;
    BOOL v21 = *(const char **)(v19 + 88);
    __int16 v20 = (void **)(v19 + 88);
    size_t v22 = strlen(v21);
    size_t v23 = v22;
    uint64_t v24 = 1;
    if (v22 > 0x7F) {
      uint64_t v24 = 2;
    }
    if (sub_10001E550((uint64_t)a1, (void **)a2, a3, a4, v24 + v22))
    {
      sub_10001E3A8(a1, *a2, a5, *a3, *v20, v23);
      return 1;
    }
    if (dword_100058FD8)
    {
      int v26 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_24:
      }
        sub_100041430();
LABEL_25:
      *__error() = v26;
    }
  }
  else if (dword_100058FD8)
  {
    int v26 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_26:
  sub_10001FC88("io_lowbuffer_alloc");
  return 0;
}

uint64_t sub_10002B1D4(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, const char **a5)
{
  memset(v189, 0, sizeof(v189));
  uint64_t v187 = 0;
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  uint64_t v183 = 0;
  unint64_t v184 = 0;
  uint64_t v181 = 0;
  unint64_t v182 = 0;
  int v178 = 0;
  memset(&v170, 0, sizeof(v170));
  size_t v168 = 0;
  uint64_t v169 = 0;
  *(void *)&v166.tv_useCC_MD4_CTX c = 0;
  size_t v167 = 0;
  v166.tv_seCC_MD4_CTX c = 0;
  v164.tv_seCC_MD4_CTX c = 0;
  *(void *)&v164.tv_useCC_MD4_CTX c = 0;
  int v10 = *(_DWORD *)(a1 + 260);
  v163.tv_seCC_MD4_CTX c = 0;
  *(void *)&v163.tv_useCC_MD4_CTX c = 0;
  if (v10 <= 28) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 2;
  }
  if (v10 <= 28) {
    unint64_t v12 = 4;
  }
  else {
    unint64_t v12 = 6;
  }
  v162.tv_seCC_MD4_CTX c = 0;
  *(void *)&v162.tv_useCC_MD4_CTX c = 0;
  sub_10001373C(&v183);
  qword_100058FF8 = (uint64_t)&v183;
  v188[0] = *(unsigned int *)(*(void *)a1 + 12);
  v188[1] = (char *)&v181 + 4;
  *(void *)(a1 + 200) = v188;
  uint64_t v175 = 0;
  long long v177 = 0u;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v172 = 0u;
  memset(v171, 0, sizeof(v171));
  uint64_t v179 = 0;
  int v180 = &v179;
  DWORD2(v173) = -1;
  int v176 = (void **)sub_100002A30();
  uint64_t v13 = *(_DWORD **)a1;
  if (*(void *)(*(void *)a1 + 432))
  {
    if (a4 != 1)
    {
      if (dword_100058FD8)
      {
        int v38 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100041AF8();
        }
        *__error() = v38;
      }
      sub_10001FB50("Only one src dir allowed with --files-from");
      goto LABEL_205;
    }
    if (!sub_100017234(a1)) {
      goto LABEL_205;
    }
    if (chdir(*a5) == -1)
    {
      if (dword_100058FD8)
      {
        int v41 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100041A64();
        }
        *__error() = v41;
      }
      sub_10001FBD8("%s: chdir", v14, v15, v16, v17, v18, v19, v20, (char)*a5);
      goto LABEL_205;
    }
    a5 = *(const char ***)(a1 + 168);
    a4 = *(void *)(a1 + 176);
    uint64_t v13 = *(_DWORD **)a1;
    if (*(void *)(*(void *)a1 + 496))
    {
      if (v13[1]) {
        sub_100041ACC();
      }
      *(_DWORD *)(a1 + 128) = 1;
    }
  }
  if (v13[1]
    || v13[24]
    && (!v13[25] || *(int *)(a1 + 260) >= 29)
    && (sub_100029BCC((_DWORD *)a1, a3), *(_DWORD *)(*(void *)a1 + 4)))
  {
    sub_100029EC8();
  }
  v165.tv_seCC_MD4_CTX c = 0;
  *(void *)&v165.tv_useCC_MD4_CTX c = 0;
  gettimeofday(&v165, 0);
  if (!sub_100015240((uint64_t *)a1, a4, (char **)a5, (uint64_t)&v183))
  {
    if (dword_100058FD8)
    {
      int v39 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100041464();
      }
      *__error() = v39;
    }
    sub_10001FC88("flist_gen");
    goto LABEL_205;
  }
  gettimeofday(&v164, 0);
  __darwin_time_t v21 = v164.tv_sec - v165.tv_sec;
  __darwin_suseconds_t v22 = v164.tv_usec - v165.tv_usec;
  if (v164.tv_usec - v165.tv_usec < 0)
  {
    v166.tv_seCC_MD4_CTX c = --v21;
    v22 += 1000000;
    v166.tv_useCC_MD4_CTX c = v22;
  }
  *(void *)(a1 + 112) = 1000 * v21 + v22 / 1000;
  *(void *)(a1 + 64) = v184;
  gettimeofday(&v163, 0);
  uint64_t v23 = *(void *)(a1 + 48);
  if (!sub_1000128A8(a1, a2, a3, (uint64_t)v183, v184, v24, v25, v26))
  {
    if (dword_100058FD8)
    {
      int v40 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100041498();
      }
      *__error() = v40;
    }
    sub_10001FC88("flist_send");
    goto LABEL_205;
  }
  if (!sub_10001E174(a1, a3, *(void *)(a1 + 240) != 0))
  {
    if (dword_100058FD8)
    {
      int v42 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B7F8();
      }
      *__error() = v42;
    }
    sub_10001FC88("io_write_int");
    goto LABEL_205;
  }
  gettimeofday(&v162, 0);
  __darwin_time_t v33 = v162.tv_sec - v163.tv_sec;
  v166.tv_seCC_MD4_CTX c = v162.tv_sec - v163.tv_sec;
  __darwin_suseconds_t v34 = v162.tv_usec - v163.tv_usec;
  v166.tv_useCC_MD4_CTX c = v162.tv_usec - v163.tv_usec;
  if (v162.tv_usec - v163.tv_usec < 0)
  {
    v166.tv_seCC_MD4_CTX c = --v33;
    v34 += 1000000;
    v166.tv_useCC_MD4_CTX c = v34;
  }
  *(void *)(a1 + 120) = 1000 * v33 + v34 / 1000;
  *(void *)(a1 + 104) = *(void *)(a1 + 48) - v23;
  char v35 = v184;
  uint64_t v36 = *(void *)a1;
  int v37 = *(_DWORD *)(*(void *)a1 + 4);
  if (v184)
  {
    if (v37) {
      goto LABEL_67;
    }
  }
  else if (v37)
  {
    if (dword_100058FD8)
    {
      int v43 = *__error();
      int v44 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "sender has empty file list: exiting", buf, 2u);
      }
      *__error() = v43;
    }
    sub_10001FDC8("sender has empty file list: exiting");
    goto LABEL_219;
  }
  if (dword_100058FD8)
  {
    int v45 = *__error();
    int v46 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      unint64_t v195 = v184;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Transfer starting: %zu files", buf, 0xCu);
    }
    *__error() = v45;
    char v35 = v184;
  }
  sub_10001FA38(0, "Transfer starting: %zu files", v27, v28, v29, v30, v31, v32, v35);
  uint64_t v36 = *(void *)a1;
LABEL_67:
  if (*(_DWORD *)(v36 + 204))
  {
    uint64_t v186 = a1;
    uint64_t v187 = &v183;
    if (!sub_10001DA44(100, (uint64_t)sub_10002C950, (uint64_t)&v186))
    {
      if (dword_100058FD8)
      {
        int v111 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100041A30();
        }
        *__error() = v111;
      }
      sub_10001FB50("Failed to install remove-source-files handler; exiting");
LABEL_219:
      uint64_t v106 = 1;
      goto LABEL_206;
    }
  }
  if (!sub_10001EED0(a1, v189, 0x14uLL))
  {
    if (dword_100058FD8)
    {
      int v105 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000414CC();
      }
      *__error() = v105;
    }
    sub_10001FC88("iobuf_alloc");
    goto LABEL_205;
  }
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  uint64_t v155 = 0;
  int v156 = 0;
  BOOL v161 = 0;
  v196.fd = a2;
  v196.events = 1;
  int v197 = -1;
  __int16 v198 = 4;
  int v200 = -1;
  __int16 v201 = 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_71:
        if (v196.fd == -1) {
          sub_100041500();
        }
        if (!sub_10001EF94((uint64_t)v189)) {
          break;
        }
        if (poll(&v196, 3u, 0) != -1) {
          goto LABEL_80;
        }
        if (*__error() != 4)
        {
          if (dword_100058FD8)
          {
            int v112 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_230;
            }
            goto LABEL_231;
          }
          goto LABEL_232;
        }
      }
      int v55 = poll(&v196, 3u, dword_100058FF0);
      if (v55 != -1) {
        break;
      }
      if (*__error() != 4)
      {
        if (dword_100058FD8)
        {
          int v112 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_230:
          }
            sub_10003F8A0();
LABEL_231:
          *__error() = v112;
        }
LABEL_232:
        uint64_t v114 = "poll";
LABEL_233:
        sub_10001FBD8(v114, v48, v49, v50, v51, v52, v53, v54, v152);
        goto LABEL_205;
      }
    }
    if (!v55)
    {
      if (dword_100058FD8)
      {
        int v113 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004011C();
        }
        *__error() = v113;
      }
      sub_10001FB50("poll: timeout");
      goto LABEL_205;
    }
LABEL_80:
    for (uint64_t i = 6; i != 30; i += 8)
    {
      __int16 v57 = *(_WORD *)((char *)&v196.fd + i);
      if ((v57 & 0x28) != 0)
      {
        if (dword_100058FD8)
        {
          int v115 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000400E8();
          }
          *__error() = v115;
        }
        sub_10001FB50("poll: bad fd");
        goto LABEL_205;
      }
      if ((v57 & 0x10) != 0)
      {
        if (dword_100058FD8)
        {
          int v116 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000419FC();
          }
          *__error() = v116;
        }
        sub_10001FB50("poll: hangup");
        goto LABEL_205;
      }
    }
    char revents = v196.revents;
    if (*(_DWORD *)(a1 + 128))
    {
      if (v196.revents) {
        break;
      }
    }
LABEL_93:
    if ((revents & 1) != 0 && (!*(_DWORD *)(a1 + 128) || *(void *)(a1 + 136)))
    {
      if (!sub_10001EF9C(a1, v189, a2))
      {
        if (dword_100058FD8)
        {
          int v118 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000419C8();
          }
          *__error() = v118;
        }
        sub_10001FC88("iobuf_fill");
        goto LABEL_205;
      }
      char revents = v196.revents & 0xFE;
      v196.revents &= ~1u;
    }
    if (revents)
    {
      if (v159) {
        goto LABEL_112;
      }
      BOOL v60 = v161;
    }
    else if (!sub_10001EF94((uint64_t)v189) || (BOOL v60 = v161, v159))
    {
LABEL_112:
      mode_t v62 = v158;
      goto LABEL_119;
    }
    if (v60) {
      goto LABEL_112;
    }
    unint64_t v61 = sub_10001EF94((uint64_t)v189);
    if (v61 == 4)
    {
      if (sub_10001F5D4(v189) != -1 && v10 > 28) {
        goto LABEL_108;
      }
    }
    else if (v61 < v12)
    {
      goto LABEL_108;
    }
    sub_10001F604(v189, &v181);
    if (v181 == -1)
    {
      BOOL v161 = v156 >= (int)v11;
      ++HIDWORD(v181);
      ++v156;
    }
    else
    {
      BOOL v161 = 0;
    }
    if (!sub_10002CBDC((int *)a1, (uint64_t)&v179, v181, (uint64_t)v183, v184, v189, &v178))
    {
      if (dword_100058FD8)
      {
        int v120 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004152C();
        }
        *__error() = v120;
      }
      sub_10001FC88("send_dl_enqueue");
      goto LABEL_205;
    }
    mode_t v62 = v178;
    if (v181 == -1)
    {
      uint64_t v157 = v178;
      uint64_t v159 = v178;
      if (v178) {
        sub_10004199C();
      }
    }
    else
    {
      uint64_t v157 = v178;
      uint64_t v159 = v178;
    }
LABEL_119:
    uint64_t v158 = v62;
    if (v196.revents)
    {
      if (!v159)
      {
        uint64_t v159 = 0;
        goto LABEL_144;
      }
    }
    else if (!sub_10001EF94((uint64_t)v189) || (mode_t v62 = v158, !v157))
    {
      uint64_t v159 = v157;
      goto LABEL_144;
    }
    uint64_t v63 = v62 + 6;
    int v64 = v62[6];
    if (v64 && v64 != 2)
    {
      uint64_t v160 = v62 + 6;
      if (v64 != 1) {
        goto LABEL_136;
      }
      int v65 = sub_10002D00C(v189, (uint64_t)v183, v62);
      if (v65 < 0)
      {
        if (dword_100058FD8)
        {
          int v122 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041934();
          }
          *__error() = v122;
        }
        sub_10001FC88("sender_get_iflags");
        return 0;
      }
      if (!v65)
      {
        mode_t v62 = v158;
        int v64 = *v160;
        goto LABEL_136;
      }
      mode_t v62 = v158;
      if ((v183[152 * *v158 + 117] & 0x80) == 0) {
        goto LABEL_139;
      }
      if (*(_DWORD *)(*(void *)a1 + 36) == 2)
      {
        mode_t v62 = v158;
        *uint64_t v160 = 3;
LABEL_138:
        *((void *)v62 + 7) = 0;
        uint64_t v67 = v180;
        *((void *)v62 + 8) = v180;
        *uint64_t v67 = (uint64_t)v62;
        int v180 = (uint64_t *)(v62 + 14);
        int v178 = 0;
        uint64_t v158 = 0;
        goto LABEL_140;
      }
      mode_t v62 = v158;
      uint64_t v63 = v160;
      *uint64_t v160 = 0;
    }
    uint64_t v66 = sub_10000360C(a1, a2, v189, *(void *)&v183[152 * *v62], *((void *)v62 + 1), (uint64_t)(v62 + 4), v63, v47);
    mode_t v62 = v158;
    *((void *)v158 + 1) = v66;
    int v64 = v158[6];
    if (!v64) {
      goto LABEL_140;
    }
    if (!v66)
    {
      if (dword_100058FD8)
      {
        int v121 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100041968();
        }
        *__error() = v121;
      }
      sub_10001FC88("blk_recv");
      return 0;
    }
LABEL_136:
    if (v64 == 4)
    {
LABEL_139:
      free(v62);
      uint64_t v158 = 0;
      int v178 = 0;
      goto LABEL_140;
    }
    if (v64 == 3) {
      goto LABEL_138;
    }
LABEL_140:
    v196.revents &= ~1u;
    int v68 = sub_10001CDD8(a1, a2);
    if (v68 < 0)
    {
      if (dword_100058FD8)
      {
        int v119 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_257:
        }
          sub_100041560();
LABEL_258:
        *__error() = v119;
      }
LABEL_259:
      sub_10001FC88("io_read_check");
      goto LABEL_205;
    }
    uint64_t v157 = v158;
    uint64_t v159 = v158;
    if (v68) {
      goto LABEL_71;
    }
LABEL_144:
    int v153 = v10;
    unint64_t v154 = v11;
    if (v202)
    {
      if (!v171[0]) {
        sub_100041884();
      }
      if (DWORD2(v173) == -1) {
        sub_1000418B0();
      }
      if (*((void *)&v172 + 1)) {
        sub_100041908();
      }
      if ((void)v173) {
        sub_1000418DC();
      }
      uint64_t v69 = v183;
      int v70 = *v171[0];
      if (fstat(SDWORD2(v173), &v170) == -1)
      {
        if (dword_100058FD8)
        {
          int v123 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003D220();
          }
          *__error() = v123;
        }
        sub_10001FBD8("%s: fstat", v71, v72, v73, v74, v75, v76, v47, *(void *)&v69[152 * v70]);
        goto LABEL_205;
      }
      *(void *)&long long v173 = v170.st_size;
      if (v170.st_size)
      {
        *((void *)&v172 + 1) = sub_100010DA4(SDWORD2(v173), v170.st_size, 1);
        if (!*((void *)&v172 + 1))
        {
          if (dword_100058FD8)
          {
            int v128 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003CF78();
            }
            *__error() = v128;
          }
          sub_10001FBD8("%s: mmap", v77, v78, v79, v80, v81, v82, v47, *(void *)&v69[152 * v70]);
          goto LABEL_205;
        }
      }
      int v200 = -1;
      int v197 = a3;
    }
    if ((v199 & 4) != 0 && v168)
    {
      if (v200 != -1) {
        sub_100041858();
      }
      if (v168 == v155) {
        sub_100041594();
      }
      int v83 = a3;
      if (HIDWORD(v173) != 6)
      {
        int v83 = a3;
        if (*(_DWORD *)(a1 + 188) != -1)
        {
          if (*(_DWORD *)(*(void *)a1 + 36) == 1) {
            int v83 = *(_DWORD *)(a1 + 188);
          }
          else {
            int v83 = a3;
          }
        }
      }
      ssize_t v84 = write(v83, (char *)v169 + v155, v168 - v155);
      if (v84 == -1)
      {
        if (dword_100058FD8)
        {
          int v124 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000415C0();
          }
          *__error() = v124;
        }
        uint64_t v114 = "write";
        goto LABEL_233;
      }
      ssize_t v85 = v84;
      if (!sub_10001D23C(a1, v83, (char *)v169 + v155, v84))
      {
        if (dword_100058FD8)
        {
          int v125 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000415F4();
          }
          *__error() = v125;
        }
        sub_10001FC88("io_data_written");
        goto LABEL_205;
      }
      v155 += v85;
      if (v155 == v168)
      {
        uint64_t v155 = 0;
        size_t v168 = 0;
      }
      v199 &= ~4u;
      if (*(void *)(*(void *)a1 + 472))
      {
        gettimeofday(&v166, 0);
        double v86 = (double)v166.tv_usec / 1000000.0 + (double)v166.tv_sec;
        double v87 = *(double *)(a1 + 224);
        if (v87 == 0.0)
        {
          *(double *)(a1 + 224) = v86;
        }
        else
        {
          unint64_t v88 = *(void *)(a1 + 48);
          double v89 = v86 - v87;
          uint64_t v90 = *(void *)(*(void *)a1 + 472);
          if ((double)v88 / v89 > (double)v90) {
            usleep((((double)(v88 / v90) - v89) * 1000.0 * 1000.0));
          }
        }
      }
    }
    uint64_t v91 = v171[0];
    if ((v199 & 4) != 0 && v171[0])
    {
      if (v200 != -1) {
        sub_10004182C();
      }
      if (v155 | v168) {
        sub_100041628();
      }
      if (*(_DWORD *)(*(void *)a1 + 552)) {
        int v92 = sub_10002D0E4(a1, &v182, v171, (uint64_t *)&v169, &v168, &v167, (uint64_t)v183, v47);
      }
      else {
        int v92 = sub_10002E17C(a1, &v182, v171, (uint64_t *)&v169, &v168, &v167, (uint64_t)v183, v47);
      }
      if (!v92)
      {
        if (dword_100058FD8)
        {
          int v126 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041654();
          }
          *__error() = v126;
        }
        sub_10001FC88("send_up_fsm");
        goto LABEL_205;
      }
      if (v182 > v154)
      {
        if (v179)
        {
          if (dword_100058FD8)
          {
            int v127 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_1000416F0();
            }
            *__error() = v127;
          }
          sub_10001FB50("phases complete with files still queued");
          goto LABEL_205;
        }
        if (!sub_100030278(a1, a3, v93, v94, v95, v96, v97, v98))
        {
          if (dword_100058FD8)
          {
            int v147 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100041688();
            }
            *__error() = v147;
          }
          sub_10001FC88("sess_stats_end");
          goto LABEL_205;
        }
        uint64_t v129 = sub_10002ED68(a1, (uint64_t)&v183, v189, a2, a3);
        if (v129)
        {
          uint64_t v106 = v129;
          if (dword_100058FD8)
          {
            int v136 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_1000416BC();
            }
            *__error() = v136;
          }
          sub_10001FC88("sender_finalize");
        }
        else
        {
          if (dword_100058FD8)
          {
            int v148 = *__error();
            uint64_t v149 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)stat buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_INFO, "sender finished updating", buf, 2u);
            }
            *__error() = v148;
          }
          uint64_t v106 = 1;
          sub_10001FA38(1, "sender finished updating", v130, v131, v132, v133, v134, v135, v152);
        }
        goto LABEL_206;
      }
      uint64_t v91 = v171[0];
    }
    int v10 = v153;
    uint64_t v11 = v154;
    if (!v91)
    {
      if (v200 != -1) {
        sub_100041800();
      }
      if (DWORD2(v173) != -1) {
        sub_1000417D4();
      }
      if (*((void *)&v172 + 1)) {
        sub_1000417A8();
      }
      if ((void)v173) {
        sub_10004177C();
      }
      if (v168 | v155) {
        sub_100041724();
      }
      uint64_t v155 = 0;
      int v197 = -1;
      uint64_t v99 = v179;
      v171[0] = (int *)v179;
      int v10 = v153;
      uint64_t v11 = v154;
      if (v179)
      {
        if (*(_DWORD *)(v179 + 24) != 3) {
          sub_100041750();
        }
        uint64_t v100 = *(void *)(v179 + 56);
        int v101 = *(void **)(v179 + 64);
        if (v100)
        {
          *(void *)(v100 + 64) = v101;
          int v101 = *(void **)(v99 + 64);
        }
        else
        {
          int v180 = *(uint64_t **)(v179 + 64);
        }
        *int v101 = v100;
        sub_100002B60((uint64_t)v176, *((void *)v171[0] + 1));
        if (*v171[0] == -1)
        {
          uint64_t v155 = 0;
          int v197 = a3;
        }
        else
        {
          uint64_t v102 = &v183[152 * *v171[0]];
          uint64_t v103 = (uint64_t (*)(uint64_t))*((void *)v102 + 16);
          if (v103)
          {
            int v104 = v103(a1);
          }
          else
          {
            char v152 = 0;
            int v104 = open(*(const char **)v102, 4);
          }
          DWORD2(v173) = v104;
          if (v104 == -1)
          {
            if (dword_100058FD8)
            {
              int v137 = *__error();
              long long v138 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
              {
                uint64_t v150 = *(void *)&v183[152 * *v171[0]];
                uint64_t v151 = getcwd((char *)buf, 0x400uLL);
                *(_DWORD *)uint64_t v190 = 136315394;
                uint64_t v191 = v150;
                __int16 v192 = 2080;
                int v193 = v151;
                _os_log_error_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "%s: open (2) in %s", v190, 0x16u);
              }
              *__error() = v137;
            }
            uint64_t v139 = *(void *)&v183[152 * *v171[0]];
            getcwd((char *)buf, 0x400uLL);
            sub_10001FBD8("%s: open (2) in %s", v140, v141, v142, v143, v144, v145, v146, v139);
            goto LABEL_205;
          }
          uint64_t v155 = 0;
          int v200 = v104;
        }
        int v10 = v153;
        uint64_t v11 = v154;
        goto LABEL_71;
      }
    }
  }
  if (sub_10001CF78((void *)a1, a2))
  {
    if (*(void *)(a1 + 136) || v161)
    {
      char revents = v196.revents;
      goto LABEL_93;
    }
    int v59 = sub_10001CDD8(a1, a2);
    if ((v59 & 0x80000000) == 0)
    {
      if (!v59)
      {
        char revents = v196.revents & 0xFE;
        v196.revents &= ~1u;
        goto LABEL_93;
      }
LABEL_108:
      BOOL v161 = 0;
      goto LABEL_71;
    }
    if (dword_100058FD8)
    {
      int v119 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_257;
      }
      goto LABEL_258;
    }
    goto LABEL_259;
  }
  if (dword_100058FD8)
  {
    int v117 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_100040018();
    }
    *__error() = v117;
  }
  sub_10001FC88("io_read_flush");
LABEL_205:
  uint64_t v106 = 0;
LABEL_206:
  sub_10002F0CC((uint64_t)v171);
  while (1)
  {
    uint64_t v107 = v179;
    if (!v179) {
      break;
    }
    uint64_t v108 = *(void *)(v179 + 56);
    uint64_t v109 = *(void **)(v179 + 64);
    if (v108)
    {
      *(void *)(v108 + 64) = v109;
      uint64_t v109 = *(void **)(v107 + 64);
    }
    else
    {
      int v180 = *(uint64_t **)(v179 + 64);
    }
    *uint64_t v109 = v108;
    free(*(void **)(v107 + 8));
    free((void *)v107);
  }
  sub_100012830(v183, v184);
  free(v169);
  sub_100002CC0(v176);
  sub_1000171CC(a1);
  return v106;
}

uint64_t sub_10002C950(void *a1, uint64_t a2, size_t a3)
{
  uint64_t v37 = 0;
  unsigned int v36 = 0;
  sub_10001EBE8(a2, &v37, a3, &v36);
  if (v37 != a3)
  {
    if (dword_100058FD8)
    {
      int v17 = *__error();
      uint64_t v18 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100041C6C(a3, v18, v19, v20, v21, v22, v23, v24);
      }
      *__error() = v17;
    }
    sub_10001FB50("bad success payload size %zu");
    return 0;
  }
  unsigned int v5 = v36;
  if ((v36 & 0x80000000) != 0 || (unsigned int v6 = (uint64_t *)a1[1], v6[1] <= (unint64_t)v36))
  {
    if (dword_100058FD8)
    {
      int v25 = *__error();
      uint64_t v26 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100041B2C((uint64_t)&v36, v26, v27, v28, v29, v30, v31, v32);
      }
      *__error() = v25;
    }
    sub_10001FB50("success idx %d out of range");
    return 0;
  }
  if (*(_DWORD *)(*(void *)*a1 + 204))
  {
    memset(&v35, 0, sizeof(v35));
    uint64_t v7 = *v6;
    uint64_t v8 = (const char **)(*v6 + 152 * v36);
    if (lstat(*v8, &v35) != -1)
    {
      if (v35.st_size == *(void *)(v7 + 152 * v5 + 40)
        && v35.st_mtimespec.tv_sec == *(void *)(v7 + 152 * v5 + 48))
      {
        if (unlink(*v8) == -1)
        {
          if (dword_100058FD8)
          {
            int v16 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100041B9C();
            }
            *__error() = v16;
          }
          sub_10001FBD8("%s: unlink", v9, v10, v11, v12, v13, v14, v15, (char)*v8);
        }
      }
      else
      {
        if (dword_100058FD8)
        {
          int v34 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041C04();
          }
          *__error() = v34;
        }
        sub_10001FB50("%s: not removed, size or mtime changed", *v8);
      }
    }
  }
  return 1;
}

uint64_t sub_10002CBDC(int *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, void **a6, void *a7)
{
  if (a3 == -1)
  {
    int v17 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B00408FA80C24uLL);
    if (!v17)
    {
      if (dword_100058FD8)
      {
        int v31 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B320();
        }
        *__error() = v31;
      }
      uint64_t v32 = "calloc";
      goto LABEL_30;
    }
    *(_DWORD *)int v17 = -1;
    v17[1] = 0;
    *((_DWORD *)v17 + 6) = 3;
    v17[7] = 0;
    int v25 = *(void **)(a2 + 8);
    v17[8] = v25;
    *int v25 = v17;
    *(void *)(a2 + 8) = v17 + 7;
    *a7 = 0;
    return 1;
  }
  if ((a3 & 0x80000000) != 0 || a3 >= a5)
  {
    if (dword_100058FD8)
    {
      int v27 = *__error();
      uint64_t v28 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100041E44(a3, a5, v28);
      }
      *__error() = v27;
    }
    sub_10001FB50("file index out of bounds: invalid %d out of %zu");
    return 0;
  }
  uint64_t v14 = (int *)(a4 + 152 * a3 + 116);
  if (a1[65] <= 28)
  {
    LOWORD(v15) = 0x8000;
    *uint64_t v14 = 0x8000;
LABEL_17:
    int v29 = *(_WORD *)(a4 + 152 * a3 + 24) & 0xF000;
    if (v29 == 40960)
    {
      if (dword_100058FD8)
      {
        int v36 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100041DDC();
        }
        *__error() = v36;
      }
      sub_10001FB50("blocks requested for symlink: %s");
      return 0;
    }
    if (v29 != 0x8000)
    {
      if (v29 == 0x4000)
      {
        if (dword_100058FD8)
        {
          int v30 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041D74();
          }
          *__error() = v30;
        }
        sub_10001FB50("blocks requested for directory: %s");
      }
      else
      {
        if (dword_100058FD8)
        {
          int v37 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041D0C();
          }
          *__error() = v37;
        }
        sub_10001FB50("blocks requested for special: %s");
      }
      return 0;
    }
    goto LABEL_32;
  }
  sub_10001F6C4(a6, (_DWORD *)(a4 + 152 * a3 + 116));
  int v15 = *v14;
  if (*v14 == 0x2000) {
    return 1;
  }
  if ((v15 & 0x8000) != 0) {
    goto LABEL_17;
  }
LABEL_32:
  if ((v15 & 0x1000) != 0)
  {
    uint64_t v33 = a4 + 152 * a3;
    free(*(void **)(v33 + 88));
    *(void *)(v33 + 88) = 0;
    if (!sub_10001EED0((uint64_t)a1, a6, 0x400uLL))
    {
      if (dword_100058FD8)
      {
        int v39 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000414CC();
        }
        *__error() = v39;
      }
      sub_10001FC88("iobuf_alloc");
      return 0;
    }
  }
  int v34 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B00408FA80C24uLL);
  if (v34)
  {
    *(_DWORD *)int v34 = a3;
    v34[1] = 0;
    if (*(_DWORD *)(*(void *)a1 + 36) == 2) {
      int v35 = 3;
    }
    else {
      int v35 = 0;
    }
    if (a1[65] > 28) {
      int v35 = 1;
    }
    *((_DWORD *)v34 + 6) = v35;
    *a7 = v34;
    return 1;
  }
  if (dword_100058FD8)
  {
    int v38 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_100041CD8();
    }
    *__error() = v38;
  }
  uint64_t v32 = "callloc";
LABEL_30:
  sub_10001FBD8(v32, v18, v19, v20, v21, v22, v23, v24, v40);
  return 0;
}

uint64_t sub_10002D00C(void *a1, uint64_t a2, int *a3)
{
  int v6 = *a3;
  uint64_t v7 = a2 + 152 * *a3;
  int v10 = *(_DWORD *)(v7 + 116);
  uint64_t v9 = (unsigned int *)(v7 + 116);
  LOWORD(v8) = v10;
  if ((v10 & 0x800) != 0)
  {
    unsigned __int8 v13 = 0;
    uint64_t result = sub_10001EF94((uint64_t)a1);
    if (!result) {
      return result;
    }
    sub_10001F590(a1, &v13);
    *(_DWORD *)(a2 + 152 * v6 + 120) = v13;
    unsigned int v8 = *v9;
    if ((*v9 & 0x1000) != 0)
    {
      unsigned int v8 = v8 & 0xFFFBF7FF | 0x40000;
      unsigned int *v9 = v8;
    }
  }
  if ((v8 & 0x1000) != 0)
  {
    uint64_t v12 = (char **)(a3 + 8);
    uint64_t result = sub_10001F774(a1, v12);
    if ((int)result < 1) {
      return result;
    }
    *(void *)(a2 + 152 * v6 + 88) = *v12;
    if ((*v9 & 0x40000) != 0) {
      unsigned int *v9 = *v9 & 0xFFFBF7FF | 0x800;
    }
  }
  return 1;
}

uint64_t sub_10002D0E4(uint64_t a1, void *a2, int **a3, uint64_t *a4, size_t *a5, size_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v100 = 0;
  int v10 = a5;
  switch(*((_DWORD *)a3 + 15))
  {
    case 0:
      int v49 = **a3;
      if (v49 < 0)
      {
        if (sub_10001E550(a1, (void **)a4, a5, a6, 4))
        {
          sub_10001E634((_DWORD *)a1, *a4, &v100, *v10, -1);
          int v25 = 6;
          goto LABEL_127;
        }
        if (!dword_100058FD8) {
          goto LABEL_150;
        }
        int v55 = *__error();
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_149;
        }
        goto LABEL_81;
      }
      uint64_t v50 = *(void *)a1;
      if (*(_DWORD *)(*(void *)a1 + 36))
      {
        if (*(_DWORD *)(v50 + 4))
        {
          int v51 = **a3;
        }
        else
        {
          if (dword_100058FD8)
          {
            int v66 = *__error();
            uint64_t v67 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v68 = *(void *)(a7 + 152 * **a3 + 16);
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = v68;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
            }
            *__error() = v66;
            int v49 = **a3;
          }
          sub_10001FA38(0, "%s", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(void *)(a7 + 152 * v49 + 16));
          int v51 = **a3;
        }
        sub_10002AF50((_DWORD *)a1, a4, v10, a6, &v100, a7, v51);
        goto LABEL_126;
      }
      if (*((_DWORD *)a3 + 14) == -1) {
        sub_1000420DC();
      }
      if (*(_DWORD *)(v50 + 4))
      {
        int v56 = **a3;
      }
      else
      {
        if (dword_100058FD8)
        {
          int v71 = *__error();
          uint64_t v72 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v73 = *(void *)(a7 + 152 * **a3 + 16);
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v73;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v71;
          int v49 = **a3;
        }
        sub_10001FA38(0, "%s", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(void *)(a7 + 152 * v49 + 16));
        int v56 = **a3;
      }
      sub_10002AF50((_DWORD *)a1, a4, v10, a6, &v100, a7, v56);
      if (sub_10001E550(a1, (void **)a4, v10, a6, 16))
      {
        sub_100003580((uint64_t)&buf, *((int **)*a3 + 1));
        sub_10001E2A4((_DWORD *)a1, *a4, &v100, *v10, &buf, 0x10uLL);
        if (dword_100058FD8)
        {
          int v80 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_100042108();
          }
          *__error() = v80;
        }
        sub_10001FA38(2, "%s: primed for %jd B total", v74, v75, v76, v77, v78, v79, *(void *)(a7 + 152 * **a3));
        *((_DWORD *)a3 + 15) = 1;
        return 1;
      }
      if (!dword_100058FD8) {
        goto LABEL_150;
      }
      int v55 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_149;
      }
      goto LABEL_148;
    case 1:
      if (*((_DWORD *)a3 + 14) == -1) {
        sub_1000420B0();
      }
      int v14 = sub_100002D04(a1, *((uint64_t **)*a3 + 1), *(const char **)(a7 + 152 * **a3), (uint64_t)(a3 + 1), (uint64_t)a5, (uint64_t)a6, a7, a8);
      uint64_t v15 = 1;
      if (v14) {
        return v15;
      }
      ++*(void *)(a1 + 240);
      goto LABEL_23;
    case 2:
      uint64_t v16 = (uint64_t)a3[8];
      if ((unint64_t)a3[6] - v16 >= 0x8000) {
        uint64_t v17 = 0x8000;
      }
      else {
        uint64_t v17 = (uint64_t)a3[6] - v16;
      }
      uint64_t v18 = sub_100010F34(a3[5], v16);
      uint64_t v19 = malloc_type_malloc(0x4001uLL, 0xDE8FE597uLL);
      if (!v19)
      {
        if (dword_100058FD8)
        {
          int v52 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_118:
          }
            sub_10003CD90();
LABEL_119:
          *__error() = v52;
        }
LABEL_120:
        sub_10001FC88("malloc");
        return 0;
      }
      uint64_t v20 = v19;
      uint64_t v94 = v19;
      if (!sub_10002F148(a1))
      {
        if (dword_100058FD8)
        {
          int v53 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041EF8();
          }
          *__error() = v53;
        }
        sub_10001FC88("decompress_reinit");
        goto LABEL_77;
      }
      uint64_t v96 = v17;
      if (qword_100058F00) {
        BOOL v21 = qword_100058F08 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21) {
        sub_100041F2C();
      }
      if (qword_100058F00) {
        qword_100058F08 = qword_100058F00;
      }
      if (sigsetjmp(dword_100058F10, 0) >= 1)
      {
        qword_100058F00 = qword_100058F08;
        qword_100058F08 = 0;
        if (dword_100058FD8)
        {
          int v22 = *__error();
          uint64_t v23 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v24 = *(void *)(a7 + 152 * **a3);
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s: file truncated while reading", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v22;
        }
        sub_10001FDC8("%s: file truncated while reading", *(const char **)(a7 + 152 * **a3));
        ++*(void *)(a1 + 240);
LABEL_23:
        *((unsigned char *)a3 + 104) = 1;
        if (*(_DWORD *)(*(void *)a1 + 552)) {
          goto LABEL_24;
        }
        *((_DWORD *)a3 + 20) = 0;
        int v25 = 3;
        goto LABEL_127;
      }
      qword_100058F00 = (uint64_t)a3[5];
      if (dword_100058E88 != 3) {
        sub_100041FC4();
      }
      qword_100058E90 = (uint64_t)v18;
      dword_100058E98 = v17;
      uint64_t v61 = (uint64_t)(v20 + 2);
      break;
    case 3:
      int v26 = *((_DWORD *)a3 + 20);
      if (v26) {
        int v27 = 1;
      }
      else {
        int v27 = 7;
      }
      *((_DWORD *)a3 + 15) = v27;
      if (!v26) {
        return 1;
      }
      if (!sub_10001E550(a1, (void **)a4, a5, a6, 1))
      {
        if (!dword_100058FD8) {
          goto LABEL_150;
        }
        int v55 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_81:
        }
          sub_100041430();
        goto LABEL_149;
      }
      sub_10001E660((_DWORD *)a1, *a4, &v100, *v10, 32);
      if (sub_10001E550(a1, (void **)a4, v10, a6, 4))
      {
        sub_10001E634((_DWORD *)a1, *a4, &v100, *v10, ~*((_DWORD *)a3 + 20));
        sub_10002F24C((void *)a1, a3, ~*((_DWORD *)a3 + 20), a7);
        return 1;
      }
      if (dword_100058FD8)
      {
        int v55 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_148:
        }
          sub_100041430();
        goto LABEL_149;
      }
      goto LABEL_150;
    case 4:
      if (*((unsigned char *)a3 + 104)) {
        goto LABEL_123;
      }
      if (qword_100058F00) {
        BOOL v28 = qword_100058F08 == 0;
      }
      else {
        BOOL v28 = 1;
      }
      if (!v28) {
        sub_100041FF0();
      }
      if (qword_100058F00) {
        qword_100058F08 = qword_100058F00;
      }
      if (sigsetjmp(dword_100058F10, 0) < 1)
      {
        uint64_t v69 = a3[5];
        qword_100058F00 = (uint64_t)v69;
        if (!*((unsigned char *)a3 + 104))
        {
          int v70 = (char *)sub_100010F34(v69, 0);
          sub_10001C05C(v70, (unint64_t)a3[6], (unsigned __int8 *)&buf, a1);
          if (!*((unsigned char *)a3 + 104))
          {
            if ((int *)qword_100058F00 != a3[5]) {
              sub_10003B4B0();
            }
            qword_100058F00 = qword_100058F08;
            qword_100058F08 = 0;
LABEL_124:
            if (!sub_10001E550(a1, (void **)a4, v10, a6, 16))
            {
              if (dword_100058FD8)
              {
                int v55 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100041430();
                }
LABEL_149:
                *__error() = v55;
              }
LABEL_150:
              sub_10001FC88("io_lowbuffer_alloc");
              return 0;
            }
            sub_10001E2A4((_DWORD *)a1, *a4, &v100, *v10, &buf, 0x10uLL);
LABEL_126:
            int v25 = 5;
LABEL_127:
            *((_DWORD *)a3 + 15) = v25;
            return 1;
          }
        }
      }
      else
      {
        qword_100058F00 = qword_100058F08;
        qword_100058F08 = 0;
        if (dword_100058FD8)
        {
          int v29 = *__error();
          int v30 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = *(void *)(a7 + 152 * **a3);
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s: file truncated while hashing", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v29;
        }
        sub_10001FDC8("%s: file truncated while hashing", *(const char **)(a7 + 152 * **a3));
        ++*(void *)(a1 + 240);
        *((unsigned char *)a3 + 104) = 1;
      }
LABEL_123:
      *((void *)&buf + 1) = 0;
      *(void *)((char *)&buf + 1) = 0;
      LOBYTE(buf) = 1;
      goto LABEL_124;
    case 5:
      if (!*(_DWORD *)(*(void *)a1 + 36))
      {
        if (dword_100058FD8)
        {
          int v32 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_100042048((uint64_t)a3);
          }
          *__error() = v32;
        }
        sub_10001FA38(2, "%s: flushed %jd KB total, %.2f%% uploaded", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(void *)(a7 + 152 * **a3));
      }
      sub_10002F0CC((uint64_t)a3);
      return 1;
    case 6:
      dword_100058E88 = 4;
      sub_10002F0CC((uint64_t)a3);
      ++*a2;
      **(_DWORD **)(a1 + 200) = 0;
      return 1;
    case 7:
      if (*((unsigned char *)a3 + 104)) {
        goto LABEL_93;
      }
      int v34 = (char *)malloc_type_malloc(0x4001uLL, 0x4DB81656uLL);
      if (v34)
      {
        __srCC_MD4_CTX c = v34;
        uint64_t v99 = v10;
        dword_100058E98 = 0;
        qword_100058E90 = 0;
        int v35 = v34 + 2;
        uint64_t v95 = v34 + 16381;
        int v36 = v34 + 6;
        int v37 = 0x3FFF;
        for (uint64_t i = (uint64_t)(v34 + 2); ; uint64_t i = (uint64_t)v36)
        {
          qword_100058EA8 = i;
          dword_100058EB0 = v37;
          int v39 = sub_100020FB0((uint64_t)&qword_100058E90, 2);
          if (v39) {
            break;
          }
          uint64_t v46 = (0x3FFF - dword_100058EB0);
          if (v46 <= 3) {
            sub_10004201C();
          }
          __int16 v47 = 16379 - dword_100058EB0;
          if (v46 != 4)
          {
            size_t v48 = v46 - 2;
            if (!sub_10001E550(a1, (void **)a4, v99, a6, v46 - 2))
            {
              if (dword_100058FD8)
              {
                int v82 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100041430();
                }
                *__error() = v82;
              }
              sub_10001FB50("io_lowbuffer_alloc");
              uint64_t v54 = __src;
              goto LABEL_78;
            }
            *__srCC_MD4_CTX c = HIBYTE(v47) + 64;
            __src[1] = v47;
            sub_10001E2A4((_DWORD *)a1, *a4, &v100, *v99, __src, v48);
          }
          qword_100058EA8 = (uint64_t)v35;
          dword_100058EB0 = 0x3FFF;
          _DWORD *v35 = *v95;
          int v37 = 16379;
        }
        int v57 = v39;
        if (v39 != -5)
        {
          if (dword_100058FD8)
          {
            int v58 = *__error();
            int v59 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v57;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "final deflate() res=%d", (uint8_t *)&buf, 8u);
            }
            *__error() = v58;
          }
          sub_10001FA38(1, "final deflate() res=%d", v40, v41, v42, v43, v44, v45, v57);
        }
        free(__src);
        int v10 = v99;
LABEL_93:
        if (sub_10001E550(a1, (void **)a4, v10, a6, 1))
        {
          sub_10001E660((_DWORD *)a1, *a4, &v100, *v10, 0);
          dword_100058E88 = 4;
          *((_DWORD *)a3 + 15) = 4;
          return 1;
        }
        if (dword_100058FD8)
        {
          int v60 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041430();
          }
          *__error() = v60;
        }
        sub_10001FB50("io_lowbuffer_alloc");
        return 0;
      }
      if (!dword_100058FD8) {
        goto LABEL_120;
      }
      int v52 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_119;
      }
      goto LABEL_118;
    default:
      sub_100041ECC();
  }
  while (1)
  {
    qword_100058EA8 = v61;
    dword_100058EB0 = 0x3FFF;
    uint64_t v62 = sub_100020FB0((uint64_t)&qword_100058E90, 0);
    if (v62)
    {
      uint64_t v83 = v62;
      sub_10000F55C((uint64_t)a3[5]);
      if (v83 != -5)
      {
        if (dword_100058FD8)
        {
          int v86 = *__error();
          double v87 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041F58(v83, v87, v88, v89, v90, v91, v92, v93);
          }
          *__error() = v86;
        }
        sub_10001FB50("deflate res=%d");
        goto LABEL_77;
      }
LABEL_159:
      free(v94);
      ssize_t v84 = (int *)((char *)a3[8] + v96);
      a3[8] = v84;
      if (v84 == a3[6])
      {
LABEL_24:
        int v25 = 7;
        goto LABEL_127;
      }
      return 1;
    }
    if (dword_100058EB0 == 0x3FFF) {
      goto LABEL_109;
    }
    uint64_t v63 = v10;
    __int16 v64 = 0x3FFF - dword_100058EB0;
    uint64_t v65 = (0x3FFF - dword_100058EB0) + 2;
    if (!sub_10001E550(a1, (void **)a4, v63, a6, v65)) {
      break;
    }
    *uint64_t v94 = HIBYTE(v64) + 64;
    v94[1] = v64;
    sub_10001E2A4((_DWORD *)a1, *a4, &v100, *v63, v94, v65);
    int v10 = v63;
    if (dword_100058EB0)
    {
LABEL_109:
      sub_10000F55C((uint64_t)a3[5]);
      goto LABEL_159;
    }
  }
  sub_10000F55C((uint64_t)a3[5]);
  if (dword_100058FD8)
  {
    int v85 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_100041430();
    }
    *__error() = v85;
  }
  sub_10001FB50("io_lowbuffer_alloc");
LABEL_77:
  uint64_t v54 = v94;
LABEL_78:
  free(v54);
  return 0;
}

uint64_t sub_10002E17C(uint64_t a1, void *a2, int **a3, uint64_t *a4, size_t *a5, size_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = 0;
  switch(*((_DWORD *)a3 + 15))
  {
    case 0:
      unsigned int v33 = **a3;
      if ((v33 & 0x80000000) != 0)
      {
        if (sub_10001E550(a1, (void **)a4, a5, a6, 4))
        {
          sub_10001E634((_DWORD *)a1, *a4, &v60, *a5, -1);
          int v25 = 6;
          goto LABEL_108;
        }
        if (!dword_100058FD8) {
          goto LABEL_114;
        }
        int v37 = *__error();
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_113;
        }
        goto LABEL_100;
      }
      int v34 = **a3;
      uint64_t v35 = *(void *)a1;
      if (*(_DWORD *)(*(void *)a1 + 36) == 2)
      {
        if (*(_DWORD *)(v35 + 4))
        {
          int v36 = **a3;
        }
        else
        {
          if (dword_100058FD8)
          {
            int v54 = *__error();
            int v55 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v56 = *(void *)(a7 + 152 * **a3 + 16);
              LODWORD(buf[0]) = 136315138;
              *(void *)((char *)buf + 4) = v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
            }
            *__error() = v54;
            int v34 = **a3;
          }
          sub_10001FA38(0, "%s", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(void *)(a7 + 152 * v34 + 16));
          int v36 = **a3;
        }
        sub_10002AF50((_DWORD *)a1, a4, a5, a6, &v60, a7, v36);
        goto LABEL_107;
      }
      if (*((_DWORD *)a3 + 14) == -1) {
        sub_100042254();
      }
      if (*(_DWORD *)(v35 + 4)) {
        BOOL v38 = 1;
      }
      else {
        BOOL v38 = dword_100058FDC < 1;
      }
      if (v38 || *(_DWORD *)(a1 + 164))
      {
        int v39 = **a3;
      }
      else
      {
        int v39 = **a3;
        if (!*(_DWORD *)(a1 + 160))
        {
          sub_10001FF18(a1, "%s\n", *(unsigned char **)(a7 + 152 * v33 + 16));
          int v39 = **a3;
        }
      }
      sub_10002AF50((_DWORD *)a1, a4, a5, a6, &v60, a7, v39);
      if (sub_10001E550(a1, (void **)a4, a5, a6, 16))
      {
        sub_100003580((uint64_t)buf, *((int **)*a3 + 1));
        sub_10001E2A4((_DWORD *)a1, *a4, &v60, *a5, buf, 0x10uLL);
        if (dword_100058FD8)
        {
          int v46 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_100042108();
          }
          *__error() = v46;
        }
        sub_10001FA38(2, "%s: primed for %jd B total", v40, v41, v42, v43, v44, v45, *(void *)(a7 + 152 * **a3));
        *((_DWORD *)a3 + 15) = 1;
        return 1;
      }
      if (!dword_100058FD8) {
        goto LABEL_114;
      }
      int v37 = *__error();
      if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_113;
      }
      goto LABEL_112;
    case 1:
      if (*((_DWORD *)a3 + 14) == -1) {
        sub_100042228();
      }
      int v14 = sub_100002D04(a1, *((uint64_t **)*a3 + 1), *(const char **)(a7 + 152 * **a3), (uint64_t)(a3 + 1), (uint64_t)a5, (uint64_t)a6, a7, a8);
      uint64_t v15 = 1;
      if (v14) {
        return v15;
      }
      ++*(void *)(a1 + 240);
      goto LABEL_30;
    case 2:
      if ((char *)a3[9] - (char *)a3[8] >= 0x8000) {
        size_t v16 = 0x8000;
      }
      else {
        size_t v16 = (char *)a3[9] - (char *)a3[8];
      }
      if (sub_10001E550(a1, (void **)a4, a5, a6, 4))
      {
        size_t v17 = v16;
        sub_10001E634((_DWORD *)a1, *a4, &v60, *a5, v16);
        if (sub_10001E550(a1, (void **)a4, a5, a6, v16))
        {
          if (qword_100058F00) {
            BOOL v18 = qword_100058F08 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (!v18) {
            sub_1000421A4();
          }
          if (qword_100058F00) {
            qword_100058F08 = qword_100058F00;
          }
          uint64_t v59 = v60;
          if (sigsetjmp(dword_100058F10, 0) < 1)
          {
            qword_100058F00 = (uint64_t)a3[5];
            uint64_t v47 = *a4;
            size_t v48 = *a5;
            int v49 = sub_100010F34((void *)qword_100058F00, (uint64_t)a3[8]);
            sub_10001E2A4((_DWORD *)a1, v47, &v60, v48, v49, v16);
            sub_10000F55C((uint64_t)a3[5]);
            uint64_t v50 = a3[9];
            int v51 = (int *)((char *)a3[8] + v16);
            a3[8] = v51;
            if (v51 != v50) {
              return 1;
            }
          }
          else
          {
            qword_100058F00 = qword_100058F08;
            qword_100058F08 = 0;
            if (dword_100058FD8)
            {
              int v19 = *__error();
              uint64_t v20 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
              {
                uint64_t v21 = *(void *)(a7 + 152 * **a3);
                LODWORD(buf[0]) = 136315138;
                *(void *)((char *)buf + 4) = v21;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s: file truncated while reading", (uint8_t *)buf, 0xCu);
              }
              *__error() = v19;
            }
            sub_10001FDC8("%s: file truncated while reading", *(const char **)(a7 + 152 * **a3));
            ++*(void *)(a1 + 240);
            uint64_t v61 = v59;
            bzero(buf, 0x400uLL);
            if (v17)
            {
              char v22 = 0;
              unint64_t v23 = v17;
              while ((v22 & 1) == 0 || sub_10001E550(a1, (void **)a4, a5, a6, 0))
              {
                if (v23 >= 0x400) {
                  size_t v24 = 1024;
                }
                else {
                  size_t v24 = v23;
                }
                sub_10001E2A4((_DWORD *)a1, *a4, &v61, *a5, buf, v24);
                char v22 = 1;
                v23 -= v24;
                if (!v23) {
                  goto LABEL_30;
                }
              }
              if (dword_100058FD8)
              {
                int v58 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100041430();
                }
                *__error() = v58;
              }
              sub_10001FB50("io_lowbuffer_alloc");
              return 0;
            }
LABEL_30:
            *((unsigned char *)a3 + 104) = 1;
            if (*(_DWORD *)(*(void *)a1 + 552))
            {
              int v25 = 7;
              goto LABEL_108;
            }
            *((_DWORD *)a3 + 20) = 0;
          }
          int v25 = 3;
          goto LABEL_108;
        }
        if (!dword_100058FD8) {
          goto LABEL_114;
        }
        int v37 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_112:
        }
          sub_100041430();
      }
      else
      {
        if (!dword_100058FD8) {
          goto LABEL_114;
        }
        int v37 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_100:
        }
          sub_100041430();
      }
      goto LABEL_113;
    case 3:
      if (sub_10001E550(a1, (void **)a4, a5, a6, 4))
      {
        sub_10001E634((_DWORD *)a1, *a4, &v60, *a5, *((_DWORD *)a3 + 20));
        if (*((_DWORD *)a3 + 20)) {
          int v25 = 1;
        }
        else {
          int v25 = 4;
        }
        goto LABEL_108;
      }
      if (!dword_100058FD8) {
        goto LABEL_114;
      }
      int v37 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_100;
      }
      goto LABEL_113;
    case 4:
      if (*((unsigned char *)a3 + 104)) {
        goto LABEL_92;
      }
      if (qword_100058F00) {
        BOOL v26 = qword_100058F08 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26) {
        sub_1000421D0();
      }
      if (qword_100058F00) {
        qword_100058F08 = qword_100058F00;
      }
      if (sigsetjmp(dword_100058F10, 0) >= 1)
      {
        qword_100058F00 = qword_100058F08;
        qword_100058F08 = 0;
        if (dword_100058FD8)
        {
          int v27 = *__error();
          BOOL v28 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v29 = *(void *)(a7 + 152 * **a3);
            LODWORD(buf[0]) = 136315138;
            *(void *)((char *)buf + 4) = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s: file truncated while hashing", (uint8_t *)buf, 0xCu);
          }
          *__error() = v27;
        }
        sub_10001FDC8("%s: file truncated while hashing", *(const char **)(a7 + 152 * **a3));
        ++*(void *)(a1 + 240);
        *((unsigned char *)a3 + 104) = 1;
        goto LABEL_92;
      }
      int v52 = a3[5];
      qword_100058F00 = (uint64_t)v52;
      if (*((unsigned char *)a3 + 104)
        || (int v53 = (char *)sub_100010F34(v52, 0),
            sub_10001C05C(v53, (unint64_t)a3[6], (unsigned __int8 *)buf, a1),
            *((unsigned char *)a3 + 104)))
      {
LABEL_92:
        *((void *)&buf[0] + 1) = 0;
        *(void *)((char *)buf + 1) = 0;
        LOBYTE(buf[0]) = 1;
        goto LABEL_93;
      }
      if ((int *)qword_100058F00 != a3[5]) {
        sub_10003B4B0();
      }
      qword_100058F00 = qword_100058F08;
      qword_100058F08 = 0;
LABEL_93:
      if (!sub_10001E550(a1, (void **)a4, a5, a6, 16))
      {
        if (dword_100058FD8)
        {
          int v37 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041430();
          }
LABEL_113:
          *__error() = v37;
        }
LABEL_114:
        sub_10001FC88("io_lowbuffer_alloc");
        return 0;
      }
      sub_10001E2A4((_DWORD *)a1, *a4, &v60, *a5, buf, 0x10uLL);
LABEL_107:
      int v25 = 5;
LABEL_108:
      *((_DWORD *)a3 + 15) = v25;
      return 1;
    case 5:
      if (*(_DWORD *)(*(void *)a1 + 36) != 2)
      {
        if (dword_100058FD8)
        {
          int v30 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_100042048((uint64_t)a3);
          }
          *__error() = v30;
        }
        sub_10001FA38(2, "%s: flushed %jd KB total, %.2f%% uploaded", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(void *)(a7 + 152 * **a3));
      }
      uint64_t v31 = *(void *)(a1 + 80);
      ++*(void *)(a1 + 72);
      *(void *)(a1 + 80) = v31 + *(void *)(a7 + 152 * **a3 + 40);
      sub_10002F0CC((uint64_t)a3);
      return 1;
    case 6:
      sub_10002F0CC((uint64_t)a3);
      ++*a2;
      **(_DWORD **)(a1 + 200) = 0;
      return 1;
    case 7:
      sub_1000421FC();
    default:
      sub_100042178();
  }
}

uint64_t sub_10002ED68(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  int v25 = 0;
  if (*(int *)(a1 + 260) <= 28)
  {
    do
    {
      if ((unint64_t)sub_10001EF94((uint64_t)a3) > 3)
      {
        sub_10001F604(a3, &v25);
        goto LABEL_37;
      }
    }
    while (sub_10001EF9C(a1, a3, a4));
    if (dword_100058FD8)
    {
      int v13 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042338();
      }
      *__error() = v13;
    }
    sub_10001FC88("iobuf_fill on final goodbye");
    return 2;
  }
  int v10 = 0;
  int v24 = 0;
  for (unint64_t i = 4; ; unint64_t i = 4)
  {
    while (1)
    {
      do
      {
        if (sub_10001EF94((uint64_t)a3) >= i) {
          goto LABEL_10;
        }
      }
      while (sub_10001EF9C(a1, a3, a4));
      if (dword_100058FD8)
      {
        int v12 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004230C(&v22, v23);
        }
        *__error() = v12;
      }
      sub_10001FC88("iobuf_fill on final goodbye");
LABEL_10:
      if (v10 == 1) {
        break;
      }
      sub_10001F604(a3, &v25);
      if (*(void *)(a2 + 8) != v25) {
        goto LABEL_37;
      }
      int v10 = 1;
      unint64_t i = 2;
    }
    sub_10001F6C4(a3, &v24);
    if (v24 != 0x2000) {
      goto LABEL_37;
    }
    if (!sub_10001E174(a1, a5, *(_DWORD *)(a2 + 8)))
    {
      if (!dword_100058FD8)
      {
        sub_10001FC88("io_write_int");
        goto LABEL_37;
      }
      int v14 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000422B4(&v20, v21);
      }
      uint64_t v15 = "io_write_int";
      goto LABEL_33;
    }
    if (!sub_10001E220(a1, a5, 0x2000)) {
      break;
    }
    int v10 = 0;
  }
  if (dword_100058FD8)
  {
    int v14 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_1000422E0(&v18, v19);
    }
    uint64_t v15 = "io_write_short";
LABEL_33:
    *__error() = v14;
    goto LABEL_36;
  }
  uint64_t v15 = "io_write_short";
LABEL_36:
  sub_10001FC88(v15);
LABEL_37:
  if (v25 != -1)
  {
    if (dword_100058FD8)
    {
      int v16 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042280();
      }
      *__error() = v16;
    }
    sub_10001FB50("read incorrect update complete ack");
    return 2;
  }
  return 0;
}

double sub_10002F0CC(uint64_t a1)
{
  if (!a1) {
    sub_10004236C();
  }
  if (*(void *)a1)
  {
    free(*(void **)(*(void *)a1 + 8));
    free(*(void **)a1);
    *(void *)a1 = 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    sub_100010F50(v2);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3 != -1) {
    close(v3);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 104) = 0;
  return result;
}

uint64_t sub_10002F148(uint64_t a1)
{
  if (dword_100058E88)
  {
    if (dword_100058E88 < 4) {
      return 1;
    }
    qword_100058E90 = 0;
    dword_100058E98 = 0;
    qword_100058EA8 = 0;
    dword_100058EB0 = 0;
    sub_100020E74((uint64_t)&qword_100058E90);
LABEL_10:
    dword_100058E88 = 3;
    return 1;
  }
  qword_100058E90 = 0;
  dword_100058E98 = 0;
  qword_100058EA8 = 0;
  dword_100058EB0 = 0;
  qword_100058ED0 = 0;
  unk_100058ED8 = 0;
  sub_100020B00(&qword_100058E90, *(_DWORD *)(*(void *)a1 + 556), 8, -15, 8, 0, "1.2.3", 112);
  if (!v1) {
    goto LABEL_10;
  }
  if (dword_100058FD8)
  {
    int v2 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_100042398();
    }
    *__error() = v2;
  }
  sub_10001FB50("deflateInit2");
  return 0;
}

void sub_10002F24C(void *a1, int **a2, unint64_t a3, uint64_t a4)
{
  int v6 = (void *)*((void *)*a2 + 1);
  unint64_t v7 = v6[5];
  if (v7 <= a3)
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000424BC();
      }
      *__error() = v19;
      uint64_t v20 = *(void *)(*((void *)*a2 + 1) + 40);
    }
    else
    {
      uint64_t v20 = v6[5];
    }
    sub_10001FB50("token not in block set: %zu (have %zu blocks)", a3, v20);
  }
  else
  {
    if (v7 - 1 != a3 || (unint64_t v10 = v6[1]) == 0)
    {
      unint64_t v10 = v6[2];
      if (!v10) {
        sub_1000423CC();
      }
    }
    uint64_t v11 = a2[5];
    if (!v11) {
      sub_1000423F8();
    }
    int v12 = sub_100010F34(v11, v6[2] * a3);
    int v13 = malloc_type_malloc(0x8030uLL, 0xBEB64694uLL);
    if (v13)
    {
      int v14 = v13;
      if (sub_10002F148((uint64_t)a1))
      {
        dword_100058E98 = 0;
        if (qword_100058F00 && qword_100058F08) {
          sub_100042424();
        }
        if (qword_100058F00) {
          qword_100058F08 = qword_100058F00;
        }
        if (sigsetjmp(dword_100058F10, 0) <= 0)
        {
          uint64_t v23 = (uint64_t)v12;
          qword_100058F00 = (uint64_t)a2[5];
          while (1)
          {
            uint64_t v24 = v10 >= 0x8000 ? 0x8000 : v10;
            qword_100058E90 = v23;
            dword_100058E98 = v24;
            qword_100058EA8 = (uint64_t)v14;
            dword_100058EB0 = 0x3FFF;
            uint64_t v25 = sub_100020FB0((uint64_t)&qword_100058E90, 6);
            if (v25 | dword_100058E98) {
              break;
            }
            v23 += v24;
            v10 -= v24;
            if (!v10)
            {
              free(v14);
              if ((int *)qword_100058F00 != a2[5]) {
                sub_10003B4B0();
              }
              qword_100058F00 = qword_100058F08;
              qword_100058F08 = 0;
              return;
            }
          }
          if ((int *)qword_100058F00 != a2[5]) {
            sub_10003B4B0();
          }
          uint64_t v26 = v25;
          qword_100058F00 = qword_100058F08;
          qword_100058F08 = 0;
          if (dword_100058FD8)
          {
            int v27 = *__error();
            BOOL v28 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100042450(v26, v28, v29, v30, v31, v32, v33, v34);
            }
            *__error() = v27;
          }
          sub_10001FB50("deflate ff res=%d", v26);
        }
        else
        {
          qword_100058F00 = qword_100058F08;
          qword_100058F08 = 0;
          if (dword_100058FD8)
          {
            int v15 = *__error();
            int v16 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              uint64_t v17 = *(void *)(a4 + 152 * **a2);
              *(_DWORD *)long long buf = 136315138;
              uint64_t v36 = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s: file truncated while reading", buf, 0xCu);
            }
            *__error() = v15;
          }
          sub_10001FDC8("%s: file truncated while reading", *(const char **)(a4 + 152 * **a2));
          ++a1[30];
          *((unsigned char *)a2 + 104) = 1;
          if (*(_DWORD *)(*a1 + 552))
          {
            int v18 = 7;
          }
          else
          {
            *((_DWORD *)a2 + 20) = 0;
            int v18 = 3;
          }
          *((_DWORD *)a2 + 15) = v18;
        }
      }
      else
      {
        if (dword_100058FD8)
        {
          int v22 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100041EF8();
          }
          *__error() = v22;
        }
        sub_10001FC88("decompress_reinit");
      }
      free(v14);
    }
    else
    {
      if (dword_100058FD8)
      {
        int v21 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003CD90();
        }
        *__error() = v21;
      }
      sub_10001FC88("malloc");
    }
  }
}

double sub_10002F70C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 8) = a2;
  return (double)*(uint64_t *)(a1 + 24) * 100.0;
}

double sub_10002F748(double a1)
{
  return a1 / (double)v1;
}

void sub_10002F770(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10002F794(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_10002F7C0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

uint64_t sub_10002F7E0(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  memset(&v59[1], 0, 112);
  long long v64 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  v59[0] = a2;
  LODWORD(v59[1]) = *a2 == 0;
  DWORD1(v64) = -1;
  sub_100030E38(a1, (uint64_t)v59);
  sub_100030C18((uint64_t)a1);
  if (!sub_100030158(0) || !sub_100030158(1))
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042544();
      }
      *__error() = v19;
    }
    sub_10001FC88("fcntl_nonblock");
    return 1;
  }
  HIDWORD(v68) = *(_DWORD *)(v59[0] + 8);
  LODWORD(v59[2]) = HIDWORD(v68);
  uint32_t v8 = a2[5];
  if (!v8) {
    uint32_t v8 = arc4random();
  }
  HIDWORD(v59[1]) = v8;
  if (!sub_10001E948(v59, 0, (char *)&v59[2] + 4))
  {
    if (dword_100058FD8)
    {
      int v20 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B82C();
      }
      *__error() = v20;
    }
    sub_10001FC88("io_read_int");
    return 1;
  }
  if (!sub_10001E174((uint64_t)v59, 1, v59[2]))
  {
    if (dword_100058FD8)
    {
      int v21 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_32:
    sub_10001FC88("io_write_int");
    return 1;
  }
  if (!sub_10001E174((uint64_t)v59, 1, SHIDWORD(v59[1])))
  {
    if (dword_100058FD8)
    {
      int v21 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_30:
      }
        sub_10003B7F8();
LABEL_31:
      *__error() = v21;
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  int v15 = HIDWORD(v59[2]);
  if (SHIDWORD(v59[2]) <= 26)
  {
    if (dword_100058FD8)
    {
      int v16 = *__error();
      uint64_t v17 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B860((int *)&v59[2] + 1, v17);
      }
      *__error() = v16;
      int v15 = HIDWORD(v59[2]);
    }
    sub_10001FB50("remote protocol %d is older than our minimum supported %d: exiting", v15, 27);
    return 2;
  }
  if (SHIDWORD(v59[2]) < SLODWORD(v59[2])) {
    HIDWORD(v68) = HIDWORD(v59[2]);
  }
  if (dword_100058FD8)
  {
    int v22 = *__error();
    uint64_t v23 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109888;
      LODWORD(v70) = HIDWORD(v59[2]);
      WORD2(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 6) = v59[2];
      WORD5(v70) = 1024;
      HIDWORD(v70) = HIDWORD(v68);
      __int16 v71 = 1024;
      int v72 = HIDWORD(v59[1]);
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "server detected client version %d, server version %d, negotiated protocol version %d, seed %d", buf, 0x1Au);
    }
    *__error() = v22;
    LOBYTE(v15) = BYTE4(v59[2]);
  }
  sub_10001FA38(1, "server detected client version %d, server version %d, negotiated protocol version %d, seed %d", v9, v10, v11, v12, v13, v14, v15);
  DWORD2(v61) = 1;
  int v30 = *(_DWORD *)(v59[0] + 512);
  if (v30 == -1) {
    sub_100042578();
  }
  if (dword_100058FD8)
  {
    int v31 = *__error();
    uint64_t v32 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      if (*(_DWORD *)(v59[0] + 512)) {
        uint64_t v33 = "disabled";
      }
      else {
        uint64_t v33 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&long long v70 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Delta transmission %s for this transfer", buf, 0xCu);
    }
    *__error() = v31;
    int v30 = *(_DWORD *)(v59[0] + 512);
  }
  if (v30) {
    uint64_t v34 = "disabled";
  }
  else {
    uint64_t v34 = "enabled";
  }
  sub_10001FA38(1, "Delta transmission %s for this transfer", v24, v25, v26, v27, v28, v29, (char)v34);
  if (*(void *)a4)
  {
    uint64_t v41 = 0;
    do
    {
      if (dword_100058FD8)
      {
        int v42 = *__error();
        uint64_t v43 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          uint64_t v44 = *(void *)(a4 + 8 * v41);
          *(_DWORD *)long long buf = 67109378;
          LODWORD(v70) = v41;
          WORD2(v70) = 2080;
          *(void *)((char *)&v70 + 6) = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "exec[%d] = %s", buf, 0x12u);
        }
        *__error() = v42;
      }
      sub_10001FA38(1, "exec[%d] = %s", v35, v36, v37, v38, v39, v40, v41);
      uint64_t v45 = a4 + 8 * v41++;
    }
    while (*(void *)(v45 + 8));
  }
  if (*(_DWORD *)v59[0])
  {
    if (dword_100058FD8)
    {
      int v46 = *__error();
      uint64_t v47 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "server starting sender", buf, 2u);
      }
      *__error() = v46;
    }
    sub_10001FA38(1, "server starting sender", v35, v36, v37, v38, v39, v40, v58);
    if (a3)
    {
      if (strcmp(*(const char **)a4, "."))
      {
        if (dword_100058FD8)
        {
          int v48 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      if (a3 == 1) {
        size_t v53 = 1;
      }
      else {
        size_t v53 = a3 - 1;
      }
      if (*(_DWORD *)(v59[0] + 204)) {
        DWORD2(v60) = 1;
      }
      if (!sub_10002B1D4((uint64_t)v59, 0, 1, v53, (const char **)(a4 + 8 * (a3 != 1))))
      {
        if (dword_100058FD8)
        {
          int v54 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B9AC();
          }
          *__error() = v54;
        }
        sub_10001FC88("rsync_sender");
        return 1;
      }
      goto LABEL_101;
    }
    if (dword_100058FD8)
    {
      int v52 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (dword_100058FD8)
  {
    int v49 = *__error();
    uint64_t v50 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "server starting receiver", buf, 2u);
    }
    *__error() = v49;
  }
  sub_10001FA38(1, "server starting receiver", v35, v36, v37, v38, v39, v40, v58);
  if (!a3)
  {
    if (dword_100058FD8)
    {
      int v52 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_94:
      }
        sub_1000425A4();
LABEL_95:
      *__error() = v52;
    }
LABEL_96:
    sub_10001FB50("must have arguments");
    return 1;
  }
  int v51 = *(char **)a4;
  if (strcmp(*(const char **)a4, "."))
  {
    if (dword_100058FD8)
    {
      int v48 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_75:
      }
        sub_10004266C();
LABEL_76:
      *__error() = v48;
    }
LABEL_77:
    sub_10001FB50("first argument must be a standalone period");
    return 1;
  }
  if (a3 != 1)
  {
    if (a3 != 2)
    {
      if (dword_100058FD8)
      {
        int v56 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000425D8();
        }
        *__error() = v56;
      }
      sub_10001FB50("server receiver mode requires two argument");
      return 1;
    }
    int v51 = *(char **)(a4 + 8);
  }
  if (!sub_1000276FC((uint64_t)v59, (uint64_t)a1, 0, 1, v51))
  {
    if (dword_100058FD8)
    {
      int v57 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003B918();
      }
      *__error() = v57;
    }
    sub_10001FC88("rsync_receiver");
    return 1;
  }
LABEL_101:
  if (sub_10001CDD8((uint64_t)v59, 0))
  {
    if (dword_100058FD8)
    {
      int v55 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042638();
      }
      *__error() = v55;
    }
    sub_10001FC88("data remains in read pipe");
    return 14;
  }
  else if (BYTE8(v68))
  {
    if ((uint64_t)v68 < *(void *)(v59[0] + 592)) {
      sub_10004260C();
    }
    return 25;
  }
  else if (*((void *)&v67 + 1))
  {
    return 23;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100030158(int a1)
{
  char v13 = 0;
  int v2 = fcntl(a1, 3);
  if (v2 == -1)
  {
    if (!dword_100058FD8)
    {
      uint64_t v12 = "fcntl: F_GETFL";
      goto LABEL_15;
    }
    int v11 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_1000426A0();
    }
    uint64_t v12 = "fcntl: F_GETFL";
  }
  else
  {
    char v13 = v2 | 4;
    if (fcntl(a1, 4) != -1) {
      return 1;
    }
    if (!dword_100058FD8)
    {
      uint64_t v12 = "fcntl: F_SETFL";
      goto LABEL_15;
    }
    int v11 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_1000426D4();
    }
    uint64_t v12 = "fcntl: F_SETFL";
  }
  *__error() = v11;
LABEL_15:
  sub_10001FBD8(v12, v3, v4, v5, v6, v7, v8, v9, v13);
  return 0;
}

uint64_t sub_100030278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  unint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  unint64_t v14 = *(void *)(a1 + 112);
  unint64_t v13 = *(void *)(a1 + 120);
  if (*(_DWORD *)(*(void *)a1 + 216)) {
    sub_1000304F0((void *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (dword_100058FDC > 0 || (uint64_t v15 = *(void *)a1, *(_DWORD *)(*(void *)a1 + 216)))
  {
    sub_100030710((unint64_t *)a1, v10, v12, v11, a5, a6, a7, a8);
    uint64_t v15 = *(void *)a1;
  }
  if (!*(_DWORD *)(v15 + 4)) {
    int v8 = *(_DWORD *)(a1 + 188);
  }
  if (v8 == -1) {
    return 1;
  }
  if (sub_10001DFEC(a1, v8, v10))
  {
    if (sub_10001DFEC(a1, v8, v12))
    {
      if (sub_10001DFEC(a1, v8, v11))
      {
        if (*(int *)(a1 + 260) < 29) {
          return 1;
        }
        if (sub_10001DFEC(a1, v8, v14))
        {
          if (sub_10001DFEC(a1, v8, v13)) {
            return 1;
          }
          if (dword_100058FD8)
          {
            int v17 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_30:
            }
              sub_100042708();
LABEL_31:
            *__error() = v17;
          }
        }
        else if (dword_100058FD8)
        {
          int v17 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_30;
          }
          goto LABEL_31;
        }
      }
      else if (dword_100058FD8)
      {
        int v17 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        goto LABEL_31;
      }
    }
    else if (dword_100058FD8)
    {
      int v17 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      goto LABEL_31;
    }
  }
  else if (dword_100058FD8)
  {
    int v17 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  sub_10001FC88("io_write_ulong");
  return 0;
}

void sub_1000304F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v72, 0, sizeof(v72));
  sub_10001FA38(-1, "Number of files: %llu", a3, a4, a5, a6, a7, a8, a1[8]);
  sub_10001FA38(-1, "Number of files transferred: %llu", v9, v10, v11, v12, v13, v14, a1[9]);
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "Total file size: %s", v15, v16, v17, v18, v19, v20, (char)v72);
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "Total transferred file size: %s", v21, v22, v23, v24, v25, v26, (char)v72);
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "Unmatched data: %s", v27, v28, v29, v30, v31, v32, (char)v72);
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "Matched data: %s", v33, v34, v35, v36, v37, v38, (char)v72);
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "File list size: %s", v39, v40, v41, v42, v43, v44, (char)v72);
  unint64_t v51 = a1[14];
  if (v51)
  {
    double v52 = (double)v51 / 1000.0;
    sub_10001FA38(-1, "File list generation time: %.3f seconds", v45, v46, v47, v48, v49, v50, SLOBYTE(v52));
    double v71 = (double)(unint64_t)a1[15] / 1000.0;
    sub_10001FA38(-1, "File list transfer time: %.3f seconds", v53, v54, v55, v56, v57, v58, SLOBYTE(v71));
  }
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "Total sent: %s", v59, v60, v61, v62, v63, v64, (char)v72);
  sub_1000209F0((uint64_t)a1, (char *)v72, 0x100uLL);
  sub_10001FA38(-1, "Total received: %s", v65, v66, v67, v68, v69, v70, (char)v72);
}

void sub_100030710(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_DWORD *)(*a1 + 4))
  {
    uint64_t v8 = a2;
    if (dword_100058FDC > 0 || *(_DWORD *)(*a1 + 216))
    {
      sub_1000209F0((uint64_t)a1, v28, 0x20uLL);
      sub_1000209F0((uint64_t)a1, v27, 0x20uLL);
      sub_1000209F0((uint64_t)a1, v26, 0x20uLL);
      sub_1000209F0((uint64_t)a1, v25, 0x20uLL);
      sub_100030B68(v28);
      sub_100030B68(v27);
      sub_100030B68(v26);
      sub_100030B68(v25);
      sub_10001FA38(-1, "\nsent %s bytes  received %s bytes  %s bytes/sec", v10, v11, v12, v13, v14, v15, (char)v27);
      sub_10001FA38(-1, "total size is %s  speedup is %.2lf", v16, v17, v18, v19, v20, v21, (char)v26);
    }
    if (dword_100058FD8)
    {
      int v22 = *__error();
      uint64_t v23 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
        sub_10004273C((uint64_t)a1, v23);
      }
      *__error() = v22;
    }
    double v24 = (double)a1[14] / 1000.0;
    sub_10001FA38(2, "File list generation time: %.3f seconds, transfer time: %.3f seconds", a3, v8, a5, a6, a7, a8, SLOBYTE(v24));
  }
}

uint64_t sub_100030914(uint64_t a1, int a2)
{
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (*(_DWORD *)(*(void *)a1 + 4)) {
    return 1;
  }
  if (!sub_10001E81C(a1, a2, &v20))
  {
    if (!dword_100058FD8) {
      goto LABEL_29;
    }
    int v16 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  if (!sub_10001E81C(a1, a2, &v21))
  {
    if (!dword_100058FD8) {
      goto LABEL_29;
    }
    int v16 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_15:
    }
      sub_1000427DC();
LABEL_28:
    *__error() = v16;
    goto LABEL_29;
  }
  if (sub_10001E81C(a1, a2, &v19))
  {
    if (*(int *)(a1 + 260) < 29)
    {
LABEL_9:
      if (dword_100058FDC > 0 || *(_DWORD *)(*(void *)a1 + 216))
      {
        sub_100030710((unint64_t *)a1, v21, v20, v19, v5, v6, v7, v8);
        if (*(_DWORD *)(*(void *)a1 + 216)) {
          sub_1000304F0((void *)a1, v9, v10, v11, v12, v13, v14, v15);
        }
      }
      return 1;
    }
    if (sub_10001E81C(a1, a2, &v18))
    {
      if (sub_10001E81C(a1, a2, &v17)) {
        goto LABEL_9;
      }
      if (dword_100058FD8)
      {
        int v16 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000427DC();
        }
        goto LABEL_28;
      }
    }
    else if (dword_100058FD8)
    {
      int v16 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000427DC();
      }
      goto LABEL_28;
    }
  }
  else if (dword_100058FD8)
  {
    int v16 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_1000427DC();
    }
    goto LABEL_28;
  }
LABEL_29:
  sub_10001FC88("io_read_ulong");
  return 0;
}

char *sub_100030B68(char *a1)
{
  double result = strchr(a1, 32);
  if (result)
  {
    int v2 = result[1];
    if (result[1])
    {
      if (v2 != 66) {
        *result++ = v2;
      }
      char *result = 0;
    }
  }
  return result;
}

uint64_t sub_100030BA8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  if (v1 < 0) {
    sub_100042810();
  }
  uint64_t v2 = result;
  *(_DWORD *)(result + 48) = v1 + 1;
  if (!v1)
  {
    sigset_t v3 = 1610629123;
    double result = sigprocmask(1, &v3, (sigset_t *)(result + 52));
    *(_DWORD *)(v2 + 52) &= 0x9FFFBFFC;
  }
  return result;
}

uint64_t sub_100030C18(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  if (v1 <= 0) {
    sub_10004283C();
  }
  int v2 = v1 - 1;
  *(_DWORD *)(result + 48) = v2;
  if (!v2)
  {
    return sigprocmask(3, (const sigset_t *)(result + 52), 0);
  }
  return result;
}

uint64_t sub_100030C6C(uint64_t a1)
{
  signal(30, (void (__cdecl *)(int))sub_100030CEC);
  signal(31, (void (__cdecl *)(int))sub_100030CEC);
  signal(1, (void (__cdecl *)(int))sub_100030CEC);
  signal(2, (void (__cdecl *)(int))sub_100030CEC);
  signal(15, (void (__cdecl *)(int))sub_100030CEC);

  return sub_100030BA8(a1);
}

uint64_t sub_100030CEC(int a1)
{
  if (a1 == 30)
  {
    int v2 = 19;
  }
  else
  {
    if (a1 == 31) {
      _exit(0);
    }
    int v2 = 20;
  }
  return sub_100030D30(v2, 1);
}

uint64_t sub_100030D30(int a1, int a2)
{
  uint64_t v4 = off_1000586D8;
  sub_100030BA8((uint64_t)off_1000586D8);
  signal(30, (void (__cdecl *)(int))1);
  int v5 = v4[11];
  v4[11] = v5 + 1;
  if (v4[9] == -1) {
    v4[9] = a1;
  }
  uint64_t v6 = (void (**)(void *))*((void *)v4 + 3);
  if (*v6)
  {
    do
    {
      *((void *)v4 + 3) = v6 + 1;
      sub_100030C18((uint64_t)v4);
      (*v6)(v4);
      sub_100030BA8((uint64_t)v4);
      uint64_t v6 = (void (**)(void *))*((void *)v4 + 3);
    }
    while (*v6);
    int v7 = v4[11] - 1;
  }
  else
  {
    int v7 = v5;
  }
  v4[11] = v7;
  if (v5 < 1)
  {
    int v9 = v4[9];
    if (a2) {
      _exit(v9);
    }
    exit(v9);
  }

  return sub_100030C18((uint64_t)v4);
}

uint64_t sub_100030E10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t sub_100030E18(uint64_t result, int a2)
{
  if (a2 < 0) {
    sub_100042868();
  }
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void *sub_100030E38(void *result, uint64_t a2)
{
  char *result = a2;
  return result;
}

uint64_t sub_100030E40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_100030E48(uint64_t result)
{
  pid_t v1 = *(_DWORD *)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    int v4 = 0;
    double result = waitpid(v1, &v4, 1);
    if ((int)result >= 1)
    {
      do
      {
        if (result == v1)
        {
          int v3 = BYTE1(v4);
          int v4 = v3;
          if (v3 > *(_DWORD *)(v2 + 36)) {
            *(_DWORD *)(v2 + 36) = v3;
          }
        }
        double result = waitpid(v1, &v4, 1);
      }
      while ((int)result > 0);
    }
  }
  return result;
}

uint64_t sub_100030ECC(uint64_t *a1)
{
  return sub_10000BC30(*a1, a1[1]);
}

uint64_t sub_100030ED8(uint64_t result)
{
  if (*(_DWORD *)(result + 36)) {
    return kill(0, 30);
  }
  return result;
}

uint64_t sub_100030EF0(const char *a1, const char *a2, char *a3, size_t a4)
{
  memset(&c, 0, sizeof(c));
  int data = 0;
  CC_MD4_Init(&c);
  CC_MD4_Update(&c, &data, 4u);
  size_t v8 = strlen(a1);
  if (v8)
  {
    unint64_t v9 = v8;
    do
    {
      if (v9 >= 0xFFFFFFFF) {
        uint64_t v10 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v10 = v9;
      }
      CC_MD4_Update(&c, a1, v10);
      a1 += v10;
      v9 -= v10;
    }
    while (v9);
  }
  size_t v11 = strlen(a2);
  if (v11)
  {
    unint64_t v12 = v11;
    do
    {
      if (v12 >= 0xFFFFFFFF) {
        uint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v13 = v12;
      }
      CC_MD4_Update(&c, a2, v13);
      a2 += v13;
      v12 -= v13;
    }
    while (v12);
  }
  CC_MD4_Final(md, &c);
  if (res_9_b64_ntop(md, 0x10uLL, a3, a4) < 0) {
    return 0;
  }
  size_t v14 = strlen(a3);
  if (v14)
  {
    uint64_t v15 = a3 - 1;
    do
    {
      if (v15[v14] != 61) {
        break;
      }
      v15[v14--] = 0;
    }
    while (v14);
  }
  return 1;
}

uint64_t sub_100031064(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v60 = 0;
  size_t v61 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  uint64_t v62 = a1;
  int v4 = *(char **)(a3 + 8);
  uint64_t v58 = (const char **)(a3 + 8);
  if (!v4) {
    sub_100042894();
  }
  uint64_t v6 = sub_1000318C0(&v62, v4, &v61, 0);
  if (!v6)
  {
    if (dword_100058FD8)
    {
      int v54 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000428C0();
      }
      *__error() = v54;
    }
    sub_10001FC88("inet_resolve");
LABEL_96:
    exit(1);
  }
  uint64_t v13 = v6;
  size_t v14 = *(char **)(a1 + 264);
  if (v14)
  {
    uint64_t v59 = sub_1000318C0(&v62, v14, (size_t *)&v60, 1);
    if (!v59)
    {
      if (dword_100058FD8)
      {
        int v15 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100042AB0();
        }
        *__error() = v15;
      }
      sub_10001FC88("inet_resolve bind");
      goto LABEL_96;
    }
  }
  else
  {
    uint64_t v59 = 0;
  }
  size_t v16 = v61;
  if (!v61) {
    sub_1000428F4();
  }
  uint64_t v17 = 0;
  size_t v18 = 0;
  uint64_t v57 = v60;
  uint64_t v56 = v13 + 4;
  do
  {
    uint64_t v19 = *v58;
    if (*a2 != -1) {
      close(*a2);
    }
    *(void *)uint64_t v79 = 0;
    pollfd v80 = 0;
    if (dword_100058FD8)
    {
      int v20 = *__error();
      uint64_t v21 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v82 = (uint64_t)&v56[v17];
        __int16 v83 = 2080;
        ssize_t v84 = v19;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "trying: %s, %s", buf, 0x16u);
      }
      *__error() = v20;
    }
    sub_10001FA38(1, "trying: %s, %s", v7, v8, v9, v10, v11, v12, (_BYTE)v13 + v17 + 4);
    int v22 = socket(*(_DWORD *)&v13[v17], 1, 0);
    *a2 = v22;
    if (v22 == -1)
    {
      if (dword_100058FD8)
      {
        int v51 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100042954();
        }
        double v52 = "socket";
LABEL_66:
        *__error() = v51;
      }
      else
      {
        double v52 = "socket";
      }
      goto LABEL_69;
    }
    int v30 = v22;
    int v55 = fcntl(v22, 3, 0, v19) | 4;
    if (fcntl(v30, 4) == -1) {
      sub_100042988();
    }
    if (sub_1000325E0(*a2, *(char **)(a1 + 464)) == -1) {
      goto LABEL_70;
    }
    if (sub_100033D50(*a2, v13[v17], v59, v57) == -1)
    {
      if (dword_100058FD8)
      {
        int v51 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000429A4();
        }
        double v52 = "bind";
        goto LABEL_66;
      }
      double v52 = "bind";
LABEL_69:
      sub_10001FBD8(v52, v23, v24, v25, v26, v27, v28, v29, v55);
LABEL_70:
      if (dword_100058FD8)
      {
        int v53 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100042920();
        }
        *__error() = v53;
      }
      sub_10001FC88("inet_connect");
LABEL_75:
      free(v13);
      free(v59);
      if (*a2 != -1) {
        close(*a2);
      }
      return 1;
    }
    int v31 = connect(*a2, (const sockaddr *)&v13[v17 + 56], *(_DWORD *)&v13[v17 + 184]);
    if (!v31) {
      break;
    }
    int v32 = v31;
    if (*__error() != 36) {
      goto LABEL_28;
    }
    v80.fd = *a2;
    v80.events = 4;
    int v33 = poll(&v80, 1u, dword_100058FE0);
    if (v33)
    {
      if (v33 != 1)
      {
        if (dword_100058FD8)
        {
          int v51 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100042A48();
          }
          double v52 = "poll failed";
          goto LABEL_66;
        }
        double v52 = "poll failed";
        goto LABEL_69;
      }
      v79[1] = 4;
      int v32 = getsockopt(*a2, 0xFFFF, 4103, v79, &v79[1]);
      if (v32)
      {
LABEL_28:
        if (v32 != -1) {
          break;
        }
      }
      else
      {
        int v38 = v79[0];
        *__error() = v38;
        if (!v79[0]) {
          break;
        }
      }
      if (*__error() == 49) {
        goto LABEL_46;
      }
      if (*__error() != 61 && *__error() != 65)
      {
        if (dword_100058FD8)
        {
          int v51 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100042A7C();
          }
          double v52 = "connect";
          goto LABEL_66;
        }
        double v52 = "connect";
        goto LABEL_69;
      }
      if (!dword_100058FD8)
      {
        sub_10001FDC8("connect refused: %s, %s");
        goto LABEL_46;
      }
      int v34 = *__error();
      uint64_t v35 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v82 = (uint64_t)&v56[v17];
        __int16 v83 = 2080;
        ssize_t v84 = v19;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "connect refused: %s, %s", buf, 0x16u);
      }
      uint64_t v36 = "connect refused: %s, %s";
      goto LABEL_40;
    }
    *__error() = 60;
    if (!dword_100058FD8)
    {
      uint64_t v36 = "connect timeout: %s, %s";
      goto LABEL_45;
    }
    int v34 = *__error();
    uint64_t v37 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v82 = (uint64_t)&v56[v17];
      __int16 v83 = 2080;
      ssize_t v84 = v19;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "connect timeout: %s, %s", buf, 0x16u);
    }
    uint64_t v36 = "connect timeout: %s, %s";
LABEL_40:
    *__error() = v34;
LABEL_45:
    sub_10001FDC8(v36, &v13[v17 + 4], v19);
LABEL_46:
    ++v18;
    v17 += 192;
  }
  while (v18 < v16);
  if (v18 == v16)
  {
    if (dword_100058FD8)
    {
      int v39 = *__error();
      uint64_t v40 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000429D8((uint64_t)v58, v40, v41, v42, v43, v44, v45, v46);
      }
      *__error() = v39;
    }
    sub_10001FB50("cannot connect to host: %s", *v58);
    goto LABEL_75;
  }
  if (dword_100058FD8)
  {
    int v47 = *__error();
    uint64_t v48 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      uint64_t v49 = *v58;
      *(_DWORD *)long long buf = 136315394;
      uint64_t v82 = (uint64_t)&v13[192 * v18 + 4];
      __int16 v83 = 2080;
      ssize_t v84 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "connected: %s, %s", buf, 0x16u);
    }
    *__error() = v47;
  }
  sub_10001FA38(1, "connected: %s, %s", v7, v8, v9, v10, v11, v12, (_BYTE)v13 - ((_BYTE)v18 << 6) + 4);
  free(v13);
  free(v59);
  return 0;
}

char *sub_1000318C0(uint64_t *a1, char *a2, size_t *a3, int a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(const char **)(*a1 + 256);
  *a3 = 0;
  memset(&v52, 0, sizeof(v52));
  int v8 = *(_DWORD *)(v6 + 560);
  if (v8 == 4)
  {
    int v9 = 2;
    goto LABEL_5;
  }
  if (v8 == 6)
  {
    int v9 = 30;
LABEL_5:
    v52.int ai_family = v9;
  }
  v52.ai_socktype = 1;
  if (a4)
  {
    uint64_t v7 = 0;
    v52.ai_flags = 1;
  }
  int v51 = 0;
  int v16 = getaddrinfo(a2, v7, &v52, &v51);
  if (dword_100058FD8)
  {
    int v17 = *__error();
    size_t v18 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      int v54 = a2;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "resolving: %s", buf, 0xCu);
    }
    *__error() = v17;
  }
  sub_10001FA38(1, "resolving: %s", v10, v11, v12, v13, v14, v15, (char)a2);
  switch(v16)
  {
    case 0:
      int v20 = v51;
      if (!v51) {
        goto LABEL_58;
      }
      size_t v21 = 0;
      do
      {
        int ai_family = v20->ai_family;
        if (ai_family == 30 || ai_family == 2) {
          ++v21;
        }
        int v20 = v20->ai_next;
      }
      while (v20);
      if (!v21)
      {
LABEL_58:
        if (dword_100058FD8)
        {
          int v49 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100042C70();
          }
          *__error() = v49;
        }
        sub_10001FB50("no addresses resolved: %s");
        goto LABEL_63;
      }
      uint64_t v24 = (char *)malloc_type_calloc(v21, 0xC0uLL, 0x10000401560AAC9uLL);
      if (!v24)
      {
        if (dword_100058FD8)
        {
          int v50 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B320();
          }
          *__error() = v50;
        }
        sub_10001FB50("calloc");
LABEL_63:
        freeaddrinfo(v51);
        return 0;
      }
      uint64_t v25 = v24;
      uint64_t v26 = v51;
      if (v51)
      {
        size_t v27 = 0;
        do
        {
          int v28 = v26->ai_family;
          if (v28 == 30 || v28 == 2)
          {
            if (v27 >= v21) {
              sub_100042CD8();
            }
            size_t ai_addrlen = v26->ai_addrlen;
            int v31 = &v25[192 * v27];
            *((_DWORD *)v31 + 46) = ai_addrlen;
            memcpy(v31 + 56, v26->ai_addr, ai_addrlen);
            ai_addr = v26->ai_addr;
            int v33 = v31 + 4;
            if (v26->ai_family == 2)
            {
              *(_DWORD *)int v31 = 2;
              int v34 = &ai_addr->sa_data[2];
              int v35 = 2;
            }
            else
            {
              *(_DWORD *)int v31 = 30;
              int v34 = &ai_addr->sa_data[6];
              int v35 = 30;
            }
            inet_ntop(v35, v34, v31 + 4, 0x2Eu);
            if (dword_100058FD8)
            {
              int v42 = *__error();
              uint64_t v43 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 136315394;
                int v54 = a2;
                __int16 v55 = 2080;
                uint64_t v56 = v33;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "hostname resolved: %s: %s", buf, 0x16u);
              }
              *__error() = v42;
            }
            sub_10001FA38(1, "hostname resolved: %s: %s", v36, v37, v38, v39, v40, v41, (char)a2);
            ++v27;
          }
          uint64_t v26 = v26->ai_next;
        }
        while (v26);
        uint64_t v44 = v51;
      }
      else
      {
        uint64_t v44 = 0;
      }
      freeaddrinfo(v44);
      *a3 = v21;
      return v25;
    case 2:
    case 8:
      if (dword_100058FD8)
      {
        int v19 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100042B64((int)a2, v16);
        }
        *__error() = v19;
      }
      gai_strerror(v16);
      sub_10001FB50("could not resolve hostname %s: %s");
      return 0;
    case 9:
      if (dword_100058FD8)
      {
        int v46 = *__error();
        int v47 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100042BE4(v47);
        }
        *__error() = v46;
      }
      gai_strerror(9);
      sub_10001FB50("could not resolve service rsync: %s");
      return 0;
    default:
      if (dword_100058FD8)
      {
        int v45 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100042AE4((int)a2, v16);
        }
        *__error() = v45;
      }
      gai_strerror(v16);
      sub_10001FB50("getaddrinfo: %s: %s");
      return 0;
  }
}

uint64_t sub_100031DC8(uint64_t *a1, uint64_t (*a2)(uint64_t *, uint64_t, char **, void))
{
  uint64_t v2 = *a1;
  size_t v92 = 0;
  int v3 = *(const char **)(v2 + 256);
  if (!v3) {
    sub_100042D04();
  }
  v93.__sigaction_u.__sa_handler = 0;
  *(void *)&v93.sa_masuint64_t k = 0;
  int v103 = -1;
  v102.int fd = -1;
  __int16 v104 = 1;
  v102.events = 1;
  uint64_t v6 = *(char **)(v2 + 264);
  if (!v6)
  {
    if ((*v3 - 48) > 9
      || (__errstrp[0] = 0, unsigned int v10 = strtonum(v3, 0, 0xFFFFLL, (const char **)__errstrp), __errstrp[0]))
    {
      uint64_t v11 = getservbyname(v3, "tcp");
      if (!v11)
      {
        if (dword_100058FD8)
        {
          int v20 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100042E2C();
          }
          *__error() = v20;
        }
        sub_10001FBD8("getservbyname: %s", v12, v13, v14, v15, v16, v17, v18, (char)v3);
        return 14;
      }
      unsigned int v19 = bswap32(LOWORD(v11->s_port)) >> 16;
    }
    else
    {
      unsigned int v19 = v10;
    }
    int v21 = *(_DWORD *)(*a1 + 560);
    if (v21) {
      size_t v22 = 1;
    }
    else {
      size_t v22 = 2;
    }
    uint64_t v23 = (int *)malloc_type_calloc(v22, 0xC0uLL, 0x10000401560AAC9uLL);
    if (!v23)
    {
      if (dword_100058FD8)
      {
        int v33 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10003B320();
        }
        *__error() = v33;
      }
      int v34 = "calloc";
      goto LABEL_54;
    }
    int v8 = v23;
    unsigned int v31 = bswap32(v19);
    if ((v21 | 4) == 4)
    {
      *uint64_t v23 = 2;
      *((void *)v23 + 7) = 0;
      *((void *)v23 + 8) = 0;
      *((_WORD *)v23 + 28) = 528;
      *((_WORD *)v23 + 29) = HIWORD(v31);
      v23[15] = 0;
      int v32 = v23;
      v23[46] = 16;
    }
    else
    {
      int v32 = 0;
    }
    if (v21 == 6 || v21 == 0)
    {
      if (v32) {
        uint64_t v36 = v32 + 48;
      }
      else {
        uint64_t v36 = v23;
      }
      int *v36 = 30;
      *((void *)v36 + 8) = 0;
      *((void *)v36 + 9) = 0;
      *((void *)v36 + 7) = 0;
      v36[20] = 0;
      *((_WORD *)v36 + 28) = 7708;
      *((_WORD *)v36 + 29) = HIWORD(v31);
      *((in6_addr *)v36 + 4) = in6addr_any;
      v36[46] = 28;
    }
    size_t v92 = v22;
LABEL_38:
    size_t v37 = 0;
    uint64_t v38 = &v102;
    while (1)
    {
      int v39 = socket(*v8, 1, 0);
      v38->int fd = v39;
      if (v39 == -1) {
        break;
      }
      int fd = v39;
      if (*v8 == 30)
      {
        LODWORD(__errstrp[0]) = 1;
        if (setsockopt(v39, 41, 27, __errstrp, 4u) == -1)
        {
          if (dword_100058FD8)
          {
            int v83 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100042D30();
            }
            *__error() = v83;
          }
          uint64_t v81 = "setsockopt";
          goto LABEL_100;
        }
      }
      if (sub_1000325E0(fd, *(char **)(v2 + 464)) == -1) {
        goto LABEL_101;
      }
      if (sub_100033D50(fd, *(unsigned __int8 *)v8, v8, 1) == -1)
      {
        if (dword_100058FD8)
        {
          int v79 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000429A4();
          }
          *__error() = v79;
        }
        sub_10001FBD8("bind", v55, v56, v57, v58, v59, v60, v61, v90);
        int fd = v38->fd;
        goto LABEL_101;
      }
      int fd = v38->fd;
      char v90 = 0;
      int v62 = fcntl(v38->fd, 3);
      if (v62 == -1)
      {
        if (dword_100058FD8)
        {
          int v80 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_87:
          }
            sub_100042D64();
LABEL_88:
          *__error() = v80;
        }
LABEL_89:
        uint64_t v81 = "fcntl";
LABEL_100:
        sub_10001FBD8(v81, v48, v49, v50, v51, v52, v53, v54, v90);
LABEL_101:
        close(fd);
        v38->int fd = -1;
        if (!v37) {
          return 14;
        }
LABEL_102:
        ssize_t v84 = &v102;
        do
        {
          int v85 = v84->fd;
          ++v84;
          close(v85);
          --v37;
        }
        while (v37);
        return 14;
      }
      char v90 = v62 | 4;
      if (fcntl(fd, 4) == -1)
      {
        if (dword_100058FD8)
        {
          int v80 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_87;
          }
          goto LABEL_88;
        }
        goto LABEL_89;
      }
      if (listen(fd, 5) == -1)
      {
        if (dword_100058FD8)
        {
          int v82 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100042D98();
          }
          *__error() = v82;
        }
        uint64_t v81 = "listen";
        goto LABEL_100;
      }
      ++v37;
      size_t v9 = v92;
      ++v38;
      v8 += 48;
      if (v37 >= v92) {
        goto LABEL_48;
      }
    }
    if (dword_100058FD8)
    {
      int v78 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042954();
      }
      *__error() = v78;
    }
    sub_10001FBD8("socket", v40, v41, v42, v43, v44, v45, v46, v90);
    if (v37) {
      goto LABEL_102;
    }
    return 14;
  }
  uint64_t v7 = sub_1000318C0(a1, v6, &v92, 1);
  if (!v7)
  {
    if (dword_100058FD8)
    {
      int v89 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042AB0();
      }
      *__error() = v89;
    }
    sub_10001FC88("inet_resolve bind");
    exit(1);
  }
  int v8 = (int *)v7;
  if (v92) {
    goto LABEL_38;
  }
  size_t v9 = 0;
LABEL_48:
  v93.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1000325A4;
  *(void *)&v93.sa_masuint64_t k = 0x800000000;
  if (sigaction(20, &v93, 0))
  {
    if (dword_100058FD8)
    {
      int v63 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100042DF8();
      }
      *__error() = v63;
    }
    int v34 = "sigaction";
LABEL_54:
    sub_10001FBD8(v34, v24, v25, v26, v27, v28, v29, v30, v90);
    return 14;
  }
  do
  {
    while (1)
    {
      int v64 = poll(&v102, v9, -1);
      if (v64 == -1) {
        break;
      }
      if (v64 < 1) {
        sub_100042DCC();
      }
      if (v9)
      {
        long long v65 = &v102;
        size_t v66 = v9;
        do
        {
          long long v101 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          *(_OWORD *)__errstrp = 0u;
          if (v65->revents)
          {
            socklen_t v91 = 128;
            uint64_t v67 = accept(v65->fd, (sockaddr *)__errstrp, &v91);
            if ((v67 & 0x80000000) == 0)
            {
              uint64_t v68 = v67;
              if (!fork())
              {
                int v86 = &v102;
                do
                {
                  int v87 = v86->fd;
                  ++v86;
                  close(v87);
                  --v9;
                }
                while (v9);
                signal(20, 0);
                int v88 = a2(a1, v68, __errstrp, v91);
                _exit(v88);
              }
              close(v68);
            }
          }
          ++v65;
          --v66;
        }
        while (v66);
      }
    }
  }
  while (*__error() == 4);
  if (dword_100058FD8)
  {
    int v76 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10003F8A0();
    }
    *__error() = v76;
  }
  sub_10001FBD8("poll", v69, v70, v71, v72, v73, v74, v75, v90);
  return 1;
}

uint64_t sub_1000325A4()
{
  int v1 = 0;
  do
    uint64_t result = waitpid(0, &v1, 1);
  while ((int)result > 0);
  return result;
}

uint64_t sub_1000325E0(int a1, char *__s1)
{
  if (!__s1 || !*__s1) {
    return 0;
  }
  int v3 = strdup(__s1);
  if (v3)
  {
    uint64_t v11 = v3;
    __stringp = v3;
    uint64_t v12 = strsep(&__stringp, ",");
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = &dword_100058FD8;
      uint64_t v15 = "sockopts: setting '%s' to '%d'";
      do
      {
        if (*v13)
        {
          uint64_t v16 = strchr(v13, 61);
          uint64_t v17 = v16;
          if (v16)
          {
            *uint64_t v16 = 0;
            uint64_t v17 = v16 + 1;
          }
          uint64_t v18 = 0;
          while (1)
          {
            unsigned int v19 = (&off_100055D78)[v18];
            if (!strcmp(v13, v19)) {
              break;
            }
            v18 += 3;
            if (v18 == 27)
            {
              if (*v14)
              {
                int v41 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100042FEC();
                }
                *__error() = v41;
              }
              sub_10001FB50("Unresolvable socket option '%s'");
LABEL_36:
              uint64_t v39 = 0xFFFFFFFFLL;
              goto LABEL_38;
            }
          }
          if (v17)
          {
            *(void *)__errstrp = 0;
            int v26 = strtonum(v17, 0, 0x7FFFFFFFLL, (const char **)__errstrp);
            if (*(void *)__errstrp)
            {
              if (*v14)
              {
                int v45 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100042F64();
                }
                *__error() = v45;
              }
              sub_10001FB50("Error parsing value for socket option '%s': %s");
              goto LABEL_36;
            }
            int v27 = v26;
            if (v26 < 0)
            {
LABEL_40:
              if (*v14)
              {
                int v43 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100042E94();
                }
                *__error() = v43;
              }
              sub_10001FB50("Value required for socket option '%s'");
              goto LABEL_36;
            }
          }
          else
          {
            int v27 = (int)(&off_100055D78)[v18 + 2];
            if (v27 < 0) {
              goto LABEL_40;
            }
          }
          int v48 = v27;
          if (*v14)
          {
            uint64_t v28 = v14;
            uint64_t v29 = v15;
            int v30 = *__error();
            unsigned int v31 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__errstrp = 136315394;
              *(void *)&__errstrp[4] = v19;
              __int16 v50 = 1024;
              int v51 = v27;
              _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "sockopts: setting '%s' to '%d'", __errstrp, 0x12u);
            }
            *__error() = v30;
            uint64_t v15 = v29;
            uint64_t v14 = v28;
          }
          sub_10001FA38(2, v15, v20, v21, v22, v23, v24, v25, (char)v19);
          if (setsockopt(a1, 0xFFFF, (int)(&off_100055D78)[v18 + 1], &v48, 4u) == -1)
          {
            if (*v14)
            {
              int v44 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100042EFC();
              }
              *__error() = v44;
            }
            sub_10001FBD8("setsockopt %s", v32, v33, v34, v35, v36, v37, v38, (char)v19);
            goto LABEL_36;
          }
        }
        uint64_t v13 = strsep(&__stringp, ",");
      }
      while (v13);
    }
    uint64_t v39 = 0;
LABEL_38:
    free(v11);
  }
  else
  {
    if (dword_100058FD8)
    {
      int v40 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10003BE00();
      }
      *__error() = v40;
    }
    sub_10001FBD8("strdup", v4, v5, v6, v7, v8, v9, v10, v46);
    return 0xFFFFFFFFLL;
  }
  return v39;
}

uint64_t sub_1000329F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  memset(&v158[1], 0, 112);
  long long v159 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  v158[0] = a2;
  int v7 = *(_DWORD *)(a4 + 40);
  int v8 = *(_DWORD *)(a2 + 8);
  DWORD1(v163) = -1;
  HIDWORD(v167) = v8;
  LODWORD(v158[1]) = v7;
  LODWORD(v158[2]) = v8;
  sub_100030E38(a1, (uint64_t)v158);
  sub_100030C18((uint64_t)a1);
  if (!*(void *)(a4 + 8)) {
    sub_100043054();
  }
  if (!*(void *)(a4 + 48)) {
    sub_100043080();
  }
  uint64_t v9 = (void *)sub_100011358(v158, a4, &v156);
  snprintf(__str, 0x400uLL, "@RSYNCD: %d", LODWORD(v158[2]));
  if (!sub_10001D878((uint64_t)v158, a3, __str))
  {
    if (!dword_100058FD8) {
      goto LABEL_88;
    }
    int v69 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_86;
    }
    goto LABEL_87;
  }
  if (dword_100058FD8)
  {
    int v16 = *__error();
    uint64_t v17 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a4 + 48);
      uint64_t v19 = *(void *)(a4 + 8);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "requesting module: %s, %s", buf, 0x16u);
    }
    *__error() = v16;
  }
  sub_10001FA38(1, "requesting module: %s, %s", v10, v11, v12, v13, v14, v15, *(void *)(a4 + 48));
  if (!sub_10001D878((uint64_t)v158, a3, *(char **)(a4 + 48)))
  {
    if (!dword_100058FD8) {
      goto LABEL_88;
    }
    int v69 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_86;
    }
    goto LABEL_87;
  }
  uint64_t v154 = (uint64_t)a1;
  uint64_t v157 = 1024;
  if (!sub_10001DC5C((uint64_t)v158, a3, (uint64_t)__str, &v157))
  {
LABEL_79:
    if (dword_100058FD8)
    {
      int v70 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000430AC();
      }
      *__error() = v70;
    }
    sub_10001FC88("io_read_line");
    goto LABEL_89;
  }
  while (1)
  {
    uint64_t v26 = v157;
    if (v157) {
      break;
    }
LABEL_74:
    uint64_t v157 = 1024;
    if (!sub_10001DC5C((uint64_t)v158, a3, (uint64_t)__str, &v157)) {
      goto LABEL_79;
    }
  }
  if (v157 == 1024)
  {
    if (dword_100058FD8)
    {
      int v73 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100043428();
      }
      *__error() = v73;
    }
    sub_10001FB50("line buffer overrun");
    goto LABEL_89;
  }
  __str[v157] = 0;
  uint64_t v27 = v26 - 1;
  if (__str[v27] == 13) {
    __str[v27] = 0;
  }
  uint64_t v28 = *(char **)a4;
  uint64_t v168 = 0;
  BOOL v29 = *(void *)__str == 0x3A44434E59535240 && v172 == 32;
  int v30 = &v173;
  unsigned int v31 = &v172;
  if (!v29)
  {
    if (!*(_DWORD *)(v158[0] + 116))
    {
      if (dword_100058FD8)
      {
        int v32 = *__error();
        uint64_t v33 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = __str;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
        *__error() = v32;
      }
      sub_10001FA38(0, "%s", v20, v21, v22, v23, v24, v25, (char)__str);
    }
    goto LABEL_74;
  }
  do
  {
    uint64_t v34 = v30;
    uint64_t v35 = *((unsigned __int8 *)v31 + 1);
    if (v31[1] < 0) {
      __uint32_t v36 = __maskrune(v35, 0x4000uLL);
    }
    else {
      __uint32_t v36 = _DefaultRuneLocale.__runetype[v35] & 0x4000;
    }
    ++v31;
    int v30 = (uint64_t *)((char *)v34 + 1);
  }
  while (v36);
  if (strcmp(v31, "OK"))
  {
    if (strncmp(v31, "AUTHREQD", 7uLL))
    {
      if (sscanf(v31, "%d.%d", (char *)&v168 + 4, &v168) == 2)
      {
        HIDWORD(v158[2]) = HIDWORD(v168);
        goto LABEL_74;
      }
      if (sscanf(v31, "%d", (char *)&v168 + 4) == 1)
      {
        HIDWORD(v158[2]) = HIDWORD(v168);
        goto LABEL_74;
      }
      if (dword_100058FD8)
      {
        int v90 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000433F4();
        }
        *__error() = v90;
      }
      sub_10001FB50("rsyncd protocol error: unknown command");
LABEL_174:
      if (dword_100058FD8)
      {
        int v111 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004316C();
        }
        *__error() = v111;
      }
      sub_10001FC88("protocol_line");
      goto LABEL_89;
    }
    do
    {
      int v37 = *((char *)v34 + 1);
      if (v37 < 0) {
        __uint32_t v38 = __maskrune(*((char *)v34 + 1), 0x4000uLL);
      }
      else {
        __uint32_t v38 = _DefaultRuneLocale.__runetype[v37] & 0x4000;
      }
      uint64_t v34 = (uint64_t *)((char *)v34 + 1);
    }
    while (v38);
    if (!v37)
    {
      if (dword_100058FD8)
      {
        int v84 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000431A0();
        }
        *__error() = v84;
      }
      sub_10001FB50("Malformed auth challenge");
      goto LABEL_174;
    }
    uint64_t v155 = v9;
    if (!v28)
    {
      uint64_t v28 = getenv("USER");
      if (!v28) {
        uint64_t v28 = getenv("LOGNAME");
      }
    }
    if (!v28) {
      uint64_t v28 = "nobody";
    }
    long long v220 = 0u;
    long long v219 = 0u;
    long long v218 = 0u;
    long long v217 = 0u;
    long long v216 = 0u;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    long long v211 = 0u;
    long long v210 = 0u;
    long long v209 = 0u;
    long long v208 = 0u;
    long long v207 = 0u;
    long long v206 = 0u;
    long long v205 = 0u;
    long long v204 = 0u;
    long long v203 = 0u;
    long long v202 = 0u;
    long long v201 = 0u;
    long long v200 = 0u;
    long long v199 = 0u;
    long long v198 = 0u;
    long long v197 = 0u;
    long long v196 = 0u;
    long long v195 = 0u;
    long long v194 = 0u;
    long long v193 = 0u;
    long long v192 = 0u;
    long long v191 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v39 = getenv("RSYNC_PASSWORD");
    int v40 = *(const char **)(v158[0] + 536);
    if (v40)
    {
      int v41 = open(v40, 0);
      if (v41 == -1)
      {
        uint64_t v9 = v155;
        if (dword_100058FD8)
        {
          int v91 = *__error();
          size_t v92 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_1000432B0((uint64_t)v158, v92, v93, v94, v95, v96, v97, v98);
          }
          *__error() = v91;
        }
        sub_10001FBD8("%s: open", v42, v43, v44, v45, v46, v47, v48, *(void *)(v158[0] + 536));
        goto LABEL_169;
      }
      int v49 = v41;
      if (sub_100025D6C(*(void *)(v158[0] + 536), v41))
      {
        if (v39)
        {
          if (dword_100058FD8)
          {
            int v151 = *__error();
            __int16 v50 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_1000433B4(&v169, v170, v50);
            }
            *__error() = v151;
          }
          sub_10001FB50("RSYNC_PASSWORD environment variable set but not used in favor of --password-file");
        }
        ssize_t v51 = read(v49, buf, 0x1FFuLL);
        if (v51 < 0)
        {
          if (dword_100058FD8)
          {
            int v153 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10004336C();
            }
            *__error() = v153;
          }
          sub_10001FBD8("%s: read", v52, v53, v54, v55, v56, v57, v58, *(void *)(v158[0] + 536));
          close(v49);
        }
        else
        {
          ssize_t v59 = v51;
          close(v49);
          if (v59)
          {
            buf[strcspn((const char *)buf, "\r\n")] = 0;
            uint64_t v9 = v155;
            goto LABEL_70;
          }
        }
        goto LABEL_69;
      }
      close(v49);
      if (dword_100058FD8)
      {
        int v152 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100043324();
        }
        *__error() = v152;
      }
      sub_10001FB50("Ignoring password file '%s' due to strict mode violation", *(const char **)(v158[0] + 536));
    }
    if (!v39)
    {
LABEL_69:
      uint64_t v9 = v155;
      if (!readpassphrase("Password: ", (char *)buf, 0x200uLL, 0)) {
        goto LABEL_169;
      }
LABEL_70:
      long long v189 = 0u;
      long long v188 = 0u;
      long long v187 = 0u;
      long long v186 = 0u;
      long long v185 = 0u;
      long long v184 = 0u;
      long long v183 = 0u;
      long long v182 = 0u;
      long long v181 = 0u;
      long long v180 = 0u;
      long long v179 = 0u;
      long long v178 = 0u;
      long long v177 = 0u;
      long long v176 = 0u;
      long long v175 = 0u;
      *(_OWORD *)__s = 0u;
      int v60 = sub_100030EF0((const char *)buf, (const char *)v34, __s, 0x100uLL);
      sub_1000048B8(buf, 0x200uLL);
      if (v60)
      {
        size_t v61 = strlen(v28);
        if (sub_10001D870((uint64_t)v158, a3, v28, v61))
        {
          if (sub_10001D9A8((uint64_t)v158, a3, 32))
          {
            if (sub_10001D878((uint64_t)v158, a3, __s)) {
              goto LABEL_74;
            }
            if (dword_100058FD8)
            {
              int v89 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003C734();
              }
              *__error() = v89;
            }
            int v87 = "io_write_line";
          }
          else
          {
            if (dword_100058FD8)
            {
              int v88 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_10003E4A4();
              }
              *__error() = v88;
            }
            int v87 = "io_write_byte";
          }
        }
        else
        {
          if (dword_100058FD8)
          {
            int v86 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003E564();
            }
            *__error() = v86;
          }
          int v87 = "io_write_buf";
        }
        sub_10001FBD8(v87, v62, v63, v64, v65, v66, v67, v68, v150);
      }
      else
      {
        if (dword_100058FD8)
        {
          int v85 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100043208();
          }
          *__error() = v85;
        }
        sub_10001FB50("Password hashing failed");
      }
      goto LABEL_174;
    }
    uint64_t v9 = v155;
    if ((unint64_t)__strlcpy_chk() < 0x200) {
      goto LABEL_70;
    }
    if (dword_100058FD8)
    {
      int v101 = *__error();
      pollfd v102 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_10004323C(v102, v103, v104, v105, v106, v107, v108, v109);
      }
      *__error() = v101;
    }
    sub_10001FB50("RSYNC_PASSWORD value too large (max %zu)", 0x1FFuLL);
LABEL_169:
    if (dword_100058FD8)
    {
      int v110 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000431D4();
      }
      *__error() = v110;
    }
    sub_10001FB50("Failed to obtain password");
    goto LABEL_174;
  }
  uint64_t v157 = v156;
  uint64_t v74 = (char *)v9[v156];
  if (!v74)
  {
LABEL_99:
    if (sub_10001D9A8((uint64_t)v158, a3, 10))
    {
      if (!sub_10001E948(v158, a3, (char *)&v158[1] + 4))
      {
        if (dword_100058FD8)
        {
          int v99 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B82C();
          }
          *__error() = v99;
        }
        sub_10001FC88("io_read_int");
        goto LABEL_89;
      }
      int v81 = HIDWORD(v158[2]);
      if (SHIDWORD(v158[2]) <= 26)
      {
        if (dword_100058FD8)
        {
          int v82 = *__error();
          int v83 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003B860((int *)&v158[2] + 1, v83);
          }
          *__error() = v82;
          int v81 = HIDWORD(v158[2]);
        }
        sub_10001FB50("remote protocol %d is older than our minimum supported %d: exiting", v81, 27);
LABEL_163:
        uint64_t v71 = 2;
        goto LABEL_90;
      }
      if (SHIDWORD(v158[2]) < SLODWORD(v158[2])) {
        HIDWORD(v167) = HIDWORD(v158[2]);
      }
      if (*(void *)(v158[0] + 528))
      {
        if (sub_100007BEC(v158))
        {
          if (dword_100058FD8)
          {
            int v100 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100043138();
            }
            *__error() = v100;
          }
          sub_10001FC88("batch_open");
          goto LABEL_163;
        }
        uint64_t v71 = 0;
      }
      else
      {
        uint64_t v71 = 1;
      }
      DWORD2(v159) = 1;
      if (dword_100058FD8)
      {
        int v112 = *__error();
        int v113 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "read multiplexing enabled", buf, 2u);
        }
        *__error() = v112;
      }
      sub_10001FA38(1, "read multiplexing enabled", v75, v76, v77, v78, v79, v80, v150);
      if (dword_100058FD8)
      {
        int v120 = *__error();
        int v121 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v158[2];
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = HIDWORD(v158[2]);
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = HIDWORD(v167);
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = HIDWORD(v158[1]);
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_INFO, "socket detected client version %d, server version %d, negotiated protocol version %d, seed %d", buf, 0x1Au);
        }
        *__error() = v120;
      }
      sub_10001FA38(1, "socket detected client version %d, server version %d, negotiated protocol version %d, seed %d", v114, v115, v116, v117, v118, v119, v158[2]);
      int v128 = *(_DWORD *)(v158[0] + 512);
      if (v128 == -1) {
        sub_1000430E0();
      }
      if (dword_100058FD8)
      {
        uint64_t v129 = v9;
        int v130 = *__error();
        uint64_t v131 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
        {
          if (*(_DWORD *)(v158[0] + 512)) {
            uint64_t v132 = "disabled";
          }
          else {
            uint64_t v132 = "enabled";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v132;
          _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_INFO, "Delta transmission %s for this transfer", buf, 0xCu);
        }
        *__error() = v130;
        int v128 = *(_DWORD *)(v158[0] + 512);
        uint64_t v9 = v129;
      }
      if (v128) {
        uint64_t v133 = "disabled";
      }
      else {
        uint64_t v133 = "enabled";
      }
      sub_10001FA38(1, "Delta transmission %s for this transfer", v122, v123, v124, v125, v126, v127, (char)v133);
      if (*(_DWORD *)(a4 + 40) == 1)
      {
        if (dword_100058FD8)
        {
          int v140 = *__error();
          uint64_t v141 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v142 = *(void *)(a4 + 8);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v142;
            _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_INFO, "client starting receiver: %s", buf, 0xCu);
          }
          *__error() = v140;
        }
        sub_10001FA38(1, "client starting receiver: %s", v134, v135, v136, v137, v138, v139, *(void *)(a4 + 8));
        if (!sub_1000276FC((uint64_t)v158, v154, a3, a3, *(char **)(a4 + 32)))
        {
          if (dword_100058FD8)
          {
            int v143 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003B918();
            }
            *__error() = v143;
          }
          sub_10001FC88("rsync_receiver");
          goto LABEL_90;
        }
      }
      else
      {
        if (dword_100058FD8)
        {
          int v144 = *__error();
          uint64_t v145 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            uint64_t v146 = *(void *)(a4 + 8);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v146;
            _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_INFO, "client starting sender: %s", buf, 0xCu);
          }
          *__error() = v144;
        }
        sub_10001FA38(1, "client starting sender: %s", v134, v135, v136, v137, v138, v139, *(void *)(a4 + 8));
        if (!sub_10002B1D4((uint64_t)v158, a3, a3, *(void *)(a4 + 24), *(const char ***)(a4 + 16)))
        {
          if (dword_100058FD8)
          {
            int v149 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_10003B9AC();
            }
            *__error() = v149;
          }
          sub_10001FC88("rsync_sender");
          goto LABEL_90;
        }
      }
      if (sub_10001CE94(v158, a3))
      {
        if (BYTE8(v167))
        {
          if ((uint64_t)v167 < *(void *)(v158[0] + 592)) {
            sub_10004310C();
          }
          uint64_t v71 = 25;
        }
        else if (*((void *)&v166 + 1))
        {
          uint64_t v71 = 23;
        }
        else
        {
          uint64_t v71 = 0;
        }
      }
      else
      {
        if (dword_100058FD8)
        {
          int v147 = *__error();
          int v148 = qword_100058FE8;
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_INFO, "data remains in read pipe", buf, 2u);
          }
          *__error() = v147;
        }
        sub_10001FDC8("data remains in read pipe");
        uint64_t v71 = 14;
      }
      goto LABEL_90;
    }
    if (!dword_100058FD8) {
      goto LABEL_88;
    }
    int v69 = *__error();
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
LABEL_86:
    }
      sub_10003C734();
LABEL_87:
    *__error() = v69;
    goto LABEL_88;
  }
  while (sub_10001D878((uint64_t)v158, a3, v74))
  {
    uint64_t v74 = (char *)v9[++v157];
    if (!v74) {
      goto LABEL_99;
    }
  }
  if (dword_100058FD8)
  {
    int v69 = *__error();
    if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
LABEL_88:
  sub_10001FC88("io_write_line");
LABEL_89:
  uint64_t v71 = 1;
LABEL_90:
  sub_100007E48(v158, a4, v71);
  free(v9);
  return v71;
}

BOOL sub_100033CFC(int a1)
{
  memset(&v3, 0, sizeof(v3));
  return fstat(a1, &v3) != -1 && (v3.st_mode & 0xF000) == 49152;
}

uint64_t sub_100033D50(int a1, int a2, _DWORD *a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = a4;
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  int v7 = a3;
  while (1)
  {
    int v8 = *v7;
    v7 += 48;
    if (v8 == a2 && bind(a1, (const sockaddr *)(a3 + 14), a3[46]) != -1) {
      break;
    }
    a3 = v7;
    if (!--v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

void sub_100033DEC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

char *sub_100033E20(const char *a1)
{
  uint64_t v2 = (char *)malloc_type_realloc(0, 0x401uLL, 0x5D82581AuLL);
  if (v2)
  {
    uint64_t v10 = v2;
    size_t v11 = 1024;
    while (1)
    {
      ssize_t v12 = readlink(a1, v10, v11);
      if (!v12) {
        break;
      }
      if (v12 == -1)
      {
        if (dword_100058FD8)
        {
          int v25 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_10003F054();
          }
          *__error() = v25;
        }
        sub_10001FBD8("%s: readlink", v13, v14, v15, v16, v17, v18, v19, (char)a1);
LABEL_24:
        uint64_t v23 = v10;
        goto LABEL_25;
      }
      if (v12 < v11)
      {
        if (v12 <= 0) {
          sub_1000434A0();
        }
        v10[v12] = 0;
        return v10;
      }
      uint64_t v20 = v10;
      uint64_t v10 = (char *)malloc_type_realloc(v10, (2 * v11) | 1, 0x5D82581AuLL);
      v11 *= 2;
      if (!v10) {
        goto LABEL_9;
      }
    }
    if (dword_100058FD8)
    {
      int v24 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000434CC();
      }
      *__error() = v24;
    }
    sub_10001FB50("%s: empty link", a1);
    goto LABEL_24;
  }
  uint64_t v20 = 0;
LABEL_9:
  if (dword_100058FD8)
  {
    int v21 = *__error();
    uint64_t v22 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10004345C(v22);
    }
    *__error() = v21;
  }
  sub_10001FBD8("realloc", v3, v4, v5, v6, v7, v8, v9, v27);
  uint64_t v23 = v20;
LABEL_25:
  free(v23);
  return 0;
}

char *sub_10003400C(int a1, const char *a2)
{
  uint64_t v4 = (char *)malloc_type_realloc(0, 0x401uLL, 0x84573BAAuLL);
  if (v4)
  {
    ssize_t v12 = v4;
    size_t v13 = 1024;
    while (1)
    {
      ssize_t v14 = readlinkat(a1, a2, v12, v13);
      if (!v14) {
        break;
      }
      if (v14 == -1)
      {
        if (dword_100058FD8)
        {
          int v27 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100043560();
          }
          *__error() = v27;
        }
        sub_10001FBD8("%s: readlinkat", v15, v16, v17, v18, v19, v20, v21, (char)a2);
LABEL_24:
        int v25 = v12;
        goto LABEL_25;
      }
      if (v14 < v13)
      {
        if (v14 <= 0) {
          sub_100043534();
        }
        v12[v14] = 0;
        return v12;
      }
      uint64_t v22 = v12;
      ssize_t v12 = (char *)malloc_type_realloc(v12, (2 * v13) | 1, 0x84573BAAuLL);
      v13 *= 2;
      if (!v12) {
        goto LABEL_9;
      }
    }
    if (dword_100058FD8)
    {
      int v26 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000434CC();
      }
      *__error() = v26;
    }
    sub_10001FB50("%s: empty link", a2);
    goto LABEL_24;
  }
  uint64_t v22 = 0;
LABEL_9:
  if (dword_100058FD8)
  {
    int v23 = *__error();
    int v24 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
      sub_10004345C(v24);
    }
    *__error() = v23;
  }
  sub_10001FBD8("realloc", v5, v6, v7, v8, v9, v10, v11, v29);
  int v25 = v22;
LABEL_25:
  free(v25);
  return 0;
}

uint64_t sub_100034200(uint64_t a1, void *a2)
{
  qsort(*(void **)(a1 + 112), *(void *)(a1 + 120), 0x98uLL, (int (__cdecl *)(const void *, const void *))sub_100012234);
  int v8 = *(_DWORD *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 112);
  unint64_t v10 = *(void *)(a1 + 120);

  return sub_100016A2C(a2, v8, v9, v10, v4, v5, v6, v7);
}

void *sub_100034260(const char *a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, size_t a7, __int16 a8)
{
  uint64_t v16 = malloc_type_calloc(1uLL, 0x98uLL, 0x1030040C06138BFuLL);
  if (!v16)
  {
    if (dword_100058FD8)
    {
      int v42 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000435C8();
      }
      *__error() = v42;
    }
    sub_10001FBD8("calloc", v17, v18, v19, v20, v21, v22, v23, v45);
    return 0;
  }
  int v24 = v16;
  *(_DWORD *)uint64_t v16 = 0;
  v16[24] = a8;
  int v25 = strdup(a1);
  *((void *)v24 + 7) = v25;
  if (!v25)
  {
    if (dword_100058FD8)
    {
      int v43 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100043600();
      }
      *__error() = v43;
    }
    sub_10001FBD8("strdup", v26, v27, v28, v29, v30, v31, v32, v45);
    goto LABEL_19;
  }
  *((_DWORD *)v24 + 16) = a2;
  *((_DWORD *)v24 + 17) = a3;
  *((void *)v24 + 9) = a5;
  *((_DWORD *)v24 + 20) = a4;
  *((void *)v24 + 11) = a6;
  *((void *)v24 + 12) = a7;
  *((void *)v24 + 13) = 0;
  uint64_t v33 = malloc_type_calloc(a7, 4uLL, 0x100004052888210uLL);
  *((void *)v24 + 17) = v33;
  if (!v33)
  {
    if (dword_100058FD8)
    {
      int v41 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_1000435C8();
      }
      *__error() = v41;
    }
    sub_10001FBD8("calloc", v34, v35, v36, v37, v38, v39, v40, v45);
    free(*((void **)v24 + 7));
LABEL_19:
    free(v24);
    return 0;
  }
  return v24;
}

uint64_t sub_10003444C(uint64_t result)
{
  if (*(_DWORD *)result != 2) {
    sub_100043638();
  }
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 144);
  *(void *)(result + 72) = 16;
  return result;
}

void sub_100034490(void **a1)
{
  if (a1)
  {
    free(a1[7]);
    free(a1[17]);
    free(a1[1]);
    free(a1);
  }
}

uint64_t sub_1000344E4(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)result == 1) {
    sub_100043664();
  }
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 104);
  if (v4 != *(void *)(result + 96) && *(_DWORD *)(*(void *)a2 + 204))
  {
    unint64_t v6 = *(void *)(result + 40);
    if (v4 < v6)
    {
      uint64_t v8 = 152 * v4;
      do
      {
        uint64_t v9 = *(void *)(v3 + 88) + v8;
        if ((*(_WORD *)(v9 + 24) & 0xF000) == 0x8000)
        {
          int v10 = *(_DWORD *)(v9 + 112);
          if ((v10 & 0xE) == 0) {
            break;
          }
          if ((v10 & 8) == 0)
          {
            if ((v10 & 2) != 0 && *(int *)(v3 + 144) > 0) {
              break;
            }
            if ((*(_DWORD *)(v9 + 112) & 0x16) == 4)
            {
              uint64_t result = sub_10001E21C(a2, a3, v4, 100);
              if (!result) {
                break;
              }
              *(_DWORD *)(v9 + 112) |= 0x10u;
              unint64_t v6 = *(void *)(v3 + 40);
            }
          }
        }
        ++v4;
        v8 += 152;
      }
      while (v4 < v6);
    }
    *(void *)(v3 + 104) = v4;
  }
  return result;
}

uint64_t sub_1000345E4(uint64_t a1, char *a2, uint64_t a3, int *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  int v10 = (int *)a2;
  uint64_t v386 = 0;
  uint64_t v12 = *(void *)(a3 + 200);
  if (!*(void *)(v12 + 8)) {
    *(void *)(v12 + 8) = a1 + 144;
  }
  int v13 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    if (!v14) {
      sub_1000436E8();
    }
    if (*a4 == -1) {
      sub_100043714();
    }
    if (*(_DWORD *)a2 != -1) {
      sub_100043778();
    }
    unint64_t v15 = *(void *)(a1 + 32);
    unint64_t v16 = *(void *)(a1 + 16);
    BOOL v17 = v16 > v15;
    unint64_t v18 = v16 - v15;
    if (!v17) {
      goto LABEL_17;
    }
    if (v18 >= 0x8000) {
      size_t v19 = 0x8000;
    }
    else {
      size_t v19 = v18;
    }
    if (!sub_10001D870(a3, *(_DWORD *)(a1 + 80), (char *)(v14 + v15), v19))
    {
      if (dword_100058FD8)
      {
        int v279 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100043740();
        }
        *__error() = v279;
      }
      sub_10001FC88("io_write_nonblocking");
      return 0xFFFFFFFFLL;
    }
    size_t v20 = *(void *)(a1 + 32) + v19;
    *(void *)(a1 + 32) = v20;
    if (v20 >= *(void *)(a1 + 16))
    {
LABEL_17:
      *(_DWORD *)a1 = 0;
      ++*(void *)(a1 + 40);
      if (!*(_DWORD *)(*(void *)v9 + 196)) {
        sub_1000344E4(a1, v9, *v8);
      }
    }
    return 1;
  }
  if (v13)
  {
    if (v13 != 2) {
      sub_100043690();
    }
    sub_1000436BC();
  }
  if (*(_DWORD *)a2 != -1) {
    sub_100043E90();
  }
  if (*a4 == -1) {
    sub_1000437A4();
  }
  unint64_t v21 = *(void *)(a1 + 40);
  uint64_t v384 = (unint64_t *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 96);
  if (v21 >= v22)
  {
    size_t v383 = 0;
    unint64_t v379 = 0;
    goto LABEL_548;
  }
  uint64_t v374 = (int *)a2;
  uint64_t v381 = (int *)(a1 + 64);
  size_t v383 = 0;
  int v378 = (int *)(a1 + 68);
  unint64_t v379 = 0;
  while (2)
  {
    uint64_t v23 = *(void *)(a1 + 88);
    if (*(_DWORD *)(v23 + 152 * v21 + 144) == -1) {
      sub_1000437D0();
    }
    int v24 = *(_DWORD *)(a1 + 144);
    if (v24 == 2 || v24 == 1 && (*(unsigned char *)(v23 + 152 * v21 + 112) & 2) == 0) {
      goto LABEL_413;
    }
    int v25 = 0;
    uint64_t v26 = v23 + 152 * v21;
    unsigned int v28 = *(unsigned __int16 *)(v26 + 24);
    uint64_t v27 = (_WORD *)(v26 + 24);
    switch((v28 >> 12) ^ 8)
    {
      case 0u:
        __s = 0;
        char v398 = 0;
        memset(&v419, 0, sizeof(v419));
        int v397 = -1;
        if ((*v27 & 0xF000) != 0x8000) {
          sub_100043C3C();
        }
        uint64_t v34 = (const char **)(v23 + 152 * v21);
        uint64_t v35 = *(void *)v9;
        if (*(_DWORD *)(*(void *)v9 + 36) == 2 || *(void *)(v35 + 520))
        {
          if (!*(_DWORD *)(v35 + 4))
          {
            if (dword_100058FD8)
            {
              int v36 = *__error();
              uint64_t v37 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v38 = *v34;
                buf[0].dev_t st_dev = 136315138;
                *(void *)&buf[0].mode_t st_mode = v38;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
              }
              *__error() = v36;
            }
            sub_10001FA38(0, "%s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v34);
          }
LABEL_393:
          int v25 = 0;
          goto LABEL_394;
        }
        uint64_t v80 = *(void *)(v35 + 224);
        if ((v80 & 0x8000000000000000) == 0 && *(void *)(v23 + 152 * v21 + 40) > v80)
        {
          if (dword_100058FD8)
          {
            int v81 = *__error();
            int v82 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              int v83 = *v34;
              buf[0].dev_t st_dev = 136315138;
              *(void *)&buf[0].mode_t st_mode = v83;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "skipping over max-size file %s", (uint8_t *)buf, 0xCu);
            }
            *__error() = v81;
          }
          sub_10001FDC8("skipping over max-size file %s");
          goto LABEL_393;
        }
        uint64_t v101 = *(void *)(v35 + 232);
        if ((v101 & 0x8000000000000000) == 0 && *(void *)(v23 + 152 * v21 + 40) < v101)
        {
          if (dword_100058FD8)
          {
            int v102 = *__error();
            uint64_t v103 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              uint64_t v104 = *v34;
              buf[0].dev_t st_dev = 136315138;
              *(void *)&buf[0].mode_t st_mode = v104;
              _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "skipping under min-size file %s", (uint8_t *)buf, 0xCu);
            }
            *__error() = v102;
          }
          sub_10001FDC8("skipping under min-size file %s");
          goto LABEL_393;
        }
        *uint64_t v374 = -1;
        unsigned int v107 = sub_1000388F0(*v381, v23 + 152 * v21, &v419, (_DWORD **)v9, a5, 0);
        int v25 = v107;
        switch(v107)
        {
          case 0xFFFFFFFF:
            unint64_t v379 = 0;
            goto LABEL_394;
          case 2u:
            int v143 = v419.st_mode & 0xF000;
            uint64_t v108 = *(_DWORD **)v9;
            if (v143 == 0x8000) {
              goto LABEL_467;
            }
            if (v143 == 0x4000 && v108[141])
            {
              unsigned int v144 = v108[24];
              LODWORD(a3) = 128;
              if (v144 > 5 || ((1 << v144) & 0x35) == 0) {
                goto LABEL_465;
              }
            }
            else if (v108[24] != 2)
            {
LABEL_450:
              if (v143 != 0x4000)
              {
                a3 = 0;
                uint64_t v108 = *(_DWORD **)v9;
                if (*(_DWORD *)(*(void *)v9 + 40)) {
                  goto LABEL_465;
                }
                goto LABEL_467;
              }
              LODWORD(a3) = 128;
LABEL_465:
              if (unlinkat(*v381, *v34, a3) != -1)
              {
                int v25 = 3;
                goto LABEL_477;
              }
              if (dword_100058FD8)
              {
                int v257 = *__error();
                int v258 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v276 = *v34;
                  buf[0].dev_t st_dev = 136315138;
                  *(void *)&buf[0].mode_t st_mode = v276;
                  _os_log_error_impl((void *)&_mh_execute_header, v258, OS_LOG_TYPE_ERROR, "%s: unlinkat", (uint8_t *)buf, 0xCu);
                }
                *__error() = v257;
              }
              sub_10001FBD8("%s: unlinkat", v226, v227, v228, v229, v230, v231, v232, (char)*v34);
              unint64_t v379 = 0;
LABEL_446:
              int v25 = 0;
              ++*(void *)(v9 + 240);
              goto LABEL_394;
            }
            if (!sub_100037EA4(a1, (void *)v9, 3)) {
              goto LABEL_522;
            }
            int v143 = v419.st_mode & 0xF000;
            goto LABEL_450;
          case 4u:
            goto LABEL_476;
        }
        if (v107 > 2) {
          goto LABEL_477;
        }
        uint64_t v108 = *(_DWORD **)v9;
        if (!v107)
        {
          if (v108[46]) {
            goto LABEL_471;
          }
          int v109 = 1;
          goto LABEL_468;
        }
LABEL_467:
        int v109 = 0;
LABEL_468:
        if (!v108[9] && !sub_100027170(v9, 0, *v381, (const char **)(v23 + 152 * v21), (char *)*v34))
        {
          if (dword_100058FD8)
          {
            int v262 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100043B88(&v395, v396);
            }
            *__error() = v262;
          }
          sub_10001FC88("rsync_set_metadata");
          goto LABEL_522;
        }
        if (v109)
        {
LABEL_471:
          if (dword_100058FD8)
          {
            int v233 = *__error();
            int v234 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v275 = *v34;
              buf[0].dev_t st_dev = 136315138;
              *(void *)&buf[0].mode_t st_mode = v275;
              _os_log_debug_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEBUG, "%s: skipping: up to date", (uint8_t *)buf, 0xCu);
            }
            *__error() = v233;
          }
          sub_10001FA38(2, "%s: skipping: up to date", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v34);
LABEL_476:
          unint64_t v379 = 0;
          goto LABEL_393;
        }
LABEL_477:
        __int16 v235 = *(_DWORD **)v9;
        __int16 v236 = *(char **)(*(void *)v9 + 48);
        if (v236)
        {
          int v237 = sub_10000B6AC(v9, (char **)(v23 + 152 * v21), (char *)buf, 0x400uLL);
          int v238 = sub_100038DDC((_DWORD **)v9, a1, &v398, &v419, v237, (uint64_t *)(v23 + 152 * v21), a5, v25, 2, &v397, 1u);
          if (v238 < 1)
          {
            unint64_t v379 = 0;
            int v25 = v238;
            goto LABEL_394;
          }
          __int16 v236 = v398;
          if (v398)
          {
            __s = v398;
            st_size_t size = v419.st_size;
          }
          else
          {
            st_size_t size = 0;
          }
          __int16 v235 = *(_DWORD **)v9;
        }
        else
        {
          st_size_t size = 0;
        }
        v240 = (char *)*((void *)v235 + 34);
        if (!v240)
        {
          int v243 = v236;
LABEL_491:
          if (v236 || !v243)
          {
            if (v236)
            {
              int v251 = v397;
              uint64_t v252 = sub_10000B8A0((char **)(v23 + 152 * v21));
              int v253 = openat(v251, v252, 256);
              *uint64_t v374 = v253;
              if (v253 == -1)
              {
                off_t v254 = st_size;
LABEL_529:
                unint64_t v379 = v254;
                if (*__error() == 2 || *__error() == 31) {
                  goto LABEL_531;
                }
                if (dword_100058FD8)
                {
                  int v268 = *__error();
                  int v269 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    int v278 = *v34;
                    buf[0].dev_t st_dev = 136315138;
                    *(void *)&buf[0].mode_t st_mode = v278;
                    _os_log_error_impl((void *)&_mh_execute_header, v269, OS_LOG_TYPE_ERROR, "%s: pre_file: openat", (uint8_t *)buf, 0xCu);
                  }
                  *__error() = v268;
                }
                sub_10001FBD8("%s: pre_file: openat", (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v34);
                if (v397 != -1) {
                  close(v397);
                }
LABEL_463:
                int v25 = -1;
                goto LABEL_394;
              }
              *(_DWORD *)(v23 + 152 * v21 + 8) = v397;
              off_t v254 = st_size;
              goto LABEL_526;
            }
LABEL_499:
            if (v25 != 3 || !v235[145] || sub_1000391A0(a1, v23 + 152 * v21, (uint64_t)&v419, v374))
            {
              if (v397 != -1) {
                sub_100043BE4();
              }
              off_t v254 = v419.st_size;
              int v255 = openat(*v381, *v34, 256);
              *uint64_t v374 = v255;
LABEL_527:
              if (v255 != -1)
              {
                unint64_t v379 = v254;
LABEL_531:
                int v25 = 1;
                goto LABEL_394;
              }
              goto LABEL_529;
            }
            if (v397 != -1) {
              sub_100043BB8();
            }
            off_t v254 = v419.st_size;
LABEL_526:
            int v255 = *v374;
            goto LABEL_527;
          }
          if (v397 != -1) {
            sub_100043C10();
          }
          sub_10000B574(*v381, v243, (const char **)(v23 + 152 * v21));
          if (fstatat(*v381, *v34, &v419, 32) != -1)
          {
            __int16 v235 = *(_DWORD **)v9;
            goto LABEL_499;
          }
          if (dword_100058FD8)
          {
            int v264 = *__error();
            uint64_t v265 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              off_t v277 = *v34;
              buf[0].dev_t st_dev = 136315138;
              *(void *)&buf[0].mode_t st_mode = v277;
              _os_log_error_impl((void *)&_mh_execute_header, v265, OS_LOG_TYPE_ERROR, "%s: fstatat", (uint8_t *)buf, 0xCu);
            }
            *__error() = v264;
          }
          sub_10001FBD8("%s: fstatat", v244, v245, v246, v247, v248, v249, v250, (char)*v34);
LABEL_522:
          unint64_t v379 = 0;
          goto LABEL_463;
        }
        uint64_t v372 = v236;
        uint64_t v241 = 280;
        while (1)
        {
          int v242 = sub_100038DDC((_DWORD **)v9, a1, &__s, &v419, v240, (uint64_t *)(v23 + 152 * v21), a5, v25, v235[35], 0, 0);
          if (v242 <= 0) {
            break;
          }
          __int16 v235 = *(_DWORD **)v9;
          v240 = *(char **)(*(void *)v9 + v241);
          v241 += 8;
          if (!v240)
          {
            int v243 = __s;
            __int16 v236 = v372;
            goto LABEL_491;
          }
        }
        int v256 = v242;
        if (v397 != -1) {
          close(v397);
        }
        unint64_t v379 = 0;
        int v25 = v256;
LABEL_394:
        if (!*(_DWORD *)(v9 + 164)) {
          sub_10002005C((void *)v9, *(void *)(a1 + 88) + 152 * *(void *)(a1 + 40), 1);
        }
        if (v25 < 0) {
          return 0xFFFFFFFFLL;
        }
        unint64_t v21 = *v384;
        if (!v25)
        {
          uint64_t v202 = *(void *)(a1 + 88);
          *(_DWORD *)(v202 + 152 * v21 + 112) |= 4u;
          if (*(int *)(v9 + 260) >= 29)
          {
            uint64_t v203 = v202 + 152 * v21;
            if ((*(_DWORD *)(v203 + 116) & 0x800) != 0) {
              size_t v204 = 7;
            }
            else {
              size_t v204 = 6;
            }
            *(void *)(a1 + 16) = v204;
            if ((*(unsigned char *)(v203 + 117) & 0x10) != 0)
            {
              *(void *)(a1 + 16) = v204 + 1;
              size_t v205 = strlen(*(const char **)(v202 + 152 * v21 + 88));
              size_t v206 = v204 + 2;
              if (v205 <= 0x7F) {
                size_t v206 = v204 + 1;
              }
              size_t v383 = v205;
              size_t v204 = v206 + v205;
              *(void *)(a1 + 16) = v206 + v205;
            }
            long long v207 = *(void **)(a1 + 8);
            if (v204 > *(void *)(a1 + 24))
            {
              long long v207 = malloc_type_realloc(v207, v204, 0x5850EA45uLL);
              if (!v207)
              {
                if (dword_100058FD8)
                {
                  int v291 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_1000437FC();
                  }
                  *__error() = v291;
                }
                sub_10001FBD8("realloc", v208, v209, v210, v211, v212, v213, v214, v371[0]);
                return 0xFFFFFFFFLL;
              }
              *(void *)(a1 + 8) = v207;
              size_t v204 = *(void *)(a1 + 16);
              *(void *)(a1 + 24) = v204;
              unint64_t v21 = *(void *)(a1 + 40);
            }
            uint64_t v386 = 0;
            *(void *)(a1 + 32) = 0;
            sub_10001E37C((uint64_t)v207, &v386, v204, v21);
            sub_10001E6B8(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(_DWORD *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40) + 116));
            uint64_t v215 = *(void *)(a1 + 88);
            uint64_t v216 = *(void *)(a1 + 40);
            int v217 = *(_DWORD *)(v215 + 152 * v216 + 116);
            if ((v217 & 0x800) != 0)
            {
              sub_10001E6E4(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(unsigned char *)(v215 + 152 * v216 + 120));
              uint64_t v215 = *(void *)(a1 + 88);
              uint64_t v216 = *(void *)(a1 + 40);
              int v217 = *(_DWORD *)(v215 + 152 * v216 + 116);
            }
            if ((v217 & 0x1000) != 0) {
              sub_10001E490(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(void **)(v215 + 152 * v216 + 88), v383);
            }
          }
LABEL_413:
          unint64_t v21 = *(void *)(a1 + 40) + 1;
          *(void *)(a1 + 40) = v21;
          unint64_t v22 = *(void *)(a1 + 96);
          if (v21 >= v22) {
            goto LABEL_547;
          }
          continue;
        }
        unint64_t v22 = *(void *)(a1 + 96);
LABEL_547:
        uint64_t v8 = a4;
        int v10 = v374;
LABEL_548:
        int *v8 = -1;
        if (v21 != v22)
        {
          *(_DWORD *)a1 = 1;
          v281 = *(_DWORD **)v9;
          if (*(void *)(*(void *)v9 + 520))
          {
            int v282 = 0;
          }
          else
          {
            size_t v283 = *(void *)(a1 + 72);
            int v284 = *v10;
            if (*v10 == -1 || (uint64_t)v379 < 1)
            {
              if (v284 != -1)
              {
                close(v284);
                *int v10 = -1;
              }
              if (dword_100058FD8)
              {
                int v289 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
                  sub_10004398C();
                }
                *__error() = v289;
              }
              sub_10001FA38(2, "%s: not mapped", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(void *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40)));
              if (*v10 != -1) {
                sub_100043960();
              }
              size_t v288 = 0;
              int v282 = 0;
              LODWORD(v287) = 0;
              LODWORD(v285) = 0x8000;
            }
            else
            {
              int64_t v285 = *((void *)v281 + 61);
              if (v285 >= 536870913) {
                errx(1, "--block-size=%ld: must be no greater than %d", v285, 0x20000000);
              }
              int v286 = v281[128];
              if (v286)
              {
                unint64_t v287 = 0;
                int64_t v285 = 0;
                size_t v283 = 0;
                size_t v288 = 0;
              }
              else
              {
                if (v285 <= 0)
                {
                  if (v379 < 0x77A10)
                  {
                    int64_t v285 = 700;
                  }
                  else
                  {
                    int64_t v285 = vcvtpd_u64_f64(sqrt((double)(uint64_t)v379));
                    if ((v285 & 7) != 0) {
                      int64_t v285 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
                    }
                  }
                }
                unint64_t v287 = v379;
                size_t v288 = v379 / v285;
                if (v285 > v379 || (unint64_t v287 = v379 % v285) != 0) {
                  ++v288;
                }
              }
              if (v281[28])
              {
                fcntl(v284, 48);
                int v286 = *(_DWORD *)(*(void *)v9 + 512);
              }
              if (v286 || !*(_DWORD *)(a1 + 144) && **(_DWORD **)(v9 + 200))
              {
                int v282 = 0;
              }
              else
              {
                if (!v288) {
                  sub_100043898();
                }
                v314 = (char *)malloc_type_calloc(v288, 0x30uLL, 0x100004064842E6AuLL);
                if (!v314)
                {
                  if (dword_100058FD8)
                  {
                    int v366 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_1000435C8();
                    }
                    *__error() = v366;
                  }
                  sub_10001FBD8("calloc", v315, v316, v317, v318, v319, v320, v321, v371[0]);
                  close(*v10);
                  uint64_t v280 = 0xFFFFFFFFLL;
                  *int v10 = -1;
                  return v280;
                }
                uint64_t v322 = v314;
                uint64_t v323 = (char *)malloc_type_malloc(v285, 0x18F9E70DuLL);
                if (!v323)
                {
                  if (dword_100058FD8)
                  {
                    int v367 = *__error();
                    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                      sub_1000438C4();
                    }
                    *__error() = v367;
                  }
                  sub_10001FBD8("malloc", v324, v325, v326, v327, v328, v329, v330, v371[0]);
                  close(*v10);
                  uint64_t v280 = 0xFFFFFFFFLL;
                  *int v10 = -1;
LABEL_664:
                  free(v322);
                  return v280;
                }
                uint64_t v331 = v323;
                uint64_t v382 = v9;
                uint64_t v375 = v10;
                *(void *)int v377 = v283;
                uint64_t v332 = 0;
                size_t v333 = v285;
                uint64_t v334 = 0;
                off_t v335 = 0;
                v385 = v322;
                do
                {
                  int v336 = v331;
                  ssize_t v337 = pread(*v375, v331, v333, v335);
                  if (v337 != v333 && v337 != v287)
                  {
                    uint64_t v368 = v336;
                    if (dword_100058FD8)
                    {
                      int v369 = *__error();
                      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                        sub_100043928();
                      }
                      *__error() = v369;
                    }
                    sub_10001FBD8("pread", v338, v339, v340, v341, v342, v343, v344, v371[0]);
                    close(*v375);
                    uint64_t v280 = 0xFFFFFFFFLL;
                    *uint64_t v375 = -1;
                    free(v368);
                    goto LABEL_664;
                  }
                  int v346 = &v385[v332];
                  if (v287) {
                    BOOL v347 = v288 - 1 == v334;
                  }
                  else {
                    BOOL v347 = 0;
                  }
                  if (v347) {
                    unint64_t v348 = v287;
                  }
                  else {
                    unint64_t v348 = v333;
                  }
                  *((void *)v346 + 1) = v334;
                  *((void *)v346 + 2) = v348;
                  *(void *)int v346 = v335;
                  *((_DWORD *)v346 + 6) = sub_10001BF18((uint64_t)v336, v348);
                  unint64_t v349 = *((void *)v346 + 2);
                  int v350 = (unsigned __int8 *)(v346 + 28);
                  uint64_t v322 = v385;
                  sub_10001BFB0(v336, v349, v350, v382);
                  v335 += v333;
                  sub_10001FA38(3, "i=%ld, offs=%lld, msz=%ld, blk.len=%lu, blk.rem=%lu", v351, v352, v353, v354, v355, v356, v334++);
                  v332 += 48;
                  uint64_t v331 = v336;
                }
                while (v288 != v334);
                free(v336);
                int v10 = v375;
                LODWORD(v285) = v333;
                if (dword_100058FD8)
                {
                  int v363 = *__error();
                  uint64_t v364 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v370 = *(void *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40));
                    buf[0].dev_t st_dev = 136315650;
                    *(void *)&buf[0].mode_t st_mode = v370;
                    WORD2(buf[0].st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 6) = v379;
                    HIWORD(buf[0].st_gid) = 2048;
                    *(void *)&buf[0].st_rdev = v288;
                    _os_log_debug_impl((void *)&_mh_execute_header, v364, OS_LOG_TYPE_DEBUG, "%s: mapped %jd B with %zu blocks", (uint8_t *)buf, 0x20u);
                  }
                  *__error() = v363;
                }
                sub_10001FA38(2, "%s: mapped %jd B with %zu blocks", v357, v358, v359, v360, v361, v362, *(void *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40)));
                size_t v283 = *(void *)v377;
                int v282 = v385;
                uint64_t v9 = v382;
              }
              close(*v10);
              *int v10 = -1;
            }
            *(void *)(a1 + 16) = 20;
            if (*(int *)(a1 + 144) <= 0 && **(_DWORD **)(v9 + 200))
            {
              size_t v292 = 20;
            }
            else
            {
              size_t v292 = (v283 + 4) * v288 + 20;
              *(void *)(a1 + 16) = v292;
            }
            if (*(int *)(v9 + 260) >= 29)
            {
              uint64_t v293 = *(void *)(a1 + 88);
              uint64_t v294 = *(void *)(a1 + 40);
              uint64_t v295 = v293 + 152 * v294;
              int v296 = *(_DWORD *)(v295 + 116);
              *(_DWORD *)(v295 + 116) = v296 | 0x8000;
              uint64_t v297 = 2;
              if ((v296 & 0x800) != 0) {
                uint64_t v297 = 3;
              }
              v292 += v297;
              *(void *)(a1 + 16) = v292;
              if ((v296 & 0x1000) != 0)
              {
                *(void *)(a1 + 16) = v292 + 1;
                size_t v298 = strlen(*(const char **)(v293 + 152 * v294 + 88));
                size_t v299 = v292 + 2;
                if (v298 <= 0x7F) {
                  size_t v299 = v292 + 1;
                }
                size_t v383 = v298;
                size_t v292 = v299 + v298;
                *(void *)(a1 + 16) = v299 + v298;
              }
            }
            uint64_t v300 = *(void **)(a1 + 8);
            if (v292 > *(void *)(a1 + 24))
            {
              uint64_t v300 = malloc_type_realloc(v300, v292, 0xAC5A2CAFuLL);
              if (!v300)
              {
                if (dword_100058FD8)
                {
                  int v365 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_1000437FC();
                  }
                  *__error() = v365;
                }
                sub_10001FBD8("realloc", v301, v302, v303, v304, v305, v306, v307, v371[0]);
                free(v282);
                return 0xFFFFFFFFLL;
              }
              *(void *)(a1 + 8) = v300;
              size_t v292 = *(void *)(a1 + 16);
              *(void *)(a1 + 24) = v292;
            }
            uint64_t v386 = 0;
            *(void *)(a1 + 32) = 0;
            sub_10001E37C((uint64_t)v300, &v386, v292, *(_DWORD *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40) + 144));
            if (*(int *)(v9 + 260) >= 29)
            {
              sub_10001E6B8(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(_DWORD *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40) + 116));
              uint64_t v308 = *(void *)(a1 + 88);
              uint64_t v309 = *(void *)(a1 + 40);
              int v310 = *(_DWORD *)(v308 + 152 * v309 + 116);
              if ((v310 & 0x800) != 0)
              {
                sub_10001E6E4(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(unsigned char *)(v308 + 152 * v309 + 120));
                uint64_t v308 = *(void *)(a1 + 88);
                uint64_t v309 = *(void *)(a1 + 40);
                int v310 = *(_DWORD *)(v308 + 152 * v309 + 116);
              }
              if ((v310 & 0x1000) != 0) {
                sub_10001E490(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(void **)(v308 + 152 * v309 + 88), v383);
              }
            }
            sub_10001E37C(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), v288);
            sub_10001E37C(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), v285);
            sub_10001E37C(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), v283);
            sub_10001E37C(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), v287);
            if (!**(_DWORD **)(v9 + 200) && !*(_DWORD *)(*(void *)v9 + 512) && v288)
            {
              uint64_t v311 = v282 + 28;
              do
              {
                sub_10001E37C(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), *(v311 - 1));
                sub_10001E250(*(void *)(a1 + 8), &v386, *(void *)(a1 + 16), v311, v283);
                v311 += 12;
                --v288;
              }
              while (v288);
            }
            if (v386 != *(void *)(a1 + 16)) {
              sub_1000438FC();
            }
            uint64_t v312 = *(void *)(v9 + 80);
            ++*(void *)(v9 + 72);
            *(void *)(v9 + 80) = v312 + *(void *)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40) + 40);
          }
          int *v8 = *(_DWORD *)(a1 + 80);
          free(v282);
          return 1;
        }
        if (*v10 != -1) {
          sub_10004386C();
        }
        if (*(void *)(*(void *)v9 + 520) || sub_10001E174(v9, *(_DWORD *)(a1 + 80), -1))
        {
          *(_DWORD *)a1 = 2;
          sub_10001FA38(3, "uploader: finished", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v371[0]);
          return 0;
        }
        if (dword_100058FD8)
        {
          int v290 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            sub_100043834();
          }
          *__error() = v290;
        }
        sub_10001FC88("io_write_int");
        return 0xFFFFFFFFLL;
      case 2u:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xF000) != 0xA000) {
          sub_100043B5C();
        }
        uint64_t v29 = (const char **)(v23 + 152 * v21);
        if (!*(_DWORD *)(*(void *)v9 + 84))
        {
          if (dword_100058FD8)
          {
            int v49 = *__error();
            __int16 v50 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              ssize_t v51 = *v29;
              v419.dev_t st_dev = 136315138;
              *(void *)&v419.mode_t st_mode = v51;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "%s: ignoring symlink", (uint8_t *)&v419, 0xCu);
            }
            *__error() = v49;
          }
          sub_10001FDC8("%s: ignoring symlink");
          goto LABEL_393;
        }
        if (*(_DWORD *)(*(void *)v9 + 36)) {
          goto LABEL_48;
        }
        if (*v381 == -1) {
          sub_100043A70();
        }
        if (fstatat(*v381, *v29, buf, 32) == -1)
        {
          if (*__error() == 2) {
            goto LABEL_260;
          }
          if (!dword_100058FD8) {
            goto LABEL_222;
          }
          int v113 = *__error();
          uint64_t v114 = qword_100058FE8;
          if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_221;
          }
LABEL_220:
          uint64_t v136 = *v29;
          v419.dev_t st_dev = 136315138;
          *(void *)&v419.mode_t st_mode = v136;
          _os_log_error_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "%s: fstatat", (uint8_t *)&v419, 0xCu);
LABEL_221:
          *__error() = v113;
LABEL_222:
          *(void *)unint64_t v371 = *v29;
          uint64_t v137 = "%s: fstatat";
LABEL_223:
          sub_10001FBD8(v137, v93, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v371[0]);
          goto LABEL_463;
        }
        uint64_t v62 = *(_DWORD **)v9;
        int v63 = *(_DWORD *)(*(void *)v9 + 40);
        mode_t st_mode = buf[0].st_mode;
        int v65 = buf[0].st_mode & 0xF000;
        if (!v63 && v65 == 40960)
        {
          uint64_t v66 = sub_10003400C(*v381, *v29);
          if (!v66)
          {
            if (dword_100058FD8)
            {
              int v142 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043B2C(&v393, v394);
              }
              *__error() = v142;
            }
            sub_10001FC88("symlinkat_read");
            goto LABEL_463;
          }
          uint64_t v67 = v66;
          uint64_t v68 = v23 + 152 * v21;
          int v70 = *(const char **)(v68 + 88);
          int v69 = (__darwin_ino64_t *)(v68 + 88);
          int v71 = strcmp(v70, v66);
          free(v67);
          if (v71)
          {
            if (dword_100058FD8)
            {
              int v78 = *__error();
              uint64_t v79 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
              {
                int v270 = *v29;
                __darwin_ino64_t v271 = *v69;
                v419.dev_t st_dev = 136315394;
                *(void *)&v419.mode_t st_mode = v270;
                WORD2(v419.st_ino) = 2080;
                *(__darwin_ino64_t *)((char *)&v419.st_ino + 6) = v271;
                _os_log_debug_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "%s: updating symlink: %s", (uint8_t *)&v419, 0x16u);
              }
              *__error() = v78;
            }
            sub_10001FA38(2, "%s: updating symlink: %s", v72, v73, v74, v75, v76, v77, (char)*v29);
LABEL_260:
            if (!*(_DWORD *)(*(void *)v9 + 40))
            {
              if (dword_100058FD8)
              {
                int v150 = *__error();
                int v151 = qword_100058FE8;
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
                {
                  int v266 = *v29;
                  __darwin_ino64_t v267 = *(void *)(v23 + 152 * v21 + 88);
                  v419.dev_t st_dev = 136315394;
                  *(void *)&v419.mode_t st_mode = v266;
                  WORD2(v419.st_ino) = 2080;
                  *(__darwin_ino64_t *)((char *)&v419.st_ino + 6) = v267;
                  _os_log_debug_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "%s: creating symlink: %s", (uint8_t *)&v419, 0x16u);
                }
                *__error() = v150;
              }
              int v152 = (const char **)(v23 + 152 * v21 + 88);
              sub_10001FA38(2, "%s: creating symlink: %s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v29);
              int v153 = (char *)*v29;
              uint64_t v154 = *(_DWORD **)v9;
              if (*(_DWORD *)(*(void *)v9 + 32)) {
                BOOL v155 = 1;
              }
              else {
                BOOL v155 = strchr((char *)*v29, 47) != 0;
              }
              int v147 = v378;
              if (sub_10002649C(&__s, v153, v155, *((void *)v154 + 68) != 0) == -1)
              {
                if (!dword_100058FD8) {
                  goto LABEL_425;
                }
                int v178 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100043A9C(&v389, v390);
                }
                goto LABEL_424;
              }
              if (*(void *)(*(void *)v9 + 544)) {
                long long v193 = v378;
              }
              else {
                long long v193 = v381;
              }
              if (!sub_1000263A0(*v152, *v193, __s))
              {
                if (dword_100058FD8)
                {
                  int v224 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_100043ACC(&v387, v388);
                  }
                  *__error() = v224;
                }
                v221 = "mkstemplinkat";
                goto LABEL_462;
              }
              long long v184 = __s;
              if (*(void *)(*(void *)v9 + 544)) {
                long long v194 = v378;
              }
              else {
                long long v194 = v381;
              }
              int v183 = *v194;
              int v149 = 1;
              if (__s) {
                goto LABEL_342;
              }
              goto LABEL_341;
            }
            if (dword_100058FD8)
            {
              int v145 = *__error();
              uint64_t v146 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v260 = *v29;
                __darwin_ino64_t v261 = *(void *)(v23 + 152 * v21 + 88);
                v419.dev_t st_dev = 136315394;
                *(void *)&v419.mode_t st_mode = v260;
                WORD2(v419.st_ino) = 2080;
                *(__darwin_ino64_t *)((char *)&v419.st_ino + 6) = v261;
                _os_log_debug_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEBUG, "%s: creating symlink in-place: %s", (uint8_t *)&v419, 0x16u);
              }
              *__error() = v145;
            }
            sub_10001FA38(2, "%s: creating symlink in-place: %s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v29);
            if (symlinkat(*(const char **)(v23 + 152 * v21 + 88), *v381, *v29) == -1)
            {
              if (dword_100058FD8)
              {
                int v156 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100043AFC(&v391, v392);
                }
                *__error() = v156;
              }
              uint64_t v137 = "symlinkat";
              goto LABEL_223;
            }
            int v147 = v378;
            if (*(void *)(*(void *)v9 + 544)) {
              int v148 = v378;
            }
            else {
              int v148 = v381;
            }
            int v149 = 1;
          }
          else
          {
            int v149 = 0;
            int v148 = v381;
            int v147 = v378;
          }
          int v183 = *v148;
LABEL_341:
          long long v184 = (char *)*v29;
LABEL_342:
          sub_100027170(v9, v149, v183, v29, v184);
          if (v149)
          {
            a2 = __s;
            if (__s)
            {
              if (*(void *)(*(void *)v9 + 544)) {
                long long v185 = v147;
              }
              else {
                long long v185 = v381;
              }
              if (sub_10000B308(*v185, __s, *v381, *v29, 1) == -1)
              {
                if (dword_100058FD8)
                {
                  int v195 = *__error();
                  long long v196 = qword_100058FE8;
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v273 = *v29;
                    v419.dev_t st_dev = 136315394;
                    *(void *)&v419.mode_t st_mode = __s;
                    WORD2(v419.st_ino) = 2080;
                    *(__darwin_ino64_t *)((char *)&v419.st_ino + 6) = (__darwin_ino64_t)v273;
                    _os_log_error_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "%s: move_file %s", (uint8_t *)&v419, 0x16u);
                  }
                  *__error() = v195;
                }
                sub_10001FBD8("%s: move_file %s", v186, v187, v188, v189, v190, v191, v192, (char)__s);
                long long v197 = v381;
                if (*(void *)(*(void *)v9 + 544)) {
                  long long v197 = v147;
                }
                goto LABEL_420;
              }
              free(__s);
            }
          }
          if (v149)
          {
LABEL_48:
            sub_1000387F4((uint64_t *)v29, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            goto LABEL_393;
          }
          goto LABEL_393;
        }
        if (v65 == 0x4000 && v62[141])
        {
          unsigned int v117 = v62[24];
          if (v117 > 5 || ((1 << v117) & 0x35) == 0) {
            goto LABEL_207;
          }
        }
        else if (v62[24] != 2)
        {
          goto LABEL_207;
        }
        if (!sub_100037EA4(a1, (void *)v9, 3)) {
          goto LABEL_463;
        }
        int v63 = *(_DWORD *)(*(void *)v9 + 40);
        mode_t st_mode = buf[0].st_mode;
LABEL_207:
        int v128 = st_mode & 0xF000;
        if (v63)
        {
          int v129 = *v381;
          int v130 = *v29;
          if (v128 != 0x4000)
          {
            int v131 = 0;
            goto LABEL_259;
          }
        }
        else
        {
          if (v128 != 0x4000) {
            goto LABEL_260;
          }
          int v129 = *v381;
          int v130 = *v29;
        }
        int v131 = 128;
LABEL_259:
        if (unlinkat(v129, v130, v131) != -1) {
          goto LABEL_260;
        }
        if (!dword_100058FD8) {
          goto LABEL_445;
        }
        int v42 = *__error();
        int v43 = qword_100058FE8;
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_444;
        }
LABEL_443:
        __int16 v223 = *v29;
        v419.dev_t st_dev = 136315138;
        *(void *)&v419.mode_t st_mode = v223;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%s: unlinkat", (uint8_t *)&v419, 0xCu);
LABEL_444:
        *__error() = v42;
LABEL_445:
        sub_10001FBD8("%s: unlinkat", v41, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v29);
        goto LABEL_446;
      case 4u:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xF000) != 0xC000) {
          sub_100043E64();
        }
        uint64_t v29 = (const char **)(v23 + 152 * v21);
        if (!*(_DWORD *)(*(void *)v9 + 108))
        {
          if (!dword_100058FD8) {
            goto LABEL_85;
          }
          int v32 = *__error();
          uint64_t v33 = qword_100058FE8;
          if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO)) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }
        uint64_t v39 = v378;
        if (*(_DWORD *)(*(void *)v9 + 36)) {
          goto LABEL_392;
        }
        if (*v381 == -1) {
          sub_100043DD8();
        }
        if (fstatat(*v381, *v29, buf, 32) == -1)
        {
          if (*__error() != 2)
          {
            if (!dword_100058FD8) {
              goto LABEL_222;
            }
            int v113 = *__error();
            uint64_t v114 = qword_100058FE8;
            if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_221;
            }
            goto LABEL_220;
          }
        }
        else
        {
          int v40 = buf[0].st_mode & 0xF000;
          if (v40 == 49152)
          {
            int v111 = 0;
            int v112 = 0;
            goto LABEL_320;
          }
          if (v40 == 0x4000 && unlinkat(*v381, *v29, 128) == -1)
          {
            if (!dword_100058FD8) {
              goto LABEL_445;
            }
            int v42 = *__error();
            int v43 = qword_100058FE8;
            if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_444;
            }
            goto LABEL_443;
          }
        }
        int v110 = *(_DWORD **)v9;
        if (*(_DWORD *)(*(void *)v9 + 40))
        {
          if (sub_10002663C() == -1)
          {
            if (dword_100058FD8)
            {
              int v141 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043E34(&v415, v416);
              }
              *__error() = v141;
            }
            uint64_t v137 = "mksock";
            goto LABEL_223;
          }
          int v111 = 0;
          int v112 = 1;
        }
        else
        {
          uint64_t v132 = (char *)*v29;
          if (v110[8]) {
            BOOL v133 = 1;
          }
          else {
            BOOL v133 = strchr((char *)*v29, 47) != 0;
          }
          if (sub_10002649C(&__s, v132, v133, *((void *)v110 + 68) != 0) == -1)
          {
            if (!dword_100058FD8) {
              goto LABEL_425;
            }
            int v178 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100043A9C(&v413, v414);
            }
            goto LABEL_424;
          }
          long long v179 = *(const char **)(*(void *)v9 + 544);
          if (!v179) {
            long long v179 = *(const char **)(a1 + 56);
          }
          if (!sub_10002645C(v179, __s))
          {
            if (dword_100058FD8)
            {
              int v222 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043E04(&v411, v412);
              }
              *__error() = v222;
            }
            v221 = "mkstempsock";
            goto LABEL_462;
          }
          int v112 = 1;
          int v111 = __s;
        }
LABEL_320:
        long long v180 = v381;
        if (*(void *)(*(void *)v9 + 544)) {
          long long v180 = v378;
        }
        if (!v112 || !v111) {
          int v111 = (char *)*v29;
        }
        sub_100027170(v9, v112, *v180, v29, v111);
        a2 = __s;
        if (__s) {
          int v181 = v112;
        }
        else {
          int v181 = 0;
        }
        if (v181 != 1) {
          goto LABEL_392;
        }
        if (*(void *)(*(void *)v9 + 544)) {
          long long v182 = v378;
        }
        else {
          long long v182 = v381;
        }
        if (sub_10000B308(*v182, __s, *v381, *v29, 1) != -1) {
          goto LABEL_391;
        }
        if (!dword_100058FD8) {
          goto LABEL_418;
        }
        int v176 = *__error();
        long long v177 = qword_100058FE8;
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_417;
        }
        goto LABEL_538;
      case 9u:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xF000) != 0x1000) {
          sub_100043DAC();
        }
        uint64_t v29 = (const char **)(v23 + 152 * v21);
        if (!*(_DWORD *)(*(void *)v9 + 108))
        {
          if (!dword_100058FD8) {
            goto LABEL_85;
          }
          int v32 = *__error();
          uint64_t v33 = qword_100058FE8;
          if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO)) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }
        uint64_t v39 = v378;
        if (*(_DWORD *)(*(void *)v9 + 36)) {
          goto LABEL_392;
        }
        if (*v381 == -1) {
          sub_100043D20();
        }
        if (fstatat(*v381, *v29, buf, 32) == -1)
        {
          if (*__error() != 2)
          {
            if (!dword_100058FD8) {
              goto LABEL_222;
            }
            int v113 = *__error();
            uint64_t v114 = qword_100058FE8;
            if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_221;
            }
            goto LABEL_220;
          }
          goto LABEL_201;
        }
        mode_t v44 = buf[0].st_mode;
        int v45 = buf[0].st_mode & 0xF000;
        if (v45 == 4096)
        {
          uint64_t v46 = 0;
          int v47 = 0;
          goto LABEL_378;
        }
        uint64_t v115 = *(_DWORD **)v9;
        if (v45 == 0x4000 && v115[141])
        {
          unsigned int v116 = v115[24];
          if (v116 > 5 || ((1 << v116) & 0x35) == 0) {
            goto LABEL_199;
          }
        }
        else if (v115[24] != 2)
        {
          goto LABEL_199;
        }
        if (!sub_100037EA4(a1, (void *)v9, 3)) {
          goto LABEL_463;
        }
        mode_t v44 = buf[0].st_mode;
LABEL_199:
        if ((v44 & 0xF000) == 0x4000 && unlinkat(*v381, *v29, 128) == -1)
        {
          if (!dword_100058FD8) {
            goto LABEL_445;
          }
          int v42 = *__error();
          int v43 = qword_100058FE8;
          if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_444;
          }
          goto LABEL_443;
        }
LABEL_201:
        uint64_t v127 = *(_DWORD **)v9;
        if (*(_DWORD *)(*(void *)v9 + 40))
        {
          if (mkfifoat(*v381, *v29, 0x180u) == -1)
          {
            if (dword_100058FD8)
            {
              int v157 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043D7C(&v409, v410);
              }
              *__error() = v157;
            }
            uint64_t v137 = "mkfifoat";
            goto LABEL_223;
          }
          uint64_t v46 = 0;
          int v47 = 1;
        }
        else
        {
          uint64_t v138 = (char *)*v29;
          if (v127[8]) {
            BOOL v139 = 1;
          }
          else {
            BOOL v139 = strchr((char *)*v29, 47) != 0;
          }
          if (sub_10002649C(&__s, v138, v139, *((void *)v127 + 68) != 0) == -1)
          {
            if (!dword_100058FD8) {
              goto LABEL_425;
            }
            int v178 = *__error();
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_100043A9C(&v407, v408);
            }
            goto LABEL_424;
          }
          long long v198 = v381;
          if (*(void *)(*(void *)v9 + 544)) {
            long long v198 = v378;
          }
          if (!sub_1000263E4(*v198, __s))
          {
            if (dword_100058FD8)
            {
              int v225 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043D4C(&v405, v406);
              }
              *__error() = v225;
            }
            v221 = "mkstempfifoat";
            goto LABEL_462;
          }
          int v47 = 1;
          uint64_t v46 = __s;
        }
LABEL_378:
        long long v199 = v381;
        if (*(void *)(*(void *)v9 + 544)) {
          long long v199 = v378;
        }
        if (!v47 || !v46) {
          uint64_t v46 = (char *)*v29;
        }
        sub_100027170(v9, v47, *v199, v29, v46);
        a2 = __s;
        if (__s) {
          int v200 = v47;
        }
        else {
          int v200 = 0;
        }
        if (v200 != 1) {
          goto LABEL_392;
        }
        if (*(void *)(*(void *)v9 + 544)) {
          long long v201 = v378;
        }
        else {
          long long v201 = v381;
        }
        if (sub_10000B308(*v201, __s, *v381, *v29, 1) != -1) {
          goto LABEL_391;
        }
        if (!dword_100058FD8) {
          goto LABEL_418;
        }
        int v176 = *__error();
        long long v177 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_538;
        }
        goto LABEL_417;
      case 0xAu:
      case 0xEu:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xB000 | 0x4000) != 0x6000) {
          sub_100043C68();
        }
        uint64_t v29 = (const char **)(v23 + 152 * v21);
        uint64_t v30 = *(_DWORD **)v9;
        if (!*(_DWORD *)(*(void *)v9 + 104)) {
          goto LABEL_33;
        }
        int v31 = v30[52];
        if (v31 == 1) {
          goto LABEL_120;
        }
        if (v31 == 2 || geteuid())
        {
LABEL_33:
          if (dword_100058FD8)
          {
            int v32 = *__error();
            uint64_t v33 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
LABEL_83:
              uint64_t v52 = *v29;
              v419.dev_t st_dev = 136315138;
              *(void *)&v419.mode_t st_mode = v52;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "skipping non-regular file %s", (uint8_t *)&v419, 0xCu);
            }
LABEL_84:
            *__error() = v32;
          }
LABEL_85:
          sub_10001FDC8("skipping non-regular file %s");
          goto LABEL_393;
        }
        uint64_t v30 = *(_DWORD **)v9;
LABEL_120:
        if (v30[9]) {
          goto LABEL_392;
        }
        if (*v381 == -1) {
          sub_100043C94();
        }
        if (fstatat(*v381, *v29, buf, 32) == -1)
        {
          if (*__error() == 2) {
            goto LABEL_183;
          }
          if (!dword_100058FD8) {
            goto LABEL_222;
          }
          int v113 = *__error();
          uint64_t v114 = qword_100058FE8;
          if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_221;
          }
          goto LABEL_220;
        }
        mode_t v90 = buf[0].st_mode;
        if ((buf[0].st_mode & 0xB000 | 0x4000) == 0x6000)
        {
          if (((*v27 ^ buf[0].st_mode) & 0x6000) != 0 || *(_DWORD *)(v23 + 152 * v21 + 36) != buf[0].st_rdev)
          {
            if (dword_100058FD8)
            {
              int v118 = *__error();
              uint64_t v119 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v259 = *v29;
                v419.dev_t st_dev = 136315138;
                *(void *)&v419.mode_t st_mode = v259;
                _os_log_debug_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "%s: updating device", (uint8_t *)&v419, 0xCu);
              }
              *__error() = v118;
            }
            sub_10001FA38(2, "%s: updating device", v84, v85, v86, v87, v88, v89, (char)*v29);
LABEL_183:
            int v120 = *(_DWORD **)v9;
            if (*(_DWORD *)(*(void *)v9 + 40))
            {
              if (mknodat(*v381, *v29, *v27 & 0x6000, *(_DWORD *)(v23 + 152 * v21 + 36)) == -1)
              {
                if (dword_100058FD8)
                {
                  int v140 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_100043CF0(&v403, v404);
                  }
                  *__error() = v140;
                }
                uint64_t v137 = "mknodat";
                goto LABEL_223;
              }
              int v91 = 0;
              int v92 = 1;
            }
            else
            {
              int v121 = (char *)*v29;
              if (v120[8]) {
                BOOL v122 = 1;
              }
              else {
                BOOL v122 = strchr((char *)*v29, 47) != 0;
              }
              if (sub_10002649C(&__s, v121, v122, *((void *)v120 + 68) != 0) == -1)
              {
                if (!dword_100058FD8) {
                  goto LABEL_425;
                }
                int v178 = *__error();
                if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                  sub_100043A9C(&v401, v402);
                }
LABEL_424:
                *__error() = v178;
LABEL_425:
                sub_10001FC88("mktemplate");
                goto LABEL_463;
              }
              uint64_t v158 = v381;
              if (*(void *)(*(void *)v9 + 544)) {
                uint64_t v158 = v378;
              }
              if (!sub_100026420(*v158, __s, *v27 & 0x6000, *(_DWORD *)(v23 + 152 * v21 + 36)))
              {
                if (dword_100058FD8)
                {
                  int v220 = *__error();
                  if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                    sub_100043CC0(&v399, v400);
                  }
                  *__error() = v220;
                }
                v221 = "mkstempnodat";
LABEL_462:
                sub_10001FBD8(v221, v159, v160, v161, v162, v163, v164, v165, v371[0]);
                free(__s);
                goto LABEL_463;
              }
              int v92 = 1;
              int v91 = __s;
            }
          }
          else
          {
            int v91 = 0;
            int v92 = 0;
          }
          uint64_t v39 = v378;
          long long v166 = v381;
          if (*(void *)(*(void *)v9 + 544)) {
            long long v166 = v378;
          }
          if (!v92 || !v91) {
            int v91 = (char *)*v29;
          }
          sub_100027170(v9, v92, *v166, (const char **)(v23 + 152 * v21), v91);
          a2 = __s;
          if (__s) {
            int v167 = v92;
          }
          else {
            int v167 = 0;
          }
          if (v167 != 1) {
            goto LABEL_392;
          }
          if (*(void *)(*(void *)v9 + 544)) {
            uint64_t v168 = v378;
          }
          else {
            uint64_t v168 = v381;
          }
          if (sub_10000B308(*v168, __s, *v381, *v29, 1) != -1)
          {
LABEL_391:
            free(__s);
LABEL_392:
            sub_10003961C((uint64_t *)v29, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            goto LABEL_393;
          }
          if (dword_100058FD8)
          {
            int v176 = *__error();
            long long v177 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
LABEL_538:
              v272 = *v29;
              v419.dev_t st_dev = 136315394;
              *(void *)&v419.mode_t st_mode = __s;
              WORD2(v419.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&v419.st_ino + 6) = (__darwin_ino64_t)v272;
              _os_log_error_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_ERROR, "%s: move_file %s", (uint8_t *)&v419, 0x16u);
            }
LABEL_417:
            *__error() = v176;
          }
LABEL_418:
          sub_10001FBD8("%s: move_file %s", v169, v170, v171, v172, v173, v174, v175, (char)__s);
          long long v197 = v381;
          if (*(void *)(*(void *)v9 + 544)) {
            long long v197 = v39;
          }
LABEL_420:
          unlinkat(*v197, __s, 0);
          ++*(void *)(v9 + 240);
          free(__s);
          goto LABEL_393;
        }
        uint64_t v134 = *(_DWORD **)v9;
        if ((buf[0].st_mode & 0xF000) == 0x4000 && v134[141])
        {
          unsigned int v135 = v134[24];
          if (v135 > 5 || ((1 << v135) & 0x35) == 0) {
            goto LABEL_234;
          }
        }
        else if (v134[24] != 2)
        {
          goto LABEL_234;
        }
        if (!sub_100037EA4(a1, (void *)v9, 3)) {
          goto LABEL_463;
        }
        mode_t v90 = buf[0].st_mode;
LABEL_234:
        if ((v90 & 0xF000) != 0x4000 || unlinkat(*v381, *v29, 128) != -1) {
          goto LABEL_183;
        }
        if (!dword_100058FD8) {
          goto LABEL_445;
        }
        int v42 = *__error();
        int v43 = qword_100058FE8;
        if (!os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_444;
        }
        goto LABEL_443;
      case 0xCu:
        memset(buf, 0, 144);
        if ((*v27 & 0xF000) != 0x4000) {
          sub_100043A44();
        }
        uint64_t v29 = (const char **)(v23 + 152 * v21);
        uint64_t v48 = *(_DWORD **)v9;
        if (!*(_DWORD *)(*(void *)v9 + 32) && !v48[47] && !v48[48])
        {
          if (dword_100058FD8)
          {
            int v123 = *__error();
            uint64_t v124 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
            {
              uint64_t v125 = *v29;
              int v126 = *(_DWORD *)(*(void *)v9 + 188);
              v419.dev_t st_dev = 136315394;
              *(void *)&v419.mode_t st_mode = v125;
              WORD2(v419.st_ino) = 1024;
              *(_DWORD *)((char *)&v419.st_ino + 6) = v126;
              _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_INFO, "%s: ignoring directory 1 %d", (uint8_t *)&v419, 0x12u);
            }
            *__error() = v123;
          }
          sub_10001FDC8("%s: ignoring directory 1 %d");
          goto LABEL_393;
        }
        if (v48[9]) {
          goto LABEL_72;
        }
        if (*v381 == -1) {
          sub_100043A18();
        }
        if (fstatat(*v381, *v29, buf, 32) != -1)
        {
          if ((buf[0].st_mode & 0xF000) == 0x4000)
          {
            if (dword_100058FD8)
            {
              int v59 = *__error();
              int v60 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG))
              {
                v239 = *v29;
                v419.dev_t st_dev = 136315138;
                *(void *)&v419.mode_t st_mode = v239;
                _os_log_debug_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "%s: updating directory", (uint8_t *)&v419, 0xCu);
              }
              *__error() = v59;
            }
            sub_10001FA38(2, "%s: updating directory", v53, v54, v55, v56, v57, v58, (char)*v29);
            size_t v61 = *(_DWORD **)v9;
            if (*(_DWORD *)(*(void *)v9 + 60) && buf[0].st_mode != *v27
              || v61[14] && !v61[32] && buf[0].st_mtimespec.tv_sec != *(void *)(v23 + 152 * v21 + 48))
            {
              sub_100037C70((const char **)(v23 + 152 * v21));
              size_t v61 = *(_DWORD **)v9;
            }
            a3 = v61[24];
            if ((a3 - 3) <= 1) {
              sub_100037EA4(a1, (void *)v9, a3);
            }
            goto LABEL_393;
          }
          if (*(_DWORD *)(*(void *)v9 + 80) && sub_100037DB4((uint64_t)buf, (const char **)(v23 + 152 * v21), *v381)) {
            goto LABEL_393;
          }
          if (dword_100058FD8)
          {
            int v105 = *__error();
            uint64_t v106 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v263 = *v29;
              v419.dev_t st_dev = 136315138;
              *(void *)&v419.mode_t st_mode = v263;
              _os_log_error_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "%s: not a directory", (uint8_t *)&v419, 0xCu);
            }
            *__error() = v105;
          }
          sub_10001FB50("%s: not a directory", *v29);
          goto LABEL_463;
        }
        if (*__error() == 2)
        {
          if (sub_100026008(*(_DWORD *)(a1 + 64), (char *)*v29, ~*(_WORD *)(a1 + 48) & 0x1FF) != -1
            || *__error() == 17)
          {
            *(_DWORD *)(*(void *)(a1 + 136) + 4 * *(void *)(a1 + 40)) = 1;
LABEL_72:
            sub_100037C70((const char **)(v23 + 152 * v21));
            goto LABEL_393;
          }
          if (dword_100058FD8)
          {
            int v218 = *__error();
            long long v219 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
            {
              unint64_t v274 = *v29;
              v419.dev_t st_dev = 136315138;
              *(void *)&v419.mode_t st_mode = v274;
              _os_log_error_impl((void *)&_mh_execute_header, v219, OS_LOG_TYPE_ERROR, "%s: mkpathat", (uint8_t *)&v419, 0xCu);
            }
            *__error() = v218;
          }
          sub_10001FBD8("%s: mkpathat", v94, v95, v96, v97, v98, v99, v100, (char)*v29);
          goto LABEL_463;
        }
        if (!dword_100058FD8) {
          goto LABEL_222;
        }
        int v113 = *__error();
        uint64_t v114 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_220;
        }
        goto LABEL_221;
      default:
        goto LABEL_394;
    }
  }
}

uint64_t sub_100037990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_DWORD *)(*(void *)a2 + 56) && !*(_DWORD *)(*(void *)a2 + 60)) {
    return 1;
  }
  if (dword_100058FD8)
  {
    int v10 = *__error();
    uint64_t v11 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "fixing up directory times and permissions", (uint8_t *)&buf, 2u);
    }
    *__error() = v10;
  }
  uint64_t v12 = 1;
  sub_10001FA38(1, "fixing up directory times and permissions", a3, a4, a5, a6, a7, a8, v32);
  if (*(void *)(a1 + 96))
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    timespec v15 = (timespec)0;
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 88);
      uint64_t v17 = v16 + v13;
      if ((*(_WORD *)(v16 + v13 + 24) & 0xF000) == 0x4000)
      {
        *(timespec *)&buf.st_blksize_t size = v15;
        *(timespec *)buf.st_qspare = v15;
        buf.st_birthtimespeCC_MD4_CTX c = v15;
        *(timespec *)&buf.st_size_t size = v15;
        buf.st_mtimespeCC_MD4_CTX c = v15;
        buf.st_ctimespeCC_MD4_CTX c = v15;
        *(timespec *)&buf.st_uid = v15;
        buf.st_atimespeCC_MD4_CTX c = v15;
        *(timespec *)&buf.dev_t st_dev = v15;
        if ((*(_WORD *)(v17 + 24) & 0xF000) != 0x4000) {
          sub_100043F24();
        }
        if (*(_DWORD *)(*(void *)a2 + 32) && !*(_DWORD *)(*(void *)a2 + 36))
        {
          if (fstatat(*(_DWORD *)(a1 + 64), *(const char **)v17, &buf, 32) == -1)
          {
            if (dword_100058FD8)
            {
              int v28 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043EBC();
              }
              *__error() = v28;
            }
            sub_10001FBD8("%s: fstatat", v18, v19, v20, v21, v22, v23, v24, *(void *)(v16 + v13));
            return 0;
          }
          if ((buf.st_mode & 0xF000) == 0x4000)
          {
            int v25 = sub_100027170(a2, *(_DWORD *)(*(void *)(a1 + 136) + 4 * v14), *(_DWORD *)(a1 + 64), (const char **)(v16 + v13), *(char **)v17);
            timespec v15 = (timespec)0;
            if (!v25) {
              return 0;
            }
          }
          else if (!*(_DWORD *)(*(void *)a2 + 80) {
                 || (BOOL v26 = sub_100037DB4((uint64_t)&buf, (const char **)(v16 + v13), *(_DWORD *)(a1 + 64)),
          }
                     timespec v15 = (timespec)0,
                     !v26))
          {
            if (dword_100058FD8)
            {
              int v29 = *__error();
              uint64_t v30 = qword_100058FE8;
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_INFO))
              {
                uint64_t v31 = *(void *)(v16 + v13);
                *(_DWORD *)uint64_t v34 = 136315138;
                uint64_t v35 = v31;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s: not a directory", v34, 0xCu);
              }
              *__error() = v29;
            }
            sub_10001FDC8("%s: not a directory", *(const char **)(v16 + v13));
            return 0;
          }
        }
      }
      ++v14;
      v13 += 152;
      if (v14 >= *(void *)(a1 + 96)) {
        return 1;
      }
    }
  }
  return v12;
}

void sub_100037C70(const char **a1)
{
  uint64_t v2 = *a1;
  size_t v3 = strlen(*a1);
  if (!v3) {
    sub_100043F50();
  }
  size_t v10 = v3;
  if (dword_100058FD8)
  {
    int v11 = *__error();
    uint64_t v12 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *a1;
      if ((*a1)[v10 - 1] == 47) {
        unint64_t v14 = "";
      }
      else {
        unint64_t v14 = "/";
      }
      *(_DWORD *)stat buf = 136315394;
      uint64_t v16 = v13;
      __int16 v17 = 2080;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s%s", buf, 0x16u);
    }
    *__error() = v11;
    uint64_t v2 = *a1;
  }
  sub_10001FA38(0, "%s%s", v4, v5, v6, v7, v8, v9, (char)v2);
}

BOOL sub_100037DB4(uint64_t a1, const char **a2, int a3)
{
  if ((*(_WORD *)(a1 + 4) & 0xF000) == 0xA000)
  {
    memset(&v13, 0, sizeof(v13));
    if (fstatat(a3, *a2, &v13, 0) != -1) {
      return (v13.st_mode & 0xF000) == 0x4000;
    }
    if (dword_100058FD8)
    {
      int v12 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100043EBC();
      }
      *__error() = v12;
    }
    sub_10001FBD8("%s: fstatat", v4, v5, v6, v7, v8, v9, v10, (char)*a2);
  }
  return 0;
}

uint64_t sub_100037EA4(uint64_t a1, void *a2, int a3)
{
  int __s1 = 0;
  int v92 = 0;
  uint64_t v93 = 0;
  uint64_t v6 = (const char **)(*(void *)(a1 + 88) + 152 * *(void *)(a1 + 40));
  uint64_t v7 = *v6;
  int v8 = strcmp(*v6, ".");
  uint64_t v9 = "";
  if (v8) {
    uint64_t v9 = v7;
  }
  if (asprintf(&__s1, "%s/%s", *(const char **)(a1 + 56), v9) == -1)
  {
    if (dword_100058FD8)
    {
      int v72 = *__error();
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100043F7C();
      }
      *__error() = v72;
    }
    sub_10001FC88("%s: asprintf", *v6);
    return 0;
  }
  else
  {
    if (!hcreate(*(void *)(a1 + 96)))
    {
      if (dword_100058FD8)
      {
        int v74 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100043FE4();
        }
        *__error() = v74;
      }
      v10.key = "hcreate";
      goto LABEL_99;
    }
    int v87 = a3;
    uint64_t v86 = a2;
    size_t v17 = strlen(*v6);
    unint64_t v18 = *(void *)(a1 + 40);
    unint64_t v19 = *(void *)(a1 + 96);
    if (v18 < v19)
    {
      size_t v20 = v17;
      size_t v88 = v17 + 1;
      uint64_t v21 = 152 * v18 + 16;
      do
      {
        uint64_t v22 = *(void *)(a1 + 88);
        uint64_t v23 = *(char **)(v22 + v21);
        if (strcmp(v23, "."))
        {
          if (v8 && strncmp(*v6, v23, v20)) {
            break;
          }
          uint64_t v24 = strrchr(v23, 47);
          unint64_t v25 = v24 - v23;
          if (!v24) {
            unint64_t v25 = 0;
          }
          if (v8)
          {
            if (v25 >= v88) {
              goto LABEL_20;
            }
          }
          else if (v25)
          {
            goto LABEL_20;
          }
          v10.key = strdup(v23);
          if (!v10.key)
          {
            a2 = v86;
            if (dword_100058FD8)
            {
              int v81 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100043600();
              }
              *__error() = v81;
            }
            v10.key = "strdup";
            goto LABEL_99;
          }
          key = v10.key;
          v10.int data = 0;
          v10.key = (char *)hsearch(v10, ENTER);
          if (!v10.key)
          {
            a2 = v86;
            if (dword_100058FD8)
            {
              int v82 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_1000440D8();
              }
              *__error() = v82;
            }
            v10.key = "hsearch";
            goto LABEL_99;
          }
          if (*(char **)v10.key != key)
          {
            int v83 = (const char **)(v22 + v21);
            a2 = v86;
            if (dword_100058FD8)
            {
              int v84 = *__error();
              if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
                sub_100044110();
              }
              *__error() = v84;
            }
            sub_10001FB50("%s: duplicate", *v83);
            free(key);
            goto LABEL_100;
          }
          unint64_t v19 = *(void *)(a1 + 96);
        }
LABEL_20:
        ++v18;
        v21 += 152;
      }
      while (v18 < v19);
    }
    int v92 = __s1;
    uint64_t v93 = 0;
    sub_10002A020(__s1);
    v10.key = (char *)fts_open(&v92, 16, 0);
    if (v10.key)
    {
      uint64_t v27 = v10.key;
      size_t v28 = strlen(*(const char **)(a1 + 56));
      int v29 = fts_read((FTS *)v27);
      a2 = v86;
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = 0;
        unint64_t v32 = v28 + 1;
        uint64_t v33 = &dword_100058FD8;
        uint64_t v34 = (NSObject **)&qword_100058FE8;
        do
        {
          int fts_info = v30->fts_info;
          if (fts_info == 10 || v32 >= v30->fts_pathlen) {
            goto LABEL_72;
          }
          if (fts_info != 6 && !sub_1000122C8(v86, (uint64_t)v30, 1))
          {
            if (v30->fts_errno)
            {
              if (v30->fts_info == 4)
              {
                if (*v33)
                {
                  uint64_t v52 = v33;
                  int v53 = *__error();
                  uint64_t v54 = v34;
                  uint64_t v55 = *v34;
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                  {
                    int fts_namelen = v30->fts_namelen;
                    *(_DWORD *)stat buf = 68157954;
                    LODWORD(v91[0]) = fts_namelen;
                    WORD2(v91[0]) = 2080;
                    *(void *)((char *)v91 + 6) = v30->fts_name;
                    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%.*s", buf, 0x12u);
                  }
                  *__error() = v53;
                  uint64_t v33 = v52;
                  uint64_t v34 = v54;
                }
                sub_10001FA38(0, "%.*s", v36, v37, v38, v39, v40, v41, v30->fts_namelen);
              }
              ++v86[30];
            }
            *__error() = 0;
            goto LABEL_72;
          }
          if (!v30->fts_statp) {
            sub_100044054();
          }
          fts_path = v30->fts_path;
          if (fts_path[v32] == 47) {
            ++v32;
          }
          int v43 = v30->fts_info;
          if (!*(_DWORD *)(*v86 + 100))
          {
            if (v43 == 6) {
              goto LABEL_36;
            }
            if (sub_10002A51C(&fts_path[v32], v43 == 1, 1, v31 != 0) == -1)
            {
              if (*v33)
              {
                uint64_t v57 = v33;
                int v58 = *__error();
                int v59 = v34;
                int v60 = *v34;
                if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                {
                  size_t v61 = &v30->fts_path[v32];
                  *(_DWORD *)stat buf = 136315138;
                  v91[0] = v61;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "skip excluded file %s", buf, 0xCu);
                }
                *__error() = v58;
                uint64_t v33 = v57;
                uint64_t v34 = v59;
              }
              sub_10001FDC8("skip excluded file %s", &v30->fts_path[v32]);
              fts_set((FTS *)v27, v30, 4);
              goto LABEL_71;
            }
            int v43 = v30->fts_info;
          }
          if (v43 == 1 && v31) {
            goto LABEL_72;
          }
LABEL_36:
          if (v43 == 6 && !v31) {
            goto LABEL_72;
          }
          v94.key = &v30->fts_path[v32];
          v94.int data = 0;
          mode_t v44 = hsearch(v94, FIND);
          int v51 = v30->fts_info;
          if (v44)
          {
            if (v51 == 1 && strcmp(v30->fts_path, v92)) {
              fts_set((FTS *)v27, v30, 4);
            }
            goto LABEL_72;
          }
          if (v51 == 1)
          {
            uint64_t v31 = v30;
            goto LABEL_72;
          }
          if (v30 == v31)
          {
            if (v51 != 6) {
              sub_1000440AC();
            }
            uint64_t v31 = 0;
LABEL_65:
            if (v30->fts_number)
            {
              if (*v33)
              {
                uint64_t v62 = v33;
                int v63 = *__error();
                uint64_t v64 = v34;
                int v65 = *v34;
                if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                {
                  uint64_t v66 = v30->fts_path;
                  *(_DWORD *)stat buf = 136315138;
                  v91[0] = v66;
                  _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "%s: not empty, cannot delete", buf, 0xCu);
                }
                *__error() = v63;
                uint64_t v33 = v62;
                uint64_t v34 = v64;
              }
              sub_10001FDC8("%s: not empty, cannot delete", v30->fts_path);
LABEL_71:
              ++v30->fts_parent->fts_number;
              goto LABEL_72;
            }
            goto LABEL_74;
          }
          if (v51 == 6) {
            goto LABEL_65;
          }
LABEL_74:
          if (v87 == 3)
          {
            if (*v33)
            {
              uint64_t v67 = v33;
              int v68 = *__error();
              int v69 = v34;
              int v70 = *v34;
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              {
                int v71 = &v30->fts_path[v32];
                *(_DWORD *)stat buf = 136315138;
                v91[0] = v71;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "%s: deleting", buf, 0xCu);
              }
              *__error() = v68;
              uint64_t v33 = v67;
              uint64_t v34 = v69;
            }
            sub_10001FA38(0, "%s: deleting", v45, v46, v47, v48, v49, v50, LOBYTE(v30->fts_path) + v32);
            if (*(_DWORD *)(*v86 + 36)) {
              goto LABEL_72;
            }
          }
          else if (v87 != 4)
          {
            sub_100044080();
          }
          sub_1000168B4((uint64_t)v86, v30->fts_path, v32, (char **)(a1 + 112), (unint64_t *)(a1 + 120), (unint64_t *)(a1 + 128), &v30->fts_statp->st_dev);
LABEL_72:
          uint64_t v30 = fts_read((FTS *)v27);
        }
        while (v30);
      }
      uint64_t v73 = 1;
      a3 = v87;
    }
    else
    {
      a2 = v86;
      if (dword_100058FD8)
      {
        int v75 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_10004401C();
        }
        *__error() = v75;
      }
      v10.key = "fts_open";
LABEL_99:
      sub_10001FBD8(v10.key, (uint64_t)v10.data, v11, v12, v13, v14, v15, v16, v85);
LABEL_100:
      uint64_t v27 = 0;
      uint64_t v73 = 0;
    }
    if (a3 == 3)
    {
      qsort(*(void **)(a1 + 112), *(void *)(a1 + 120), 0x98uLL, (int (__cdecl *)(const void *, const void *))sub_100012234);
      if (sub_100016A2C(a2, *(_DWORD *)(a1 + 64), *(void *)(a1 + 112), *(void *)(a1 + 120), v76, v77, v78, v79))uint64_t v73 = v73; {
      else
      }
        uint64_t v73 = 0;
      sub_100012830(*(char **)(a1 + 112), *(void *)(a1 + 120));
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
    }
    fts_close((FTS *)v27);
    free(__s1);
    hdestroy();
  }
  return v73;
}

void sub_1000387F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_100058FD8)
  {
    int v9 = *__error();
    ENTRY v10 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *a1;
      uint64_t v12 = a1[11];
      *(_DWORD *)stat buf = 136315394;
      uint64_t v14 = v11;
      __int16 v15 = 2080;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s -> %s", buf, 0x16u);
    }
    *__error() = v9;
  }
  sub_10001FA38(0, "%s -> %s", a3, a4, a5, a6, a7, a8, *a1);
}

uint64_t sub_1000388F0(int a1, uint64_t a2, stat *a3, _DWORD **a4, unsigned int *a5, int a6)
{
  if (a6) {
    uint64_t v11 = sub_10000B8A0((char **)a2);
  }
  else {
    uint64_t v11 = *(const char **)a2;
  }
  if (fstatat(a1, v11, a3, 32) == -1)
  {
    if (*__error() != 2)
    {
      if (dword_100058FD8)
      {
        int v38 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_100043EBC();
        }
        *__error() = v38;
      }
      sub_10001FBD8("%s: fstatat", v22, v23, v24, v25, v26, v27, v28, *(void *)a2);
      return 0xFFFFFFFFLL;
    }
    if ((*a4)[46])
    {
      if (dword_100058FD8)
      {
        int v29 = *__error();
        uint64_t v30 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(char **)a2;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Skip non existing '%s'", (uint8_t *)&buf, 0xCu);
        }
        *__error() = v29;
      }
      sub_10001FA38(0, "Skip non existing '%s'", v23, v24, v25, v26, v27, v28, *(void *)a2);
      return 0;
    }
    return 3;
  }
  if ((*a4)[45] || !(*a4)[50]) {
    goto LABEL_6;
  }
  uint64_t v36 = sub_100027688(a2, a5);
  st_nlinuint64_t k = a3->st_nlink;
  if (v36)
  {
    if (st_nlink == 1) {
      return 3;
    }
    goto LABEL_46;
  }
  if (st_nlink > 1) {
    return 3;
  }
LABEL_46:
  if (!sub_100027688(a2, a5) && a3->st_nlink > 1u) {
    return 3;
  }
LABEL_6:
  unint64_t v18 = *a4;
  if ((*a4)[37] && a3->st_mtimespec.tv_sec > *(void *)(a2 + 48))
  {
    if (dword_100058FD8)
    {
      int v19 = *__error();
      size_t v20 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(char **)a2;
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Skip newer '%s'", (uint8_t *)&buf, 0xCu);
      }
      *__error() = v19;
    }
    sub_10001FA38(0, "Skip newer '%s'", v12, v13, v14, v15, v16, v17, *(void *)a2);
    return 4;
  }
  if (v18[45])
  {
    if (dword_100058FD8)
    {
      int v33 = *__error();
      uint64_t v34 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = *(char **)a2;
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Skip existing '%s'", (uint8_t *)&buf, 0xCu);
      }
      *__error() = v33;
    }
    sub_10001FA38(0, "Skip existing '%s'", v12, v13, v14, v15, v16, v17, *(void *)a2);
    return 4;
  }
  if ((a3->st_mode & 0xF000) != 0x8000) {
    return 2;
  }
  st_size_t size = a3->st_size;
  int64_t v40 = *(void *)(a2 + 40);
  if (*a4[25])
  {
    if (st_size >= v40)
    {
      if (dword_100058FD8)
      {
        int v41 = *__error();
        int v42 = qword_100058FE8;
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
        {
          int v43 = *(char **)a2;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Skip append '%s'", (uint8_t *)&buf, 0xCu);
        }
        *__error() = v41;
      }
      sub_10001FA38(0, "Skip append '%s'", st_size, v13, v14, v15, v16, v17, *(void *)a2);
      return 4;
    }
    return 2;
  }
  if (st_size != v40) {
    return 2;
  }
  if (v18[120]) {
    return 0;
  }
  if (v18[4])
  {
    if (sub_10001C110(a1, *(const char **)a2, st_size, (unsigned __int8 *)&buf)) {
      return 2;
    }
    if ((void)buf != *(void *)(a2 + 96) || *((void *)&buf + 1) != *(void *)(a2 + 104)) {
      return 2;
    }
    return 0;
  }
  if (v18[33]) {
    return 2;
  }
  uint64_t v45 = *(void *)(a2 + 48);
  tv_seCC_MD4_CTX c = a3->st_mtimespec.tv_sec;
  __darwin_time_t v47 = v45 - tv_sec;
  if (v45 - tv_sec < 0) {
    __darwin_time_t v47 = tv_sec - v45;
  }
  if (v47 <= (int)v18[144])
  {
    if (v45 != tv_sec)
    {
      if (dword_100058FD8)
      {
        int v48 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
          sub_100044178();
        }
        *__error() = v48;
      }
      sub_10001FA38(2, "%s: fits time modify window", st_size, v13, v14, v15, v16, v17, *(void *)a2);
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100038DDC(_DWORD **a1, uint64_t a2, void *a3, stat *a4, char *a5, uint64_t *a6, unsigned int *a7, int a8, int a9, int *a10, unsigned __int8 a11)
{
  int v19 = openat(*(_DWORD *)(a2 + 64), a5, 0x100000);
  if (v19 == -1)
  {
    int v28 = *__error();
    uint64_t result = 1;
    if (v28 != 2 && (a11 & 1) == 0)
    {
      if (*__error() != 13) {
        err(11, "%s: pre_file_check_altdir: openat", a5);
      }
      return 1;
    }
  }
  else
  {
    int v20 = v19;
    unsigned int v21 = sub_1000388F0(v19, (uint64_t)a6, a4, a1, a7, a11);
    if (v21)
    {
      if (v21 > 2 || *a3 || (*a3 = a5, !a10))
      {
        close(v20);
      }
      else
      {
        if (*a10 != -1) {
          close(*a10);
        }
        *a10 = v20;
      }
      return 1;
    }
    if (a8 < 0 || unlinkat(*(_DWORD *)(a2 + 64), (const char *)*a6, 0) != -1 || *__error() == 2)
    {
      if (a9 == 3)
      {
        if (dword_100058FD8)
        {
          int v32 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_100044348();
          }
          *__error() = v32;
        }
        sub_10001FA38(2, "%s: hardlinking: up to date in %s", v22, v23, v24, v25, v26, v27, *a6);
        if (linkat(v20, (const char *)*a6, *(_DWORD *)(a2 + 64), (const char *)*a6, 0) == -1)
        {
          if (dword_100058FD8)
          {
            int v40 = *__error();
            int v41 = qword_100058FE8;
            if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
              sub_1000442BC((uint64_t)a5, a6, v41);
            }
            *__error() = v40;
          }
          sub_10001FBD8("hard link '%s/%s'", v33, v34, v35, v36, v37, v38, v39, (char)a5);
        }
      }
      else if (a9 == 2)
      {
        if (dword_100058FD8)
        {
          int v31 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_100044254();
          }
          *__error() = v31;
        }
        sub_10001FA38(2, "%s: copying: up to date in %s", v22, v23, v24, v25, v26, v27, *a6);
        sub_10000B574(*(_DWORD *)(a2 + 64), a5, (const char **)a6);
        sub_100027170((uint64_t)a1, 1, *(_DWORD *)(a2 + 64), (const char **)a6, (char *)*a6);
      }
      else
      {
        if (dword_100058FD8)
        {
          int v42 = *__error();
          if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEBUG)) {
            sub_1000441EC();
          }
          *__error() = v42;
        }
        sub_10001FA38(2, "%s: skipping: up to date in %s", v22, v23, v24, v25, v26, v27, *a6);
      }
      close(v20);
      return 0;
    }
    else
    {
      if (dword_100058FD8)
      {
        int v43 = *__error();
        if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
          sub_1000443B0();
        }
        *__error() = v43;
      }
      sub_10001FBD8("%s: unlinkat", v30, v22, v23, v24, v25, v26, v27, *a6);
      close(v20);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_1000391A0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if ((*(_WORD *)(a2 + 24) & 0xF000) != 0x8000 || !*(void *)(a2 + 40) || !*(void *)(a2 + 48)) {
    return 1;
  }
  memset(&v68, 0, sizeof(v68));
  __strlcpy_chk();
  int v8 = strrchr(__s, 47);
  if (!v8)
  {
    __s[0] = 0;
    goto LABEL_13;
  }
  v8[1] = 0;
  if (!__s[0])
  {
LABEL_13:
    int v16 = dup(*(_DWORD *)(a1 + 64));
    goto LABEL_14;
  }
  int v16 = openat(*(_DWORD *)(a1 + 64), __s, 0x100000);
  if (v16 < 0)
  {
    if (dword_100058FD8)
    {
      int v17 = *__error();
      unint64_t v18 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100044484((uint64_t)__s, v18, v19, v20, v21, v22, v23, v24);
      }
      *__error() = v17;
    }
    sub_10001FBD8("%s: pre_file_fuzzy: openat", v9, v10, v11, v12, v13, v14, v15, (char)__s);
    return 0xFFFFFFFFLL;
  }
LABEL_14:
  uint64_t v25 = fdopendir(v16);
  if (!v25)
  {
    if (dword_100058FD8)
    {
      int v50 = *__error();
      int v51 = qword_100058FE8;
      if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR)) {
        sub_100044418((uint64_t)__s, v51, v52, v53, v54, v55, v56, v57);
      }
      *__error() = v50;
    }
    sub_10001FBD8("%s: pre_file_fuzzy: opendirfd", v26, v27, v28, v29, v30, v31, v32, (char)__s);
    close(v16);
    return 0xFFFFFFFFLL;
  }
  uint64_t v33 = v25;
  uint64_t v34 = readdir(v25);
  if (!v34)
  {
LABEL_40:
    closedir(v33);
    return 1;
  }
  uint64_t v35 = &dword_100058FD8;
  while (1)
  {
    if (v34->d_name[0] == 46 && (!v34->d_name[1] || v34->d_name[1] == 46 && !v34->d_name[2])
      || (v34->d_type & 0xF) != 8
      || snprintf(__str, 0x400uLL, "%s%s", __s, v34->d_name) > 0x400)
    {
      goto LABEL_39;
    }
    if (fstatat(*(_DWORD *)(a1 + 64), __str, &v68, 32) != -1) {
      break;
    }
    if (!*v35)
    {
      __darwin_time_t v47 = "%s: pre_file_fuzzy: fstatat";
      goto LABEL_38;
    }
    mode_t v44 = v35;
    int v45 = *__error();
    int v48 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int v70 = __str;
      _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%s: pre_file_fuzzy: fstatat", buf, 0xCu);
    }
    __darwin_time_t v47 = "%s: pre_file_fuzzy: fstatat";
LABEL_35:
    *__error() = v45;
    uint64_t v35 = v44;
LABEL_38:
    sub_10001FBD8(v47, v36, v37, v38, v39, v40, v41, v42, (char)__str);
LABEL_39:
    uint64_t v34 = readdir(v33);
    if (!v34) {
      goto LABEL_40;
    }
  }
  if (v68.st_size != *(void *)(a2 + 40) || v68.st_mtimespec.tv_sec != *(void *)(a2 + 48)) {
    goto LABEL_39;
  }
  int v43 = openat(*(_DWORD *)(a1 + 64), __str, 256);
  if (v43 == -1)
  {
    if (!*v35)
    {
      __darwin_time_t v47 = "%s: pre_file_fuzzy: openat";
      goto LABEL_38;
    }
    mode_t v44 = v35;
    int v45 = *__error();
    uint64_t v46 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int v70 = __str;
      _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%s: pre_file_fuzzy: openat", buf, 0xCu);
    }
    __darwin_time_t v47 = "%s: pre_file_fuzzy: openat";
    goto LABEL_35;
  }
  long long v58 = *(_OWORD *)&v68.st_blksize;
  *(_OWORD *)(a3 + 96) = *(_OWORD *)&v68.st_size;
  *(_OWORD *)(a3 + 112) = v58;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)v68.st_qspare;
  st_mtimespeCC_MD4_CTX c = v68.st_mtimespec;
  *(timespec *)(a3 + 32) = v68.st_atimespec;
  *(timespec *)(a3 + 48) = st_mtimespec;
  st_birthtimespeCC_MD4_CTX c = v68.st_birthtimespec;
  *(timespec *)(a3 + 64) = v68.st_ctimespec;
  *(timespec *)(a3 + 80) = st_birthtimespec;
  long long v61 = *(_OWORD *)&v68.st_uid;
  *(_OWORD *)a3 = *(_OWORD *)&v68.st_dev;
  *(_OWORD *)(a3 + 16) = v61;
  *a4 = v43;
  *(_DWORD *)(a2 + 116) |= 0x1800u;
  *(_DWORD *)(a2 + 120) = 131;
  free(*(void **)(a2 + 88));
  *(void *)(a2 + 88) = strdup(__str);
  sub_10001FA38(3, "fuzzy basis selected for %s: %s", v62, v63, v64, v65, v66, v67, *(void *)a2);
  closedir(v33);
  return 0;
}

void sub_10003961C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_100058FD8)
  {
    int v9 = *__error();
    uint64_t v10 = qword_100058FE8;
    if (os_log_type_enabled((os_log_t)qword_100058FE8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *a1;
      *(_DWORD *)long long buf = 136315138;
      uint64_t v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    *__error() = v9;
  }
  sub_10001FA38(0, "%s", a3, a4, a5, a6, a7, a8, *a1);
}

double sub_100039704(uint64_t a1)
{
  *(void *)(a1 + 2888) = a1 + 196;
  *(void *)(a1 + 2904) = &off_100058700;
  *(void *)(a1 + 2912) = a1 + 2488;
  *(void *)(a1 + 2928) = &off_100058720;
  *(void *)(a1 + 2936) = a1 + 2732;
  *(void *)(a1 + 2952) = &unk_100058740;
  *(_WORD *)(a1 + 5920) = 0;
  *(_DWORD *)(a1 + 5924) = 0;
  *(_DWORD *)(a1 + 5916) = 8;
  return sub_100039754(a1);
}

double sub_100039754(uint64_t a1)
{
  for (uint64_t i = 196; i != 1340; i += 4)
    *(_WORD *)(a1 + i) = 0;
  for (uint64_t j = 0; j != 120; j += 4)
    *(_WORD *)(a1 + 2488 + j) = 0;
  for (uint64_t k = 0; k != 76; k += 4)
    *(_WORD *)(a1 + 2732 + k) = 0;
  *(_WORD *)(a1 + 1220) = 1;
  *(_DWORD *)(a1 + 5884) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 5896) = 0u;
  *(_DWORD *)(a1 + 5912) = 0;
  return result;
}

uint64_t sub_1000397B8(uint64_t a1, char *a2, int a3, int a4)
{
  int v4 = a3;
  int v7 = *(_DWORD *)(a1 + 5924);
  int v8 = *(unsigned __int16 *)(a1 + 5920);
  int v9 = v8 | (a4 << v7);
  *(_WORD *)(a1 + 5920) = v8 | ((_WORD)a4 << v7);
  if (v7 < 14)
  {
    int v15 = v7 + 3;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11 + 1;
    *(unsigned char *)(v10 + v11) = v9;
    char v12 = *(unsigned char *)(a1 + 5921);
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v14 + 1;
    *(unsigned char *)(v13 + v14) = v12;
    LODWORD(v13) = *(_DWORD *)(a1 + 5924);
    *(_WORD *)(a1 + 5920) = (unsigned __int16)a4 >> (16 - v13);
    int v15 = v13 - 13;
  }
  *(_DWORD *)(a1 + 5924) = v15;
  __int16 v16 = ~(_WORD)a3;
  uint64_t result = sub_10003A8C8(a1);
  *(_DWORD *)(a1 + 5916) = 8;
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v19 + 1;
  *(unsigned char *)(v18 + v19) = v4;
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v21 + 1;
  *(unsigned char *)(v20 + v21) = BYTE1(v4);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v23 + 1;
  *(unsigned char *)(v22 + v23) = v16;
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v25 + 1;
  for (*(unsigned char *)(v24 + v25) = HIBYTE(v16); v4; --v4)
  {
    char v26 = *a2++;
    uint64_t v27 = *(void *)(a1 + 16);
    uint64_t v28 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v28 + 1;
    *(unsigned char *)(v27 + v28) = v26;
  }
  return result;
}

uint64_t sub_1000398F0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 5924);
  int v3 = *(unsigned __int16 *)(a1 + 5920);
  unsigned int v4 = v3 | (2 << v2);
  *(_WORD *)(a1 + 5920) = v3 | (2 << v2);
  if (v2 < 14)
  {
    int v10 = v2 + 3;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v6 + 1;
    *(unsigned char *)(v5 + v6) = v4;
    char v7 = *(unsigned char *)(a1 + 5921);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v9 + 1;
    *(unsigned char *)(v8 + v9) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 5924);
    unsigned int v4 = 2u >> (16 - v8);
    *(_WORD *)(a1 + 5920) = v4;
    int v10 = v8 - 13;
  }
  *(_DWORD *)(a1 + 5924) = v10;
  if (v10 < 10)
  {
    int v16 = v10 + 7;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12 + 1;
    *(unsigned char *)(v11 + v12) = v4;
    char v13 = *(unsigned char *)(a1 + 5921);
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v15 + 1;
    *(unsigned char *)(v14 + v15) = v13;
    *(_WORD *)(a1 + 5920) = 0;
    int v16 = *(_DWORD *)(a1 + 5924) - 9;
  }
  *(_DWORD *)(a1 + 5924) = v16;
  uint64_t result = sub_100039AD4(a1);
  int v18 = *(_DWORD *)(a1 + 5924);
  if (*(_DWORD *)(a1 + 5916) - v18 + 11 <= 8)
  {
    int v19 = *(unsigned __int16 *)(a1 + 5920);
    unsigned int v20 = v19 | (2 << v18);
    *(_WORD *)(a1 + 5920) = v19 | (2 << v18);
    if (v18 < 14)
    {
      int v26 = v18 + 3;
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v22 + 1;
      *(unsigned char *)(v21 + v22) = v20;
      char v23 = *(unsigned char *)(a1 + 5921);
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v25 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v25 + 1;
      *(unsigned char *)(v24 + v25) = v23;
      LODWORD(v24) = *(_DWORD *)(a1 + 5924);
      unsigned int v20 = 2u >> (16 - v24);
      *(_WORD *)(a1 + 5920) = v20;
      int v26 = v24 - 13;
    }
    *(_DWORD *)(a1 + 5924) = v26;
    if (v26 < 10)
    {
      int v32 = v26 + 7;
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 16);
      uint64_t v28 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v28 + 1;
      *(unsigned char *)(v27 + v28) = v20;
      char v29 = *(unsigned char *)(a1 + 5921);
      uint64_t v30 = *(void *)(a1 + 16);
      uint64_t v31 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v31 + 1;
      *(unsigned char *)(v30 + v31) = v29;
      *(_WORD *)(a1 + 5920) = 0;
      int v32 = *(_DWORD *)(a1 + 5924) - 9;
    }
    *(_DWORD *)(a1 + 5924) = v32;
    uint64_t result = sub_100039AD4(a1);
  }
  *(_DWORD *)(a1 + 5916) = 7;
  return result;
}

uint64_t sub_100039AD4(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 5924);
  if (v1 == 16)
  {
    int v2 = 0;
    char v3 = *(unsigned char *)(result + 5920);
    uint64_t v4 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v4 + 1;
    *(unsigned char *)(*(void *)(result + 16) + v4) = v3;
    char v5 = *(unsigned char *)(result + 5921);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v7 + 1;
    *(unsigned char *)(v6 + v7) = v5;
    *(_WORD *)(result + 5920) = 0;
  }
  else
  {
    if (v1 < 8) {
      return result;
    }
    char v8 = *(unsigned char *)(result + 5920);
    uint64_t v9 = *(void *)(result + 16);
    uint64_t v10 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v10 + 1;
    *(unsigned char *)(v9 + v10) = v8;
    *(_WORD *)(result + 5920) = *(unsigned __int8 *)(result + 5921);
    int v2 = *(_DWORD *)(result + 5924) - 8;
  }
  *(_DWORD *)(result + 5924) = v2;
  return result;
}

void sub_100039B64(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  if (*(int *)(a1 + 180) < 1)
  {
    unsigned int v14 = 0;
    unint64_t v15 = a3 + 5;
    unint64_t v16 = a3 + 5;
    if (!a2) {
      goto LABEL_25;
    }
  }
  else
  {
    if (a3 && *(_DWORD *)(*(void *)a1 + 88) == 2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = (unsigned __int16 *)(a1 + 196);
      while (1)
      {
        int v10 = *v9;
        v9 += 2;
        if (v10) {
          break;
        }
        if (++v8 == 9)
        {
          uint64_t v11 = (unsigned __int16 *)(a1 + 252);
          uint64_t v8 = -18;
          while (1)
          {
            int v12 = *v11;
            v11 += 2;
            if (v12) {
              break;
            }
            if (__CFADD__(v8++, 1))
            {
              LODWORD(v8) = 32;
              goto LABEL_15;
            }
          }
          LODWORD(v8) = v8 + 32;
          break;
        }
      }
LABEL_15:
      *(_DWORD *)(*(void *)a1 + 88) = v8 == 32;
    }
    sub_10003A074(a1, a1 + 2888);
    sub_10003A074(a1, a1 + 2912);
    sub_10003AA44((_WORD *)a1, a1 + 196, *(_DWORD *)(a1 + 2896));
    sub_10003AA44((_WORD *)a1, a1 + 2488, *(_DWORD *)(a1 + 2920));
    sub_10003A074(a1, a1 + 2936);
    unsigned int v14 = &dword_100000010 + 2;
    while (!*(_WORD *)(a1 + 4 * byte_10004A718[v14] + 2734))
    {
      if (v14-- <= 3)
      {
        unsigned int v14 = 2;
        break;
      }
    }
    uint64_t v18 = *(void *)(a1 + 5896) + (int)(3 * v14 + 17);
    *(void *)(a1 + 5896) = v18;
    unint64_t v19 = v18 + 10;
    unint64_t v16 = (unint64_t)(v18 + 10) >> 3;
    unint64_t v15 = (unint64_t)(*(void *)(a1 + 5904) + 10) >> 3;
    if (v15 < v19 >> 3) {
      unint64_t v16 = (unint64_t)(*(void *)(a1 + 5904) + 10) >> 3;
    }
    if (!a2) {
      goto LABEL_25;
    }
  }
  if (a3 + 4 <= v16)
  {
    sub_1000397B8(a1, a2, a3, a4);
    goto LABEL_51;
  }
LABEL_25:
  int v20 = *(_DWORD *)(a1 + 5924);
  int v21 = *(unsigned __int16 *)(a1 + 5920);
  if (v15 == v16 || *(_DWORD *)(a1 + 184) == 4)
  {
    int v29 = v21 | ((a4 + 2) << v20);
    *(_WORD *)(a1 + 5920) = v21 | (((_WORD)a4 + 2) << v20);
    if (v20 < 14)
    {
      int v36 = v20 + 3;
    }
    else
    {
      uint64_t v30 = *(void *)(a1 + 16);
      uint64_t v31 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v31 + 1;
      *(unsigned char *)(v30 + v31) = v29;
      char v32 = *(unsigned char *)(a1 + 5921);
      uint64_t v33 = *(void *)(a1 + 16);
      uint64_t v34 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v34 + 1;
      *(unsigned char *)(v33 + v34) = v32;
      int v35 = *(_DWORD *)(a1 + 5924);
      *(_WORD *)(a1 + 5920) = (unsigned __int16)(a4 + 2) >> (16 - v35);
      int v36 = v35 - 13;
    }
    *(_DWORD *)(a1 + 5924) = v36;
    uint64_t v46 = &unk_10004A0E8;
    __darwin_time_t v47 = &unk_10004A568;
    uint64_t v48 = a1;
  }
  else
  {
    int v22 = v21 | ((a4 + 4) << v20);
    if (v20 < 14)
    {
      int v28 = v20 + 3;
    }
    else
    {
      *(_WORD *)(a1 + 5920) = v22;
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v24 + 1;
      *(unsigned char *)(v23 + v24) = v22;
      char v25 = *(unsigned char *)(a1 + 5921);
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v27 + 1;
      *(unsigned char *)(v26 + v27) = v25;
      LODWORD(v26) = *(_DWORD *)(a1 + 5924);
      int v22 = (unsigned __int16)(a4 + 4) >> (16 - v26);
      int v28 = v26 - 13;
    }
    *(_DWORD *)(a1 + 5924) = v28;
    int v37 = *(_DWORD *)(a1 + 2896);
    int v38 = *(_DWORD *)(a1 + 2920);
    if (v28 < 12)
    {
      int v44 = v22 | ((v37 + 65280) << v28);
      int v45 = v28 + 5;
    }
    else
    {
      __int16 v39 = v22 | ((v37 - 256) << v28);
      *(_WORD *)(a1 + 5920) = v39;
      uint64_t v40 = *(void *)(a1 + 16);
      uint64_t v41 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v41 + 1;
      *(unsigned char *)(v40 + v41) = v39;
      LOBYTE(v39) = *(unsigned char *)(a1 + 5921);
      uint64_t v42 = *(void *)(a1 + 16);
      uint64_t v43 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v43 + 1;
      *(unsigned char *)(v42 + v43) = v39;
      LODWORD(v42) = *(_DWORD *)(a1 + 5924);
      int v44 = (unsigned __int16)(v37 - 256) >> (16 - v42);
      int v45 = v42 - 11;
    }
    *(_DWORD *)(a1 + 5924) = v45;
    int v49 = v44 | (v38 << v45);
    if (v45 < 12)
    {
      int v55 = v45 + 5;
    }
    else
    {
      *(_WORD *)(a1 + 5920) = v49;
      uint64_t v50 = *(void *)(a1 + 16);
      uint64_t v51 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v51 + 1;
      *(unsigned char *)(v50 + v51) = v49;
      char v52 = *(unsigned char *)(a1 + 5921);
      uint64_t v53 = *(void *)(a1 + 16);
      uint64_t v54 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v54 + 1;
      *(unsigned char *)(v53 + v54) = v52;
      LODWORD(v53) = *(_DWORD *)(a1 + 5924);
      int v49 = (unsigned __int16)v38 >> (16 - v53);
      int v55 = v53 - 11;
    }
    *(_DWORD *)(a1 + 5924) = v55;
    if (v55 < 13)
    {
      int v61 = v49 | ((v14 + 65533) << v55);
      int v62 = v55 + 4;
    }
    else
    {
      __int16 v56 = v49 | ((v14 - 3) << v55);
      *(_WORD *)(a1 + 5920) = v56;
      uint64_t v57 = *(void *)(a1 + 16);
      uint64_t v58 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v58 + 1;
      *(unsigned char *)(v57 + v58) = v56;
      LOBYTE(v56) = *(unsigned char *)(a1 + 5921);
      uint64_t v59 = *(void *)(a1 + 16);
      uint64_t v60 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v60 + 1;
      *(unsigned char *)(v59 + v60) = v56;
      LODWORD(v59) = *(_DWORD *)(a1 + 5924);
      int v61 = (unsigned __int16)(v14 - 3) >> (16 - v59);
      int v62 = v59 - 12;
    }
    *(_WORD *)(a1 + 5920) = v61;
    *(_DWORD *)(a1 + 5924) = v62;
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v63 = v14 + 1;
      uint64_t v64 = byte_10004A718;
      do
      {
        unsigned int v65 = *v64++;
        unsigned int v66 = *(unsigned __int16 *)(a1 + 4 * v65 + 2734);
        v61 |= v66 << v62;
        *(_WORD *)(a1 + 5920) = v61;
        if (v62 < 14)
        {
          v62 += 3;
        }
        else
        {
          uint64_t v67 = *(void *)(a1 + 16);
          uint64_t v68 = *(unsigned int *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v68 + 1;
          *(unsigned char *)(v67 + v68) = v61;
          char v69 = *(unsigned char *)(a1 + 5921);
          uint64_t v70 = *(void *)(a1 + 16);
          uint64_t v71 = *(unsigned int *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v71 + 1;
          *(unsigned char *)(v70 + v71) = v69;
          LODWORD(v70) = *(_DWORD *)(a1 + 5924);
          int v61 = v66 >> (16 - v70);
          *(_WORD *)(a1 + 5920) = v61;
          int v62 = v70 - 13;
        }
        *(_DWORD *)(a1 + 5924) = v62;
        --v63;
      }
      while (v63);
    }
    sub_10003AB38(a1, a1 + 196, v37);
    sub_10003AB38(a1, a1 + 2488, v38);
    uint64_t v48 = a1;
    uint64_t v46 = (void *)(a1 + 196);
    __darwin_time_t v47 = (void *)(a1 + 2488);
  }
  sub_10003A520(v48, (uint64_t)v46, (uint64_t)v47);
LABEL_51:
  sub_100039754(a1);
  if (a4)
  {
    sub_10003A8C8(a1);
  }
}

uint64_t sub_10003A074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(uint64_t **)(a2 + 16);
  uint64_t v6 = *v5;
  uint64_t v7 = *((unsigned int *)v5 + 5);
  uint64_t v8 = (int *)(a1 + 5284);
  *(void *)(a1 + 5284) = 0x23D00000000;
  if ((int)v7 < 1)
  {
    int v13 = 0;
    int v11 = -1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = (_WORD *)(v4 + 2);
    int v11 = -1;
    do
    {
      if (*(v10 - 1))
      {
        uint64_t v12 = *(int *)(a1 + 5284) + 1;
        *(_DWORD *)(a1 + 5284) = v12;
        *(_DWORD *)(a1 + 4 * v12 + 2992) = v9;
        *(unsigned char *)(a1 + 5292 + v9) = 0;
        int v11 = v9;
      }
      else
      {
        *int v10 = 0;
      }
      v10 += 2;
      ++v9;
    }
    while (v7 != v9);
    int v13 = *v8;
    if (*v8 > 1) {
      goto LABEL_20;
    }
  }
  int v14 = v11;
  do
  {
    if (v14 >= 2) {
      int v11 = v14;
    }
    else {
      int v11 = v14 + 1;
    }
    if (v14 < 2) {
      int v15 = v14 + 1;
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = v13 + 1;
    *(_DWORD *)(a1 + 5284) = v16;
    *(_DWORD *)(a1 + 4 * v16 + 2992) = v15;
    *(_WORD *)(v4 + 4 * v15) = 1;
    *(unsigned char *)(a1 + v15 + 5292) = 0;
    --*(void *)(a1 + 5896);
    if (v6) {
      *(void *)(a1 + 5904) -= *(unsigned __int16 *)(v6 + 4 * v15 + 2);
    }
    int v13 = *v8;
    int v14 = v11;
  }
  while (*v8 < 2);
LABEL_20:
  *(_DWORD *)(a2 + 8) = v11;
  int v17 = v13 >> 1;
  do
  {
    sub_10003A93C(a1, v4, v17);
    BOOL v18 = v17-- != 0;
  }
  while (v17 != 0 && v18);
  int v19 = *(_DWORD *)(a1 + 5284);
  uint64_t v20 = (int)v7;
  uint64_t v21 = 4 * (int)v7;
  do
  {
    uint64_t v22 = *(int *)(a1 + 2996);
    *(_DWORD *)(a1 + 5284) = v19 - 1;
    uint64_t v23 = a1 + 2992;
    *(_DWORD *)(a1 + 2996) = *(_DWORD *)(a1 + 2992 + 4 * v19);
    sub_10003A93C(a1, v4, 1);
    uint64_t v24 = *(int *)(a1 + 2996);
    uint64_t v25 = *(int *)(a1 + 5288) - 1;
    *(_DWORD *)(a1 + 5288) = v25;
    *(_DWORD *)(v23 + 4 * v25) = v22;
    uint64_t v26 = *(int *)(a1 + 5288) - 1;
    *(_DWORD *)(a1 + 5288) = v26;
    *(_DWORD *)(v23 + 4 * v26) = v24;
    uint64_t v27 = (_WORD *)(v4 + 4 * v22);
    int v28 = (_WORD *)(v4 + 4 * v24);
    *(_WORD *)(v4 + v21) = *v28 + *v27;
    unsigned int v29 = *(unsigned __int8 *)(a1 + 5292 + v24);
    if (*(unsigned __int8 *)(a1 + 5292 + v22) > v29) {
      LOBYTE(v29) = *(unsigned char *)(a1 + 5292 + v22);
    }
    *(unsigned char *)(a1 + 5292 + v20) = v29 + 1;
    v28[1] = v20;
    v27[1] = v20;
    *(_DWORD *)(a1 + 2996) = v20;
    uint64_t result = sub_10003A93C(a1, v4, 1);
    int v19 = *(_DWORD *)(a1 + 5284);
    v21 += 4;
    ++v20;
  }
  while (v19 > 1);
  int v31 = *(_DWORD *)(a1 + 2996);
  uint64_t v32 = *(int *)(a1 + 5288) - 1;
  *(_DWORD *)(a1 + 5288) = v32;
  *(_DWORD *)(v23 + 4 * v32) = v31;
  uint64_t v33 = *(void *)a2;
  int v34 = *(_DWORD *)(a2 + 8);
  int v35 = *(uint64_t **)(a2 + 16);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  int v38 = *((_DWORD *)v35 + 4);
  uint64_t v39 = *((int *)v35 + 6);
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_WORD *)(v33 + 4 * *(int *)(v23 + 4 * *(int *)(a1 + 5288)) + 2) = 0;
  uint64_t v40 = *(int *)(a1 + 5288);
  if ((int)v40 <= 571)
  {
    int v41 = 0;
    do
    {
      uint64_t v42 = *(int *)(a1 + 2996 + 4 * v40);
      uint64_t result = v33 + 4 * v42;
      int v43 = *(unsigned __int16 *)(v33 + 4 * *(unsigned __int16 *)(result + 2) + 2);
      BOOL v44 = (int)v39 <= v43;
      if ((int)v39 > v43) {
        int v45 = v43 + 1;
      }
      else {
        int v45 = v39;
      }
      if (v44) {
        ++v41;
      }
      *(_WORD *)(result + 2) = v45;
      if ((int)v42 <= v34)
      {
        ++*(_WORD *)(a1 + 2 * v45 + 2960);
        int v46 = (int)v42 >= v38 ? *(_DWORD *)(v37 + 4 * ((int)v42 - v38)) : 0;
        uint64_t result = *(unsigned __int16 *)result;
        *(void *)(a1 + 5896) += (int)result * (uint64_t)(v46 + v45);
        if (v36) {
          *(void *)(a1 + 5904) += (*(unsigned __int16 *)(v36 + 4 * v42 + 2) + (uint64_t)v46) * result;
        }
      }
    }
    while (v40++ != 571);
    if (v41)
    {
      do
      {
        uint64_t v48 = (_WORD *)(a1 + 2 * v39 + 2960);
        uint64_t v49 = (uint64_t)&_mh_execute_header + (v39 << 32);
        do
        {
          int v51 = (unsigned __int16)*--v48;
          __int16 v50 = v51;
          v49 -= 0x100000000;
        }
        while (!v51);
        *uint64_t v48 = v50 - 1;
        *(_WORD *)(a1 + (v49 >> 31) + 2960) += 2;
        --*(_WORD *)(a1 + 2 * v39 + 2960);
        BOOL v52 = __OFSUB__(v41, 2);
        v41 -= 2;
      }
      while (!((v41 < 0) ^ v52 | (v41 == 0)));
      if (v39)
      {
        int v53 = 573;
        do
        {
          int v54 = *(unsigned __int16 *)(a1 + 2 * v39 + 2960);
          if (*(_WORD *)(a1 + 2 * v39 + 2960))
          {
            do
            {
              int v55 = (int *)(a1 + 2988 + 4 * v53);
              do
              {
                uint64_t v57 = *v55--;
                uint64_t v56 = v57;
                --v53;
              }
              while ((int)v57 > v34);
              uint64_t v58 = v33 + 4 * v56;
              unsigned int v61 = *(unsigned __int16 *)(v58 + 2);
              uint64_t v59 = (_WORD *)(v58 + 2);
              uint64_t v60 = v61;
              if (v39 != v61)
              {
                *(void *)(a1 + 5896) += (v39 - v60) * *(unsigned __int16 *)(v33 + 4 * v56);
                *uint64_t v59 = v39;
              }
              --v54;
            }
            while (v54);
          }
          --v39;
        }
        while (v39);
      }
    }
  }
  uint64_t v62 = 0;
  unsigned __int16 v63 = 0;
  do
  {
    unsigned __int16 v63 = 2 * ((v63 & 0xFFFE) + *(_WORD *)(a1 + 2960 + v62 * 2));
    v71[++v62] = v63;
  }
  while (v62 != 15);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v64 = 0;
    do
    {
      uint64_t v65 = v4 + 4 * v64;
      int v66 = *(unsigned __int16 *)(v65 + 2);
      if (*(_WORD *)(v65 + 2))
      {
        int v67 = 0;
        unsigned int v68 = v71[*(unsigned __int16 *)(v65 + 2)];
        v71[v66] = v68 + 1;
        unsigned int v69 = v66 + 1;
        do
        {
          int v70 = v67 | v68 & 1;
          v68 >>= 1;
          int v67 = 2 * v70;
          --v69;
        }
        while (v69 > 1);
        *(_WORD *)(v4 + 4 * v64) = v70;
      }
      ++v64;
    }
    while (v64 != v11 + 1);
  }
  return result;
}

uint64_t sub_10003A520(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 5884))
  {
    uint64_t v3 = 0;
    while (1)
    {
      unsigned int v4 = *(unsigned __int16 *)(*(void *)(result + 5888) + 2 * v3);
      uint64_t v5 = *(unsigned __int8 *)(*(void *)(result + 5872) + v3);
      if (*(_WORD *)(*(void *)(result + 5888) + 2 * v3)) {
        break;
      }
      int v19 = (unsigned __int16 *)(a2 + 4 * v5);
      int v20 = v19[1];
      int v21 = *(_DWORD *)(result + 5924);
      unsigned int v22 = *v19;
      int v23 = *(unsigned __int16 *)(result + 5920);
      int v24 = v23 | (v22 << v21);
      *(_WORD *)(result + 5920) = v23 | ((_WORD)v22 << v21);
      if (v21 > 16 - v20)
      {
        uint64_t v25 = *(void *)(result + 16);
        uint64_t v26 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v26 + 1;
        *(unsigned char *)(v25 + v26) = v24;
        char v27 = *(unsigned char *)(result + 5921);
        uint64_t v28 = *(void *)(result + 16);
        uint64_t v29 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v29 + 1;
        *(unsigned char *)(v28 + v29) = v27;
        int v30 = *(_DWORD *)(result + 5924);
        *(_WORD *)(result + 5920) = v22 >> (16 - v30);
        int v31 = v20 + v30;
LABEL_24:
        int v39 = v31 - 16;
        goto LABEL_26;
      }
      int v39 = v21 + v20;
LABEL_26:
      *(_DWORD *)(result + 5924) = v39;
LABEL_27:
      if (++v3 >= (unint64_t)*(unsigned int *)(result + 5884)) {
        goto LABEL_30;
      }
    }
    uint64_t v6 = byte_100049FE8[v5];
    uint64_t v7 = a2 + 4 * v6;
    int v8 = *(unsigned __int16 *)(v7 + 1030);
    int v9 = *(_DWORD *)(result + 5924);
    unsigned int v10 = *(unsigned __int16 *)(v7 + 1028);
    int v11 = *(unsigned __int16 *)(result + 5920);
    int v12 = v11 | (v10 << v9);
    *(_WORD *)(result + 5920) = v11 | ((_WORD)v10 << v9);
    if (v9 <= 16 - v8)
    {
      int v18 = v9 + v8;
    }
    else
    {
      uint64_t v13 = *(void *)(result + 16);
      uint64_t v14 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v14 + 1;
      *(unsigned char *)(v13 + v14) = v12;
      char v15 = *(unsigned char *)(result + 5921);
      uint64_t v16 = *(void *)(result + 16);
      uint64_t v17 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v17 + 1;
      *(unsigned char *)(v16 + v17) = v15;
      LODWORD(v16) = *(_DWORD *)(result + 5924);
      int v12 = v10 >> (16 - v16);
      *(_WORD *)(result + 5920) = v12;
      int v18 = v8 + v16 - 16;
    }
    *(_DWORD *)(result + 5924) = v18;
    if ((unint64_t)(v6 - 28) >= 0xFFFFFFFFFFFFFFECLL)
    {
      int v32 = dword_10004A5E0[v6];
      int v33 = v5 - dword_10004A72C[v6];
      v12 |= v33 << v18;
      *(_WORD *)(result + 5920) = v12;
      if (v18 <= 16 - v32)
      {
        v18 += v32;
      }
      else
      {
        uint64_t v34 = *(void *)(result + 16);
        uint64_t v35 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v35 + 1;
        *(unsigned char *)(v34 + v35) = v12;
        char v36 = *(unsigned char *)(result + 5921);
        uint64_t v37 = *(void *)(result + 16);
        uint64_t v38 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v38 + 1;
        *(unsigned char *)(v37 + v38) = v36;
        LODWORD(v37) = *(_DWORD *)(result + 5924);
        int v12 = (unsigned __int16)v33 >> (16 - v37);
        *(_WORD *)(result + 5920) = v12;
        int v18 = v32 + v37 - 16;
      }
      *(_DWORD *)(result + 5924) = v18;
    }
    unsigned int v40 = v4 - 1;
    if (v4 >= 0x101) {
      unsigned int v41 = ((v4 - 1) >> 7) + 256;
    }
    else {
      unsigned int v41 = v4 - 1;
    }
    uint64_t v42 = byte_100049DE8[v41];
    int v43 = (unsigned __int16 *)(a3 + 4 * v42);
    int v44 = v43[1];
    unsigned int v45 = *v43;
    int v46 = v12 | (v45 << v18);
    *(_WORD *)(result + 5920) = v46;
    if (v18 <= 16 - v44)
    {
      int v39 = v18 + v44;
    }
    else
    {
      uint64_t v47 = *(void *)(result + 16);
      uint64_t v48 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v48 + 1;
      *(unsigned char *)(v47 + v48) = v46;
      char v49 = *(unsigned char *)(result + 5921);
      uint64_t v50 = *(void *)(result + 16);
      uint64_t v51 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v51 + 1;
      *(unsigned char *)(v50 + v51) = v49;
      LODWORD(v50) = *(_DWORD *)(result + 5924);
      int v46 = v45 >> (16 - v50);
      *(_WORD *)(result + 5920) = v46;
      int v39 = v44 + v50 - 16;
    }
    *(_DWORD *)(result + 5924) = v39;
    if (v42 < 4) {
      goto LABEL_27;
    }
    int v52 = dword_10004A654[v42];
    unsigned int v53 = v40 - dword_10004A7A0[v42];
    int v54 = v46 | (v53 << v39);
    *(_WORD *)(result + 5920) = v54;
    if (v39 <= 16 - v52)
    {
      v39 += v52;
      goto LABEL_26;
    }
    uint64_t v55 = *(void *)(result + 16);
    uint64_t v56 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v56 + 1;
    *(unsigned char *)(v55 + v56) = v54;
    LOBYTE(v55) = *(unsigned char *)(result + 5921);
    uint64_t v57 = *(void *)(result + 16);
    uint64_t v58 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v58 + 1;
    *(unsigned char *)(v57 + v58) = v55;
    LODWORD(v57) = *(_DWORD *)(result + 5924);
    *(_WORD *)(result + 5920) = (unsigned __int16)v53 >> (16 - v57);
    int v31 = v52 + v57;
    goto LABEL_24;
  }
  int v39 = *(_DWORD *)(result + 5924);
LABEL_30:
  int v59 = *(unsigned __int16 *)(a2 + 1026);
  unsigned int v60 = *(unsigned __int16 *)(a2 + 1024);
  int v61 = *(unsigned __int16 *)(result + 5920);
  int v62 = v61 | (v60 << v39);
  *(_WORD *)(result + 5920) = v61 | ((_WORD)v60 << v39);
  if (v39 <= 16 - v59)
  {
    int v69 = v39 + v59;
  }
  else
  {
    uint64_t v63 = *(void *)(result + 16);
    uint64_t v64 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v64 + 1;
    *(unsigned char *)(v63 + v64) = v62;
    char v65 = *(unsigned char *)(result + 5921);
    uint64_t v66 = *(void *)(result + 16);
    uint64_t v67 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v67 + 1;
    *(unsigned char *)(v66 + v67) = v65;
    int v68 = *(_DWORD *)(result + 5924);
    *(_WORD *)(result + 5920) = v60 >> (16 - v68);
    int v69 = v59 + v68 - 16;
  }
  *(_DWORD *)(result + 5924) = v69;
  *(_DWORD *)(result + 5916) = *(unsigned __int16 *)(a2 + 1026);
  return result;
}

uint64_t sub_10003A8C8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 5924);
  if (v1 >= 9)
  {
    int v2 = (uint64_t *)(result + 16);
    uint64_t v3 = *(void *)(result + 16);
    unsigned int v4 = (_DWORD *)(result + 40);
    uint64_t v5 = *(unsigned int *)(result + 40);
    char v6 = *(unsigned char *)(result + 5920);
    *(_DWORD *)(result + 40) = v5 + 1;
    *(unsigned char *)(v3 + v5) = v6;
    char v7 = *(unsigned char *)(result + 5921);
LABEL_5:
    uint64_t v8 = *v2;
    uint64_t v9 = *v4;
    *unsigned int v4 = v9 + 1;
    *(unsigned char *)(v8 + v9) = v7;
    goto LABEL_6;
  }
  if (v1 >= 1)
  {
    char v7 = *(unsigned char *)(result + 5920);
    int v2 = (uint64_t *)(result + 16);
    unsigned int v4 = (_DWORD *)(result + 40);
    goto LABEL_5;
  }
LABEL_6:
  *(_WORD *)(result + 5920) = 0;
  *(_DWORD *)(result + 5924) = 0;
  return result;
}

uint64_t sub_10003A93C(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 4 * a3 + 2992);
  int v4 = 2 * a3;
  int v5 = *(_DWORD *)(result + 5284);
  if (2 * a3 <= v5)
  {
    uint64_t v7 = result + 5292;
    while (1)
    {
      if (v4 >= v5)
      {
        int v6 = v4;
        uint64_t v8 = v4;
      }
      else
      {
        uint64_t v8 = v4;
        uint64_t v9 = *(int *)(result + 2992 + 4 * (v4 | 1));
        unsigned int v10 = *(unsigned __int16 *)(a2 + 4 * v9);
        uint64_t v11 = *(int *)(result + 2992 + 4 * v4);
        unsigned int v12 = *(unsigned __int16 *)(a2 + 4 * v11);
        if (v10 >= v12)
        {
          if (v10 != v12)
          {
            int v6 = v4;
            goto LABEL_11;
          }
          unsigned int v13 = *(unsigned __int8 *)(v7 + v9);
          int v6 = v4;
          if (v13 > *(unsigned __int8 *)(v7 + v11)) {
            goto LABEL_11;
          }
        }
        uint64_t v8 = v4 | 1;
        int v6 = v4 | 1;
      }
LABEL_11:
      unsigned int v14 = *(unsigned __int16 *)(a2 + 4 * v3);
      int v15 = *(_DWORD *)(result + 4 * v8 + 2992);
      unsigned int v16 = *(unsigned __int16 *)(a2 + 4 * v15);
      if (v14 < v16
        || v14 == v16
        && *(unsigned __int8 *)(result + v3 + 5292) <= *(unsigned __int8 *)(result + v15 + 5292))
      {
        break;
      }
      *(_DWORD *)(result + 4 * a3 + 2992) = v15;
      int v4 = 2 * v6;
      int v5 = *(_DWORD *)(result + 5284);
      a3 = v6;
      if (2 * v6 > v5) {
        goto LABEL_15;
      }
    }
  }
  int v6 = a3;
LABEL_15:
  *(_DWORD *)(result + 4 * v6 + 2992) = v3;
  return result;
}

_WORD *sub_10003AA44(_WORD *result, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 2);
  uint64_t v4 = (a3 + 1);
  *(_WORD *)(a2 + 4 * (int)v4 + 2) = -1;
  if ((a3 & 0x80000000) == 0)
  {
    int v5 = 0;
    if (v3) {
      int v6 = 4;
    }
    else {
      int v6 = 3;
    }
    if (v3) {
      int v7 = 7;
    }
    else {
      int v7 = 138;
    }
    uint64_t v8 = (unsigned __int16 *)(a2 + 6);
    int v9 = -1;
    do
    {
      int v11 = *v8;
      v8 += 2;
      int v10 = v11;
      int v12 = v5 + 1;
      if (v5 + 1 >= v7 || v3 != v10)
      {
        if (v12 >= v6)
        {
          if (v3)
          {
            if (v3 != v9) {
              ++result[2 * v3 + 1366];
            }
            ++result[1398];
          }
          else if (v5 > 9)
          {
            ++result[1402];
          }
          else
          {
            ++result[1400];
          }
        }
        else
        {
          result[2 * v3 + 1366] += v12;
        }
        if (v3 == v10) {
          int v14 = 6;
        }
        else {
          int v14 = 7;
        }
        if (v3 == v10) {
          int v15 = 3;
        }
        else {
          int v15 = 4;
        }
        int v12 = 0;
        if (v10) {
          int v7 = v14;
        }
        else {
          int v7 = 138;
        }
        if (v10) {
          int v6 = v15;
        }
        else {
          int v6 = 3;
        }
        int v9 = v3;
      }
      int v5 = v12;
      int v3 = v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_10003AB38(uint64_t result, uint64_t a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    unsigned int v5 = *(unsigned __int16 *)(a2 + 2);
    if (*(_WORD *)(a2 + 2)) {
      int v6 = 7;
    }
    else {
      int v6 = 138;
    }
    if (*(_WORD *)(a2 + 2)) {
      int v7 = 4;
    }
    else {
      int v7 = 3;
    }
    int v8 = -1;
    do
    {
      ++v3;
      unsigned int v9 = *(unsigned __int16 *)(a2 + 4 * v3 + 2);
      int v10 = v4 + 1;
      if (v4 + 1 >= v6 || v5 != v9)
      {
        if (v10 >= v7)
        {
          int v23 = *(_DWORD *)(result + 5924);
          if (v5)
          {
            if (v5 != v8)
            {
              uint64_t v24 = result + 4 * v5;
              int v25 = *(unsigned __int16 *)(v24 + 2734);
              unsigned int v26 = *(unsigned __int16 *)(v24 + 2732);
              int v27 = *(unsigned __int16 *)(result + 5920);
              int v28 = v27 | (v26 << v23);
              *(_WORD *)(result + 5920) = v27 | ((_WORD)v26 << v23);
              if (v23 <= 16 - v25)
              {
                v23 += v25;
              }
              else
              {
                uint64_t v29 = *(void *)(result + 16);
                uint64_t v30 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v30 + 1;
                *(unsigned char *)(v29 + v30) = v28;
                LOBYTE(v29) = *(unsigned char *)(result + 5921);
                uint64_t v31 = *(void *)(result + 16);
                uint64_t v32 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v32 + 1;
                *(unsigned char *)(v31 + v32) = v29;
                LODWORD(v29) = *(_DWORD *)(result + 5924);
                *(_WORD *)(result + 5920) = v26 >> (16 - v29);
                int v23 = v25 + v29 - 16;
              }
              *(_DWORD *)(result + 5924) = v23;
              int v10 = v4;
            }
            int v52 = *(unsigned __int16 *)(result + 2798);
            unsigned int v53 = *(unsigned __int16 *)(result + 2796);
            int v54 = *(unsigned __int16 *)(result + 5920) | (v53 << v23);
            if (v23 <= 16 - v52)
            {
              int v60 = v23 + v52;
            }
            else
            {
              *(_WORD *)(result + 5920) = v54;
              uint64_t v55 = *(void *)(result + 16);
              uint64_t v56 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v56 + 1;
              *(unsigned char *)(v55 + v56) = v54;
              char v57 = *(unsigned char *)(result + 5921);
              uint64_t v58 = *(void *)(result + 16);
              uint64_t v59 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v59 + 1;
              *(unsigned char *)(v58 + v59) = v57;
              LODWORD(v58) = *(_DWORD *)(result + 5924);
              int v54 = v53 >> (16 - v58);
              int v60 = v52 + v58 - 16;
            }
            *(_DWORD *)(result + 5924) = v60;
            if (v60 < 15)
            {
              *(_WORD *)(result + 5920) = v54 | ((v10 + 65533) << v60);
              int v69 = v60 + 2;
            }
            else
            {
              int v61 = v10 - 3;
              __int16 v62 = v54 | (v61 << v60);
              *(_WORD *)(result + 5920) = v62;
              uint64_t v63 = *(void *)(result + 16);
              uint64_t v64 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v64 + 1;
              *(unsigned char *)(v63 + v64) = v62;
              LOBYTE(v62) = *(unsigned char *)(result + 5921);
              uint64_t v65 = *(void *)(result + 16);
              uint64_t v66 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v66 + 1;
              *(unsigned char *)(v65 + v66) = v62;
              unsigned int v67 = (unsigned __int16)v61;
              int v68 = *(_DWORD *)(result + 5924);
              *(_WORD *)(result + 5920) = v67 >> (16 - v68);
              int v69 = v68 - 14;
            }
          }
          else
          {
            int v33 = *(unsigned __int16 *)(result + 5920);
            if (v4 > 9)
            {
              int v43 = *(unsigned __int16 *)(result + 2806);
              unsigned int v44 = *(unsigned __int16 *)(result + 2804);
              int v45 = v33 | (v44 << v23);
              if (v23 <= 16 - v43)
              {
                int v51 = v23 + v43;
              }
              else
              {
                *(_WORD *)(result + 5920) = v45;
                uint64_t v46 = *(void *)(result + 16);
                uint64_t v47 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v47 + 1;
                *(unsigned char *)(v46 + v47) = v45;
                char v48 = *(unsigned char *)(result + 5921);
                uint64_t v49 = *(void *)(result + 16);
                uint64_t v50 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v50 + 1;
                *(unsigned char *)(v49 + v50) = v48;
                LODWORD(v49) = *(_DWORD *)(result + 5924);
                int v45 = v44 >> (16 - v49);
                int v51 = v43 + v49 - 16;
              }
              *(_DWORD *)(result + 5924) = v51;
              if (v51 < 10)
              {
                *(_WORD *)(result + 5920) = v45 | ((v4 + 65526) << v51);
                int v69 = v51 + 7;
              }
              else
              {
                int v77 = v4 - 10;
                __int16 v78 = v45 | (v77 << v51);
                *(_WORD *)(result + 5920) = v78;
                uint64_t v79 = *(void *)(result + 16);
                uint64_t v80 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v80 + 1;
                *(unsigned char *)(v79 + v80) = v78;
                LOBYTE(v78) = *(unsigned char *)(result + 5921);
                uint64_t v81 = *(void *)(result + 16);
                uint64_t v82 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v82 + 1;
                *(unsigned char *)(v81 + v82) = v78;
                int v83 = *(_DWORD *)(result + 5924);
                *(_WORD *)(result + 5920) = (unsigned __int16)v77 >> (16 - v83);
                int v69 = v83 - 9;
              }
            }
            else
            {
              int v34 = *(unsigned __int16 *)(result + 2802);
              unsigned int v35 = *(unsigned __int16 *)(result + 2800);
              int v36 = v33 | (v35 << v23);
              if (v23 <= 16 - v34)
              {
                int v42 = v23 + v34;
              }
              else
              {
                *(_WORD *)(result + 5920) = v36;
                uint64_t v37 = *(void *)(result + 16);
                uint64_t v38 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v38 + 1;
                *(unsigned char *)(v37 + v38) = v36;
                char v39 = *(unsigned char *)(result + 5921);
                uint64_t v40 = *(void *)(result + 16);
                uint64_t v41 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v41 + 1;
                *(unsigned char *)(v40 + v41) = v39;
                LODWORD(v40) = *(_DWORD *)(result + 5924);
                int v36 = v35 >> (16 - v40);
                int v42 = v34 + v40 - 16;
              }
              *(_DWORD *)(result + 5924) = v42;
              if (v42 < 14)
              {
                *(_WORD *)(result + 5920) = v36 | ((v4 + 65534) << v42);
                int v69 = v42 + 3;
              }
              else
              {
                int v70 = v4 - 2;
                __int16 v71 = v36 | (v70 << v42);
                *(_WORD *)(result + 5920) = v71;
                uint64_t v72 = *(void *)(result + 16);
                uint64_t v73 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v73 + 1;
                *(unsigned char *)(v72 + v73) = v71;
                LOBYTE(v71) = *(unsigned char *)(result + 5921);
                uint64_t v74 = *(void *)(result + 16);
                uint64_t v75 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v75 + 1;
                *(unsigned char *)(v74 + v75) = v71;
                int v76 = *(_DWORD *)(result + 5924);
                *(_WORD *)(result + 5920) = (unsigned __int16)v70 >> (16 - v76);
                int v69 = v76 - 13;
              }
            }
          }
          *(_DWORD *)(result + 5924) = v69;
        }
        else
        {
          uint64_t v11 = result + 4 * v5;
          int v12 = (unsigned __int16 *)(v11 + 2732);
          unsigned int v13 = (unsigned __int16 *)(v11 + 2734);
          int v14 = *(_DWORD *)(result + 5924);
          do
          {
            int v15 = *v13;
            unsigned int v16 = *v12;
            int v17 = *(unsigned __int16 *)(result + 5920);
            int v18 = v17 | (v16 << v14);
            *(_WORD *)(result + 5920) = v17 | ((_WORD)v16 << v14);
            if (v14 <= 16 - v15)
            {
              v14 += v15;
            }
            else
            {
              uint64_t v19 = *(void *)(result + 16);
              uint64_t v20 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v20 + 1;
              *(unsigned char *)(v19 + v20) = v18;
              LOBYTE(v19) = *(unsigned char *)(result + 5921);
              uint64_t v21 = *(void *)(result + 16);
              uint64_t v22 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v22 + 1;
              *(unsigned char *)(v21 + v22) = v19;
              LODWORD(v19) = *(_DWORD *)(result + 5924);
              *(_WORD *)(result + 5920) = v16 >> (16 - v19);
              int v14 = v15 + v19 - 16;
            }
            *(_DWORD *)(result + 5924) = v14;
            --v10;
          }
          while (v10);
        }
        if (v5 == v9) {
          int v84 = 3;
        }
        else {
          int v84 = 4;
        }
        if (v5 == v9) {
          int v85 = 6;
        }
        else {
          int v85 = 7;
        }
        if (v9) {
          int v7 = v84;
        }
        else {
          int v7 = 3;
        }
        if (v9) {
          int v6 = v85;
        }
        else {
          int v6 = 138;
        }
        int v10 = 0;
        int v8 = v5;
      }
      unsigned int v5 = v9;
      int v4 = v10;
    }
    while (v3 != a3 + 1);
  }
  return result;
}

void sub_10003AFEC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "asprintf --extended-attributes path", v2, v3, v4, v5, v6);
}

void sub_10003B020()
{
  __assert_rtn("apple_open_xattrs", "platform.c", 35, "strstr(f->path, \"._\") != NULL");
}

void sub_10003B04C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "asprintf", v2, v3, v4, v5, v6);
}

void sub_10003B080()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "copyfile", v2, v3, v4, v5, v6);
}

void sub_10003B0B4()
{
}

void sub_10003B0E0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_byte", v2, v3, v4, v5, v6);
}

void sub_10003B114()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_byte", v2, v3, v4, v5, v6);
}

void sub_10003B148(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: move_file: %s", (uint8_t *)&v3, 0x16u);
}

void sub_10003B1D0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "snprintf", v2, v3, v4, v5, v6);
}

void sub_10003B204(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: openat", (uint8_t *)&v2, 0xCu);
}

void sub_10003B27C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = __error();
  uint64_t v5 = strerror(*v4);
  int v6 = 136315394;
  uint64_t v7 = a1;
  __int16 v8 = 2080;
  unsigned int v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: unlink: %s", (uint8_t *)&v6, 0x16u);
}

void sub_10003B320()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "calloc", v2, v3, v4, v5, v6);
}

void sub_10003B354()
{
  sub_10000407C();
  uint64_t v2 = 24;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "reallocarray 3 %ld * %ld bytes", v1, 0x16u);
}

void sub_10003B3D4()
{
  __assert_rtn("blk_match", "blocks.c", 342, "st->curtok != 0");
}

void sub_10003B400()
{
  __assert_rtn("blk_match", "blocks.c", 300, "(off_t)st->mapsz >= blks->size");
}

void sub_10003B42C()
{
}

void sub_10003B458()
{
  __assert_rtn("blk_find", "blocks.c", 194, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003B484()
{
  __assert_rtn("blk_find", "blocks.c", 258, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003B4B0()
{
  __assert_rtn("fmap_untrap", "extern.h", 910, "fmap_trapped == fm");
}

void sub_10003B4DC()
{
  __assert_rtn("blk_find", "blocks.c", 233, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003B508()
{
  __assert_rtn("blk_find", "blocks.c", 174, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003B534()
{
  __assert_rtn("blk_recv_ack", "blocks.c", 400, "pos == sz");
}

void sub_10003B560()
{
  __assert_rtn("blk_recv", "blocks.c", 420, "meta || s != NULL");
}

void sub_10003B58C()
{
  __assert_rtn("blk_recv", "blocks.c", 421, "*state == SDL_META || *state == SDL_BLOCKS");
}

void sub_10003B5B8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "iobuf_alloc", v2, v3, v4, v5, v6);
}

void sub_10003B5EC()
{
  __assert_rtn("blk_recv", "blocks.c", 514, "s->csum <= sizeof(b->chksum_long)");
}

void sub_10003B618()
{
  __assert_rtn("blk_recv", "blocks.c", 526, "b->len != 0");
}

void sub_10003B644()
{
  __assert_rtn("blk_recv", "blocks.c", 483, "*state == SDL_BLOCKS");
}

void sub_10003B670()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "iobuf_read_size", v2, v3, v4, v5, v6);
}

void sub_10003B6A4()
{
  sub_10000407C();
  uint64_t v3 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "block remainder %zu is greater than block size %zu", v2, 0x16u);
}

void sub_10003B728()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_buf", v2, v3, v4, v5, v6);
}

void sub_10003B75C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_unbuffer_size", v2, v3, v4, v5, v6);
}

void sub_10003B790()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "inappropriate checksum length", v2, v3, v4, v5, v6);
}

void sub_10003B7C4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "non-zero length is less than remainder", v2, v3, v4, v5, v6);
}

void sub_10003B7F8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_int", v2, v3, v4, v5, v6);
}

void sub_10003B82C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_int", v2, v3, v4, v5, v6);
}

void sub_10003B860(int *a1, NSObject *a2)
{
  int v2 = *a1;
  v3[0] = 67109376;
  v3[1] = v2;
  __int16 v4 = 1024;
  int v5 = 27;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "remote protocol %d is older than our minimum supported %d: exiting", (uint8_t *)v3, 0xEu);
}

void sub_10003B8EC()
{
  __assert_rtn("rsync_client", "client.c", 108, "sess.opts->whole_file != -1");
}

void sub_10003B918()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsync_receiver", v2, v3, v4, v5, v6);
}

void sub_10003B94C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "data remains in read pipe", v2, v3, v4, v5, v6);
}

void sub_10003B980()
{
  __assert_rtn("rsync_client", "client.c", 157, "sess.total_deleted >= sess.opts->max_delete");
}

void sub_10003B9AC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsync_sender", v2, v3, v4, v5, v6);
}

void sub_10003B9E0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "batch_open", v2, v3, v4, v5, v6);
}

void sub_10003BA14()
{
  __assert_rtn("daemon_apply_chmod", "daemon_misc.c", 62, "rc == 0");
}

void sub_10003BA40()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write", v2, v3, v4, v5, v6);
}

void sub_10003BA74()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: 'numeric ids' invalid", v2, v3, v4, v5, v6);
}

void sub_10003BADC()
{
  __assert_rtn("daemon_chuser_setup", "daemon_misc.c", 203, "rc == 0");
}

void sub_10003BB08()
{
  __assert_rtn("daemon_chuser_setup", "daemon_misc.c", 195, "rc == 0");
}

void sub_10003BB34()
{
  __assert_rtn("daemon_configure_filter_type", "daemon_misc.c", 284, "rc == 0");
}

void sub_10003BB60()
{
  __assert_rtn("daemon_connection_allowed", "daemon_misc.c", 539, "rc == 0");
}

void sub_10003BB8C()
{
  __assert_rtn("daemon_connection_allowed", "daemon_misc.c", 514, "rc == 0");
}

void sub_10003BBB8()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: 'lock file' is empty with 'max connections' in place", v2, v3, v4, v5, v6);
}

void sub_10003BC20()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: lock fcntl", v2, v3, v4, v5, v6);
}

void sub_10003BC88()
{
  __assert_rtn("daemon_connection_limited", "daemon_misc.c", 601, "rc == 0");
}

void sub_10003BCB4()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: 'max connections' invalid", v2, v3, v4, v5, v6);
}

void sub_10003BD1C()
{
}

void sub_10003BD48()
{
  __assert_rtn("daemon_do_execcmds", "daemon_misc.c", 878, "rc == 0");
}

void sub_10003BD74()
{
  __assert_rtn("daemon_do_execcmds", "daemon_misc.c", 870, "rc == 0");
}

void sub_10003BDA0()
{
  __assert_rtn("daemon_finish_prexfer", "daemon_misc.c", 926, "fd != -1 && child > 0");
}

void sub_10003BDCC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write", v2, v3, v4, v5, v6);
}

void sub_10003BE00()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "strdup", v2, v3, v4, v5, v6);
}

void sub_10003BE34()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "make_safe_link", v2, v3, v4, v5, v6);
}

void sub_10003BE68()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: 'max verbosity' invalid", v2, v3, v4, v5, v6);
}

void sub_10003BED0()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fopen", v2, v3, v4, v5, v6);
}

void sub_10003BF38()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: 'read only' invalid", v2, v3, v4, v5, v6);
}

void sub_10003BFA0()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: 'write only' invalid", v2, v3, v4, v5, v6);
}

void sub_10003C008()
{
  __assert_rtn("daemon_parse_refuse", "daemon_misc.c", 1490, "rc != 0");
}

void sub_10003C034()
{
  __assert_rtn("daemon_parse_refuse", "daemon_misc.c", 1502, "rc != 0");
}

void sub_10003C060()
{
  __assert_rtn("daemon_parse_refuse", "daemon_misc.c", 1372, "rc == 0");
}

void sub_10003C08C()
{
  __assert_rtn("daemon_can_refuse_wildcard", "daemon_misc.c", 1337, "(option != NULL) ^ (shopt != 0)");
}

void sub_10003C0B8()
{
  __assert_rtn("daemon_can_refuse_wildcard", "daemon_misc.c", 1336, "option != NULL || shopt != 0");
}

void sub_10003C0E4()
{
}

void sub_10003C110()
{
}

void sub_10003C13C()
{
  sub_1000075CC();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%s: 'syslog facility' does not exist: %s", v2, 0x16u);
}

void sub_10003C1C4()
{
  __assert_rtn("daemon_setup_logfile", "daemon_misc.c", 1614, "rc == 0");
}

void sub_10003C1F0()
{
  __assert_rtn("daemon_setup_logfile", "daemon_misc.c", 1594, "rc == 0");
}

void sub_10003C21C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C290()
{
  sub_1000081DC();
  int v2 = 27;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "batch protocol %d is older than our minimum supported %d: exiting", v1, 0xEu);
}

void sub_10003C310()
{
  sub_1000081DC();
  int v3 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "batch protocol %d is newer than our maximum supported %d: exiting", v2, 0xEu);
}

void sub_10003C394()
{
  __assert_rtn("batch_open", "batch.c", 232, "sess->opts->write_batch != NULL");
}

void sub_10003C3C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C434()
{
  __assert_rtn("batch_open", "batch.c", 233, "sess->wbatch_fd == -1");
}

void sub_10003C460(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C4CC()
{
}

void sub_10003C4E8()
{
  __assert_rtn("rsync_daemon", "daemon.c", 1425, "errno != ENOENT");
}

void sub_10003C514()
{
}

void sub_10003C530()
{
}

void sub_10003C54C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C5BC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C62C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C69C()
{
}

void sub_10003C6B8()
{
}

void sub_10003C6D4()
{
  __assert_rtn("daemon_extract_addr", "daemon.c", 928, "family == AF_INET || family == AF_INET6");
}

void sub_10003C700()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "inet_ntop", v2, v3, v4, v5, v6);
}

void sub_10003C734()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_line", v2, v3, v4, v5, v6);
}

void sub_10003C768()
{
  __assert_rtn("rsync_daemon_handler", "daemon.c", 1078, "rc == 0");
}

void sub_10003C794()
{
  __assert_rtn("rsync_daemon_handler", "daemon.c", 969, "role->lockfd == -1");
}

void sub_10003C7C0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_buf", v2, v3, v4, v5, v6);
}

void sub_10003C7F4()
{
  __assert_rtn("daemon_auth", "daemon.c", 841, "rc == 0");
}

void sub_10003C820()
{
  __assert_rtn("daemon_auth", "daemon.c", 834, "rc == 0");
}

void sub_10003C84C()
{
  __assert_rtn("daemon_list_module", "daemon.c", 136, "rc == 0");
}

void sub_10003C878(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003C8E4(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "rsync_password_hash", buf, 2u);
}

void sub_10003C924()
{
}

void sub_10003C950(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "malloc", v1, 2u);
}

void sub_10003C994()
{
  sub_10000B674();
  sub_10000B68C((void *)&_mh_execute_header, v0, v1, "%s: mk_backup_dir: %s", v2, v3);
}

void sub_10003CA00()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: mkdirat", v2, v3, v4, v5, v6);
}

void sub_10003CA68()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: symlinkat", v2, v3, v4, v5, v6);
}

void sub_10003CAD0()
{
  sub_10000B674();
  sub_10000B68C((void *)&_mh_execute_header, v0, v1, "%s: move_file: %s", v2, v3);
}

void sub_10003CB3C()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: mkdir", v2, v3, v4, v5, v6);
}

void sub_10003CBA4()
{
}

void sub_10003CBD0()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: stat", v2, v3, v4, v5, v6);
}

void sub_10003CC38()
{
}

void sub_10003CC64()
{
}

void sub_10003CC90(const char **a1)
{
}

void sub_10003CCB8(const char **a1)
{
}

void sub_10003CCE0()
{
  __assert_rtn("download_partial_path", "downloader.c", 193, "sess->opts->partial_dir != NULL");
}

void sub_10003CD0C()
{
  __assert_rtn("download_partial_path", "downloader.c", 194, "f != NULL");
}

void sub_10003CD38()
{
  __assert_rtn("download_partial_path", "downloader.c", 215, "dirsep != dir");
}

void sub_10003CD64()
{
}

void sub_10003CD90()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "malloc", v2, v3, v4, v5, v6);
}

void sub_10003CDC4()
{
  __assert_rtn("download_reinit", "downloader.c", 142, "p->state == DOWNLOAD_READ_NEXT");
}

void sub_10003CDF0()
{
  sub_100010D50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%s: partial cleanup failed, left at %s", v1, 0x16u);
}

void sub_10003CE7C(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "linkat", v3);
}

void sub_10003CEAC(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "unlink", v3);
}

void sub_10003CEDC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "get_iflags", v2, v3, v4, v5, v6);
}

void sub_10003CF10()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_short", v2, v3, v4, v5, v6);
}

void sub_10003CF44()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "blk_send_ack", v2, v3, v4, v5, v6);
}

void sub_10003CF78()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: mmap", v2, v3, v4, v5, v6);
}

void sub_10003CFE0()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: open", v2, v3, v4, v5, v6);
}

void sub_10003D048()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1580, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003D074()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "lseek", v2, v3, v4, v5, v6);
}

void sub_10003D0A8()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s: writing inplace", v1, 0xCu);
}

void sub_10003D11C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "mktemplate", v2, v3, v4, v5, v6);
}

void sub_10003D150()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "mkstempat: '%s'", v2, v3, v4, v5, v6);
}

void sub_10003D1B8()
{
  sub_100010D68(__stack_chk_guard);
  sub_100010D50();
  sub_100010D84((void *)&_mh_execute_header, v0, v1, "%s: temporary: %s", v2, v3);
}

void sub_10003D220()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fstat", v2, v3, v4, v5, v6);
}

void sub_10003D288()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1508, "p->fname == NULL");
}

void sub_10003D2B4()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1683, "p->fname != NULL || sess->opts->dry_run");
}

void sub_10003D2E0()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1684, "p->fd != -1 || sess->opts->dry_run");
}

void sub_10003D30C()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1685, "p->fdin != -1");
}

void sub_10003D338()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "buf_copy", v2, v3, v4, v5, v6);
}

void sub_10003D36C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsync_set_metadata", v2, v3, v4, v5, v6);
}

void sub_10003D3A0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "linkat", v2, v3, v4, v5, v6);
}

void sub_10003D3D4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "unlink", v2, v3, v4, v5, v6);
}

void sub_10003D408()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "malloc dlrenamer entries", v2, v3, v4, v5, v6);
}

void sub_10003D43C()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  __int16 v4 = 1040;
  int v5 = v0;
  __int16 v6 = 2080;
  uint64_t v7 = v1;
  __int16 v8 = 1024;
  int v9 = 1024;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: delayed-update: compound path too long: %.*s.~tmp~ > %d", v3, 0x22u);
}

void sub_10003D4D8()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  __int16 v5 = 1024;
  int v6 = 1024;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%s: delayed-update: compound path too long: .~tmp~/%s > %d", v2, 0x1Cu);
}

void sub_10003D564()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "mkpathat '%s'", v2, v3, v4, v5, v6);
}

void sub_10003D5CC()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1854, "usethis == f->path || *(usethis - 1) == '/'");
}

void sub_10003D5F8()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: stat during --backup", v2, v3, v4, v5, v6);
}

void sub_10003D660()
{
  sub_100010D68(__stack_chk_guard);
  sub_100010D38();
  __int16 v4 = 2080;
  uint64_t v5 = v0;
  __int16 v6 = 2080;
  uint64_t v7 = v1;
  __int16 v8 = 1024;
  int v9 = 1024;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: backup: compound backup path too long: %s%s > %d", v3, 0x26u);
}

void sub_10003D6FC()
{
  sub_100010D44(__stack_chk_guard);
  sub_10000B674();
  sub_10000B68C((void *)&_mh_execute_header, v0, v1, "%s: move_file: %s", v2, v3);
}

void sub_10003D764()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s: doing backup", v1, 0xCu);
}

void sub_10003D7D8()
{
  sub_100010D44(__stack_chk_guard);
  sub_10000B674();
  sub_10000B68C((void *)&_mh_execute_header, v0, v1, "%s: backup_to_dir: %s", v2, v3);
}

void sub_10003D840()
{
  sub_100010D68(__stack_chk_guard);
  sub_100010D50();
  sub_100010D84((void *)&_mh_execute_header, v0, v1, "%s: doing backup-dir to %s", v2, v3);
}

void sub_10003D8AC()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1716, "p->obufsz == 0");
}

void sub_10003D8D8(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_int", v3);
}

void sub_10003D908(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "malloc", v3);
}

void sub_10003D938(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_buf", v3);
}

void sub_10003D968(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_check", v3);
}

void sub_10003D998(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "buf_copy", v3);
}

void sub_10003D9C8(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_byte", v3);
}

void sub_10003D9F8()
{
  __assert_rtn("protocol_token_compressed", "downloader.c", 1193, "dectx.avail_in == 0");
}

void sub_10003DA24(uint8_t *buf, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = qword_100058798;
  *(_DWORD *)long long buf = 136315138;
  *a2 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "inflate error: %s", buf, 0xCu);
}

void sub_10003DA74(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "buf_copy dbuf", v3);
}

void sub_10003DAA4(uint8_t *buf, _DWORD *a2, os_log_t log)
{
  *(_DWORD *)long long buf = 67109120;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "protocol_token_cflush=%d", buf, 8u);
}

void sub_10003DAEC()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1682, "p->state == DOWNLOAD_READ_REMOTE || p->state == DOWNLOAD_FLUSH_REMOTE");
}

void sub_10003DB18()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: rsync_downloader: openat", v2, v3, v4, v5, v6);
}

void sub_10003DB80()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "calloc hlink vstring", v2, v3, v4, v5, v6);
}

void sub_10003DBB4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_vstring", v2, v3, v4, v5, v6);
}

void sub_10003DBE8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_byte", v2, v3, v4, v5, v6);
}

void sub_10003DC1C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "index out of bounds", v2, v3, v4, v5, v6);
}

void sub_10003DC50()
{
  sub_100002A24();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "downloader: phase complete", v1, 2u);
}

void sub_10003DC90()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "malloc renamer", v2, v3, v4, v5, v6);
}

void sub_10003DCC4()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fchmod", v2, v3, v4, v5, v6);
}

void sub_10003DD2C()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fchown", v2, v3, v4, v5, v6);
}

void sub_10003DD94()
{
  __assert_rtn("buf_copy", "downloader.c", 523, "p->obufsz <= p->obufmax");
}

void sub_10003DDC0()
{
  sub_100010D78(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: write", v2, v3, v4, v5, v6);
}

void sub_10003DE28()
{
  sub_100010D78(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: short write", v2, v3, v4, v5, v6);
}

void sub_10003DE90()
{
}

void sub_10003DEBC()
{
  __assert_rtn("buf_copy", "downloader.c", 550, "p->obufsz <= p->obufmax");
}

void sub_10003DEE8()
{
  __assert_rtn("buf_copy", "downloader.c", 551, "p->obuf != NULL");
}

void sub_10003DF14()
{
  sub_100010D78(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: lseek", v2, v3, v4, v5, v6);
}

void sub_10003DF7C()
{
  __assert_rtn("buf_copy", "downloader.c", 533, "p->obuf != NULL");
}

void sub_10003DFA8()
{
  __assert_rtn("buf_copy", "downloader.c", 541, "p->obufsz <= p->obufmax");
}

void sub_10003DFD4(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "inflateInit2 res=%d", (uint8_t *)v2, 8u);
}

void sub_10003E04C()
{
  __assert_rtn("protocol_token_ff", "downloader.c", 1013, "p->state != DOWNLOAD_FLUSH_REMOTE");
}

void sub_10003E078()
{
}

void sub_10003E0A4()
{
  __assert_rtn("protocol_token_ff", "downloader.c", 1022, "p->map != NULL");
}

void sub_10003E0D0()
{
  __assert_rtn("protocol_token_ff", "downloader.c", 1045, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003E0FC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "buf_copy", v2, v3, v4, v5, v6);
}

void sub_10003E130()
{
  __assert_rtn("protocol_token_ff", "downloader.c", 1078, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003E15C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_check", v2, v3, v4, v5, v6);
}

void sub_10003E190()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "protocol_token_ff_compress", v2, v3, v4, v5, v6);
}

void sub_10003E1C4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "lseek", v2, v3, v4, v5, v6);
}

void sub_10003E1F8()
{
}

void sub_10003E224()
{
  __assert_rtn("protocol_token_ff_compress", "downloader.c", 936, "p->map != NULL");
}

void sub_10003E250()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "decompress_reinit", v2, v3, v4, v5, v6);
}

void sub_10003E284()
{
  __assert_rtn("protocol_token_ff_compress", "downloader.c", 978, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003E2B0()
{
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "inflate error: %s", v2, v3, v4, v5, v6);
}

void sub_10003E324(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "inflate ff res=%d", (uint8_t *)v2, 8u);
}

void sub_10003E39C()
{
  __assert_rtn("fmap_sigbus_handler", "fmap.c", 62, "sig == SIGBUS");
}

void sub_10003E3C8()
{
  __assert_rtn("fmap_close", "fmap.c", 154, "fmap_trapped != fm && fmap_trapped_prev != fm");
}

void sub_10003E3F4()
{
  __assert_rtn("fargs_cmdline", "fargs.c", 166, "f != NULL");
}

void sub_10003E420()
{
  __assert_rtn("fargs_cmdline", "fargs.c", 167, "f->sourcesz > 0 || f->mode != FARGS_RECEIVER");
}

void sub_10003E44C()
{
}

void sub_10003E478()
{
}

void sub_10003E4A4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_byte", v2, v3, v4, v5, v6);
}

void sub_10003E4D8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "idents_send", v2, v3, v4, v5, v6);
}

void sub_10003E50C()
{
}

void sub_10003E538()
{
}

void sub_10003E564()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_buf", v2, v3, v4, v5, v6);
}

void sub_10003E598()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_long", v2, v3, v4, v5, v6);
}

void sub_10003E5CC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_uint", v2, v3, v4, v5, v6);
}

void sub_10003E600()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "platform sent", v2, v3, v4, v5, v6);
}

void sub_10003E634()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_buf checksum", v2, v3, v4, v5, v6);
}

void sub_10003E668()
{
}

void sub_10003E694()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "idents_add", v2, v3, v4, v5, v6);
}

void sub_10003E6C8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_flush", v2, v3, v4, v5, v6);
}

void sub_10003E6FC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "recallocarray flist", v2, v3, v4, v5, v6);
}

void sub_10003E730()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist index error", v2, v3, v4, v5, v6);
}

void sub_10003E764()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "idents_recv", v2, v3, v4, v5, v6);
}

void sub_10003E798()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "remote sent too many files", v2, v3, v4, v5, v6);
}

void sub_10003E7CC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_realloc", v2, v3, v4, v5, v6);
}

void sub_10003E800()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_recv_name", v2, v3, v4, v5, v6);
}

void sub_10003E834()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "security violation: zero-length pathname", v2, v3, v4, v5, v6);
}

void sub_10003E868()
{
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "security violation: absolute pathname: %s", v2, v3, v4, v5, v6);
}

void sub_10003E8D4()
{
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: security violation: backtracking pathname", v2, v3, v4, v5, v6);
}

void sub_10003E940()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_long", v2, v3, v4, v5, v6);
}

void sub_10003E974()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_uint", v2, v3, v4, v5, v6);
}

void sub_10003E9A8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_size", v2, v3, v4, v5, v6);
}

void sub_10003E9DC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "empty link name", v2, v3, v4, v5, v6);
}

void sub_10003EA10()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "symlink_filter", v2, v3, v4, v5, v6);
}

void sub_10003EA44()
{
}

void sub_10003EA70()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_dedupe", v2, v3, v4, v5, v6);
}

void sub_10003EAA4()
{
}

void sub_10003EAD0()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "'%s': (l)stat", v2, v3, v4, v5, v6);
}

void sub_10003EB38()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_append", v2, v3, v4, v5, v6);
}

void sub_10003EB6C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_append_dirs", v2, v3, v4, v5, v6);
}

void sub_10003EBA0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "hcreate", v2, v3, v4, v5, v6);
}

void sub_10003EBD4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fts_open", v2, v3, v4, v5, v6);
}

void sub_10003EC08()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fts_read", v2, v3, v4, v5, v6);
}

void sub_10003EC3C()
{
  __assert_rtn("flist_gen_dels", "flist.c", 2400, "ent->fts_statp != NULL");
}

void sub_10003EC68()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_realloc", v2, v3, v4, v5, v6);
}

void sub_10003EC9C()
{
  __assert_rtn("flist_gen_dels", "flist.c", 2474, "ent->fts_info == FTS_DP");
}

void sub_10003ECC8()
{
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: stat", v2, v3, v4, v5, v6);
}

void sub_10003ED34()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "hsearch", v2, v3, v4, v5, v6);
}

void sub_10003ED68()
{
}

void sub_10003ED94()
{
}

void sub_10003EDC0()
{
}

void sub_10003EDEC()
{
  __assert_rtn("flist_del", "flist.c", 2617, "root != -1");
}

void sub_10003EE18()
{
  sub_100019274(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "fclose: '%s'", v2, v3, v4, v5, v6);
}

void sub_10003EE80()
{
  sub_100019274(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "fdgets: '%s'", v2, v3, v4, v5, v6);
}

void sub_10003EEE8()
{
  sub_100019274(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "fopen ro: '%s'", v2, v3, v4, v5, v6);
}

void sub_10003EF50()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "read(2) of files-from file failed", v2, v3, v4, v5, v6);
}

void sub_10003EF84()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Can't have files-from with '..'", v2, v3, v4, v5, v6);
}

void sub_10003EFB8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "realloc", v2, v3, v4, v5, v6);
}

void sub_10003EFEC()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: (l)stat", v2, v3, v4, v5, v6);
}

void sub_10003F054()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: readlink", v2, v3, v4, v5, v6);
}

void sub_10003F0BC()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: flist_normalize_path", v2, v3, v4, v5, v6);
}

void sub_10003F124()
{
  sub_100010D38();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "generated %zu filenames: %s", v2, 0x16u);
}

void sub_10003F1AC()
{
  __assert_rtn("flist_gen_dirent", "flist.c", 1727, "ent->fts_statp != NULL");
}

void sub_10003F1D8()
{
}

void sub_10003F204(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "symlink_read", buf, 2u);
}

void sub_10003F244()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "reallocarray flist_gen_dirent()", v2, v3, v4, v5, v6);
}

void sub_10003F278()
{
}

void sub_10003F2A4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fl_new failed", v2, v3, v4, v5, v6);
}

void sub_10003F2D8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "symlink_read", v2, v3, v4, v5, v6);
}

void sub_10003F30C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "hash_file_by_path", v2, v3, v4, v5, v6);
}

void sub_10003F340()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "symlink_filter", v2, v3, v4, v5, v6);
}

void sub_10003F374()
{
  __assert_rtn("cfg_free", "daemon_cfg.c", 347, "dcfg != NULL");
}

void sub_10003F3A0(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: open", (uint8_t *)&v2, 0xCu);
}

void sub_10003F418()
{
  __assert_rtn("cfg_glue_values", "daemon_cfg.c", 420, "fraglen == *valuelen");
}

void sub_10003F444()
{
  __assert_rtn("cfg_parse_module_name", "daemon_cfg.c", 326, "wr - section <= end - start");
}

void sub_10003F470()
{
  __assert_rtn("cfg_is_valid_module", "daemon_cfg.c", 648, "module != NULL");
}

void sub_10003F49C()
{
  __assert_rtn("cfg_param_resolve", "daemon_cfg.c", 666, "dparam != NULL");
}

void sub_10003F4C8()
{
  __assert_rtn("hash_file_by_path", "hash.c", 131, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10003F4F4(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: file truncated while hashing", (uint8_t *)&v2, 0xCu);
}

void sub_10003F56C()
{
}

void sub_10003F598()
{
}

void sub_10003F5C4()
{
  __assert_rtn("idents_remap", "ids.c", 114, "ids[i].id != 0");
}

void sub_10003F5F0()
{
}

void sub_10003F61C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003F688(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a2;
  __int16 v4 = 2080;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%u: name too long: %s", (uint8_t *)v3, 0x12u);
}

void sub_10003F710(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003F77C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "reallocarray", v2, v3, v4, v5, v6);
}

void sub_10003F7B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10003F81C()
{
  __assert_rtn("idents_send", "ids.c", 249, "ids[i].name != NULL");
}

void sub_10003F848()
{
  __assert_rtn("idents_send", "ids.c", 250, "ids[i].id != 0");
}

void sub_10003F874()
{
  __assert_rtn("idents_send", "ids.c", 252, "sz > 0 && sz <= UINT8_MAX");
}

void sub_10003F8A0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll", v2, v3, v4, v5, v6);
}

void sub_10003F8D4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_blocking", v2, v3, v4, v5, v6);
}

void sub_10003F908()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "multiplex buffer overflow", v2, v3, v4, v5, v6);
}

void sub_10003F93C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "error from remote host", v2, v3, v4, v5, v6);
}

void sub_10003F970()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write outgoing to batch", v2, v3, v4, v5, v6);
}

void sub_10003F9A4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_nonblocking", v2, v3, v4, v5, v6);
}

void sub_10003F9D8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: unknown event", v2, v3, v4, v5, v6);
}

void sub_10003FA0C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write", v2, v3, v4, v5, v6);
}

void sub_10003FA40()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_nonblocking: short write", v2, v3, v4, v5, v6);
}

void sub_10003FA74()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: hangup", v2, v3, v4, v5, v6);
}

void sub_10003FAA8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: bad fd", v2, v3, v4, v5, v6);
}

void sub_10003FADC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: timeout", v2, v3, v4, v5, v6);
}

void sub_10003FB10()
{
  __assert_rtn("io_write_buf_tagged", "io.c", 248, "iotag == IT_DATA");
}

void sub_10003FB3C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_blocking", v2, v3, v4, v5, v6);
}

void sub_10003FB70()
{
  __assert_rtn("io_register_handler", "io.c", 387, "ihandler->tag != tag");
}

void sub_10003FB9C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_nonblocking", v2, v3, v4, v5, v6);
}

void sub_10003FBD0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_nonblocking: short read", v2, v3, v4, v5, v6);
}

void sub_10003FC04()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write incoming to batch", v2, v3, v4, v5, v6);
}

void sub_10003FC38()
{
  __assert_rtn("io_read_buf", "io.c", 560, "sess->mplex_read_remain == 0");
}

void sub_10003FC64()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_flush", v2, v3, v4, v5, v6);
}

void sub_10003FC98()
{
  __assert_rtn("io_buffer_buf", "io.c", 722, "*bufpos + valsz <= buflen");
}

void sub_10003FCC4()
{
  __assert_rtn("io_lowbuffer_buf", "io.c", 746, "*bufpos + valsz + sizeof(int32_t) <= buflen");
}

void sub_10003FCF0()
{
  __assert_rtn("io_lowbuffer_buf", "io.c", 747, "valsz == (valsz & 0xFFFFFF)");
}

void sub_10003FD1C()
{
  __assert_rtn("io_lowbuffer_vstring", "io.c", 771, "*bufpos + sz + sizeof(int32_t) <= buflen");
}

void sub_10003FD48()
{
  __assert_rtn("io_lowbuffer_vstring", "io.c", 772, "sz == (sz & 0xFFFFFF)");
}

void sub_10003FD74()
{
  __assert_rtn("io_buffer_vstring", "io.c", 884, "sz <= 0x7fff");
}

void sub_10003FDA0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_long negative", v2, v3, v4, v5, v6);
}

void sub_10003FDD4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_size: negative value", v2, v3, v4, v5, v6);
}

void sub_10003FE08()
{
  __assert_rtn("io_unbuffer_buf", "io.c", 1029, "*bufpos + valsz <= bufsz");
}

void sub_10003FE34()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_unbuffer_size: negative value", v2, v3, v4, v5, v6);
}

void sub_10003FE68()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_vstring byte 1", v2, v3, v4, v5, v6);
}

void sub_10003FE9C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_vstring buf", v2, v3, v4, v5, v6);
}

void sub_10003FED0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "io_read_vstring: incoming string too large (%zu > %zu)", (uint8_t *)&v3, 0x16u);
}

void sub_10003FF58()
{
  __assert_rtn("iobuf_fill", "io.c", 1228, "buf->size != 0");
}

void sub_10003FF84()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_nonblocking", v2, v3, v4, v5, v6);
}

void sub_10003FFB8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "unexpected eof", v2, v3, v4, v5, v6);
}

void sub_10003FFEC()
{
  __assert_rtn("iobuf_fill", "io.c", 1293, "read <= sess->mplex_read_remain");
}

void sub_100040018()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_flush", v2, v3, v4, v5, v6);
}

void sub_10004004C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: unknown event", v2, v3, v4, v5, v6);
}

void sub_100040080()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "read", v2, v3, v4, v5, v6);
}

void sub_1000400B4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "unexpected end of file", v2, v3, v4, v5, v6);
}

void sub_1000400E8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: bad fd", v2, v3, v4, v5, v6);
}

void sub_10004011C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: timeout", v2, v3, v4, v5, v6);
}

void sub_100040150()
{
  __assert_rtn("iobuf_peek_buf", "io.c", 1316, "valsz <= buf->resid");
}

void sub_10004017C(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "iobuf_read_size";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: negative value", (uint8_t *)&v1, 0xCu);
}

void sub_100040200(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100040238(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100040270(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000402A8()
{
}

void sub_1000402C0()
{
  __assert_rtn("rsync_getopt", "main.c", 1479, "opts.ipf == 0 || opts.ipf == 4 || opts.ipf == 6");
}

void sub_1000402EC()
{
}

void sub_100040308()
{
}

void sub_100040324()
{
  __assert_rtn("rsync_getopt", "main.c", 1625, "ret == 0");
}

void sub_100040350()
{
  __assert_rtn("rsync_getopt", "main.c", 1622, "ret == 0");
}

void sub_10004037C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Cannot use --dirs and --no-dirs at the same time", v2, v3, v4, v5, v6);
}

void sub_1000403B0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Cannot use --relative and --no-relative at the same time", v2, v3, v4, v5, v6);
}

void sub_1000403E4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "strdup filesfrom no host", v2, v3, v4, v5, v6);
}

void sub_100040418()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "malloc hostspec", v2, v3, v4, v5, v6);
}

void sub_10004044C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "malloc path", v2, v3, v4, v5, v6);
}

void sub_100040480()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "malloc hostspec path", v2, v3, v4, v5, v6);
}

void sub_1000404B4(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Missing path in --files-from: %s", (uint8_t *)&v2, 0xCu);
}

void sub_10004052C()
{
}

void sub_10004053C()
{
}

void sub_100040558()
{
  errx(1, "--block-size=%s: invalid numeric value", optarg);
}

void sub_100040588()
{
  errx(1, "--block-size=%s: must be no less than 0", optarg);
}

void sub_1000405B8()
{
  __assert_rtn("rsync_getopt", "main.c", 1026, "ret == 0");
}

void sub_1000405E4()
{
}

void sub_100040614(const char *a1)
{
}

void sub_100040644()
{
}

void sub_100040674()
{
}

void sub_1000406A4(int *a1, int a2)
{
  int v2 = (&off_100054AF8)[4 * *a1];
  uint64_t v3 = sub_100011310(a2);
  errx(1, "option --%s conflicts with %s", v2, v3);
}

void sub_1000406E8(int *a1)
{
}

void sub_100040720()
{
}

void sub_10004073C()
{
}

void sub_100040758()
{
}

void sub_100040774()
{
  errx(1, "--checksum-seed=%s: must be no less than %d", optarg, 0x80000000);
}

void sub_1000407A8()
{
  errx(1, "--checksum-seed=%s: must be no greater than %d", optarg, 0x7FFFFFFF);
}

void sub_1000407DC()
{
  errx(1, "--checksum-seed=%s: invalid numeric value", optarg);
}

void sub_10004080C()
{
  errx(1, "--protocol=%s: out of range, min: %d, max: %d", optarg, 27, 40);
}

void sub_100040848()
{
  errx(1, "--protocol=%s: invalid value", optarg);
}

void sub_100040878()
{
  errx(1, "--compress-level=%s: must be no less than %d", optarg, -1);
}

void sub_1000408AC()
{
  errx(1, "--compress-level=%s: must be no greater than %d", optarg, 9);
}

void sub_1000408E0()
{
  errx(1, "--compress-level=%s: invalid numeric value", optarg);
}

void sub_100040910()
{
  errx(1, "--max-delete=%s: invalid numeric value", optarg);
}

void sub_100040940()
{
}

void sub_10004095C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000409C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100040A34(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100040AA0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100040AD8()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: futimens", v2, v3, v4, v5, v6);
}

void sub_100040B40()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fchmodat", v2, v3, v4, v5, v6);
}

void sub_100040BA8(uint64_t a1, NSObject *a2)
{
  int v4 = *__error();
  int v5 = 136315394;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: fchmodat (1) %d", (uint8_t *)&v5, 0x12u);
}

void sub_100040C48()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fchownat", v2, v3, v4, v5, v6);
}

void sub_100040CB0()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: utimensat (2)", v2, v3, v4, v5, v6);
}

void sub_100040D18()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_recv", v2, v3, v4, v5, v6);
}

void sub_100040D4C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "reallocarray receiver", v2, v3, v4, v5, v6);
}

void sub_100040D80()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_gen_dels", v2, v3, v4, v5, v6);
}

void sub_100040DB4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_del", v2, v3, v4, v5, v6);
}

void sub_100040DE8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "upload_alloc", v2, v3, v4, v5, v6);
}

void sub_100040E1C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "download_alloc", v2, v3, v4, v5, v6);
}

void sub_100040E50()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsync_downloader", v2, v3, v4, v5, v6);
}

void sub_100040E84()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsync_uploader_tail", v2, v3, v4, v5, v6);
}

void sub_100040EB8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "sess_stats_recv", v2, v3, v4, v5, v6);
}

void sub_100040EEC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "upload_del", v2, v3, v4, v5, v6);
}

void sub_100040F20()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsync_uploader", v2, v3, v4, v5, v6);
}

void sub_100040F54()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: hangup", v2, v3, v4, v5, v6);
}

void sub_100040F88(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100040FFC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write files-from remote file terminator", v2, v3, v4, v5, v6);
}

void sub_100041030()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write files-from remote file", v2, v3, v4, v5, v6);
}

void sub_100041064()
{
}

void sub_100041080()
{
}

void sub_10004109C()
{
}

void sub_1000410B8()
{
}

void sub_1000410D4()
{
}

void sub_1000410F0()
{
}

void sub_10004110C()
{
  *__error() = 63;
  err(3, "strlcpy");
}

void sub_100041134()
{
  *__error() = 63;
  err(3, "strlcat");
}

void sub_10004115C()
{
  __assert_rtn("rule_iter", "rules.c", 1380, "ret != RULE_ITER_SKIP");
}

void sub_100041188()
{
}

void sub_1000411A4()
{
}

void sub_1000411C0()
{
}

void sub_1000411DC()
{
  __assert_rtn("rule_dir_pop", "rules.c", 1486, "strcmp(mrule->path, path) != 0");
}

void sub_100041208()
{
  __assert_rtn("ruleset_free", "rules.c", 541, "ruleset->numdrules == 0");
}

void sub_100041234()
{
}

void sub_100041260()
{
}

void sub_10004128C()
{
  __assert_rtn("ruleset_remove_merge", "rules.c", 510, "rs->numdrules != 0");
}

void sub_1000412B8()
{
}

void sub_1000412E4()
{
  __assert_rtn("rule_matched", "rules.c", 1061, "ret != 0");
}

void sub_100041310(const char *a1)
{
  *__error() = 63;
  err(3, "%s", a1);
}

void sub_100041348()
{
  *__error() = 63;
  err(3, "%s", byte_100058A60);
}

void sub_100041380()
{
  __assert_rtn("rule_iter_impl", "rules.c", 1353, "ract == RULE_ITER_HALT");
}

void sub_1000413AC()
{
  __assert_rtn("rule_iter_impl", "rules.c", 1348, "ract != RULE_ITER_SKIP");
}

void sub_1000413D8()
{
  __assert_rtn("rule_iter_impl", "rules.c", 1341, "ract == RULE_ITER_HALT");
}

void sub_100041404()
{
  __assert_rtn("rule_cleared", "rules.c", 1246, "r >= ruleset->rules && r < ruleset->rules + ruleset->numrules");
}

void sub_100041430()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_lowbuffer_alloc", v2, v3, v4, v5, v6);
}

void sub_100041464()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_gen", v2, v3, v4, v5, v6);
}

void sub_100041498()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "flist_send", v2, v3, v4, v5, v6);
}

void sub_1000414CC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "iobuf_alloc", v2, v3, v4, v5, v6);
}

void sub_100041500()
{
  __assert_rtn("rsync_sender", "sender.c", 1308, "pfd[0].fd != -1");
}

void sub_10004152C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "send_dl_enqueue", v2, v3, v4, v5, v6);
}

void sub_100041560()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_check", v2, v3, v4, v5, v6);
}

void sub_100041594()
{
}

void sub_1000415C0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "write", v2, v3, v4, v5, v6);
}

void sub_1000415F4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_data_written", v2, v3, v4, v5, v6);
}

void sub_100041628()
{
  __assert_rtn("rsync_sender", "sender.c", 1603, "wbufpos == 0 && wbufsz == 0");
}

void sub_100041654()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "send_up_fsm", v2, v3, v4, v5, v6);
}

void sub_100041688()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "sess_stats_end", v2, v3, v4, v5, v6);
}

void sub_1000416BC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "sender_finalize", v2, v3, v4, v5, v6);
}

void sub_1000416F0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "phases complete with files still queued", v2, v3, v4, v5, v6);
}

void sub_100041724()
{
  __assert_rtn("rsync_sender", "sender.c", 1633, "wbufsz == 0 && wbufpos == 0");
}

void sub_100041750()
{
  __assert_rtn("rsync_sender", "sender.c", 1644, "up.cur->dlstate == SDL_DONE");
}

void sub_10004177C()
{
  __assert_rtn("rsync_sender", "sender.c", 1632, "up.stat.mapsz == 0");
}

void sub_1000417A8()
{
  __assert_rtn("rsync_sender", "sender.c", 1631, "up.stat.map == NULL");
}

void sub_1000417D4()
{
  __assert_rtn("rsync_sender", "sender.c", 1630, "up.stat.fd == -1");
}

void sub_100041800()
{
  __assert_rtn("rsync_sender", "sender.c", 1629, "pfd[2].fd == -1");
}

void sub_10004182C()
{
  __assert_rtn("rsync_sender", "sender.c", 1602, "pfd[2].fd == -1");
}

void sub_100041858()
{
  __assert_rtn("rsync_sender", "sender.c", 1543, "pfd[2].fd == -1");
}

void sub_100041884()
{
  __assert_rtn("rsync_sender", "sender.c", 1501, "up.cur != NULL");
}

void sub_1000418B0()
{
  __assert_rtn("rsync_sender", "sender.c", 1502, "up.stat.fd != -1");
}

void sub_1000418DC()
{
  __assert_rtn("rsync_sender", "sender.c", 1504, "up.stat.mapsz == 0");
}

void sub_100041908()
{
  __assert_rtn("rsync_sender", "sender.c", 1503, "up.stat.map == NULL");
}

void sub_100041934()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "sender_get_iflags", v2, v3, v4, v5, v6);
}

void sub_100041968()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "blk_recv", v2, v3, v4, v5, v6);
}

void sub_10004199C()
{
  __assert_rtn("rsync_sender", "sender.c", 1431, "mdl == NULL");
}

void sub_1000419C8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "iobuf_fill", v2, v3, v4, v5, v6);
}

void sub_1000419FC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll: hangup", v2, v3, v4, v5, v6);
}

void sub_100041A30()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Failed to install remove-source-files handler; exiting",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100041A64()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: chdir", v2, v3, v4, v5, v6);
}

void sub_100041ACC()
{
}

void sub_100041AF8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Only one src dir allowed with --files-from", v2, v3, v4, v5, v6);
}

void sub_100041B2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100041B9C()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: unlink", v2, v3, v4, v5, v6);
}

void sub_100041C04()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: not removed, size or mtime changed", v2, v3, v4, v5, v6);
}

void sub_100041C6C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100041CD8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "callloc", v2, v3, v4, v5, v6);
}

void sub_100041D0C()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "blocks requested for special: %s", v2, v3, v4, v5, v6);
}

void sub_100041D74()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "blocks requested for directory: %s", v2, v3, v4, v5, v6);
}

void sub_100041DDC()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "blocks requested for symlink: %s", v2, v3, v4, v5, v6);
}

void sub_100041E44(int a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 2048;
  uint64_t v5 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "file index out of bounds: invalid %d out of %zu", (uint8_t *)v3, 0x12u);
}

void sub_100041ECC()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 524, "BLKSTAT_NONE == up->stat.curst");
}

void sub_100041EF8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "decompress_reinit", v2, v3, v4, v5, v6);
}

void sub_100041F2C()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 304, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_100041F58(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001CDBC((void *)&_mh_execute_header, a2, a3, "deflate res=%d", a5, a6, a7, a8, 0);
}

void sub_100041FC4()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 312, "comp_state == COMPRESS_RUN");
}

void sub_100041FF0()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 392, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_10004201C()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 442, "ssz >= 4");
}

void sub_100042048(uint64_t a1)
{
  double v1 = sub_10002F70C(a1, __stack_chk_guard);
  sub_10002F748(v1);
  sub_10002F7C0((void *)&_mh_execute_header, v2, v3, "%s: flushed %jd KB total, %.2f%% uploaded", v4, v5, v6);
}

void sub_1000420B0()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 512, "up->stat.fd != -1");
}

void sub_1000420DC()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 547, "up->stat.fd != -1");
}

void sub_100042108()
{
  sub_10002F770(__stack_chk_guard);
  LODWORD(v3) = 136315394;
  *(void *)((char *)&v3 + 4) = v0;
  sub_10002F7B0();
  sub_100010D84((void *)&_mh_execute_header, v1, v2, "%s: primed for %jd B total", (const char *)v3, DWORD2(v3));
}

void sub_100042178()
{
  __assert_rtn("send_up_fsm", "sender.c", 747, "BLKSTAT_NONE == up->stat.curst");
}

void sub_1000421A4()
{
  __assert_rtn("send_up_fsm", "sender.c", 617, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_1000421D0()
{
  __assert_rtn("send_up_fsm", "sender.c", 665, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_1000421FC()
{
}

void sub_100042228()
{
  __assert_rtn("send_up_fsm", "sender.c", 736, "up->stat.fd != -1");
}

void sub_100042254()
{
  __assert_rtn("send_up_fsm", "sender.c", 770, "up->stat.fd != -1");
}

void sub_100042280()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "read incorrect update complete ack", v2, v3, v4, v5, v6);
}

void sub_1000422B4(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_10002F794((void *)&_mh_execute_header, v2, v3, "io_write_int", v4);
}

void sub_1000422E0(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_10002F794((void *)&_mh_execute_header, v2, v3, "io_write_short", v4);
}

void sub_10004230C(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_10002F794((void *)&_mh_execute_header, v2, v3, "iobuf_fill on final goodbye", v4);
}

void sub_100042338()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "iobuf_fill on final goodbye", v2, v3, v4, v5, v6);
}

void sub_10004236C()
{
  __assert_rtn("send_up_reset", "sender.c", 81, "p != NULL");
}

void sub_100042398()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "deflateInit2", v2, v3, v4, v5, v6);
}

void sub_1000423CC()
{
}

void sub_1000423F8()
{
  __assert_rtn("token_ff_compressed", "sender.c", 211, "up->stat.map != NULL");
}

void sub_100042424()
{
  __assert_rtn("token_ff_compressed", "sender.c", 229, "fmap_trapped == NULL || fmap_trapped_prev == NULL");
}

void sub_100042450(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001CDBC((void *)&_mh_execute_header, a2, a3, "deflate ff res=%d", a5, a6, a7, a8, 0);
}

void sub_1000424BC()
{
  sub_100010D44(__stack_chk_guard);
  int v2 = 134218240;
  uint64_t v3 = v0;
  sub_10002F7B0();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "token not in block set: %zu (have %zu blocks)", (uint8_t *)&v2, 0x16u);
}

void sub_100042544()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fcntl_nonblock", v2, v3, v4, v5, v6);
}

void sub_100042578()
{
  __assert_rtn("rsync_server", "server.c", 125, "sess.opts->whole_file != -1");
}

void sub_1000425A4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "must have arguments", v2, v3, v4, v5, v6);
}

void sub_1000425D8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "server receiver mode requires two argument", v2, v3, v4, v5, v6);
}

void sub_10004260C()
{
  __assert_rtn("rsync_server", "server.c", 212, "sess.total_deleted >= sess.opts->max_delete");
}

void sub_100042638()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "data remains in read pipe", v2, v3, v4, v5, v6);
}

void sub_10004266C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "first argument must be a standalone period", v2, v3, v4, v5, v6);
}

void sub_1000426A0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fcntl: F_GETFL", v2, v3, v4, v5, v6);
}

void sub_1000426D4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fcntl: F_SETFL", v2, v3, v4, v5, v6);
}

void sub_100042708()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_write_ulong", v2, v3, v4, v5, v6);
}

double sub_10004273C(uint64_t a1, NSObject *a2)
{
  double v2 = (double)*(unint64_t *)(a1 + 112) / 1000.0;
  double v3 = (double)*(unint64_t *)(a1 + 120) / 1000.0;
  int v5 = 134218240;
  double v6 = v2;
  __int16 v7 = 2048;
  double v8 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "File list generation time: %.3f seconds, transfer time: %.3f seconds", (uint8_t *)&v5, 0x16u);
  return result;
}

void sub_1000427DC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_ulong", v2, v3, v4, v5, v6);
}

void sub_100042810()
{
  __assert_rtn("cleanup_hold", "cleanup.c", 111, "ctx->hold >= 0");
}

void sub_10004283C()
{
}

void sub_100042868()
{
  __assert_rtn("cleanup_set_child", "cleanup.c", 197, "pid >= 0");
}

void sub_100042894()
{
  __assert_rtn("rsync_connect", "socket.c", 792, "f->host != NULL");
}

void sub_1000428C0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "inet_resolve", v2, v3, v4, v5, v6);
}

void sub_1000428F4()
{
}

void sub_100042920()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "inet_connect", v2, v3, v4, v5, v6);
}

void sub_100042954()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "socket", v2, v3, v4, v5, v6);
}

void sub_100042988()
{
}

void sub_1000429A4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "bind", v2, v3, v4, v5, v6);
}

void sub_1000429D8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100042A48()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "poll failed", v2, v3, v4, v5, v6);
}

void sub_100042A7C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "connect", v2, v3, v4, v5, v6);
}

void sub_100042AB0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "inet_resolve bind", v2, v3, v4, v5, v6);
}

void sub_100042AE4(int a1, int a2)
{
  gai_strerror(a2);
  sub_100033DD4();
  sub_100033DEC((void *)&_mh_execute_header, v2, v3, "getaddrinfo: %s: %s", v4, v5, v6, v7, v8);
}

void sub_100042B64(int a1, int a2)
{
  gai_strerror(a2);
  sub_100033DD4();
  sub_100033DEC((void *)&_mh_execute_header, v2, v3, "could not resolve hostname %s: %s", v4, v5, v6, v7, v8);
}

void sub_100042BE4(NSObject *a1)
{
  gai_strerror(9);
  sub_1000075CC();
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "could not resolve service rsync: %s", v2, 0xCu);
}

void sub_100042C70()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "no addresses resolved: %s", v2, v3, v4, v5, v6);
}

void sub_100042CD8()
{
}

void sub_100042D04()
{
  __assert_rtn("rsync_listen", "socket.c", 878, "opts->port != NULL");
}

void sub_100042D30()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "setsockopt", v2, v3, v4, v5, v6);
}

void sub_100042D64()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "fcntl", v2, v3, v4, v5, v6);
}

void sub_100042D98()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "listen", v2, v3, v4, v5, v6);
}

void sub_100042DCC()
{
}

void sub_100042DF8()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "sigaction", v2, v3, v4, v5, v6);
}

void sub_100042E2C()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "getservbyname: %s", v2, v3, v4, v5, v6);
}

void sub_100042E94()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "Value required for socket option '%s'", v2, v3, v4, v5, v6);
}

void sub_100042EFC()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "setsockopt %s", v2, v3, v4, v5, v6);
}

void sub_100042F64()
{
  sub_1000075CC();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error parsing value for socket option '%s': %s", v2, 0x16u);
}

void sub_100042FEC()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "Unresolvable socket option '%s'", v2, v3, v4, v5, v6);
}

void sub_100043054()
{
  __assert_rtn("rsync_socket", "socket.c", 1023, "f->host != NULL");
}

void sub_100043080()
{
  __assert_rtn("rsync_socket", "socket.c", 1024, "f->module != NULL");
}

void sub_1000430AC()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "io_read_line", v2, v3, v4, v5, v6);
}

void sub_1000430E0()
{
  __assert_rtn("rsync_socket", "socket.c", 1140, "sess.opts->whole_file != -1");
}

void sub_10004310C()
{
  __assert_rtn("rsync_socket", "socket.c", 1168, "sess.total_deleted >= sess.opts->max_delete");
}

void sub_100043138()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "batch_open", v2, v3, v4, v5, v6);
}

void sub_10004316C()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "protocol_line", v2, v3, v4, v5, v6);
}

void sub_1000431A0()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Malformed auth challenge", v2, v3, v4, v5, v6);
}

void sub_1000431D4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Failed to obtain password", v2, v3, v4, v5, v6);
}

void sub_100043208()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "Password hashing failed", v2, v3, v4, v5, v6);
}

void sub_10004323C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000432B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100043324()
{
  sub_100033E0C();
  _DWORD *v0 = 136315138;
  *uint64_t v1 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Ignoring password file '%s' due to strict mode violation", v3, 0xCu);
}

void sub_10004336C()
{
  sub_100033E0C();
  _DWORD *v0 = 136315138;
  *uint64_t v1 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s: read", v3, 0xCu);
}

void sub_1000433B4(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "RSYNC_PASSWORD environment variable set but not used in favor of --password-file", buf, 2u);
}

void sub_1000433F4()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "rsyncd protocol error: unknown command", v2, v3, v4, v5, v6);
}

void sub_100043428()
{
  sub_100002A24();
  sub_100002A08((void *)&_mh_execute_header, v0, v1, "line buffer overrun", v2, v3, v4, v5, v6);
}

void sub_10004345C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "realloc", v1, 2u);
}

void sub_1000434A0()
{
}

void sub_1000434CC()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: empty link", v2, v3, v4, v5, v6);
}

void sub_100043534()
{
}

void sub_100043560()
{
  sub_1000075CC();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: readlinkat", v2, v3, v4, v5, v6);
}

void sub_1000435C8()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "calloc", v2);
}

void sub_100043600()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "strdup", v2);
}

void sub_100043638()
{
  __assert_rtn("upload_next_phase", "uploader.c", 1485, "p->state == UPLOAD_FINISHED");
}

void sub_100043664()
{
  __assert_rtn("upload_ack_complete", "uploader.c", 1517, "p->state != UPLOAD_WRITE");
}

void sub_100043690()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1758, "u->state == UPLOAD_WRITE");
}

void sub_1000436BC()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1593, "u->state != UPLOAD_FINISHED");
}

void sub_1000436E8()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1603, "u->buf != NULL");
}

void sub_100043714()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1604, "*fileoutfd != -1");
}

void sub_100043740()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "io_write_nonblocking", v2);
}

void sub_100043778()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1605, "*fileinfd == -1");
}

void sub_1000437A4()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1658, "*fileoutfd != -1");
}

void sub_1000437D0()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1661, "u->fl[u->idx].sendidx != -1");
}

void sub_1000437FC()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "realloc", v2);
}

void sub_100043834()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "io_write_int", v2);
}

void sub_10004386C()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1740, "*fileinfd == -1");
}

void sub_100043898()
{
}

void sub_1000438C4()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "malloc", v2);
}

void sub_1000438FC()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1916, "pos == u->bufsz");
}

void sub_100043928()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "pread", v2);
}

void sub_100043960()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1850, "*fileinfd == -1");
}

void sub_10004398C()
{
  sub_100010D38();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s: not mapped", v1, 0xCu);
}

void sub_100043A18()
{
  __assert_rtn("pre_dir", "uploader.c", 895, "p->rootfd != -1");
}

void sub_100043A44()
{
}

void sub_100043A70()
{
  __assert_rtn("pre_symlink", "uploader.c", 253, "p->rootfd != -1");
}

void sub_100043A9C(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mktemplate", v3);
}

void sub_100043ACC(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstemplinkat", v3);
}

void sub_100043AFC(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "symlinkat", v3);
}

void sub_100043B2C(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "symlinkat_read", v3);
}

void sub_100043B5C()
{
}

void sub_100043B88(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "rsync_set_metadata", v3);
}

void sub_100043BB8()
{
  __assert_rtn("pre_file", "uploader.c", 1421, "pdfd == -1");
}

void sub_100043BE4()
{
  __assert_rtn("pre_file", "uploader.c", 1424, "pdfd == -1");
}

void sub_100043C10()
{
  __assert_rtn("pre_file", "uploader.c", 1401, "pdfd == -1");
}

void sub_100043C3C()
{
}

void sub_100043C68()
{
}

void sub_100043C94()
{
  __assert_rtn("pre_dev", "uploader.c", 379, "p->rootfd != -1");
}

void sub_100043CC0(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstempnodat", v3);
}

void sub_100043CF0(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mknodat", v3);
}

void sub_100043D20()
{
  __assert_rtn("pre_fifo", "uploader.c", 487, "p->rootfd != -1");
}

void sub_100043D4C(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstempfifoat", v3);
}

void sub_100043D7C(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkfifoat", v3);
}

void sub_100043DAC()
{
}

void sub_100043DD8()
{
  __assert_rtn("pre_sock", "uploader.c", 580, "p->rootfd != -1");
}

void sub_100043E04(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstempsock", v3);
}

void sub_100043E34(unsigned char *a1, unsigned char *a2)
{
  sub_100010D28(a1, a2);
  sub_100010D10((void *)&_mh_execute_header, v2, (uint64_t)v2, "mksock", v3);
}

void sub_100043E64()
{
}

void sub_100043E90()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1657, "*fileinfd == -1");
}

void sub_100043EBC()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: fstatat", v2, v3, v4, v5, v6);
}

void sub_100043F24()
{
}

void sub_100043F50()
{
}

void sub_100043F7C()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: asprintf", v2, v3, v4, v5, v6);
}

void sub_100043FE4()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "hcreate", v2);
}

void sub_10004401C()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "fts_open", v2);
}

void sub_100044054()
{
  __assert_rtn("pre_dir_delete", "uploader.c", 746, "ent->fts_statp != NULL");
}

void sub_100044080()
{
  __assert_rtn("pre_dir_delete", "uploader.c", 810, "delmode == DMODE_DELAY");
}

void sub_1000440AC()
{
  __assert_rtn("pre_dir_delete", "uploader.c", 789, "ent->fts_info == FTS_DP");
}

void sub_1000440D8()
{
  sub_100002A24();
  sub_100010D10((void *)&_mh_execute_header, v0, v1, "hsearch", v2);
}

void sub_100044110()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: duplicate", v2, v3, v4, v5, v6);
}

void sub_100044178()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s: fits time modify window", v1, 0xCu);
}

void sub_1000441EC()
{
  sub_100010D44(__stack_chk_guard);
  sub_10000B674();
  sub_100010D84((void *)&_mh_execute_header, v0, v1, "%s: skipping: up to date in %s", v2, v3);
}

void sub_100044254()
{
  sub_100010D44(__stack_chk_guard);
  sub_10000B674();
  sub_100010D84((void *)&_mh_execute_header, v0, v1, "%s: copying: up to date in %s", v2, v3);
}

void sub_1000442BC(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  int v4 = 136315394;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "hard link '%s/%s'", (uint8_t *)&v4, 0x16u);
}

void sub_100044348()
{
  sub_100010D44(__stack_chk_guard);
  sub_10000B674();
  sub_100010D84((void *)&_mh_execute_header, v0, v1, "%s: hardlinking: up to date in %s", v2, v3);
}

void sub_1000443B0()
{
  sub_100010D44(__stack_chk_guard);
  sub_100010D38();
  sub_1000075B0((void *)&_mh_execute_header, v0, v1, "%s: unlinkat", v2, v3, v4, v5, v6);
}

void sub_100044418(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100044484(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

int CC_MD4_Final(unsigned __int8 *md, CC_MD4_CTX *c)
{
  return _CC_MD4_Final(md, c);
}

int CC_MD4_Init(CC_MD4_CTX *c)
{
  return _CC_MD4_Init(c);
}

int CC_MD4_Update(CC_MD4_CTX *c, const void *data, CC_LONG len)
{
  return _CC_MD4_Update(c, data, len);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __strlcat_chk()
{
  return ___strlcat_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

void _exit(int a1)
{
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return _accept(a1, a2, a3);
}

int access(const char *a1, int a2)
{
  return _access(a1, a2);
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asprintf(char **a1, const char *a2, ...)
{
  return _asprintf(a1, a2);
}

int atoi(const char *a1)
{
  return _atoi(a1);
}

char *__cdecl basename(char *a1)
{
  return _basename(a1);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return _bind(a1, a2, a3);
}

void bzero(void *a1, size_t a2)
{
}

int chdir(const char *a1)
{
  return _chdir(a1);
}

int chroot(const char *a1)
{
  return _chroot(a1);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

void closelog(void)
{
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return _connect(a1, a2, a3);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return _copyfile(from, to, state, flags);
}

char *__cdecl dirname(char *a1)
{
  return _dirname(a1);
}

int dup(int a1)
{
  return _dup(a1);
}

int dup2(int a1, int a2)
{
  return _dup2(a1, a2);
}

void err(int a1, const char *a2, ...)
{
}

void errx(int a1, const char *a2, ...)
{
}

int execvp(const char *__file, char *const *__argv)
{
  return _execvp(__file, __argv);
}

void exit(int a1)
{
}

int fchmod(int a1, mode_t a2)
{
  return _fchmod(a1, a2);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return _fchmodat(a1, a2, a3, a4);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return _fchown(a1, a2, a3);
}

int fchownat(int a1, const char *a2, uid_t a3, gid_t a4, int a5)
{
  return _fchownat(a1, a2, a3, a4, a5);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return _fcopyfile(from_fd, to_fd, a3, flags);
}

DIR *__cdecl fdopendir(int a1)
{
  return _fdopendir(a1);
}

int ferror(FILE *a1)
{
  return _ferror(a1);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int fileno(FILE *a1)
{
  return _fileno(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

pid_t fork(void)
{
  return _fork();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return _fstatat(a1, a2, a3, a4);
}

int ftruncate(int a1, off_t a2)
{
  return _ftruncate(a1, a2);
}

int fts_close(FTS *a1)
{
  return _fts_close(a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return _fts_open(a1, a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return _fts_read(a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return _fts_set(a1, a2, a3);
}

int futimens(int __fd, const timespec __times[2])
{
  return _futimens(__fd, __times);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

const char *__cdecl gai_strerror(int a1)
{
  return _gai_strerror(a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return _getaddrinfo(a1, a2, a3, a4);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return _getcwd(a1, a2);
}

ssize_t getdelim(char **__linep, size_t *__linecapp, int __delimiter, FILE *__stream)
{
  return _getdelim(__linep, __linecapp, __delimiter, __stream);
}

gid_t getegid(void)
{
  return _getegid();
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

uid_t geteuid(void)
{
  return _geteuid();
}

group *__cdecl getgrgid(gid_t a1)
{
  return _getgrgid(a1);
}

group *__cdecl getgrnam(const char *a1)
{
  return _getgrnam(a1);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return _getline(__linep, __linecapp, __stream);
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return _getnameinfo(a1, a2, a3, a4, a5, a6, a7);
}

int getopt_long(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return _getopt_long(a1, a2, a3, a4, a5);
}

int getpagesize(void)
{
  return _getpagesize();
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return _getpeername(a1, a2, a3);
}

pid_t getpid(void)
{
  return _getpid();
}

const char *getprogname(void)
{
  return _getprogname();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return _getpwnam(a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return _getpwuid(a1);
}

servent *__cdecl getservbyname(const char *a1, const char *a2)
{
  return _getservbyname(a1, a2);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return _getsockopt(a1, a2, a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

int glob(const char *a1, int a2, int (__cdecl *a3)(const char *, int), glob_t *a4)
{
  return _glob(a1, a2, a3, a4);
}

void globfree(glob_t *a1)
{
}

int hcreate(size_t a1)
{
  return _hcreate(a1);
}

void hdestroy(void)
{
}

ENTRY *__cdecl hsearch(ENTRY a1, ACTION a2)
{
  return _hsearch(a1, a2);
}

uint64_t humanize_number()
{
  return _humanize_number();
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return _inet_pton(a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

int linkat(int a1, const char *a2, int a3, const char *a4, int a5)
{
  return _linkat(a1, a2, a3, a4, a5);
}

int listen(int a1, int a2)
{
  return _listen(a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return _localtime(a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

int lstat(const char *a1, stat *a2)
{
  return _lstat(a1, a2);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

int mkdirat(int a1, const char *a2, mode_t a3)
{
  return _mkdirat(a1, a2, a3);
}

int mkfifoat(int a1, const char *a2, mode_t a3)
{
  return _mkfifoat(a1, a2, a3);
}

int mknodat(int a1, const char *a2, mode_t a3, dev_t a4)
{
  return _mknodat(a1, a2, a3, a4);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return _openat(a1, a2, a3);
}

void openlog(const char *a1, int a2, int a3)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

int pipe(int a1[2])
{
  return _pipe(a1);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return _poll(a1, a2, a3);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return _pread(__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int puts(const char *a1)
{
  return _puts(a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int raise(int a1)
{
  return _raise(a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return _readdir(a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return _readlink(a1, a2, a3);
}

ssize_t readlinkat(int a1, const char *a2, char *a3, size_t a4)
{
  return _readlinkat(a1, a2, a3, a4);
}

char *__cdecl readpassphrase(const char *a1, char *a2, size_t a3, int a4)
{
  return _readpassphrase(a1, a2, a3, a4);
}

int renameat(int a1, const char *a2, int a3, const char *a4)
{
  return _renameat(a1, a2, a3, a4);
}

int res_9_b64_ntop(const u_char *a1, size_t a2, char *a3, size_t a4)
{
  return _res_9_b64_ntop(a1, a2, a3, a4);
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return _setenv(__name, __value, __overwrite);
}

int setgid(gid_t a1)
{
  return _setgid(a1);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return _setlocale(a1, a2);
}

int setpgid(pid_t a1, pid_t a2)
{
  return _setpgid(a1, a2);
}

void setprogname(const char *a1)
{
}

pid_t setsid(void)
{
  return _setsid();
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return _setsockopt(a1, a2, a3, a4, a5);
}

int setuid(uid_t a1)
{
  return _setuid(a1);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return _sigaction(a1, a2, a3);
}

void siglongjmp(sigjmp_buf a1, int a2)
{
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int sigprocmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return _sigprocmask(a1, a2, a3);
}

int sigsetjmp(sigjmp_buf a1, int a2)
{
  return _sigsetjmp(a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

int socketpair(int a1, int a2, int a3, int *a4)
{
  return _socketpair(a1, a2, a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return _strcasecmp(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return _strcspn(__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return _strftime(a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return _strlcat(__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return _strncasecmp(a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return _strndup(__s1, __n);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return _strpbrk(__s1, __s2);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return _strsep(__stringp, __delim);
}

size_t strspn(const char *__s, const char *__charset)
{
  return _strspn(__s, __charset);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return _strstr(__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return _strtoll(__str, __endptr, __base);
}

uint64_t strtonum(const char *__numstr, uint64_t __minval, uint64_t __maxval, const char **__errstrp)
{
  return _strtonum(__numstr, __minval, __maxval, __errstrp);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return _strtoul(__str, __endptr, __base);
}

int symlinkat(const char *a1, int a2, const char *a3)
{
  return _symlinkat(a1, a2, a3);
}

int system(const char *a1)
{
  return _system(a1);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

mode_t umask(mode_t a1)
{
  return _umask(a1);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return _unlinkat(a1, a2, a3);
}

uint64_t usbuf_cat()
{
  return _usbuf_cat();
}

uint64_t usbuf_data()
{
  return _usbuf_data();
}

uint64_t usbuf_delete()
{
  return _usbuf_delete();
}

uint64_t usbuf_finish()
{
  return _usbuf_finish();
}

uint64_t usbuf_len()
{
  return _usbuf_len();
}

uint64_t usbuf_new()
{
  return _usbuf_new();
}

uint64_t usbuf_printf()
{
  return _usbuf_printf();
}

uint64_t usbuf_putc()
{
  return _usbuf_putc();
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

int utimensat(int __fd, const char *__path, const timespec __times[2], int __flag)
{
  return _utimensat(__fd, __path, __times, __flag);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return _vasprintf(a1, a2, a3);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return _vfprintf(a1, a2, a3);
}

void vsyslog(int a1, const char *a2, __darwin_va_list a3)
{
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return _waitpid(a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}