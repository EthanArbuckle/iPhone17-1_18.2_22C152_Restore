uint64_t sub_1000AF29C()
{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  defaultLogger()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore deleteCredential", v3, 2u);
    swift_slowDealloc();
  }
  v5 = v0[10];
  v4 = v0[11];
  v6 = v0[9];
  v8 = v0[3];
  v7 = v0[4];
  v9 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = (void *)swift_allocObject();
  v0[12] = v10;
  v10[2] = v7;
  v10[3] = v9;
  v10[4] = v8;
  v11 = swift_allocObject();
  v0[13] = v11;
  *(void *)(v11 + 16) = &unk_1001C3088;
  *(void *)(v11 + 24) = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  *v12 = v0;
  v12[1] = sub_1000AF480;
  return AsyncCoreDataContainer.write<A>(_:)(v12, &unk_1001C1AB0, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_1000AF480()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v2 = sub_1000AF6C0;
  }
  else
  {
    swift_release();
    swift_release();
    v2 = sub_1000AF5A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000AF5A4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[4];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v2;
  swift_retain();
  sub_1000AB864(v1, (uint64_t)&unk_1001C30A0, (uint64_t)v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000AF6C0()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000AF83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  uint64_t v6 = type metadata accessor for DIPError();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[20] = v8;
  v5[21] = *(void *)(v8 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[25] = v9;
  v5[26] = *(void *)(v9 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  return _swift_task_switch(sub_1000AFA40, 0, 0);
}

uint64_t sub_1000AFA40()
{
  uint64_t v15 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v6 = (void *)swift_allocObject();
  *(void *)(v0 + 232) = v6;
  v6[2] = v4;
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v5;
  *(void *)(v0 + 240) = *(void *)(v5 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 248) = v7;
  *(void *)(v7 + 16) = sub_1000B9548;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 480) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  *(void *)(v0 + 256) = v9;
  *(void *)(v0 + 264) = (v1 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v15, v8, v14);
  swift_retain();
  v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v10;
  uint64_t v11 = sub_100006CC8(&qword_1001C30B0);
  void *v10 = v0;
  v10[1] = sub_1000AFBF4;
  uint64_t v12 = *(void *)(v0 + 224);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, v12, sub_1000B95A0, v7, v11);
}

uint64_t sub_1000AFBF4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(*(void *)(v2 + 208) + 8))(*(void *)(v2 + 224), *(void *)(v2 + 200));
    swift_release();
    uint64_t v3 = sub_1000AFD74;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 224);
    uint64_t v5 = *(void *)(v2 + 200);
    uint64_t v6 = *(void *)(v2 + 208);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    *(void *)(v2 + 288) = v7;
    *(void *)(v2 + 296) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    swift_release();
    swift_release();
    *(_OWORD *)(v2 + 304) = *(_OWORD *)(v2 + 16);
    uint64_t v3 = sub_1000AFE3C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000AFD74()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AFE3C()
{
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 304);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134349056;
    *(void *)(v0 + 72) = *(void *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Deleting %{public}ld key signing keys", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(void *)(v0 + 320) = v9;
  *(void *)(v0 + 328) = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v6, v7);
  uint64_t v10 = *(void *)(v5 + 16);
  *(void *)(v0 + 336) = v10;
  if (v10)
  {
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v12 = *(void *)(*(void *)(v0 + 88) + 112);
    *(_DWORD *)(v0 + 484) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 344) = v12;
    *(void *)(v0 + 352) = 0;
    uint64_t v14 = *(void *)(v11 + 32);
    v13 = *(void **)(v11 + 40);
    *(void *)(v0 + 360) = v13;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 32) = 778793835;
    *(void *)(v0 + 40) = 0xE400000000000000;
    v15._countAndFlagsBits = v14;
    v15._object = v13;
    String.append(_:)(v15);
    uint64_t v16 = *(void *)(v0 + 32);
    uint64_t v17 = *(void *)(v0 + 40);
    *(void *)(v0 + 368) = v17;
    v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v18;
    void *v18 = v0;
    v19 = sub_1000B0348;
LABEL_11:
    v18[1] = v19;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v16, v17);
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_bridgeObjectRetain();
  v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void *)(v0 + 312);
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v24 = 134349056;
    *(void *)(v0 + 64) = *(void *)(v23 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Deleting %{public}ld device encryption keys", v24, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v25 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 184), *(void *)(v0 + 160));
  uint64_t v26 = *(void *)(v25 + 16);
  *(void *)(v0 + 392) = v26;
  if (v26)
  {
    uint64_t v27 = *(void *)(v0 + 312);
    *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 88) + 112);
    *(_DWORD *)(v0 + 488) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 440) = 0;
    uint64_t v29 = *(void *)(v27 + 32);
    v28 = *(void **)(v27 + 40);
    *(void *)(v0 + 448) = v28;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = 778790244;
    *(void *)(v0 + 56) = 0xE400000000000000;
    v30._countAndFlagsBits = v29;
    v30._object = v28;
    String.append(_:)(v30);
    uint64_t v16 = *(void *)(v0 + 48);
    uint64_t v17 = *(void *)(v0 + 56);
    *(void *)(v0 + 456) = v17;
    v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v18;
    void *v18 = v0;
    v19 = sub_1000B11C4;
    goto LABEL_11;
  }
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  uint64_t v32 = *(unsigned int *)(v0 + 480);
  uint64_t v33 = *(void *)(v0 + 216);
  uint64_t v34 = *(void *)(v0 + 200);
  uint64_t v36 = *(void *)(v0 + 96);
  uint64_t v35 = *(void *)(v0 + 104);
  uint64_t v38 = *(void *)(v0 + 80);
  uint64_t v37 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  v39 = (void *)swift_allocObject();
  *(void *)(v0 + 408) = v39;
  v39[2] = v37;
  v39[3] = v36;
  v39[4] = v35;
  v39[5] = v38;
  uint64_t v40 = swift_allocObject();
  *(void *)(v0 + 416) = v40;
  *(void *)(v40 + 16) = sub_1000B95E8;
  *(void *)(v40 + 24) = v39;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v31(v33, v32, v34);
  swift_retain();
  v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v41;
  void *v41 = v0;
  v41[1] = sub_1000B0EDC;
  uint64_t v42 = *(void *)(v0 + 216);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v41, v42, sub_1000B8BA0, v40, (char *)&type metadata for () + 8);
}

uint64_t sub_1000B0348()
{
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    os_log_type_t v2 = sub_1000B0898;
  }
  else {
    os_log_type_t v2 = sub_1000B047C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B047C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 352) + 1;
  if (v1 != *(void *)(v0 + 336))
  {
    *(void *)(v0 + 352) = v1;
    uint64_t v7 = *(void *)(v0 + 304) + 16 * v1;
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v0 + 360) = v8;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 32) = 778793835;
    *(void *)(v0 + 40) = 0xE400000000000000;
    v10._countAndFlagsBits = v9;
    v10._object = v8;
    String.append(_:)(v10);
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v12 = *(void *)(v0 + 40);
    *(void *)(v0 + 368) = v12;
    v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v13;
    void *v13 = v0;
    uint64_t v14 = sub_1000B0348;
LABEL_8:
    v13[1] = v14;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v11, v12);
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_bridgeObjectRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 312);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134349056;
    *(void *)(v0 + 64) = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Deleting %{public}ld device encryption keys", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v15 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 184), *(void *)(v0 + 160));
  uint64_t v16 = *(void *)(v15 + 16);
  *(void *)(v0 + 392) = v16;
  if (v16)
  {
    uint64_t v17 = *(void *)(v0 + 312);
    *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 88) + 112);
    *(_DWORD *)(v0 + 488) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 440) = 0;
    uint64_t v19 = *(void *)(v17 + 32);
    v18 = *(void **)(v17 + 40);
    *(void *)(v0 + 448) = v18;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = 778790244;
    *(void *)(v0 + 56) = 0xE400000000000000;
    v20._countAndFlagsBits = v19;
    v20._object = v18;
    String.append(_:)(v20);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 56);
    *(void *)(v0 + 456) = v12;
    v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v13;
    void *v13 = v0;
    uint64_t v14 = sub_1000B11C4;
    goto LABEL_8;
  }
  os_log_type_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  uint64_t v22 = *(unsigned int *)(v0 + 480);
  uint64_t v23 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 200);
  uint64_t v26 = *(void *)(v0 + 96);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v27 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  uint64_t v29 = (void *)swift_allocObject();
  *(void *)(v0 + 408) = v29;
  v29[2] = v27;
  v29[3] = v26;
  v29[4] = v25;
  v29[5] = v28;
  uint64_t v30 = swift_allocObject();
  *(void *)(v0 + 416) = v30;
  *(void *)(v30 + 16) = sub_1000B95E8;
  *(void *)(v30 + 24) = v29;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v21(v23, v22, v24);
  swift_retain();
  v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v31;
  void *v31 = v0;
  v31[1] = sub_1000B0EDC;
  uint64_t v32 = *(void *)(v0 + 216);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v31, v32, sub_1000B8BA0, v30, (char *)&type metadata for () + 8);
}

uint64_t sub_1000B0898()
{
  uint64_t v1 = *(unsigned int *)(v0 + 484);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v42 = *(void *)(v0 + 176);
  uint64_t v43 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v40 = *(void *)(v0 + 128);
  uint64_t v41 = *(void *)(v0 + 120);
  uint64_t v39 = *(void *)(v0 + 112);
  BOOL v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 144) + 104);
  v4(v2, v1, v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  v4(v2, v1, v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v5, v40, v39);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v44(v42, v43);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v39);
  swift_errorRelease();
  uint64_t v6 = *(void *)(v0 + 352) + 1;
  if (v6 != *(void *)(v0 + 336))
  {
    *(void *)(v0 + 352) = v6;
    uint64_t v12 = *(void *)(v0 + 304) + 16 * v6;
    uint64_t v14 = *(void *)(v12 + 32);
    v13 = *(void **)(v12 + 40);
    *(void *)(v0 + 360) = v13;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 32) = 778793835;
    *(void *)(v0 + 40) = 0xE400000000000000;
    v15._countAndFlagsBits = v14;
    v15._object = v13;
    String.append(_:)(v15);
    uint64_t v16 = *(void *)(v0 + 32);
    uint64_t v17 = *(void *)(v0 + 40);
    *(void *)(v0 + 368) = v17;
    v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v18;
    void *v18 = v0;
    uint64_t v19 = sub_1000B0348;
LABEL_8:
    v18[1] = v19;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v16, v17);
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 312);
  if (v9)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134349056;
    *(void *)(v0 + 64) = *(void *)(v10 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting %{public}ld device encryption keys", v11, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v20 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 184), *(void *)(v0 + 160));
  uint64_t v21 = *(void *)(v20 + 16);
  *(void *)(v0 + 392) = v21;
  if (v21)
  {
    uint64_t v22 = *(void *)(v0 + 312);
    *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 88) + 112);
    *(_DWORD *)(v0 + 488) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 440) = 0;
    uint64_t v24 = *(void *)(v22 + 32);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v0 + 448) = v23;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = 778790244;
    *(void *)(v0 + 56) = 0xE400000000000000;
    v25._countAndFlagsBits = v24;
    v25._object = v23;
    String.append(_:)(v25);
    uint64_t v16 = *(void *)(v0 + 48);
    uint64_t v17 = *(void *)(v0 + 56);
    *(void *)(v0 + 456) = v17;
    v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v18;
    void *v18 = v0;
    uint64_t v19 = sub_1000B11C4;
    goto LABEL_8;
  }
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  uint64_t v27 = *(unsigned int *)(v0 + 480);
  uint64_t v28 = *(void *)(v0 + 216);
  uint64_t v29 = *(void *)(v0 + 200);
  uint64_t v31 = *(void *)(v0 + 96);
  uint64_t v30 = *(void *)(v0 + 104);
  uint64_t v33 = *(void *)(v0 + 80);
  uint64_t v32 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  uint64_t v34 = (void *)swift_allocObject();
  *(void *)(v0 + 408) = v34;
  v34[2] = v32;
  v34[3] = v31;
  v34[4] = v30;
  v34[5] = v33;
  uint64_t v35 = swift_allocObject();
  *(void *)(v0 + 416) = v35;
  *(void *)(v35 + 16) = sub_1000B95E8;
  *(void *)(v35 + 24) = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v26(v28, v27, v29);
  swift_retain();
  uint64_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v36;
  *uint64_t v36 = v0;
  v36[1] = sub_1000B0EDC;
  uint64_t v37 = *(void *)(v0 + 216);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v36, v37, sub_1000B8BA0, v35, (char *)&type metadata for () + 8);
}

uint64_t sub_1000B0EDC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 216), *(void *)(v2 + 200));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000B10FC;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000B1048;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B1048()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B10FC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B11C4()
{
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1000B1574;
  }
  else {
    uint64_t v2 = sub_1000B12F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B12F8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 440) + 1;
  if (v1 == *(void *)(v0 + 392))
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
    uint64_t v3 = *(unsigned int *)(v0 + 480);
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease();
    uint64_t v10 = (void *)swift_allocObject();
    *(void *)(v0 + 408) = v10;
    v10[2] = v8;
    v10[3] = v7;
    v10[4] = v6;
    v10[5] = v9;
    uint64_t v11 = swift_allocObject();
    *(void *)(v0 + 416) = v11;
    *(void *)(v11 + 16) = sub_1000B95E8;
    *(void *)(v11 + 24) = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v2(v4, v3, v5);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1000B0EDC;
    uint64_t v13 = *(void *)(v0 + 216);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v13, sub_1000B8BA0, v11, (char *)&type metadata for () + 8);
  }
  else
  {
    *(void *)(v0 + 440) = v1;
    uint64_t v14 = *(void *)(v0 + 312) + 16 * v1;
    uint64_t v16 = *(void *)(v14 + 32);
    Swift::String v15 = *(void **)(v14 + 40);
    *(void *)(v0 + 448) = v15;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = 778790244;
    *(void *)(v0 + 56) = 0xE400000000000000;
    v17._countAndFlagsBits = v16;
    v17._object = v15;
    String.append(_:)(v17);
    uint64_t v18 = *(void *)(v0 + 48);
    uint64_t v19 = *(void *)(v0 + 56);
    *(void *)(v0 + 456) = v19;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v20;
    void *v20 = v0;
    v20[1] = sub_1000B11C4;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v18, v19);
  }
}

uint64_t sub_1000B1574()
{
  unsigned int v27 = *(_DWORD *)(v0 + 488);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v31 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v29 = *(void *)(v0 + 120);
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)(v0 + 144) + 104);
  v4(v1);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t))v4)(v1, v27, v2);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v5, v28, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v32(v30, v31);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v3);
  swift_errorRelease();
  uint64_t v6 = *(void *)(v0 + 440) + 1;
  if (v6 == *(void *)(v0 + 392))
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
    uint64_t v8 = *(unsigned int *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease();
    Swift::String v15 = (void *)swift_allocObject();
    *(void *)(v0 + 408) = v15;
    v15[2] = v13;
    v15[3] = v12;
    v15[4] = v11;
    v15[5] = v14;
    uint64_t v16 = swift_allocObject();
    *(void *)(v0 + 416) = v16;
    *(void *)(v16 + 16) = sub_1000B95E8;
    *(void *)(v16 + 24) = v15;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v7(v9, v8, v10);
    swift_retain();
    Swift::String v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v17;
    *Swift::String v17 = v0;
    v17[1] = sub_1000B0EDC;
    uint64_t v18 = *(void *)(v0 + 216);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v17, v18, sub_1000B8BA0, v16, (char *)&type metadata for () + 8);
  }
  else
  {
    *(void *)(v0 + 440) = v6;
    uint64_t v19 = *(void *)(v0 + 312) + 16 * v6;
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v0 + 448) = v20;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = 778790244;
    *(void *)(v0 + 56) = 0xE400000000000000;
    v22._countAndFlagsBits = v21;
    v22._object = v20;
    String.append(_:)(v22);
    uint64_t v23 = *(void *)(v0 + 48);
    uint64_t v24 = *(void *)(v0 + 56);
    *(void *)(v0 + 456) = v24;
    Swift::String v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v25;
    *Swift::String v25 = v0;
    v25[1] = sub_1000B11C4;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v23, v24);
  }
}

void sub_1000B1A14(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v9 = sub_1000075AC(a1, a2);
  if (v4) {
    return;
  }
  uint64_t v10 = v9;
  unint64_t v11 = (unint64_t)sub_1000F5DBC();
  uint64_t v42 = v10;
  uint64_t v45 = a3;
  unint64_t v12 = v11;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v40 = a4;
    if (v13) {
      goto LABEL_4;
    }
LABEL_17:
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v40 = a4;
  if (!v13) {
    goto LABEL_17;
  }
LABEL_4:
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v14 = 0;
  unint64_t v15 = v12 & 0xC000000000000001;
  uint64_t v5 = (char *)_swiftEmptyArrayStorage;
  unint64_t v43 = v12;
  do
  {
    if (v15) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v12 + 8 * v14 + 32);
    }
    uint64_t v18 = v17;
    id v19 = [v17 identifier];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1000D0D48(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v25 = *((void *)v5 + 2);
      unint64_t v24 = *((void *)v5 + 3);
      if (v25 >= v24 >> 1) {
        uint64_t v5 = sub_1000D0D48((char *)(v24 > 1), v25 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v25 + 1;
      uint64_t v16 = &v5[16 * v25];
      *((void *)v16 + 4) = v21;
      *((void *)v16 + 5) = v23;
      [*(id *)(v45 + 16) deleteObject:v18];
      unint64_t v12 = v43;
    }
    ++v14;
  }
  while (v13 != v14);
LABEL_18:
  swift_bridgeObjectRelease();
  sub_100007290();
  unint64_t v26 = (unint64_t)sub_1000F5AC0();
  unint64_t v6 = v26;
  if (v26 >> 62)
  {
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_22;
    }
LABEL_36:
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
LABEL_37:
    swift_bridgeObjectRelease();
    sub_100007290();

    *uint64_t v40 = v5;
    v40[1] = v29;
    return;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v27) {
    goto LABEL_36;
  }
LABEL_22:
  if (v27 >= 1)
  {
    uint64_t v28 = 0;
    unint64_t v44 = v6 & 0xC000000000000001;
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
    unint64_t v41 = v6;
    do
    {
      if (v44) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v31 = *(id *)(v6 + 8 * v28 + 32);
      }
      uint64_t v32 = v31;
      id v33 = [v31 identifier];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = sub_1000D0D48(0, *((void *)v29 + 2) + 1, 1, v29);
        }
        unint64_t v39 = *((void *)v29 + 2);
        unint64_t v38 = *((void *)v29 + 3);
        if (v39 >= v38 >> 1) {
          uint64_t v29 = sub_1000D0D48((char *)(v38 > 1), v39 + 1, 1, v29);
        }
        *((void *)v29 + 2) = v39 + 1;
        uint64_t v30 = &v29[16 * v39];
        *((void *)v30 + 4) = v35;
        *((void *)v30 + 5) = v37;
        [*(id *)(v45 + 16) deleteObject:v32];
        unint64_t v6 = v41;
      }
      ++v28;
    }
    while (v27 != v28);
    goto LABEL_37;
  }
  __break(1u);
}

void sub_1000B1DE0(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  v127 = (char *)a2;
  uint64_t v117 = type metadata accessor for DIPError();
  uint64_t v111 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for DIPError.Code();
  uint64_t v112 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  v114 = (char *)v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006CC8(&qword_1001C15B8);
  __chkstk_darwin(v9 - 8);
  v113 = (char *)v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CredentialKeyType();
  uint64_t v124 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v120 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  id v17 = (uint8_t *)v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v90 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v90 - v21;
  uint64_t v23 = a3;
  unint64_t v24 = a4;
  unint64_t v25 = v130;
  unint64_t v26 = sub_1000075AC((uint64_t)v127, v23);
  unint64_t v130 = v25;
  if (!v25)
  {
    unint64_t v125 = (unint64_t)v22;
    v127 = v13;
    unint64_t v123 = v11;
    uint64_t v101 = a1;
    v97 = v17;
    v106 = v20;
    uint64_t v27 = v120;
    uint64_t v110 = v14;
    v122 = v24;
    uint64_t v28 = v26;
    uint64_t v29 = (id *)sub_1000F6A84();
    unint64_t v130 = 0;
    uint64_t v30 = v29;
    id v93 = v28;
    unint64_t v31 = v125;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    unint64_t v34 = (unint64_t)v30 >> 62;
    if (!os_log_type_enabled((os_log_t)v32, v33))
    {

      swift_bridgeObjectRelease_n();
      uint64_t v35 = v110;
      uint64_t v36 = (uint64_t)v113;
      goto LABEL_7;
    }
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v17 = 134349056;
    uint64_t v35 = v110;
    uint64_t v36 = (uint64_t)v113;
    if (v34) {
      goto LABEL_55;
    }
    v121 = *(void (***)(uint64_t, unint64_t))(((unint64_t)v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      uint64_t v128 = (uint64_t)v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v32, v33, "Deleting %{public}ld presentment keys", v17, 0xCu);
      swift_slowDealloc();

LABEL_7:
      uint64_t v37 = *(void (**)(char *, uint64_t))(v27 + 8);
      v27 += 8;
      v105 = v37;
      v37((char *)v31, v35);
      v126 = v30;
      if (v34)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v32 = *(void *)(((unint64_t)v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v30 = v122;
      unint64_t v34 = v123;
      uint64_t v38 = v124;
      uint64_t v120 = v27;
      if (!v32) {
        break;
      }
      if (v32 >= 1)
      {
        uint64_t v39 = 0;
        unint64_t v125 = (unint64_t)v126 & 0xC000000000000001;
        v118 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v124 + 48);
        v109 = (void (**)(uint64_t, uint64_t, unint64_t))(v124 + 32);
        v108 = (uint64_t (**)(uint64_t, unint64_t))(v124 + 88);
        int v107 = enum case for CredentialKeyType.legacySE(_:);
        v104 = (void (**)(char *, uint64_t, uint64_t))(v112 + 104);
        int v102 = enum case for CredentialKeyType.ses(_:);
        v100 = (void (**)(uint64_t, char *, uint64_t))(v111 + 16);
        v99 = (void (**)(char *, uint64_t))(v111 + 8);
        uint64_t v40 = (void (**)(char *, void, unint64_t))(v124 + 104);
        unsigned int v103 = enum case for DIPError.Code.internalError(_:);
        v121 = (void (**)(uint64_t, unint64_t))(v124 + 8);
        LODWORD(v119) = enum case for CredentialKeyType.invalid(_:);
        v90[8] = "state transition from ";
        unint64_t v96 = 0x800000010017F730;
        unint64_t v95 = 0x800000010017F7F0;
        v90[7] = "featureFlagProvider";
        unint64_t v94 = 0x800000010017F500;
        v90[6] = 0x800000010017F810;
        v90[5] = 0x800000010017BEA0;
        v90[4] = 0x800000010017F830;
        v90[3] = 0x800000010017F860;
        unint64_t v41 = v130;
        uint64_t v124 = v32;
        v98 = (void (**)(char *, void, unint64_t))(v38 + 104);
        while (1)
        {
          if (v125) {
            id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v42 = v126[v39 + 4];
          }
          unint64_t v43 = v42;
          id v44 = [v42 keyType];
          if (!v44) {
            goto LABEL_18;
          }
          uint64_t v45 = v44;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v34 = v123;
          CredentialKeyType.init(rawValue:)();
          if ((*v118)(v36, 1, v34) == 1) {
            break;
          }
          uint64_t v46 = (uint64_t)v127;
          (*v109)((uint64_t)v127, v36, v34);
          int v48 = (*v108)(v46, v34);
          uint64_t v30 = v122;
          if (v48 != v107)
          {
            if (v48 == v102)
            {
              id v55 = [v43 keyBlob];
              if (!v55)
              {
                uint64_t v47 = v124;
                goto LABEL_21;
              }
              v56 = v55;
              uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v130 = v41;
              unint64_t v59 = v58;

              uint64_t v91 = v57;
              unint64_t v92 = v59;
              unint64_t v60 = v130;
              dispatch thunk of SESKeystore.deleteKey(_:)();
              unint64_t v41 = v60;
              if (!v60)
              {
                sub_1000035EC(v91, v92);
                goto LABEL_20;
              }
              v61 = *v104;
              v62 = v114;
              (*v104)(v114, v103, v116);
              swift_errorRetain();
              sub_100102620((uint64_t)_swiftEmptyArrayStorage);
              unint64_t v130 = sub_10000507C();
              swift_allocError();
              v90[1] = 0xD000000000000057;
              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
              swift_willThrow();
              swift_errorRelease();
              uint64_t v63 = v103;
              v61(v62, v103, v116);
              swift_errorRetain();
              sub_100102620((uint64_t)_swiftEmptyArrayStorage);
              swift_allocError();
              v90[2] = 0xD000000000000021;
              uint64_t v30 = v122;
              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
              swift_willThrow();
              swift_errorRelease();
              sub_1000035EC(v91, v92);
              v61(v62, v63, v116);
              uint64_t v40 = v98;
              swift_errorRetain();
              sub_100102620((uint64_t)_swiftEmptyArrayStorage);
              v64 = v115;
              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
              uint64_t v65 = v117;
              swift_allocError();
              (*v100)(v66, v64, v65);
              v67 = v106;
              defaultLogger()();
              DIPRecordError(_:message:log:)();
              swift_errorRelease();
              v68 = v67;
              uint64_t v36 = (uint64_t)v113;
              v105(v68, v110);
              v69 = v64;
              unint64_t v34 = v123;
              (*v99)(v69, v65);
              goto LABEL_30;
            }
            goto LABEL_19;
          }
          sub_100147B98((uint64_t)[v43 keySlot]);
          if (v41)
          {
            (*v104)(v114, v103, v116);
            swift_errorRetain();
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            v49 = v115;
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            sub_10000507C();
            uint64_t v50 = v117;
            swift_allocError();
            (*v100)(v51, v49, v50);
            v52 = v106;
            defaultLogger()();
            DIPRecordError(_:message:log:)();
            uint64_t v40 = v98;
            swift_errorRelease();
            v53 = v52;
            uint64_t v36 = (uint64_t)v113;
            v105(v53, v110);
            uint64_t v54 = v50;
            unint64_t v34 = v123;
            (*v99)(v49, v54);
LABEL_30:
            swift_errorRelease();
            unint64_t v41 = 0;
          }
LABEL_20:
          uint64_t v47 = v124;
          [v30[2] deleteObject:v43];
LABEL_21:
          ++v39;

          if (v47 == v39) {
            goto LABEL_34;
          }
        }
        sub_100014BBC(v36, &qword_1001C15B8);
        uint64_t v30 = v122;
LABEL_18:
        uint64_t v46 = (uint64_t)v127;
        (*v40)(v127, v119, v34);
LABEL_19:
        (*v121)(v46, v34);
        goto LABEL_20;
      }
      __break(1u);
LABEL_55:
      swift_bridgeObjectRetain();
      v121 = (void (**)(uint64_t, unint64_t))_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    unint64_t v41 = v130;
LABEL_34:
    swift_bridgeObjectRelease();
    sub_100007290();
    if (v41)
    {
      unint64_t v130 = v41;
    }
    else
    {
      unint64_t v70 = (unint64_t)sub_1000F80DC();
      unint64_t v71 = (unint64_t)v97;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v72 = Logger.logObject.getter();
      LOBYTE(v73) = static os_log_type_t.info.getter();
      BOOL v74 = os_log_type_enabled(v72, (os_log_type_t)v73);
      unint64_t v75 = v70 >> 62;
      unint64_t v130 = v70;
      if (!v74)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_43;
      }
      unint64_t v70 = swift_slowAlloc();
      *(_DWORD *)unint64_t v70 = 134349056;
      if (v75) {
        goto LABEL_59;
      }
      uint64_t v76 = *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        swift_bridgeObjectRelease();
        uint64_t v128 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v73, "Deleting %{public}ld payload protection keys", (uint8_t *)v70, 0xCu);
        swift_slowDealloc();

LABEL_43:
        v105((char *)v71, v110);
        if (v75)
        {
          unint64_t v71 = v130;
          swift_bridgeObjectRetain();
          uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v77 = v111;
          uint64_t v78 = v112;
          if (!v73) {
            goto LABEL_57;
          }
        }
        else
        {
          unint64_t v71 = v130;
          uint64_t v73 = *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v77 = v111;
          uint64_t v78 = v112;
          if (!v73) {
            goto LABEL_57;
          }
        }
        if (v73 >= 1) {
          break;
        }
        __break(1u);
LABEL_59:
        swift_bridgeObjectRetain();
        uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      uint64_t v79 = 0;
      LODWORD(v127) = enum case for DIPError.Code.internalError(_:);
      unint64_t v125 = v77 + 16;
      v126 = (id *)(v78 + 104);
      unint64_t v123 = 0x800000010017F730;
      uint64_t v124 = v77 + 8;
      v121 = (void (**)(uint64_t, unint64_t))0x800000010017F7C0;
      unint64_t v119 = 0x800000010017F500;
      do
      {
        if ((v71 & 0xC000000000000001) != 0) {
          id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v80 = *(id *)(v71 + 8 * v79 + 32);
        }
        v81 = v80;
        id v82 = [v80 identifier];
        if (v82)
        {
          v83 = v82;
          uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v86 = v85;

          uint64_t v128 = 778793072;
          unint64_t v129 = 0xE400000000000000;
          v87._countAndFlagsBits = v84;
          v87._object = v86;
          String.append(_:)(v87);
          sub_10004CE78(v128, v129);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          [v122[2] deleteObject:v81];
        }
        ++v79;
      }
      while (v73 != v79);
LABEL_57:
      swift_bridgeObjectRelease();
      v88 = v122;
      sub_100007290();
      id v89 = v93;
      [v88[2] deleteObject:v93];
      sub_100007290();

      unint64_t v130 = 0;
    }
  }
}

uint64_t sub_1000B2F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_100006CC8(&qword_1001C0E30);
  v4[3] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000B3078, 0, 0);
}

uint64_t sub_1000B3078()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Kicking off MobileAsset clear cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  uint64_t v9 = *(void *)(v8 + 160);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  swift_retain();
  v11(v6, 1, 1, v10);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v9;
  swift_retain();
  sub_1000AB864(v6, (uint64_t)&unk_1001C30A8, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000B3230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_100006CC8(&qword_1001C0E30);
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000B3380, 0, 0);
}

uint64_t sub_1000B3380()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore setState", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v10 = v0[2];
  uint64_t v9 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v11 = (void *)swift_allocObject();
  v0[13] = v11;
  v11[2] = v7;
  v11[3] = v10;
  v11[4] = v9;
  v11[5] = v8;
  uint64_t v12 = swift_allocObject();
  v0[14] = v12;
  *(void *)(v12 + 16) = sub_1000B8EF4;
  *(void *)(v12 + 24) = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[15] = v13;
  void *v13 = v0;
  v13[1] = sub_1000B3564;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_1000B3564()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000B37A8;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000B3688;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B3688()
{
  if (v0[4] == 2)
  {
    uint64_t v1 = v0[5];
    uint64_t v2 = v0[6];
    uint64_t v3 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    uint64_t v4 = (void *)swift_allocObject();
    v4[2] = 0;
    v4[3] = 0;
    v4[4] = v1;
    swift_retain();
    sub_1000AB864(v2, (uint64_t)&unk_1001C3038, (uint64_t)v4);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000B37A8()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000B3924(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000075AC(a3, a4);
  if (!v5)
  {
    uint64_t v14 = v13;
    Swift::UInt v15 = (Swift::UInt)[v13 state];
    if ((v15 & 0x8000000000000000) == 0)
    {
      if ((sub_100008038(v15, a5) & 1) == 0)
      {
        unint64_t v28 = 0;
        unint64_t v29 = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease();
        unint64_t v28 = 0xD000000000000016;
        unint64_t v29 = 0x800000010017F710;
        id v16 = (id)DCCredentialStateToString();
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        v20._countAndFlagsBits = v17;
        v20._object = v19;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._countAndFlagsBits = 544175136;
        v21._object = (void *)0xE400000000000000;
        String.append(_:)(v21);
        id v22 = (id)DCCredentialStateToString();
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v24;

        v26._countAndFlagsBits = v23;
        v26._object = v25;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20746F6E20736920;
        v27._object = (void *)0xEF6465776F6C6C61;
        String.append(_:)(v27);
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.idcsInvalidCredentialStateTransition(_:), v9);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000507C();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        goto LABEL_7;
      }
      if ((a5 & 0x8000000000000000) == 0)
      {
        [v14 setState:a5];
        sub_100007290();
LABEL_7:

        return;
      }
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1000B3C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_100006CC8(&qword_1001C0E30);
  v4[3] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000B3D68, 0, 0);
}

uint64_t sub_1000B3D68()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Kicking off MobileAssetRefresh", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  uint64_t v9 = *(void *)(v8 + 160);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  swift_retain();
  v11(v6, 1, 1, v10);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v9;
  swift_retain();
  sub_1000AB864(v6, (uint64_t)&unk_1001C3050, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

void sub_1000B3F20(uint64_t a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v5 = sub_1000075AC(a1, a2);
  if (!v3)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (void *)sub_1000F80FC();
    id v8 = [v7 options];
    id v9 = [v8 presentmentAuthPolicy];

    if ((unint64_t)v9 < 2
      || v9 == (id)2
      && (uint64_t v12 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950),
          uint64_t v13 = v12,
          v12,
          v13))
    {
      uint64_t v10 = v7;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v10 = v7;
      uint64_t v11 = 0;
    }
    [v10 setHasUsablePresentmentAuthPolicy:v11];

    *a3 = v7;
  }
}

uint64_t sub_1000B4058(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000B4178, 0, 0);
}

uint64_t sub_1000B4178()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore getPayloadAuthACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v9 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v10 = (void *)swift_allocObject();
  v0[13] = v10;
  v10[2] = v7;
  v10[3] = v9;
  v10[4] = v8;
  uint64_t v11 = swift_allocObject();
  v0[14] = v11;
  *(void *)(v11 + 16) = &unk_1001C3000;
  *(void *)(v11 + 24) = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[15] = v12;
  uint64_t v13 = sub_100006CC8(&qword_1001C3018);
  *uint64_t v12 = v0;
  v12[1] = sub_1000B436C;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 2, &unk_1001C3010, v11, v13);
}

uint64_t sub_1000B436C()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000B4514;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000B4490;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B4490()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_1000B4514()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000B4684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[19] = v6;
  v5[20] = *(void *)(v6 - 8);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[24] = v7;
  v5[25] = *(void *)(v7 - 8);
  v5[26] = swift_task_alloc();
  return _swift_task_switch(sub_1000B47C4, 0, 0);
}

uint64_t sub_1000B47C4()
{
  uint64_t v1 = v0[25];
  uint64_t v15 = v0[26];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = (void *)swift_allocObject();
  v0[27] = v7;
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v6;
  uint64_t v8 = swift_allocObject();
  v0[28] = v8;
  *(void *)(v8 + 16) = sub_1000B8E58;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v15, v9, v2);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[29] = v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C3020);
  *uint64_t v11 = v0;
  v11[1] = sub_1000B496C;
  uint64_t v13 = v0[26];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 10, v13, sub_1000B8E78, v8, v12);
}

uint64_t sub_1000B496C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  uint64_t v4 = *(void *)(*v1 + 200);
  uint64_t v5 = *(void *)(*v1 + 192);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v6 = sub_1000B5010;
  }
  else
  {
    swift_release();
    *(void *)(v2 + 248) = *(void *)(v2 + 80);
    *(unsigned char *)(v2 + 89) = *(unsigned char *)(v2 + 88);
    uint64_t v6 = sub_1000B4B0C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B4B0C()
{
  uint64_t v36 = v0;
  if (*(unsigned char *)(v0 + 89)) {
    goto LABEL_17;
  }
  uint64_t v1 = *(void *)(v0 + 248);
  if ((unint64_t)(v1 - 1) < 2)
  {
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v29 = *(void *)(v0 + 160);
      uint64_t v31 = *(void *)(v0 + 152);
      uint64_t v33 = *(void *)(v0 + 176);
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      id v5 = (id)DCCredentialPayloadProtectionTypeToString();
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      *(void *)(v0 + 104) = sub_10004C3A4(v6, v8, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Payload uses key protection: %s, fetching ACL", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v33, v31);
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 176);
      uint64_t v14 = *(void *)(v0 + 152);
      uint64_t v15 = *(void *)(v0 + 160);

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    }
    uint64_t v16 = *(void *)(*(void *)(v0 + 128) + 24);
    type metadata accessor for ACLFetcher();
    uint64_t inited = swift_initStackObject();
    *(void *)(v0 + 256) = inited;
    *(void *)(inited + 16) = v16;
    type metadata accessor for AppleIDVManager();
    swift_retain();
    sub_10015A018((uint64_t *)(inited + 24));
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v18;
    void *v18 = v0;
    v18[1] = sub_1000B50A4;
    return sub_1000A61F4();
  }
  if (!v1)
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Payload uses standard protection, no ACL required", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = *(void *)(v0 + 184);
    goto LABEL_16;
  }
  defaultLogger()();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v9, v20))
  {
    uint64_t v12 = *(void *)(v0 + 168);
LABEL_16:
    uint64_t v26 = *(void *)(v0 + 152);
    uint64_t v27 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v12, v26);
    goto LABEL_17;
  }
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v32 = *(void *)(v0 + 152);
  uint64_t v34 = *(void *)(v0 + 168);
  Swift::String v21 = (uint8_t *)swift_slowAlloc();
  uint64_t v35 = swift_slowAlloc();
  *(_DWORD *)Swift::String v21 = 136315138;
  id v22 = (id)DCCredentialPayloadProtectionTypeToString();
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  *(void *)(v0 + 96) = sub_10004C3A4(v23, v25, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v9, v20, "Unknown payload protection type %s", v21, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
LABEL_17:
  *(_OWORD *)*(void *)(v0 + 112) = xmmword_100176E40;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1000B5010()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B50A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 272) = v2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v7 = sub_1000B5290;
  }
  else
  {
    *(void *)(v6 + 280) = a2;
    *(void *)(v6 + 288) = a1;
    unint64_t v7 = sub_1000B51D8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000B51D8()
{
  uint64_t v1 = v0[32];
  swift_setDeallocating();
  swift_release();
  sub_10000B9DC(v1 + 24);
  uint64_t v2 = v0[35];
  uint64_t v3 = (void *)v0[14];
  *uint64_t v3 = v0[36];
  v3[1] = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000B5290()
{
  uint64_t v1 = *(void *)(v0 + 256);
  swift_setDeallocating();
  swift_release();
  sub_10000B9DC(v1 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000B533C(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000075AC(a1, a2);
  if (!v3)
  {
    uint64_t v12 = v11;
    unint64_t v13 = (unint64_t)sub_1000F58F8();
    unint64_t v14 = v13;
    if (v13 >> 62)
    {
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (v15)
      {
LABEL_4:
        if ((v14 & 0xC000000000000001) != 0)
        {
          id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_17;
          }
          id v16 = *(id *)(v14 + 32);
        }
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        unint64_t v18 = (unint64_t)[v17 protectionType];
        if ((v18 & 0x8000000000000000) == 0)
        {
          unint64_t v19 = v18;

LABEL_13:
          *(void *)a3 = v19;
          *(unsigned char *)(a3 + 8) = v15 == 0;
          return;
        }
LABEL_17:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v15) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
    defaultLogger()();
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = v15;
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Credential has no payloads, so no payload auth acl", v22, 2u);
      uint64_t v15 = v24;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unint64_t v19 = 0;
    goto LABEL_13;
  }
}

uint64_t sub_1000B55D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[13] = v7;
  v6[14] = *(void *)(v7 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[16] = v8;
  v6[17] = *(void *)(v8 - 8);
  v6[18] = swift_task_alloc();
  return _swift_task_switch(sub_1000B56F8, 0, 0);
}

uint64_t sub_1000B56F8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore getElements", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[16];
  unint64_t v8 = v0[11];
  uint64_t v7 = v0[12];
  uint64_t v9 = v0[10];
  uint64_t v11 = v0[7];
  uint64_t v10 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  uint64_t v12 = (void *)swift_allocObject();
  v0[19] = v12;
  v12[2] = v7;
  v12[3] = v11;
  v12[4] = v10;
  v12[5] = v9;
  v12[6] = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100009778(v9, v8);
  uint64_t v13 = swift_allocObject();
  v0[20] = v13;
  *(void *)(v13 + 16) = &unk_1001C2FD0;
  *(void *)(v13 + 24) = v12;
  swift_retain();
  unint64_t v14 = (void *)swift_task_alloc();
  v0[21] = v14;
  uint64_t v15 = sub_100006CC8(&qword_1001C2FE8);
  *unint64_t v14 = v0;
  v14[1] = sub_1000B590C;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 2, &unk_1001C2FE0, v13, v15);
}

uint64_t sub_1000B590C()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000B5C60;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000B5A30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B5A30()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100014D14(v0 + 2, v1);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000B5B38;
  uint64_t v4 = v0[9];
  return v6(v4, v1, v2);
}

uint64_t sub_1000B5B38(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000B5E70;
  }
  else
  {
    *(void *)(v4 + 200) = a1;
    uint64_t v5 = sub_1000B5DC4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000B5C60()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000B5DC4()
{
  uint64_t v1 = sub_100096FA4(*(void *)(v0 + 200));
  swift_bridgeObjectRelease();
  sub_10000B9DC(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000B5E70()
{
  sub_10000B9DC((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000B5FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[46] = a6;
  v7[47] = a7;
  v7[44] = a4;
  v7[45] = a5;
  v7[42] = a2;
  v7[43] = a3;
  v7[41] = a1;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v7[48] = v8;
  v7[49] = *(void *)(v8 - 8);
  v7[50] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v7[51] = v9;
  v7[52] = *(void *)(v9 - 8);
  v7[53] = swift_task_alloc();
  v7[54] = swift_task_alloc();
  v7[55] = swift_task_alloc();
  v7[56] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v7[57] = v10;
  v7[58] = *(void *)(v10 - 8);
  v7[59] = swift_task_alloc();
  return _swift_task_switch(sub_1000B6178, 0, 0);
}

uint64_t sub_1000B6178()
{
  uint64_t v1 = v0[58];
  uint64_t v14 = v0[59];
  uint64_t v2 = v0[57];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[45];
  uint64_t v6 = v0[42];
  uint64_t v5 = v0[43];
  uint64_t v7 = (void *)swift_allocObject();
  v0[60] = v7;
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v6;
  uint64_t v8 = swift_allocObject();
  v0[61] = v8;
  *(void *)(v8 + 16) = sub_1000B8B80;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v14, v9, v2);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[62] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000B6318;
  uint64_t v12 = v0[59];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v12, sub_1000B8BA0, v8, &type metadata for CredentialStorage.DBResult);
}

uint64_t sub_1000B6318()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[58] + 8))(v2[59], v2[57]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000B6CA0;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000B6490;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B6490()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[5];
  v0[64] = v0[4];
  v0[65] = v2;
  unint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  v0[66] = v3;
  v0[67] = v0[9];
  uint64_t v5 = v0[12];
  v0[68] = v0[11];
  uint64_t v52 = v1;
  uint64_t v53 = v5;
  v0[69] = v5;
  uint64_t v54 = v0[13];
  uint64_t v55 = v0[14];
  v0[70] = v54;
  v0[71] = v55;
  unint64_t v6 = v0[15];
  v0[72] = v6;
  uint64_t v7 = self;
  swift_bridgeObjectRetain();
  uint64_t v57 = v2;
  sub_10000354C(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = [v7 standardUserDefaults];
  v9._countAndFlagsBits = 0xD00000000000001ELL;
  v9._object = (void *)0x8000000100179E70;
  LOBYTE(v2) = NSUserDefaults.internalBool(forKey:)(v9);

  unint64_t v58 = v3;
  unint64_t v56 = v6;
  if ((v2 & 1) == 0)
  {
    unint64_t v32 = v0[47];
    if (v4 == 1)
    {
      if (v32 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else if (v4 != 2 || v32 >> 60 != 15)
    {
      goto LABEL_5;
    }
    (*(void (**)(void, void, void))(v0[49] + 104))(v0[50], enum case for DIPError.Code.idcsPayloadRequiresAuth(_:), v0[48]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v57, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v57, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v53, v54, v55, v6);
    goto LABEL_27;
  }
  defaultLogger()();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempting to access payload due to internal defaults setting", v12, 2u);
    swift_slowDealloc();
  }
  uint64_t v13 = v0[56];
  uint64_t v15 = v0[51];
  uint64_t v14 = v0[52];

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
LABEL_5:
  switch(v4)
  {
    case 2:
      defaultLogger()();
      unint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Payload protection type is payload encryption key", v45, 2u);
        swift_slowDealloc();
      }
      uint64_t v36 = v0 + 21;
      uint64_t v46 = v0[52];
      uint64_t v47 = v0[53];
      uint64_t v48 = v0[51];
      uint64_t v49 = v0[43];

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
      sub_100014D14((void *)(v49 + 72), *(void *)(v49 + 96));
      unint64_t v41 = (void *)swift_task_alloc();
      v0[77] = v41;
      void *v41 = v0;
      id v42 = sub_1000B7868;
      goto LABEL_22;
    case 1:
LABEL_13:
      defaultLogger()();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Payload protection type is device encryption key", v35, 2u);
        swift_slowDealloc();
      }
      uint64_t v36 = v0 + 31;
      uint64_t v37 = v0[54];
      uint64_t v39 = v0[51];
      uint64_t v38 = v0[52];
      uint64_t v40 = v0[43];

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      sub_100014D14((void *)(v40 + 72), *(void *)(v40 + 96));
      unint64_t v41 = (void *)swift_task_alloc();
      v0[75] = v41;
      void *v41 = v0;
      id v42 = sub_1000B72DC;
LABEL_22:
      v41[1] = v42;
      uint64_t v24 = (uint64_t)v36;
      uint64_t v25 = v57;
      uint64_t v26 = v58;
      uint64_t v27 = v52;
      uint64_t v28 = v53;
      uint64_t v29 = v54;
      uint64_t v30 = v55;
      uint64_t v31 = v56;
LABEL_23:
      return sub_1001615C0(v24, v25, v26, v27, v28, v29, v30, v31);
    case 0:
      defaultLogger()();
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Payload protection type is standard, extracting elements from credential payload", v18, 2u);
        swift_slowDealloc();
      }
      uint64_t v19 = v0[55];
      uint64_t v21 = v0[51];
      uint64_t v20 = v0[52];
      uint64_t v22 = v0[43];

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      sub_100014D14((void *)(v22 + 72), *(void *)(v22 + 96));
      uint64_t v23 = (void *)swift_task_alloc();
      v0[73] = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_1000B6D50;
      uint64_t v24 = (uint64_t)(v0 + 36);
      uint64_t v25 = v57;
      uint64_t v26 = v58;
      uint64_t v27 = v52;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      goto LABEL_23;
  }
  (*(void (**)(void, void, void))(v0[49] + 104))(v0[50], enum case for DIPError.Code.internalError(_:), v0[48]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_1000035EC(v57, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v53, v54, v55, v56);
  swift_bridgeObjectRelease();
  sub_1000035EC(v57, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_27:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(void))v0[1];
  return v51();
}

uint64_t sub_1000B6CA0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B6D50()
{
  *(void *)(*(void *)v1 + 592) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B71A4;
  }
  else {
    uint64_t v2 = sub_1000B6E64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B6E64()
{
  sub_1000B8BC8(v0 + 288, v0 + 128);
  sub_1000B8C30(v0 + 128, v0 + 208);
  uint64_t v11 = *(void *)(v0 + 568);
  unint64_t v12 = *(void *)(v0 + 576);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 560);
  unint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  if (*(void *)(v0 + 232))
  {
    uint64_t v3 = *(void *)(v0 + 328);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v9, v10, v11, v12);
    sub_10002C468((long long *)(v0 + 208), v3);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 384);
    sub_100014BBC(v0 + 208, &qword_1001C28E8);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v6, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v7);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v9, v10, v11, v12);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000B71A4()
{
  unint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  unint64_t v5 = v0[66];
  uint64_t v6 = v0[65];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000B72DC()
{
  *(void *)(*(void *)v1 + 608) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B7730;
  }
  else {
    uint64_t v2 = sub_1000B73F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B73F0()
{
  sub_1000B8BC8(v0 + 248, v0 + 128);
  sub_1000B8C30(v0 + 128, v0 + 208);
  uint64_t v11 = *(void *)(v0 + 568);
  unint64_t v12 = *(void *)(v0 + 576);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 560);
  unint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  if (*(void *)(v0 + 232))
  {
    uint64_t v3 = *(void *)(v0 + 328);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v9, v10, v11, v12);
    sub_10002C468((long long *)(v0 + 208), v3);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 384);
    sub_100014BBC(v0 + 208, &qword_1001C28E8);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v6, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v7);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v9, v10, v11, v12);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000B7730()
{
  unint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  unint64_t v5 = v0[66];
  uint64_t v6 = v0[65];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000B7868()
{
  *(void *)(*(void *)v1 + 624) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B7CBC;
  }
  else {
    uint64_t v2 = sub_1000B797C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B797C()
{
  sub_1000B8BC8(v0 + 168, v0 + 128);
  sub_1000B8C30(v0 + 128, v0 + 208);
  uint64_t v11 = *(void *)(v0 + 568);
  unint64_t v12 = *(void *)(v0 + 576);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 560);
  unint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  if (*(void *)(v0 + 232))
  {
    uint64_t v3 = *(void *)(v0 + 328);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v9, v10, v11, v12);
    sub_10002C468((long long *)(v0 + 208), v3);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 384);
    sub_100014BBC(v0 + 208, &qword_1001C28E8);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v6, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v7);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v9, v10, v11, v12);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000B7CBC()
{
  unint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  unint64_t v5 = v0[66];
  uint64_t v6 = v0[65];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void sub_1000B7DF4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v65 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v66 = *(void (***)(void, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v74;
  uint64_t v15 = sub_1000075AC(a2, a3);
  if (!v14)
  {
    uint64_t v16 = v11;
    uint64_t v17 = a1;
    v64 = v9;
    unint64_t v18 = v66;
    uint64_t v74 = v7;
    uint64_t v19 = v15;
    sub_100007E14(v15);
    id v63 = v19;
    unint64_t v20 = (unint64_t)sub_1000F58F8();
    unint64_t v21 = v20;
    if (v20 >> 62) {
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v23 = v18;
    uint64_t v24 = v17;
    uint64_t v25 = v10;
    if (!v22)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v16 + 104))(v13, enum case for DIPError.Code.idcsMissingPayload(_:), v10);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      return;
    }
    if ((v21 & 0xC000000000000001) != 0)
    {
      uint64_t v26 = (void (**)(void, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_10;
    }
    if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v26 = (void (**)(void, uint64_t))*(id *)(v21 + 32);
LABEL_10:
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      sub_1000F7CF0(v67.n128_u64);
      uint64_t v66 = v27;
      uint64_t v28 = v68;
      uint64_t v62 = v69;
      if ((void)v71 != 2)
      {
        if ((void)v71 != 1)
        {
          if ((void)v71)
          {
            (*(void (**)(char *, void, uint64_t, __n128))(v16 + 104))(v13, enum case for DIPError.Code.internalError(_:), v25, v67);
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_10000507C();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();

            sub_100085E0C((uint64_t)&v67);
            return;
          }
          uint64_t v56 = v73;
          uint64_t v57 = v70;
          uint64_t v58 = v68;
          long long v59 = v72;
          long long v60 = v71;
          __n128 v61 = v67;
          uint64_t v29 = v64;
          defaultLogger()();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v30, v31))
          {
            unint64_t v32 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v32 = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "no key needed", v32, 2u);
            swift_slowDealloc();
          }

          ((void (**)(char *, uint64_t))v23)[1](v29, v74);
LABEL_18:
          uint64_t v33 = 0;
          os_log_type_t v34 = 0;
LABEL_30:
          id v38 = 0;
          uint64_t v46 = 0;
          goto LABEL_31;
        }
        uint64_t v56 = v73;
        long long v59 = v72;
        long long v60 = v71;
        __n128 v61 = v67;
        uint64_t v47 = v70;
        sub_100014D14((void *)(v24 + 32), *(void *)(v24 + 56));
        uint64_t v40 = v62;
        id v48 = v63;
        uint64_t v57 = v47;
        id v49 = sub_10000978C((uint64_t)v63, v62, v47, v61.n128_i64[0]);
        uint64_t v58 = v28;
        if (v49)
        {
          uint64_t v50 = v49;
          id v38 = [v49 identifier];
          if (v38)
          {
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            os_log_type_t v34 = v51;

            id v52 = [v50 publicKeyIdentifier];
            if (v52)
            {
              uint64_t v53 = v52;
              id v38 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v46 = v54;

LABEL_31:
              uint64_t v39 = v65;
              uint64_t v40 = v62;
              goto LABEL_39;
            }

            swift_bridgeObjectRelease();
            goto LABEL_18;
          }

          uint64_t v33 = 0;
          os_log_type_t v34 = 0;
        }
        else
        {

          uint64_t v33 = 0;
          os_log_type_t v34 = 0;
          id v38 = 0;
        }
        uint64_t v46 = 0;
        uint64_t v39 = v65;
        goto LABEL_39;
      }
      uint64_t v56 = v73;
      uint64_t v57 = v70;
      uint64_t v58 = v68;
      long long v59 = v72;
      long long v60 = v71;
      __n128 v61 = v67;
      id v35 = v66;
      id v36 = [v66 payloadProtectionKey];
      os_log_type_t v34 = v36;
      if (!v36)
      {

        uint64_t v33 = 0;
        goto LABEL_30;
      }
      id v37 = v63;
      id v38 = [v36 identifier];

      uint64_t v39 = v65;
      uint64_t v40 = v62;
      if (v38)
      {
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v34 = v41;

        id v42 = v66;
        id v43 = [v66 payloadProtectionKey];
        id v38 = v43;
        if (v43)
        {
          id v44 = [v43 publicKeyIdentifier];

          if (v44)
          {
            id v38 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v46 = v45;

LABEL_39:
            *(__n128 *)uint64_t v39 = v61;
            *(void *)(v39 + 16) = v58;
            *(void *)(v39 + 24) = v40;
            *(void *)(v39 + 32) = v57;
            *(_OWORD *)(v39 + 40) = v60;
            *(_OWORD *)(v39 + 56) = v59;
            *(void *)(v39 + 72) = v56;
            *(void *)(v39 + 80) = v33;
            *(void *)(v39 + 88) = v34;
            *(void *)(v39 + 96) = v38;
            *(void *)(v39 + 104) = v46;
            return;
          }

          swift_bridgeObjectRelease();
          uint64_t v33 = 0;
          os_log_type_t v34 = 0;
          id v38 = 0;
LABEL_38:
          uint64_t v46 = 0;
          goto LABEL_39;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      uint64_t v33 = 0;
      os_log_type_t v34 = 0;
      goto LABEL_38;
    }
    __break(1u);
  }
}

uint64_t sub_1000B85F4()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000B9DC(v0 + 32);
  sub_10000B9DC(v0 + 72);
  swift_release();
  sub_10000B9DC(v0 + 120);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CredentialStorage()
{
  return self;
}

uint64_t sub_1000B8680()
{
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 40), v1);
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B86D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100016FE0;
  return sub_1000B5FCC(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_1000B87B0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000B888C;
  return v6(a1);
}

uint64_t sub_1000B888C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000B8984(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100016FE0;
  return v8(a1, v5);
}

void *sub_1000B8A6C@<X0>(void *a1@<X0>, void *(*a2)(uint64_t *__return_ptr, void)@<X1>, void *a3@<X8>)
{
  result = a2(&v6, *a1);
  if (!v3) {
    *a3 = v6;
  }
  return result;
}

uint64_t sub_1000B8AB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C2FD8 + dword_1001C2FD8);
  return v8(a1, a2, v6);
}

void sub_1000B8B80(uint64_t a1@<X8>)
{
  sub_1000B7DF4(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_1000B8BA0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000B8BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C28E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B8C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C28E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B8C98()
{
  return sub_1000B9638((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000B8CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100016FE0;
  return sub_1000B4684(a1, a2, v6, v7, v8);
}

uint64_t sub_1000B8D8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C3008 + dword_1001C3008);
  return v8(a1, a2, v6);
}

void sub_1000B8E58(uint64_t a1@<X8>)
{
  sub_1000B533C(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void *sub_1000B8E78@<X0>(uint64_t a1@<X8>)
{
  result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v6);
  if (!v2)
  {
    char v5 = v7;
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t sub_1000B8EC4()
{
  return sub_1000B9638((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 48);
}

void sub_1000B8EF4(uint64_t a1)
{
  sub_1000B3924(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000B8F14()
{
  return sub_1000B9638((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000B8F44(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_100016FE0;
  return sub_1000B3C78(a1, v4, v5, v6);
}

uint64_t sub_1000B8FF8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001C3040 + dword_1001C3040);
  return v6(a1, v4);
}

uint64_t sub_1000B90B0()
{
  return sub_1000B9638((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000B90E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_100016FE0;
  return sub_100091440(a1, v4, v5, v6);
}

uint64_t sub_1000B9194()
{
  return sub_1000B9638((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 40);
}

void sub_1000B91C4(void *a1@<X8>)
{
  sub_1000B3F20(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

unint64_t sub_1000B91E4()
{
  unint64_t result = qword_1001C3060;
  if (!qword_1001C3060)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1001C3060);
  }
  return result;
}

uint64_t sub_1000B9224()
{
  return sub_1000B9638((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_1000B9254@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000AF0A8(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(void *, uint64_t, uint64_t))sub_100164A20, a1);
}

uint64_t sub_1000B9288()
{
  return sub_1000B9638((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000B92B8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100007458;
  return sub_1000AF83C(a1, a2, v6, v7, v8);
}

uint64_t sub_1000B937C()
{
  return sub_1000B9638((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000B93AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100007458;
  return sub_1000B2F88(a1, v4, v5, v6);
}

uint64_t sub_1000B9460()
{
  return sub_1000B9638((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000B9490(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100016FE0;
  return sub_100094020(a1, v4, v5, v6);
}

void sub_1000B9548(char **a1@<X8>)
{
  sub_1000B1A14(*(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1000B9568()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

double sub_1000B95A0@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

void sub_1000B95E8()
{
  sub_1000B1DE0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(id **)(v0 + 40));
}

uint64_t sub_1000B9608()
{
  return sub_1000B9638((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_1000B9638(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 32));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1000B969C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000AF0A8(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(void *, uint64_t, uint64_t))sub_100165C00, a1);
}

uint64_t sub_1000B96D0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

unint64_t sub_1000B9718@<X0>(unint64_t *a1@<X8>)
{
  return sub_1000AE76C(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_1000B973C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000B9774@<X0>(unint64_t *a1@<X8>)
{
  return sub_1000ADE50(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000B9790()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_1000B97D0(uint64_t a1)
{
  sub_1000AD2A8(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)(v1 + 6));
}

ValueMetadata *type metadata accessor for CredentialStorage.DBResult()
{
  return &type metadata for CredentialStorage.DBResult;
}

uint64_t sub_1000B983C(void *a1)
{
  return sub_100086288(a1);
}

uint64_t sub_1000B9854(uint64_t a1)
{
  unint64_t v48 = sub_10004AA18((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v39 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v40 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (2)
  {
    if (!v4)
    {
      int64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_53;
      }
      if (v8 >= v39) {
        goto LABEL_50;
      }
      unint64_t v9 = *(void *)(v38 + 8 * v8);
      int64_t v10 = v6 + 1;
      if (!v9)
      {
        int64_t v10 = v6 + 2;
        if (v6 + 2 >= v39) {
          goto LABEL_50;
        }
        unint64_t v9 = *(void *)(v38 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v6 + 3;
          if (v6 + 3 >= v39) {
            goto LABEL_50;
          }
          unint64_t v9 = *(void *)(v38 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v6 + 4;
            if (v6 + 4 < v39)
            {
              unint64_t v9 = *(void *)(v38 + 8 * v11);
              if (v9)
              {
                int64_t v10 = v6 + 4;
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v10 = v11 + 1;
                if (__OFADD__(v11, 1)) {
                  goto LABEL_54;
                }
                if (v10 >= v39) {
                  break;
                }
                unint64_t v9 = *(void *)(v38 + 8 * v10);
                ++v11;
                if (v9) {
                  goto LABEL_21;
                }
              }
            }
LABEL_50:
            swift_release();
            return v48;
          }
        }
      }
LABEL_21:
      uint64_t v41 = (v9 - 1) & v9;
      int64_t v42 = v10;
      unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
      goto LABEL_22;
    }
    uint64_t v41 = (v4 - 1) & v4;
    int64_t v42 = v6;
    unint64_t v7 = __clz(__rbit64(v4)) | (v6 << 6);
LABEL_22:
    uint64_t v12 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v7);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void *)(*(void *)(v40 + 56) + 8 * v7);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v16 = v48;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47[0] = v16;
    uint64_t v45 = v13;
    sub_10016990C((uint64_t)_swiftEmptyArrayStorage, v13, v14, isUniquelyReferenced_nonNull_native);
    unint64_t v48 = v47[0];
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v18 = 0;
    uint64_t v43 = v15 + 64;
    uint64_t v46 = v15;
    uint64_t v19 = 1 << *(unsigned char *)(v15 + 32);
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v21 = v20 & *(void *)(v15 + 64);
    int64_t v44 = (unint64_t)(v19 + 63) >> 6;
    while (1)
    {
      if (v21)
      {
        unint64_t v22 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        unint64_t v23 = v22 | (v18 << 6);
        goto LABEL_44;
      }
      int64_t v24 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
        goto LABEL_52;
      }
      if (v24 >= v44) {
        goto LABEL_5;
      }
      unint64_t v25 = *(void *)(v43 + 8 * v24);
      ++v18;
      if (!v25)
      {
        int64_t v18 = v24 + 1;
        if (v24 + 1 >= v44) {
          goto LABEL_5;
        }
        unint64_t v25 = *(void *)(v43 + 8 * v18);
        if (!v25)
        {
          int64_t v18 = v24 + 2;
          if (v24 + 2 >= v44) {
            goto LABEL_5;
          }
          unint64_t v25 = *(void *)(v43 + 8 * v18);
          if (!v25) {
            break;
          }
        }
      }
LABEL_43:
      unint64_t v21 = (v25 - 1) & v25;
      unint64_t v23 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_44:
      uint64_t v27 = (uint64_t *)(*(void *)(v46 + 48) + 16 * v23);
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log_type_t v31 = sub_100166880(v47, v45, v14);
      unint64_t v32 = *v30;
      if (*v30)
      {
        uint64_t v33 = v30;
        char v34 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v33 = v32;
        if ((v34 & 1) == 0)
        {
          unint64_t v32 = sub_1000D0D48(0, *((void *)v32 + 2) + 1, 1, v32);
          *uint64_t v33 = v32;
        }
        unint64_t v36 = *((void *)v32 + 2);
        unint64_t v35 = *((void *)v32 + 3);
        if (v36 >= v35 >> 1)
        {
          unint64_t v32 = sub_1000D0D48((char *)(v35 > 1), v36 + 1, 1, v32);
          *uint64_t v33 = v32;
        }
        *((void *)v32 + 2) = v36 + 1;
        id v37 = &v32[16 * v36];
        *((void *)v37 + 4) = v28;
        *((void *)v37 + 5) = v29;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ((void (*)(void *, void))v31)(v47, 0);
      uint64_t result = swift_bridgeObjectRelease();
    }
    int64_t v26 = v24 + 3;
    if (v26 >= v44)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      unint64_t v4 = v41;
      int64_t v6 = v42;
      continue;
    }
    break;
  }
  unint64_t v25 = *(void *)(v43 + 8 * v26);
  if (v25)
  {
    int64_t v18 = v26;
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v18 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v18 >= v44) {
      goto LABEL_5;
    }
    unint64_t v25 = *(void *)(v43 + 8 * v18);
    ++v26;
    if (v25) {
      goto LABEL_43;
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t DCPresentmentMessageEncodingFormat.codingKeyFormat.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || a1 == 2)
  {
    int64_t v8 = (unsigned int *)&enum case for ISO18013CodingKeyFormat.standard(_:);
    goto LABEL_6;
  }
  if (a1 == 1)
  {
    int64_t v8 = (unsigned int *)&enum case for ISO18013CodingKeyFormat.ACWG(_:);
LABEL_6:
    uint64_t v9 = *v8;
    uint64_t v10 = type metadata accessor for ISO18013CodingKeyFormat();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
    return v11(a2, v9, v10);
  }
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v26 = v24;
    unint64_t v23 = v15;
    *(_DWORD *)uint64_t v15 = 136315138;
    v22[1] = v15 + 4;
    id v16 = (id)DCPresentmentMessageEncodingFormatToString();
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v25 = sub_10004C3A4(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unknown message encoding format: %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v20 = enum case for ISO18013CodingKeyFormat.standard(_:);
  uint64_t v21 = type metadata accessor for ISO18013CodingKeyFormat();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(a2, v20, v21);
}

uint64_t DCPresentmentMessageEncodingFormat.dictionaryEncodingStrategy.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 2)
  {
    int64_t v8 = (unsigned int *)&enum case for ISO18013DictionaryEncodingStrategy.coreDeterministic(_:);
LABEL_6:
    uint64_t v9 = *v8;
    uint64_t v10 = type metadata accessor for ISO18013DictionaryEncodingStrategy();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
    return v11(a2, v9, v10);
  }
  if (a1 == 2)
  {
    int64_t v8 = (unsigned int *)&enum case for ISO18013DictionaryEncodingStrategy.unifiedAccess(_:);
    goto LABEL_6;
  }
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v27 = v25;
    uint64_t v24 = v16;
    *(_DWORD *)id v16 = 136315138;
    v23[1] = v16 + 4;
    id v17 = (id)DCPresentmentMessageEncodingFormatToString();
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v26 = sub_10004C3A4(v18, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unknown dictionary encoding strategy: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v21 = enum case for ISO18013DictionaryEncodingStrategy.coreDeterministic(_:);
  uint64_t v22 = type metadata accessor for ISO18013DictionaryEncodingStrategy();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(a2, v21, v22);
}

uint64_t DCPresentmentMessageEncodingFormat.description.getter()
{
  id v0 = (id)DCPresentmentMessageEncodingFormatToString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t sub_1000BA278()
{
  id v0 = (id)DCPresentmentMessageEncodingFormatToString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t ISO18013CodingKeyFormat.messageEncodingFormat.getter()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v22 - v10, v0, v5);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
  uint64_t result = 0;
  if (v13 != enum case for ISO18013CodingKeyFormat.standard(_:))
  {
    if (v13 == enum case for ISO18013CodingKeyFormat.ACWG(_:))
    {
      return 1;
    }
    else
    {
      defaultLogger()();
      v12(v9, v0, v5);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      uint64_t v25 = v15;
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v27 = v24;
        unint64_t v23 = v17;
        *(_DWORD *)id v17 = 136315138;
        uint64_t v22 = v17 + 4;
        uint64_t v18 = ISO18013CodingKeyFormat.rawValue.getter();
        uint64_t v26 = sub_10004C3A4(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
        v20(v9, v5);
        uint64_t v21 = v25;
        _os_log_impl((void *)&_mh_execute_header, v25, v16, "Unknown coding encoding format: %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        unint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
        v20(v9, v5);
      }
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v20(v11, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000BA634(unsigned __int8 a1, uint64_t a2, char a3)
{
  int v5 = a1;
  uint64_t v6 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5 == 2) {
    return 0;
  }
  if (v5) {
    return 1;
  }
  if (a3 != 2 && (a3 & 1) == 0 && a2)
  {
    uint64_t v10 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter();
    if (*(void *)(a2 + 16) && (unint64_t v12 = sub_10013C484(v10, v11), (v13 & 1) != 0))
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(a2 + 56);
      uint64_t v16 = type metadata accessor for AnyCodable();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v8, v15 + *(void *)(v17 + 72) * v14, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v8, 0, 1, v16);
    }
    else
    {
      uint64_t v16 = type metadata accessor for AnyCodable();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for AnyCodable();
    uint64_t v18 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v16) == 1)
    {
      sub_100097604((uint64_t)v8);
    }
    else
    {
      char v19 = AnyCodable.BOOLValue.getter();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v16);
      if (v19) {
        return 3;
      }
    }
  }
  return 2;
}

char *sub_1000BA8A8(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *((void *)a1 + 1) = a2[1];
    uint64_t v8 = a3[6];
    __dst = &a1[v8];
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = type metadata accessor for COSE_Sign1();
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    char v13 = v4;
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v14 = sub_100006CC8(&qword_1001C2838);
      memcpy(__dst, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = a3[8];
    *(_OWORD *)&v7[a3[7]] = *(_OWORD *)((char *)a2 + a3[7]);
    *(void *)&v7[v15] = *(char **)((char *)a2 + v15);
    *(void *)&v7[a3[9]] = *(char **)((char *)a2 + a3[9]);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1000BAA74(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for COSE_Sign1();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_1000BAB58(void *a1, uint64_t a2, int *a3)
{
  uint64_t v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v8 = a3[6];
  __dst = (char *)a1 + v8;
  uint64_t v9 = (const void *)(a2 + v8);
  uint64_t v10 = type metadata accessor for COSE_Sign1();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v7;
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = sub_100006CC8(&qword_1001C2838);
    memcpy(__dst, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v15 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)((char *)a1 + v15) = *(void *)(a2 + v15);
  *(void *)((char *)a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000BACD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for COSE_Sign1();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100006CC8(&qword_1001C2838);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = a3[7];
  char v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *char v19 = *v20;
  swift_retain();
  swift_release();
  v19[1] = v21;
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000BAECC(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for COSE_Sign1();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100006CC8(&qword_1001C2838);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_1000BB010(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for COSE_Sign1();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100006CC8(&qword_1001C2838);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  swift_release();
  v17[1] = v19;
  uint64_t v20 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)(a1 + v20) = *(void *)((char *)a2 + v20);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000BB1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BB200);
}

uint64_t sub_1000BB200(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2838);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000BB2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BB2C8);
}

void *sub_1000BB2C8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    void *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006CC8(&qword_1001C2838);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PresentmentProposal()
{
  uint64_t result = qword_1001C3138;
  if (!qword_1001C3138) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000BB3C0()
{
  sub_100087150();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000BB488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000BB54C, 0, 0);
}

uint64_t sub_1000BB54C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  unint64_t v3 = v0[5];
  uint64_t v5 = (void *)swift_allocObject();
  v0[11] = v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v2;
  swift_retain();
  sub_10000354C(v4, v3);
  uint64_t v6 = swift_allocObject();
  v0[12] = v6;
  *(void *)(v6 + 16) = &unk_1001C3398;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  uint64_t v8 = sub_100006CC8(&qword_1001C3018);
  *uint64_t v7 = v0;
  v7[1] = sub_1000BB6AC;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 2, &unk_1001C3010, v6, v8);
}

uint64_t sub_1000BB6AC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000BB840;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000BB7D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BB7D0()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_1000BB840()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000BB9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000BBA94, 0, 0);
}

uint64_t sub_1000BBA94()
{
  unint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  unint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)swift_allocObject();
  v0[10] = v6;
  v6[2] = v2;
  v6[3] = v5;
  v6[4] = v4;
  v6[5] = v3;
  v6[6] = v1;
  swift_retain();
  sub_10000354C(v5, v4);
  sub_10000354C(v3, v1);
  uint64_t v7 = swift_allocObject();
  v0[11] = v7;
  *(void *)(v7 + 16) = &unk_1001C33F0;
  *(void *)(v7 + 24) = v6;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[12] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000BBBF8;
  return AsyncCoreDataContainer.write<A>(_:)(v8, &unk_1001C33F8, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1000BBBF8()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000BBD80;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000BBD1C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BBD1C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BBD80()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v7 = v0[7];
  swift_release();
  swift_release();
  unsigned int v6 = enum case for DIPError.Code.internalError(_:);
  uint64_t v5 = *(void (**)(uint64_t))(v2 + 104);
  v5(v1);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  ((void (*)(uint64_t, void, uint64_t))v5)(v1, v6, v7);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000BBFD8()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000BC098, 0, 0);
}

uint64_t sub_1000BC098()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_allocObject();
  v0[6] = v2;
  *(void *)(v2 + 16) = &unk_1001C33C8;
  *(void *)(v2 + 24) = v1;
  swift_retain_n();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000BC1B0;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 9, &unk_1001C33D8, v2, &type metadata for Bool);
}

uint64_t sub_1000BC1B0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000BC318, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = *(unsigned __int8 *)(v2 + 72);
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 8);
    return v4(v3);
  }
}

uint64_t sub_1000BC318()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_1000BC4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[12] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1000BC5F8;
  return sub_1000CCDA0(1);
}

uint64_t sub_1000BC5F8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000BCD90;
  }
  else {
    uint64_t v4 = sub_1000BC70C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BC70C()
{
  uint64_t v1 = v0[13];
  if (!v1)
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.progenitorKeyUnavailable(_:), v0[6]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v2 = v0[14];
  sub_100014D14((void *)(v0[5] + 24), *(void *)(v0[5] + 48));
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_10000354C(v3, v4);
  dispatch thunk of AppleIDVManaging.generatePrearmTrustKeyforWatchAndCopyPublicKey(nonce:prognitorPublicKey:)();
  v0[15] = v13;
  v0[16] = v14;
  v0[17] = v15;
  v0[18] = v16;
  v0[19] = v17;
  v0[20] = v18;
  v0[21] = v19;
  v0[22] = v20;
  sub_1000035EC(v3, v4);
  if (v2)
  {
    swift_release();
LABEL_5:
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  uint64_t v8 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v12 = v0[9];
  defaultLogger()();
  uint64_t v9 = (void *)swift_task_alloc();
  v9[2] = v13;
  v9[3] = v14;
  v9[4] = v15;
  v9[5] = v16;
  v9[6] = v17;
  v9[7] = v18;
  v9[8] = v19;
  v9[9] = v20;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v12);
  sub_10000354C(v13, v14);
  sub_10000354C(v15, v16);
  sub_10000354C(v17, v18);
  sub_10000354C(v19, v20);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[23] = v10;
  void *v10 = v0;
  v10[1] = sub_1000BCBA4;
  uint64_t v11 = v0[2];
  return ((uint64_t (*)(uint64_t))DIPTrustKey.init(encryptedPrivateKey:attestation:publicKey:keyBlob:))(v11);
}

uint64_t sub_1000BCBA4()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000BCF14;
  }
  else {
    uint64_t v2 = sub_1000BCCB8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BCCB8()
{
  uint64_t v1 = v0[21];
  unint64_t v2 = v0[22];
  uint64_t v4 = v0[19];
  unint64_t v3 = v0[20];
  uint64_t v6 = v0[17];
  unint64_t v5 = v0[18];
  sub_1000035EC(v0[15], v0[16]);
  sub_1000035EC(v6, v5);
  sub_1000035EC(v4, v3);
  sub_1000035EC(v1, v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000BCD90()
{
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000BCF14()
{
  uint64_t v1 = v0[21];
  unint64_t v2 = v0[22];
  uint64_t v4 = v0[19];
  unint64_t v3 = v0[20];
  uint64_t v6 = v0[17];
  unint64_t v5 = v0[18];
  sub_1000035EC(v0[15], v0[16]);
  sub_1000035EC(v6, v5);
  sub_1000035EC(v4, v3);
  sub_1000035EC(v1, v2);
  swift_release();
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000BD0E4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[11] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1000BD234;
  return sub_1000CCDA0(1);
}

uint64_t sub_1000BD234(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000BD78C;
  }
  else {
    uint64_t v4 = sub_1000BD348;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BD348()
{
  uint64_t v1 = v0[12];
  if (!v1)
  {
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.progenitorKeyUnavailable(_:), v0[5]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v2 = v0[13];
  sub_100014D14((void *)(v0[4] + 24), *(void *)(v0[4] + 48));
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_10000354C(v3, v4);
  dispatch thunk of AppleIDVManaging.updatePrearmTrustKeyforWatch(inKeyBlob:prognitorPublicKey:)();
  sub_1000035EC(v3, v4);
  if (v2)
  {
    swift_release();
LABEL_5:
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  uint64_t v8 = v0[9];
  uint64_t v7 = v0[10];
  uint64_t v11 = v0[8];
  sub_1000035EC(v12, v13);
  defaultLogger()();
  uint64_t v9 = (void *)swift_task_alloc();
  v9[2] = v14;
  v9[3] = v15;
  v9[4] = v16;
  v9[5] = v17;
  v9[6] = v18;
  v9[7] = v19;
  Logger.sensitive(_:)();
  swift_release();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v11);
  sub_1000035EC(v14, v15);
  sub_1000035EC(v16, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)())v0[1];
  return v10();
}

uint64_t sub_1000BD78C()
{
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000BD910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v4[14] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1000BDA18;
  return sub_1000CACC4(0xD000000000000012, 0x8000000100179950);
}

uint64_t sub_1000BDA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = a3;
  v5[18] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_1000BDD38;
  }
  else {
    uint64_t v6 = sub_1000BDB30;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000BDB30()
{
  uint64_t v1 = v0[18];
  v0[19] = sub_1000C002C();
  v0[20] = v2;
  if (v1)
  {
    sub_100009764(v0[15], v0[16]);
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[21] = v5;
    void *v5 = v0;
    v5[1] = sub_1000BDEB0;
    return sub_1000C020C();
  }
}

uint64_t sub_1000BDD38()
{
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000BDEB0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)*v3;
  v4[22] = a1;
  v4[23] = a2;
  v4[24] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000BE338;
  }
  else {
    uint64_t v5 = sub_1000BDFC8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BDFC8()
{
  uint64_t v27 = v0[24];
  uint64_t v2 = v0[19];
  unint64_t v1 = v0[20];
  unint64_t v3 = v0[16];
  uint64_t v4 = v0[15];
  uint64_t v5 = (void *)v0[7];
  sub_10002C404(v0[10] + 24, (uint64_t)(v0 + 2));
  uint64_t v29 = (uint64_t)(v0 + 2);
  sub_100014D14(v0 + 2, v0[5]);
  id v6 = [v5 credentialNonce];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  if (v3 >> 60 == 15) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v4;
  }
  if (v3 >> 60 == 15) {
    unint64_t v11 = 0xC000000000000000;
  }
  else {
    unint64_t v11 = v3;
  }
  uint64_t v12 = v4;
  uint64_t v13 = v10;
  sub_100009778(v12, v3);
  sub_10000354C(v2, v1);
  uint64_t v14 = dispatch thunk of AppleIDVManaging.generatePhoneToken(withNonce:aclBlob:keyBlob:keyAttestation:casdCertificate:)();
  uint64_t v16 = v15;
  uint64_t v18 = v0[22];
  unint64_t v17 = v0[23];
  uint64_t v19 = v0[19];
  unint64_t v20 = v0[20];
  unint64_t v21 = v0[16];
  uint64_t v22 = v0[15];
  if (v27)
  {
    sub_100009764(v22, v21);
    sub_1000035EC(v19, v20);
    sub_1000035EC(v7, v9);
    sub_100009764(v18, v17);
    sub_1000035EC(v19, v20);
    sub_1000035EC(v13, v11);
    sub_10000B9DC(v29);
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    unint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  else
  {
    uint64_t v26 = v14;
    uint64_t v28 = v16;
    sub_100009764(v22, v21);
    sub_1000035EC(v19, v20);
    sub_1000035EC(v7, v9);
    sub_100009764(v18, v17);
    sub_1000035EC(v19, v20);
    sub_1000035EC(v13, v11);
    sub_10000B9DC(v29);
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v25(v26, v28);
  }
}

uint64_t sub_1000BE338()
{
  unint64_t v1 = v0[16];
  uint64_t v2 = v0[15];
  sub_1000035EC(v0[19], v0[20]);
  sub_100009764(v2, v1);
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000BE4D0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000BE5FC, 0, 0);
}

uint64_t sub_1000BE5FC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 24);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67240192;
    *(_DWORD *)(v0 + 200) = [v5 credentialAccessibilityEnabled];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "establishPrearmTrust called with accessibility enabled: %{BOOL,public}d", v6, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void **)(v0 + 24);
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(void *)(v0 + 96) = v12;
  *(void *)(v0 + 104) = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v7, v8);
  sub_100014D14((void *)(v11 + 24), *(void *)(v11 + 48));
  [v10 credentialAccessibilityEnabled];
  uint64_t v13 = dispatch thunk of AppleIDVManaging.prepareUnboundACLForWatch(withAccessibilityEnabled:)();
  *(void *)(v0 + 112) = v13;
  *(void *)(v0 + 120) = v14;
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  if ([*(id *)(v0 + 24) credentialAccessibilityEnabled]) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = 3;
  }
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v18;
  void *v18 = v0;
  v18[1] = sub_1000BE860;
  return sub_1000BB488(v15, v16, v17);
}

uint64_t sub_1000BE860(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = (void *)*v3;
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000BF1E8;
  }
  else {
    uint64_t v5 = sub_1000BE978;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BE978()
{
  uint64_t v45 = v0;
  if ([*(id *)(v0 + 24) credentialAccessibilityEnabled])
  {
    uint64_t v1 = *(void **)(v0 + 24);
    defaultLogger()();
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v9 = *(void **)(v0 + 24);
    if (v5)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      unsigned int v11 = [v9 credentialAccessibilityEnabled];
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = 20047;
      }
      else {
        uint64_t v13 = 4605519;
      }
      if (v12) {
        unint64_t v14 = 0xE300000000000000;
      }
      else {
        unint64_t v14 = 0xE200000000000000;
      }
      *(void *)(v0 + 16) = sub_10004C3A4(v13, v14, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Skipping establishing prearm trust with watch because phone's accessibility is turned %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v6(v7, v8);
    }
    else
    {

      v6(v7, v8);
    }
    uint64_t v29 = *(void *)(v0 + 112);
    unint64_t v30 = *(void *)(v0 + 120);
    if (*(void *)(v0 + 144) >> 60 == 15)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 104))(*(void *)(v0 + 56), enum case for DIPError.Code.idcsMissingProgenitorKeyAttestation(_:), *(void *)(v0 + 40));
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      uint64_t v27 = v29;
      unint64_t v28 = v30;
      goto LABEL_15;
    }
    sub_1000035EC(*(void *)(v0 + 112), *(void *)(v0 + 120));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    uint64_t v34 = *(void *)(v0 + 136);
    uint64_t v35 = *(void *)(v0 + 144);
    return v33(v34, v35);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v16 = *(void **)(v0 + 24);
    sub_100014D14((void *)(*(void *)(v0 + 32) + 24), *(void *)(*(void *)(v0 + 32) + 48));
    id v17 = [v16 credentialBAACertificate];
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v21 = dispatch thunk of AppleIDVManaging.establishPrearmTrust(baaCertificate:)();
    *(void *)(v0 + 160) = v21;
    *(void *)(v0 + 168) = v22;
    if (v15)
    {
      uint64_t v23 = *(void *)(v0 + 136);
      unint64_t v24 = *(void *)(v0 + 144);
      uint64_t v26 = *(void *)(v0 + 112);
      unint64_t v25 = *(void *)(v0 + 120);
      sub_1000035EC(v18, v20);
      sub_100009764(v23, v24);
      uint64_t v27 = v26;
      unint64_t v28 = v25;
LABEL_15:
      sub_1000035EC(v27, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v31 = *(uint64_t (**)(void))(v0 + 8);
      return v31();
    }
    uint64_t v36 = v21;
    uint64_t v37 = v22;
    uint64_t v38 = *(void **)(v0 + 24);
    sub_1000035EC(v18, v20);
    id v39 = [v38 credentialPairingID];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    *(void *)(v0 + 176) = v42;
    uint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v43;
    *uint64_t v43 = v0;
    v43[1] = sub_1000BEEB0;
    return sub_1000CD720(v36, v37, v40, v42);
  }
}

uint64_t sub_1000BEEB0()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1000BF270;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v2 = sub_1000BEFCC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BEFCC()
{
  sub_1000035EC(v0[20], v0[21]);
  uint64_t v1 = v0[14];
  unint64_t v2 = v0[15];
  if (v0[18] >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.idcsMissingProgenitorKeyAttestation(_:), v0[5]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v1, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    sub_1000035EC(v0[14], v0[15]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[18];
    return v5(v6, v7);
  }
}

uint64_t sub_1000BF1E8()
{
  sub_1000035EC(v0[14], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000BF270()
{
  unint64_t v1 = v0[21];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[17];
  unint64_t v3 = v0[18];
  uint64_t v6 = v0[14];
  unint64_t v5 = v0[15];
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v1);
  sub_100009764(v4, v3);
  sub_1000035EC(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000BF330(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000BF44C, 0, 0);
}

uint64_t sub_1000BF44C()
{
  id v1 = [*(id *)(v0 + 32) credentialPairingID];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 96) = v4;
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  void *v5 = v0;
  v5[1] = sub_1000BF51C;
  return sub_1000CE214(v2, v4);
}

uint64_t sub_1000BF51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = v2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v5 = sub_1000BFC18;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v5 = sub_1000BF63C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BF63C()
{
  uint64_t v36 = v0;
  unint64_t v1 = v0[15];
  if (v1 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v0[6]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_8:
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v30 = (uint64_t (*)(void))v0[1];
    goto LABEL_10;
  }
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = v0[14];
  sub_10000354C(v3, v0[15]);
  defaultLogger()();
  sub_100009778(v3, v1);
  id v4 = v2;
  sub_100009778(v3, v1);
  id v5 = v4;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[14];
  unint64_t v9 = v0[15];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[11];
  uint64_t v13 = v0[9];
  unint64_t v14 = (void *)v0[4];
  if (v8)
  {
    uint64_t v34 = v0[9];
    uint64_t v33 = v0[11];
    uint64_t v15 = swift_slowAlloc();
    v35[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    log = v6;
    Swift::String v16 = Data.base64EncodedString(options:)(0);
    v0[2] = sub_10004C3A4(v16._countAndFlagsBits, (unint64_t)v16._object, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009764(v10, v9);
    sub_100009764(v10, v9);
    *(_WORD *)(v15 + 12) = 2080;
    id v17 = [v14 credentialPairingID];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    v0[3] = sub_10004C3A4(v18, v20, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, v7, "Successfully retrieved persisted protected public key: %s for pairingID: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v33, v34);
  }
  else
  {
    sub_100009764(v0[14], v0[15]);
    sub_100009764(v10, v9);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  }
  uint64_t v21 = v0[16];
  uint64_t v22 = (void *)v0[4];
  sub_100014D14((void *)(v0[5] + 24), *(void *)(v0[5] + 48));
  id v23 = [v22 credentialAuthorizationToken];
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  dispatch thunk of AppleIDVManaging.prearmCredential(withAuthorizationToken:protectedPublicKey:)();
  uint64_t v27 = v21;
  uint64_t v29 = v0[14];
  unint64_t v28 = v0[15];
  if (v27)
  {
    sub_1000035EC(v24, v26);
    sub_100009764(v29, v28);
    sub_100009764(v29, v28);
    goto LABEL_8;
  }
  sub_1000035EC(v24, v26);
  sub_100009764(v29, v28);
  sub_100009764(v29, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = (uint64_t (*)(void))v0[1];
LABEL_10:
  return v30();
}

uint64_t sub_1000BFC18()
{
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000BFDA4()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  sub_100014D14((void *)(v0 + 24), *(void *)(v0 + 48));
  dispatch thunk of AppleIDVManaging.credentialAuthenticationTokenStatus()();
  return 2;
}

uint64_t sub_1000C002C()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = dispatch thunk of SESKeystore.getCASDCertificate()();
  if (v0)
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.internalError(_:), v1);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v5;
}

uint64_t sub_1000C020C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[6] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000C02FC;
  return sub_1000CCDA0(0);
}

uint64_t sub_1000C02FC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1) {
    id v4 = sub_1000C060C;
  }
  else {
    id v4 = sub_1000C0410;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C0410()
{
  if (v0[7])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = sub_100143294(v0[7]);
    unint64_t v4 = v3;
    swift_release();
    if (v1)
    {
      (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
      swift_errorRetain();
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      uint64_t v5 = (uint64_t (*)(void))v0[1];
      return v5();
    }
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v4 = 0xF000000000000000;
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v7(v2, v4);
}

uint64_t sub_1000C060C()
{
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C0784()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[6] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000C0870;
  return sub_1000CE9F4();
}

uint64_t sub_1000C0870(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_1000C0B88;
  }
  else {
    unint64_t v4 = sub_1000C0984;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C0984()
{
  if (v0[7])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = swift_retain();
    uint64_t v3 = sub_100143294(v2);
    unint64_t v5 = v4;
    swift_release_n();
    if (v1)
    {
      (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
      swift_errorRetain();
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      uint64_t v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v8(v3, v5);
}

uint64_t sub_1000C0B88()
{
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C0D00()
{
  v1[10] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[11] = v2;
  v1[12] = *(void *)(v2 - 8);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000C0DC0, 0, 0);
}

uint64_t sub_1000C0DC0()
{
  uint64_t v1 = v0[10];
  type metadata accessor for ACLFetcher();
  uint64_t inited = swift_initStackObject();
  v0[14] = inited;
  *(void *)(inited + 16) = v1;
  type metadata accessor for AppleIDVManager();
  swift_retain();
  sub_10015A018((uint64_t *)(inited + 24));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[15] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000C0EA4;
  return sub_1000CCDA0(0);
}

uint64_t sub_1000C0EA4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000C1888;
  }
  else {
    uint64_t v4 = sub_1000C0FB8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C0FB8()
{
  uint64_t v1 = v0[16];
  if (v1)
  {
    uint64_t v2 = v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey;
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    v0[18] = v3;
    unint64_t v4 = *(void *)(v2 + 8);
    v0[19] = v4;
    sub_10000354C(v3, v4);
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[20] = v5;
    void *v5 = v0;
    v5[1] = sub_1000C12A8;
    return sub_1000CE9F4();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v0[11]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1000C12A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_1000C1A08;
  }
  else {
    unint64_t v4 = sub_1000C13BC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C13BC()
{
  uint64_t v1 = v0[21];
  if (!v1)
  {
    uint64_t v13 = v0[18];
    unint64_t v12 = v0[19];
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.idcsMissingGlobalThirdPartyAuthACL(_:), v0[11]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = v13;
    unint64_t v11 = v12;
    goto LABEL_7;
  }
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[18];
  unint64_t v3 = v0[19];
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_10000354C(v6, v5);
  swift_release();
  SecAccessControlRef v7 = sub_1000A7374(v4, v3, v6, v5);
  if (v2)
  {
    uint64_t v9 = v0[18];
    unint64_t v8 = v0[19];
    sub_1000035EC(v6, v5);
    uint64_t v10 = v9;
    unint64_t v11 = v8;
LABEL_7:
    sub_1000035EC(v10, v11);
    swift_release();
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    unint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  SecAccessControlRef v14 = v7;
  uint64_t v15 = SecAccessControlRef.constraintsData.getter();
  unint64_t v17 = v0[19];
  uint64_t v24 = v0[18];
  uint64_t v18 = v0[14];
  if (v16 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.idcsInvalidACL(_:), v0[11]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_1000035EC(v6, v5);
    uint64_t v10 = v24;
    unint64_t v11 = v17;
    goto LABEL_7;
  }
  uint64_t v21 = v15;
  unint64_t v22 = v16;

  sub_1000035EC(v6, v5);
  sub_1000035EC(v24, v17);
  swift_setDeallocating();
  swift_release();
  sub_10000B9DC(v18 + 24);
  swift_task_dealloc();
  id v23 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v23(v21, v22);
}

uint64_t sub_1000C1888()
{
  swift_release();
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C1A08()
{
  sub_1000035EC(v0[18], v0[19]);
  swift_release();
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C1B94(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 104) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = *(void *)(v5 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1000C1C5C, 0, 0);
}

uint64_t sub_1000C1C5C()
{
  unint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(v0 + 32) + 104) + 16);
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 72) = v5;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = v1;
  *(unsigned char *)(v5 + 40) = v2;
  swift_retain_n();
  sub_100009778(v3, v1);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 80) = v6;
  *(void *)(v6 + 16) = &unk_1001C32B0;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000C1DBC;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_1000C1DBC()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v2 = sub_1000C1F4C;
  }
  else
  {
    swift_release();
    swift_release();
    char v2 = sub_1000C1EE0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C1EE0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C1F4C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000C20E8()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000C21A8, 0, 0);
}

uint64_t sub_1000C21A8()
{
  uint64_t v1 = *(void *)(*(void *)(v0[2] + 104) + 16);
  v0[6] = v1;
  uint64_t v2 = swift_allocObject();
  v0[7] = v2;
  *(void *)(v2 + 16) = &unk_1001C3338;
  *(void *)(v2 + 24) = v1;
  swift_retain_n();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000C22BC;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_1000C22BC()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000C244C;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000C23E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C23E0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C244C()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  swift_release();
  swift_release_n();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000C25DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a1;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v11;
  *unint64_t v11 = v6;
  v11[1] = sub_1000C26A8;
  return sub_1000C282C(a4, a5, a6, a2, 0);
}

uint64_t sub_1000C26A8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 32) = a2;
    *(void *)(v6 + 40) = a1;
    return _swift_task_switch(sub_1000C2804, 0, 0);
  }
}

uint64_t sub_1000C2804()
{
  *(int8x16_t *)*(void *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C282C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 128) = a4;
  *(void *)(v6 + 136) = v5;
  *(unsigned char *)(v6 + 460) = a5;
  *(void *)(v6 + 112) = a2;
  *(void *)(v6 + 120) = a3;
  *(void *)(v6 + 104) = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 144) = v7;
  *(void *)(v6 + 152) = *(void *)(v7 - 8);
  *(void *)(v6 + 160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CoreIDVFeatureFlag();
  *(void *)(v6 + 168) = v8;
  *(void *)(v6 + 176) = *(void *)(v8 - 8);
  *(void *)(v6 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v6 + 192) = v9;
  *(void *)(v6 + 200) = *(void *)(v9 - 8);
  *(void *)(v6 + 208) = swift_task_alloc();
  *(void *)(v6 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_1000C29C0, 0, 0);
}

uint64_t sub_1000C29C0()
{
  uint64_t v1 = swift_allocObject();
  v0[28] = v1;
  *(_OWORD *)(v1 + 16) = xmmword_100176E40;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[29] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000C2A88;
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[13];
  return sub_1000C490C((uint64_t)(v0 + 2), v5, v3, v4);
}

uint64_t sub_1000C2A88()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C4014;
  }
  else {
    uint64_t v2 = sub_1000C2B9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C2B9C()
{
  uint64_t v1 = *(void *)(v0[17] + 104);
  v0[31] = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  v0[32] = v2;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000C2C54;
  uint64_t v4 = v0[16];
  return sub_100047560(v4, v2);
}

uint64_t sub_1000C2C54()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C41C8;
  }
  else {
    uint64_t v2 = sub_1000C2D68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C2D68()
{
  uint64_t v12 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 280) = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  *(void *)(v0 + 288) = *(void *)(v4 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 296) = v6;
  *(void *)(v6 + 16) = sub_1000D3E68;
  *(void *)(v6 + 24) = v5;
  uint64_t v7 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 456) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  *(void *)(v0 + 304) = v8;
  *(void *)(v0 + 312) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  swift_retain();
  swift_retain();
  v8(v12, v7, v1);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000C2EFC;
  uint64_t v10 = *(void *)(v0 + 216);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v10, sub_10004A390, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1000C2EFC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[25] + 8))(v2[27], v2[24]);
    swift_release();
    uint64_t v3 = sub_1000C3230;
  }
  else
  {
    uint64_t v4 = v2[27];
    uint64_t v5 = v2[24];
    uint64_t v6 = v2[25];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[42] = v7;
    v2[43] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    swift_release();
    swift_release();
    uint64_t v3 = sub_1000C3084;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C3084()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000C311C;
  return sub_100142CBC(v1);
}

uint64_t sub_1000C311C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 360) = a1;
  *(void *)(v3 + 368) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000C4390;
  }
  else {
    uint64_t v4 = sub_1000C3404;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C3230()
{
  swift_release();
  sub_1000D3DFC(v0 + 2);
  swift_release();
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C3404()
{
  sub_100014D14((void *)(*(void *)(v0 + 136) + 120), *(void *)(*(void *)(v0 + 136) + 144));
  if ((dispatch thunk of DeviceInformationProviding.isPhone.getter() & 1) != 0
    && (uint64_t v2 = *(void *)(v0 + 176),
        uint64_t v1 = *(void *)(v0 + 184),
        uint64_t v3 = *(void *)(v0 + 168),
        sub_100014D14((void *)(*(void *)(v0 + 136) + 64), *(void *)(*(void *)(v0 + 136) + 88)),
        (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for CoreIDVFeatureFlag.bbkc(_:), v3),
        char v4 = dispatch thunk of FeatureFlagProviding.isEnabled(_:)(),
        (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3),
        (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000C36F4;
    return sub_100142CBC(v5);
  }
  else
  {
    *(void *)(v0 + 400) = 0;
    uint64_t v8 = *(void *)(v0 + 360);
    id v23 = *(void (**)(uint64_t, void, uint64_t))(v0 + 304);
    unsigned int v22 = *(_DWORD *)(v0 + 456);
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 208);
    uint64_t v21 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    char v13 = *(unsigned char *)(v0 + 460);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 408) = v15;
    *(void *)(v15 + 16) = v9;
    *(void *)(v15 + 24) = v11;
    *(void *)(v15 + 32) = v8;
    *(unsigned char *)(v15 + 40) = v13;
    long long v16 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v15 + 64) = v16;
    long long v17 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v15 + 96) = v17;
    *(void *)(v15 + 112) = v12;
    *(void *)(v15 + 120) = v14;
    *(void *)(v15 + 128) = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000D3F34((void *)(v0 + 16));
    uint64_t v18 = swift_allocObject();
    *(void *)(v0 + 416) = v18;
    *(void *)(v18 + 16) = sub_1000D3F04;
    *(void *)(v18 + 24) = v15;
    v23(v10, v22, v21);
    swift_retain();
    unint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v19;
    *unint64_t v19 = v0;
    v19[1] = sub_1000C39F4;
    uint64_t v20 = *(void *)(v0 + 208);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v19, v20, sub_100064FB8, v18, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_1000C36F4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 384) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000C4558;
  }
  else
  {
    *(void *)(v4 + 392) = a1;
    uint64_t v5 = sub_1000C381C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000C381C()
{
  uint64_t v1 = *(void *)(v0 + 392);
  *(void *)(v0 + 400) = v1;
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t))(v0 + 304);
  unsigned int v17 = *(_DWORD *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  char v6 = *(unsigned char *)(v0 + 460);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 408) = v8;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v5;
  *(void *)(v8 + 32) = v2;
  *(unsigned char *)(v8 + 40) = v6;
  long long v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v8 + 64) = v9;
  long long v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v8 + 96) = v10;
  *(void *)(v8 + 112) = v4;
  *(void *)(v8 + 120) = v7;
  *(void *)(v8 + 128) = v1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000D3F34((void *)(v0 + 16));
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 416) = v11;
  *(void *)(v11 + 16) = sub_1000D3F04;
  *(void *)(v11 + 24) = v8;
  swift_retain();
  v18(v15, v17, v16);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000C39F4;
  uint64_t v13 = *(void *)(v0 + 208);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v13, sub_100064FB8, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_1000C39F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 336))(*(void *)(v2 + 208), *(void *)(v2 + 192));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000C3D18;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000C3B60;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C3B60()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[55] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000C3C04;
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[16];
  return sub_100047EA0(v3, 0, 0xF000000000000000, 0, v2);
}

uint64_t sub_1000C3C04()
{
  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C472C;
  }
  else {
    uint64_t v2 = sub_1000C3F00;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C3D18()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000D3DFC(v0 + 2);
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C3F00()
{
  uint64_t v1 = v0[28];
  swift_release();
  swift_release();
  swift_release();
  sub_1000D3DFC(v0 + 2);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  sub_100009778(v3, v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v4(v3, v2);
}

uint64_t sub_1000C4014()
{
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C41C8()
{
  swift_release();
  sub_1000D3DFC(v0 + 2);
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C4390()
{
  swift_release();
  sub_1000D3DFC(v0 + 2);
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C4558()
{
  swift_release();
  swift_release();
  sub_1000D3DFC(v0 + 2);
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C472C()
{
  swift_release();
  swift_release();
  swift_release();
  sub_1000D3DFC(v0 + 2);
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C490C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000C4A58, 0, 0);
}

uint64_t sub_1000C4A58()
{
  id v52 = v0;
  uint64_t v1 = sub_1000C590C(v0[5], v0[6], v0[7]);
  unint64_t v3 = v2;
  type metadata accessor for SecAccessControl(0);
  uint64_t v4 = static SecAccessControlRef.fromData(_:)();
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[13];
  uint64_t v50 = (void *)v4;
  defaultLogger()();
  uint64_t v8 = (void *)swift_task_alloc();
  v8[2] = v1;
  v8[3] = v3;
  v8[4] = v50;
  Logger.cryptoParam(_:)();
  swift_task_dealloc();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v5, v6);
  long long v10 = v9;
  char v11 = dispatch thunk of BiometricsHelper.requiresDoublePress.getter();
  if ((v11 & 1) == 0
    || (SecAccessControlRef.hasStockholmPolicy.getter() & 1) != 0
    || (SecAccessControlRef.hasIDVPolicy.getter() & 1) != 0)
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No double press required", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[12];

    v10(v15, v16);
    sub_10000354C(v1, v3);
    unint64_t v17 = v3;
    uint64_t v18 = v1;
    id v48 = v50;
    unint64_t v49 = v17;
    goto LABEL_7;
  }
  char v47 = v11;
  defaultLogger()();
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Double press required, updating ACL", v25, 2u);
    swift_slowDealloc();
  }
  uint64_t v26 = v0[16];
  uint64_t v27 = v0[12];
  uint64_t v28 = v0[8];

  v10(v26, v27);
  sub_100014D14((void *)(v28 + 24), *(void *)(v28 + 48));
  uint64_t v29 = dispatch thunk of AppleIDVManaging.requireDoublePressOnACL(_:)();
  unint64_t v31 = v30;
  if (v30 >> 60 != 15)
  {
    uint64_t v32 = v29;
    sub_10000354C(v29, v30);
    uint64_t v46 = v32;
    unint64_t v49 = v3;
    id v33 = (id)static SecAccessControlRef.fromData(_:)();
    defaultLogger()();
    sub_100009778(v46, v31);
    sub_100009778(v46, v31);
    id v34 = v33;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    log = v35;
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v0[15];
    uint64_t v39 = v0[12];
    id v48 = v34;
    if (v37)
    {
      uint64_t v44 = v0[12];
      uint64_t v40 = swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315394;
      Swift::String v41 = Data.base16EncodedString()();
      v0[2] = sub_10004C3A4(v41._countAndFlagsBits, (unint64_t)v41._object, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100009764(v46, v31);
      sub_100009764(v46, v31);
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v42 = SecAccessControlRef.constraintsDescription.getter();
      v0[3] = sub_10004C3A4(v42, v43, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, log, v36, "setSESBackedGlobalAuthACL ACL with double press: %s = %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v18 = v46;
      sub_100009764(v46, v31);
      v10(v38, v44);
      unint64_t v17 = v31;
      char v11 = v47;
    }
    else
    {
      sub_100009764(v46, v31);
      sub_100009764(v46, v31);
      sub_1000035EC(v46, v31);

      v10(v38, v39);
      unint64_t v17 = v31;
      char v11 = v47;
      uint64_t v18 = v46;
    }
LABEL_7:
    sub_100014D14((void *)(v0[8] + 24), *(void *)(v0[8] + 48));
    uint64_t v20 = dispatch thunk of AppleIDVManaging.getUUIDsFromACL(_:)();
    uint64_t v21 = v0[4];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(unsigned char *)uint64_t v21 = v11 & 1;
    *(void *)(v21 + 8) = v1;
    *(void *)(v21 + 16) = v49;
    *(void *)(v21 + 24) = v50;
    *(void *)(v21 + 32) = v18;
    *(void *)(v21 + 40) = v17;
    *(void *)(v21 + 48) = v48;
    *(void *)(v21 + 56) = v20;
    unsigned int v22 = (uint64_t (*)(void))v0[1];
    goto LABEL_8;
  }
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.appleIDVErrorRequireDoublePressOnACL(_:), v0[9]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_1000035EC(v1, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v22 = (uint64_t (*)(void))v0[1];
LABEL_8:
  return v22();
}

uint64_t sub_1000C5244(uint64_t a1, uint8_t *a2)
{
  uint64_t v4 = *(char **)(a1 + 104);
  uint64_t result = sub_1000D1FFC((char *)0xD000000000000012, (void *)0x8000000100179950, a2, v4);
  if (!v2) {
    return sub_1000D1FFC((char *)0xD00000000000001ELL, (void *)0x8000000100179970, a2, v4);
  }
  return result;
}

void sub_1000C52C0(uint64_t a1, void *a2, objc_class *a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  unint64_t v55 = a5;
  Class ObjCClassFromMetadata = a3;
  LODWORD(v54) = a4;
  uint64_t v57 = a2;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - v15;
  defaultLogger()();
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "created a new progenitor key", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  Class v21 = ObjCClassFromMetadata;
  uint64_t v22 = sub_100143294((uint64_t)ObjCClassFromMetadata);
  if (!v8)
  {
    uint64_t v24 = v22;
    uint64_t v25 = v23;
    swift_beginAccess();
    uint64_t v26 = *(void *)(a1 + 16);
    unint64_t v27 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v24;
    *(void *)(a1 + 24) = v25;
    sub_100009764(v26, v27);
    if (v54)
    {
      defaultLogger()();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v59 = v54;
        *(_DWORD *)unint64_t v30 = 136315138;
        uint64_t v50 = v30 + 4;
        uint64_t v58 = sub_10004C3A4(0xD00000000000003CLL, 0x800000010017FB60, &v59);
        Class v21 = ObjCClassFromMetadata;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s keeping sidv acl", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      v20(v14, v10);
      sub_100014D14(v57 + 3, v57[6]);
      unint64_t v31 = v55;
      uint64_t v32 = dispatch thunk of AppleIDVManaging.persistACLBlob(_:requiresDoublePress:)();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = 0;
      unint64_t v34 = 0xC000000000000000;
      unint64_t v31 = v55;
    }
    type metadata accessor for StoredCryptoKey();
    uint64_t v35 = *(void *)(v52 + 16);
    Class ObjCClassFromMetadata = (Class)swift_getObjCClassFromMetadata();
    uint64_t v57 = [objc_allocWithZone(ObjCClassFromMetadata) initWithContext:v35];
    sub_1000FA20C((uint64_t)v21);
    type metadata accessor for StoredAuthACL();
    os_log_type_t v36 = (objc_class *)swift_getObjCClassFromMetadata();
    id v37 = [objc_allocWithZone(v36) initWithContext:v35];
    [v37 setVersion:2];
    if (v53 < 0)
    {
      __break(1u);
    }
    else
    {
      [v37 setAclType:];
      NSString v38 = String._bridgeToObjectiveC()();
      [v37 setIdentifier:v38];

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v37 setEncryptedACL:isa];

      if (*(void *)(v31 + 56)) {
        uint64_t v40 = *(void **)(v31 + 56);
      }
      else {
        uint64_t v40 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain();
      sub_1000FA228((uint64_t)v40);
      uint64_t v54 = v32;
      unint64_t v55 = v34;
      swift_bridgeObjectRelease();
      Swift::String v41 = v57;
      [v37 setProgenitorKey:v57];
      uint64_t v42 = v51;
      if (v51)
      {
        id v43 = objc_allocWithZone(ObjCClassFromMetadata);
        swift_retain();
        Class ObjCClassFromMetadata = (Class)[v43 initWithContext:v35];
        sub_1000FA20C(v42);
        id v44 = [objc_allocWithZone(v36) initWithContext:v35];
        [v44 setVersion:2];
        [v44 setAclType:v53];
        NSString v45 = String._bridgeToObjectiveC()();
        [v44 setIdentifier:v45];

        Class v46 = Data._bridgeToObjectiveC()().super.isa;
        [v44 setEncryptedACL:v46];

        swift_bridgeObjectRetain();
        sub_1000FA228((uint64_t)v40);
        swift_bridgeObjectRelease();
        Class v47 = ObjCClassFromMetadata;
        [v44 setProgenitorKey:ObjCClassFromMetadata];
        swift_release();
      }
      uint64_t v49 = v54;
      unint64_t v48 = v55;
      sub_100007290();
      sub_1000035EC(v49, v48);
    }
  }
}

uint64_t sub_1000C590C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v71 = a2;
  uint64_t v70 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  __chkstk_darwin(v4);
  uint64_t v66 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  __chkstk_darwin(v6);
  uint64_t v74 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for EnrolledBiometricType();
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v61 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006CC8(&qword_1001C3288);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100006CC8(&qword_1001C3290);
  uint64_t v14 = __chkstk_darwin(v62);
  __n128 v67 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v55 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  Class v21 = (char *)&v55 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v55 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v55 - v25;
  dispatch thunk of BiometricsHelper.biometricType.getter();
  uint64_t v73 = v26;
  sub_1000D3FA4((uint64_t)v26, (uint64_t)v24);
  uint64_t v63 = a3;
  if (a3 != 1)
  {
    sub_100014BBC((uint64_t)v24, &qword_1001C3290);
    LODWORD(v28) = 0;
    uint64_t v33 = (uint64_t)v73;
    uint64_t v35 = v74;
    uint64_t v34 = (uint64_t)v67;
    goto LABEL_10;
  }
  uint64_t v57 = v10;
  uint64_t v58 = v18;
  uint64_t v28 = v60;
  uint64_t v27 = v61;
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v21, enum case for EnrolledBiometricType.touchID(_:), v61);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v21, 0, 1, v27);
  uint64_t v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_1000D3FA4((uint64_t)v24, (uint64_t)v13);
  sub_1000D3FA4((uint64_t)v21, v29);
  unint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  uint64_t v31 = (uint64_t)v13;
  if (v30((uint64_t)v13, 1, v27) == 1)
  {
    sub_100014BBC((uint64_t)v21, &qword_1001C3290);
    sub_100014BBC((uint64_t)v24, &qword_1001C3290);
    int v32 = v30(v29, 1, v27);
    uint64_t v33 = (uint64_t)v73;
    uint64_t v34 = (uint64_t)v67;
    if (v32 == 1)
    {
      sub_100014BBC((uint64_t)v13, &qword_1001C3290);
      LODWORD(v28) = 1;
      uint64_t v35 = v74;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v36 = (uint64_t)v13;
  uint64_t v37 = (uint64_t)v58;
  sub_1000D3FA4(v36, (uint64_t)v58);
  int v38 = v30(v29, 1, v27);
  uint64_t v34 = (uint64_t)v67;
  if (v38 == 1)
  {
    sub_100014BBC((uint64_t)v21, &qword_1001C3290);
    sub_100014BBC((uint64_t)v24, &qword_1001C3290);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v37, v27);
    uint64_t v33 = (uint64_t)v73;
LABEL_8:
    sub_100014BBC(v31, &qword_1001C3288);
    LODWORD(v28) = 0;
    uint64_t v35 = v74;
    goto LABEL_10;
  }
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  uint64_t v56 = v31;
  uint64_t v40 = v57;
  v39(v57, v29, v27);
  sub_1000D400C(&qword_1001C3298, (void (*)(uint64_t))&type metadata accessor for EnrolledBiometricType);
  int v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  Swift::String v41 = *(void (**)(char *, uint64_t))(v28 + 8);
  v41(v40, v27);
  sub_100014BBC((uint64_t)v21, &qword_1001C3290);
  sub_100014BBC((uint64_t)v24, &qword_1001C3290);
  v41((char *)v37, v27);
  LODWORD(v28) = v59;
  sub_100014BBC(v56, &qword_1001C3290);
  uint64_t v33 = (uint64_t)v73;
  uint64_t v35 = v74;
LABEL_10:
  defaultLogger()();
  sub_1000D3FA4(v33, v34);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 67109634;
    LODWORD(v75) = v28 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 8) = 2080;
    id v45 = (id)DCCredentialAuthACLTypeToString();
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v59 = v28;
    uint64_t v28 = v46;
    unint64_t v48 = v47;

    uint64_t v75 = sub_10004C3A4(v28, v48, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 18) = 2080;
    uint64_t v49 = Optional.debugDescription.getter();
    uint64_t v75 = sub_10004C3A4(v49, v50, &v76);
    uint64_t v33 = (uint64_t)v73;
    LOBYTE(v28) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100014BBC(v34, &qword_1001C3290);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Calling migrateOACLOperation with shouldHaveOACL = %{BOOL}d, acl type = %s, biometric type = %s", (uint8_t *)v44, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v68 + 8))(v74, v69);
  }
  else
  {
    sub_100014BBC(v34, &qword_1001C3290);

    (*(void (**)(char *, uint64_t))(v68 + 8))(v35, v69);
  }
  uint64_t v51 = v72;
  sub_100170AA4(v70, v71, v28 & 1);
  uint64_t v53 = v52;
  sub_100014BBC(v33, &qword_1001C3290);
  if (v51)
  {
    (*(void (**)(char *, void, uint64_t))(v64 + 104))(v66, enum case for DIPError.Code.internalError(_:), v65);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v53;
}

uint64_t sub_1000C61D0()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x800000010017FCA0;
  v0._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v0);
  Swift::String v1 = Data.base16EncodedString()();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2112800;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = SecAccessControlRef.constraintsDescription.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000C6298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  v7[10] = a2;
  v7[11] = a3;
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v7[16] = v8;
  v7[17] = *(void *)(v8 - 8);
  v7[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v7[19] = v9;
  v7[20] = *(void *)(v9 - 8);
  v7[21] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v7[22] = v10;
  void *v10 = v7;
  v10[1] = sub_1000C6404;
  return sub_1000CA7B0(0xD000000000000012, 0x8000000100179950);
}

uint64_t sub_1000C6404(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1000C654C, 0, 0);
  }
}

uint64_t sub_1000C654C()
{
  uint64_t v1 = *(void **)(v0 + 184);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 184) aclType];

    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000C677C;
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    return sub_1000C490C(v0 + 16, v4, v5, (uint64_t)v2);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 104))(*(void *)(v0 + 168), enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(void *)(v0 + 152));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1000C677C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1000C68C0, 0, 0);
  }
}

uint64_t sub_1000C68C0()
{
  uint64_t v1 = *(void *)(*(void *)(v0[11] + 104) + 16);
  v0[25] = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[26] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000C6974;
  uint64_t v3 = v0[10];
  return sub_100047560(v3, v1);
}

uint64_t sub_1000C6974()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C7098;
  }
  else {
    uint64_t v2 = sub_1000C6A88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C6A88()
{
  uint64_t v1 = *(void *)(v0 + 136);
  unint64_t v2 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 144);
  unint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 224) = v8;
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v4;
  *(void *)(v8 + 48) = v3;
  *(void *)(v8 + 56) = v2;
  long long v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v8 + 80) = v9;
  long long v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v8 + 112) = v10;
  swift_retain();
  swift_retain();
  sub_10000354C(v5, v4);
  sub_10000354C(v3, v2);
  sub_1000D3F34((void *)(v0 + 16));
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 232) = v11;
  *(void *)(v11 + 16) = sub_1000D49E4;
  *(void *)(v11 + 24) = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v16, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v15);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000C6C44;
  uint64_t v13 = *(void *)(v0 + 144);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v13, sub_100064FB8, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_1000C6C44()
{
  unint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[17] + 8))(v2[18], v2[16]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000C6F78;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000C6DC0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C6DC0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[32] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000C6E64;
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[10];
  return sub_100047EA0(v3, 0, 0xF000000000000000, 0, v2);
}

uint64_t sub_1000C6E64()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C711C;
  }
  else {
    uint64_t v2 = sub_1000C7008;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C6F78()
{
  sub_1000D3DFC((void *)(v0 + 16));
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C7008()
{
  swift_release();
  sub_1000D3DFC((void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C7098()
{
  swift_release();
  sub_1000D3DFC((void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C711C()
{
  swift_release();
  sub_1000D3DFC((void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000C71A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v46 = a3;
  uint64_t v47 = a7;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v52 = a4;
  uint64_t v49 = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (!v7)
  {
    uint64_t v20 = v19;
    uint64_t v42 = a1;
    uint64_t v43 = 0;
    uint64_t v21 = (uint64_t)v52;
    uint64_t v44 = v18;
    uint64_t v45 = v16;
    uint64_t v40 = v12;
    uint64_t v41 = v9;
    if (!v19)
    {
      (*(void (**)(char *, void, uint64_t))(v45 + 104))(v44, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v15);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    unsigned int v22 = [v19 version];
    if (v22 == 1)
    {
      uint64_t v31 = v43;
      sub_1000C792C(v20, v46, v21, v42, v50, v51);
      if (v31)
      {

        return;
      }
      uint64_t v52 = v20;
      int v32 = v44;
    }
    else
    {
      uint64_t v52 = v20;
      if ((unsigned __int16)v22 != 2)
      {
        (*(void (**)(char *, void, uint64_t))(v45 + 104))(v44, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v15);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
LABEL_21:

        return;
      }
      defaultLogger()();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Updating global progenitor key", v25, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v41);
      uint64_t v26 = *(void **)(v47 + 48);
      uint64_t v27 = v52;
      uint64_t v29 = v50;
      uint64_t v28 = (uint64_t)v51;
      uint64_t v30 = v43;
      sub_1000D28C4(v52, v26, *(void *)(v47 + 32), *(void *)(v47 + 40), v50, (uint64_t)v51);
      if (v30)
      {

        return;
      }
      sub_1000C8140((uint64_t)v26, v42, v29, v28);
      int v32 = v44;
    }
    uint64_t v33 = v48;
    uint64_t v34 = (void *)sub_10016D500(0xD00000000000001ELL, (void *)0x8000000100179970);
    uint64_t v35 = v34;
    if (!v34)
    {
LABEL_20:
      sub_100007290();
      goto LABEL_21;
    }
    if ([v34 version] == 2)
    {
      uint64_t v36 = v40;
      defaultLogger()();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Updating global third party progenitor key", v39, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v41);
      sub_1000D28C4(v35, *(void **)(v47 + 24), *(void *)(v47 + 8), *(void *)(v47 + 16), v50, (uint64_t)v51);

      goto LABEL_20;
    }
    (*(void (**)(char *, void, uint64_t))(v45 + 104))(v32, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v15);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t sub_1000C792C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v64 = a6;
  uint64_t v63 = a5;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v66 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __n128 v67 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [a1 encryptedACL];
  if (!v14) {
    goto LABEL_6;
  }
  uint64_t v15 = v14;
  uint64_t v59 = v11;
  uint64_t v61 = a4;
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  id v19 = [a1 identifier];
  if (!v19)
  {
    sub_1000035EC(v16, v18);
LABEL_6:
    uint64_t v32 = v66;
    uint64_t v31 = v67;
    (*(void (**)(char *, void, uint64_t))(v66 + 104))(v67, enum case for DIPError.Code.invalidStoredData(_:), v9);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_8;
  }
  uint64_t v57 = v13;
  uint64_t v60 = v9;
  uint64_t v20 = v19;
  uint64_t v58 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  id v56 = [a1 aclType];
  sub_100014D14((void *)(v6 + 24), *(void *)(v6 + 48));
  uint64_t v23 = v65;
  uint64_t v24 = dispatch thunk of AppleIDVManaging.persistModifiedACLBlob(_:referenceACLBlob:externalizedLAContext:)();
  unint64_t v27 = v18;
  uint64_t v28 = v16;
  if (v23)
  {
    swift_bridgeObjectRelease();

    sub_1000035EC(v16, v27);
    uint64_t v32 = v66;
    uint64_t v31 = v67;
    uint64_t v9 = v60;
LABEL_8:
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v29 = v24;
  unint64_t v30 = v25;
  uint64_t v64 = v20;
  uint64_t v65 = v26;
  sub_10016DAF8(v58, v22);
  swift_bridgeObjectRelease();
  uint64_t v34 = v57;
  defaultLogger()();
  sub_10000354C(v29, v30);
  swift_bridgeObjectRetain();
  sub_10000354C(v29, v30);
  swift_bridgeObjectRetain();
  uint64_t v35 = (char *)Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  uint64_t v58 = v35;
  BOOL v37 = os_log_type_enabled((os_log_t)v35, v36);
  uint64_t v63 = v29;
  uint64_t v53 = v28;
  unint64_t v54 = v27;
  unint64_t v55 = v30;
  if (v37)
  {
    os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v69 = v52;
    uint64_t v51 = v38;
    *(_DWORD *)os_log_type_t v38 = 136315138;
    uint64_t v39 = v63;
    Swift::String v40 = Data.base64EncodedString(options:)(0);
    uint64_t v68 = sub_10004C3A4(v40._countAndFlagsBits, (unint64_t)v40._object, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v39, v30);
    swift_bridgeObjectRelease();
    sub_1000035EC(v39, v30);
    swift_bridgeObjectRelease();
    uint64_t v41 = v58;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v58, v36, "Modified ACL: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v62 + 8))(v57, v59);
  }
  else
  {
    uint64_t v42 = v63;
    sub_1000035EC(v63, v30);
    swift_bridgeObjectRelease();
    sub_1000035EC(v42, v30);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v59);
  }
  uint64_t v43 = v61;
  type metadata accessor for StoredAuthACL();
  id v44 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v43 + 16)];
  uint64_t v45 = v63;
  unint64_t v46 = v55;
  sub_10000354C(v63, v55);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000035EC(v45, v46);
  [v44 setEncryptedACL:isa];

  [v44 setAclType:v56];
  uint64_t v48 = v64;
  [v44 setIdentifier:v64];

  sub_10000354C(v45, v46);
  uint64_t v49 = v65;
  swift_bridgeObjectRetain();
  sub_1000035EC(v45, v46);
  if (v49) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = _swiftEmptyArrayStorage;
  }
  sub_1000FA228((uint64_t)v50);
  sub_1000035EC(v53, v54);
  sub_1000035EC(v63, v55);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_1000C8140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v77 = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v68 = *(void *)(v5 - 8);
  uint64_t v69 = v5;
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CredentialKeyType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v83 - 8);
  uint64_t v12 = __chkstk_darwin(v83);
  v81 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  id v80 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v59 - v16;
  id v18 = [self standardUserDefaults];
  v19._countAndFlagsBits = 0xD000000000000031;
  v19._object = (void *)0x8000000100180310;
  Swift::Bool v20 = NSUserDefaults.internalBool(forKey:)(v19);

  if (v20)
  {
    defaultLogger()();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Skipping ACL update to presentment keys due to internal defaults setting", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v83);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for CredentialKeyType.ses(_:), v7);
    uint64_t v24 = sub_10000C8F8((uint64_t)v10, 2);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      unint64_t v25 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      unint64_t v27 = v25;
      if (v25 >> 62) {
        goto LABEL_29;
      }
      uint64_t v28 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v28)
      {
        uint64_t v65 = (void (**)(char *, uint64_t))(v11 + 8);
        unint64_t v66 = v27 & 0xC000000000000001;
        uint64_t v60 = &v85;
        uint64_t v29 = 4;
        *(void *)&long long v26 = 136315138;
        long long v63 = v26;
        uint64_t v59 = (char *)&type metadata for Any + 8;
        unint64_t v62 = v27;
        uint64_t v64 = v28;
        while (1)
        {
          id v30 = v66 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v27 + 8 * v29);
          uint64_t v31 = v30;
          if (__OFADD__(v29 - 4, 1)) {
            break;
          }
          id v32 = [v30 identifier:v59, v60];
          if (!v32) {
            goto LABEL_27;
          }
          uint64_t v33 = v32;
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;

          id v37 = [v31 keyBlob];
          if (!v37)
          {
            swift_bridgeObjectRelease();
LABEL_27:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v68 + 104))(v70, enum case for DIPError.Code.invalidStoredData(_:), v69);
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();

            return;
          }
          os_log_type_t v38 = v37;
          uint64_t v71 = v29 - 3;
          uint64_t v72 = v29;
          unint64_t v39 = v27;
          uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;

          uint64_t v43 = v34;
          uint64_t v11 = *(void *)(v82 + 104);
          uint64_t v67 = v43;
          uint64_t v76 = v40;
          uint64_t v44 = sub_100140DA0(v43, v36, v40, v42, 0, 0xF000000000000000);
          unint64_t v73 = v42;
          id v74 = v31;
          uint64_t v75 = v44;
          uint64_t v45 = dispatch thunk of SESKeystore.getACLConstraints(of:)();
          unint64_t v47 = v46;
          unint64_t v27 = v39;
          type metadata accessor for SecAccessControl(0);
          uint64_t v48 = (void *)static SecAccessControlRef.fromConstraintsData(_:)();
          sub_1000035EC(v45, v47);
          if (SecAccessControlRef.isOSGNChild.getter())
          {
            uint64_t v49 = v80;
            defaultLogger()();
            swift_bridgeObjectRetain();
            uint64_t v50 = Logger.logObject.getter();
            os_log_type_t v51 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v50, v51))
            {
              uint64_t v52 = swift_slowAlloc();
              uint64_t v11 = swift_slowAlloc();
              uint64_t v86 = v11;
              *(_DWORD *)uint64_t v52 = v63;
              swift_bridgeObjectRetain();
              *(void *)(v52 + 4) = sub_10004C3A4(v67, v36, &v86);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v50, v51, "Presentment key %s is a child key; skipping ACL change",
                (uint8_t *)v52,
                0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_release();

              sub_1000035EC(v76, v73);
              (*v65)(v80, v83);
            }
            else
            {
              swift_release();

              swift_bridgeObjectRelease_n();
              sub_1000035EC(v76, v73);

              (*v65)(v49, v83);
            }
          }
          else
          {
            uint64_t v53 = v81;
            defaultLogger()();
            swift_bridgeObjectRetain();
            unint64_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v54, v55))
            {
              id v56 = (uint8_t *)swift_slowAlloc();
              uint64_t v86 = swift_slowAlloc();
              *(_DWORD *)id v56 = v63;
              uint64_t v61 = v56 + 4;
              swift_bridgeObjectRetain();
              uint64_t v84 = sub_10004C3A4(v67, v36, &v86);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "Updating ACL for presentment key %s", v56, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t v27 = v62;
              swift_slowDealloc();

              (*v65)(v81, v83);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*v65)(v53, v83);
            }
            id v57 = v74;
            uint64_t v58 = sub_100143BCC(v75, v77, v78, v79);
            sub_1000FA490(v58);
            swift_release();

            swift_release();
            sub_1000035EC(v76, v73);
          }
          uint64_t v29 = v72 + 1;
          if (v71 == v64) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_29:
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_30:
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1000C8D7C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000C8E3C, 0, 0);
}

uint64_t sub_1000C8E3C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking global auth oacl for migration", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = swift_allocObject();
  v0[6] = v8;
  *(void *)(v8 + 16) = sub_1000D4170;
  *(void *)(v8 + 24) = v7;
  swift_retain_n();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[7] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000C8FE0;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_1000C8FE0()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000C916C;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000C9108;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C9108()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C916C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000C91E4(uint64_t a1, unint64_t a2)
{
  unint64_t v98 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v97 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v84 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v84 - v11;
  uint64_t v13 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v14 = *(v13 - 1);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (v2) {
    return;
  }
  id v18 = v17;
  uint64_t v95 = v14;
  id v96 = v13;
  unint64_t v19 = v98;
  uint64_t v91 = v7;
  unint64_t v92 = v10;
  uint64_t v93 = a1;
  uint64_t v94 = v4;
  if (!v17)
  {
    (*(void (**)(char *, void, id))(v95 + 104))(v16, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v96);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  uint64_t v90 = 0;
  unsigned int v20 = [v17 version];
  if (v20 == 1)
  {
    id v89 = v18;
    defaultLogger()();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    uint64_t v43 = v97;
    if (v42)
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Global auth acl is v1, no migration necessary", v44, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v94);
    goto LABEL_14;
  }
  uint64_t v21 = v16;
  if ((unsigned __int16)v20 != 2)
  {
    (*(void (**)(char *, void, id))(v95 + 104))(v16, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v96);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_19:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return;
  }
  id v22 = [v18 progenitorKey];
  uint64_t v24 = v95;
  id v23 = v96;
  if (!v22)
  {
LABEL_18:
    (*(void (**)(char *, void, id))(v24 + 104))(v21, enum case for DIPError.Code.idcsMissingProgenitorKeyFromACL(_:), v23);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_19;
  }
  unint64_t v25 = v22;
  id v26 = [v22 identifier];
  if (!v26)
  {

    goto LABEL_18;
  }
  unint64_t v27 = v26;
  unint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  id v30 = [v25 keyBlob];
  if (!v30)
  {

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v31 = v30;
  id v89 = v18;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v86 = v33;
  uint64_t v87 = v32;

  uint64_t v34 = *(void *)(v19 + 104);
  id v85 = v25;
  id v35 = [v25 publicKeyIdentifier];
  if (v35)
  {
    unint64_t v36 = v35;
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v39 = 0xF000000000000000;
  }
  uint64_t v45 = v87;
  unint64_t v46 = v86;
  uint64_t v47 = v37;
  uint64_t v48 = v37;
  unint64_t v49 = v39;
  uint64_t v50 = v90;
  uint64_t v51 = sub_1001432CC(v88, v29, v87, v86, v48, v39);
  if (v50)
  {
    sub_100009764(v47, v39);
    sub_1000035EC(v45, v46);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  sub_100009764(v47, v49);
  uint64_t v53 = (void *)sub_100146334();
  uint64_t v95 = v34;
  id v96 = v53;
  uint64_t v54 = SecAccessControlRef.data.getter();
  unint64_t v56 = v55;
  uint64_t v57 = (uint64_t)[v89 aclType];
  if (v57 < 0) {
    goto LABEL_35;
  }
  uint64_t v58 = sub_1000C590C(v54, v56, v57);
  unint64_t v59 = v86;
  uint64_t v60 = v92;
  uint64_t v61 = v58;
  unint64_t v98 = v62;
  unint64_t v88 = v56;
  if ((sub_100147900(v58, v62, v54, v56) & 1) == 0)
  {
    unint64_t v66 = v91;
    defaultLogger()();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Global auth acl requires migration", v69, 2u);
      unint64_t v66 = v91;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v97 + 8))(v66, v94);
    id v70 = [objc_allocWithZone((Class)LAContext) init];
    sub_1001720A0(v70);
    type metadata accessor for SecAccessControl(0);
    uint64_t v71 = static SecAccessControlRef.fromData(_:)();
    uint64_t v90 = 0;
    uint64_t v72 = (void *)v71;
    id v73 = [v70 externalizedContext];
    if (v73)
    {
      id v74 = v73;
      uint64_t v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v77 = v76;

      uint64_t v97 = v52;
      uint64_t v78 = v52;
      uint64_t v79 = v72;
      uint64_t v80 = v90;
      uint64_t v81 = sub_10014392C(v78, (uint64_t)v72, v75, v77);
      uint64_t v90 = v80;
      if (v80)
      {
        sub_1000035EC(v75, v77);

        sub_1000035EC(v61, v98);
        sub_1000035EC(v54, v88);
        swift_release();

        sub_1000035EC(v87, v86);
        return;
      }
      uint64_t v82 = v81;
      sub_1000035EC(v75, v77);
      id v83 = v85;
      sub_1000FA20C(v82);

      swift_release();
      sub_1000035EC(v61, v98);
      sub_1000035EC(v54, v88);
      swift_release();

      sub_1000035EC(v87, v86);
LABEL_14:
      sub_100007290();

      return;
    }
    __break(1u);
LABEL_35:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  defaultLogger()();
  long long v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Global auth acl already migrated, nothing to do", v65, 2u);
    uint64_t v60 = v92;
    swift_slowDealloc();
  }

  sub_1000035EC(v61, v98);
  sub_1000035EC(v54, v88);
  swift_release();

  sub_1000035EC(v87, v59);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v60, v94);
}

uint64_t sub_1000C9E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000C9F50, 0, 0);
}

uint64_t sub_1000C9F50()
{
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 104) + 16);
  v0[8] = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000CA004;
  uint64_t v3 = v0[3];
  return sub_100047560(v3, v1);
}

uint64_t sub_1000CA004()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000CA4B8;
  }
  else {
    uint64_t v2 = sub_1000CA118;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CA118()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[3];
  uint64_t v6 = swift_allocObject();
  v0[11] = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  uint64_t v7 = swift_allocObject();
  v0[12] = v7;
  *(void *)(v7 + 16) = sub_1000D4814;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_retain();
  v9(v2, v8, v3);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[13] = v10;
  void *v10 = v0;
  v10[1] = sub_1000CA2A4;
  uint64_t v11 = v0[7];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 15, v11, sub_1000D4830, v7, &type metadata for Bool);
}

uint64_t sub_1000CA2A4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    swift_release();
    uint64_t v6 = sub_1000CA440;
  }
  else
  {
    uint64_t v7 = *(unsigned char **)(v2 + 16);
    swift_release();
    swift_release();
    *uint64_t v7 = *(unsigned char *)(v2 + 120);
    uint64_t v6 = sub_1000C1EE0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CA440()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CA4B8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CA524@<X0>(uint8_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v5 = (char *)sub_1000CA600();
  char v6 = sub_1000D1FFC((char *)0xD000000000000012, (void *)0x8000000100179950, a1, v5);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t v8 = (char *)sub_1000CA600();
    sub_1000D1FFC((char *)0xD00000000000001ELL, (void *)0x8000000100179970, a1, v8);
    swift_release();
    uint64_t result = (uint64_t)sub_100007290();
    *a2 = v6 & 1;
  }
  return result;
}

void *sub_1000CA600()
{
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v0 = SESKeystore.init()();
  type metadata accessor for SEPairingManager();
  swift_allocObject();
  uint64_t v1 = SEPairingManager.init()();
  uint64_t v2 = type metadata accessor for GenericPasswordKeychainWrapper();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = type metadata accessor for SyncableKeyStoreProvider();
  uint64_t v5 = (void *)swift_allocObject();
  v5[5] = v2;
  v5[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v5[2] = v3;
  v15[3] = v4;
  v15[4] = &off_1001B6F00;
  v15[0] = v5;
  type metadata accessor for CredentialKeyManager();
  char v6 = (void *)swift_allocObject();
  uint64_t v7 = sub_100036D00((uint64_t)v15, v4);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v15[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = *v9;
  swift_retain();
  uint64_t v12 = sub_1001631B4(v0, v1, v11, v6);
  sub_10000B9DC((uint64_t)v15);
  swift_release();
  return v12;
}

uint64_t sub_1000CA7B0(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000CA874, 0, 0);
}

uint64_t sub_1000CA874()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)swift_allocObject();
  v0[9] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  v0[10] = v5;
  *(void *)(v5 + 16) = sub_1000D3CA0;
  *(void *)(v5 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  uint64_t v7 = sub_100006CC8(&qword_1001C3268);
  *uint64_t v6 = v0;
  v6[1] = sub_1000CA9D0;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v5, v7);
}

uint64_t sub_1000CA9D0()
{
  uint64_t v2 = (void *)*v1;
  v2[12] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000CAB38, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000CAB38()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000CACC4(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000CAD88, 0, 0);
}

uint64_t sub_1000CAD88()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_allocObject();
  v0[11] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = swift_allocObject();
  v0[12] = v4;
  *(void *)(v4 + 16) = sub_1000D418C;
  *(void *)(v4 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  uint64_t v6 = sub_100006CC8(&qword_1001C32D8);
  void *v5 = v0;
  v5[1] = sub_1000CAED0;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044CA8, v4, v6);
}

uint64_t sub_1000CAED0()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000CB074;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000CAFF4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CAFF4()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v4(v2, v1, v3);
}

uint64_t sub_1000CB074()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000CB200(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v65 = a3;
  unint64_t v66 = a4;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v63 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v61 - v16;
  uint64_t v18 = v67;
  unint64_t v19 = (void *)sub_10016D500(a1, a2);
  if (!v18)
  {
    id v20 = v19;
    uint64_t v61 = v6;
    uint64_t v62 = 0;
    uint64_t v67 = v9;
    uint64_t v22 = v65;
    uint64_t v21 = v66;
    if (v19)
    {
      id v23 = v17;
      unsigned int v24 = [v19 version];
      if (v24 == 1)
      {
        defaultLogger()();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v34, v35))
        {
          unint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "v1 acl", v36, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v67);
        id v20 = v20;
        id v37 = [v20 encryptedACL];
        if (!v37)
        {

          *uint64_t v21 = 0;
          return;
        }
        unint64_t v38 = v37;
        uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

        unint64_t v42 = (unint64_t)[v20 aclType];
        if ((v42 & 0x8000000000000000) != 0)
        {
LABEL_25:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        unint64_t v43 = v42;

        sub_100014D14((void *)(v22 + 24), *(void *)(v22 + 48));
        sub_10000354C(v39, v41);
        uint64_t v44 = v62;
        uint64_t v45 = dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)();
        if (!v44)
        {
          uint64_t v47 = v45;
          unint64_t v48 = v46;
          id v49 = objc_allocWithZone((Class)DCCredentialAuthACL);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          id v51 = [v49 initWithData:isa type:v43];
          sub_1000035EC(v47, v48);

          sub_1000035EC(v39, v41);
          sub_1000035EC(v39, v41);
          *unint64_t v66 = v51;
          return;
        }
        sub_1000035EC(v39, v41);
        sub_1000035EC(v39, v41);
      }
      else
      {
        uint64_t v25 = v67;
        if ((unsigned __int16)v24 == 2)
        {
          id v26 = v23;
          defaultLogger()();
          unint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "v2 acl", v29, 2u);
            uint64_t v25 = v67;
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v64 + 8))(v26, v25);
          uint64_t v30 = v62;
          sub_1000D17E4(v20, *(char **)(v22 + 104));
          if (!v30)
          {
            uint64_t v52 = (void *)sub_100146334();
            uint64_t v53 = SecAccessControlRef.data.getter();
            unint64_t v55 = v54;

            unint64_t v56 = (unint64_t)[v20 aclType];
            if ((v56 & 0x8000000000000000) == 0)
            {
              unint64_t v57 = v56;
              id v58 = objc_allocWithZone((Class)DCCredentialAuthACL);
              Class v59 = Data._bridgeToObjectiveC()().super.isa;
              id v60 = [v58 initWithData:v59 type:v57];
              sub_1000035EC(v53, v55);
              swift_release();

              *uint64_t v21 = v60;
              return;
            }
            goto LABEL_25;
          }
        }
        else
        {
          (*(void (**)(char *, void, uint64_t))(v63 + 104))(v8, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v61);
          sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      defaultLogger()();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "no acl", v33, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v67);
      *uint64_t v21 = 0;
    }
  }
}

void sub_1000CBA54(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (void *)sub_10016D500(a1, a2);
  if (!v3)
  {
    if (v5)
    {
      id v6 = v5;
      id v7 = [v6 encryptedACL];
      if (v7)
      {
        uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v10 = v9;

        unint64_t v11 = (unint64_t)[v6 aclType];
        if ((v11 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        id v7 = (id)v11;

        goto LABEL_9;
      }

      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      id v7 = 0;
    }
    unint64_t v10 = 0xF000000000000000;
LABEL_9:
    *a3 = v8;
    a3[1] = v10;
    a3[2] = (uint64_t)v7;
  }
}

uint64_t sub_1000CBB74(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t CredentialUUIDsEventResult = type metadata accessor for IDCSAnalytics.FetchCredentialUUIDsEventResult();
  v3[14] = CredentialUUIDsEventResult;
  v3[15] = *(void *)(CredentialUUIDsEventResult - 8);
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000CBD00, 0, 0);
}

uint64_t sub_1000CBD00()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  v0[17] = *(void *)(v0[6] + 16);
  uint64_t v3 = swift_allocObject();
  v0[18] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = swift_allocObject();
  v0[19] = v4;
  *(void *)(v4 + 16) = sub_1000D0D2C;
  *(void *)(v4 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  uint64_t v6 = sub_100006CC8(&qword_1001C3250);
  void *v5 = v0;
  v5[1] = sub_1000CBE4C;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v4, v6);
}

uint64_t sub_1000CBE4C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000CC2B8;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 176) = *(void *)(v2 + 16);
    uint64_t v3 = sub_1000CBF78;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CBF78()
{
  uint64_t v1 = v0[22];
  if (v1)
  {
    if (*(void *)(v1 + 16))
    {
      uint64_t v2 = v0[6];
      uint64_t v3 = swift_allocObject();
      v0[23] = v3;
      *(void *)(v3 + 16) = sub_1000D13E4;
      *(void *)(v3 + 24) = v2;
      swift_retain_n();
      uint64_t v4 = (void *)swift_task_alloc();
      v0[24] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_1000CC468;
      return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 3, sub_100044E44, v3, &type metadata for Int);
    }
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "fetchCredentialUUIDsForAuthACL: No UUIDs to return", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = v0[13];
    uint64_t v16 = v0[10];
    uint64_t v17 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    unint64_t v11 = (unsigned int *)&enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.noUUIDsToReturn(_:);
  }
  else
  {
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "fetchCredentialUUIDsForAuthACL: No ACL to return", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[10];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    unint64_t v11 = (unsigned int *)&enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.noACLToReturn(_:);
  }
  uint64_t v19 = v0[15];
  uint64_t v18 = v0[16];
  uint64_t v20 = v0[14];
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, *v11, v20);
  static IDCSAnalytics.sendFetchCredentialUUIDsCalledEvent(result:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void *, void))v0[1];
  return v21(&_swiftEmptyArrayStorage, 0);
}

uint64_t sub_1000CC2B8()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000CC468()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000CC6A8;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 208) = *(void *)(v2 + 24);
    uint64_t v3 = sub_1000CC598;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CC598()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[14];
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.uuidsReturned(_:), v5);
  static IDCSAnalytics.sendFetchCredentialUUIDsCalledEvent(result:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v6(v2, v1);
}

uint64_t sub_1000CC6A8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_1000CC864(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v40 = a3;
  uint64_t v6 = sub_100006CC8(&qword_1001C2D58);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = (void *)sub_10016D500(a1, a2);
  if (v3) {
    return;
  }
  os_log_type_t v35 = v15;
  uint64_t v17 = v40;
  id v37 = v13;
  uint64_t v38 = v10;
  if (!v16)
  {
LABEL_16:
    *uint64_t v17 = 0;
    return;
  }
  id v18 = v16;
  uint64_t v19 = sub_1000FA874();

  if (!v19)
  {

    goto LABEL_16;
  }
  uint64_t v20 = v19[2];
  if (v20)
  {
    id v33 = v18;
    uint64_t v34 = 0;
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v38 + 32);
    swift_bridgeObjectRetain();
    os_log_type_t v32 = v19;
    uint64_t v22 = (char *)(v19 + 5);
    uint64_t v23 = &_swiftEmptyArrayStorage;
    unsigned int v24 = v37;
    uint64_t v25 = v35;
    unint64_t v36 = v21;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v21)(v8, 1, v9) == 1)
      {
        sub_100014BBC((uint64_t)v8, &qword_1001C2D58);
      }
      else
      {
        id v26 = *v39;
        (*v39)(v25, v8, v9);
        v26(v24, v25, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v23 = (void *)sub_1000D0FD0(0, v23[2] + 1, 1, (unint64_t)v23, &qword_1001C3258, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
        }
        unint64_t v28 = v23[2];
        unint64_t v27 = v23[3];
        uint64_t v29 = v38;
        if (v28 >= v27 >> 1)
        {
          uint64_t v31 = sub_1000D0FD0(v27 > 1, v28 + 1, 1, (unint64_t)v23, &qword_1001C3258, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
          uint64_t v29 = v38;
          uint64_t v23 = (void *)v31;
        }
        void v23[2] = v28 + 1;
        unint64_t v30 = (unint64_t)v23
            + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
            + *(void *)(v29 + 72) * v28;
        unsigned int v24 = v37;
        v26((char *)v30, v37, v9);
        uint64_t v21 = v36;
      }
      v22 += 16;
      --v20;
    }
    while (v20);

    swift_bridgeObjectRelease_n();
    *unint64_t v40 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();

    *uint64_t v17 = &_swiftEmptyArrayStorage;
  }
}

void sub_1000CCC2C(void *a1@<X8>)
{
  sub_1000D3A08();
  if (!v1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    *a1 = v4;
  }
}

uint64_t sub_1000CCC70(uint64_t a1, uint64_t a2)
{
  return sub_1000CCCB0(a1, a2, 24, 0xD000000000000016);
}

uint64_t sub_1000CCC90(uint64_t a1, uint64_t a2)
{
  return sub_1000CCCB0(a1, a2, 29, 0xD00000000000001BLL);
}

uint64_t sub_1000CCCB0(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4)
{
  type metadata accessor for SecAccessControl(0);
  uint64_t v6 = (void *)static SecAccessControlRef.fromData(_:)();
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease();
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = SecAccessControlRef.constraintsDescription.getter();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = (void *)0xE500000000000000;
    uint64_t v8 = 0x3E6C696E3CLL;
  }
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_1000CCDA0(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(unsigned char *)(v2 + 88) = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = *(void *)(v3 - 8);
  *(void *)(v2 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_1000CCE64, 0, 0);
}

uint64_t sub_1000CCE64()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 88);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 56) = v3;
  *(void *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 24) = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 64) = v4;
  *(void *)(v4 + 16) = &unk_1001C32F0;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  uint64_t v6 = sub_100006CC8(&qword_1001C3308);
  void *v5 = v0;
  v5[1] = sub_1000CCFB0;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 16, &unk_1001C3300, v4, v6);
}

uint64_t sub_1000CCFB0()
{
  char v2 = (void *)*v1;
  v2[10] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000CD118, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000CD118()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_1000CD2A4()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  Swift::String v1 = Data.base16EncodedString()();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 0x617473657474410ALL;
  v2._object = (void *)0xEF203A206E6F6974;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  Swift::String v3 = Data.base16EncodedString()();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0x4B63696C6275700ALL;
  v4._object = (void *)0xEF203A2020207965;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  Swift::String v5 = Data.base16EncodedString()();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0x6220656C6F68770ALL;
  v6._object = (void *)0xEF203A2020626F6CLL;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001ELL;
}

unint64_t sub_1000CD514()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x617473657474410ALL;
  v1._object = (void *)0xEF203A206E6F6974;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  Swift::String v2 = Data.base16EncodedString()();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0x4B63696C6275700ALL;
  v3._object = (void *)0xEF203A2020207965;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  Swift::String v4 = Data.base16EncodedString()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 0x6220656C6F68770ALL;
  v5._object = (void *)0xEF203A2020626F6CLL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t sub_1000CD720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000CD844, 0, 0);
}

uint64_t sub_1000CD844()
{
  unint64_t v28 = v0;
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  defaultLogger()();
  sub_10000354C(v1, v2);
  swift_bridgeObjectRetain();
  sub_10000354C(v1, v2);
  swift_bridgeObjectRetain();
  Swift::String v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v24 = v0[13];
    uint64_t v25 = v0[12];
    uint64_t v26 = v0[14];
    unint64_t v5 = v0[5];
    unint64_t v22 = v0[7];
    uint64_t v23 = v0[6];
    uint64_t v6 = v0[4];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    Swift::String v8 = Data.base64EncodedString(options:)(0);
    v0[2] = sub_10004C3A4(v8._countAndFlagsBits, (unint64_t)v8._object, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    sub_1000035EC(v6, v5);
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_10004C3A4(v23, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to persist protected public key: %s for pairingID: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  }
  else
  {
    uint64_t v10 = v0[13];
    uint64_t v9 = v0[14];
    uint64_t v11 = v0[12];
    uint64_t v13 = v0[4];
    unint64_t v12 = v0[5];
    sub_1000035EC(v13, v12);
    sub_1000035EC(v13, v12);
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  uint64_t v14 = v0[7];
  unint64_t v15 = v0[5];
  uint64_t v16 = v0[6];
  uint64_t v17 = v0[4];
  id v18 = (void *)swift_allocObject();
  v0[15] = v18;
  v18[2] = v16;
  v18[3] = v14;
  v18[4] = v17;
  v18[5] = v15;
  sub_10000354C(v17, v15);
  uint64_t v19 = swift_allocObject();
  v0[16] = v19;
  *(void *)(v19 + 16) = sub_1000D4500;
  *(void *)(v19 + 24) = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[17] = v20;
  void *v20 = v0;
  v20[1] = sub_1000CDBD4;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_1000CDBD4()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_1000CDD68;
  }
  else
  {
    swift_release();
    swift_release();
    unint64_t v2 = sub_1000CDCF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CDCF8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CDD68()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000CDF08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100052DD4(a2, a3);
  if (!v5)
  {
    uint64_t v27 = v11;
    uint64_t v28 = v12;
    type metadata accessor for StoredTrustKey();
    id v15 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(a1 + 16)];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v15 setProtectedPublicKey:isa];

    NSString v17 = String._bridgeToObjectiveC()();
    [v15 setPairingID:v17];

    sub_100007290();
    defaultLogger()();
    sub_10000354C(a4, a5);
    sub_10000354C(a4, a5);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      os_log_t v25 = v18;
      id v26 = v15;
      uint64_t v21 = (uint8_t *)v20;
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v24 = v21 + 4;
      Swift::String v22 = Data.base64EncodedString(options:)(0);
      uint64_t v29 = sub_10004C3A4(v22._countAndFlagsBits, (unint64_t)v22._object, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000035EC(a4, a5);
      sub_1000035EC(a4, a5);
      os_log_t v23 = v25;
      _os_log_impl((void *)&_mh_execute_header, v25, v19, "Successfully persisted protected public key: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000035EC(a4, a5);
      sub_1000035EC(a4, a5);
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v27);
  }
}

uint64_t sub_1000CE214(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[11] = v5;
  v3[12] = *(void *)(v5 - 8);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000CE334, 0, 0);
}

uint64_t sub_1000CE334()
{
  uint64_t v20 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[13];
    unint64_t v3 = v0[6];
    uint64_t v4 = v0[5];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[4] = sub_10004C3A4(v4, v3, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Trying to retrieve persisted protected public key for pairingID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v6 = v0[13];
    uint64_t v8 = v0[11];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[5];
  uint64_t v11 = swift_allocObject();
  v0[14] = v11;
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  v0[15] = v12;
  *(void *)(v12 + 16) = sub_1000D44A4;
  *(void *)(v12 + 24) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[16] = v13;
  uint64_t v14 = sub_100006CC8(&qword_1001C3018);
  void *v13 = v0;
  v13[1] = sub_1000CE610;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044CA8, v12, v14);
}

uint64_t sub_1000CE610()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000CE7B8;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000CE734;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CE734()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_1000CE7B8()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000CE958(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (void *)sub_1000527E0(a1, a2);
  if (!v3)
  {
    uint64_t v6 = v5;
    if (v5)
    {
      id v7 = [v5 protectedPublicKey];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v11 = v10;

LABEL_7:
        *a3 = v9;
        a3[1] = v11;
        return;
      }
    }
    uint64_t v9 = 0;
    unint64_t v11 = 0xF000000000000000;
    goto LABEL_7;
  }
}

uint64_t sub_1000CE9F4()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000CEAB4, 0, 0);
}

uint64_t sub_1000CEAB4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_allocObject();
  v0[7] = v2;
  *(void *)(v2 + 16) = sub_1000D4450;
  *(void *)(v2 + 24) = v1;
  swift_retain_n();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  uint64_t v4 = sub_100006CC8(&qword_1001C3308);
  *uint64_t v3 = v0;
  v3[1] = sub_1000CEBD4;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v2, v4);
}

uint64_t sub_1000CEBD4()
{
  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000CED3C, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000CED3C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000CEEC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 25) = a4;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a3;
  *(void *)(v4 + 32) = a1;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = *(void *)(v5 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_1000CEF90, 0, 0);
}

uint64_t sub_1000CEF90()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  char v4 = *(unsigned char *)(v0 + 25);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 80) = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v3;
  *(unsigned char *)(v6 + 32) = v4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 88) = v7;
  *(void *)(v7 + 16) = sub_1000D4368;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_retain();
  v9(v13, v8, v2);
  swift_retain();
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v10;
  void *v10 = v0;
  v10[1] = sub_1000CF120;
  uint64_t v11 = *(void *)(v0 + 72);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, v11, sub_1000B8E78, v7, &type metadata for BiometricStorage.DBResult);
}

uint64_t sub_1000CF120()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v6 = sub_1000CF3AC;
  }
  else
  {
    swift_release();
    *(void *)(v2 + 112) = *(void *)(v2 + 16);
    *(unsigned char *)(v2 + 26) = *(unsigned char *)(v2 + 24);
    uint64_t v6 = sub_1000CF2C0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CF2C0()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if (v1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(unsigned char *)(v0 + 26) == 0;
  }
  if (v2)
  {
    **(void **)(v0 + 32) = v1;
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v5;
    void *v5 = v0;
    v5[1] = sub_1000CF418;
    uint64_t v6 = *(void *)(v0 + 40);
    return sub_1000CFA70(v6);
  }
}

uint64_t sub_1000CF3AC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CF418(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    return _swift_task_switch(sub_1000CF56C, 0, 0);
  }
}

uint64_t sub_1000CF56C()
{
  **(void **)(v0 + 32) = *(void *)(v0 + 128);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000CF5DC(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v39 = a2;
  uint64_t v41 = a1;
  uint64_t v40 = a3;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - v13;
  id v15 = sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (!v3)
  {
    uint64_t v16 = v15;
    uint64_t v17 = v41;
    uint64_t v37 = v9;
    uint64_t v38 = 0;
    uint64_t v35 = v4;
    uint64_t v36 = v8;
    if (v15)
    {
      uint64_t v18 = v7;
      if ([v15 version] != 2)
      {
        uint64_t v27 = v40;
        if (v39)
        {

          id v26 = 0;
          char v28 = 1;
        }
        else
        {
          defaultLogger()();
          uint64_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v31 = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "acl does not contain progenitor key, returning nil", v31, 2u);
            swift_slowDealloc();
            os_log_type_t v32 = v16;
          }
          else
          {
            os_log_type_t v32 = v29;
            uint64_t v29 = v16;
          }
          uint64_t v34 = v36;
          uint64_t v33 = v37;

          (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
          id v26 = 0;
          char v28 = 0;
        }
        goto LABEL_17;
      }
      uint64_t v19 = *(char **)(v17 + 104);
      uint64_t v20 = v16;
      uint64_t v21 = v38;
      Swift::String v22 = sub_1000D17E4(v16, v19);
      if (v21)
      {

        (*(void (**)(char *, void, uint64_t))(v5 + 104))(v18, enum case for DIPError.Code.internalError(_:), v35);
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();

        return;
      }
      id v26 = v22;
      uint64_t v38 = 0;
    }
    else
    {
      defaultLogger()();
      os_log_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "no global acl, returning nil attestation", v25, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v36);
      id v26 = 0;
    }
    char v28 = 0;
    uint64_t v27 = v40;
LABEL_17:
    *(void *)uint64_t v27 = v26;
    *(unsigned char *)(v27 + 8) = v28;
  }
}

uint64_t sub_1000CFA70(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000CFB8C, 0, 0);
}

uint64_t sub_1000CFB8C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Migrating progenitor key ACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[5];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v11 = swift_allocObject();
  v0[13] = v11;
  *(void *)(v11 + 16) = sub_1000D4388;
  *(void *)(v11 + 24) = v10;
  uint64_t v12 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  swift_retain();
  v13(v7, v12, v8);
  swift_retain();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  uint64_t v15 = sub_100006CC8(&qword_1001C3318);
  *uint64_t v14 = v0;
  v14[1] = sub_1000CFD84;
  uint64_t v16 = v0[9];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v16, sub_10004A390, v11, v15);
}

uint64_t sub_1000CFD84()
{
  os_log_type_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  v2[15] = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3 + 8))(v2[9], v2[7]);
  swift_release();
  if (v0)
  {
    uint64_t v4 = sub_1000D0084;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_1000CFF38;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CFF38()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  v0[16] = v2;
  v0[17] = v3;
  uint64_t v4 = v0[4];
  uint64_t v5 = sub_1000C590C(v2, v3, v4);
  v0[18] = v5;
  v0[19] = v6;
  if (v1)
  {
    sub_1000035EC(v2, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[20] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000D00FC;
    uint64_t v12 = v0[5];
    return sub_1000C282C(v9, v10, v4, v12, 1);
  }
}

uint64_t sub_1000D0084()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D00FC(uint64_t a1, unint64_t a2)
{
  *(void *)(*(void *)v3 + 168) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_1000D03B4;
  }
  else
  {
    sub_100009764(a1, a2);
    uint64_t v6 = sub_1000D022C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D022C()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (v1)
  {
    uint64_t v3 = v0[16];
    unint64_t v4 = v0[17];
    sub_1000035EC(v0[18], v0[19]);
    sub_1000035EC(v3, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_1000D17E4(v2, *(char **)(v0[6] + 104));
    uint64_t v8 = v0[18];
    unint64_t v7 = v0[19];
    uint64_t v10 = v0[16];
    unint64_t v9 = v0[17];
    uint64_t v13 = v6;

    sub_1000035EC(v8, v7);
    sub_1000035EC(v10, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(char *))v0[1];
    return v14(v13);
  }
}

uint64_t sub_1000D03B4()
{
  uint64_t v1 = v0[16];
  unint64_t v2 = v0[17];
  sub_1000035EC(v0[18], v0[19]);
  sub_1000035EC(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1000D043C(uint64_t a1@<X1>, char **a2@<X8>)
{
  uint64_t v5 = (void *)sub_10016D500(0xD00000000000001ELL, (void *)0x8000000100179970);
  if (!v2)
  {
    uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = *(char **)(a1 + 104);
      id v8 = v5;
      unint64_t v9 = sub_1000D17E4(v6, v7);

      *a2 = v9;
    }
    else
    {
      *a2 = 0;
    }
  }
}

void sub_1000D04E4(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (!v1)
  {
    id v8 = v7;
    if (!v7)
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    if ([v7 version] == 1)
    {
      id v9 = [v8 encryptedACL];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v13 = v12;

        unint64_t v14 = (unint64_t)[v8 aclType];
        if ((v14 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        else
        {
          unint64_t v15 = v14;
          type metadata accessor for AppleIDVManager();
          sub_10015A018(v30);
          sub_100014D14(v30, v30[3]);
          uint64_t v19 = dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)();
          unint64_t v21 = v20;
          id v29 = objc_allocWithZone((Class)DCCredentialAuthACL);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          id v23 = [v29 initWithData:isa type:v15];
          sub_1000035EC(v19, v21);

          sub_10000B9DC((uint64_t)v30);
          sub_1000035EC(v11, v13);
          id v24 = [v23 aclData];
          uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          *a1 = v25;
          a1[1] = v27;
          id v28 = [v23 aclType];

          a1[2] = (uint64_t)v28;
        }
        return;
      }
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    else
    {
      v30[0] = 0;
      v30[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      v16._countAndFlagsBits = 0xD000000000000025;
      v16._object = (void *)0x800000010017FEA0;
      String.append(_:)(v16);
      unsigned int v17 = [v8 version];
      if (v17 == 2) {
        char v18 = 1;
      }
      else {
        char v18 = 2;
      }
      if (v17 == 1) {
        char v18 = 0;
      }
      char v31 = v18;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t sub_1000D0B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *unint64_t v12 = v6;
  v12[1] = sub_100016FE0;
  return sub_100047EA0(a2, a4, a5, a6, a3);
}

uint64_t sub_1000D0BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100007458;
  return sub_100047560(a2, a3);
}

uint64_t sub_1000D0C70()
{
  swift_release();
  sub_10000B9DC(v0 + 24);
  sub_10000B9DC(v0 + 64);
  swift_release();
  swift_release();
  sub_10000B9DC(v0 + 120);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BiometricStorage()
{
  return self;
}

uint64_t sub_1000D0CF4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D0D2C(void *a1@<X8>)
{
  sub_1000CC864(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

char *sub_1000D0D48(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006CC8(&qword_1001C12D8);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000D15FC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000D0E58(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006CC8(&qword_1001C3400);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000D16F0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D0F68(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000D0FD0(a1, a2, a3, a4, &qword_1001C32C8, type metadata accessor for ElementFallback, type metadata accessor for ElementFallback);
}

uint64_t sub_1000D0F9C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000D0FD0(a1, a2, a3, a4, &qword_1001C1C78, type metadata accessor for CredentialElement, type metadata accessor for CredentialElement);
}

uint64_t sub_1000D0FD0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    char v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006CC8(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  char v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000D38AC(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_1000D1250(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000D0FD0(a1, a2, a3, a4, &qword_1001C32C0, (uint64_t (*)(void))type metadata accessor for PresentmentProposal, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
}

uint64_t sub_1000D1284(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000D0FD0(a1, a2, a3, a4, &qword_1001C3320, (uint64_t (*)(void))&type metadata accessor for AnyCodable, (uint64_t (*)(void))&type metadata accessor for AnyCodable);
}

void *sub_1000D12B8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006CC8(&qword_1001C3270);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000D3CC0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1000D13E4(void *a1@<X8>)
{
}

uint64_t sub_1000D1400(uint64_t a1, uint64_t *a2, int *a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *a2;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  void *v5 = v3;
  v5[1] = sub_1000D14EC;
  return v7(v3 + 32, v4);
}

uint64_t sub_1000D14EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    **(unsigned char **)(v2 + 16) = *(unsigned char *)(v2 + 32);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t sub_1000D15FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D16F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000D17E4(void *a1, char *a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_9;
  }
  id v9 = [a1 progenitorKey];
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = v9;
  id v11 = [v9 identifier];
  if (!v11)
  {

LABEL_9:
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.idcsMissingProgenitorKeyInAuthACL(_:), v5);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return v8;
  }
  uint64_t v12 = v11;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  id v15 = [v10 keyBlob];
  if (!v15)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v16 = v15;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  id v20 = [v10 publicKeyIdentifier];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v24 = 0xF000000000000000;
  }
  uint64_t v8 = a2;
  uint64_t v26 = sub_1001432CC(v28, v14, v17, v19, v22, v24);
  if (!v2) {
    uint64_t v8 = (char *)v26;
  }
  sub_100009764(v22, v24);
  sub_1000035EC(v17, v19);

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000D1B0C(void *a1, char *a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v29 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v29 - v16;
  if ([a1 version] == 2)
  {
    unint64_t v18 = sub_1000D17E4(a1, a2);
    if (v2)
    {
      id v29 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v32 = 0xD000000000000024;
      unint64_t v33 = 0x800000010017FBE0;
      swift_getErrorValue();
      v21._countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.idcsProgenitorKeyDeletionError(_:), v5);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
      return swift_errorRelease();
    }
    else
    {
      id v29 = v18;
      uint64_t v20 = *(void *)&v18[OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob];
      unint64_t v19 = *(void *)&v18[OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8];
      sub_10000354C(v20, v19);
      sub_100143E6C(v20, v19);
      sub_1000035EC(v20, v19);
      defaultLogger()();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "deleted progenitor key", v28, 2u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    }
  }
  else
  {
    defaultLogger()();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "no progenitor key to delete", v25, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v15, v31);
  }
}

uint64_t sub_1000D1FFC(char *a1, void *a2, uint8_t *a3, char *a4)
{
  id v60 = a3;
  unint64_t v54 = a4;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  id v58 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  id v51 = (char *)&v48 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v50 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v48 - v17;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v55 = v12;
  if (v21)
  {
    uint64_t v52 = v8;
    uint64_t v53 = v9;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_10004C3A4((uint64_t)a1, (unint64_t)a2, &v62);
    uint64_t v23 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "BiometricStorage deleteAuthACL with identifier %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = v23;
    os_log_type_t v24 = *(void (**)(char *))(v23 + 8);
    uint64_t v8 = v52;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    os_log_type_t v24 = *(void (**)(char *))(v9 + 8);
  }
  v24(v18);
  uint64_t v25 = v59;
  uint64_t v26 = (void *)sub_10016D500((uint64_t)a1, a2);
  if (v25)
  {
    char v27 = v25;
    (*(void (**)(char *, void, uint64_t))(v56 + 104))(v58, enum case for DIPError.Code.internalError(_:), v57);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v27 & 1;
  }
  id v29 = v26;
  if (!v26)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v52 = v8;
      uint64_t v53 = v9;
      *(_DWORD *)unint64_t v32 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_10004C3A4((uint64_t)a1, (unint64_t)a2, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No acl found with identifier %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v33 = v52;
      uint64_t v34 = v55;
LABEL_13:
      ((void (*)(char *, uint64_t))v24)(v34, v33);
      char v27 = 0;
      return v27 & 1;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v34 = v55;
LABEL_12:
    uint64_t v33 = v8;
    goto LABEL_13;
  }
  sub_1000D1B0C(v26, v54);
  char v35 = sub_10016DAF8(a1, (uint64_t)a2);
  id v49 = a1;
  if ((v35 & 1) == 0)
  {
    unint64_t v42 = v51;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v53 = v9;
      unint64_t v46 = (uint8_t *)v45;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v52 = v8;
      uint64_t v62 = v47;
      *(_DWORD *)unint64_t v46 = 136315138;
      id v60 = v46 + 4;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_10004C3A4((uint64_t)v49, (unint64_t)a2, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "No auth acl exists with identifier %s so nothing to delete", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v33 = v52;
      uint64_t v34 = v51;
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v34 = v42;
    goto LABEL_12;
  }
  uint64_t v36 = v50;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc();
    uint64_t v53 = v9;
    uint64_t v40 = (uint8_t *)v39;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v52 = v8;
    uint64_t v62 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    id v60 = v40 + 4;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_10004C3A4((uint64_t)v49, (unint64_t)a2, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Auth ACL %s was deleted", v40, 0xCu);
    char v27 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v24)(v50, v52);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v24)(v36, v8);
    char v27 = 1;
  }
  return v27 & 1;
}

void sub_1000D28C4(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  id v117 = a1;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v121 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v124 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v125 = *(void *)(v13 - 8);
  uint64_t v126 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v116 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v115 = (char *)&v105 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v111 = (char *)&v105 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v119 = (char *)&v105 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v105 - v22;
  defaultLogger()();
  sub_10000354C(a3, a4);
  id v24 = a2;
  sub_10000354C(a3, a4);
  id v25 = v24;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v28 = v27;
  BOOL v29 = os_log_type_enabled(v26, v27);
  uint64_t v113 = a5;
  uint64_t v114 = a6;
  uint64_t v112 = (uint64_t)v25;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v120 = v11;
    uint64_t v31 = v30;
    v118 = (void (*)(void, void))swift_slowAlloc();
    uint64_t v128 = v118;
    *(_DWORD *)uint64_t v31 = 136315394;
    LODWORD(v110) = v28;
    Swift::String v32 = Data.base16EncodedString()();
    uint64_t v127 = sub_10004C3A4(v32._countAndFlagsBits, (unint64_t)v32._object, (uint64_t *)&v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(a3, a4);
    sub_1000035EC(a3, a4);
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v33 = SecAccessControlRef.constraintsDescription.getter();
    uint64_t v127 = sub_10004C3A4(v33, v34, (uint64_t *)&v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v110, "New acl is %s = %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v120;
    swift_slowDealloc();
  }
  else
  {
    sub_1000035EC(a3, a4);
    sub_1000035EC(a3, a4);
  }
  v118 = *(void (**)(void, void))(v125 + 8);
  v118(v23, v126);
  unint64_t v35 = v122;
  uint64_t v36 = a3;
  uint64_t v37 = (void *)(v123 + 24);
  sub_100014D14((void *)(v123 + 24), *(void *)(v123 + 48));
  uint64_t v38 = dispatch thunk of AppleIDVManaging.getUUIDsFromACL(_:)();
  uint64_t v39 = (char *)v35;
  if (v35)
  {
    uint64_t v40 = v121;
LABEL_6:
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v124, enum case for DIPError.Code.internalError(_:), v11);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return;
  }
  uint64_t v41 = v38;
  v109 = v37;
  uint64_t v110 = v36;
  unint64_t v122 = a4;
  uint64_t v120 = v11;
  unint64_t v42 = v119;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    uint64_t v128 = (void (*)(void, void))v108;
    *(_DWORD *)uint64_t v45 = 136315138;
    id v107 = v45 + 4;
    swift_bridgeObjectRetain();
    uint64_t v46 = Array.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v127 = sub_10004C3A4(v46, v48, (uint64_t *)&v128);
    uint64_t v39 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "New ACL uuids are %s", v45, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v49 = v119;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    id v49 = v42;
  }
  v118(v49, v126);
  uint64_t v11 = v120;
  id v50 = v117;
  if (v41)
  {
    sub_1000FA228(v41);
    swift_bridgeObjectRelease();
  }
  id v51 = [v50 progenitorKey];
  if (!v51)
  {
LABEL_21:
    uint64_t v40 = v121;
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v124, enum case for DIPError.Code.idcsMissingProgenitorKeyInAuthACL(_:), v11);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_6;
  }
  uint64_t v52 = v51;
  unint64_t v119 = v39;
  id v53 = [v51 identifier];
  if (!v53)
  {

    goto LABEL_21;
  }
  unint64_t v54 = v53;
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v57 = v56;

  id v58 = [v52 keyBlob];
  if (!v58)
  {

    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v59 = v58;
  uint64_t v105 = v55;
  uint64_t v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v108 = v60;

  id v61 = [v50 encryptedACL];
  id v107 = v52;
  if (v61)
  {
    uint64_t v62 = v61;
    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v65 = v64;

    switch(v65 >> 62)
    {
      case 1uLL:
        sub_1000035EC(v63, v65);
        uint64_t v66 = (int)v63;
        uint64_t v67 = v63 >> 32;
        goto LABEL_24;
      case 2uLL:
        uint64_t v66 = *(void *)(v63 + 16);
        uint64_t v67 = *(void *)(v63 + 24);
        sub_1000035EC(v63, v65);
LABEL_24:
        if (v66 != v67) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 3uLL:
        sub_1000035EC(v63, v65);
        goto LABEL_29;
      default:
        sub_1000035EC(v63, v65);
        if ((v65 & 0xFF000000000000) == 0) {
          goto LABEL_29;
        }
LABEL_25:
        id v68 = [v117 encryptedACL];
        if (!v68)
        {
          swift_bridgeObjectRelease();
          uint64_t v40 = v121;
          (*(void (**)(char *, void, uint64_t))(v121 + 104))(v124, enum case for DIPError.Code.invalidStoredData(_:), v11);
          sub_100102620((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1000D400C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_1000035EC(v106, v108);

          goto LABEL_6;
        }
        uint64_t v69 = v68;
        uint64_t v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v72 = v71;

        sub_100014D14(v109, *(void *)(v123 + 48));
        id v73 = v119;
        uint64_t v74 = dispatch thunk of AppleIDVManaging.persistModifiedACLBlob(_:referenceACLBlob:externalizedLAContext:)();
        unint64_t v119 = v73;
        if (v73)
        {
          sub_1000035EC(v70, v72);
          sub_1000035EC(v106, v108);

          swift_bridgeObjectRelease();
          uint64_t v40 = v121;
          goto LABEL_6;
        }
        uint64_t v99 = v74;
        unint64_t v100 = v75;
        unint64_t v122 = v72;
        sub_10000354C(v74, v75);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000035EC(v99, v100);
        [v117 setEncryptedACL:isa];

        unint64_t v76 = v111;
        defaultLogger()();
        int v102 = Logger.logObject.getter();
        os_log_type_t v103 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v102, v103))
        {
          v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v104 = 0;
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "set new sidv encrypedACL", v104, 2u);
          swift_slowDealloc();
          sub_1000035EC(v70, v122);

          sub_1000035EC(v99, v100);
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1000035EC(v99, v100);
          swift_bridgeObjectRelease();
          sub_1000035EC(v70, v122);
        }
        uint64_t v81 = v126;
        uint64_t v80 = v116;
        break;
    }
  }
  else
  {
LABEL_29:
    unint64_t v76 = v115;
    defaultLogger()();
    unint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "skip manipulating legacy sidv encryptedACL because there isn't one", v79, 2u);
      swift_slowDealloc();
    }

    uint64_t v80 = v116;
    uint64_t v81 = v126;
  }
  uint64_t v82 = v76;
  id v83 = (void (*)(char *, uint64_t))v118;
  v118(v82, v81);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v84 = Logger.logObject.getter();
  uint64_t v85 = v81;
  os_log_type_t v86 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v84, v86))
  {
    uint64_t v87 = (uint8_t *)swift_slowAlloc();
    uint64_t v128 = (void (*)(void, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v87 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v127 = sub_10004C3A4(v105, v57, (uint64_t *)&v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v84, v86, "Updating acl for progenitor key %s", v87, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v88 = v116;
    uint64_t v89 = v126;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    unint64_t v88 = v80;
    uint64_t v89 = v85;
  }
  v83(v88, v89);
  id v90 = [v107 publicKeyIdentifier];
  uint64_t v11 = v120;
  uint64_t v91 = v106;
  if (v90)
  {
    unint64_t v92 = v90;
    uint64_t v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v95 = v94;
  }
  else
  {
    uint64_t v93 = 0;
    unint64_t v95 = 0xF000000000000000;
  }
  id v96 = v119;
  uint64_t v126 = sub_1001432CC(v105, v57, v91, v108, v93, v95);
  if (v96)
  {
    sub_100009764(v93, v95);
    sub_1000035EC(v91, v108);

    swift_bridgeObjectRelease();
    uint64_t v40 = v121;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  sub_100009764(v93, v95);
  uint64_t v97 = sub_10014392C(v126, v112, v113, v114);
  id v98 = v107;
  sub_1000FA20C(v97);
  swift_release();
  swift_release();
  sub_1000035EC(v106, v108);
}

uint64_t sub_1000D38AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000D3A08()
{
  unint64_t v1 = sub_100163D84();
  if (!v0)
  {
    unint64_t v2 = v1;
    if (v1 >> 62) {
      goto LABEL_22;
    }
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v23 = v2 & 0xC000000000000001;
      uint64_t v21 = v3;
      uint64_t v22 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v4 = 4;
      unint64_t v20 = v2;
      while (1)
      {
        id v5 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v2 + 8 * v4);
        uint64_t v6 = v5;
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        uint64_t v8 = (void *)sub_1000F80FC();
        id v9 = [v6 credentialIdentifier];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v13 = v12;

          id v14 = [v8 options];
          id v15 = [v14 presentmentAuthPolicy];

          if (v15 == (id)2)
          {
            uint64_t v16 = v22;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v16 = sub_1000D0D48(0, *((void *)v22 + 2) + 1, 1, v22);
            }
            unint64_t v18 = *((void *)v16 + 2);
            unint64_t v17 = *((void *)v16 + 3);
            uint64_t v22 = v16;
            if (v18 >= v17 >> 1) {
              uint64_t v22 = sub_1000D0D48((char *)(v17 > 1), v18 + 1, 1, v16);
            }
            *((void *)v22 + 2) = v18 + 1;
            uint64_t v19 = &v22[16 * v18];
            *((void *)v19 + 4) = v11;
            *((void *)v19 + 5) = v13;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          unint64_t v2 = v20;
          uint64_t v3 = v21;
        }
        else
        {
        }
        ++v4;
        if (v7 == v3) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_22:
      swift_bridgeObjectRetain();
    }
LABEL_23:
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1000D3C60()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000D3CA0(void *a1@<X8>)
{
  sub_1000CB200(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1000D3CC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D3DB4()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 16), v1);
  }

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_1000D3DFC(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  uint64_t v3 = a1[4];
  unint64_t v4 = a1[5];
  unint64_t v5 = (void *)a1[6];
  sub_1000035EC(a1[1], a1[2]);

  sub_1000035EC(v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D3E60()
{
  return sub_1000D47C8(32);
}

uint64_t sub_1000D3E68()
{
  return sub_1000C5244(*(void *)(v0 + 16), *(uint8_t **)(v0 + 24));
}

uint64_t sub_1000D3E84()
{
  swift_release();
  swift_release();
  swift_release();
  sub_1000035EC(*(void *)(v0 + 56), *(void *)(v0 + 64));

  sub_1000035EC(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 136, 7);
}

void sub_1000D3F04()
{
  sub_1000C52C0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(objc_class **)(v0 + 32), *(unsigned __int8 *)(v0 + 40), v0 + 48, *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128));
}

void *sub_1000D3F34(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  uint64_t v3 = a1[4];
  unint64_t v4 = a1[5];
  unint64_t v5 = (void *)a1[6];
  sub_10000354C(a1[1], a1[2]);
  id v6 = v2;
  sub_10000354C(v3, v4);
  swift_bridgeObjectRetain();
  id v7 = v5;
  return a1;
}

uint64_t sub_1000D3F98()
{
  return sub_1000C61D0();
}

uint64_t sub_1000D3FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C3290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D400C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D4054()
{
  swift_release();
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 24), v1);
  }

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000D40A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_100016FE0;
  return sub_1000D0B10(a1, a2, v6, v7, v8, v9);
}

void sub_1000D4170(uint64_t a1)
{
  sub_1000C91E4(a1, v1);
}

void sub_1000D418C(uint64_t *a1@<X8>)
{
  sub_1000CBA54(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000D41A8()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000D41E0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  char v7 = *(unsigned char *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100016FE0;
  return sub_1000CEEC8(a1, a2, v6, v7);
}

uint64_t sub_1000D4298(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  char v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *char v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C32F8 + dword_1001C32F8);
  return v8(a1, a2, v6);
}

uint64_t sub_1000D4360()
{
  return sub_1000D47C8(33);
}

void sub_1000D4368(uint64_t a1@<X8>)
{
  sub_1000CF5DC(*(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

void sub_1000D4388(uint64_t *a1@<X8>)
{
}

uint64_t sub_1000D43A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100016FE0;
  return sub_1000D0BD4(a1, a2, v2);
}

void sub_1000D4450(char **a1@<X8>)
{
  sub_1000D043C(v1, a1);
}

uint64_t sub_1000D446C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D44A4(uint64_t *a1@<X8>)
{
  sub_1000CE958(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000D44C0()
{
  swift_bridgeObjectRelease();
  sub_1000035EC(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000D4500(uint64_t a1)
{
  sub_1000CDF08(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D4520()
{
  swift_release();
  sub_1000035EC(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D4560(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_100007458;
  return sub_1000C25DC(a1, a2, v6, v7, v9, v8);
}

unint64_t sub_1000D4628()
{
  return sub_1000CD514();
}

unint64_t sub_1000D4638()
{
  return sub_1000CD2A4();
}

uint64_t sub_1000D464C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100016FE0;
  return sub_1000C9E8C(a1, a2, v2);
}

uint64_t sub_1000D46F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C33D0 + dword_1001C33D0);
  return v8(a1, a2, v6);
}

uint64_t sub_1000D47C0()
{
  return sub_1000D47C8(32);
}

uint64_t sub_1000D47C8(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000D4814@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000CA524(*(uint8_t **)(v1 + 24), a1);
}

void *sub_1000D4830@<X0>(unsigned char *a1@<X8>)
{
  return sub_100088F48(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000D484C()
{
  swift_release();
  sub_1000035EC(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_1000035EC(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D4894(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100016FE0;
  return sub_1000C6298(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_1000D496C()
{
  swift_release();
  swift_release();
  sub_1000035EC(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_1000035EC(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_1000035EC(*(void *)(v0 + 72), *(void *)(v0 + 80));

  sub_1000035EC(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 128, 7);
}

void sub_1000D49E4()
{
  sub_1000C71A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56), v0 + 64);
}

uint64_t initializeBufferWithCopyOfBuffer for BiometricStorage.DBResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for BiometricStorage.DBResult()
{
  return swift_release();
}

uint64_t assignWithCopy for BiometricStorage.DBResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for BiometricStorage.DBResult(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for BiometricStorage.DBResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BiometricStorage.DBResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BiometricStorage.DBResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BiometricStorage.DBResult()
{
  return &type metadata for BiometricStorage.DBResult;
}

uint64_t *sub_1000D4BB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000354C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for EncryptedAuthACL(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000354C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000035EC(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for EncryptedAuthACL(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000035EC(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EncryptedAuthACL(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for EncryptedAuthACL(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedAuthACL()
{
  return &type metadata for EncryptedAuthACL;
}

void *sub_1000D4DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v10 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v11((char *)&v30 - v8, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v4);
  uint64_t v12 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v14 = v13;
  id v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v9, v4);
  if (*(void *)(a1 + 16))
  {
    unint64_t v16 = sub_10013C484(v12, v14);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v19 = v31;
      v11(v31, v10, v4);
      uint64_t v20 = ISO18013KnownNamespaces.rawValue.getter();
      uint64_t v22 = v21;
      v15(v19, v4);
      uint64_t v23 = v32;
      if (*(void *)(v32 + 16))
      {
        unint64_t v24 = sub_10013C484(v20, v22);
        if (v25)
        {
          uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v30 == 1)
          {
            os_log_type_t v27 = sub_1000D7F9C(v18, v26);
            goto LABEL_13;
          }
          if (v30 == 2)
          {
            os_log_type_t v27 = sub_1000D5214(v18, v26);
LABEL_13:
            uint64_t v29 = (uint64_t)v27;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000DAD90(v29);
            return v33;
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_1000D5014(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v2 << 6))
  {
    uint64_t v10 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    swift_bridgeObjectRetain();
    if (static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)())
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_100068310(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        uint64_t result = sub_100068310(v16 > 1, v17 + 1, 1);
        unint64_t v18 = v17 + 1;
      }
      _swiftEmptyArrayStorage[2] = v18;
      uint64_t v19 = (char *)&_swiftEmptyArrayStorage[2 * v17];
      *((void *)v19 + 4) = v12;
      *((void *)v19 + 5) = v11;
      if (v6) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v7) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_29;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v7)
  {
LABEL_29:
    swift_release();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    int64_t v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v2);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void *sub_1000D5214(uint64_t a1, uint64_t a2)
{
  uint64_t v147 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v176 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  v146 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006CC8(&qword_1001C3408);
  __chkstk_darwin(v5 - 8);
  v164 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for IDCSAnalytics.NamespaceElement();
  uint64_t v7 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  v162 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for IDCSAnalytics.ElementFallbackAlgorithm();
  uint64_t v9 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  v161 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for ElementFallback(0);
  uint64_t v11 = *(void *)(v168 - 8);
  uint64_t v12 = __chkstk_darwin(v168);
  uint64_t v160 = (uint64_t)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v159 = (uint64_t)&v125 - v14;
  uint64_t v15 = sub_100006CC8(&qword_1001C3410);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v158 = (uint64_t)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v173 = (uint64_t *)((char *)&v125 - v18);
  uint64_t v129 = type metadata accessor for AnyCodable();
  uint64_t v19 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v21 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  v133 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100006CC8(&qword_1001C1320);
  __chkstk_darwin(v23 - 8);
  v165 = (uint64_t *)((char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v167 = sub_100006CC8(&qword_1001C1348);
  uint64_t v25 = *(void *)(v167 - 8);
  uint64_t v26 = __chkstk_darwin(v167);
  v149 = (uint64_t *)((char *)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v148 = (uint64_t *)((char *)&v125 - v28);
  uint64_t v174 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v174 - 8);
  uint64_t v30 = __chkstk_darwin(v174);
  uint64_t v127 = (char *)&v125 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  v172 = (char *)&v125 - v33;
  __chkstk_darwin(v32);
  v166 = (char *)&v125 - v34;
  uint64_t v35 = sub_100006CC8(&qword_1001C12E0);
  __chkstk_darwin(v35 - 8);
  v175 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = _swiftEmptyArrayStorage;
  v178 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(a1 + 16);
  if (!v38) {
    return result;
  }
  v171 = (void (**)(char *, uint64_t))(v29 + 8);
  v156 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v139 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v131 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v126 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v135 = v11;
  v155 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  unsigned int v154 = enum case for IDCSAnalytics.ElementFallbackAlgorithm.ageOverToNearestAgeOver(_:);
  v153 = (void (**)(char *, void, uint64_t))(v9 + 104);
  v152 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v151 = (void (**)(char *, uint64_t))(v7 + 8);
  v150 = (void (**)(char *, uint64_t))(v9 + 8);
  unsigned int v138 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
  v137 = (void (**)(char *, void, uint64_t))(v176 + 104);
  v136 = (void (**)(char *, uint64_t))(v176 + 8);
  swift_bridgeObjectRetain();
  uint64_t v130 = a1;
  uint64_t v39 = (unint64_t *)(a1 + 40);
  *(void *)&long long v40 = 136315138;
  long long v141 = v40;
  v140 = (char *)&type metadata for Any + 8;
  uint64_t v176 = a2;
  uint64_t v41 = v166;
  uint64_t v42 = (uint64_t)v175;
  while (1)
  {
    uint64_t v43 = *(v39 - 1);
    unint64_t v44 = *v39;
    swift_bridgeObjectRetain();
    if (static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)())
    {
      if (*(void *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v45 = sub_10013C484(v43, v44);
        if (v46)
        {
          unint64_t v47 = v45;
          uint64_t v48 = *(void *)(a2 + 56);
          uint64_t v49 = sub_100006CC8(&qword_1001C12E8);
          uint64_t v50 = *(void *)(v49 - 8);
          uint64_t v51 = v50;
          uint64_t v52 = v48 + *(void *)(v50 + 72) * v47;
          uint64_t v42 = (uint64_t)v175;
          (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v175, v52, v49);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v42, 0, 1, v49);
        }
        else
        {
          uint64_t v54 = sub_100006CC8(&qword_1001C12E8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v42, 1, 1, v54);
        }
        swift_bridgeObjectRelease();
        uint64_t v55 = sub_100006CC8(&qword_1001C12E8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v42, 1, v55) != 1)
        {
          swift_bridgeObjectRelease();
          sub_100014BBC(v42, &qword_1001C12E0);
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v53 = sub_100006CC8(&qword_1001C12E8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v42, 1, 1, v53);
      }
      sub_100014BBC(v42, &qword_1001C12E0);
      uint64_t v56 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
      if ((v57 & 1) == 0) {
        break;
      }
    }
    swift_bridgeObjectRelease();
LABEL_4:
    v39 += 2;
    if (!--v38)
    {
      swift_bridgeObjectRelease();
      return v178;
    }
  }
  uint64_t v58 = v56;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v59 = Logger.logObject.getter();
  unint64_t v60 = v41;
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v61))
  {
    uint64_t v62 = swift_slowAlloc();
    uint64_t v177 = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = v141;
    swift_bridgeObjectRetain();
    *(void *)(v62 + 4) = sub_10004C3A4(v43, v44, &v177);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v59, v61, "Falling back from %s to nearest age_over_nn", (uint8_t *)v62, 0xCu);
    swift_arrayDestroy();
    a2 = v176;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v63 = *v171;
  (*v171)(v60, v174);
  uint64_t result = (void *)sub_100129FF0(a2);
  if (v65) {
    goto LABEL_47;
  }
  if (*(_DWORD *)(a2 + 36) == v64)
  {
    v170 = v63;
    if (result == (void *)(1 << *(unsigned char *)(a2 + 32)))
    {
      uint64_t v66 = v165;
      (*v156)(v165, 1, 1, v167);
      goto LABEL_22;
    }
    uint64_t v67 = v167;
    uint64_t v68 = *(int *)(v167 + 48);
    uint64_t v157 = v58;
    uint64_t v69 = v149;
    uint64_t v70 = (char *)v149 + v68;
    uint64_t v71 = sub_10008F878((uint64_t)v149 + v68, (uint64_t)result, v64, 0, a2);
    uint64_t *v69 = v71;
    v69[1] = v72;
    uint64_t v66 = v165;
    uint64_t *v165 = v71;
    v66[1] = v72;
    id v73 = (char *)v66 + *(int *)(v67 + 48);
    uint64_t v74 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v144 = *(void *)(v74 - 8);
    unint64_t v75 = *(void (**)(char *, char *, uint64_t))(v144 + 16);
    unint64_t v76 = v73;
    a2 = v176;
    uint64_t v145 = v74;
    uint64_t v143 = v144 + 16;
    v142 = v75;
    ((void (*)(char *, char *))v75)(v76, v70);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v77 = (uint64_t)v69;
    uint64_t v58 = v157;
    sub_100014BBC(v77, &qword_1001C1348);
    (*v156)(v66, 0, 1, v67);
    swift_bridgeObjectRelease();
    if ((*v139)(v66, 1, v67) == 1)
    {
LABEL_22:
      sub_100014BBC((uint64_t)v66, &qword_1001C1320);
      goto LABEL_34;
    }
    uint64_t v78 = v167;
    uint64_t v79 = v148;
    v132 = (char *)v148 + *(int *)(v167 + 48);
    uint64_t v81 = *v66;
    uint64_t v80 = v66[1];
    uint64_t *v148 = v81;
    v79[1] = v80;
    uint64_t v82 = v144;
    uint64_t v83 = v145;
    (*(void (**)(void))(v144 + 32))();
    uint64_t v84 = v149;
    uint64_t v85 = (char *)v149 + *(int *)(v78 + 48);
    uint64_t *v149 = v81;
    v84[1] = v80;
    v142(v85, v132, v83);
    os_log_type_t v86 = v133;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v83);
    if (ISO18013IssuerSignedItem.digestID.getter())
    {
      (*v131)(v86, v134);
      uint64_t v87 = (uint64_t)v148;
      goto LABEL_33;
    }
    uint64_t v88 = (uint64_t)v148;
    uint64_t v89 = ISO18013IssuerSignedItem.random.getter();
    unint64_t v91 = v90;
    char v92 = sub_100147900(v89, v90, 0, 0xC000000000000000);
    sub_1000035EC(v89, v91);
    if (v92)
    {
      uint64_t v93 = v128;
      ISO18013IssuerSignedItem.elementValue.getter();
      unint64_t v94 = v86;
      if (qword_1001C03F8 != -1) {
        swift_once();
      }
      uint64_t v95 = v129;
      sub_100091338(v129, (uint64_t)qword_1001C4C90);
      char v96 = static AnyCodable.== infix(_:_:)();
      (*v126)(v93, v95);
      (*v131)(v94, v134);
      sub_100014BBC(v88, &qword_1001C1348);
      a2 = v176;
      uint64_t v58 = v157;
      if (v96)
      {
        defaultLogger()();
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v99 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "Element values are not available, falling back to nearby elements", v99, 2u);
          swift_slowDealloc();
        }

        v170(v127, v174);
        unint64_t v100 = sub_1000D9AA8(a2, v43, v44, v58);
        swift_bridgeObjectRelease();
        sub_1000DAD90((uint64_t)v100);
        goto LABEL_43;
      }
    }
    else
    {
      (*v131)(v86, v134);
      uint64_t v87 = v88;
LABEL_33:
      sub_100014BBC(v87, &qword_1001C1348);
      a2 = v176;
      uint64_t v58 = v157;
    }
LABEL_34:
    defaultLogger()();
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v101, v102))
    {
      os_log_type_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Elements are available, performing ISO fallback", v103, 2u);
      swift_slowDealloc();
    }

    v170(v172, v174);
    v104 = v173;
    sub_1000D67E0(a2, v43, v44, v58, v173);
    uint64_t v105 = v158;
    sub_100037898((uint64_t)v104, v158, &qword_1001C3410);
    if ((*v155)(v105, 1, v168) == 1)
    {
      sub_100014BBC(v105, &qword_1001C3410);
      v170 = (void (*)(char *, uint64_t))type metadata accessor for IDCSAnalytics();
      uint64_t v106 = v161;
      uint64_t v107 = v169;
      (*v153)(v161, v154, v169);
      uint64_t v108 = v146;
      uint64_t v109 = v147;
      (*v137)(v146, v138, v147);
      ISO18013KnownNamespaces.rawValue.getter();
      (*v136)(v108, v109);
      uint64_t v110 = v162;
      a2 = v176;
      IDCSAnalytics.NamespaceElement.init(namespace:element:)();
      uint64_t v112 = v163;
      uint64_t v111 = (uint64_t)v164;
      (*v152)(v164, 1, 1, v163);
      static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)();
      sub_100014BBC(v111, &qword_1001C3408);
      (*v151)(v110, v112);
      (*v150)(v106, v107);
      sub_100014BBC((uint64_t)v173, &qword_1001C3410);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v113 = v105;
      uint64_t v114 = v159;
      sub_1000DA960(v113, v159, type metadata accessor for ElementFallback);
      sub_1000D948C(v114, v160, type metadata accessor for ElementFallback);
      unint64_t v115 = (unint64_t)v178;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v115 = sub_1000D0F68(0, *(void *)(v115 + 16) + 1, 1, v115);
      }
      uint64_t v116 = v135;
      unint64_t v118 = *(void *)(v115 + 16);
      unint64_t v117 = *(void *)(v115 + 24);
      if (v118 >= v117 >> 1) {
        unint64_t v115 = sub_1000D0F68(v117 > 1, v118 + 1, 1, v115);
      }
      *(void *)(v115 + 16) = v118 + 1;
      uint64_t v119 = v115
           + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))
           + *(void *)(v116 + 72) * v118;
      v170 = (void (*)(char *, uint64_t))type metadata accessor for ElementFallback;
      sub_1000DA960(v160, v119, type metadata accessor for ElementFallback);
      v178 = (void *)v115;
      uint64_t v157 = type metadata accessor for IDCSAnalytics();
      uint64_t v120 = v161;
      (*v153)(v161, v154, v169);
      uint64_t v121 = v159;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v122 = v162;
      IDCSAnalytics.NamespaceElement.init(namespace:element:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v123 = (uint64_t)v164;
      IDCSAnalytics.NamespaceElement.init(namespace:element:)();
      uint64_t v124 = v163;
      (*v152)((char *)v123, 0, 1, v163);
      static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)();
      sub_100014BBC(v123, &qword_1001C3408);
      (*v151)(v122, v124);
      (*v150)(v120, v169);
      sub_1000D942C(v121, (uint64_t (*)(void))v170);
      sub_100014BBC((uint64_t)v173, &qword_1001C3410);
      a2 = v176;
    }
LABEL_43:
    uint64_t v41 = v166;
    uint64_t v42 = (uint64_t)v175;
    goto LABEL_4;
  }
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1000D6674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v4);
  uint64_t v8 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8 == a1 && v10 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v13 = 0;
    if ((v12 & 1) == 0) {
      return v13 & 1;
    }
  }
  char v13 = static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)();
  return v13 & 1;
}

uint64_t sub_1000D67E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v108 - v15;
  uint64_t v111 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v109 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v18 - 8);
  uint64_t v120 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for CredentialElement(0);
  __chkstk_darwin(v123);
  uint64_t v124 = (uint64_t *)((char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = sub_100006CC8(&qword_1001C12E0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v122 = (uint64_t)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v118 = (uint64_t)&v108 - v25;
  __chkstk_darwin(v24);
  uint64_t v128 = (uint64_t)&v108 - v26;
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v125 = *(void *)(v27 - 8);
  uint64_t v126 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v121 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v108 - v30;
  uint64_t v32 = (void *)sub_1000D9774(a1, a2, a3, a4, 1);
  uint64_t v134 = v32;
  uint64_t v33 = v32[2];
  unint64_t v129 = a3;
  uint64_t v119 = a1;
  if (!v33)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)sub_1000D9774(a1, a2, a3, a4, 0);
    uint64_t v134 = v32;
    if (!v32[2])
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v106 = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "No available nearest age_over_nn fallbacks found in payload", v106, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v125 + 8))(v31, v126);
      uint64_t v107 = type metadata accessor for ElementFallback(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(a5, 1, 1, v107);
    }
  }
  uint64_t v116 = v10;
  uint64_t v127 = a2;
  uint64_t v113 = v16;
  uint64_t v114 = v14;
  uint64_t v115 = v11;
  unint64_t v117 = a5;
  uint64_t v34 = v32[4];
  unint64_t v35 = v32[5];
  swift_bridgeObjectRetain();
  sub_1000D993C(0, 1);
  uint64_t v132 = v34;
  unint64_t v133 = v35;
  uint64_t v36 = v134[2];
  uint64_t v112 = v134;
  if (!v36)
  {
    unint64_t v38 = v35;
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v50 = v121;
    defaultLogger()();
    unint64_t v51 = v129;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      v131[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v130 = sub_10004C3A4(v127, v51, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v54 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v130 = sub_10004C3A4(v34, v38, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Falling back from %s to %s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v125 + 8))(v50, v126);
    uint64_t v55 = v119;
    swift_beginAccess();
    uint64_t v56 = v132;
    uint64_t v57 = v133;
    uint64_t v58 = v128;
    if (*(void *)(v55 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v59 = sub_10013C484(v56, v57);
      if (v60)
      {
        unint64_t v61 = v59;
        uint64_t v62 = *(void *)(v55 + 56);
        uint64_t v63 = sub_100006CC8(&qword_1001C12E8);
        uint64_t v64 = *(void *)(v63 - 8);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v64 + 16))(v58, v62 + *(void *)(v64 + 72) * v61, v63);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v58, 0, 1, v63);
      }
      else
      {
        uint64_t v66 = sub_100006CC8(&qword_1001C12E8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v58, 1, 1, v66);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = sub_100006CC8(&qword_1001C12E8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v58, 1, 1, v65);
    }
    uint64_t v67 = v118;
    sub_100037898(v58, v118, &qword_1001C12E0);
    uint64_t v68 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v69 = *(void *)(v68 - 8);
    uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
    int v71 = v70(v67, 1, v68);
    swift_bridgeObjectRetain();
    if (v71 == 1)
    {
      sub_100014BBC(v67, &qword_1001C12E0);
      uint64_t v72 = type metadata accessor for AnyCodable();
      uint64_t v73 = (uint64_t)v120;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v120, 1, 1, v72);
    }
    else
    {
      uint64_t v74 = v109;
      CBOREncodedCBOR.value.getter();
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
      uint64_t v73 = (uint64_t)v120;
      ISO18013IssuerSignedItem.elementValue.getter();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v74, v111);
      uint64_t v75 = type metadata accessor for AnyCodable();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v73, 0, 1, v75);
    }
    uint64_t v76 = v58;
    uint64_t v77 = v122;
    sub_100037898(v76, v122, &qword_1001C12E0);
    if (v70(v77, 1, v68) == 1)
    {
      sub_100014BBC(v77, &qword_1001C12E0);
      uint64_t v78 = 0;
      unint64_t v79 = 0xF000000000000000;
    }
    else
    {
      uint64_t v78 = CBOREncodedCBOR.dataValue.getter();
      unint64_t v79 = v80;
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v77, v68);
    }
    uint64_t v81 = (uint64_t)v124;
    *uint64_t v124 = v56;
    *(void *)(v81 + 8) = v57;
    uint64_t v82 = v123;
    sub_1000D93C4(v73, v81 + *(int *)(v123 + 20));
    uint64_t v83 = (uint64_t *)(v81 + *(int *)(v82 + 24));
    uint64_t *v83 = v78;
    v83[1] = v79;
    uint64_t v84 = v132;
    unint64_t v85 = v133;
    uint64_t v86 = swift_allocObject();
    *(void *)(v86 + 16) = v84;
    *(void *)(v86 + 24) = v85;
    uint64_t v87 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    uint64_t v88 = v115;
    uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 104);
    unint64_t v90 = v113;
    uint64_t v91 = v116;
    v89(v113, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v116);
    uint64_t v126 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v93 = v92;
    unint64_t v94 = *(void (**)(char *, uint64_t))(v88 + 8);
    v94(v90, v91);
    uint64_t v95 = v114;
    v89(v114, v87, v91);
    unint64_t v96 = v129;
    swift_bridgeObjectRetain();
    uint64_t v97 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v99 = v98;
    v94(v95, v91);
    sub_100014BBC(v128, &qword_1001C12E0);
    unint64_t v100 = v117;
    *unint64_t v117 = v126;
    v100[1] = v93;
    v100[2] = v127;
    v100[3] = v96;
    v100[4] = v97;
    v100[5] = v99;
    uint64_t v101 = (int *)type metadata accessor for ElementFallback(0);
    sub_1000DA960(v81, (uint64_t)v100 + v101[7], type metadata accessor for CredentialElement);
    os_log_type_t v102 = (uint64_t *)((char *)v100 + v101[8]);
    *os_log_type_t v102 = sub_1000D666C;
    v102[1] = 0;
    os_log_type_t v103 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v100 + v101[9]);
    *os_log_type_t v103 = sub_1000DA958;
    v103[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86;
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v101 - 1) + 56))(v100, 0, 1, v101);
  }
  uint64_t v37 = v134 + 5;
  while (1)
  {
    uint64_t v39 = *(v37 - 1);
    unint64_t v38 = *v37;
    swift_bridgeObjectRetain();
    uint64_t v40 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
    if (v41) {
      goto LABEL_5;
    }
    uint64_t v42 = v40;
    swift_bridgeObjectRetain();
    uint64_t v43 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
    char v45 = v44;
    uint64_t result = swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_5;
    }
    uint64_t v47 = v42 - a4;
    if (__OFSUB__(v42, a4)) {
      break;
    }
    if (v47 < 0)
    {
      BOOL v49 = __OFSUB__(0, v47);
      uint64_t v47 = a4 - v42;
      if (v49) {
        goto LABEL_43;
      }
      uint64_t v48 = v43 - a4;
      if (__OFSUB__(v43, a4)) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v48 = v43 - a4;
      if (__OFSUB__(v43, a4)) {
        goto LABEL_42;
      }
    }
    if (v48 < 0)
    {
      BOOL v49 = __OFSUB__(0, v48);
      uint64_t v48 = -v48;
      if (v49) {
        goto LABEL_45;
      }
    }
    if (v47 < v48)
    {
      swift_bridgeObjectRelease();
      uint64_t v132 = v39;
      unint64_t v133 = v38;
      uint64_t v34 = v39;
      goto LABEL_6;
    }
LABEL_5:
    swift_bridgeObjectRelease();
    unint64_t v38 = v35;
LABEL_6:
    v37 += 2;
    unint64_t v35 = v38;
    if (!--v36) {
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000D7450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v4);
  uint64_t v8 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8 == a1 && v10 == a2) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1000D7598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v11 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v11);
  uint64_t v15 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v15 != a1 || v17 != a2)
  {
    int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (a3 == a5)
    {
      if (a4 == v23)
      {
        int v20 = 1;
        return v19 & v20 & 1;
      }
      int v20 = v19;
    }
    else
    {
      int v20 = v19;
    }
LABEL_14:
    int v19 = v20;
    int v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    return v19 & v20 & 1;
  }
  swift_bridgeObjectRelease();
  int v20 = 1;
  if (a3 != a5) {
    goto LABEL_14;
  }
  int v19 = 1;
  if (a4 != v23) {
    goto LABEL_14;
  }
  return v19 & v20 & 1;
}

uint64_t sub_1000D7760()
{
  return 0;
}

BOOL sub_1000D7768(uint64_t *a1, uint64_t a2, unsigned char *a3, int a4, uint64_t a5)
{
  uint64_t v64 = a2;
  uint64_t v58 = a5;
  int v61 = a4;
  uint64_t v63 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v62 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006CC8(&qword_1001C12E0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AnyCodable();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  if ((static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v54 = v15;
  uint64_t v55 = v18;
  uint64_t v52 = v8;
  uint64_t v53 = v16;
  uint64_t v56 = v11;
  uint64_t v57 = v19;
  uint64_t v21 = v64;
  if (!*(void *)(v64 + 16))
  {
    uint64_t v32 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v30 = (uint64_t)v14;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v14, 1, 1, v32);
    uint64_t v33 = v63;
LABEL_9:
    sub_100014BBC(v30, &qword_1001C12E0);
LABEL_10:
    BOOL result = 0;
    *uint64_t v33 = 1;
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10013C484(v57, v20);
  unint64_t v51 = v20;
  if (v23)
  {
    unint64_t v24 = v22;
    uint64_t v25 = *(void *)(v21 + 56);
    uint64_t v26 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = v27;
    uint64_t v29 = v25 + *(void *)(v27 + 72) * v24;
    uint64_t v30 = (uint64_t)v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v14, v29, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, v26);
  }
  else
  {
    uint64_t v34 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v30 = (uint64_t)v14;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v14, 1, 1, v34);
  }
  uint64_t v35 = v9;
  uint64_t v36 = v62;
  uint64_t v33 = v63;
  unint64_t v38 = v55;
  uint64_t v37 = v56;
  swift_bridgeObjectRelease();
  uint64_t v39 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v30, 1, v39) == 1) {
    goto LABEL_9;
  }
  CBOREncodedCBOR.value.getter();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v30, v39);
  ISO18013IssuerSignedItem.elementValue.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  char v41 = AnyCodable.BOOLValue.getter();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v54);
  if (v41 == 2) {
    goto LABEL_10;
  }
  int v42 = v41 & 1;
  uint64_t v43 = v52;
  defaultLogger()();
  unint64_t v44 = v51;
  swift_bridgeObjectRetain_n();
  char v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_10004C3A4(v57, v44, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 12) = 1024;
    LODWORD(v65) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Considering %s : %{BOOL}d", (uint8_t *)v47, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v59 + 8))(v52, v60);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v60);
  }
  char v48 = v61;
  if (((v42 != 0) ^ v61)) {
    return 0;
  }
  uint64_t v49 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
  if (v50) {
    return 0;
  }
  if (v48) {
    return v49 >= v58;
  }
  return v49 <= v58;
}

char *sub_1000D7E08(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = *v6;
  int64_t v9 = *((void *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v13 > *((void *)v8 + 3) >> 1)
  {
    if (v9 <= v13) {
      int64_t v17 = v9 + v12;
    }
    else {
      int64_t v17 = v9;
    }
    uint64_t v8 = sub_1000D0E58(isUniquelyReferenced_nonNull_native, v17, 1, v8);
  }
  uint64_t v18 = &v8[32 * a1 + 32];
  BOOL result = (char *)swift_arrayDestroy();
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v20 = *((void *)v8 + 2);
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_26;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    BOOL result = v18 + 32;
    char v23 = &v8[32 * a2 + 32];
    if (v18 + 32 != v23 || result >= &v23[32 * v22]) {
      BOOL result = (char *)memmove(result, v23, 32 * v22);
    }
    uint64_t v24 = *((void *)v8 + 2);
    BOOL v21 = __OFADD__(v24, v12);
    uint64_t v25 = v24 + v12;
    if (!v21)
    {
      *((void *)v8 + 2) = v25;
LABEL_20:
      *(void *)uint64_t v18 = a3;
      *((void *)v18 + 1) = a4;
      *((void *)v18 + 2) = a5;
      *((void *)v18 + 3) = a6;
      *uint64_t v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  BOOL result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000D7F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v156 = a1;
  uint64_t v3 = sub_100006CC8(&qword_1001C3408);
  __chkstk_darwin(v3 - 8);
  v155 = (char *)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = type metadata accessor for IDCSAnalytics.NamespaceElement();
  uint64_t v154 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  v199 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for IDCSAnalytics.ElementFallbackAlgorithm();
  uint64_t v153 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  v200 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for ISO18013KnownNamespaces();
  v182 = *(void (***)(char *, uint64_t))(v187 - 8);
  uint64_t v7 = __chkstk_darwin(v187);
  v186 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v185 = (char *)&v152 - v9;
  uint64_t v197 = type metadata accessor for ElementFallback(0);
  uint64_t v188 = *(void *)(v197 - 8);
  uint64_t v10 = __chkstk_darwin(v197);
  v201 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v192 = (int **)((char *)&v152 - v13);
  __chkstk_darwin(v12);
  v181 = (char *)&v152 - v14;
  uint64_t v167 = type metadata accessor for Logger();
  v198 = *(unint64_t **)(v167 - 8);
  uint64_t v15 = __chkstk_darwin(v167);
  v196 = (char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v166 = (char *)&v152 - v17;
  uint64_t v18 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v18 - 8);
  v195 = (char *)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v184 = *(void *)(v189 - 8);
  uint64_t v20 = __chkstk_darwin(v189);
  uint64_t v22 = (char *)&v152 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v183 = (char *)&v152 - v23;
  v190 = (int *)type metadata accessor for CredentialElement(0);
  __chkstk_darwin(v190);
  v191 = (uint64_t *)((char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = sub_100006CC8(&qword_1001C12E0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  v171 = (char *)&v152 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v152 - v28;
  uint64_t v30 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  v178 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v152 - v34;
  uint64_t v36 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v158 = (char *)&v152 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void (**)(void))(v31 + 104);
  unsigned int v177 = enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:);
  uint64_t v176 = v31 + 104;
  v175 = (void (*)(char *, void, uint64_t))v39;
  v39(v35);
  uint64_t v40 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  uint64_t v42 = v41;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v180 = v30;
  uint64_t v179 = v31 + 8;
  uint64_t v174 = v43;
  v43(v35, v30);
  uint64_t v44 = *(void *)(a2 + 16);
  uint64_t v172 = v36;
  uint64_t v161 = v37;
  if (v44)
  {
    unint64_t v45 = sub_10013C484(v40, v42);
    uint64_t v37 = v161;
    if (v46)
    {
      uint64_t v36 = v172;
      (*(void (**)(char *, unint64_t, uint64_t))(v161 + 16))(v29, *(void *)(a2 + 56) + *(void *)(v161 + 72) * v45, v172);
      uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
      char v48 = v29;
      uint64_t v49 = 0;
    }
    else
    {
      uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56);
      char v48 = v29;
      uint64_t v49 = 1;
      uint64_t v36 = v172;
    }
  }
  else
  {
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    char v48 = v29;
    uint64_t v49 = 1;
  }
  v170 = v47;
  v47(v48, v49, 1, v36);
  swift_bridgeObjectRelease();
  char v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  uint64_t v165 = v37 + 48;
  v164 = v50;
  if (v50((uint64_t)v29, 1, v36) == 1)
  {
    sub_100014BBC((uint64_t)v29, &qword_1001C12E0);
    unint64_t v51 = v196;
    defaultLogger()();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Not checking age over fallbacks because payload does not contain age in years element", v54, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v198[1])(v51, v167);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v169 = a2;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v158, v29, v36);
  uint64_t v56 = v183;
  CBOREncodedCBOR.value.getter();
  v196 = (char *)ISO18013IssuerSignedItem.elementIdentifier.getter();
  uint64_t v58 = v57;
  uint64_t v59 = *(void (**)(char *, uint64_t))(v184 + 8);
  uint64_t v60 = v56;
  uint64_t v61 = v189;
  v59(v60, v189);
  CBOREncodedCBOR.value.getter();
  uint64_t v62 = (uint64_t)v195;
  ISO18013IssuerSignedItem.elementValue.getter();
  v59(v22, v61);
  uint64_t v63 = type metadata accessor for AnyCodable();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
  uint64_t v64 = CBOREncodedCBOR.dataValue.getter();
  uint64_t v66 = v65;
  uint64_t v68 = v190;
  uint64_t v67 = v191;
  void *v191 = v196;
  v67[1] = v58;
  sub_1000D93C4(v62, (uint64_t)v67 + v68[5]);
  uint64_t v69 = (void *)((char *)v67 + v68[6]);
  uint64_t *v69 = v64;
  v69[1] = v66;
  if (*(void *)(v156 + 16))
  {
    uint64_t v70 = *(char **)(v156 + 16);
    uint64_t v168 = v37 + 56;
    uint64_t v157 = v37 + 16;
    LODWORD(v184) = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    int v71 = v182++;
    v183 = (char *)(v71 + 13);
    uint64_t v163 = (void (**)(char *, uint64_t))(v198 + 1);
    uint64_t v72 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v55 = _swiftEmptyArrayStorage;
    *(void *)&long long v73 = 136315138;
    long long v160 = v73;
    uint64_t v159 = (char *)&type metadata for Any + 8;
    v162 = (void *)0x80000001001804E0;
    uint64_t v74 = v70;
    while (1)
    {
      uint64_t v79 = *(v72 - 1);
      unint64_t v78 = *v72;
      swift_bridgeObjectRetain();
      char v80 = static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)();
      v198 = v72;
      if (v80)
      {
        uint64_t v81 = v169;
        if (!*(void *)(v169 + 16))
        {
          uint64_t v85 = (uint64_t)v171;
          v170(v171, 1, 1, v172);
LABEL_22:
          uint64_t v89 = v166;
          sub_100014BBC(v85, &qword_1001C12E0);
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v90 = Logger.logObject.getter();
          os_log_type_t v91 = static os_log_type_t.debug.getter();
          BOOL v92 = os_log_type_enabled(v90, v91);
          v173 = v55;
          v196 = (char *)v79;
          if (v92)
          {
            uint64_t v93 = swift_slowAlloc();
            uint64_t v202 = swift_slowAlloc();
            *(_DWORD *)uint64_t v93 = v160;
            swift_bridgeObjectRetain();
            *(void *)(v93 + 4) = sub_10004C3A4(v79, v78, &v202);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v90, v91, "Falling back from %s to age_in_years", (uint8_t *)v93, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*v163)(v89, v167);
          v94._countAndFlagsBits = 0x3738336362613536;
          v94._object = (void *)0xE800000000000000;
          v95._countAndFlagsBits = 0xD000000000000020;
          v95._object = v162;
          logMilestone(tag:description:)(v94, v95);
          unint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))v183;
          uint64_t v97 = v185;
          uint64_t v98 = v184;
          uint64_t v99 = v187;
          (*(void (**)(char *, void, uint64_t))v183)(v185, v184, v187);
          v195 = (char *)ISO18013KnownNamespaces.rawValue.getter();
          uint64_t v101 = v100;
          os_log_type_t v102 = *v182;
          (*v182)(v97, v99);
          os_log_type_t v103 = v186;
          v96(v186, v98, v99);
          uint64_t v104 = ISO18013KnownNamespaces.rawValue.getter();
          uint64_t v106 = v105;
          v102(v103, v99);
          uint64_t v107 = v197;
          uint64_t v108 = v181;
          sub_1000D948C((uint64_t)v191, (uint64_t)&v181[*(int *)(v197 + 28)], type metadata accessor for CredentialElement);
          *uint64_t v108 = v195;
          v108[1] = v101;
          v108[2] = v196;
          v108[3] = v78;
          v108[4] = v104;
          v108[5] = v106;
          uint64_t v109 = (void *)((char *)v108 + *(int *)(v107 + 32));
          void *v109 = sub_1000D666C;
          v109[1] = 0;
          uint64_t v110 = (void *)((char *)v108 + *(int *)(v107 + 36));
          *uint64_t v110 = sub_1000D6670;
          v110[1] = 0;
          uint64_t v55 = v173;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v55 = (void *)sub_1000D0F68(0, v55[2] + 1, 1, (unint64_t)v55);
          }
          uint64_t v111 = v200;
          uint64_t v112 = v198;
          unint64_t v114 = v55[2];
          unint64_t v113 = v55[3];
          if (v114 >= v113 >> 1) {
            uint64_t v55 = (void *)sub_1000D0F68(v113 > 1, v114 + 1, 1, (unint64_t)v55);
          }
          v55[2] = v114 + 1;
          uint64_t v75 = (uint64_t)v55
              + ((*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80))
              + *(void *)(v188 + 72) * v114;
          uint64_t v76 = (uint64_t)v181;
          goto LABEL_13;
        }
        swift_bridgeObjectRetain();
        unint64_t v82 = sub_10013C484(v79, v78);
        if (v83)
        {
          unint64_t v84 = *(void *)(v81 + 56) + *(void *)(v161 + 72) * v82;
          uint64_t v85 = (uint64_t)v171;
          uint64_t v86 = v172;
          (*(void (**)(char *, unint64_t, uint64_t))(v161 + 16))(v171, v84, v172);
          uint64_t v87 = (char *)v85;
          uint64_t v88 = 0;
        }
        else
        {
          uint64_t v85 = (uint64_t)v171;
          uint64_t v87 = v171;
          uint64_t v88 = 1;
          uint64_t v86 = v172;
        }
        v170(v87, v88, 1, v86);
        swift_bridgeObjectRelease();
        if (v164(v85, 1, v86) == 1) {
          goto LABEL_22;
        }
        sub_100014BBC(v85, &qword_1001C12E0);
      }
      v195 = v74;
      uint64_t v115 = v178;
      uint64_t v116 = v180;
      v175(v178, v177, v180);
      uint64_t v117 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
      uint64_t v119 = v118;
      v174(v115, v116);
      if (v79 == v117 && v78 == v119)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v121 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v111 = v200;
          uint64_t v74 = v195;
          uint64_t v112 = v198;
          goto LABEL_14;
        }
      }
      v196 = (char *)v79;
      uint64_t v122 = *(void (**)(char *, uint64_t, uint64_t))v183;
      uint64_t v123 = v185;
      uint64_t v124 = v184;
      unint64_t v125 = (unint64_t)v55;
      uint64_t v126 = v187;
      (*(void (**)(char *, void, uint64_t))v183)(v185, v184, v187);
      uint64_t v127 = ISO18013KnownNamespaces.rawValue.getter();
      uint64_t v189 = v128;
      v190 = (int *)v127;
      unint64_t v129 = *v182;
      (*v182)(v123, v126);
      uint64_t v130 = v186;
      v122(v186, v124, v126);
      uint64_t v131 = ISO18013KnownNamespaces.rawValue.getter();
      unint64_t v133 = v132;
      uint64_t v134 = v126;
      uint64_t v55 = (void *)v125;
      v129(v130, v134);
      uint64_t v135 = v197;
      v136 = v192;
      sub_1000D948C((uint64_t)v191, (uint64_t)v192 + *(int *)(v197 + 28), type metadata accessor for CredentialElement);
      uint64_t v137 = v189;
      *v136 = v190;
      v136[1] = (int *)v137;
      v136[2] = (int *)v196;
      v136[3] = (int *)v78;
      v136[4] = (int *)v131;
      v136[5] = v133;
      unsigned int v138 = (int **)((char *)v136 + *(int *)(v135 + 32));
      *unsigned int v138 = sub_1000D666C;
      v138[1] = 0;
      v139 = (int **)((char *)v136 + *(int *)(v135 + 36));
      void *v139 = sub_1000D6670;
      v139[1] = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v55 = (void *)sub_1000D0F68(0, *(void *)(v125 + 16) + 1, 1, v125);
      }
      unint64_t v141 = v55[2];
      unint64_t v140 = v55[3];
      uint64_t v111 = v200;
      uint64_t v74 = v195;
      uint64_t v112 = v198;
      if (v141 >= v140 >> 1) {
        uint64_t v55 = (void *)sub_1000D0F68(v140 > 1, v141 + 1, 1, (unint64_t)v55);
      }
      v55[2] = v141 + 1;
      uint64_t v75 = (uint64_t)v55
          + ((*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80))
          + *(void *)(v188 + 72) * v141;
      uint64_t v76 = (uint64_t)v192;
LABEL_13:
      sub_1000DA960(v76, v75, type metadata accessor for ElementFallback);
LABEL_14:
      uint64_t v72 = v112 + 2;
      --v74;
      uint64_t v77 = (uint64_t)v201;
      if (!v74)
      {
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
  }
  uint64_t v55 = _swiftEmptyArrayStorage;
  uint64_t v111 = v200;
  uint64_t v77 = (uint64_t)v201;
LABEL_44:
  uint64_t v142 = v55[2];
  uint64_t v143 = v194;
  if (v142)
  {
    type metadata accessor for IDCSAnalytics();
    uint64_t v144 = (uint64_t)v55
         + ((*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80));
    v198 = *(unint64_t **)(v188 + 72);
    LODWORD(v196) = enum case for IDCSAnalytics.ElementFallbackAlgorithm.ageOverToAgeInYears(_:);
    v195 = (char *)(v153 + 104);
    v192 = (int **)(v154 + 56);
    v190 = (int *)(v154 + 8);
    uint64_t v145 = (void (**)(char *, uint64_t))(v153 + 8);
    v173 = v55;
    swift_bridgeObjectRetain();
    uint64_t v146 = (uint64_t)v155;
    do
    {
      sub_1000D948C(v144, v77, type metadata accessor for ElementFallback);
      (*(void (**)(char *, void, uint64_t))v195)(v111, v196, v143);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      IDCSAnalytics.NamespaceElement.init(namespace:element:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v147 = v199;
      uint64_t v111 = v200;
      uint64_t v148 = v193;
      IDCSAnalytics.NamespaceElement.init(namespace:element:)();
      ((void (*)(uint64_t, void, uint64_t, uint64_t))*v192)(v146, 0, 1, v148);
      static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)();
      sub_100014BBC(v146, &qword_1001C3408);
      v149 = v147;
      uint64_t v143 = v194;
      uint64_t v150 = v148;
      uint64_t v77 = (uint64_t)v201;
      (*(void (**)(char *, uint64_t))v190)(v149, v150);
      (*v145)(v111, v143);
      sub_1000D942C(v77, type metadata accessor for ElementFallback);
      v144 += (uint64_t)v198;
      --v142;
    }
    while (v142);
    uint64_t v55 = v173;
    swift_bridgeObjectRelease();
  }
  sub_1000D942C((uint64_t)v191, type metadata accessor for CredentialElement);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v158, v172);
  return v55;
}

uint64_t sub_1000D93C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C12C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D942C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000D948C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D94F4(uint64_t result, uint64_t a2, unsigned char *a3, char a4, uint64_t a5)
{
  uint64_t v6 = a5;
  uint64_t v7 = result;
  int64_t v8 = 0;
  uint64_t v9 = *(void *)(result + 64);
  uint64_t v29 = result + 64;
  uint64_t v10 = 1 << *(unsigned char *)(result + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v30 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = &_swiftEmptyArrayStorage;
  int v14 = a4 & 1;
  uint64_t v28 = result;
  if ((v11 & v9) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v8 >= v30) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v29 + 8 * v8);
  if (v18) {
    goto LABEL_19;
  }
  int64_t v19 = v8 + 1;
  if (v8 + 1 >= v30) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v29 + 8 * v19);
  if (v18)
  {
LABEL_18:
    int64_t v8 = v19;
LABEL_19:
    unint64_t v12 = (v18 - 1) & v18;
    for (unint64_t i = __clz(__rbit64(v18)) + (v8 << 6); ; unint64_t i = v15 | (v8 << 6))
    {
      uint64_t v20 = (uint64_t *)(*(void *)(v7 + 48) + 16 * i);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      v33[0] = *v20;
      v33[1] = v22;
      swift_bridgeObjectRetain();
      BOOL v23 = sub_1000D7768(v33, a2, a3, v14, v6);
      if (v5) {
        break;
      }
      if (v23)
      {
        BOOL result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = v13;
        if ((result & 1) == 0)
        {
          BOOL result = sub_100068310(0, v13[2] + 1, 1);
          uint64_t v13 = v34;
        }
        unint64_t v25 = v13[2];
        unint64_t v24 = v13[3];
        if (v25 >= v24 >> 1)
        {
          BOOL result = sub_100068310(v24 > 1, v25 + 1, 1);
          uint64_t v13 = v34;
        }
        v13[2] = v25 + 1;
        uint64_t v26 = (char *)&v13[2 * v25];
        *((void *)v26 + 4) = v21;
        *((void *)v26 + 5) = v22;
        uint64_t v6 = a5;
        uint64_t v7 = v28;
        if (!v12) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL result = swift_bridgeObjectRelease();
        if (!v12) {
          goto LABEL_7;
        }
      }
LABEL_6:
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  int64_t v19 = v8 + 2;
  if (v8 + 2 >= v30)
  {
LABEL_33:
    swift_release();
    return (uint64_t)v13;
  }
  unint64_t v18 = *(void *)(v29 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v8 + 3;
  if (v8 + 3 >= v30) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v29 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v8 + 4;
  if (v8 + 4 >= v30) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v29 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v30) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v29 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000D9774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v21 = 0;
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000D94F4(v14, a1, &v21, a5, a4);
  if (v21 == 1)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Encrypted fallbacks found in payload, passing fallback responsibility to response builder", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    sub_100006CC8(&qword_1001C12D8);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1001768E0;
    *(void *)(v15 + 32) = a2;
    *(void *)(v15 + 40) = a3;
    swift_bridgeObjectRetain();
  }
  return v15;
}

uint64_t sub_1000D993C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1000D0D48(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *int64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000D9AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v125 = a2;
  uint64_t v126 = a3;
  uint64_t v122 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v120 = *(void *)(v122 - 8);
  uint64_t v5 = __chkstk_darwin(v122);
  uint64_t v118 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v117 = (char *)&v109 - v7;
  uint64_t v121 = type metadata accessor for ElementFallback(0);
  uint64_t v123 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v124 = (uint64_t *)((char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v116 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for CredentialElement(0);
  __chkstk_darwin(v115);
  uint64_t v119 = (uint64_t *)((char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v110 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v114 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v130 = (char *)&v109 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v113 = (char *)&v109 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v109 - v21;
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_1000D5014(v23);
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v128 = v14;
  uint64_t v129 = v13;
  uint64_t v127 = v22;
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = _swiftEmptyArrayStorage;
    goto LABEL_54;
  }
  uint64_t v26 = 0;
  uint64_t v134 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  uint64_t v109 = v24;
  uint64_t v29 = (void *)(v24 + 40);
  LODWORD(v133) = 1;
  char v30 = 1;
  do
  {
    uint64_t v32 = *(v29 - 1);
    uint64_t v33 = (void (*)(void, void))*v29;
    swift_bridgeObjectRetain();
    uint64_t v34 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
    if (v35) {
      goto LABEL_3;
    }
    uint64_t v31 = v34;
    if (v34 == a4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    if (v34 >= a4)
    {
LABEL_12:
      if (v34 > a4)
      {
        if (v34 < v26) {
          uint64_t v36 = v34;
        }
        else {
          uint64_t v36 = v26;
        }
        uint64_t v37 = v134;
        if (v34 < v26) {
          uint64_t v38 = v32;
        }
        else {
          uint64_t v38 = v134;
        }
        if (v34 < v26) {
          uint64_t v39 = v33;
        }
        else {
          uint64_t v39 = v27;
        }
        if (v34 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v40 = v26;
        }
        else {
          uint64_t v40 = v34;
        }
        if (v34 == 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v41 = v27;
        }
        else
        {
          uint64_t v37 = v32;
          uint64_t v41 = v33;
        }
        char v42 = v133;
        if (v133) {
          uint64_t v26 = v40;
        }
        else {
          uint64_t v26 = v36;
        }
        BOOL v43 = (v133 & 1) != 0 && v31 == 0x7FFFFFFFFFFFFFFFLL;
        LODWORD(v133) = v43;
        if (v42) {
          uint64_t v44 = v37;
        }
        else {
          uint64_t v44 = v38;
        }
        uint64_t v134 = v44;
        if (v42) {
          uint64_t v27 = v41;
        }
        else {
          uint64_t v27 = v39;
        }
      }
LABEL_3:
      uint64_t v31 = v28;
      goto LABEL_4;
    }
    if (v30)
    {
      if (v34 < 0) {
        goto LABEL_12;
      }
    }
    else if (v28 >= v34)
    {
      goto LABEL_12;
    }
    char v30 = 0;
    uint64_t v131 = v32;
    uint64_t v132 = (void (*)(char *, uint64_t))v33;
LABEL_4:
    v29 += 2;
    swift_bridgeObjectRelease();
    uint64_t v28 = v31;
    --v25;
  }
  while (v25);
  swift_bridgeObjectRelease();
  uint64_t v45 = swift_allocObject();
  char v46 = (char *)_swiftEmptyArrayStorage;
  *(void *)(v45 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = v132;
  if (!v132)
  {
    uint64_t v13 = v129;
    uint64_t v14 = v128;
    if (!v27) {
      goto LABEL_53;
    }
    goto LABEL_48;
  }
  char v46 = sub_1000D0D48(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v49 = *((void *)v46 + 2);
  unint64_t v48 = *((void *)v46 + 3);
  if (v49 >= v48 >> 1) {
    char v46 = sub_1000D0D48((char *)(v48 > 1), v49 + 1, 1, v46);
  }
  uint64_t v13 = v129;
  *((void *)v46 + 2) = v49 + 1;
  char v50 = &v46[16 * v49];
  *((void *)v50 + 4) = v131;
  *((void *)v50 + 5) = v47;
  *(void *)(v45 + 16) = v46;
  uint64_t v14 = v128;
  if (v27)
  {
LABEL_48:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v46 = sub_1000D0D48(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v52 = *((void *)v46 + 2);
    unint64_t v51 = *((void *)v46 + 3);
    if (v52 >= v51 >> 1) {
      char v46 = sub_1000D0D48((char *)(v51 > 1), v52 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v52 + 1;
    os_log_type_t v53 = &v46[16 * v52];
    *((void *)v53 + 4) = v134;
    *((void *)v53 + 5) = v27;
    *(void *)(v45 + 16) = v46;
  }
LABEL_53:
  uint64_t v22 = v127;
LABEL_54:
  defaultLogger()();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    uint64_t v137 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v57 = Array.description.getter();
    unint64_t v59 = v58;
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v136 = sub_10004C3A4(v57, v59, &v137);
    uint64_t v60 = v128;
    uint64_t v13 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Discovered closest possible fallbacks are %s", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v61 = *(void (**)(char *, uint64_t))(v60 + 8);
    v61(v127, v13);
  }
  else
  {

    uint64_t v61 = *(void (**)(char *, uint64_t))(v14 + 8);
    v61(v22, v13);
  }
  uint64_t v62 = v130;
  swift_beginAccess();
  uint64_t v63 = *(void **)(v45 + 16);
  uint64_t v64 = v63[2];
  if (v64)
  {
    uint64_t v134 = v45;
    if (v64 == 1)
    {
      uint64_t v66 = v63[4];
      unint64_t v65 = v63[5];
      swift_bridgeObjectRetain();
      uint64_t v62 = v113;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      BOOL v69 = os_log_type_enabled(v67, v68);
      uint64_t v133 = v66;
      if (v69)
      {
        uint64_t v132 = v61;
        uint64_t v70 = (uint8_t *)swift_slowAlloc();
        uint64_t v136 = swift_slowAlloc();
        *(_DWORD *)uint64_t v70 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_10004C3A4(v66, v65, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Encountered one possible fallback, falling back to %s", v70, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        int v71 = v113;
        goto LABEL_67;
      }
LABEL_68:

      swift_bridgeObjectRelease_n();
      v61(v62, v13);
    }
    else
    {
      uint64_t v76 = v111;
      uint64_t v77 = v110;
      uint64_t v78 = v112;
      (*(void (**)(char *, void, uint64_t))(v111 + 104))(v110, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v112);
      uint64_t v79 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
      unint64_t v65 = v80;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.debug.getter();
      BOOL v82 = os_log_type_enabled(v67, v81);
      uint64_t v133 = v79;
      if (!v82) {
        goto LABEL_68;
      }
      uint64_t v132 = v61;
      char v83 = (uint8_t *)swift_slowAlloc();
      uint64_t v136 = swift_slowAlloc();
      *(_DWORD *)char v83 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_10004C3A4(v79, v65, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v67, v81, "Encountered multiple possible fallback, falling back to %s", v83, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      int v71 = v130;
LABEL_67:
      v132(v71, v13);
    }
    if (qword_1001C03F8 != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for AnyCodable();
    uint64_t v85 = sub_100091338(v84, (uint64_t)qword_1001C4C90);
    uint64_t v86 = *(void *)(v84 - 8);
    uint64_t v87 = (uint64_t)v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v116, v85, v84);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v87, 0, 1, v84);
    uint64_t v88 = (uint64_t)v119;
    *uint64_t v119 = v133;
    *(void *)(v88 + 8) = v65;
    uint64_t v89 = v115;
    sub_1000D93C4(v87, v88 + *(int *)(v115 + 20));
    *(_OWORD *)(v88 + *(int *)(v89 + 24)) = xmmword_100176900;
    uint64_t v90 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    uint64_t v91 = v120;
    BOOL v92 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 104);
    uint64_t v93 = v117;
    uint64_t v94 = v122;
    v92(v117, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v122);
    uint64_t v133 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v96 = v95;
    uint64_t v97 = *(void (**)(char *, uint64_t))(v91 + 8);
    v97(v93, v94);
    uint64_t v98 = v118;
    v92(v118, v90, v94);
    uint64_t v99 = v126;
    swift_bridgeObjectRetain();
    uint64_t v100 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v102 = v101;
    v97(v98, v94);
    uint64_t v103 = v121;
    uint64_t v104 = v124;
    sub_1000D948C(v88, (uint64_t)v124 + *(int *)(v121 + 28), type metadata accessor for CredentialElement);
    uint64_t *v104 = v133;
    v104[1] = v96;
    v104[2] = v125;
    v104[3] = v99;
    v104[4] = v100;
    v104[5] = v102;
    uint64_t v105 = (uint64_t (**)())((char *)v104 + *(int *)(v103 + 32));
    *uint64_t v105 = sub_1000D7760;
    v105[1] = 0;
    uint64_t v106 = (uint64_t (**)())((char *)v104 + *(int *)(v103 + 36));
    uint8_t *v106 = sub_1000D7760;
    v106[1] = 0;
    sub_100006CC8(&qword_1001C32C8);
    unint64_t v107 = (*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_1001768E0;
    sub_1000DA960((uint64_t)v104, v75 + v107, type metadata accessor for ElementFallback);
    sub_1000D942C(v88, type metadata accessor for CredentialElement);
    swift_release();
  }
  else
  {
    defaultLogger()();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "No possible fallbacks, not falling back", v74, 2u);
      swift_slowDealloc();
    }

    v61(v114, v13);
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return (void *)v75;
}

uint64_t sub_1000DA8E8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DA920()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DA958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D7598(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_1000DA960(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000DA9C8(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v1;
  int64_t v5 = *((void *)*v1 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = sub_1000D0D48(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v4 + 2);
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_1000EE6DC((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_47;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_100044DD8();
    *uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  int64_t v2 = *((void *)v4 + 2);
  uint64_t v3 = v38[0];
  uint64_t v37 = v38[1];
  uint64_t v13 = v39;
  int64_t v6 = v40;
  if (v41)
  {
    unint64_t v17 = (v41 - 1) & v41;
    unint64_t v18 = __clz(__rbit64(v41)) | (v40 << 6);
    int64_t v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_47:
  int64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_65;
  }
  int64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  unint64_t v33 = *(void *)(v37 + 8 * v32);
  int64_t v34 = v6 + 1;
  if (!v33)
  {
    int64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    unint64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      int64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        unint64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          unint64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            int64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              unint64_t v33 = *(void *)(v37 + 8 * v35++);
            }
            while (!v33);
            int64_t v34 = v35 - 1;
          }
        }
      }
    }
  }
  unint64_t v17 = (v33 - 1) & v33;
  unint64_t v18 = __clz(__rbit64(v33)) + (v34 << 6);
  int64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v18);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = *((void *)v4 + 3);
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v23) {
      goto LABEL_25;
    }
LABEL_19:
    *((void *)v4 + 2) = v2;
  }
  uint64_t result = (uint64_t)sub_1000D0D48((char *)(v22 > 1), v2 + 1, 1, v4);
  uint64_t v4 = (char *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_19;
  }
  while (1)
  {
LABEL_25:
    uint64_t v27 = &v4[16 * v2 + 32];
    *(void *)uint64_t v27 = v21;
    *((void *)v27 + 1) = v20;
    ++v2;
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v25 = v24 | (v6 << 6);
      goto LABEL_24;
    }
    int64_t v28 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v28 >= v36) {
      goto LABEL_44;
    }
    unint64_t v29 = *(void *)(v37 + 8 * v28);
    int64_t v30 = v6 + 1;
    if (!v29)
    {
      int64_t v30 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_44;
      }
      unint64_t v29 = *(void *)(v37 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_44;
        }
        unint64_t v29 = *(void *)(v37 + 8 * v30);
        if (!v29)
        {
          int64_t v30 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_44;
          }
          unint64_t v29 = *(void *)(v37 + 8 * v30);
          if (!v29)
          {
            int64_t v30 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_44;
            }
            unint64_t v29 = *(void *)(v37 + 8 * v30);
            if (!v29)
            {
              int64_t v31 = v6 + 6;
              while (v36 != v31)
              {
                unint64_t v29 = *(void *)(v37 + 8 * v31++);
                if (v29)
                {
                  int64_t v30 = v31 - 1;
                  goto LABEL_41;
                }
              }
LABEL_44:
              *((void *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v25 = __clz(__rbit64(v29)) + (v30 << 6);
    int64_t v6 = v30;
LABEL_24:
    uint64_t v26 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v25);
    uint64_t v21 = *v26;
    uint64_t v20 = v26[1];
    uint64_t result = swift_bridgeObjectRetain();
    if (v2 >= v23) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t sub_1000DAD90(uint64_t a1)
{
  return sub_1000DAF3C(a1, (uint64_t (*)(void))sub_1000D0F68, type metadata accessor for ElementFallback);
}

uint64_t sub_1000DADBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000D0D48(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000DAF10(uint64_t a1)
{
  return sub_1000DAF3C(a1, (uint64_t (*)(void))sub_1000D0F9C, type metadata accessor for CredentialElement);
}

uint64_t sub_1000DAF3C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000DB0F8(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v3[19] = *(void *)(type metadata accessor for PresentmentProposal() - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v5 = sub_100006CC8(&qword_1001C36D0);
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  v3[28] = v6;
  v3[29] = *(void *)(v6 - 8);
  v3[30] = swift_task_alloc();
  sub_100006CC8(&qword_1001C14B8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ISO18013ReaderRequest.DocRequest();
  v3[33] = v7;
  v3[34] = *(void *)(v7 - 8);
  v3[35] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2840);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013ReaderRequest();
  v3[38] = v8;
  v3[39] = *(void *)(v8 - 8);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[42] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  v3[43] = v9;
  v3[44] = *(void *)(v9 - 8);
  v3[45] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v3[46] = v10;
  v3[47] = *(void *)(v10 - 8);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  return _swift_task_switch(sub_1000DB51C, 0, 0);
}

uint64_t sub_1000DB51C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter interpretRequest", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[49];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[47];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[50] = v7;
  v0[51] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  static IDCSSignposts.presentmentInterpretRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[52] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000DB688;
  uint64_t v9 = v0[40];
  uint64_t v10 = v0[36];
  uint64_t v11 = v0[17];
  return sub_1000DDA20(v9, v10, v11);
}

uint64_t sub_1000DB688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[53] = a1;
  v4[54] = a2;
  v4[55] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000DCF18;
  }
  else {
    uint64_t v5 = sub_1000DB7A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DB7A0()
{
  uint64_t v47 = v0;
  uint64_t v2 = v0[36];
  uint64_t v1 = v0[37];
  (*(void (**)(void, void, void))(v0[39] + 32))(v0[41], v0[40], v0[38]);
  sub_100037944(v2, v1, &qword_1001C2840);
  uint64_t v3 = ISO18013ReaderRequest.version.getter();
  uint64_t v5 = sub_10016ACD8(v3, v4);
  LOBYTE(v2) = v6;
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0 || v5 != (void *)1)
  {
    uint64_t v18 = v0[53];
    unint64_t v41 = v0[54];
    uint64_t v45 = v0[41];
    uint64_t v19 = v0[39];
    uint64_t v43 = v0[38];
    uint64_t v40 = v0[37];
    (*(void (**)(void, void, void))(v0[23] + 104))(v0[24], enum case for DIPError.Code.idcsUnsupportedReaderRequestVersion(_:), v0[22]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v18, v41);
    sub_100014BBC(v40, &qword_1001C2840);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v45, v43);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v20 = v0[23];
    uint64_t v21 = v0[24];
    uint64_t v22 = v0[22];
    (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v21, enum case for DIPError.Code.internalError(_:), v22);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  else
  {
    uint64_t v7 = (void *)v0[17];
    defaultLogger()();
    id v8 = v7;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (void *)v0[17];
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      id v13 = [v11 regionCode];
      if (v13)
      {
        unint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v17 = 0xE000000000000000;
      }
      uint64_t v44 = (void (*)(uint64_t, uint64_t))v0[50];
      uint64_t v42 = v0[48];
      uint64_t v29 = v0[46];
      int64_t v30 = (void *)v0[17];
      v0[15] = sub_10004C3A4(v15, v17, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "PresentmentRequestInterpreter interpretRequest regionCode %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v44(v42, v29);
    }
    else
    {
      unint64_t v25 = (void (*)(uint64_t, uint64_t))v0[50];
      uint64_t v26 = v0[48];
      uint64_t v27 = v0[46];
      int64_t v28 = (void *)v0[17];

      v25(v26, v27);
    }
    int64_t v31 = (void *)v0[17];
    uint64_t v32 = ISO18013ReaderRequest.docRequests.getter();
    v0[56] = v32;
    id v33 = [v31 regionCode];
    if (v33)
    {
      int64_t v34 = v33;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v37 = 0;
    }
    v0[57] = v37;
    uint64_t v38 = (void *)swift_task_alloc();
    v0[58] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_1000DBE0C;
    uint64_t v39 = v0[35];
    return sub_1000E1BC0(v39, v32, v35, v37);
  }
}

uint64_t sub_1000DBE0C()
{
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1000DD188;
  }
  else {
    uint64_t v2 = sub_1000DBF5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DBF5C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 480) = v2;
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 80);
  *(unsigned char *)(v0 + 600) = v1;
  if (v1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000DC018;
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 280);
  return sub_1000DF570(v6, v3, v5);
}

uint64_t sub_1000DC018(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 496) = a1;
  *(void *)(v6 + 504) = a2;
  *(void *)(v6 + 512) = a3;
  *(unsigned char *)(v6 + 601) = a4;
  *(void *)(v6 + 520) = v4;
  swift_task_dealloc();
  if (v4) {
    uint64_t v7 = sub_1000DD434;
  }
  else {
    uint64_t v7 = sub_1000DC138;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000DC138()
{
  id v1 = *(id *)(v0 + 496);
  id v2 = *(id *)(v0 + 512);
  if (!v1)
  {
    id v3 = [*(id *)(v0 + 136) relyingPartyIdentifier];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v6 = *(void *)(v0 + 248);
      uint64_t v5 = *(void *)(v0 + 256);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      uint64_t v10 = type metadata accessor for URL();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      v11(v5, 1, 1, v10);
      v11(v6, 1, 1, v10);
      id v12 = objc_allocWithZone((Class)DCPresentmentProposalReaderMetadata);
      id v1 = sub_1000EDFBC(v7, v9, 0, 0, 0, 0, 0, 0xF000000000000000, v5, 0, 0, v6, 0);
    }
    else
    {
      id v1 = 0;
    }
  }
  *(void *)(v0 + 528) = v1;
  uint64_t v13 = *(void *)(v0 + 208);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 200);
  uint64_t v16 = *(void *)(v0 + 144);
  id v17 = *(id *)(v0 + 496);
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  CBOREncodedCBOR.value.getter();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  uint64_t v18 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
  uint64_t v20 = v19;
  uint64_t v21 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
  sub_10012B2C8(v18, v20, v21, *(void *)(v16 + 32), v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 80))
  {
    sub_100014BBC(v0 + 56, &qword_1001C3710);
    goto LABEL_9;
  }
  sub_10002C468((long long *)(v0 + 56), v0 + 16);
  uint64_t v22 = *(void *)(v0 + 40);
  uint64_t v23 = *(void *)(v0 + 48);
  sub_100014D14((void *)(v0 + 16), v22);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23))
  {
    sub_10000B9DC(v0 + 16);
LABEL_9:
    id v24 = [*(id *)(v0 + 136) regionCode];
    if (v24)
    {
      unint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v28 = 0;
    }
    *(void *)(v0 + 536) = v28;
    id v38 = [*(id *)(v0 + 136) requiredPublicKeyIdentifier];
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v42 = 0xF000000000000000;
    }
    *(void *)(v0 + 552) = v42;
    *(void *)(v0 + 544) = v40;
    uint64_t v43 = *(void **)(v0 + 512);
    if (v43)
    {
      id v44 = v43;
      uint64_t v45 = SecCertificateRef.derRepresentation()();
      uint64_t v47 = v46;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v47 = 0xF000000000000000;
    }
    *(void *)(v0 + 568) = v47;
    *(void *)(v0 + 560) = v45;
    int v48 = *(unsigned __int8 *)(v0 + 600);
    uint64_t v49 = *(void *)(v0 + 480);
    char v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v50;
    *char v50 = v0;
    v50[1] = sub_1000DC89C;
    if (v48) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = v49;
    }
    uint64_t v52 = *(void *)(v0 + 240);
    return sub_1000E3A88(v52, v26, v28, v40, v42, v51, v45, v47);
  }
  uint64_t v29 = *(void **)(v0 + 512);
  uint64_t v56 = *(void **)(v0 + 504);
  uint64_t v53 = *(void *)(v0 + 424);
  unint64_t v54 = *(void *)(v0 + 432);
  uint64_t v30 = *(void *)(v0 + 312);
  uint64_t v62 = *(void *)(v0 + 304);
  uint64_t v63 = *(void *)(v0 + 328);
  uint64_t v60 = *(void *)(v0 + 280);
  uint64_t v61 = *(void *)(v0 + 296);
  os_log_type_t v55 = v17;
  uint64_t v31 = *(void *)(v0 + 272);
  uint64_t v32 = *(void *)(v0 + 232);
  uint64_t v58 = *(void *)(v0 + 240);
  uint64_t v59 = *(void *)(v0 + 264);
  uint64_t v57 = *(void *)(v0 + 224);
  (*(void (**)(void, void, void))(*(void *)(v0 + 184) + 104))(*(void *)(v0 + 192), enum case for DIPError.Code.idcsRestrictedElementRequested(_:), *(void *)(v0 + 176));
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_100009764(v53, v54);

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v58, v57);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v60, v59);
  sub_100014BBC(v61, &qword_1001C2840);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v63, v62);
  sub_10000B9DC(v0 + 16);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v33 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 176);
  (*(void (**)(void, void))(*(void *)(v0 + 352) + 8))(*(void *)(v0 + 360), *(void *)(v0 + 344));
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v33, enum case for DIPError.Code.internalError(_:), v35);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_1000DC89C(uint64_t a1)
{
  id v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[73] = a1;
  v4[74] = v1;
  swift_task_dealloc();
  unint64_t v5 = v3[69];
  uint64_t v6 = v3[68];
  sub_100009764(v3[70], v3[71]);
  sub_100009764(v6, v5);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v7 = sub_1000DD700;
  }
  else {
    uint64_t v7 = sub_1000DCA48;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000DCA48()
{
  uint64_t v1 = v0[73];
  id v2 = (void *)sub_10004B018((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3)
  {
LABEL_14:
    uint64_t v42 = (void *)v0[66];
    uint64_t v29 = (void *)v0[63];
    uint64_t v28 = (void *)v0[64];
    uint64_t v39 = (void *)v0[62];
    uint64_t v47 = v0[53];
    uint64_t v48 = v0[54];
    uint64_t v49 = v0[45];
    uint64_t v50 = v0[44];
    uint64_t v51 = v0[43];
    uint64_t v30 = v0[39];
    uint64_t v43 = v0[38];
    uint64_t v44 = v0[41];
    uint64_t v46 = v0[37];
    uint64_t v31 = v0[34];
    uint64_t v40 = v0[33];
    uint64_t v41 = v0[35];
    uint64_t v32 = v0[30];
    uint64_t v33 = v0[28];
    uint64_t v34 = v0[29];
    uint64_t v45 = v0[18];
    uint64_t v35 = (void *)v0[16];
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v41, v40);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v44, v43);
    uint64_t v36 = type metadata accessor for PresentmentRequestInterpretation(0);
    sub_100037944(v46, (uint64_t)v35 + *(int *)(v36 + 24), &qword_1001C2840);
    uint64_t v37 = v45 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator;
    swift_beginAccess();
    sub_100037898(v37, (uint64_t)v35 + *(int *)(v36 + 28), &qword_1001C2920);
    *uint64_t v35 = v2;
    v35[1] = v47;
    uint64_t v35[2] = v48;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[73] + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = *(void *)(v4 + 72);
  uint64_t v52 = v0;
  while (1)
  {
    uint64_t v53 = v3;
    uint64_t v9 = v0[20];
    uint64_t v8 = (id *)v0[21];
    sub_1000F0FE0(v5, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    id v10 = [*v8 credentialIdentifier];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    sub_1000F0FE0((uint64_t)v8, v9, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = sub_10013C484(v11, v13);
    uint64_t v17 = v2[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t result = v17 + v18;
    if (__OFADD__(v17, v18))
    {
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
    char v20 = v15;
    if (v2[3] < result) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_10009ACA0();
    }
LABEL_11:
    uint64_t v0 = v52;
    uint64_t v23 = v52[20];
    if (v20)
    {
      sub_1000F1558(v23, v2[7] + v16 * v6);
    }
    else
    {
      v2[(v16 >> 6) + 8] |= 1 << v16;
      id v24 = (uint64_t *)(v2[6] + 16 * v16);
      uint64_t *v24 = v11;
      v24[1] = v13;
      uint64_t result = sub_1000F0DFC(v23, v2[7] + v16 * v6);
      uint64_t v25 = v2[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_21;
      }
      v2[2] = v27;
      swift_bridgeObjectRetain();
    }
    uint64_t v7 = v52[21];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F0E60(v7, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    v5 += v6;
    uint64_t v3 = v53 - 1;
    if (v53 == 1) {
      goto LABEL_14;
    }
  }
  sub_100098E30(result, isUniquelyReferenced_nonNull_native);
  unint64_t v21 = sub_10013C484(v11, v13);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    goto LABEL_11;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1000DCF18()
{
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[22];
  (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000DD188()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[37];
  sub_100009764(v0[53], v0[54]);
  sub_100014BBC(v4, &qword_1001C2840);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[22];
  (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v6, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000DD434()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[37];
  uint64_t v6 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v7 = v0[33];
  sub_100009764(v0[53], v0[54]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_100014BBC(v4, &qword_1001C2840);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v8 = v0[23];
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[22];
  (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v9, enum case for DIPError.Code.internalError(_:), v10);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000DD700()
{
  char v15 = (void *)v0[66];
  uint64_t v2 = (void *)v0[63];
  uint64_t v1 = (void *)v0[64];
  uint64_t v3 = (void *)v0[62];
  uint64_t v4 = v0[39];
  uint64_t v18 = v0[38];
  uint64_t v19 = v0[41];
  uint64_t v5 = v0[34];
  uint64_t v16 = v0[35];
  uint64_t v17 = v0[37];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[29];
  uint64_t v8 = v0[30];
  uint64_t v9 = v0[28];
  sub_100009764(v0[53], v0[54]);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v16, v6);
  sub_100014BBC(v17, &qword_1001C2840);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v19, v18);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[24];
  uint64_t v12 = v0[22];
  (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v11, enum case for DIPError.Code.internalError(_:), v12);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000DDA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ISO18013ReaderRequest();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ISO18013SessionEstablishment();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost();
  v4[19] = v8;
  v4[20] = *(void *)(v8 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  uint64_t v9 = sub_100006CC8(&qword_1001C36F0);
  v4[23] = v9;
  v4[24] = *(void *)(v9 - 8);
  v4[25] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2840);
  v4[26] = swift_task_alloc();
  sub_100006CC8(&qword_1001C1A90);
  v4[27] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ISO18013CodingKeyFormat();
  v4[28] = v10;
  v4[29] = *(void *)(v10 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v4[32] = v11;
  v4[33] = *(void *)(v11 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  return _swift_task_switch(sub_1000DDE04, 0, 0);
}

uint64_t sub_1000DDE04()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter extractReaderRequest", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[36];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[33];
  uint64_t v7 = (void *)v0[4];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[37] = v8;
  v0[38] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  id v9 = [v7 sessionEstablishment];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (void *)v0[4];
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    v0[39] = v12;
    v0[40] = v14;
    id v15 = [v11 sessionTranscript];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = v0[5];
      uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      uint64_t v80 = v18;
      v0[41] = v18;
      v0[42] = v20;
      type metadata accessor for CBORDecoder();
      swift_allocObject();
      v0[43] = CBORDecoder.init()();
      uint64_t v21 = v0[31];
      if (*(unsigned char *)(v17 + 80))
      {
        (*(void (**)(void, void, void))(v0[29] + 104))(v0[31], enum case for ISO18013CodingKeyFormat.standard(_:), v0[28]);
      }
      else
      {
        uint64_t v22 = v0[29];
        uint64_t v23 = v0[30];
        unint64_t v24 = v20;
        uint64_t v25 = v0[28];
        DCPresentmentMessageEncodingFormat.codingKeyFormat.getter(*(void *)(v0[5] + 72), v23);
        uint64_t v26 = v25;
        unint64_t v20 = v24;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v23, v26);
      }
      uint64_t v27 = v0[3];
      CBORDecoder.codingKeyFormat.setter();
      uint64_t v28 = type metadata accessor for ISO18013SessionTranscript();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
      v29(v27, 1, 1, v28);
      switch(v20 >> 62)
      {
        case 1uLL:
          if ((int)v80 != v80 >> 32) {
            goto LABEL_12;
          }
          goto LABEL_18;
        case 2uLL:
          if (*(void *)(v80 + 16) == *(void *)(v80 + 24)) {
            goto LABEL_18;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_18;
        default:
          if ((v20 & 0xFF000000000000) != 0)
          {
LABEL_12:
            uint64_t v75 = v29;
            uint64_t v78 = v12;
            unint64_t v79 = v14;
            uint64_t v30 = v0[35];
            uint64_t v31 = v0[27];
            uint64_t v76 = v0[32];
            uint64_t v32 = v0[5];
            defaultLogger()();
            uint64_t v33 = swift_task_alloc();
            *(void *)(v33 + 16) = v80;
            *(void *)(v33 + 24) = v20;
            Logger.sensitive(_:)();
            swift_task_dealloc();
            v8(v30, v76);
            uint64_t v34 = *(void *)(v32 + 32);
            uint64_t v35 = type metadata accessor for ISO18013PresentmentType();
            uint64_t v36 = *(void *)(v35 - 8);
            uint64_t v37 = (unsigned int *)&enum case for ISO18013PresentmentType.digital(_:);
            if (v34 != 1) {
              uint64_t v37 = (unsigned int *)&enum case for ISO18013PresentmentType.physical(_:);
            }
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v31, *v37, v35);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v31, 0, 1, v35);
            CBORDecoder.presentmentType.setter();
            sub_1000F140C();
            dispatch thunk of CBORDecoder.decode<A>(_:from:)();
            uint64_t v77 = v0[3];
            uint64_t v72 = v0[25];
            uint64_t v71 = v0[26];
            uint64_t v73 = v0[23];
            uint64_t v74 = v0[24];
            CBOREncodedCBOR.value.getter();
            (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
            sub_100014BBC(v77, &qword_1001C2840);
            v75(v71, 0, 1, v28);
            sub_100037944(v71, v77, &qword_1001C2840);
            uint64_t v12 = v78;
            unint64_t v14 = v79;
          }
          else
          {
LABEL_18:
            defaultLogger()();
            id v38 = Logger.logObject.getter();
            os_log_type_t v39 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v38, v39))
            {
              uint64_t v40 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v40 = 0;
              _os_log_impl((void *)&_mh_execute_header, v38, v39, "Session transcript is empty", v40, 2u);
              swift_slowDealloc();
            }
            uint64_t v41 = v0[34];
            uint64_t v42 = v0[32];

            v8(v41, v42);
          }
          uint64_t v43 = v0[35];
          uint64_t v44 = v0[32];
          uint64_t v45 = (void *)v0[4];
          defaultLogger()();
          uint64_t v46 = swift_task_alloc();
          *(void *)(v46 + 16) = v12;
          *(void *)(v46 + 24) = v14;
          Logger.sensitive(_:)();
          swift_task_dealloc();
          v8(v43, v44);
          id v47 = [v45 sessionEncryptionIntermediateKeyMaterial];
          uint64_t v48 = v0[35];
          uint64_t v49 = v0[32];
          if (v47)
          {
            uint64_t v50 = v47;
            uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v53 = v52;

            defaultLogger()();
            uint64_t v54 = swift_task_alloc();
            *(void *)(v54 + 16) = v51;
            *(void *)(v54 + 24) = v53;
            Logger.sensitive(_:)();
            swift_task_dealloc();
            v8(v48, v49);
            sub_1000035EC(v51, v53);
          }
          else
          {
            defaultLogger()();
            Logger.sensitive(_:)();
            v8(v48, v49);
          }
          static IDCSSignposts.presentmentDecodeSessionEstablishment.getter();
          DIPSignpost.init(_:)();
          sub_1000F14D8(&qword_1001C3700, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionEstablishment);
          dispatch thunk of CBORDecoder.decode<A>(_:from:)();
          v0[44] = 0;
          uint64_t v57 = v0[17];
          uint64_t v59 = v0[14];
          uint64_t v58 = v0[15];
          uint64_t v60 = v0[13];
          uint64_t v61 = (void *)v0[4];
          uint64_t v62 = v0[5];
          (*(void (**)(uint64_t, void, uint64_t))(v59 + 32))(v57, v0[16], v60);
          v63._countAndFlagsBits = 0xD000000000000061;
          v63._object = (void *)0x8000000100180EA0;
          v64._countAndFlagsBits = 0x6232653638363036;
          v64._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v64, v63);
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          uint64_t v65 = *(void *)(v62 + 24);
          v0[45] = v65;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v58, v57, v60);
          id v66 = [v61 sessionEncryptionIntermediateKeyMaterial];
          if (v66)
          {
            uint64_t v67 = v66;
            uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v70 = v69;
          }
          else
          {
            uint64_t v68 = 0;
            unint64_t v70 = 0xF000000000000000;
          }
          v0[46] = v68;
          v0[47] = v70;
          uint64_t result = _swift_task_switch(sub_1000DEBE8, v65, 0);
          break;
      }
      return result;
    }
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v12, v14);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionEstablishment(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v55 = (uint64_t (*)(void))v0[1];
  return v55();
}

uint64_t sub_1000DEBE8()
{
  uint64_t v2 = v0[46];
  unint64_t v1 = v0[47];
  uint64_t v3 = v0[44];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v7 = sub_1000537F0(v4, v0[41], v0[42], v2, v1);
  v0[48] = v3;
  v0[49] = v7;
  v0[50] = v8;
  id v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[51] = v9;
  v0[52] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v4, v6);
  sub_100009764(v2, v1);
  if (v3) {
    uint64_t v10 = sub_1000DF38C;
  }
  else {
    uint64_t v10 = sub_1000DECD0;
  }
  return _swift_task_switch(v10, 0, 0);
}

uint64_t sub_1000DECD0()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v47 = *(void *)(v0 + 384);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 256);
  v6._countAndFlagsBits = 0xD000000000000053;
  v6._object = (void *)0x8000000100180F10;
  v7._countAndFlagsBits = 0x3738393861336365;
  v7._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v7, v6);
  defaultLogger()();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v1;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v3(v4, v5);
  static IDCSSignposts.presentmentDecodeReaderRequest.getter();
  DIPSignpost.init(_:)();
  sub_1000F14D8(&qword_1001C3708, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  if (v47)
  {
    uint64_t v9 = *(void *)(v0 + 392);
    unint64_t v37 = *(void *)(v0 + 400);
    unint64_t v10 = *(void *)(v0 + 320);
    uint64_t v38 = *(void *)(v0 + 328);
    unint64_t v39 = *(void *)(v0 + 336);
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v44 = *(void *)(v0 + 176);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v41 = *(void *)(v0 + 104);
    uint64_t v42 = *(void *)(v0 + 136);
    uint64_t v43 = *(void *)(v0 + 24);
    (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for DIPError.Code.idcsInvalidReaderRequest(_:), *(void *)(v0 + 48));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v11, v10);
    sub_1000035EC(v9, v37);
    swift_release();
    swift_errorRelease();
    sub_1000035EC(v38, v39);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v14(v40, v13);
    v45(v42, v41);
    v14(v44, v13);
    sub_100014BBC(v43, &qword_1001C2840);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 392);
    unint64_t v17 = *(void *)(v0 + 400);
    uint64_t v20 = *(void *)(v0 + 312);
    unint64_t v19 = *(void *)(v0 + 320);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v24 = *(void *)(v0 + 16);
    uint64_t v48 = *(void *)(v0 + 336) >> 62;
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 32))(v21, *(void *)(v0 + 88), v23);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1000035EC(v20, v19);
    sub_1000035EC(v18, v17);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24, v21, v23);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    switch(v48)
    {
      case 1:
        uint64_t v27 = *(void *)(v0 + 328);
        uint64_t v26 = (int)v27;
        uint64_t v25 = v27 >> 32;
        break;
      case 2:
        uint64_t v28 = *(void *)(v0 + 328);
        uint64_t v26 = *(void *)(v28 + 16);
        uint64_t v25 = *(void *)(v28 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v26 = 0;
        uint64_t v25 = *(unsigned __int8 *)(v0 + 342);
        break;
    }
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    uint64_t v30 = *(void *)(v0 + 168);
    uint64_t v49 = *(void *)(v0 + 176);
    uint64_t v31 = *(void *)(v0 + 152);
    uint64_t v32 = *(void *)(v0 + 160);
    uint64_t v33 = *(void *)(v0 + 136);
    uint64_t v34 = *(void *)(v0 + 104);
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v35(v30, v31);
    v29(v33, v34);
    v35(v49, v31);
    if (v26 == v25)
    {
      sub_1000035EC(*(void *)(v0 + 328), *(void *)(v0 + 336));
      uint64_t v46 = 0;
      unint64_t v50 = 0xF000000000000000;
    }
    else
    {
      uint64_t v46 = *(void *)(v0 + 328);
      unint64_t v50 = *(void *)(v0 + 336);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
    return v36(v46, v50);
  }
}

uint64_t sub_1000DF38C()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[51];
  unint64_t v1 = v0[42];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[13];
  uint64_t v8 = v0[3];
  sub_1000035EC(v0[39], v0[40]);
  swift_release();
  sub_1000035EC(v2, v1);
  v11(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_100014BBC(v8, &qword_1001C2840);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

unint64_t sub_1000DF554()
{
  return 0xD000000000000039;
}

uint64_t sub_1000DF570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[120] = v3;
  v4[119] = a3;
  v4[118] = a2;
  v4[117] = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[121] = v5;
  v4[122] = *(void *)(v5 - 8);
  v4[123] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2920);
  v4[124] = swift_task_alloc();
  v4[125] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  v4[126] = v6;
  v4[127] = *(void *)(v6 - 8);
  v4[128] = swift_task_alloc();
  v4[129] = swift_task_alloc();
  uint64_t v7 = sub_100006CC8(&qword_1001C36D0);
  v4[130] = v7;
  v4[131] = *(void *)(v7 - 8);
  v4[132] = swift_task_alloc();
  v4[133] = swift_task_alloc();
  v4[134] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2838);
  v4[135] = swift_task_alloc();
  v4[136] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for IdentityReaderAuthenticator();
  v4[137] = v8;
  v4[138] = *(void *)(v8 - 8);
  v4[139] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2840);
  v4[140] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ISO18013SessionTranscript();
  v4[141] = v9;
  v4[142] = *(void *)(v9 - 8);
  v4[143] = swift_task_alloc();
  v4[144] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[145] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  v4[146] = v10;
  v4[147] = *(void *)(v10 - 8);
  v4[148] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v4[149] = v11;
  v4[150] = *(void *)(v11 - 8);
  v4[151] = swift_task_alloc();
  v4[152] = swift_task_alloc();
  v4[153] = swift_task_alloc();
  v4[154] = swift_task_alloc();
  v4[155] = swift_task_alloc();
  v4[156] = swift_task_alloc();
  return _swift_task_switch(sub_1000DF9C0, 0, 0);
}

uint64_t sub_1000DF9C0()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter performReaderAuth", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[156];
  uint64_t v5 = v0[150];
  uint64_t v6 = v0[149];
  uint64_t v7 = v0[118];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[157] = v8;
  v0[158] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v6);
  static IDCSSignposts.presentmentReaderAuth.getter();
  DIPSignpost.init(_:)();
  if (v7 != 1)
  {
    if (!v7)
    {
      defaultLogger()();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Skipping reader authentication because session policy is set to none", v11, 2u);
        swift_slowDealloc();
      }
      uint64_t v12 = v0[155];
      uint64_t v13 = v0[149];

      v8(v12, v13);
      id v62 = [objc_allocWithZone((Class)DCPresentmentProposalReaderAnalytics) initWithTrusted:0 untrustedIdentifier:0 untrustedOrganization:0 untrustedIssuerIdentifier:0 untrustedIssuerOrganization:0];
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(void, void))(v0[147] + 8))(v0[148], v0[146]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v14 = (uint64_t (*)(void, id, void, uint64_t))v0[1];
      return v14(0, v62, 0, 2);
    }
    uint64_t v28 = v0[123];
    uint64_t v29 = v0[122];
    uint64_t v30 = v0[121];
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    id v31 = (id)DCCredentialReaderAuthenticationPolicyToString();
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    v35._countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for DIPError.Code.idcsInvalidReaderAuthenticationPolicy(_:), v30);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_15;
  }
  defaultLogger()();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Performing optional identity reader authentication policy", v18, 2u);
    swift_slowDealloc();
  }
  uint64_t v19 = v0[154];
  uint64_t v20 = v0[149];
  uint64_t v21 = v0[142];
  uint64_t v22 = v0[141];
  uint64_t v23 = v0[140];
  uint64_t v24 = v0[119];

  v8(v19, v20);
  sub_100037898(v24, v23, &qword_1001C2840);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    uint64_t v25 = v0[123];
    uint64_t v26 = v0[122];
    uint64_t v27 = v0[121];
    sub_100014BBC(v0[140], &qword_1001C2840);
    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v25, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v27);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_15:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(void, void))(v0[147] + 8))(v0[148], v0[146]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
  uint64_t v37 = v0[144];
  uint64_t v63 = v0[143];
  uint64_t v38 = v0[142];
  uint64_t v39 = v0[139];
  uint64_t v40 = v0[134];
  uint64_t v52 = v0[141];
  uint64_t v53 = v0[133];
  uint64_t v41 = v0[131];
  uint64_t v42 = v0[130];
  uint64_t v54 = v0[129];
  uint64_t v57 = v0[136];
  uint64_t v58 = v0[127];
  uint64_t v59 = v0[126];
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
  uint64_t v61 = (int *)v0[137];
  ((void (*)(uint64_t, void))v60)(v37, v0[140]);
  ISO18013ReaderRequest.DocRequest.readerAuth.getter();
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  uint64_t v43 = CBOREncodedCBOR.dataValue.getter();
  uint64_t v55 = v44;
  uint64_t v56 = v43;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v0[159] = v45;
  v0[160] = (v41 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v45(v40, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v63, v37, v52);
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  CBOREncodedCBOR.value.getter();
  v45(v53, v42);
  uint64_t v46 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
  uint64_t v48 = v47;
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v54, v59);
  sub_100037944(v57, v39, &qword_1001C2838);
  uint64_t v49 = (uint64_t *)(v39 + v61[5]);
  uint64_t *v49 = v56;
  v49[1] = v55;
  v60(v39 + v61[6], v63, v52);
  unint64_t v50 = (uint64_t *)(v39 + v61[7]);
  *unint64_t v50 = v46;
  v50[1] = v48;
  *(void *)(v39 + v61[8]) = 0;
  *(unsigned char *)(v39 + v61[9]) = 2;
  uint64_t v51 = (void *)swift_task_alloc();
  v0[161] = v51;
  *uint64_t v51 = v0;
  v51[1] = sub_1000E0468;
  return sub_10012C59C((uint64_t)(v0 + 16));
}

uint64_t sub_1000E0468()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E1800;
  }
  else
  {
    long long v4 = *(_OWORD *)(v2 + 192);
    *(_OWORD *)(v2 + 1328) = *(_OWORD *)(v2 + 176);
    *(void *)(v2 + 1304) = *(void *)(v2 + 128);
    *(void *)(v2 + 1312) = *(void *)(v2 + 144);
    *(void *)(v2 + 1320) = *(void *)(v2 + 160);
    *(_OWORD *)(v2 + 1344) = v4;
    *(_OWORD *)(v2 + 1360) = *(_OWORD *)(v2 + 208);
    *(void *)(v2 + 1376) = *(void *)(v2 + 224);
    uint64_t v3 = sub_1000E05B0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E05B0()
{
  sub_100037944(v0 + 128, v0 + 352, &qword_1001C36E0);
  uint64_t v143 = v0 + 128;
  if (*(void *)(v0 + 352))
  {
    unint64_t v1 = *(void *)(v0 + 368);
    unint64_t v2 = *(void *)(v0 + 384);
    unint64_t v139 = *(void *)(v0 + 376);
    unint64_t v3 = *(void *)(v0 + 400);
    unint64_t v132 = *(void *)(v0 + 360);
    unint64_t v135 = *(void *)(v0 + 392);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    id v4 = [self standardUserDefaults];
    v5._countAndFlagsBits = 0xD000000000000021;
    v5._object = (void *)0x8000000100180C50;
    Swift::Bool v6 = NSUserDefaults.internalBool(forKey:)(v5);

    if (v6)
    {
      defaultLogger()();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Using mock reader metadata due to user defaults setting", v9, 2u);
        swift_slowDealloc();
      }
      os_log_type_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
      uint64_t v11 = *(void *)(v0 + 1224);
      uint64_t v12 = *(void *)(v0 + 1192);

      v10(v11, v12);
      unint64_t v135 = 0xD000000000000018;
      unint64_t v139 = 0xD000000000000011;
      unint64_t v3 = 0x8000000100180D20;
      unint64_t v2 = 0x8000000100180D00;
      unint64_t v1 = 0x8000000100180CE0;
      unint64_t v132 = 0xD000000000000010;
    }
    else
    {
      unint64_t v132 = 0;
      unint64_t v135 = 0;
      unint64_t v1 = 0;
      unint64_t v139 = 0;
      unint64_t v2 = 0;
      unint64_t v3 = 0;
    }
  }
  uint64_t v13 = *(void *)(v0 + 1104);
  uint64_t v14 = *(void *)(v0 + 1096);
  uint64_t v15 = *(void *)(v0 + 1000);
  uint64_t v16 = *(void *)(v0 + 992);
  uint64_t v17 = *(void *)(v0 + 960);
  sub_1000F0FE0(*(void *)(v0 + 1112), v15, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
  sub_100037944(v15, v16, &qword_1001C2920);
  uint64_t v18 = v17 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator;
  swift_beginAccess();
  sub_1000F1048(v16, v18, &qword_1001C2920);
  swift_endAccess();
  v19._countAndFlagsBits = 0xD00000000000005ELL;
  v19._object = (void *)0x8000000100180C80;
  v20._countAndFlagsBits = 0x3461653530636166;
  v20._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v20, v19);
  if (!v1)
  {
    uint64_t v41 = *(void *)(v0 + 1080);
    ISO18013ReaderRequest.DocRequest.readerAuth.getter();
    uint64_t v42 = type metadata accessor for COSE_Sign1();
    uint64_t v43 = *(void *)(v42 - 8);
    int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42);
    uint64_t v45 = *(void *)(v0 + 1080);
    uint64_t v46 = v0 + 128;
    if (v44 == 1)
    {
      sub_100014BBC(*(void *)(v0 + 1080), &qword_1001C2838);
      goto LABEL_56;
    }
    uint64_t v53 = (void *)COSE_Sign1.x509Chain.getter();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
    if (!v53) {
      goto LABEL_56;
    }
    if (v53[2])
    {
      uint64_t v55 = v53[4];
      unint64_t v54 = v53[5];
      sub_10000354C(v55, v54);
      CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
      SecCertificateRef v57 = SecCertificateCreateWithData(0, isa);

      if (v57)
      {
        unint64_t v58 = v53[2];
        if (v58 <= 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v134 = 0;
          uint64_t v138 = 0;
          uint64_t v92 = 0;
          uint64_t v142 = 0;
          uint64_t v64 = *(void *)(v0 + 1296);
        }
        else
        {
          uint64_t v59 = (uint64_t)&v53[2 * v58 + 4];
          uint64_t v60 = *(void *)(v59 - 16);
          unint64_t v61 = *(void *)(v59 - 8);
          sub_10000354C(v60, v61);
          swift_bridgeObjectRelease();
          CFDataRef v62 = Data._bridgeToObjectiveC()().super.isa;
          sub_1000035EC(v60, v61);
          SecCertificateRef v63 = SecCertificateCreateWithData(kCFAllocatorDefault, v62);

          uint64_t v64 = *(void *)(v0 + 1296);
          if (!v63)
          {
LABEL_53:
            uint64_t v134 = 0;
            uint64_t v138 = 0;
            uint64_t v92 = 0;
            uint64_t v142 = 0;
            goto LABEL_54;
          }
          uint64_t v65 = v63;
          sub_100096950((uint64_t *)(v0 + 784));
          if (v64)
          {

            defaultLogger()();
            swift_errorRetain();
            swift_errorRetain();
            id v66 = Logger.logObject.getter();
            os_log_type_t v67 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v66, v67))
            {
              unint64_t v141 = v66;
              uint64_t v68 = (uint8_t *)swift_slowAlloc();
              uint64_t v122 = (void *)swift_slowAlloc();
              bufa = v68;
              *(_DWORD *)uint64_t v68 = 138412290;
              swift_errorRetain();
              uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)(v0 + 928) = v69;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v122 = v69;
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v141, v67, "Failed to extract distinguished names from reader certificate's root issuer (non-fatal): %@", bufa, 0xCu);
              sub_100006CC8(&qword_1001C1350);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
              uint64_t v65 = (__SecCertificate *)v66;
            }
            swift_errorRelease();

            (*(void (**)(void, void))(v0 + 1256))(*(void *)(v0 + 1208), *(void *)(v0 + 1192));
            uint64_t v64 = 0;
            goto LABEL_53;
          }

          uint64_t v134 = *(void *)(v0 + 784);
          uint64_t v142 = *(void *)(v0 + 792);
          uint64_t v138 = *(void *)(v0 + 800);
          uint64_t v92 = *(void *)(v0 + 808);
          sub_100037944(v0 + 816, v0 + 912, &qword_1001C0860);
          sub_1000F11A0(v0 + 912);
        }
LABEL_54:
        uint64_t v93 = v57;
        sub_100096950((uint64_t *)(v0 + 736));
        uint64_t v94 = v64;
        uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
        uint64_t v96 = *(void *)(v0 + 1216);
        uint64_t v97 = *(void *)(v0 + 1192);
        if (!v94)
        {
          uint64_t v119 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
          uint64_t v121 = *(void *)(v0 + 1136);
          uint64_t v124 = *(void *)(v0 + 1128);
          bufb = *(uint8_t **)(v0 + 1152);
          uint64_t v117 = *(void *)(v0 + 1112);

          uint64_t v115 = v97;
          uint64_t v103 = *(void *)(v0 + 736);
          uint64_t v129 = v55;
          unint64_t v131 = v54;
          uint64_t v104 = *(void *)(v0 + 744);
          uint64_t v105 = *(void *)(v0 + 752);
          uint64_t v106 = *(void *)(v0 + 760);
          id v107 = objc_allocWithZone((Class)DCPresentmentProposalReaderAnalytics);
          id v108 = sub_1000EE22C(0, v103, v104, v105, v106, v134, v142, v138, v92);
          sub_100037944(v0 + 768, v0 + 896, &qword_1001C0860);
          sub_1000F11A0(v0 + 896);
          defaultLogger()();
          id v109 = v108;
          *(void *)(swift_task_alloc() + 16) = v108;
          Logger.sensitive(_:)();
          sub_1000035EC(v129, v131);

          sub_1000F12CC(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000F10AC);
          swift_task_dealloc();
          v119(v96, v115);
          sub_1000F0E60(v117, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
          (*(void (**)(uint8_t *, uint64_t))(v121 + 8))(bufb, v124);
          goto LABEL_57;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        sub_1000035EC(v55, v54);
        swift_errorRelease();

        v95(v96, v97);
        uint64_t v46 = v0 + 128;
LABEL_56:
        uint64_t v98 = *(void *)(v0 + 1152);
        uint64_t v99 = *(void *)(v0 + 1136);
        uint64_t v100 = *(void *)(v0 + 1128);
        uint64_t v101 = *(void *)(v0 + 1112);
        id v109 = [objc_allocWithZone((Class)DCPresentmentProposalReaderAnalytics) initWithTrusted:0 untrustedIdentifier:0 untrustedOrganization:0 untrustedIssuerIdentifier:0 untrustedIssuerOrganization:0];
        sub_1000F12CC(v46, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000F10AC);
        sub_1000F0E60(v101, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v100);
LABEL_57:
        uint64_t v110 = 0;
        unint64_t v140 = 0;
        unsigned int v137 = 2;
        goto LABEL_58;
      }
      sub_1000035EC(v55, v54);
    }
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  *(void *)(v0 + 688) = v132;
  *(void *)(v0 + 696) = v1;
  uint64_t v133 = (uint64_t *)(v0 + 832);
  *(void *)(v0 + 704) = v139;
  *(void *)(v0 + 712) = v2;
  *(void *)(v0 + 720) = v135;
  *(void *)(v0 + 728) = v3;
  sub_100037944(v143, v0 + 464, &qword_1001C36E0);
  uint64_t v21 = *(void **)(v0 + 464);
  if (v21) {
    id v22 = v21;
  }
  uint64_t v136 = *(void *)(v0 + 1296);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1272);
  uint64_t v24 = *(void *)(v0 + 1056);
  uint64_t v25 = *(void *)(v0 + 1040);
  uint64_t v26 = *(void *)(v0 + 1024);
  uint64_t v27 = (uint64_t *)(*(void *)(v0 + 960)
                  + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_readerMetadataProvider);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  CBOREncodedCBOR.value.getter();
  v23(v24, v25);
  sub_100037944(v143, v0 + 576, &qword_1001C36E0);
  if (*(void *)(v0 + 576)) {
    uint64_t v30 = *(unsigned __int8 *)(v0 + 680);
  }
  else {
    uint64_t v30 = 2;
  }
  id v31 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8);
  *(void *)(v0 + 856) = v28;
  *(void *)(v0 + 864) = v29;
  sub_10002C3A0(v133);
  v31(v21, v26, v0 + 688, v30, v28, v29);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 16);
  unint64_t v140 = v21;
  id v33 = v21;
  uint64_t v34 = v32(v28, v29);
  if (v136)
  {
    sub_1000F12CC(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000F10AC);

    sub_10000B9DC((uint64_t)v133);
    uint64_t v35 = *(void *)(v0 + 1152);
    uint64_t v36 = *(void *)(v0 + 1136);
    uint64_t v37 = *(void *)(v0 + 1128);
    uint64_t v38 = *(void *)(v0 + 1112);
    (*(void (**)(void, void, void))(*(void *)(v0 + 976) + 104))(*(void *)(v0 + 984), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 968));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_1000F0E60(v38, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(void, void))(*(void *)(v0 + 1176) + 8))(*(void *)(v0 + 1184), *(void *)(v0 + 1168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  uint64_t v47 = (void *)v34;
  uint64_t v112 = v33;
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
  uint64_t v49 = *(void *)(v0 + 1216);
  uint64_t v50 = *(void *)(v0 + 1192);
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v47;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v48(v49, v50);
  sub_100037944(v143, v0 + 240, &qword_1001C36E0);
  if (*(void *)(v0 + 240))
  {
    int v51 = *(unsigned __int8 *)(v0 + 344);
    BOOL v52 = v51 != 2;
    sub_1000F1204();
  }
  else
  {
    sub_1000F1204();
    BOOL v52 = 0;
    int v51 = 2;
  }
  id v70 = [v47 identifier];
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v73 = v72;

  id v74 = [v47 organization];
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v130 = v77;
  }
  else
  {
    uint64_t v76 = 0;
    uint64_t v130 = 0;
  }
  sub_100037944(v143, v0 + 16, &qword_1001C36E0);
  uint64_t v110 = v47;
  unsigned int v137 = v51;
  buf = v73;
  uint64_t v128 = v71;
  uint64_t v123 = v76;
  if (*(void *)(v0 + 16))
  {
    char v111 = v52;
    uint64_t v116 = *(void *)(v0 + 80);
    if (v116)
    {
      uint64_t v113 = *(void *)(v0 + 72);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v113 = 0;
    }
    uint64_t v83 = *(void *)(v0 + 1344);
    uint64_t v84 = *(void *)(v0 + 1336);
    uint64_t v85 = *(void **)(v0 + 1304);
    sub_1000F127C(v84, v83);
    sub_1000F12CC(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000F1330);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F1150(v84, v83);
    if (v83)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = *(void *)(v0 + 1360);
      uint64_t v78 = *(void *)(v0 + 1352);
    }
    else
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
    }
    char v81 = v111;
    uint64_t v80 = v113;
    uint64_t v82 = v116;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    char v81 = v52;
    uint64_t v82 = 0;
  }
  unint64_t v114 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
  uint64_t v86 = *(void *)(v0 + 1216);
  uint64_t v87 = *(void *)(v0 + 1192);
  uint64_t v88 = *(void *)(v0 + 1136);
  uint64_t v118 = *(void *)(v0 + 1128);
  uint64_t v120 = *(void *)(v0 + 1152);
  uint64_t v89 = *(void *)(v0 + 1112);
  id v90 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v91 = sub_1000EE22C(v81, v128, (uint64_t)buf, v123, v130, v80, v82, v78, v79);
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v91;
  Logger.sensitive(_:)();
  sub_1000F12CC(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000F10AC);
  swift_task_dealloc();
  v114(v86, v87);
  sub_1000F0E60(v89, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v120, v118);
  if (v137 == 2 || (v137 & 1) != 0)
  {

    unint64_t v140 = 0;
  }
  sub_10000B9DC((uint64_t)v133);
  id v109 = v91;
LABEL_58:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(*(void *)(v0 + 1176) + 8))(*(void *)(v0 + 1184), *(void *)(v0 + 1168));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v102 = *(uint64_t (**)(void *, id, void *, void))(v0 + 8);
  return v102(v110, v109, v140, v137);
}

uint64_t sub_1000E1800()
{
  uint64_t v1 = v0[144];
  uint64_t v2 = v0[142];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[139];
  (*(void (**)(void, void, void))(v0[122] + 104))(v0[123], enum case for DIPError.Code.internalError(_:), v0[121]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_1000F0E60(v4, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(v0[147] + 8))(v0[148], v0[146]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000E1B20(void *a1, Swift::Int a2, uint64_t a3)
{
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3;
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000E1BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  uint64_t v7 = sub_100006CC8(&qword_1001C36D0);
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013ReaderRequest.DocRequest();
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v5[26] = v9;
  v5[27] = *(void *)(v9 - 8);
  v5[28] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v5[29] = v10;
  v5[30] = *(void *)(v10 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  return _swift_task_switch(sub_1000E1E58, 0, 0);
}

uint64_t sub_1000E1E58()
{
  uint64_t v60 = v0;
  unint64_t v1 = v0[13];
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v53 = v0[30];
    uint64_t v55 = v0[29];
    uint64_t v57 = v0[36];
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v59[0] = v7;
    if (v4) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v4) {
      unint64_t v9 = v1;
    }
    else {
      unint64_t v9 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    v0[9] = sub_10004C3A4(v8, v9, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "PresentmentRequestInterpreter: chooseDocRequest regionCode: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v10(v57, v55);
  }
  else
  {
    uint64_t v11 = v0[36];
    uint64_t v12 = v0[29];
    uint64_t v13 = v0[30];
    swift_bridgeObjectRelease_n();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  v0[37] = v10;
  uint64_t v14 = v0[11];
  uint64_t v15 = *(void *)(v14 + 16);
  v0[38] = v15;
  if (v15)
  {
    uint64_t v16 = *(void *)(v0[14] + 16);
    if (v0[13])
    {
      uint64_t v17 = v0 + 6;
      uint64_t v18 = swift_allocObject();
      v0[39] = v18;
      *(void *)(v18 + 16) = v16;
      uint64_t v19 = swift_allocObject();
      v0[40] = v19;
      *(void *)(v19 + 16) = sub_1000F0FB0;
      *(void *)(v19 + 24) = v18;
      swift_bridgeObjectRetain();
      swift_retain();
      Swift::String v20 = (void *)swift_task_alloc();
      v0[41] = v20;
      uint64_t v21 = sub_100006CC8(&qword_1001C36D8);
      void *v20 = v0;
      v20[1] = sub_1000E27B8;
      id v22 = sub_100044784;
LABEL_18:
      return AsyncCoreDataContainer.performRead<A>(_:)(v17, v22, v19, v21);
    }
    if (v15 != 1)
    {
      uint64_t v17 = v0 + 2;
      uint64_t v43 = swift_allocObject();
      v0[44] = v43;
      *(void *)(v43 + 16) = v16;
      uint64_t v19 = swift_allocObject();
      v0[45] = v19;
      *(void *)(v19 + 16) = sub_1000F0F64;
      *(void *)(v19 + 24) = v43;
      swift_bridgeObjectRetain();
      swift_retain();
      int v44 = (void *)swift_task_alloc();
      v0[46] = v44;
      uint64_t v21 = sub_100006CC8(&qword_1001C30C0);
      *int v44 = v0;
      v44[1] = sub_1000E30EC;
      id v22 = sub_1000F0F94;
      goto LABEL_18;
    }
    uint64_t v24 = v0[24];
    uint64_t v25 = v0[21];
    uint64_t v26 = v0[22];
    uint64_t v27 = v14 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    defaultLogger()();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v28(v24, v27, v25);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    BOOL v30 = os_log_type_enabled(v29, v58);
    uint64_t v31 = v0[33];
    uint64_t v32 = v0[29];
    uint64_t v33 = v0[22];
    if (v30)
    {
      unint64_t v54 = v28;
      uint64_t v56 = v27;
      uint64_t v34 = v0[19];
      uint64_t v35 = v0[20];
      uint64_t v46 = v0[18];
      uint64_t v47 = v0[24];
      uint64_t v52 = v0[33];
      uint64_t v36 = v0[17];
      uint64_t v48 = v0[16];
      uint64_t v49 = v0[15];
      log = v29;
      uint64_t v50 = v0[21];
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446210;
      ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
      CBOREncodedCBOR.value.getter();
      uint64_t v38 = v35;
      uint64_t v28 = v54;
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v46);
      uint64_t v39 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
      unint64_t v41 = v40;
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v36, v49);
      v0[5] = sub_10004C3A4(v39, v41, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v27 = v56;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v47, v50);
      _os_log_impl((void *)&_mh_execute_header, log, v58, "PresentmentRequestInterpreter: Request for one doc request of type %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v42 = v52;
    }
    else
    {
      (*(void (**)(void, void))(v33 + 8))(v0[24], v0[21]);

      uint64_t v42 = v31;
    }
    v10(v42, v32);
    v28(v0[10], v27, v0[21]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[27] + 104))(v0[28], enum case for DIPError.Code.idcsInvalidReaderRequest(_:), v0[26]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(void, void, void))(v0[27] + 104))(v0[28], enum case for DIPError.Code.internalError(_:), v0[26]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
  }
  return v23();
}

uint64_t sub_1000E27B8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = sub_1000E28E4;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 344) = *(void *)(v2 + 48);
    os_log_type_t v3 = sub_1000E2AF8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E28E4()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[27] + 104))(v0[28], enum case for DIPError.Code.internalError(_:), v0[26]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000E2AF8()
{
  uint64_t v49 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v42 = v0[35];
    uint64_t v45 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v40 = v0[29];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    sub_100006CC8(&qword_1001C30C0);
    uint64_t v4 = Dictionary.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[8] = sub_10004C3A4(v4, v6, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter: docTypesAndRegionsDictionary active on device: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v45(v42, v40);
  }
  else
  {
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v8 = v0[35];
    uint64_t v9 = v0[29];
    swift_bridgeObjectRelease_n();

    v7(v8, v9);
  }
  uint64_t v10 = v0[22];
  unint64_t v34 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v38 = v0[11] + v34;
  uint64_t v39 = v10;
  uint64_t v36 = (void (**)(uint64_t, uint64_t))(v0[16] + 8);
  uint64_t v37 = (void (**)(uint64_t, uint64_t))(v0[19] + 8);
  uint64_t v35 = (void (**)(void, void))(v10 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v14 = v0[20];
    uint64_t v16 = v0[17];
    uint64_t v15 = v0[18];
    uint64_t v17 = v0[15];
    unint64_t v43 = v0[13];
    uint64_t v46 = v0[43];
    uint64_t v41 = v0[12];
    uint64_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v39 + 16);
    v18(v0[25], v38 + *(void *)(v39 + 72) * v12, v0[21]);
    ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
    CBOREncodedCBOR.value.getter();
    (*v37)(v14, v15);
    uint64_t v19 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
    unint64_t v21 = v20;
    (*v36)(v16, v17);
    if (sub_1000EEADC(v19, v21, v46, v41, v43)) {
      break;
    }
    uint64_t v22 = v0[38];
    (*v35)(v0[25], v0[21]);
    uint64_t result = swift_bridgeObjectRelease();
    ++v12;
    if (v13 == v22)
    {
      uint64_t v23 = v0[21];
      uint64_t v25 = v0[10];
      uint64_t v24 = v0[11];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18(v25, v24 + v34, v23);
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v30 = v0[34];
  uint64_t v31 = v0[29];
  if (v28)
  {
    uint64_t v47 = v0[34];
    uint64_t v44 = v0[29];
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136446210;
    swift_bridgeObjectRetain();
    v0[7] = sub_10004C3A4(v19, v21, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "PresentmentRequestInterpreter: doctype %{public}s present on device", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v29(v47, v44);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v29(v30, v31);
  }
  (*(void (**)(void, void, void))(v0[22] + 32))(v0[10], v0[25], v0[21]);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_1000E30EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E3218;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 384) = *(void *)(v2 + 16);
    uint64_t v3 = sub_1000E342C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E3218()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[27] + 104))(v0[28], enum case for DIPError.Code.internalError(_:), v0[26]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000E342C()
{
  uint64_t v47 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v41 = v0[32];
    unint64_t v43 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v39 = v0[29];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v4 = Set.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[4] = sub_10004C3A4(v4, v6, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter: Doctypes active on device: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v43(v41, v39);
  }
  else
  {
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v8 = v0[32];
    uint64_t v9 = v0[29];
    swift_bridgeObjectRelease_n();

    v7(v8, v9);
  }
  uint64_t v10 = v0[22];
  unint64_t v34 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v38 = v0[11] + v34;
  uint64_t v40 = v10;
  uint64_t v36 = (void (**)(uint64_t, uint64_t))(v0[16] + 8);
  uint64_t v37 = (void (**)(uint64_t, uint64_t))(v0[19] + 8);
  uint64_t v35 = (void (**)(void, void))(v10 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v44 = v0[48];
    uint64_t v14 = v0[20];
    uint64_t v16 = v0[17];
    uint64_t v15 = v0[18];
    uint64_t v17 = v0[15];
    uint64_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
    v18(v0[23], v38 + *(void *)(v40 + 72) * v12, v0[21]);
    ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
    CBOREncodedCBOR.value.getter();
    (*v37)(v14, v15);
    uint64_t v19 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
    unint64_t v21 = v20;
    (*v36)(v16, v17);
    if (sub_100007A0C(v19, v21, v44)) {
      break;
    }
    uint64_t v22 = v0[38];
    (*v35)(v0[23], v0[21]);
    uint64_t result = swift_bridgeObjectRelease();
    ++v12;
    if (v13 == v22)
    {
      uint64_t v23 = v0[21];
      uint64_t v25 = v0[10];
      uint64_t v24 = v0[11];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18(v25, v24 + v34, v23);
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v30 = v0[31];
  uint64_t v31 = v0[29];
  if (v28)
  {
    uint64_t v45 = v0[31];
    uint64_t v42 = v0[29];
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136446210;
    swift_bridgeObjectRetain();
    v0[3] = sub_10004C3A4(v19, v21, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "PresentmentRequestInterpreter: Selecting matching doctype %{public}s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v29(v45, v42);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v29(v30, v31);
  }
  (*(void (**)(void, void, void))(v0[22] + 32))(v0[10], v0[23], v0[21]);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_1000E39FC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void *)@<X2>, uint64_t *a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1000EE5F4(a1);
  swift_bridgeObjectRelease();
  uint64_t v8 = a2(v7);
  uint64_t result = swift_release();
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1000E3A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 192) = v18;
  *(void *)(v9 + 200) = v8;
  *(unsigned char *)(v9 + 564) = v19;
  *(void *)(v9 + 176) = a8;
  *(void *)(v9 + 184) = v17;
  *(void *)(v9 + 160) = a6;
  *(void *)(v9 + 168) = a7;
  *(void *)(v9 + 144) = a4;
  *(void *)(v9 + 152) = a5;
  *(void *)(v9 + 128) = a2;
  *(void *)(v9 + 136) = a3;
  *(void *)(v9 + 120) = a1;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v9 + 208) = v10;
  *(void *)(v9 + 216) = *(void *)(v10 - 8);
  *(void *)(v9 + 224) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPError();
  *(void *)(v9 + 232) = v11;
  *(void *)(v9 + 240) = *(void *)(v11 - 8);
  *(void *)(v9 + 248) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for PresentmentProposal();
  *(void *)(v9 + 256) = v12;
  *(void *)(v9 + 264) = *(void *)(v12 - 8);
  *(void *)(v9 + 272) = swift_task_alloc();
  *(void *)(v9 + 280) = swift_task_alloc();
  sub_100006CC8(&qword_1001C28F0);
  *(void *)(v9 + 288) = swift_task_alloc();
  *(void *)(v9 + 296) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  *(void *)(v9 + 304) = v13;
  *(void *)(v9 + 312) = *(void *)(v13 - 8);
  *(void *)(v9 + 320) = swift_task_alloc();
  *(void *)(v9 + 328) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v9 + 336) = v14;
  *(void *)(v9 + 344) = *(void *)(v14 - 8);
  *(void *)(v9 + 352) = swift_task_alloc();
  *(void *)(v9 + 360) = swift_task_alloc();
  *(void *)(v9 + 368) = swift_task_alloc();
  *(void *)(v9 + 376) = swift_task_alloc();
  *(void *)(v9 + 384) = swift_task_alloc();
  *(void *)(v9 + 392) = swift_task_alloc();
  return _swift_task_switch(sub_1000E3D7C, 0, 0);
}

uint64_t sub_1000E3D7C()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter findProposals", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[49];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[17];

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[50] = v9;
  v0[51] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v4, v5);
  uint64_t v10 = *(void *)(v7 + 16);
  v0[52] = v10;
  swift_bridgeObjectRetain();
  uint64_t v11 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
  uint64_t v13 = v12;
  v0[6] = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[17];
    uint64_t v16 = (void *)swift_allocObject();
    v0[53] = v16;
    v16[2] = v10;
    v16[3] = v11;
    v16[4] = v13;
    v16[5] = v14;
    v16[6] = v15;
    uint64_t v17 = swift_allocObject();
    v0[54] = v17;
    *(void *)(v17 + 16) = sub_1000F0F08;
    *(void *)(v17 + 24) = v16;
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v18 = (void *)swift_task_alloc();
    v0[55] = v18;
    uint64_t v19 = sub_100006CC8(&qword_1001C3C70);
    void *v18 = v0;
    v18[1] = sub_1000E4098;
    unint64_t v20 = v0 + 10;
  }
  else
  {
    unint64_t v21 = (void *)swift_allocObject();
    v0[58] = v21;
    v21[2] = v10;
    v21[3] = v11;
    v21[4] = v13;
    uint64_t v17 = swift_allocObject();
    v0[59] = v17;
    *(void *)(v17 + 16) = sub_1000F0DDC;
    *(void *)(v17 + 24) = v21;
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc();
    v0[60] = v22;
    uint64_t v19 = sub_100006CC8(&qword_1001C3C70);
    *uint64_t v22 = v0;
    v22[1] = sub_1000E4C58;
    unint64_t v20 = v0 + 5;
  }
  return AsyncCoreDataContainer.performRead<A>(_:)(v20, sub_100044784, v17, v19);
}

uint64_t sub_1000E4098()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E4B14;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 456) = *(void *)(v2 + 80);
    uint64_t v3 = sub_1000E41C4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E41C4()
{
  uint64_t v71 = v0;
  if (*(void *)(*(void *)(v0 + 456) + 16))
  {
    uint64_t v68 = *(void *)(*(void *)(v0 + 456) + 16);
    uint64_t v1 = *(void *)(v0 + 120);
    uint64_t v2 = *(void *)(v0 + 328);
    uint64_t v3 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 312);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    int v7 = v6;
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v62 = *(void *)(v0 + 336);
      uint64_t v64 = *(void *)(v0 + 384);
      int v76 = v7;
      uint64_t v8 = *(void *)(v0 + 328);
      uint64_t v9 = *(void *)(v0 + 312);
      uint64_t v59 = *(void *)(v0 + 304);
      unint64_t v60 = *(void *)(v0 + 136);
      uint64_t v61 = *(void *)(v0 + 128);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446722;
      uint64_t v11 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
      *(void *)(v0 + 96) = sub_10004C3A4(v11, v12, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v59);
      *(_WORD *)(v10 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v13 = Set.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 104) = sub_10004C3A4(v13, v15, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_10004C3A4(v61, v60, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v76, "PresentmentRequestInterpreter: Identifiers found with doctype %{public}s in partitions %{public}s for region %{public}s", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v65(v64, v62);
    }
    else
    {
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v32 = *(void *)(v0 + 384);
      uint64_t v33 = *(void *)(v0 + 336);
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 304));

      swift_bridgeObjectRelease_n();
      swift_release_n();
      v31(v32, v33);
    }
    defaultLogger()();
    swift_bridgeObjectRetain();
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 134349056;
      *(void *)(v0 + 88) = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "PresentmentRequestInterpreter: regionCredentialIdentifiers count %{public}ld", v36, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v37 = *(void *)(v0 + 456);
    (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 376), *(void *)(v0 + 336));
    sub_1000DADBC(v37);
    uint64_t v16 = *(void **)(v0 + 48);
    if (v16[2]) {
      goto LABEL_12;
    }
LABEL_5:
    uint64_t v18 = *(void *)(v0 + 312);
    uint64_t v17 = *(void *)(v0 + 320);
    uint64_t v19 = *(void *)(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
    swift_retain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v67 = *(void *)(v0 + 368);
      uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v66 = *(void *)(v0 + 336);
      uint64_t v24 = *(void *)(v0 + 312);
      uint64_t v23 = *(void *)(v0 + 320);
      uint64_t v63 = *(void *)(v0 + 304);
      uint64_t v25 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v26 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
      *(void *)(v0 + 64) = sub_10004C3A4(v26, v27, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v63);
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v28 = Set.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 72) = sub_10004C3A4(v28, v30, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "PresentmentRequestInterpreter: Did not find any documents with doctype %{public}s in partitions %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v69(v67, v66);
    }
    else
    {
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v56 = *(void *)(v0 + 368);
      uint64_t v57 = *(void *)(v0 + 336);
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));

      swift_release_n();
      v55(v56, v57);
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_5;
  }
LABEL_12:
  defaultLogger()();
  swift_bridgeObjectRetain();
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 134349056;
    *(void *)(v0 + 56) = v16[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "PresentmentRequestInterpreter: Found %{public}ld candidate credentials", v40, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 360), *(void *)(v0 + 336));
  swift_beginAccess();
  uint64_t v41 = *(void **)(v0 + 48);
  *(void *)(v0 + 504) = v41;
  uint64_t v42 = v41[2];
  *(void *)(v0 + 512) = v42;
  if (v42)
  {
    *(_DWORD *)(v0 + 560) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 528) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 520) = 0;
    uint64_t v44 = v41[4];
    uint64_t v43 = v41[5];
    *(void *)(v0 + 536) = v43;
    swift_bridgeObjectRetain();
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_1000E540C;
    uint64_t v46 = *(void *)(v0 + 296);
    uint64_t v47 = *(void *)(v0 + 192);
    long long v48 = *(_OWORD *)(v0 + 176);
    uint64_t v49 = *(void *)(v0 + 160);
    uint64_t v50 = *(void *)(v0 + 168);
    uint64_t v51 = *(void *)(v0 + 144);
    uint64_t v52 = *(void *)(v0 + 152);
    uint64_t v53 = *(void *)(v0 + 120);
    char v75 = *(unsigned char *)(v0 + 564);
    uint64_t v74 = v47;
    long long v73 = v48;
    return sub_1000E6034(v46, v44, v43, v53, v51, v52, v49, v50);
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v58 = *(uint64_t (**)(void *))(v0 + 8);
  return v58(_swiftEmptyArrayStorage);
}

uint64_t sub_1000E4B14()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E4C58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E52E0;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 496) = *(void *)(v2 + 40);
    uint64_t v3 = sub_1000E4D84;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E4D84()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 496);
  *(void *)(v0 + 48) = v1;
  if (*(void *)(v1 + 16))
  {
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 134349056;
      *(void *)(v0 + 56) = *(void *)(v1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "PresentmentRequestInterpreter: Found %{public}ld candidate credentials", v4, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 360), *(void *)(v0 + 336));
    swift_beginAccess();
    uint64_t v20 = *(void **)(v0 + 48);
    *(void *)(v0 + 504) = v20;
    uint64_t v21 = v20[2];
    *(void *)(v0 + 512) = v21;
    if (v21)
    {
      *(_DWORD *)(v0 + 560) = enum case for DIPError.Code.internalError(_:);
      *(void *)(v0 + 528) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 520) = 0;
      uint64_t v23 = v20[4];
      uint64_t v22 = v20[5];
      *(void *)(v0 + 536) = v22;
      swift_bridgeObjectRetain();
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 544) = v24;
      void *v24 = v0;
      v24[1] = sub_1000E540C;
      uint64_t v25 = *(void *)(v0 + 296);
      uint64_t v26 = *(void *)(v0 + 192);
      long long v27 = *(_OWORD *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 160);
      uint64_t v29 = *(void *)(v0 + 168);
      uint64_t v30 = *(void *)(v0 + 144);
      uint64_t v31 = *(void *)(v0 + 152);
      uint64_t v32 = *(void *)(v0 + 120);
      char v47 = *(unsigned char *)(v0 + 564);
      uint64_t v46 = v26;
      long long v45 = v27;
      return sub_1000E6034(v25, v23, v22, v32, v30, v31, v28, v29);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 312);
    uint64_t v5 = *(void *)(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 304);
    uint64_t v8 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    int v11 = v10;
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v39 = *(void *)(v0 + 336);
      uint64_t v40 = *(void *)(v0 + 368);
      int v48 = v11;
      uint64_t v13 = *(void *)(v0 + 312);
      uint64_t v12 = *(void *)(v0 + 320);
      uint64_t v38 = *(void *)(v0 + 304);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v15 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
      *(void *)(v0 + 64) = sub_10004C3A4(v15, v16, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v38);
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v17 = Set.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 72) = sub_10004C3A4(v17, v19, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v48, "PresentmentRequestInterpreter: Did not find any documents with doctype %{public}s in partitions %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v41(v40, v39);
    }
    else
    {
      unint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v35 = *(void *)(v0 + 368);
      uint64_t v36 = *(void *)(v0 + 336);
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));

      swift_release_n();
      v34(v35, v36);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void *))(v0 + 8);
  return v37(_swiftEmptyArrayStorage);
}

uint64_t sub_1000E52E0()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E540C()
{
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1000E5894;
  }
  else {
    uint64_t v2 = sub_1000E553C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E553C()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[33];
  sub_100037898(v0[37], v1, &qword_1001C28F0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[36];
    sub_100014BBC(v0[37], &qword_1001C28F0);
    sub_100014BBC(v4, &qword_1001C28F0);
    unint64_t v5 = v0[66];
  }
  else
  {
    uint64_t v6 = v0[35];
    uint64_t v7 = v0[34];
    sub_1000F0DFC(v0[36], v6);
    sub_1000F0FE0(v6, v7, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = v0[66];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v5 = sub_1000D1250(0, *(void *)(v5 + 16) + 1, 1, v0[66]);
    }
    unint64_t v10 = *(void *)(v5 + 16);
    unint64_t v9 = *(void *)(v5 + 24);
    if (v10 >= v9 >> 1) {
      unint64_t v5 = sub_1000D1250(v9 > 1, v10 + 1, 1, v5);
    }
    uint64_t v11 = v0[37];
    uint64_t v12 = v0[34];
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[33];
    *(void *)(v5 + 16) = v10 + 1;
    sub_1000F0DFC(v12, v5+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v10);
    sub_1000F0E60(v13, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    sub_100014BBC(v11, &qword_1001C28F0);
  }
  uint64_t v15 = v0[65] + 1;
  if (v15 == v0[64])
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v16 = (uint64_t (*)(unint64_t))v0[1];
    return v16(v5);
  }
  else
  {
    v0[66] = v5;
    v0[65] = v15;
    uint64_t v18 = v0[63] + 16 * v15;
    uint64_t v20 = *(void *)(v18 + 32);
    uint64_t v19 = *(void *)(v18 + 40);
    v0[67] = v19;
    swift_bridgeObjectRetain();
    uint64_t v21 = (void *)swift_task_alloc();
    v0[68] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1000E540C;
    uint64_t v22 = v0[37];
    uint64_t v23 = v0[20];
    uint64_t v24 = v0[21];
    uint64_t v25 = v0[18];
    uint64_t v26 = v0[19];
    uint64_t v27 = v0[15];
    return sub_1000E6034(v22, v20, v19, v27, v25, v26, v23, v24);
  }
}

uint64_t sub_1000E5894()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 232);
  (*(void (**)(void, void, void))(*(void *)(v0 + 216) + 104))(*(void *)(v0 + 224), *(unsigned int *)(v0 + 560), *(void *)(v0 + 208));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 520) + 1;
  if (v8 == *(void *)(v0 + 512))
  {
    uint64_t v21 = *(void *)(v0 + 528);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v9(v21);
  }
  else
  {
    *(void *)(v0 + 520) = v8;
    uint64_t v11 = *(void *)(v0 + 504) + 16 * v8;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    *(void *)(v0 + 536) = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000E540C;
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v16 = *(void *)(v0 + 160);
    uint64_t v17 = *(void *)(v0 + 168);
    uint64_t v18 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 120);
    return sub_1000E6034(v15, v13, v12, v20, v18, v19, v16, v17);
  }
}

uint64_t sub_1000E5C14@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, char **a6@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000EE5F4(a1);
  swift_bridgeObjectRelease();
  unint64_t v14 = sub_100167908((uint64_t)v13, a2, a3, a4, a5);
  uint64_t result = swift_release();
  if (!v6)
  {
    uint64_t v30 = a6;
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v16 = result;
    }
    else
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v17 = a6;
    if (v16)
    {
      if (v16 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = 0;
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
      do
      {
        if ((v14 & 0xC000000000000001) != 0) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v20 = *(id *)(v14 + 8 * v18 + 32);
        }
        uint64_t v21 = v20;
        id v22 = [v20 credentialIdentifier];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v25;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = sub_1000D0D48(0, *((void *)v19 + 2) + 1, 1, v19);
          }
          unint64_t v28 = *((void *)v19 + 2);
          unint64_t v27 = *((void *)v19 + 3);
          if (v28 >= v27 >> 1) {
            uint64_t v19 = sub_1000D0D48((char *)(v27 > 1), v28 + 1, 1, v19);
          }
          *((void *)v19 + 2) = v28 + 1;
          uint64_t v29 = &v19[16 * v28];
          *((void *)v29 + 4) = v24;
          *((void *)v29 + 5) = v26;
          uint64_t v17 = v30;
        }
        else
        {
        }
        ++v18;
      }
      while (v16 != v18);
    }
    else
    {
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
    }
    uint64_t result = swift_bridgeObjectRelease_n();
    *uint64_t v17 = v19;
  }
  return result;
}

uint64_t sub_1000E5E28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1000EE5F4(a1);
  swift_bridgeObjectRelease();
  unint64_t v10 = sub_100168650((uint64_t)v9, a2, a3);
  uint64_t result = swift_release();
  if (!v4)
  {
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v12 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v12)
      {
LABEL_4:
        if (v12 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v13 = 0;
        unint64_t v14 = (char *)_swiftEmptyArrayStorage;
        do
        {
          if ((v10 & 0xC000000000000001) != 0) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v15 = *(id *)(v10 + 8 * v13 + 32);
          }
          uint64_t v16 = v15;
          id v17 = [v15 credentialIdentifier];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = a4;
            uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v22 = v21;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v14 = sub_1000D0D48(0, *((void *)v14 + 2) + 1, 1, v14);
            }
            unint64_t v24 = *((void *)v14 + 2);
            unint64_t v23 = *((void *)v14 + 3);
            if (v24 >= v23 >> 1) {
              unint64_t v14 = sub_1000D0D48((char *)(v23 > 1), v24 + 1, 1, v14);
            }
            *((void *)v14 + 2) = v24 + 1;
            uint64_t v25 = &v14[16 * v24];
            *((void *)v25 + 4) = v20;
            *((void *)v25 + 5) = v22;
            a4 = v19;
          }
          else
          {
          }
          ++v13;
        }
        while (v12 != v13);
        goto LABEL_19;
      }
    }
    unint64_t v14 = (char *)_swiftEmptyArrayStorage;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease_n();
    *a4 = v14;
  }
  return result;
}

uint64_t sub_1000E6034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 536) = v8;
  *(unsigned char *)(v9 + 768) = v16;
  *(void *)(v9 + 528) = v15;
  *(_OWORD *)(v9 + 512) = v14;
  *(void *)(v9 + 496) = a7;
  *(void *)(v9 + 504) = a8;
  *(void *)(v9 + 480) = a5;
  *(void *)(v9 + 488) = a6;
  *(void *)(v9 + 464) = a3;
  *(void *)(v9 + 472) = a4;
  *(void *)(v9 + 448) = a1;
  *(void *)(v9 + 456) = a2;
  *(void *)(v9 + 544) = *v8;
  sub_100006CC8(&qword_1001C2838);
  *(void *)(v9 + 552) = swift_task_alloc();
  *(void *)(v9 + 560) = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  *(void *)(v9 + 568) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  *(void *)(v9 + 576) = v10;
  *(void *)(v9 + 584) = *(void *)(v10 - 8);
  *(void *)(v9 + 592) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v9 + 600) = v11;
  *(void *)(v9 + 608) = *(void *)(v11 - 8);
  *(void *)(v9 + 616) = swift_task_alloc();
  *(void *)(v9 + 624) = swift_task_alloc();
  *(void *)(v9 + 632) = swift_task_alloc();
  return _swift_task_switch(sub_1000E622C, 0, 0);
}

uint64_t sub_1000E622C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter buildProposal", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 632);
  uint64_t v5 = *(void *)(v0 + 608);
  uint64_t v6 = *(void *)(v0 + 600);
  uint64_t v24 = *(void *)(v0 + 544);
  uint64_t v7 = *(void *)(v0 + 536);
  uint64_t v22 = *(void **)(v0 + 520);
  uint64_t v23 = *(void *)(v0 + 496);
  uint64_t v20 = *(void *)(v0 + 480);
  unint64_t v21 = *(void *)(v0 + 488);
  uint64_t v8 = *(void *)(v0 + 464);
  uint64_t v19 = *(void *)(v0 + 456);

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 640) = v9;
  *(void *)(v0 + 648) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v4, v6);
  static IDCSSignposts.presentmentBuildProposal.getter();
  DIPSignpost.init(_:)();
  uint64_t v10 = *(void *)(v7 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_presentmentKeySelectionProvider);
  uint64_t v11 = *(void *)(v7 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_credentialKeyManager);
  uint64_t v12 = *(void *)(v7 + 32);
  sub_10002C404(v7 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_payloadProcessorBuilder, v0 + 352);
  uint64_t v13 = (void *)swift_allocObject();
  *(void *)(v0 + 656) = v13;
  v13[2] = v19;
  v13[3] = v8;
  v13[4] = v10;
  v13[5] = v20;
  v13[6] = v21;
  v13[7] = v22;
  v13[8] = v11;
  v13[9] = v12;
  v13[10] = v23;
  sub_10002C468((long long *)(v0 + 352), (uint64_t)(v13 + 11));
  v13[16] = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100009778(v20, v21);
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 664) = v14;
  *(void *)(v14 + 16) = &unk_1001C36A0;
  *(void *)(v14 + 24) = v13;
  id v15 = v22;
  swift_retain();
  swift_retain();
  char v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v16;
  uint64_t v17 = sub_100006CC8(&qword_1001C36B8);
  *char v16 = v0;
  v16[1] = sub_1000E64FC;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 16, &unk_1001C36B0, v14, v17);
}

uint64_t sub_1000E64FC()
{
  *(void *)(*(void *)v1 + 680) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000E685C;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000E6624;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E6624()
{
  sub_100037898(v0 + 16, v0 + 128, &qword_1001C36B8);
  if (*(void *)(v0 + 136))
  {
    long long v1 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 320) = v1;
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 224);
    long long v2 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 256) = v2;
    long long v3 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 288) = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 688) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000E6978;
    uint64_t v5 = *(void *)(v0 + 472);
    char v6 = *(unsigned char *)(v0 + 768);
    return sub_1000EA678(v5, v0 + 280, v6);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 448);
    sub_100014BBC(v0 + 16, &qword_1001C36B8);
    sub_100014BBC(v0 + 128, &qword_1001C36B8);
    uint64_t v9 = type metadata accessor for PresentmentProposal();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    uint64_t v10 = *(void *)(v0 + 592);
    uint64_t v11 = *(void *)(v0 + 584);
    uint64_t v12 = *(void *)(v0 + 576);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_1000E685C()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000E6978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[87] = a1;
  v4[88] = a2;
  v4[89] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000E7888;
  }
  else {
    uint64_t v5 = sub_1000E6A94;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E6A94()
{
  uint64_t v30 = v0;
  if (v0[88])
  {
    sub_100037898((uint64_t)(v0 + 35), (uint64_t)(v0 + 49), &qword_1001C28E8);
    uint64_t v1 = v0[52];
    if (v1)
    {
      uint64_t v2 = v0[53];
      sub_100014D14(v0 + 49, v0[52]);
      unint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 32) + **(int **)(v2 + 32));
      uint64_t v3 = (void *)swift_task_alloc();
      v0[90] = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1000E6FA0;
      uint64_t v4 = v0[70];
      return v27(v4, v1, v2);
    }
    else
    {
      uint64_t v17 = v0[70];
      sub_100014BBC((uint64_t)(v0 + 49), &qword_1001C28E8);
      uint64_t v18 = type metadata accessor for COSE_Sign1();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
      uint64_t v19 = v0[34];
      uint64_t v20 = (void *)swift_task_alloc();
      v0[92] = v20;
      void *v20 = v0;
      v20[1] = sub_1000E716C;
      return sub_1000A4F24(v19);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v6._object = (void *)0x80000001001806B0;
    v7._countAndFlagsBits = 0x3466623961626336;
    v7._object = (void *)0xE800000000000000;
    v6._countAndFlagsBits = 0xD00000000000005CLL;
    logMilestone(tag:description:)(v7, v6);
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[80];
    uint64_t v12 = v0[77];
    uint64_t v13 = v0[75];
    unint64_t v14 = v0[58];
    if (v10)
    {
      uint64_t v28 = v0[75];
      uint64_t v15 = v0[57];
      char v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)char v16 = 136315138;
      swift_bridgeObjectRetain();
      v0[54] = sub_10004C3A4(v15, v14, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Not proposing credential %s because it has no elements matching the request", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v11(v12, v28);
      sub_1000EFA44((uint64_t)(v0 + 30));
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v11(v12, v13);
      sub_1000EFA44((uint64_t)(v0 + 30));
    }
    sub_100014BBC((uint64_t)(v0 + 2), &qword_1001C36B8);
    uint64_t v21 = v0[56];
    uint64_t v22 = type metadata accessor for PresentmentProposal();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    uint64_t v23 = v0[74];
    uint64_t v24 = v0[73];
    uint64_t v25 = v0[72];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_1000E6FA0()
{
  *(void *)(*(void *)v1 + 728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000E79AC;
  }
  else
  {
    uint64_t v2 = sub_1000E70C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E70C8()
{
  sub_10000B9DC(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 736) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000E716C;
  return sub_1000A4F24(v1);
}

uint64_t sub_1000E716C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[93] = a1;
  v4[94] = a2;
  v4[95] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000E7ADC;
  }
  else
  {
    uint64_t v5 = sub_1000E729C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E729C()
{
  uint64_t v74 = v0;
  unint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 744);
  defaultLogger()();
  sub_100009778(v2, v1);
  sub_100009778(v2, v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 752);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    if (v6 >> 60 == 15)
    {
      object = (void *)0xE500000000000000;
      uint64_t countAndFlagsBits = 0x3E6C696E3CLL;
    }
    else
    {
      Swift::String v14 = Data.base16EncodedString()();
      uint64_t countAndFlagsBits = v14._countAndFlagsBits;
      object = v14._object;
    }
    unint64_t v15 = *(void *)(v0 + 752);
    uint64_t v16 = *(void *)(v0 + 744);
    uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    uint64_t v67 = *(void *)(v0 + 600);
    uint64_t v69 = *(void *)(v0 + 624);
    *(void *)(v0 + 440) = sub_10004C3A4(countAndFlagsBits, (unint64_t)object, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009764(v16, v15);
    sub_100009764(v16, v15);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Proposed credential has auth ACL: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v70(v69, v67);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 744);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    uint64_t v12 = *(void *)(v0 + 624);
    uint64_t v13 = *(void *)(v0 + 600);
    sub_100009764(v10, v6);
    sub_100009764(v10, v6);

    v11(v12, v13);
  }
  int v17 = *(unsigned __int8 *)(v0 + 768);
  uint64_t v18 = *(uint64_t **)(v0 + 256);
  uint64_t v19 = *(uint64_t **)(v0 + 264);
  uint64_t v20 = *v18;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t *))v19[2];
  swift_retain();
  uint64_t v22 = v21(v20, v19);
  unint64_t v24 = v23;
  swift_release();
  Swift::String v25 = Data.base64EncodedString(options:)(0);
  sub_1000035EC(v22, v24);
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t *))v19[1];
  swift_retain();
  uint64_t v27 = v26(v20, v19);
  unint64_t v29 = v28;
  swift_release();
  uint64_t v30 = *(void *)(v0 + 240);
  uint64_t v63 = *(void *)(v0 + 248);
  swift_bridgeObjectRetain();
  uint64_t v72 = v19;
  unint64_t v65 = v29;
  uint64_t v66 = v27;
  uint64_t v64 = v30;
  uint64_t v62 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
  uint64_t v61 = v31;
  if (v17 == 2)
  {
    uint64_t v53 = 0;
    unint64_t v54 = 0xF000000000000000;
  }
  else
  {
    sub_100009778(*(void *)(v0 + 504), *(void *)(v0 + 512));
    uint64_t v53 = *(void *)(v0 + 504);
    unint64_t v54 = *(void *)(v0 + 512);
  }
  unint64_t v32 = *(void *)(v0 + 752);
  uint64_t v33 = *(void *)(v0 + 744);
  uint64_t v58 = *(void *)(v0 + 704);
  uint64_t v68 = *(void *)(v0 + 696);
  uint64_t v59 = *(void *)(v0 + 560);
  uint64_t v60 = *(void *)(v0 + 552);
  unint64_t v34 = *(void **)(v0 + 528);
  uint64_t v35 = *(void **)(v0 + 520);
  uint64_t v36 = *(void *)(v0 + 464);
  uint64_t v37 = *(void **)(v0 + 448);
  uint64_t v57 = *(void *)(v0 + 456);
  uint64_t v38 = *(void *)(v0 + 328);
  uint64_t v39 = *(void *)(v0 + 344);
  uint64_t v55 = *(void *)(v0 + 336);
  uint64_t v56 = *(void *)(v0 + 320);
  objc_allocWithZone((Class)DCPresentmentProposal);
  swift_bridgeObjectRetain();
  id v40 = v35;
  sub_100009778(v33, v32);
  swift_bridgeObjectRetain();
  id v41 = v34;
  swift_bridgeObjectRetain();
  id v42 = sub_1000EE358(v57, v36, v25._countAndFlagsBits, (uint64_t)v25._object, v66, v65, v64, v63, v62, v61, v58, v33, v32, v53, v54, v35, v34, v56, v38,
          v55,
          v39);
  v43._object = (void *)0x8000000100180710;
  v44._uint64_t countAndFlagsBits = 0x3735313330633933;
  v44._object = (void *)0xE800000000000000;
  v43._uint64_t countAndFlagsBits = 0xD000000000000055;
  logMilestone(tag:description:)(v44, v43);
  sub_100037898(v59, v60, &qword_1001C2838);
  uint64_t v71 = *(void *)(v0 + 272);
  swift_retain();
  uint64_t v45 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
  sub_100009764(v33, v32);
  sub_100014BBC(v59, &qword_1001C2838);
  sub_1000EFA44(v0 + 240);
  sub_100014BBC(v0 + 16, &qword_1001C36B8);
  *uint64_t v37 = v42;
  v37[1] = v68;
  uint64_t v46 = (int *)type metadata accessor for PresentmentProposal();
  sub_100037944(v60, (uint64_t)v37 + v46[6], &qword_1001C2838);
  char v47 = (uint64_t **)((char *)v37 + v46[7]);
  *char v47 = v18;
  v47[1] = v72;
  *(void *)((char *)v37 + v46[8]) = v71;
  *(void *)((char *)v37 + v46[9]) = v45;
  (*(void (**)(void *, void, uint64_t, int *))(*((void *)v46 - 1) + 56))(v37, 0, 1, v46);
  uint64_t v48 = *(void *)(v0 + 592);
  uint64_t v49 = *(void *)(v0 + 584);
  uint64_t v50 = *(void *)(v0 + 576);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
  return v51();
}

uint64_t sub_1000E7888()
{
  sub_1000EFA44((uint64_t)(v0 + 30));
  sub_100014BBC((uint64_t)(v0 + 2), &qword_1001C36B8);
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000E79AC()
{
  sub_1000EFA44((uint64_t)(v0 + 30));
  sub_100014BBC((uint64_t)(v0 + 2), &qword_1001C36B8);
  sub_10000B9DC((uint64_t)(v0 + 49));
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000E7ADC()
{
  sub_100014BBC(v0[70], &qword_1001C2838);
  sub_1000EFA44((uint64_t)(v0 + 30));
  sub_100014BBC((uint64_t)(v0 + 2), &qword_1001C36B8);
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000E7C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1336) = v16;
  *(_OWORD *)(v8 + 1320) = v15;
  *(_OWORD *)(v8 + 1304) = v14;
  *(void *)(v8 + 1296) = a8;
  *(void *)(v8 + 1288) = a7;
  *(void *)(v8 + 1280) = a6;
  *(void *)(v8 + 1272) = a5;
  *(void *)(v8 + 1264) = a4;
  *(void *)(v8 + 1256) = a3;
  *(void *)(v8 + 1248) = a2;
  *(void *)(v8 + 1240) = a1;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 1344) = v9;
  *(void *)(v8 + 1352) = *(void *)(v9 - 8);
  *(void *)(v8 + 1360) = swift_task_alloc();
  sub_100006CC8(&qword_1001C1AD8);
  *(void *)(v8 + 1368) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 1376) = v10;
  *(void *)(v8 + 1384) = *(void *)(v10 - 8);
  *(void *)(v8 + 1392) = swift_task_alloc();
  *(void *)(v8 + 1400) = swift_task_alloc();
  *(void *)(v8 + 1408) = swift_task_alloc();
  *(void *)(v8 + 1416) = swift_task_alloc();
  *(void *)(v8 + 1424) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v8 + 1432) = v11;
  *(void *)(v8 + 1440) = *(void *)(v11 - 8);
  *(void *)(v8 + 1448) = swift_task_alloc();
  return _swift_task_switch(sub_1000E7E2C, 0, 0);
}

uint64_t sub_1000E7E2C()
{
  uint64_t v22 = *(void *)(v0 + 1448);
  uint64_t v20 = *(void *)(v0 + 1440);
  uint64_t v21 = *(void *)(v0 + 1432);
  long long v18 = *(_OWORD *)(v0 + 1312);
  uint64_t v1 = *(void *)(v0 + 1304);
  uint64_t v19 = *(void *)(v0 + 1336);
  uint64_t v2 = *(void **)(v0 + 1296);
  unint64_t v3 = *(void *)(v0 + 1288);
  uint64_t v4 = *(void *)(v0 + 1280);
  uint64_t v5 = *(void *)(v0 + 1272);
  uint64_t v6 = *(void *)(v0 + 1264);
  uint64_t v7 = *(void *)(v0 + 1256);
  uint64_t v8 = *(void *)(v0 + 1248);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 1456) = v9;
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v5;
  *(void *)(v9 + 48) = v4;
  *(void *)(v9 + 56) = v3;
  *(void *)(v9 + 64) = v2;
  *(void *)(v9 + 72) = v1;
  *(_OWORD *)(v9 + 80) = v18;
  *(void *)(v9 + 96) = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100009778(v4, v3);
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 1464) = v10;
  *(void *)(v10 + 16) = sub_1000EFAE4;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 104);
  id v13 = v2;
  swift_retain();
  v12(v22, v11, v21);
  swift_retain();
  long long v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1472) = v14;
  uint64_t v15 = sub_100006CC8(&qword_1001C36C8);
  *long long v14 = v0;
  v14[1] = sub_1000E802C;
  uint64_t v16 = *(void *)(v0 + 1448);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, v16, sub_10004A390, v10, v15);
}

uint64_t sub_1000E802C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1480) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[180] + 8))(v2[181], v2[179]);
  swift_release();
  if (v0)
  {
    unint64_t v3 = sub_1000E8B44;
  }
  else
  {
    swift_release();
    unint64_t v3 = sub_1000E81A4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E81A4()
{
  sub_100037944(v0 + 16, v0 + 320, &qword_1001C36C8);
  sub_100037944(v0 + 320, v0 + 168, &qword_1001C36C8);
  if (sub_1000EFB24(v0 + 168) == 1)
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      unint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "no results or error thrown so returning nil", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void *)(v0 + 1424);
    uint64_t v5 = *(void *)(v0 + 1384);
    uint64_t v6 = *(void *)(v0 + 1376);
    uint64_t v7 = *(void *)(v0 + 1360);
    uint64_t v8 = *(void *)(v0 + 1352);
    uint64_t v9 = *(void *)(v0 + 1344);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.internalError(_:), v9);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_21;
  }
  *(void *)(v0 + 1152) = 0;
  *(_OWORD *)(v0 + 1120) = 0u;
  *(_OWORD *)(v0 + 1136) = 0u;
  uint64_t v10 = *(void *)(v0 + 184);
  if (v10 == 2)
  {
    sub_100037944(v0 + 320, v0 + 776, &qword_1001C36C8);
    sub_1000EFB3C((void *)(v0 + 776));
    defaultLogger()();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      Swift::String v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Payload protection type is payload protection key", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = *(void *)(v0 + 1400);
    uint64_t v27 = *(void *)(v0 + 1392);
    uint64_t v28 = *(void *)(v0 + 1384);
    uint64_t v29 = *(void *)(v0 + 1376);

    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v30(v26, v29);
    uint64_t v31 = *(void *)(v0 + 288);
    swift_bridgeObjectRetain();
    defaultLogger()();
    *(void *)(swift_task_alloc() + 16) = v31;
    Logger.sensitive(_:)();
    swift_task_dealloc();
    v30(v27, v29);
    if (v31)
    {
      if (*(void *)(v31 + 16))
      {
        uint64_t v32 = type metadata accessor for InaccessiblyEncryptedPayloadProcessor();
        swift_allocObject();
        uint64_t v33 = sub_1000A9B44(v31);
        *(void *)(v0 + 1104) = v32;
        *(void *)(v0 + 1112) = &off_1001B5CB0;
        sub_1000EFBE0(v0 + 320);
        *(void *)(v0 + 1080) = v33;
        uint64_t v34 = v0 + 1120;
        sub_1000F1048(v0 + 1080, v0 + 1120, &qword_1001C28E8);
      }
      else
      {
        uint64_t v34 = v0 + 1120;
        sub_1000EFBE0(v0 + 320);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v34 = v0 + 1120;
      sub_1000EFBE0(v0 + 320);
    }
    goto LABEL_26;
  }
  if (v10 == 1)
  {
    sub_100037944(v0 + 320, v0 + 928, &qword_1001C36C8);
    sub_1000EFB3C((void *)(v0 + 928));
    defaultLogger()();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    uint64_t v34 = v0 + 1120;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Payload protection type is device encryption key, skipping element extraction", v37, 2u);
      swift_slowDealloc();

      sub_1000EFBE0(v0 + 320);
    }
    else
    {
      sub_1000EFBE0(v0 + 320);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 1384) + 8))(*(void *)(v0 + 1408), *(void *)(v0 + 1376));
LABEL_26:
    uint64_t v39 = *(void *)(v0 + 1240);
    uint64_t v40 = *(void *)(v0 + 176);
    uint64_t v47 = *(void *)(v0 + 168);
    uint64_t v41 = *(void *)(v0 + 312);
    long long v48 = *(_OWORD *)(v0 + 296);
    uint64_t v42 = v34;
    sub_100037898(v34, v39 + 40, &qword_1001C28E8);
    uint64_t v43 = *(void *)(v0 + 240);
    uint64_t v44 = *(void *)(v0 + 248);
    uint64_t v45 = *(void *)(v0 + 256);
    uint64_t v46 = *(void *)(v0 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000EFBE0(v0 + 320);
    *(void *)uint64_t v39 = v47;
    *(void *)(v39 + 8) = v40;
    *(_OWORD *)(v39 + 16) = v48;
    *(void *)(v39 + 32) = v41;
    *(void *)(v39 + 80) = v43;
    *(void *)(v39 + 88) = v44;
    *(void *)(v39 + 96) = v45;
    *(void *)(v39 + 104) = v46;
    sub_100014BBC(v42, &qword_1001C28E8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_27;
  }
  if (v10)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 1352) + 104))(*(void *)(v0 + 1360), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 1344));
    sub_100037944(v0 + 320, v0 + 624, &qword_1001C36C8);
    sub_1000EFB3C((void *)(v0 + 624));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000EFBE0(v0 + 320);
    sub_1000EFBE0(v0 + 320);
    sub_100014BBC(v0 + 1120, &qword_1001C28E8);
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
LABEL_27:
    return v38();
  }
  sub_100037944(v0 + 320, v0 + 472, &qword_1001C36C8);
  sub_1000EFB3C((void *)(v0 + 472));
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Payload protection type is standard, extracting elements from credential payload", v13, 2u);
    swift_slowDealloc();
  }
  uint64_t v14 = *(void *)(v0 + 1416);
  uint64_t v15 = *(void *)(v0 + 1384);
  uint64_t v16 = *(void *)(v0 + 1376);
  int v17 = *(void **)(v0 + 1328);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 216);
  *(void *)(v0 + 1488) = *(void *)(v0 + 208);
  *(void *)(v0 + 1496) = v19;
  unint64_t v20 = *(void *)(v0 + 224);
  *(void *)(v0 + 1504) = v20;
  *(void *)(v0 + 1512) = *(void *)(v0 + 248);
  *(void *)(v0 + 1520) = *(void *)(v0 + 264);
  sub_100014D14(v17, v17[3]);
  swift_bridgeObjectRetain();
  sub_10000354C(v19, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 1528) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1000E8C1C;
  return sub_1001615C0(v0 + 1160, v19, v20, v18, 0, 0, 0, 0);
}

uint64_t sub_1000E8B44()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E8C1C()
{
  *(void *)(*(void *)v1 + 1536) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1000E905C;
  }
  else {
    os_log_type_t v2 = sub_1000E8D30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E8D30()
{
  sub_1000F1048(v0 + 1160, v0 + 1120, &qword_1001C28E8);
  if (*(void *)(v0 + 1144))
  {
    sub_10002C404(v0 + 1120, v0 + 1200);
    uint64_t v1 = *(void *)(v0 + 1224);
    uint64_t v2 = *(void *)(v0 + 1232);
    sub_100014D14((void *)(v0 + 1200), v1);
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 1544) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000E918C;
    uint64_t v4 = *(void *)(v0 + 1368);
    return v19(v4, 1, v1, v2);
  }
  else
  {
    unint64_t v6 = *(void *)(v0 + 1504);
    uint64_t v7 = *(void *)(v0 + 1496);
    uint64_t v8 = *(void *)(v0 + 1368);
    sub_1000EFBE0(v0 + 320);
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = type metadata accessor for PayloadMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    sub_100014BBC(v8, &qword_1001C1AD8);
    uint64_t v10 = *(void *)(v0 + 1240);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 312);
    long long v20 = *(_OWORD *)(v0 + 296);
    sub_100037898(v0 + 1120, v10 + 40, &qword_1001C28E8);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v16 = *(void *)(v0 + 256);
    uint64_t v17 = *(void *)(v0 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000EFBE0(v0 + 320);
    *(void *)uint64_t v10 = v12;
    *(void *)(v10 + 8) = v11;
    *(_OWORD *)(v10 + 16) = v20;
    *(void *)(v10 + 32) = v13;
    *(void *)(v10 + 80) = v14;
    *(void *)(v10 + 88) = v15;
    *(void *)(v10 + 96) = v16;
    *(void *)(v10 + 104) = v17;
    sub_100014BBC(v0 + 1120, &qword_1001C28E8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_1000E905C()
{
  unint64_t v1 = v0[188];
  uint64_t v2 = v0[187];
  sub_1000EFBE0((uint64_t)(v0 + 40));
  sub_1000EFBE0((uint64_t)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100014BBC((uint64_t)(v0 + 140), &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000E918C()
{
  *(void *)(*(void *)v1 + 1552) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000E94C0;
  }
  else {
    uint64_t v2 = sub_1000E92A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E92A0()
{
  unint64_t v1 = *(void *)(v0 + 1504);
  uint64_t v2 = *(void *)(v0 + 1496);
  uint64_t v3 = *(void *)(v0 + 1368);
  sub_1000EFBE0(v0 + 320);
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  sub_100014BBC(v3, &qword_1001C1AD8);
  sub_10000B9DC(v0 + 1200);
  uint64_t v5 = *(void *)(v0 + 1240);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 312);
  long long v15 = *(_OWORD *)(v0 + 296);
  sub_100037898(v0 + 1120, v5 + 40, &qword_1001C28E8);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000EFBE0(v0 + 320);
  *(void *)uint64_t v5 = v7;
  *(void *)(v5 + 8) = v6;
  *(_OWORD *)(v5 + 16) = v15;
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 80) = v9;
  *(void *)(v5 + 88) = v10;
  *(void *)(v5 + 96) = v11;
  *(void *)(v5 + 104) = v12;
  sub_100014BBC(v0 + 1120, &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1000E94C0()
{
  unint64_t v1 = v0[188];
  uint64_t v2 = v0[187];
  sub_1000EFBE0((uint64_t)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000EFBE0((uint64_t)(v0 + 40));
  sub_10000B9DC((uint64_t)(v0 + 150));
  sub_100014BBC((uint64_t)(v0 + 140), &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1000E95FC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, NSObject *a4@<X4>, unint64_t a5@<X5>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  id v95 = a7;
  id v96 = a6;
  unint64_t v98 = a5;
  uint64_t v97 = a4;
  uint64_t v94 = a8;
  uint64_t v13 = type metadata accessor for Logger();
  unint64_t v93 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v85 - v17;
  uint64_t v19 = type metadata accessor for DIPError.Code();
  unint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = v99;
  os_log_type_t v24 = (void *)sub_100163764(a2, a3);
  if (!v23)
  {
    unint64_t v99 = v20;
    uint64_t v91 = v19;
    unint64_t v89 = (unint64_t)v18;
    unint64_t v92 = (unint64_t)v22;
    v90._uint64_t countAndFlagsBits = a2;
    v90._object = a3;
    unint64_t v88 = (unint64_t)v16;
    if (!v24)
    {
      uint64_t v100 = 0;
      unint64_t v101 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      uint64_t v100 = 0xD000000000000024;
      unint64_t v101 = 0x8000000100180820;
      String.append(_:)(v90);
      (*(void (**)(unint64_t, void, uint64_t))(v99 + 104))(v92, enum case for DIPError.Code.idcsUnknownCredential(_:), v91);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    Swift::String v25 = v24;
    id v26 = [v24 partition];
    unint64_t v27 = v92;
    if (!v26)
    {
      (*(void (**)(unint64_t, void, uint64_t))(v99 + 104))(v92, enum case for DIPError.Code.invalidStoredData(_:), v91);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      return;
    }
    uint64_t v28 = v26;
    uint64_t v87 = v25;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v86 = v29;
    if (v96)
    {
      id v32 = [v96 identifier];
      id v96 = 0;
      id v33 = v32;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_type_t v36 = v35;

      unint64_t v23 = (unint64_t)v96;
    }
    else
    {
      uint64_t v34 = 0;
      os_log_type_t v36 = 0;
    }
    uint64_t v37 = v87;
    uint64_t v38 = sub_10015A658(a1, (uint64_t)v97, v98, v34, v36, v87);
    uint64_t v39 = v91;
    if (v23)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v40 = (void *)v38;
    swift_bridgeObjectRelease();
    if (!v40)
    {
      swift_bridgeObjectRelease();
      unint64_t v41 = v89;
      defaultLogger()();
      object = v90._object;
      swift_bridgeObjectRetain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v99 = v13;
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v100 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v120 = sub_10004C3A4(v90._countAndFlagsBits, (unint64_t)object, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "No presentment key available, skipping credential %s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(unint64_t, unint64_t))(v93 + 8))(v41, v99);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(unint64_t, uint64_t))(v93 + 8))(v41, v13);
      }
LABEL_20:
      uint64_t v56 = v94;
      sub_1000EFD00((uint64_t)&v100);
      sub_100037944((uint64_t)&v100, v56, &qword_1001C36C8);
      return;
    }
    uint64_t v46 = sub_1000EFD20(v40, (uint64_t)v95);
    uint64_t v48 = v47;
    unint64_t v49 = v13;
    id v50 = [v40 payload];
    if (!v50)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, void, uint64_t))(v99 + 104))(v27, enum case for DIPError.Code.invalidStoredData(_:), v39);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_release();

      return;
    }
    uint64_t v51 = v50;
    unint64_t v98 = v46;
    if (a9 != 1)
    {
      id v52 = [v87 options];
      if (v52)
      {
        uint64_t v53 = v52;
        unint64_t v54 = (unint64_t)[v52 readerAuthenticationPolicy];
        if ((v54 & 0x8000000000000000) != 0)
        {
LABEL_36:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        unint64_t v55 = v54;
      }
      else
      {
        unint64_t v55 = 0;
      }
      if (v55 != a10)
      {
        id v95 = v51;
        id v96 = v40;
        swift_bridgeObjectRelease();
        unint64_t v65 = v88;
        defaultLogger()();
        uint64_t v66 = v90._object;
        swift_bridgeObjectRetain_n();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.debug.getter();
        int v69 = v68;
        uint64_t v97 = v67;
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v70 = swift_slowAlloc();
          LODWORD(v92) = v69;
          uint64_t v71 = v70;
          uint64_t v91 = swift_slowAlloc();
          uint64_t v100 = v91;
          *(_DWORD *)uint64_t v71 = 136315650;
          swift_bridgeObjectRetain();
          uint64_t v120 = sub_10004C3A4(v90._countAndFlagsBits, (unint64_t)v66, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v71 + 12) = 2082;
          id v72 = (id)DCCredentialReaderAuthenticationPolicyToString();
          uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v99 = v49;
          uint64_t v74 = v73;
          unint64_t v76 = v75;

          uint64_t v120 = sub_10004C3A4(v74, v76, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v71 + 22) = 2082;
          id v77 = (id)DCCredentialReaderAuthenticationPolicyToString();
          uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v80 = v79;

          uint64_t v120 = sub_10004C3A4(v78, v80, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          char v81 = v97;
          _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v92, "Not proposing credential %s because its reader authentication policy %{public}s does not match the session's reader authentication policy %{public}s", (uint8_t *)v71, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release();
          (*(void (**)(unint64_t, unint64_t))(v93 + 8))(v88, v99);
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();

          (*(void (**)(unint64_t, unint64_t))(v93 + 8))(v65, v49);
        }
        goto LABEL_20;
      }
    }
    unint64_t v57 = v31;
    uint64_t v58 = v40;
    unint64_t v59 = (unint64_t)[v51 protectionType];
    if ((v59 & 0x8000000000000000) == 0)
    {
      unint64_t v60 = v59;
      sub_1000F7CF0(v119);
      uint64_t v97 = v119[0];
      id v96 = (id)v119[1];
      id v95 = (id)v119[2];
      unint64_t v93 = v119[3];
      unint64_t v92 = v119[4];
      uint64_t v91 = v119[5];
      v90._object = (void *)v119[6];
      v90._uint64_t countAndFlagsBits = v119[7];
      unint64_t v89 = v119[8];
      unint64_t v88 = v119[9];
      id v61 = [v51 payloadData];
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v99 = v64;
      }
      else
      {
        uint64_t v63 = 0;
        unint64_t v99 = 0xF000000000000000;
      }
      id v82 = sub_1000FAAE0();
      id v83 = [v87 options];
      if (!v83)
      {
        unint64_t v85 = 0;
        uint64_t v84 = v87;
        goto LABEL_35;
      }
      uint64_t v84 = v83;
      unint64_t v85 = (unint64_t)[v83 presentmentAuthPolicy];
      if ((v85 & 0x8000000000000000) == 0)
      {

        uint64_t v51 = v58;
        uint64_t v58 = v87;
LABEL_35:

        uint64_t v100 = v86;
        unint64_t v101 = v57;
        unint64_t v102 = v60;
        uint64_t v103 = v97;
        id v104 = v96;
        id v105 = v95;
        unint64_t v106 = v93;
        unint64_t v107 = v92;
        uint64_t v108 = v91;
        id v109 = v90._object;
        uint64_t countAndFlagsBits = v90._countAndFlagsBits;
        unint64_t v111 = v89;
        unint64_t v112 = v88;
        uint64_t v113 = v63;
        unint64_t v114 = v99;
        id v115 = v82;
        unint64_t v116 = v98;
        uint64_t v117 = v48;
        unint64_t v118 = v85;
        KeyDesignationProvider.init(sesKeystore:)(&v100);
        sub_100037944((uint64_t)&v100, v94, &qword_1001C36C8);
        return;
      }
    }
    goto LABEL_36;
  }
}

unint64_t sub_1000EA5B0()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100006CC8(&qword_1001C3C70);
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000028;
}

uint64_t sub_1000EA678(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 104) = a2;
  *(void *)(v4 + 112) = v3;
  *(unsigned char *)(v4 + 208) = a3;
  *(void *)(v4 + 96) = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  *(void *)(v4 + 120) = v5;
  *(void *)(v4 + 128) = *(void *)(v5 - 8);
  *(void *)(v4 + 136) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v4 + 144) = v6;
  *(void *)(v4 + 152) = *(void *)(v6 - 8);
  *(void *)(v4 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_1000EA79C, 0, 0);
}

uint64_t sub_1000EA79C()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentRequestInterpreter getProposalElements", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
  uint64_t v9 = sub_1000B9854(v8);
  *(void *)(v0 + 168) = v9;
  swift_bridgeObjectRelease();
  sub_10004AEE8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  sub_100037898(v7, v0 + 56, &qword_1001C28E8);
  if (*(void *)(v0 + 80))
  {
    sub_10002C468((long long *)(v0 + 56), v0 + 16);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v10;
    void *v10 = v0;
    v10[1] = sub_1000EA9F0;
    uint64_t v11 = *(void *)(v0 + 96);
    char v12 = *(unsigned char *)(v0 + 208);
    return sub_1000EAD6C(v9, v11, v0 + 16, v12);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 96);
    int v15 = *(unsigned __int8 *)(v0 + 208);
    sub_100014BBC(v0 + 56, &qword_1001C28E8);
    uint64_t v16 = sub_1000EEFA8(v9, v14, v15);
    swift_bridgeObjectRelease();
    if (!*(void *)(v16 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = 0;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
    return v17(0, v16);
  }
}

uint64_t sub_1000EA9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 184) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v7 = sub_1000EABDC;
  }
  else
  {
    *(void *)(v6 + 192) = a2;
    *(void *)(v6 + 200) = a1;
    uint64_t v7 = sub_1000EAB38;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000EAB38()
{
  uint64_t v1 = v0[25];
  sub_10000B9DC((uint64_t)(v0 + 2));
  uint64_t v2 = v0[24];
  if (!*(void *)(v2 + 16))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_1000EABDC()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  sub_10000B9DC((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000EAD6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 184) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = swift_task_alloc();
  *(void *)(v5 + 72) = *(void *)(type metadata accessor for CredentialElement(0) - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_1000EAEE8, 0, 0);
}

uint64_t sub_1000EAEE8()
{
  sub_10004AA24((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  v0[14] = sub_10004AEE8((uint64_t)_swiftEmptyArrayStorage);
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "getProposalElements: payloadProcessor provided; extracting elements from payload",
      v3,
      2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = (void *)v0[4];
  uint64_t v8 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v9 = v7[3];
  uint64_t v10 = v7[4];
  sub_100014D14(v7, v9);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16) + **(int **)(v10 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[15] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000EB0BC;
  return v13(v8, v9, v10);
}

uint64_t sub_1000EB0BC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EBCDC;
  }
  else
  {
    uint64_t v4 = sub_1000EB1D8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EB1D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[9];
  uint64_t v76 = v0[10];
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(v2 + 64);
  int64_t v8 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = (void *)v1[14];
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  int64_t v12 = 0;
LABEL_4:
  v1[18] = v9;
  v1[19] = v11;
  while (v7)
  {
    unint64_t v13 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_6:
    uint64_t v15 = *(void *)(*(void *)(result + 56) + 8 * v14);
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      unint64_t v69 = v7;
      int64_t v70 = v12;
      int64_t v71 = v8;
      uint64_t v72 = v4;
      uint64_t v74 = result;
      unint64_t v20 = (uint64_t *)(*(void *)(result + 48) + 16 * v14);
      uint64_t v21 = v20[1];
      uint64_t v78 = *v20;
      uint64_t v22 = v15 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v73 = v3;
      uint64_t v75 = *(void *)(v3 + 72);
      while (1)
      {
        sub_1000F0FE0(v22, v1[10], type metadata accessor for CredentialElement);
        uint64_t v23 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
        if (*(void *)(v23 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v24 = sub_10013C484(v78, v21);
          if (v25)
          {
            uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!*(void *)(v26 + 16)) {
              goto LABEL_32;
            }
            uint64_t v27 = *(void *)(v76 + 8);
            uint64_t v28 = *(void *)v1[10];
            swift_bridgeObjectRetain();
            unint64_t v29 = sub_10013C484(v28, v27);
            if (v30)
            {
              unsigned __int8 v31 = *(unsigned char *)(*(void *)(v26 + 56) + v29);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_33;
            }
          }
          swift_bridgeObjectRelease();
        }
LABEL_32:
        swift_bridgeObjectRelease();
        unsigned __int8 v31 = 2;
LABEL_33:
        id v32 = v1;
        char v33 = *((unsigned char *)v1 + 184);
        uint64_t v34 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter();
        uint64_t v35 = sub_1000BA634(v31, v34, v33);
        swift_bridgeObjectRelease();
        id v36 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
        swift_bridgeObjectRetain();
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v38 = [v36 initWithElementIdentifier:v37 intentToRetain:v35];

        swift_bridgeObjectRetain();
        id v39 = v38;
        sub_100006E40((uint64_t)v11);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v42 = sub_10013C484(v78, v21);
        uint64_t v43 = v9[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t result = v43 + v44;
        if (__OFADD__(v43, v44))
        {
          __break(1u);
          goto LABEL_66;
        }
        char v45 = v41;
        if (v9[3] >= result)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10009AC94();
          }
        }
        else
        {
          sub_100098E24(result, isUniquelyReferenced_nonNull_native);
          unint64_t v46 = sub_10013C484(v78, v21);
          if ((v45 & 1) != (v47 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v42 = v46;
        }
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0)
        {
          v9[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v48 = (uint64_t *)(v9[6] + 16 * v42);
          *uint64_t v48 = v78;
          v48[1] = v21;
          *(void *)(v9[7] + 8 * v42) = _swiftEmptyArrayStorage;
          uint64_t v49 = v9[2];
          uint64_t v50 = v49 + 1;
          BOOL v51 = __OFADD__(v49, 1);
          uint64_t result = swift_bridgeObjectRetain();
          if (v51) {
            goto LABEL_67;
          }
          v9[2] = v50;
        }
        uint64_t v52 = v9[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*(void *)(v52 + 8 * v42) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v52 + 8 * v42) & 0xFFFFFFFFFFFFFF8)
                                                                                                 + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v53 = v32[10];
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_bridgeObjectRelease();
        uint64_t v54 = v53;
        uint64_t v1 = v32;
        sub_1000F0E60(v54, type metadata accessor for CredentialElement);
        v22 += v75;
        uint64_t v11 = sub_1000EC028;
        if (!--v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v11 = sub_1000EC028;
          uint64_t v3 = v73;
          uint64_t result = v74;
          int64_t v8 = v71;
          uint64_t v4 = v72;
          unint64_t v7 = v69;
          int64_t v12 = v70;
          goto LABEL_4;
        }
      }
    }
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (v17 >= v8) {
    goto LABEL_49;
  }
  unint64_t v18 = *(void *)(v4 + 8 * v17);
  ++v12;
  if (v18) {
    goto LABEL_21;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 1 >= v8) {
    goto LABEL_49;
  }
  unint64_t v18 = *(void *)(v4 + 8 * v12);
  if (v18) {
    goto LABEL_21;
  }
  int64_t v12 = v17 + 2;
  if (v17 + 2 >= v8) {
    goto LABEL_49;
  }
  unint64_t v18 = *(void *)(v4 + 8 * v12);
  if (v18)
  {
LABEL_21:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v12 << 6);
    goto LABEL_6;
  }
  int64_t v19 = v17 + 3;
  if (v19 < v8)
  {
    unint64_t v18 = *(void *)(v4 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v12 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          break;
        }
        if (v12 >= v8) {
          goto LABEL_49;
        }
        unint64_t v18 = *(void *)(v4 + 8 * v12);
        ++v19;
        if (v18) {
          goto LABEL_21;
        }
      }
LABEL_68:
      __break(1u);
      return result;
    }
    int64_t v12 = v19;
    goto LABEL_21;
  }
LABEL_49:
  swift_release();
  uint64_t v55 = v1[5];
  if (*(unsigned char *)(v55 + 80) == 1)
  {
    uint64_t v56 = v1[16];
    sub_100006E40(v1[19]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v57 = (uint64_t (*)(uint64_t, void *))v1[1];
    return v57(v56, v9);
  }
  else
  {
    uint64_t v58 = (void *)v1[4];
    uint64_t v59 = *(void *)(v55 + 64);
    if (v59 == 1) {
      uint64_t v60 = 1;
    }
    else {
      uint64_t v60 = 2 * (v59 == 2);
    }
    id v61 = [self standardUserDefaults];
    v62._object = (void *)0x800000010017E380;
    v62._uint64_t countAndFlagsBits = 0xD000000000000016;
    Swift::Bool v63 = NSUserDefaults.internalBool(forKey:)(v62);

    if (v63) {
      uint64_t v64 = 2;
    }
    else {
      uint64_t v64 = v60;
    }
    uint64_t v65 = v58[3];
    uint64_t v66 = v58[4];
    sub_100014D14(v58, v65);
    id v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 + 24) + **(int **)(v66 + 24));
    uint64_t v67 = (void *)swift_task_alloc();
    v1[20] = v67;
    void *v67 = v1;
    v67[1] = sub_1000EB934;
    uint64_t v68 = v1[2];
    return v77(v68, v64, v65, v66);
  }
}

uint64_t sub_1000EB934(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EBE80;
  }
  else
  {
    uint64_t v4 = sub_1000EBA5C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EBA5C()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = sub_100136240(*(void *)(v0 + 168), *(void *)(v0 + 24), *(void **)(v0 + 128), *(void **)(v0 + 144), *(unsigned __int8 *)(v0 + 184));
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 152);
    (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 48));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_100006E40(v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006E40(*(void *)(v0 + 152));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v9(v7, v8);
  }
}

uint64_t sub_1000EBCDC()
{
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_100006E40(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000EBE80()
{
  uint64_t v1 = v0[19];
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_100006E40(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void sub_1000EC028(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_1000EC038()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_100014BBC(v0 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator, &qword_1001C2920);
  sub_10000B9DC(v0 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_payloadProcessorBuilder);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000EC0B8()
{
  sub_1000EC038();

  return swift_deallocClassInstance();
}

uint64_t sub_1000EC110()
{
  return type metadata accessor for PresentmentRequestInterpreter(0);
}

uint64_t type metadata accessor for PresentmentRequestInterpreter(uint64_t a1)
{
  return sub_1000141A4(a1, (uint64_t *)&unk_1001C3468);
}

void sub_1000EC138()
{
  sub_1000EDF68(319, (unint64_t *)&unk_1001C34B8, (void (*)(uint64_t))type metadata accessor for IdentityReaderAuthenticator);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000EC230(uint64_t a1, void *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    if (v9 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *v8;
    }
    else
    {
      uint64_t v10 = *(void *)v8;
      sub_10000354C(v10, v9);
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = v9;
    }
    uint64_t v11 = *(int *)(a3 + 24);
    int64_t v12 = (void *)(a1 + v11);
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for ISO18013SessionTranscript();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100006CC8(&qword_1001C2840);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v17 = *(int *)(a3 + 28);
    unint64_t v18 = (char *)(a1 + v17);
    int64_t v19 = (char *)a2 + v17;
    unint64_t v20 = (int *)type metadata accessor for IdentityReaderAuthenticator();
    uint64_t v21 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_100006CC8(&qword_1001C2920);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v23 = type metadata accessor for COSE_Sign1();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
      {
        uint64_t v25 = sub_100006CC8(&qword_1001C2838);
        memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v18, v19, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v23);
      }
      uint64_t v26 = v20[5];
      uint64_t v27 = (uint64_t *)&v18[v26];
      uint64_t v28 = (uint64_t *)&v19[v26];
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      sub_10000354C(*v28, v30);
      *uint64_t v27 = v29;
      v27[1] = v30;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(&v18[v20[6]], &v19[v20[6]], v14);
      uint64_t v31 = v20[7];
      id v32 = &v18[v31];
      char v33 = &v19[v31];
      uint64_t v34 = *((void *)v33 + 1);
      *(void *)id v32 = *(void *)v33;
      *((void *)v32 + 1) = v34;
      *(void *)&v18[v20[8]] = *(void *)&v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      uint64_t v35 = *(void (**)(char *, void, uint64_t, int *))(v21 + 56);
      swift_bridgeObjectRetain();
      swift_retain();
      v35(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t sub_1000EC61C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15) {
    sub_1000035EC(*(void *)(a1 + 8), v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 28);
  uint64_t v9 = type metadata accessor for IdentityReaderAuthenticator();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = type metadata accessor for COSE_Sign1();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v11);
    }
    sub_1000035EC(*(void *)(v8 + *(int *)(v9 + 20)), *(void *)(v8 + *(int *)(v9 + 20) + 8));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8 + *(int *)(v9 + 24), v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000EC840(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  uint64_t v6 = a2 + 1;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_10000354C(*v6, v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
  }
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_100006CC8(&qword_1001C2840);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  unint64_t v18 = (int *)type metadata accessor for IdentityReaderAuthenticator();
  uint64_t v19 = *((void *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100006CC8(&qword_1001C2920);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = type metadata accessor for COSE_Sign1();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v17, 1, v21))
    {
      uint64_t v23 = sub_100006CC8(&qword_1001C2838);
      memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v16, v17, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
    }
    uint64_t v24 = v18[5];
    uint64_t v25 = (uint64_t *)&v16[v24];
    uint64_t v26 = (uint64_t *)&v17[v24];
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    sub_10000354C(*v26, v28);
    *uint64_t v25 = v27;
    v25[1] = v28;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(&v16[v18[6]], &v17[v18[6]], v12);
    uint64_t v29 = v18[7];
    unint64_t v30 = &v16[v29];
    uint64_t v31 = &v17[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)unint64_t v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    *(void *)&v16[v18[8]] = *(void *)&v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    char v33 = *(void (**)(char *, void, uint64_t, int *))(v19 + 56);
    swift_bridgeObjectRetain();
    swift_retain();
    v33(v16, 0, 1, v18);
  }
  return a1;
}

void *sub_1000ECBE4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2 + 1;
  unint64_t v7 = a2[2];
  if (a1[2] >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_10000354C(*v6, a2[2]);
      a1[1] = v8;
      a1[2] = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_100014414((uint64_t)(a1 + 1));
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_10000354C(*v6, a2[2]);
  uint64_t v10 = a1[1];
  unint64_t v11 = a1[2];
  a1[1] = v9;
  a1[2] = v7;
  sub_1000035EC(v10, v11);
LABEL_8:
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_13:
    uint64_t v20 = sub_100006CC8(&qword_1001C2840);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_14:
  uint64_t v21 = *(int *)(a3 + 28);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = (int *)type metadata accessor for IdentityReaderAuthenticator();
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v26 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (v28)
    {
      sub_1000F0E60((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
      goto LABEL_20;
    }
    uint64_t v33 = type metadata accessor for COSE_Sign1();
    uint64_t v58 = *(void *)(v33 - 8);
    uint64_t v34 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v58 + 48);
    int v35 = v34(v22, 1, v33);
    int v36 = v34(v23, 1, v33);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v58 + 16))(v22, v23, v33);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v58 + 56))(v22, 0, 1, v33);
LABEL_30:
        uint64_t v47 = v24[5];
        uint64_t v48 = (uint64_t *)&v22[v47];
        uint64_t v49 = (uint64_t *)&v23[v47];
        uint64_t v50 = *v49;
        unint64_t v51 = v49[1];
        sub_10000354C(*v49, v51);
        uint64_t v52 = *v48;
        unint64_t v53 = v48[1];
        *uint64_t v48 = v50;
        v48[1] = v51;
        sub_1000035EC(v52, v53);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 24))(&v22[v24[6]], &v23[v24[6]], v15);
        uint64_t v54 = v24[7];
        uint64_t v55 = &v22[v54];
        uint64_t v56 = &v23[v54];
        *uint64_t v55 = *v56;
        v55[1] = v56[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)&v22[v24[8]] = *(void *)&v23[v24[8]];
        swift_retain();
        swift_release();
        v22[v24[9]] = v23[v24[9]];
        return a1;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v58 + 24))(v22, v23, v33);
        goto LABEL_30;
      }
      (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v22, v33);
    }
    uint64_t v46 = sub_100006CC8(&qword_1001C2838);
    memcpy(v22, v23, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_30;
  }
  if (v28)
  {
LABEL_20:
    uint64_t v32 = sub_100006CC8(&qword_1001C2920);
    memcpy(v22, v23, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  uint64_t v29 = type metadata accessor for COSE_Sign1();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v23, 1, v29))
  {
    uint64_t v31 = sub_100006CC8(&qword_1001C2838);
    memcpy(v22, v23, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 16))(v22, v23, v29);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(v22, 0, 1, v29);
  }
  uint64_t v37 = v24[5];
  id v38 = (uint64_t *)&v22[v37];
  id v39 = (uint64_t *)&v23[v37];
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  sub_10000354C(*v39, v41);
  *id v38 = v40;
  v38[1] = v41;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(&v22[v24[6]], &v23[v24[6]], v15);
  uint64_t v42 = v24[7];
  uint64_t v43 = &v22[v42];
  BOOL v44 = &v23[v42];
  *uint64_t v43 = *v44;
  v43[1] = v44[1];
  *(void *)&v22[v24[8]] = *(void *)&v23[v24[8]];
  v22[v24[9]] = v23[v24[9]];
  char v45 = *(void (**)(unsigned char *, void, uint64_t, int *))(v25 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  v45(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_1000ED270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100006CC8(&qword_1001C2840);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for IdentityReaderAuthenticator();
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100006CC8(&qword_1001C2920);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for COSE_Sign1();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18))
    {
      uint64_t v20 = sub_100006CC8(&qword_1001C2838);
      memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    }
    *(_OWORD *)&v13[v15[5]] = *(_OWORD *)&v14[v15[5]];
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v15[6]], &v14[v15[6]], v9);
    *(_OWORD *)&v13[v15[7]] = *(_OWORD *)&v14[v15[7]];
    *(void *)&v13[v15[8]] = *(void *)&v14[v15[8]];
    v13[v15[9]] = v14[v15[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *sub_1000ED5A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2 + 1;
  unint64_t v7 = a1[2];
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = a2[2];
  if (v8 >> 60 == 15)
  {
    sub_100014414((uint64_t)(a1 + 1));
LABEL_4:
    *(_OWORD *)(a1 + 1) = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = a1[1];
  a1[1] = *(void *)v6;
  a1[2] = v8;
  sub_1000035EC(v9, v7);
LABEL_6:
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_11:
    uint64_t v18 = sub_100006CC8(&qword_1001C2840);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_12:
  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = (int *)type metadata accessor for IdentityReaderAuthenticator();
  uint64_t v23 = *((void *)v22 - 1);
  uint64_t v24 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      sub_1000F0E60((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
      goto LABEL_18;
    }
    uint64_t v31 = type metadata accessor for COSE_Sign1();
    uint64_t v45 = *(void *)(v31 - 8);
    uint64_t v32 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v45 + 48);
    int v33 = v32(v20, 1, v31);
    int v34 = v32(v21, 1, v31);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v45 + 32))(v20, v21, v31);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v45 + 56))(v20, 0, 1, v31);
LABEL_28:
        uint64_t v36 = v22[5];
        uint64_t v37 = *(void *)&v20[v36];
        unint64_t v38 = *(void *)&v20[v36 + 8];
        *(_OWORD *)&v20[v36] = *(_OWORD *)&v21[v36];
        sub_1000035EC(v37, v38);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 40))(&v20[v22[6]], &v21[v22[6]], v13);
        uint64_t v39 = v22[7];
        uint64_t v40 = &v20[v39];
        unint64_t v41 = (uint64_t *)&v21[v39];
        uint64_t v43 = *v41;
        uint64_t v42 = v41[1];
        *uint64_t v40 = v43;
        v40[1] = v42;
        swift_bridgeObjectRelease();
        *(void *)&v20[v22[8]] = *(void *)&v21[v22[8]];
        swift_release();
        v20[v22[9]] = v21[v22[9]];
        return a1;
      }
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v45 + 40))(v20, v21, v31);
        goto LABEL_28;
      }
      (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v20, v31);
    }
    uint64_t v35 = sub_100006CC8(&qword_1001C2838);
    memcpy(v20, v21, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_28;
  }
  if (v26)
  {
LABEL_18:
    uint64_t v30 = sub_100006CC8(&qword_1001C2920);
    memcpy(v20, v21, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  uint64_t v27 = type metadata accessor for COSE_Sign1();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v21, 1, v27))
  {
    uint64_t v29 = sub_100006CC8(&qword_1001C2838);
    memcpy(v20, v21, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v20, v21, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v20, 0, 1, v27);
  }
  *(_OWORD *)&v20[v22[5]] = *(_OWORD *)&v21[v22[5]];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(&v20[v22[6]], &v21[v22[6]], v13);
  *(_OWORD *)&v20[v22[7]] = *(_OWORD *)&v21[v22[7]];
  *(void *)&v20[v22[8]] = *(void *)&v21[v22[8]];
  v20[v22[9]] = v21[v22[9]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t sub_1000EDBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EDBB4);
}

uint64_t sub_1000EDBB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2840);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006CC8(&qword_1001C2920);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      int v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000EDCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EDCFC);
}

void *sub_1000EDCFC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    char *result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2840);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006CC8(&qword_1001C2920);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      int v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for PresentmentRequestInterpretation(uint64_t a1)
{
  return sub_1000141A4(a1, (uint64_t *)&unk_1001C3650);
}

void sub_1000EDE50()
{
  sub_1000EDF68(319, (unint64_t *)&unk_1001C3660, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionTranscript);
  if (v0 <= 0x3F)
  {
    sub_1000EDF68(319, (unint64_t *)&unk_1001C34B8, (void (*)(uint64_t))type metadata accessor for IdentityReaderAuthenticator);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000EDF68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

id sub_1000EDFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v20 = a9;
    if (a6)
    {
LABEL_3:
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v19 = 0;
    uint64_t v20 = a9;
    if (a6) {
      goto LABEL_3;
    }
  }
  NSString v21 = 0;
LABEL_6:
  uint64_t v35 = v18;
  uint64_t v36 = v21;
  if (a8 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a7, a8);
  }
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v26 = 0;
  if (v24(v20, 1, v22) != 1)
  {
    URL._bridgeToObjectiveC()(v25);
    int v26 = v27;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v20, v22);
  }
  if (a11)
  {
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v28 = 0;
  }
  if (v24(a12, 1, v22) == 1)
  {
    uint64_t v30 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v29);
    uint64_t v30 = v31;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a12, v22);
  }
  id v32 = [v13 initWithIdentifier:v35 organization:v19 organizationalUnit:v36 iconData:isa iconURL:v26 iconMediaType:v28 privacyPolicyURL:v30 merchantCategoryCode:a13];

  return v32;
}

id sub_1000EE22C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a5) {
      goto LABEL_3;
    }
  }
  else
  {
    NSString v13 = 0;
    if (a5)
    {
LABEL_3:
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v15 = a9;
      if (a7) {
        goto LABEL_4;
      }
LABEL_8:
      NSString v16 = 0;
      if (v15) {
        goto LABEL_5;
      }
LABEL_9:
      NSString v17 = 0;
      goto LABEL_10;
    }
  }
  NSString v14 = 0;
  uint64_t v15 = a9;
  if (!a7) {
    goto LABEL_8;
  }
LABEL_4:
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_9;
  }
LABEL_5:
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_10:
  id v18 = [v9 initWithTrusted:a1 & 1 untrustedIdentifier:v13 untrustedOrganization:v14 untrustedIssuerIdentifier:v16 untrustedIssuerOrganization:v17];

  return v18;
}

id sub_1000EE358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a6 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a5, a6);
  }
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100006CC8(&qword_1001C36C0);
  Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v39 = v26;
  if (a13 >> 60 == 15)
  {
    Class v27 = 0;
  }
  else
  {
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a12, a13);
  }
  NSString v28 = v24;
  uint64_t v29 = v23;
  if (a15 >> 60 == 15)
  {
    Class v30 = 0;
    uint64_t v31 = a21;
    if (a19) {
      goto LABEL_9;
    }
LABEL_12:
    NSString v32 = 0;
    int v34 = a16;
    int v33 = a17;
    if (v31) {
      goto LABEL_10;
    }
LABEL_13:
    NSString v35 = 0;
    goto LABEL_14;
  }
  Class v30 = Data._bridgeToObjectiveC()().super.isa;
  sub_100009764(a14, a15);
  uint64_t v31 = a21;
  if (!a19) {
    goto LABEL_12;
  }
LABEL_9:
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  int v34 = a16;
  int v33 = a17;
  if (!v31) {
    goto LABEL_13;
  }
LABEL_10:
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_14:
  id v38 = [v41 initWithCredentialIdentifier:v40 presentmentKeyIdentifier:v29 presentmentPublicKey:isa partition:v28 docType:v25 elements:v39 authACL:v27 readerAuthCertificateData:v30 readerMetadata:v34 readerAnalytics:v33 region:v32 issuingJurisdiction:v35];

  return v38;
}

void *sub_1000EE5F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100006CC8(&qword_1001C12D8);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000EE8DC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100044DD8();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_1000EE6DC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 56) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000EE8DC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000EEADC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  int64_t v17 = (char *)&v37 - v16;
  __chkstk_darwin(v15);
  int64_t v19 = (char *)&v37 - v18;
  if (!*(void *)(a3 + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_10013C484(a1, a2);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    NSString v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v38 = v10;
      Class v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)Class v30 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_10004C3A4(a1, a2, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "PresentmentRequestInterpreter: documentPresentForAnyRequestedRegion: docType: %{public}s does not exist on device", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v38);
      return 0;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
    NSString v32 = v14;
LABEL_14:
    v31(v32, v10);
    return 0;
  }
  uint64_t v22 = *(void *)(*(void *)(a3 + 56) + 8 * v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!a5
    || (swift_bridgeObjectRetain(), char v23 = sub_100007A0C(a4, a5, v22), swift_bridgeObjectRelease(), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      NSString v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "PresentmentRequestInterpreter: documentPresentForAnyRequestedRegion: returning false", v35, 2u);
      swift_slowDealloc();
    }

    uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
    NSString v32 = v17;
    goto LABEL_14;
  }
  defaultLogger()();
  swift_bridgeObjectRetain();
  NSString v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v38 = v10;
    Class v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)Class v26 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_10004C3A4(a4, a5, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "PresentmentRequestInterpreter: documentPresentForAnyRequestedRegion: region: %{public}s exists", v26, 0xCu);
    uint64_t v27 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v38);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
    return 1;
  }
  return v27;
}

uint64_t sub_1000EEFA8(uint64_t a1, uint64_t a2, int a3)
{
  int v83 = a3;
  uint64_t v85 = a2;
  uint64_t v4 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v4 - 8);
  id v77 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "getProposalElements: no payloadProcessor provided; returning all requested elements",
      v12,
      2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = (void *)sub_10004AEE8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(a1 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  int64_t v20 = 0;
  uint64_t v79 = a1 + 64;
  uint64_t v80 = a1;
  int64_t v78 = v18;
  if (v17) {
    goto LABEL_6;
  }
LABEL_9:
  int64_t v25 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    if (v25 < v18)
    {
      unint64_t v26 = *(void *)(v14 + 8 * v25);
      ++v20;
      if (v26) {
        goto LABEL_22;
      }
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v18) {
        goto LABEL_65;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v20);
      if (v26) {
        goto LABEL_22;
      }
      int64_t v20 = v25 + 2;
      if (v25 + 2 >= v18) {
        goto LABEL_65;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v20);
      if (v26)
      {
LABEL_22:
        unint64_t v17 = (v26 - 1) & v26;
        for (unint64_t i = __clz(__rbit64(v26)) + (v20 << 6); ; unint64_t i = v21 | (v20 << 6))
        {
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8 * i);
          uint64_t v24 = *(void *)(v23 + 16);
          if (!v24)
          {
            if (!v17) {
              goto LABEL_9;
            }
            goto LABEL_6;
          }
          unint64_t v81 = v17;
          int64_t v82 = v20;
          NSString v28 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
          uint64_t v29 = v28[1];
          uint64_t v86 = *v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          Class v30 = (uint64_t *)(v23 + 40);
          do
          {
            uint64_t v32 = *(v30 - 1);
            uint64_t v31 = *v30;
            swift_bridgeObjectRetain();
            uint64_t v33 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
            if (!*(void *)(v33 + 16)) {
              goto LABEL_33;
            }
            swift_bridgeObjectRetain();
            unint64_t v34 = sub_10013C484(v86, v29);
            if ((v35 & 1) == 0) {
              goto LABEL_32;
            }
            uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!*(void *)(v36 + 16)) {
              goto LABEL_33;
            }
            swift_bridgeObjectRetain();
            unint64_t v37 = sub_10013C484(v32, v31);
            if ((v38 & 1) == 0)
            {
LABEL_32:
              swift_bridgeObjectRelease();
LABEL_33:
              swift_bridgeObjectRelease();
              ISO18013ReaderRequest.ItemsRequest.requestInfo.getter();
              swift_bridgeObjectRelease();
              uint64_t v41 = 0;
              goto LABEL_34;
            }
            LODWORD(v84) = *(unsigned __int8 *)(*(void *)(v36 + 56) + v37);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v39 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter();
            uint64_t v40 = v39;
            if (v84 == 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v41 = 1;
              goto LABEL_34;
            }
            if v83 == 2 || (v83) {
              goto LABEL_56;
            }
            if (!v39) {
              goto LABEL_57;
            }
            uint64_t v60 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter();
            uint64_t v62 = *(void *)(v40 + 16);
            uint64_t v75 = v61;
            uint64_t v76 = v40;
            if (v62 && (unint64_t v63 = sub_10013C484(v60, v61), (v64 & 1) != 0))
            {
              unint64_t v65 = v63;
              uint64_t v74 = *(void *)(v40 + 56);
              uint64_t v84 = type metadata accessor for AnyCodable();
              uint64_t v73 = *(void *)(v84 - 8);
              uint64_t v66 = v74 + *(void *)(v73 + 72) * v65;
              uint64_t v67 = (uint64_t)v77;
              (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v77, v66, v84);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v67, 0, 1, v84);
            }
            else
            {
              uint64_t v68 = type metadata accessor for AnyCodable();
              unint64_t v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56);
              uint64_t v67 = (uint64_t)v77;
              uint64_t v84 = v68;
              v69(v77, 1, 1, v68);
            }
            swift_bridgeObjectRelease();
            type metadata accessor for AnyCodable();
            uint64_t v75 = *(void *)(v84 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v75 + 48))(v67, 1) == 1)
            {
              sub_100014BBC(v67, &qword_1001C12C8);
LABEL_56:
              swift_bridgeObjectRelease();
LABEL_57:
              uint64_t v41 = 2;
              goto LABEL_34;
            }
            char v70 = AnyCodable.BOOLValue.getter();
            (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v67, v84);
            swift_bridgeObjectRelease();
            if ((v70 & 1) == 0) {
              goto LABEL_57;
            }
            uint64_t v41 = 3;
LABEL_34:
            id v42 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
            NSString v43 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v44 = [v42 initWithElementIdentifier:v43 intentToRetain:v41];

            swift_bridgeObjectRetain();
            id v45 = v44;
            sub_100006E40((uint64_t)v19);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v87 = v13;
            unint64_t v48 = sub_10013C484(v86, v29);
            uint64_t v49 = v13[2];
            BOOL v50 = (v47 & 1) == 0;
            uint64_t v51 = v49 + v50;
            if (__OFADD__(v49, v50))
            {
              __break(1u);
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }
            char v52 = v47;
            if (v13[3] >= v51)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_10009AC94();
              }
            }
            else
            {
              sub_100098E24(v51, isUniquelyReferenced_nonNull_native);
              unint64_t v53 = sub_10013C484(v86, v29);
              if ((v52 & 1) != (v54 & 1)) {
                goto LABEL_70;
              }
              unint64_t v48 = v53;
            }
            uint64_t v13 = v87;
            swift_bridgeObjectRelease();
            if ((v52 & 1) == 0)
            {
              v13[(v48 >> 6) + 8] |= 1 << v48;
              uint64_t v55 = (void *)(v13[6] + 16 * v48);
              *uint64_t v55 = v86;
              v55[1] = v29;
              *(void *)(v13[7] + 8 * v48) = _swiftEmptyArrayStorage;
              uint64_t v56 = v13[2];
              uint64_t v57 = v56 + 1;
              BOOL v58 = __OFADD__(v56, 1);
              swift_bridgeObjectRetain();
              if (v58) {
                goto LABEL_67;
              }
              v13[2] = v57;
            }
            swift_bridgeObjectRetain();
            uint64_t v59 = v13[7];
            swift_bridgeObjectRelease();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*(void *)(v59 + 8 * v48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v59 + 8 * v48) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            v30 += 2;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_bridgeObjectRelease();

            int64_t v19 = sub_1000EC028;
            --v24;
          }
          while (v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v19 = sub_1000EC028;
          uint64_t v14 = v79;
          a1 = v80;
          int64_t v18 = v78;
          unint64_t v17 = v81;
          int64_t v20 = v82;
          if (!v81) {
            goto LABEL_9;
          }
LABEL_6:
          unint64_t v21 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
        }
      }
      int64_t v27 = v25 + 3;
      if (v27 < v18)
      {
        unint64_t v26 = *(void *)(v14 + 8 * v27);
        if (v26)
        {
          int64_t v20 = v27;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v20 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_69;
          }
          if (v20 >= v18) {
            break;
          }
          unint64_t v26 = *(void *)(v14 + 8 * v20);
          ++v27;
          if (v26) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_65:
    swift_release();
    sub_100006E40((uint64_t)v19);
    return (uint64_t)v13;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000EF7C4()
{
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 40), v1);
  }

  swift_release();
  sub_10000B9DC(v0 + 88);

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t sub_1000EF834(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v12 = v2[2];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v9 = v2[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_100016FE0;
  return sub_1000E7C14(a1, a2, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_1000EF944()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EF97C(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100007458;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C36A8 + dword_1001C36A8);
  return v8(a1, a2, v6);
}

uint64_t sub_1000EFA44(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EFA74()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 48), v1);
  }

  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

void sub_1000EFAE4(uint64_t a1@<X8>)
{
  sub_1000E95FC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(NSObject **)(v1 + 48), *(void *)(v1 + 56), *(void **)(v1 + 64), *(void **)(v1 + 72), a1, *(void *)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t sub_1000EFB24(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000EFB3C(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[13];
  unint64_t v5 = a1[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000354C(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100009778(v4, v5);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1000EFBE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EFC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(a7, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100009764(a14, a15);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000EFCF8()
{
  return sub_1000EA5B0();
}

double sub_1000EFD00(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000EFD20(void *a1, uint64_t a2)
{
  uint64_t v81 = a2;
  uint64_t v96 = type metadata accessor for DIPError.Code();
  uint64_t v89 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  Swift::String v90 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C15B8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v84 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v85 = (char *)&v78 - v7;
  uint64_t v88 = type metadata accessor for CredentialKeyType();
  uint64_t v91 = *(void *)(v88 - 8);
  uint64_t v8 = __chkstk_darwin(v88);
  uint64_t v86 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  int64_t v82 = (char *)&v78 - v11;
  __chkstk_darwin(v10);
  uint64_t v87 = (char *)&v78 - v12;
  uint64_t v13 = sub_100006CC8(&qword_1001C0840);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CredentialKeyUsage();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  int64_t v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v78 - v21;
  id v23 = [a1 usage];
  if (v23)
  {
    uint64_t v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    CredentialKeyUsage.init(rawValue:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
      int64_t v25 = *(void (**)(char *, void, uint64_t))(v17 + 104);
      goto LABEL_6;
    }
    sub_100014BBC((uint64_t)v15, &qword_1001C0840);
  }
  int64_t v25 = *(void (**)(char *, void, uint64_t))(v17 + 104);
  v25(v22, enum case for CredentialKeyUsage.invalid(_:), v16);
LABEL_6:
  v25(v20, enum case for CredentialKeyUsage.presentment(_:), v16);
  sub_1000F14D8(&qword_1001C0848, (void (*)(uint64_t))&type metadata accessor for CredentialKeyUsage);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v94 == v92 && v95 == v93)
  {
    swift_bridgeObjectRelease_n();
    unint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v20, v16);
    v26(v22, v16);
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v28 = *(void (**)(char *, uint64_t))(v17 + 8);
    v28(v20, v16);
    v28(v22, v16);
    if ((v27 & 1) == 0)
    {
      uint64_t v46 = v90;
      BOOL v50 = *(void (**)(char *, void, uint64_t))(v89 + 104);
      uint64_t v35 = v96;
      v50(v90, enum case for DIPError.Code.badLogic(_:), v96);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_23;
    }
  }
  id v29 = [a1 identifier];
  if (!v29)
  {
    uint64_t v46 = v90;
    BOOL v50 = *(void (**)(char *, void, uint64_t))(v89 + 104);
    uint64_t v35 = v96;
    v50(v90, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v96);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_23:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_29:
    v50(v46, enum case for DIPError.Code.internalError(_:), v35);
LABEL_30:
    swift_errorRetain();
    unint64_t v62 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v62;
  }
  Class v30 = v29;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  id v34 = [a1 publicKeyIdentifier];
  uint64_t v35 = v96;
  if (!v34)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = v90;
    BOOL v50 = *(void (**)(char *, void, uint64_t))(v89 + 104);
    v50(v90, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v35);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_23;
  }
  uint64_t v36 = v34;
  uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v80 = v37;

  id v38 = [a1 keyType];
  if (!v38)
  {
LABEL_15:
    uint64_t v41 = v91;
    uint64_t v43 = v88;
    (*(void (**)(char *, void, uint64_t))(v91 + 104))(v87, enum case for CredentialKeyType.invalid(_:), v88);
    goto LABEL_16;
  }
  uint64_t v39 = v38;
  uint64_t v78 = v31;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v40 = (uint64_t)v85;
  CredentialKeyType.init(rawValue:)();
  uint64_t v41 = v91;
  uint64_t v42 = v88;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v40, 1, v88) == 1)
  {
    sub_100014BBC(v40, &qword_1001C15B8);
    uint64_t v35 = v96;
    goto LABEL_15;
  }
  uint64_t v51 = v40;
  char v52 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v87, v51, v42);
  uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v52, v42);
  uint64_t v54 = v53;
  if (v53 != enum case for CredentialKeyType.legacySE(_:))
  {
    uint64_t v35 = v96;
    if (v53 != enum case for CredentialKeyType.ses(_:))
    {
      uint64_t v43 = v88;
      if (v53 == enum case for CredentialKeyType.externalSE(_:))
      {
        uint64_t v73 = v79;
        uint64_t v74 = v33;
        unint64_t v75 = v80;
        unint64_t v62 = sub_100148F44(v78, v74, v79, v80);
        sub_1000035EC(v73, v75);
        swift_bridgeObjectRelease();
        return v62;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v94 = 0;
      unint64_t v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v44._uint64_t countAndFlagsBits = 0xD000000000000011;
      v44._object = (void *)0x80000001001809C0;
      String.append(_:)(v44);
      id v45 = [a1 keyType];
      uint64_t v46 = v90;
      if (v45)
      {
        char v47 = v45;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v48 = (uint64_t)v84;
        uint64_t v41 = v91;
        CredentialKeyType.init(rawValue:)();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v48, 1, v43) != 1)
        {
          uint64_t v49 = v86;
          (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v86, v48, v43);
          goto LABEL_28;
        }
        sub_100014BBC(v48, &qword_1001C15B8);
      }
      uint64_t v49 = v86;
      (*(void (**)(char *, void, uint64_t))(v41 + 104))(v86, enum case for CredentialKeyType.invalid(_:), v43);
LABEL_28:
      _print_unlocked<A, B>(_:_:)();
      unint64_t v63 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v91 = v41 + 8;
      v63(v49, v43);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v64._object = (void *)0x80000001001809E0;
      String.append(_:)(v64);
      uint64_t v86 = (char *)v95;
      BOOL v50 = *(void (**)(char *, void, uint64_t))(v89 + 104);
      v50(v46, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v35);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      uint64_t v35 = v96;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_1000035EC(v79, v80);
      v63(v87, v88);
      goto LABEL_29;
    }
    id v66 = [a1 keyBlob];
    if (v66)
    {
      uint64_t v67 = v66;
      uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v70 = v69;

      uint64_t v71 = v83;
      uint64_t v72 = sub_100140DA0(v78, v33, v68, v70, 0, 0xF000000000000000);
      if (!v71)
      {
        unint64_t v62 = v72;
        sub_1000035EC(v79, v80);
        sub_1000035EC(v68, v70);
        swift_bridgeObjectRelease();
        return v62;
      }
      sub_1000035EC(v79, v80);
      swift_bridgeObjectRelease();
      sub_1000035EC(v68, v70);
      (*(void (**)(char *, void, uint64_t))(v89 + 104))(v90, enum case for DIPError.Code.internalError(_:), v96);
      goto LABEL_30;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v76 = v90;
    id v77 = *(void (**)(char *, void, uint64_t))(v89 + 104);
    v77(v90, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v35);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000F14D8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v79, v80);
    v77(v76, enum case for DIPError.Code.internalError(_:), v35);
    goto LABEL_30;
  }
  id v55 = [a1 publicKey];
  uint64_t v35 = v96;
  if (!v55) {
    goto LABEL_38;
  }
  uint64_t v56 = v55;
  uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  id v60 = [a1 keySlot];
  uint64_t v61 = (uint64_t)v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 104))(v82, v54, v88);
  return sub_10006B720(v78, v33, v79, v80, v57, v59, v61, (uint64_t)v60, 0);
}

uint64_t sub_1000F0D9C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F0DDC@<X0>(char **a1@<X8>)
{
  return sub_1000E5E28(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000F0DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresentmentProposal();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F0E60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000F0EC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F0F08@<X0>(char **a1@<X8>)
{
  return sub_1000E5C14(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_1000F0F2C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F0F64@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000E39FC(*(void *)(v1 + 16), (uint64_t (*)(void *))sub_100167354, a1);
}

void *sub_1000F0F94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000B8A6C(a1, *(void *(**)(uint64_t *__return_ptr, void))(v2 + 16), a2);
}

uint64_t sub_1000F0FB0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000E39FC(*(void *)(v1 + 16), (uint64_t (*)(void *))sub_100166954, a1);
}

uint64_t sub_1000F0FE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F1048(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006CC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void *sub_1000F10AC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)sub_1000F1150(a8, a9);
  }
  return result;
}

uint64_t sub_1000F1150(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000F11A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F11CC()
{
  return sub_1000E1B20(*(void **)(v0 + 16), 46, 0xD00000000000002CLL);
}

unint64_t sub_1000F1204()
{
  unint64_t result = qword_1001C36E8;
  if (!qword_1001C36E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C36E8);
  }
  return result;
}

uint64_t sub_1000F1244()
{
  return sub_1000E1B20(*(void **)(v0 + 16), 47, 0xD00000000000002DLL);
}

uint64_t sub_1000F127C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000F12CC(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 104);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), v4);
  return a1;
}

uint64_t sub_1000F1330(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {
    uint64_t v10 = (void *)result;
    swift_bridgeObjectRetain();
    id v11 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_1000F127C(a8, a9);
  }
  return result;
}

uint64_t sub_1000F13D4()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 22, 0xD000000000000014);
}

unint64_t sub_1000F140C()
{
  unint64_t result = qword_1001C36F8;
  if (!qword_1001C36F8)
  {
    sub_100016F64(&qword_1001C36F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C36F8);
  }
  return result;
}

uint64_t sub_1000F1468()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 40, 0xD000000000000026);
}

uint64_t sub_1000F14A0()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 30, 0xD00000000000001CLL);
}

uint64_t sub_1000F14D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F1520()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 44, 0xD00000000000002ALL);
}

uint64_t sub_1000F1558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresentmentProposal();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PresentmentRequestInterpreter.DBResult(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(a1[6], a1[7]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[14];
  if (v2 >> 60 != 15) {
    sub_1000035EC(a1[13], v2);
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for PresentmentRequestInterpreter.DBResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  unint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000354C(v6, v7);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v9 = (uint64_t *)(a2 + 104);
  unint64_t v10 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_10000354C(*v9, v10);
    *(void *)(a1 + 104) = v11;
    *(void *)(a1 + 112) = v10;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PresentmentRequestInterpreter.DBResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  unint64_t v5 = a2[7];
  sub_10000354C(v4, v5);
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  a1[6] = v4;
  a1[7] = v5;
  sub_1000035EC(v6, v7);
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a2 + 13;
  unint64_t v9 = a2[14];
  if (a1[14] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_10000354C(*v8, a2[14]);
      uint64_t v12 = a1[13];
      unint64_t v13 = a1[14];
      a1[13] = v11;
      a1[14] = v9;
      sub_1000035EC(v12, v13);
      goto LABEL_8;
    }
    sub_100014414((uint64_t)(a1 + 13));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 13) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  uint64_t v10 = *v8;
  sub_10000354C(*v8, a2[14]);
  a1[13] = v10;
  a1[14] = v9;
LABEL_8:
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a2[17];
  a1[16] = a2[16];
  swift_retain();
  swift_release();
  a1[17] = v14;
  a1[18] = a2[18];
  return a1;
}

__n128 initializeWithTake for PresentmentRequestInterpreter.DBResult(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for PresentmentRequestInterpreter.DBResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_1000035EC(v6, v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  unint64_t v9 = (void *)(a2 + 104);
  unint64_t v10 = *(void *)(a1 + 112);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 112);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = *v9;
      *(void *)(a1 + 112) = v11;
      sub_1000035EC(v12, v10);
      goto LABEL_6;
    }
    sub_100014414(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v9;
LABEL_6:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = v13;
  *(void *)(a1 + 144) = v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentRequestInterpreter.DBResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentRequestInterpreter.DBResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentRequestInterpreter.DBResult()
{
  return &type metadata for PresentmentRequestInterpreter.DBResult;
}

uint64_t destroy for PresentmentRequestInterpreter.DBResults(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 64)) {
    sub_10000B9DC(a1 + 40);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresentmentRequestInterpreter.DBResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = a2 + 40;
  uint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 40, v5, v6);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 56) = v8;
    *(void *)(a1 + 72) = *(void *)(v5 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresentmentRequestInterpreter.DBResults(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v5)
    {
      *(void *)(a1 + 64) = v5;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 40);
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 56) = v7;
    goto LABEL_8;
  }
  if (!v5)
  {
    sub_10000B9DC(a1 + 40);
    goto LABEL_7;
  }
  sub_10000BAAC((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
LABEL_8:
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PresentmentRequestInterpreter.DBResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  if (*(void *)(a1 + 64)) {
    sub_10000B9DC(a1 + 40);
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentRequestInterpreter.DBResults(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentRequestInterpreter.DBResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentRequestInterpreter.DBResults()
{
  return &type metadata for PresentmentRequestInterpreter.DBResults;
}

uint64_t sub_1000F1EC0(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  sub_100006CC8(&qword_1001C0B68);
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for COSEKey();
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[26] = v6;
  v3[27] = *(void *)(v6 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000F2088, 0, 0);
}

uint64_t sub_1000F2088()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  v0[31] = *(void *)(v2 + 160);
  uint64_t v4 = (void *)swift_allocObject();
  v0[32] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  v0[33] = v5;
  *(void *)(v5 + 16) = sub_1000F4EAC;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000F21D0;
  return AsyncCoreDataContainer.performRead<A>(_:)(v6, sub_100086288, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_1000F21D0()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F24A0;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000F22F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F22F4()
{
  v0[36] = *(void *)(v0[18] + 112);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[37] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F238C;
  return sub_100144160();
}

uint64_t sub_1000F238C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000F4AAC;
  }
  else {
    uint64_t v4 = sub_1000F2670;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F24A0()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F2670()
{
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[16];
  uint64_t v5 = (void *)swift_allocObject();
  v0[40] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  uint64_t v6 = swift_allocObject();
  v0[41] = v6;
  *(void *)(v6 + 16) = sub_1000F549C;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v7 = (void *)swift_task_alloc();
  v0[42] = v7;
  uint64_t v8 = sub_100006CC8(&qword_1001C3720);
  *long long v7 = v0;
  v7[1] = sub_1000F27D8;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v0 + 7, sub_100044CA8, v6, v8);
}

uint64_t sub_1000F27D8()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F38C0;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000F28FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F28FC()
{
  uint64_t v97 = v0;
  uint64_t v1 = v0;
  *(_OWORD *)(v0 + 11) = xmmword_100176E40;
  uint64_t v2 = v0 + 11;
  uint64_t v4 = *(v2 - 4);
  uint64_t v3 = *(v2 - 3);
  v2[33] = v4;
  v2[34] = v3;
  uint64_t v5 = *(v2 - 2);
  unint64_t v6 = *(v2 - 1);
  v2[35] = v5;
  v2[36] = v6;
  if (v3)
  {
    sub_100063724(v4, v3, v5, v6);
    sub_10000354C(v5, v6);
    long long v7 = (void *)swift_task_alloc();
    v1[48] = v7;
    *long long v7 = v1;
    v7[1] = sub_1000F3770;
    return sub_10013FFEC(v4, v3, v5, v6);
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v1[29];
  uint64_t v13 = v1[27];
  uint64_t v92 = v1[26];
  unint64_t v14 = v1[17];
  if (v11)
  {
    uint64_t v84 = v1[16];
    uint64_t v89 = v1[29];
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    v1[13] = sub_10004C3A4(v84, v14, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Skipping ksk signature because no ksk exists for credential %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v89, v92);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v92);
  }
  uint64_t v16 = v1[43];
  uint64_t v17 = v1[38];
  uint64_t v18 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  uint64_t v19 = *(os_unfair_lock_s **)(v17 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  uint64_t v20 = swift_task_alloc();
  *(void *)(v20 + 16) = sub_1000698C8;
  *(void *)(v20 + 24) = v17;
  v19 += 4;
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_1000698E4(v21);
  os_unfair_lock_unlock(v19);
  if (v16)
  {
    return swift_task_dealloc();
  }
  swift_release();
  swift_task_dealloc();
  unint64_t v22 = v96;
  if (v96 >> 60 == 15)
  {
    uint64_t v23 = v1[46];
    unint64_t v93 = v1[47];
    uint64_t v25 = v1[44];
    uint64_t v24 = v1[45];
    uint64_t v27 = v1[20];
    uint64_t v26 = v1[21];
    uint64_t v28 = v1[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v26, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v28);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_100063808(v25, v24, v23, v93);
LABEL_14:
    sub_100009764(v1[11], v1[12]);
    (*(void (**)(void, void, void))(v1[20] + 104))(v1[21], enum case for DIPError.Code.internalError(_:), v1[19]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v29 = (uint64_t (*)(void))v1[1];
    return v29();
  }
  uint64_t v30 = v95;
  uint64_t v31 = v1[38];
  uint64_t v32 = *(os_unfair_lock_s **)(v17 + v18);
  uint64_t v33 = swift_task_alloc();
  *(void *)(v33 + 16) = sub_100069900;
  *(void *)(v33 + 24) = v31;
  v32 += 4;
  swift_retain();
  os_unfair_lock_lock(v32);
  sub_100069A20(v34);
  os_unfair_lock_unlock(v32);
  uint64_t v94 = v30;
  swift_release();
  swift_task_dealloc();
  if (v96 >> 60 == 15)
  {
    uint64_t v35 = v1[45];
    uint64_t v87 = v1[46];
    unint64_t v90 = v1[47];
    uint64_t v36 = v1[44];
    uint64_t v38 = v1[20];
    uint64_t v37 = v1[21];
    uint64_t v39 = v1[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v37, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v39);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_100063808(v36, v35, v87, v90);
    sub_100009764(v94, v22);
    goto LABEL_14;
  }
  uint64_t v88 = v95;
  unint64_t v91 = v96;
  uint64_t v41 = v1[23];
  uint64_t v40 = v1[24];
  uint64_t v42 = v1[22];
  swift_retain();
  sub_100069D68(v42);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v42, 1, v41) == 1)
  {
    unint64_t v85 = v1[47];
    uint64_t v43 = v1[44];
    uint64_t v78 = v1[45];
    uint64_t v81 = v1[46];
    uint64_t v44 = v1[21];
    uint64_t v45 = v1[22];
    uint64_t v46 = v1[19];
    uint64_t v47 = v1[20];
    swift_bridgeObjectRelease();
    sub_10001B61C(v45);
    (*(void (**)(uint64_t, void, uint64_t))(v47 + 104))(v44, enum case for DIPError.Code.idcsCOSEKeyCreationFailed(_:), v46);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_100063808(v43, v78, v81, v85);
    sub_100009764(v88, v91);
    sub_100009764(v94, v22);
    goto LABEL_14;
  }
  (*(void (**)(void, void, void))(v1[24] + 32))(v1[25], v1[22], v1[23]);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  CBOREncoder.init()();
  sub_100056460((unint64_t *)&unk_1001C0BD0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
  uint64_t v48 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  uint64_t v82 = v1[38];
  uint64_t v49 = v1[27];
  uint64_t v50 = v1[28];
  uint64_t v79 = v1[26];
  uint64_t v51 = v48;
  unint64_t v53 = v52;
  swift_release();
  defaultLogger()();
  uint64_t v54 = swift_task_alloc();
  uint64_t v75 = v51;
  *(void *)(v54 + 16) = v51;
  *(void *)(v54 + 24) = v53;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v76(v50, v79);
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v2;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v76(v50, v79);
  id v55 = *(os_unfair_lock_s **)(v17 + v18);
  uint64_t v56 = swift_task_alloc();
  *(void *)(v56 + 16) = sub_10006991C;
  *(void *)(v56 + 24) = v82;
  swift_retain();
  os_unfair_lock_lock(v55 + 4);
  sub_100069938(&v95);
  os_unfair_lock_unlock(v55 + 4);
  uint64_t v57 = v95;
  swift_release();
  swift_task_dealloc();
  unint64_t v86 = v1[47];
  uint64_t v80 = v1[45];
  uint64_t v83 = v1[46];
  uint64_t v77 = v1[44];
  uint64_t v58 = v1[38];
  if (!v57)
  {
    uint64_t v67 = v1[24];
    uint64_t v73 = v1[23];
    uint64_t v74 = v1[25];
    uint64_t v69 = v1[20];
    uint64_t v68 = v1[21];
    uint64_t v70 = v1[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v69 + 104))(v68, enum case for DIPError.Code.idcsInvalidAttestation(_:), v70);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v75, v53);
    sub_100009764(v94, v22);
    sub_100009764(v88, v91);
    sub_100063808(v77, v80, v83, v86);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v74, v73);
    goto LABEL_14;
  }
  uint64_t v59 = v1[24];
  uint64_t v71 = v1[23];
  uint64_t v72 = v1[25];
  uint64_t v60 = *(void *)(v58 + 16);
  uint64_t v61 = *(void *)(v58 + 24);
  uint64_t v62 = v1[11];
  unint64_t v63 = v1[12];
  id v64 = objc_allocWithZone((Class)DCCredentialCryptoKey);
  swift_bridgeObjectRetain();
  sub_100009778(v62, v63);
  id v65 = sub_1000F5284(v60, v61, v94, v22, v88, v91, v75, v53, 0, 1, v57, v62, v63, 0);
  sub_100063808(v77, v80, v83, v86);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v72, v71);
  sub_100009764(v1[11], v1[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v66 = (uint64_t (*)(id))v1[1];
  return v66(v65);
}

uint64_t sub_1000F3770(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 392) = a1;
  *(void *)(v4 + 400) = v1;
  swift_task_dealloc();
  sub_1000035EC(*(void *)(v3 + 368), *(void *)(v3 + 376));
  if (v1) {
    uint64_t v5 = sub_1000F4C6C;
  }
  else {
    uint64_t v5 = sub_1000F3A9C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F38C0()
{
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F3A9C()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0[49];
  if (v1)
  {
    uint64_t v2 = v0[50];
    v0[5] = &type metadata for KeySigningKeySignatureProvider;
    v0[6] = &off_1001B8D28;
    v0[2] = v1;
    swift_retain_n();
    uint64_t v3 = sub_100157B04();
    if (v2)
    {
      uint64_t v6 = v0[46];
      unint64_t v5 = v0[47];
      uint64_t v8 = v0[44];
      uint64_t v7 = v0[45];
      sub_10001B67C((uint64_t)(v0 + 2));
      swift_release();
      sub_100063808(v8, v7, v6, v5);
      swift_release_n();
      uint64_t v9 = v8;
      uint64_t v10 = v7;
      uint64_t v11 = v6;
LABEL_4:
      sub_100063808(v9, v10, v11, v5);
LABEL_5:
      sub_100009764(v0[11], v0[12]);
      (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = (uint64_t (*)(void))v0[1];
      return v12();
    }
    uint64_t v31 = v3;
    uint64_t v32 = v4;
    sub_100009764(v0[11], v0[12]);
    v0[11] = v31;
    v0[12] = v32;
    uint64_t v33 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = sub_10006991C;
    *(void *)(v34 + 24) = v1;
    swift_retain();
    os_unfair_lock_lock(v33 + 4);
    sub_1000F5508(&v117);
    os_unfair_lock_unlock(v33 + 4);
    uint64_t v36 = v0[46];
    unint64_t v35 = v0[47];
    uint64_t v38 = v0[44];
    uint64_t v37 = v0[45];
    uint64_t v29 = v117;
    swift_release_n();
    sub_100063808(v38, v37, v36, v35);
    swift_task_dealloc();
    sub_10001B67C((uint64_t)(v0 + 2));
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v14 = v0[46];
    unint64_t v15 = v0[47];
    uint64_t v17 = v0[44];
    uint64_t v16 = v0[45];
    defaultLogger()();
    swift_bridgeObjectRetain();
    sub_100063724(v17, v16, v14, v15);
    swift_bridgeObjectRetain();
    sub_100063724(v17, v16, v14, v15);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v22 = v0[46];
    unint64_t v21 = v0[47];
    uint64_t v24 = v0[44];
    unint64_t v23 = v0[45];
    uint64_t v25 = v0[30];
    uint64_t v26 = v0[27];
    uint64_t v115 = v0[26];
    unint64_t v27 = v0[17];
    if (v20)
    {
      uint64_t v100 = v0[16];
      loga = v18;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v117 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      v0[14] = sub_10004C3A4(v100, v27, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[15] = sub_10004C3A4(v24, v23, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100063808(v24, v23, v22, v21);
      sub_100063808(v24, v23, v22, v21);
      _os_log_impl((void *)&_mh_execute_header, loga, v19, "Credential %s referenced ksk %s but no such key exists", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100063808(v24, v23, v22, v21);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v115);
    }
    else
    {
      sub_100063808(v24, v23, v22, v21);
      swift_bridgeObjectRelease_n();
      sub_100063808(v24, v23, v22, v21);
      sub_100063808(v24, v23, v22, v21);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v115);
    }
    uint64_t v29 = 0;
    uint64_t v30 = v0[50];
  }
  uint64_t v39 = v0[38];
  uint64_t v40 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  uint64_t v41 = *(os_unfair_lock_s **)(v39 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  uint64_t v42 = swift_task_alloc();
  *(void *)(v42 + 16) = sub_1000698C8;
  *(void *)(v42 + 24) = v39;
  v41 += 4;
  swift_retain();
  os_unfair_lock_lock(v41);
  sub_1000698E4(v43);
  os_unfair_lock_unlock(v41);
  if (v30)
  {
    return swift_task_dealloc();
  }
  swift_release();
  swift_task_dealloc();
  unint64_t v44 = v118;
  if (v118 >> 60 == 15)
  {
    uint64_t v45 = v0[46];
    unint64_t v5 = v0[47];
    uint64_t v47 = v0[44];
    uint64_t v46 = v0[45];
    uint64_t v49 = v0[20];
    uint64_t v48 = v0[21];
    uint64_t v50 = v0[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v49 + 104))(v48, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v50);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    uint64_t v9 = v47;
    uint64_t v10 = v46;
    uint64_t v11 = v45;
    goto LABEL_4;
  }
  uint64_t v51 = v117;
  uint64_t v52 = v0[38];
  unint64_t v53 = *(os_unfair_lock_s **)(v39 + v40);
  uint64_t v54 = swift_task_alloc();
  *(void *)(v54 + 16) = sub_100069900;
  *(void *)(v54 + 24) = v52;
  v53 += 4;
  swift_retain();
  os_unfair_lock_lock(v53);
  sub_100069A20(v55);
  os_unfair_lock_unlock(v53);
  uint64_t v116 = v51;
  swift_release();
  swift_task_dealloc();
  if (v118 >> 60 == 15)
  {
    uint64_t v56 = v0[46];
    unint64_t v113 = v0[47];
    uint64_t v58 = v0[44];
    uint64_t v57 = v0[45];
    uint64_t v59 = v0[20];
    uint64_t v60 = v0[21];
    uint64_t v61 = v0[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v60, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v61);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_100063808(v58, v57, v56, v113);
LABEL_23:
    sub_100009764(v116, v44);
    goto LABEL_5;
  }
  uint64_t v112 = v117;
  unint64_t v114 = v118;
  uint64_t v62 = v0[23];
  uint64_t v63 = v0[24];
  uint64_t v64 = v0[22];
  swift_retain();
  sub_100069D68(v64);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1, v62) == 1)
  {
    unint64_t v109 = v0[47];
    uint64_t v65 = v0[45];
    os_log_t logb = (os_log_t)v0[46];
    uint64_t v66 = v0[44];
    uint64_t v67 = v0[21];
    uint64_t v68 = v0[22];
    uint64_t v69 = v0[19];
    uint64_t v70 = v0[20];
    swift_bridgeObjectRelease();
    sub_10001B61C(v68);
    (*(void (**)(uint64_t, void, uint64_t))(v70 + 104))(v67, enum case for DIPError.Code.idcsCOSEKeyCreationFailed(_:), v69);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_100063808(v66, v65, (uint64_t)logb, v109);
    sub_100009764(v112, v114);
    goto LABEL_23;
  }
  (*(void (**)(void, void, void))(v0[24] + 32))(v0[25], v0[22], v0[23]);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  CBOREncoder.init()();
  sub_100056460((unint64_t *)&unk_1001C0BD0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
  uint64_t v71 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  os_log_t logc = (os_log_t)v0[38];
  uint64_t v72 = v0[28];
  uint64_t v110 = v0[27];
  uint64_t v102 = v0[26];
  uint64_t v73 = v71;
  unint64_t v75 = v74;
  swift_release();
  defaultLogger()();
  uint64_t v76 = swift_task_alloc();
  uint64_t v98 = v73;
  unint64_t v99 = v75;
  *(void *)(v76 + 16) = v73;
  *(void *)(v76 + 24) = v75;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  unint64_t v101 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
  v101(v72, v102);
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v0 + 11;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v101(v72, v102);
  uint64_t v77 = *(os_unfair_lock_s **)(v39 + v40);
  uint64_t v78 = swift_task_alloc();
  *(void *)(v78 + 16) = sub_10006991C;
  *(void *)(v78 + 24) = logc;
  swift_retain();
  os_unfair_lock_lock(v77 + 4);
  sub_100069938(&v117);
  os_unfair_lock_unlock(v77 + 4);
  uint64_t v79 = v117;
  swift_release();
  swift_task_dealloc();
  unint64_t v80 = v0[47];
  uint64_t v111 = v0[46];
  uint64_t v104 = v0[44];
  os_log_t log = (os_log_t)v0[45];
  uint64_t v81 = v0[38];
  if (!v79)
  {
    uint64_t v89 = v0[24];
    uint64_t v103 = v0[25];
    uint64_t v90 = v0[23];
    uint64_t v92 = v0[20];
    uint64_t v91 = v0[21];
    uint64_t v93 = v0[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v92 + 104))(v91, enum case for DIPError.Code.idcsInvalidAttestation(_:), v93);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v98, v99);
    sub_100009764(v116, v44);
    sub_100009764(v112, v114);
    sub_100063808(v104, (uint64_t)log, v111, v80);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v103, v90);
    goto LABEL_5;
  }
  uint64_t v82 = v0[24];
  uint64_t v96 = v0[23];
  uint64_t v97 = v0[25];
  uint64_t v83 = *(void *)(v81 + 24);
  uint64_t v94 = *(void *)(v81 + 16);
  unint64_t v95 = v0[47];
  uint64_t v84 = v0[11];
  unint64_t v85 = v0[12];
  id v86 = objc_allocWithZone((Class)DCCredentialCryptoKey);
  swift_bridgeObjectRetain();
  sub_100009778(v84, v85);
  id v87 = sub_1000F5284(v94, v83, v116, v44, v112, v114, v98, v75, 0, 1, v79, v84, v85, v29);
  sub_100063808(v104, (uint64_t)log, v111, v95);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v97, v96);
  sub_100009764(v0[11], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v88 = (uint64_t (*)(id))v0[1];
  return v88(v87);
}

uint64_t sub_1000F4AAC()
{
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F4C6C()
{
  uint64_t v1 = v0[46];
  unint64_t v2 = v0[47];
  uint64_t v4 = v0[44];
  uint64_t v3 = v0[45];
  swift_release();
  sub_100063808(v4, v3, v1, v2);
  sub_100063808(v4, v3, v1, v2);
  sub_100009764(v0[11], v0[12]);
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000F4E6C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000F4EAC()
{
  unint64_t v2 = sub_1000075AC(*(void *)(v0 + 24), *(void **)(v0 + 32));
  if (!v1) {
}
  }

void sub_1000F4EEC(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = sub_1000075AC(a2, a3);
  if (v5) {
    return;
  }
  uint64_t v10 = v9;
  type metadata accessor for StoredCryptoKey();
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(a1 + 16)];
  sub_1000FADC0(a4);
  [v10 addCryptoKeysObject:v11];
  sub_100007290();
  unint64_t v12 = (unint64_t)sub_1000F5DBC();
  unint64_t v13 = v12;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_6;
    }
LABEL_15:

    swift_bridgeObjectRelease();
LABEL_16:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    id v16 = [v15 identifier];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      id v21 = [v15 publicKeyIdentifier];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v24;

        *(void *)a5 = v18;
        *(void *)(a5 + 8) = v20;
        *(void *)(a5 + 16) = v23;
        *(void *)(a5 + 24) = v26;
        return;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    goto LABEL_16;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v13 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

unint64_t sub_1000F511C()
{
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000002ALL;
}

unint64_t sub_1000F51AC(uint64_t a1)
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >> 60 == 15)
  {
    object = (void *)0xE500000000000000;
    uint64_t countAndFlagsBits = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    sub_10000354C(*(void *)a1, *(void *)(a1 + 8));
    Swift::String v6 = Data.base16EncodedString()();
    uint64_t countAndFlagsBits = v6._countAndFlagsBits;
    object = v6._object;
    sub_100009764(v5, v2);
  }
  v7._uint64_t countAndFlagsBits = countAndFlagsBits;
  v7._object = object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0xD000000000000025;
}

id sub_1000F5284(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3;
  unint64_t v35 = a4;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v32 = a6;
  v36.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v21 = Data._bridgeToObjectiveC()().super.isa;
  v22.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v33 = v21;
  Class v23 = isa;
  if (a13 >> 60 != 15)
  {
    Class v24 = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a12, a13);
    uint64_t v26 = v30;
    uint64_t v25 = v31;
    if (a14) {
      goto LABEL_3;
    }
LABEL_5:
    v27.super.Class isa = 0;
    goto LABEL_6;
  }
  Class v24 = 0;
  uint64_t v26 = v30;
  uint64_t v25 = v31;
  if (!a14) {
    goto LABEL_5;
  }
LABEL_3:
  v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_6:
  id v28 = [v26 initWithIdentifier:v25 publicKey:v23 publicKeyIdentifier:v36.super.isa publicKeyCOSEKey:v33 keyType:a9 keyUsage:a10 attestation:v22.super.isa keyAuthorization:v24 kskAttestation:v27.super.isa];
  sub_1000035EC(a7, a8);
  sub_1000035EC(a5, v32);
  sub_1000035EC(v34, v35);

  return v28;
}

uint64_t sub_1000F5454()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000F549C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000F4EEC(a1, *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_1000F54BC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000F54F4()
{
  return sub_1000F511C();
}

unint64_t sub_1000F54FC()
{
  return sub_1000F51AC(*(void *)(v0 + 16));
}

void *sub_1000F5508@<X0>(void *a1@<X8>)
{
  return sub_100069938(a1);
}

uint64_t sub_1000F5520()
{
  uint64_t v0 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  Swift::String v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  DIPError.Code.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000C3D8((uint64_t)v2);
    return -5000;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for DIPError.Code.missingEntitlement(_:)) {
    goto LABEL_8;
  }
  int v12 = v11;
  if (v11 == enum case for DIPError.Code.invalidStoredData(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5004;
  }
  if (v11 == enum case for DIPError.Code.idcsUnauthorizedPartition(_:))
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5002;
  }
  else if (v11 == enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5005;
  }
  else if (v11 == enum case for DIPError.Code.unableToGenerateNonceOnWatch(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5007;
  }
  else if (v11 == enum case for DIPError.Code.unableToGenerateAuthorizationTokenOnPhone(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5006;
  }
  else
  {
    int v13 = enum case for DIPError.Code.unableToGeneratePrearmTrustKeyOnPhone(_:);
    id v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v9, v3);
    if (v12 != v13)
    {
      v14(v7, v3);
      return -5000;
    }
    return -5008;
  }
}

void *sub_1000F58F8()
{
  uint64_t v1 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [v0 payloads];
  __n128 result = &_swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v12 = (unint64_t)&_swiftEmptyArrayStorage;
    NSSet.makeIterator()();
    NSFastEnumerationIterator.next()();
    while (v11)
    {
      sub_10004DCD8(&v10, &v9);
      type metadata accessor for StoredPayload();
      if (swift_dynamicCast())
      {
        id v7 = v8;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      NSFastEnumerationIterator.next()();
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);

    return (void *)v12;
  }
  return result;
}

void *sub_1000F5AC0()
{
  uint64_t v2 = type metadata accessor for CredentialKeyUsage();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v33 - v7;
  id v9 = [v0 credentialIdentifier];
  if (!v9) {
    return &_swiftEmptyArrayStorage;
  }
  long long v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = [v0 managedObjectContext];
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  id v39 = v14;
  uint64_t v38 = type metadata accessor for StoredCryptoKey();
  id v37 = (id)static StoredCryptoKey.fetchRequest()();
  uint64_t v36 = sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v15 = v11;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100176D20;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v17 = sub_10000DB88();
  *(void *)(v16 + 64) = v17;
  *(void *)(v16 + 32) = v15;
  *(void *)(v16 + 40) = v13;
  uint64_t v35 = v1;
  uint64_t v34 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v34(v8, enum case for CredentialKeyUsage.deviceEncryption(_:), v2);
  uint64_t v18 = CredentialKeyUsage.rawValue.getter();
  uint64_t v19 = v8;
  uint64_t v20 = v18;
  uint64_t v22 = v21;
  Class v23 = v6;
  Class v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v19, v2);
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v17;
  *(void *)(v16 + 72) = v20;
  *(void *)(v16 + 80) = v22;
  v34(v23, enum case for CredentialKeyUsage.deviceEncryptionAuthRequired(_:), v2);
  uint64_t v25 = CredentialKeyUsage.rawValue.getter();
  uint64_t v27 = v26;
  v24(v23, v2);
  *(void *)(v16 + 136) = &type metadata for String;
  *(void *)(v16 + 144) = v17;
  *(void *)(v16 + 112) = v25;
  *(void *)(v16 + 120) = v27;
  id v28 = NSPredicate.init(format:_:)();
  id v29 = v37;
  [v37 setPredicate:v28];

  uint64_t v30 = v39;
  uint64_t v31 = NSManagedObjectContext.fetch<A>(_:)();

  return (void *)v31;
}

void *sub_1000F5DBC()
{
  return sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.keySigning(_:));
}

uint64_t sub_1000F5DDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  id v87 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006CC8(&qword_1001C15B0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v81 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v80 = (char *)&v69 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v69 - v11;
  __chkstk_darwin(v10);
  id v14 = (char *)&v69 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v86 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v83 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v84 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v69 - v20;
  unint64_t v22 = (unint64_t)[v0 format];
  if ((v22 & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
  unint64_t v23 = v22;
  id v24 = [v0 docType];
  if (!v24)
  {
    (*(void (**)(char *, void, void *))(v3 + 104))(v87, enum case for DIPError.Code.invalidStoredData(_:), v2);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
LABEL_14:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (uint64_t)v2;
  }
  uint64_t v25 = v24;
  uint64_t v85 = v15;
  id v26 = [v1 payloadData];
  if (!v26)
  {

    (*(void (**)(char *, void, void *))(v3 + 104))(v87, enum case for DIPError.Code.invalidStoredData(_:), v2);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    goto LABEL_14;
  }
  uint64_t v27 = v26;
  uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v78 = v29;
  uint64_t v79 = v28;

  id v77 = v1;
  id v30 = [v1 createdAt];
  if (!v30)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v14, 1, 1, v85);
    goto LABEL_16;
  }
  uint64_t v31 = v30;
  unint64_t v71 = v23;
  uint64_t v76 = v21;
  unint64_t v32 = v84;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = v86;
  uint64_t v34 = (char *)(v86 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v85;
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
  v72(v14, v32, v85);
  unint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  uint64_t v75 = v33 + 56;
  v74(v14, 0, 1, v36);
  uint64_t v37 = v36;
  uint64_t v2 = v35;
  uint64_t v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v73(v14, 1, v37) == 1)
  {
LABEL_16:

    sub_1000FC1B0((uint64_t)v14);
    (*(void (**)(char *, void, void *))(v3 + 104))(v87, enum case for DIPError.Code.invalidStoredData(_:), v2);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v79, v78);
    return (uint64_t)v2;
  }
  uint64_t v38 = v72;
  v72(v76, v14, v85);
  id v39 = [v77 updatedAt];
  if (!v39)
  {
    v74(v12, 1, 1, v85);
    goto LABEL_18;
  }
  uint64_t v40 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v41 = v85;
  v38(v12, v32, v85);
  v74(v12, 0, 1, v41);
  if (v73(v12, 1, v41) == 1)
  {
LABEL_18:

    sub_1000FC1B0((uint64_t)v12);
    (*(void (**)(char *, void, void *))(v3 + 104))(v87, enum case for DIPError.Code.invalidStoredData(_:), v2);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v79, v78);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v76, v85);
    return (uint64_t)v2;
  }
  uint64_t v42 = v38;
  id v87 = v34;
  v38(v83, v12, v85);
  id v43 = v77;
  unint64_t v70 = (unint64_t)[v77 protectionType];
  if ((v70 & 0x8000000000000000) == 0)
  {
    uint64_t v2 = [objc_allocWithZone((Class)DCCredentialPayload) init];
    [v2 setFormat:v71];
    [v2 setDocType:v25];

    unint64_t v45 = v78;
    uint64_t v44 = v79;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v2 setPayloadData:isa];

    Class v47 = Date._bridgeToObjectiveC()().super.isa;
    [v2 setCreatedAt:v47];

    Class v48 = Date._bridgeToObjectiveC()().super.isa;
    [v2 setUpdatedAt:v48];

    Class v49 = (Class)[v43 validFrom];
    if (v49)
    {
      unint64_t v50 = v45;
      uint64_t v51 = v84;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v52 = v80;
      uint64_t v53 = v85;
      v42(v80, v51, v85);
      v74(v52, 0, 1, v53);
      unsigned int v54 = v73(v52, 1, v53);
      uint64_t v55 = v81;
      if (v54 == 1)
      {
        Class v49 = 0;
      }
      else
      {
        Class v49 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v86 + 8))(v52, v53);
      }
      unint64_t v45 = v50;
      uint64_t v44 = v79;
    }
    else
    {
      v74(v80, 1, 1, v85);
      uint64_t v55 = v81;
    }
    [v2 setValidFrom:v49];

    Class v56 = (Class)[v77 validUntil];
    if (v56)
    {
      uint64_t v57 = v84;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = v85;
      v42(v55, v57, v85);
      v74(v55, 0, 1, v58);
      if (v73(v55, 1, v58) == 1)
      {
        Class v56 = 0;
      }
      else
      {
        Class v56 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v86 + 8))(v55, v58);
      }
    }
    else
    {
      uint64_t v58 = v85;
      v74(v55, 1, 1, v85);
    }
    unint64_t v59 = v70;
    [v2 setValidUntil:v56];

    [v2 setProtectionType:v59];
    uint64_t v60 = v82;
    id v61 = sub_1000FAAE0();
    if (v60)
    {
      sub_1000035EC(v44, v45);

      uint64_t v62 = *(void (**)(char *, uint64_t))(v86 + 8);
      v62(v83, v58);
      v62(v76, v58);
    }
    else
    {
      if (v61)
      {
        sub_100006CC8(&qword_1001C3C70);
        v63.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v63.super.Class isa = 0;
      }
      [v2 setElementIdentifiersByNamespace:v63.super.isa];

      id v64 = v77;
      id v65 = [v77 region];
      [v2 setRegion:v65];

      id v66 = [v64 issuingJurisdiction];
      [v2 setIssuingJurisdiction:v66];
      sub_1000035EC(v44, v45);

      uint64_t v67 = *(void (**)(char *, uint64_t))(v86 + 8);
      v67(v83, v58);
      v67(v76, v58);
    }
    return (uint64_t)v2;
  }
LABEL_34:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000F6A84()
{
  return sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
}

void *sub_1000F6AA4(unsigned int *a1)
{
  uint64_t v3 = type metadata accessor for CredentialKeyUsage();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v1 credentialIdentifier];
  if (!v7) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  id v12 = [v1 managedObjectContext];
  if (!v12)
  {
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v12;
  uint64_t v28 = type metadata accessor for StoredCryptoKey();
  id v27 = (id)static StoredCryptoKey.fetchRequest()();
  uint64_t v26 = sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v14 = v9;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1001767E0;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000DB88();
  uint64_t v17 = a1;
  unint64_t v18 = v16;
  *(void *)(v15 + 64) = v16;
  *(void *)(v15 + 32) = v14;
  *(void *)(v15 + 40) = v11;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *v17, v3);
  uint64_t v19 = CredentialKeyUsage.rawValue.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v18;
  *(void *)(v15 + 72) = v19;
  *(void *)(v15 + 80) = v21;
  unint64_t v22 = NSPredicate.init(format:_:)();
  id v23 = v27;
  [v27 setPredicate:v22];

  uint64_t v24 = NSManagedObjectContext.fetch<A>(_:)();
  return (void *)v24;
}

void *sub_1000F6D18()
{
  id v1 = [v0 credentialIdentifier];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  id v6 = [v0 managedObjectContext];
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  id v7 = v6;
  type metadata accessor for StoredCryptoKey();
  uint64_t v8 = (void *)static StoredCryptoKey.fetchRequest()();
  sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001768E0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000DB88();
  *(void *)(v9 + 32) = v3;
  *(void *)(v9 + 40) = v5;
  uint64_t v10 = NSPredicate.init(format:_:)();
  [v8 setPredicate:v10];

  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  return (void *)v11;
}

uint64_t sub_1000F6E90(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && *(void *)(a1 + 16))
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v15[1] = a1;
    sub_100006CC8(&qword_1001C3070);
    sub_1000FC37C();
    uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v2)
    {
      swift_release();
      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for DIPError.Code.jsonEncodingFailed(_:), v5);
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return swift_errorRelease();
    }
    else
    {
      uint64_t v12 = v10;
      unint64_t v13 = v11;
      swift_release();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v3 setElementIdentifiersByNamespace:isa];

      return sub_1000035EC(v12, v13);
    }
  }
  return result;
}

void sub_1000F70F0()
{
  id v1 = v0;
  uint64_t v2 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v22 - v10;
  NSString v12 = String._bridgeToObjectiveC()();
  [v1 setIdentifier:v12];

  CredentialKeyType.rawValue.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setKeyType:v13];

  CredentialKeyUsage.rawValue.getter();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setUsage:v14];

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v1 setPublicKeyIdentifier:isa];

  id v16 = [v1 createdAt];
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  uint64_t v17 = v16;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v18(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    Date.init()();
    sub_1000FC1B0((uint64_t)v4);
    goto LABEL_6;
  }
  v18(v11, v4, v5);
LABEL_6:
  Class v19 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v11, v5);
  [v1 setCreatedAt:v19];

  Date.init()();
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  v20(v9, v5);
  [v1 setUpdatedAt:v21];
}

unint64_t sub_1000F7454(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for CredentialKeyUsage();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [v2 credentialIdentifier];
  if (!v10) {
    return 0;
  }
  unint64_t v11 = v10;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = [v2 managedObjectContext];
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v15 = v14;
  uint64_t v34 = type metadata accessor for StoredCryptoKey();
  id v16 = (void *)static StoredCryptoKey.fetchRequest()();
  v31[2] = a2;
  uint64_t v17 = v16;
  [v16 setFetchLimit:1];
  uint64_t v33 = sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v18 = swift_allocObject();
  v31[1] = a1;
  Class v19 = (void *)v18;
  *(_OWORD *)(v18 + 16) = xmmword_100176D20;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000DB88();
  uint64_t v32 = v3;
  unint64_t v21 = v20;
  v19[8] = v20;
  v19[4] = v35;
  v19[5] = v13;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for CredentialKeyUsage.presentment(_:), v6);
  uint64_t v22 = CredentialKeyUsage.rawValue.getter();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19[12] = &type metadata for String;
  v19[13] = v21;
  v19[9] = v22;
  v19[10] = v24;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v19[17] = sub_10000C854(0, &qword_1001C0880);
  v19[18] = sub_10000C890();
  v19[14] = isa;
  uint64_t v26 = NSPredicate.init(format:_:)();
  [v17 setPredicate:v26];

  uint64_t v27 = v32;
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v27)
  {

    return v24;
  }
  unint64_t v29 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v24)
    {
LABEL_13:
      swift_bridgeObjectRelease();

      return v24;
    }
  }
  if ((v29 & 0xC000000000000001) != 0)
  {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v30 = *(id *)(v29 + 32);
LABEL_12:
    uint64_t v24 = (uint64_t)v30;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

char *sub_1000F77B0()
{
  uint64_t v1 = sub_100006CC8(&qword_1001C15B0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v42 - v5;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v42 - v13;
  __chkstk_darwin(v12);
  id v16 = (char *)&v42 - v15;
  unint64_t v55 = (unint64_t)sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
  if (v0) {
    return v16;
  }
  Class v49 = v16;
  uint64_t v53 = v14;
  if (!(v55 >> 62))
  {
    uint64_t v17 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_4;
    }
LABEL_35:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = (uint64_t)result;
  if (!result) {
    goto LABEL_35;
  }
LABEL_4:
  unint64_t v52 = v55 & 0xC000000000000001;
  uint64_t v42 = 0;
  if ((v55 & 0xC000000000000001) != 0)
  {
    unint64_t result = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t result = (char *)*(id *)(v55 + 32);
  }
  id v16 = result;
  unint64_t v51 = v17 - 1;
  if (v17 == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
    return v16;
  }
  if (v17 < 2) {
    goto LABEL_38;
  }
  id v43 = v11;
  Class v48 = v4;
  if (v52 || (unint64_t v19 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10), v19 >= 2) && v51 < v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v22 = (void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
    unint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v45 = v7;
    uint64_t v46 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v23 = v53;
    unsigned int v54 = v21;
    Class v47 = v22;
    while (1)
    {
      uint64_t v25 = v52
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v55 + 8 * v20 + 40);
      uint64_t v26 = v25;
      Class v56 = v16;
      id v27 = [v16 createdAt:v42];
      if (!v27) {
        break;
      }
      uint64_t v28 = v27;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v29 = *v21;
      (*v21)(v6, v23, v7);
      id v30 = *v22;
      (*v22)(v6, 0, 1, v7);
      uint64_t v31 = *v50;
      if ((*v50)(v6, 1, v7) == 1) {
        goto LABEL_16;
      }
      v29(v49, v6, v7);
      id v32 = [v26 createdAt];
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v34 = v6;
        uint64_t v35 = v53;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = (uint64_t)v48;
        uint64_t v37 = v35;
        uint64_t v6 = v34;
        uint64_t v7 = v45;
        v29(v48, v37, v45);
        uint64_t v22 = v47;
        v30((char *)v36, 0, 1, v7);
        if (v31((char *)v36, 1, v7) != 1)
        {
          uint64_t v38 = v43;
          v29(v43, (char *)v36, v7);
          id v39 = v49;
          int v44 = static Date.< infix(_:_:)();
          uint64_t v40 = *v46;
          (*v46)(v38, v7);
          v40(v39, v7);
          id v16 = v56;
          if (v44) {
            uint64_t v41 = v56;
          }
          else {
            uint64_t v41 = v26;
          }
          if (v44) {
            id v16 = v26;
          }
          uint64_t v26 = v41;
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v22 = v47;
        uint64_t v36 = (uint64_t)v48;
        v30(v48, 1, 1, v7);
      }
      (*v46)(v49, v7);
      uint64_t v24 = v36;
LABEL_17:
      sub_1000FC1B0(v24);
      id v16 = v56;
LABEL_18:

      ++v20;
      uint64_t v23 = v53;
      unint64_t v21 = v54;
      if (v51 == v20) {
        goto LABEL_9;
      }
    }
    (*v22)(v6, 1, 1, v7);
LABEL_16:
    uint64_t v24 = (uint64_t)v6;
    goto LABEL_17;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000F7CF0(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (unint64_t)[v2 format];
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_15;
  }
  unint64_t v9 = v8;
  id v10 = [v2 docType];
  if (!v10)
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.invalidStoredData(_:), v4);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
LABEL_9:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  unint64_t v11 = v10;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  id v14 = [v2 payloadData];
  if (!v14)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.invalidStoredData(_:), v4);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    goto LABEL_9;
  }
  uint64_t v15 = v14;
  unint64_t v36 = v13;
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  unint64_t v19 = (unint64_t)[v2 protectionType];
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  unint64_t v20 = v19;
  uint64_t v35 = v16;
  id v21 = [v2 region];
  unint64_t v34 = v18;
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v25 = 0;
  }
  id v26 = [v2 issuingJurisdiction];
  if (v26)
  {
    id v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;
  }
  else
  {
    uint64_t v28 = 0;
    unint64_t v30 = 0;
  }
  uint64_t v31 = v37;
  *a1 = v9;
  a1[1] = v31;
  uint64_t v32 = v35;
  a1[2] = v36;
  a1[3] = v32;
  a1[4] = v34;
  a1[5] = v20;
  a1[6] = v23;
  a1[7] = v25;
  a1[8] = v28;
  a1[9] = v30;
}

void *sub_1000F80DC()
{
  return sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.payloadProtection(_:));
}

uint64_t sub_1000F80FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  unint64_t v287 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v254 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v283 = type metadata accessor for Logger();
  uint64_t v278 = *(void *)(v283 - 8);
  uint64_t v5 = __chkstk_darwin(v283);
  v272 = (char *)v254 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v277 = (char *)v254 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v280 = (char *)v254 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v281 = (void (**)(char *, uint64_t))((char *)v254 - v12);
  __chkstk_darwin(v11);
  v284 = (char *)v254 - v13;
  uint64_t v14 = sub_100006CC8(&qword_1001C15B0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v274 = (char *)v254 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v273 = (uint64_t)v254 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v271 = (char *)v254 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v275 = (uint64_t)v254 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v270 = (char *)v254 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v276 = (uint64_t)v254 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v282 = (char *)v254 - v28;
  __chkstk_darwin(v27);
  unint64_t v30 = (char *)v254 - v29;
  unint64_t v31 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)v254 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)v254 - v37;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)v254 - v39;
  id v41 = [v1 credentialIdentifier];
  if (!v41)
  {
    (*(void (**)(char *, void, uint64_t))(v287 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v2);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
LABEL_15:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return v31;
  }
  id v285 = v41;
  unint64_t v286 = v2;
  id v42 = [v1 partition];
  if (!v42)
  {

    (*(void (**)(char *, void, unint64_t))(v287 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v286);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    goto LABEL_15;
  }
  id v268 = v42;
  unint64_t v269 = v31;
  id v267 = v1;
  id v43 = [v1 createdAt];
  if (!v43)
  {
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v32 + 56))(v30, 1, 1, v269);
    goto LABEL_14;
  }
  int v44 = v43;
  v264 = v35;
  v266 = v40;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = *(void (**)(char *, char *, unint64_t))(v32 + 32);
  unint64_t v31 = v269;
  v45(v30, v38, v269);
  unint64_t v46 = v32 + 56;
  v263 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v32 + 56);
  v263((uint64_t)v30, 0, 1, v31);
  uint64_t v265 = v32;
  Class v48 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v32 + 48);
  uint64_t v47 = v32 + 48;
  v262 = v48;
  if (v48((uint64_t)v30, 1, v31) == 1)
  {
LABEL_14:

    sub_1000FC1B0((uint64_t)v30);
    (*(void (**)(char *, void, unint64_t))(v287 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v286);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    goto LABEL_15;
  }
  v45(v266, v30, v31);
  id v49 = [v267 updatedAt];
  unint64_t v50 = v31;
  if (!v49)
  {
    uint64_t v51 = (uint64_t)v282;
    v263((uint64_t)v282, 1, 1, v31);
    goto LABEL_18;
  }
  unint64_t v31 = (unint64_t)v49;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v51 = (uint64_t)v282;
  v45(v282, v38, v50);
  v263(v51, 0, 1, v50);
  if (v262(v51, 1, v50) == 1)
  {
LABEL_18:

    sub_1000FC1B0(v51);
    (*(void (**)(char *, void, unint64_t))(v287 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v286);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(char *, unint64_t))(v265 + 8))(v266, v269);
    return v31;
  }
  uint64_t v256 = v47;
  v45(v264, (char *)v51, v269);
  id v52 = v267;
  uint64_t v53 = (uint64_t)[v267 state];
  if (v53 < 0) {
    goto LABEL_183;
  }
  uint64_t v54 = v53;
  id v55 = [v52 options];
  uint64_t v56 = v265;
  uint64_t v57 = v4;
  unint64_t v58 = v286;
  unint64_t v59 = v287;
  if (!v55)
  {

    (*(void (**)(char *, void, unint64_t))(v59 + 104))(v57, enum case for DIPError.Code.invalidStoredData(_:), v58);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v69 = *(void (**)(char *, unint64_t))(v56 + 8);
    unint64_t v70 = v264;
LABEL_20:
    unint64_t v71 = v269;
    v69(v70, v269);
    v69(v266, v71);
    return v31;
  }
  uint64_t v60 = v55;
  unint64_t v61 = sub_10004ADB4((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v62 = (unint64_t)v279;
  unint64_t v63 = (unint64_t)sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.keySigning(_:));
  id v64 = v264;
  unint64_t v257 = v62;
  if (v62)
  {
    swift_bridgeObjectRelease();

    id v65 = *(void (**)(char *, unint64_t))(v265 + 8);
    id v66 = v64;
    unint64_t v67 = v269;
    v65(v66, v269);
    v65(v266, v67);
    return v31;
  }
  uint64_t isUniquelyReferenced_nonNull_native = v63;
  unint64_t v287 = v61;
  if (v63 >> 62) {
    goto LABEL_173;
  }
  uint64_t v73 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_23:
  v254[0] = v54;
  id v255 = v60;
  v254[1] = v46;
  if (v73)
  {
    uint64_t v74 = v73;
    uint64_t v75 = (char *)(isUniquelyReferenced_nonNull_native & 0xC000000000000001);
    v259 = (void (**)(char *, uint64_t))(v278 + 8);
    uint64_t v76 = 4;
    uint64_t v260 = v73;
    unint64_t v258 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
    while (1)
    {
      if (v75) {
        id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v77 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v76);
      }
      unint64_t v78 = v77;
      uint64_t v79 = v76 - 3;
      if (__OFADD__(v76 - 4, 1))
      {
        __break(1u);
LABEL_137:
        uint64_t v216 = 1;
        uint64_t v215 = (uint64_t)v270;
        goto LABEL_138;
      }
      id v80 = [v77 identifier];
      if (!v80) {
        goto LABEL_38;
      }
      uint64_t v81 = v80;
      unint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = v82;

      id v83 = [v78 publicKeyIdentifier];
      if (!v83) {
        break;
      }
      uint64_t v84 = v83;
      unint64_t v286 = (unint64_t)v78;
      uint64_t v261 = v76 - 3;
      uint64_t v85 = isUniquelyReferenced_nonNull_native;
      uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v87;

      v282 = (char *)v86;
      id v279 = (id)v46;
      sub_10000354C(v86, v46);
      uint64_t v88 = (void *)v287;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v288 = v88;
      uint64_t v89 = v31;
      uint64_t v54 = (uint64_t)v60;
      unint64_t v31 = sub_10013C484(v31, (uint64_t)v60);
      uint64_t v91 = v88[2];
      BOOL v92 = (v90 & 1) == 0;
      uint64_t v93 = v91 + v92;
      if (__OFADD__(v91, v92))
      {
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        swift_bridgeObjectRetain();
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      char v94 = v90;
      if (v88[3] >= v93)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10009B418();
        }
      }
      else
      {
        sub_100099920(v93, isUniquelyReferenced_nonNull_native);
        unint64_t v95 = sub_10013C484(v89, (uint64_t)v60);
        if ((v94 & 1) != (v96 & 1)) {
          goto LABEL_182;
        }
        unint64_t v31 = v95;
      }
      uint64_t isUniquelyReferenced_nonNull_native = v85;
      uint64_t v100 = v288;
      unint64_t v101 = (char *)v258;
      uint64_t v60 = (void *)v286;
      unint64_t v287 = (unint64_t)v288;
      if (v94)
      {
        uint64_t v102 = v288[7] + 16 * v31;
        sub_1000035EC(*(void *)v102, *(void *)(v102 + 8));
        unint64_t v46 = (unint64_t)v282;
        unint64_t v103 = (unint64_t)v279;
        *(void *)uint64_t v102 = v282;
        *(void *)(v102 + 8) = v103;
        unint64_t v104 = v103;
      }
      else
      {
        v288[(v31 >> 6) + 8] |= 1 << v31;
        id v105 = (uint64_t *)(v100[6] + 16 * v31);
        *id v105 = v89;
        v105[1] = v54;
        unint64_t v106 = (void *)(v100[7] + 16 * v31);
        unint64_t v46 = (unint64_t)v282;
        unint64_t v104 = (unint64_t)v279;
        void *v106 = v282;
        v106[1] = v104;
        uint64_t v107 = v100[2];
        BOOL v108 = __OFADD__(v107, 1);
        uint64_t v109 = v107 + 1;
        if (v108) {
          goto LABEL_168;
        }
        v100[2] = v109;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000035EC(v46, v104);

      uint64_t v74 = v260;
      uint64_t v79 = v261;
      uint64_t v75 = v101;
LABEL_26:
      ++v76;
      if (v79 == v74) {
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease();
LABEL_38:
    defaultLogger()();
    uint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      unint64_t v99 = (uint8_t *)swift_slowAlloc();
      unint64_t v31 = v76 - 3;
      *(_WORD *)unint64_t v99 = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Credential key signing key does not have required field; skipping",
        v99,
        2u);
      uint64_t v74 = v260;
      swift_slowDealloc();
    }

    (*v259)(v284, v283);
    goto LABEL_26;
  }
LABEL_47:
  swift_bridgeObjectRelease();
  unint64_t v110 = sub_10004ADB4((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v111 = v257;
  unint64_t v112 = (unint64_t)sub_1000F5AC0();
  unint64_t v113 = v111;
  if (v111)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unint64_t v114 = *(void (**)(char *, unint64_t))(v265 + 8);
    unint64_t v31 = v269;
    v114(v264, v269);
    v114(v266, v31);
    return v31;
  }
  uint64_t isUniquelyReferenced_nonNull_native = v112;
  v284 = (char *)v110;
  uint64_t v115 = (uint64_t)v264;
  uint64_t v116 = v265;
  if (v112 >> 62)
  {
LABEL_175:
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = *(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v257 = v113;
  if (v54)
  {
    unint64_t v286 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
    v259 = (void (**)(char *, uint64_t))(v278 + 8);
    unint64_t v46 = 4;
    uint64_t v260 = v54;
    while (1)
    {
      uint64_t v60 = (void *)(v46 - 4);
      if (v286) {
        id v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v117 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v46);
      }
      unint64_t v118 = v117;
      unint64_t v119 = v46 - 3;
      if (__OFADD__(v60, 1)) {
        goto LABEL_167;
      }
      id v120 = [v117 identifier];
      if (!v120) {
        goto LABEL_66;
      }
      uint64_t v121 = v120;
      unint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v123 = v122;

      id v124 = [v118 publicKeyIdentifier];
      if (!v124) {
        break;
      }
      uint64_t v125 = v124;
      uint64_t v261 = v46 - 3;
      id v279 = v118;
      uint64_t v126 = v31;
      uint64_t v127 = v123;
      uint64_t v128 = isUniquelyReferenced_nonNull_native;
      uint64_t v129 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v131 = v130;

      uint64_t v60 = (void *)v129;
      v282 = (char *)v131;
      sub_10000354C(v129, v131);
      unint64_t v132 = v284;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v288 = v132;
      uint64_t v54 = v126;
      uint64_t v133 = v127;
      unint64_t v31 = sub_10013C484(v126, v127);
      uint64_t v135 = *((void *)v132 + 2);
      BOOL v136 = (v134 & 1) == 0;
      uint64_t v137 = v135 + v136;
      if (__OFADD__(v135, v136)) {
        goto LABEL_169;
      }
      char v138 = v134;
      if (*((void *)v132 + 3) >= v137)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10009B418();
        }
      }
      else
      {
        sub_100099920(v137, isUniquelyReferenced_nonNull_native);
        unint64_t v139 = sub_10013C484(v54, v133);
        if ((v138 & 1) != (v140 & 1)) {
          goto LABEL_182;
        }
        unint64_t v31 = v139;
      }
      uint64_t isUniquelyReferenced_nonNull_native = v128;
      uint64_t v144 = v288;
      v284 = (char *)v288;
      if (v138)
      {
        uint64_t v145 = v288[7] + 16 * v31;
        sub_1000035EC(*(void *)v145, *(void *)(v145 + 8));
        uint64_t v146 = v282;
        *(void *)uint64_t v145 = v60;
        *(void *)(v145 + 8) = v146;
        unint64_t v147 = (unint64_t)v146;
      }
      else
      {
        v288[(v31 >> 6) + 8] |= 1 << v31;
        uint64_t v148 = (uint64_t *)(v144[6] + 16 * v31);
        uint64_t *v148 = v54;
        v148[1] = v133;
        v149 = (void *)(v144[7] + 16 * v31);
        unint64_t v147 = (unint64_t)v282;
        void *v149 = v60;
        v149[1] = v147;
        uint64_t v150 = v144[2];
        BOOL v108 = __OFADD__(v150, 1);
        uint64_t v151 = v150 + 1;
        if (v108) {
          goto LABEL_171;
        }
        v144[2] = v151;
        swift_bridgeObjectRetain();
      }
      uint64_t v116 = v265;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000035EC((uint64_t)v60, v147);

      uint64_t v54 = v260;
      unint64_t v119 = v261;
LABEL_54:
      ++v46;
      uint64_t v115 = (uint64_t)v264;
      if (v119 == v54) {
        goto LABEL_75;
      }
    }
    swift_bridgeObjectRelease();
LABEL_66:
    defaultLogger()();
    unint64_t v141 = Logger.logObject.getter();
    os_log_type_t v142 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v141, v142))
    {
      uint64_t v143 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v143 = 0;
      _os_log_impl((void *)&_mh_execute_header, v141, v142, "Credential device encryption key does not have required field; skipping",
        v143,
        2u);
      uint64_t v54 = v260;
      swift_slowDealloc();
    }

    (*v259)((char *)v281, v283);
    goto LABEL_54;
  }
LABEL_75:
  swift_bridgeObjectRelease();
  unint64_t v152 = sub_10004ADB4((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v153 = v257;
  unint64_t v154 = (unint64_t)sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
  if (v153) {
    goto LABEL_103;
  }
  uint64_t isUniquelyReferenced_nonNull_native = v154;
  v282 = (char *)v152;
  if (v154 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v257 = 0;
  if (v54)
  {
    unint64_t v286 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
    v259 = (void (**)(char *, uint64_t))(v278 + 8);
    unint64_t v46 = 4;
    uint64_t v260 = v54;
    while (1)
    {
      uint64_t v60 = (void *)(v46 - 4);
      if (v286) {
        id v155 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v155 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v46);
      }
      uint64_t v156 = v155;
      unint64_t v157 = v46 - 3;
      if (__OFADD__(v60, 1)) {
        goto LABEL_170;
      }
      id v158 = [v155 identifier];
      if (!v158) {
        goto LABEL_93;
      }
      uint64_t v159 = v158;
      unint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v161 = v160;

      id v162 = [v156 publicKeyIdentifier];
      if (!v162) {
        break;
      }
      uint64_t v163 = v162;
      uint64_t v261 = v46 - 3;
      id v279 = v156;
      uint64_t v164 = v31;
      uint64_t v165 = v161;
      uint64_t v115 = isUniquelyReferenced_nonNull_native;
      uint64_t v166 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v168 = v167;

      uint64_t v60 = (void *)v166;
      v281 = (void (**)(char *, uint64_t))v168;
      sub_10000354C(v166, v168);
      uint64_t v169 = v282;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v288 = v169;
      uint64_t v54 = v164;
      uint64_t v170 = v165;
      unint64_t v31 = sub_10013C484(v164, v165);
      uint64_t v172 = *((void *)v169 + 2);
      BOOL v173 = (v171 & 1) == 0;
      uint64_t v174 = v172 + v173;
      if (__OFADD__(v172, v173)) {
        goto LABEL_172;
      }
      uint64_t v116 = v171;
      if (*((void *)v169 + 3) >= v174)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10009B418();
        }
      }
      else
      {
        sub_100099920(v174, isUniquelyReferenced_nonNull_native);
        unint64_t v175 = sub_10013C484(v54, v170);
        if ((v116 & 1) != (v176 & 1)) {
          goto LABEL_182;
        }
        unint64_t v31 = v175;
      }
      uint64_t isUniquelyReferenced_nonNull_native = v115;
      uint64_t v180 = v288;
      v282 = (char *)v288;
      if (v116)
      {
        uint64_t v181 = v288[7] + 16 * v31;
        sub_1000035EC(*(void *)v181, *(void *)(v181 + 8));
        v182 = v281;
        *(void *)uint64_t v181 = v60;
        *(void *)(v181 + 8) = v182;
        unint64_t v113 = (unint64_t)v182;
      }
      else
      {
        v288[(v31 >> 6) + 8] |= 1 << v31;
        v183 = (uint64_t *)(v180[6] + 16 * v31);
        uint64_t *v183 = v54;
        v183[1] = v170;
        uint64_t v184 = (void *)(v180[7] + 16 * v31);
        unint64_t v113 = (unint64_t)v281;
        *uint64_t v184 = v60;
        v184[1] = v113;
        uint64_t v185 = v180[2];
        BOOL v108 = __OFADD__(v185, 1);
        uint64_t v186 = v185 + 1;
        if (v108)
        {
          __break(1u);
          goto LABEL_175;
        }
        v180[2] = v186;
        swift_bridgeObjectRetain();
      }
      uint64_t v116 = v265;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000035EC((uint64_t)v60, v113);

      uint64_t v54 = v260;
      unint64_t v157 = v261;
LABEL_81:
      ++v46;
      uint64_t v115 = (uint64_t)v264;
      if (v157 == v54) {
        goto LABEL_102;
      }
    }
    swift_bridgeObjectRelease();
LABEL_93:
    defaultLogger()();
    unsigned int v177 = Logger.logObject.getter();
    os_log_type_t v178 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v177, v178))
    {
      uint64_t v179 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v179 = 0;
      _os_log_impl((void *)&_mh_execute_header, v177, v178, "Credential presentment key does not have required field; skipping",
        v179,
        2u);
      uint64_t v54 = v260;
      swift_slowDealloc();
    }

    (*v259)(v280, v283);
    goto LABEL_81;
  }
LABEL_102:
  swift_bridgeObjectRelease();
  unint64_t v187 = v257;
  unint64_t v188 = (unint64_t)sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.payloadProtection(_:));
  if (v187)
  {
LABEL_103:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v69 = *(void (**)(char *, unint64_t))(v116 + 8);
    unint64_t v70 = (char *)v115;
    goto LABEL_20;
  }
  uint64_t v79 = v188;
  if (v188 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v189 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v189 = *(void *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v257 = 0;
  if (v189)
  {
    if (v189 < 1)
    {
      __break(1u);
LABEL_180:
      v212 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_131:
      uint64_t v75 = v212;
      swift_bridgeObjectRelease();
      if (v75)
      {
        id v213 = [v75 validFrom];
        if (!v213) {
          goto LABEL_137;
        }
        v214 = v213;
        uint64_t v215 = (uint64_t)v270;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v216 = 0;
LABEL_138:
        uint64_t v219 = 1;
        v263(v215, v216, 1, v269);
        sub_1000FC314(v215, v79);
        id v220 = [v75 validUntil];
        if (v220)
        {
          v221 = v220;
          uint64_t v222 = (uint64_t)v271;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v219 = 0;
        }
        else
        {
          uint64_t v222 = (uint64_t)v271;
        }
        v263(v222, v219, 1, v269);
        sub_1000FC314(v222, v275);
        v281 = (void (**)(char *, uint64_t))v75;
        id v223 = [v75 ingestionHash];
        if (v223)
        {
          v224 = v223;
          uint64_t v225 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          id v279 = v226;
          v280 = (char *)v225;

          LODWORD(v286) = 0;
        }
        else
        {
          LODWORD(v286) = 0;
          id v279 = (id)0xF000000000000000;
          v280 = 0;
        }
        unint64_t v217 = v269;
        uint64_t v79 = v276;
        goto LABEL_145;
      }
LABEL_135:
      LODWORD(v286) = 1;
      unint64_t v217 = v269;
      v218 = v263;
      v263(v79, 1, 1, v269);
      v218(v275, 1, 1, v217);
      v280 = 0;
      v281 = 0;
      id v279 = (id)0xF000000000000000;
LABEL_145:
      unint64_t v31 = (unint64_t)[objc_allocWithZone((Class)DCCredentialProperties) init];
      id v227 = v285;
      [(id)v31 setCredentialIdentifier:v285];

      id v228 = v268;
      [(id)v31 setPartition:v268];

      [(id)v31 setCredentialState:v254[0]];
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [(id)v31 setCreatedAt:isa];

      Class v230 = Date._bridgeToObjectiveC()().super.isa;
      [(id)v31 setUpdatedAt:v230];

      Class v231 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(id)v31 setKeySigningKeys:v231];

      Class v232 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(id)v31 setDeviceEncryptionKeys:v232];

      Class v233 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(id)v31 setPresentmentKeys:v233];

      Class v234 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(id)v31 setPayloadProtectionKeys:v234];

      uint64_t v235 = v273;
      sub_1000FC2AC(v79, v273);
      if (v262(v235, 1, v217) == 1)
      {
        Class v236 = 0;
        uint64_t v237 = v265;
      }
      else
      {
        Class v236 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v237 = v265;
        (*(void (**)(uint64_t, unint64_t))(v265 + 8))(v235, v217);
      }
      uint64_t v238 = (uint64_t)v274;
      uint64_t v239 = v275;
      [v31 setPayloadValidFrom:v236, v254[0]];

      sub_1000FC2AC(v239, v238);
      unsigned int v240 = v262(v238, 1, v217);
      unint64_t v241 = (unint64_t)v279;
      if (v240 == 1)
      {
        Class v242 = 0;
      }
      else
      {
        Class v242 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, unint64_t))(v237 + 8))(v238, v217);
      }
      uint64_t v244 = (uint64_t)v280;
      v243 = v281;
      char v245 = v283;
      [(id)v31 setPayloadValidUntil:v242];

      if (v241 >> 60 == 15)
      {
        Class v246 = 0;
      }
      else
      {
        sub_10000354C(v244, v241);
        Class v246 = Data._bridgeToObjectiveC()().super.isa;
        sub_100009764(v244, v241);
      }
      [(id)v31 setPayloadIngestionHash:v246];

      v247 = (void *)sub_1000FBA68();
      [(id)v31 setOptions:v247];

      [(id)v31 setNeedsPresentmentKeyRefresh:v245 & 1];
      char v248 = v286;
      if (v286)
      {
        [(id)v31 setDocType:0];
        NSString v249 = 0;
      }
      else
      {
        NSString v250 = [v243 docType];
        if (v250)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          NSString v250 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [(id)v31 setDocType:v250];

        NSString v249 = [v243 region];
        if (v249)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          NSString v249 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        char v248 = v286;
      }
      [(id)v31 setRegion:v249];

      if (v248)
      {
        NSString v251 = 0;
      }
      else
      {
        NSString v251 = [v243 issuingJurisdiction];
        if (v251)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          NSString v251 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
      }
      [(id)v31 setIssuingJurisdiction:v251];

      sub_100009764(v244, v241);
      sub_1000FC1B0(v239);
      sub_1000FC1B0(v276);
      v252 = *(void (**)(char *, unint64_t))(v237 + 8);
      unint64_t v253 = v269;
      v252(v264, v269);
      v252(v266, v253);
      return v31;
    }
    uint64_t v190 = 0;
    unint64_t v286 = v79 & 0xC000000000000001;
    v191 = (char *)&_swiftEmptyArrayStorage;
    v281 = (void (**)(char *, uint64_t))(v278 + 8);
    do
    {
      if (v286) {
        id v192 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v192 = *(id *)(v79 + 8 * v190 + 32);
      }
      uint64_t v193 = v192;
      id v194 = [v192 identifier:v254[0]];
      if (v194)
      {
        v195 = v194;
        uint64_t v196 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v198 = v197;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v191 = sub_1000D0D48(0, *((void *)v191 + 2) + 1, 1, v191);
        }
        unint64_t v200 = *((void *)v191 + 2);
        unint64_t v199 = *((void *)v191 + 3);
        if (v200 >= v199 >> 1) {
          v191 = sub_1000D0D48((char *)(v199 > 1), v200 + 1, 1, v191);
        }
        *((void *)v191 + 2) = v200 + 1;
        v201 = &v191[16 * v200];
        *((void *)v201 + 4) = v196;
        *((void *)v201 + 5) = v198;
      }
      else
      {
        defaultLogger()();
        uint64_t v202 = Logger.logObject.getter();
        os_log_type_t v203 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v202, v203))
        {
          v204 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v204 = 0;
          _os_log_impl((void *)&_mh_execute_header, v202, v203, "Credential payload protection key does not have required field; skipping",
            v204,
            2u);
          swift_slowDealloc();
        }

        (*v281)(v277, v283);
      }
      ++v190;
    }
    while (v189 != v190);
  }
  swift_bridgeObjectRelease();
  unint64_t v205 = v257;
  unsigned int v206 = sub_1000FB490();
  if (v205)
  {
    v207 = v272;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v278 + 8))(v207, v283);
    unsigned int v208 = 0;
  }
  else
  {
    unsigned int v208 = v206;
  }
  unint64_t v257 = 0;
  uint64_t v79 = v276;
  unint64_t v209 = (unint64_t)sub_1000F58F8();
  unint64_t v210 = v209;
  if (v209 >> 62) {
    uint64_t v211 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v211 = *(void *)((v209 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  LODWORD(v283) = v208;
  if (!v211)
  {
    swift_bridgeObjectRelease();
    goto LABEL_135;
  }
  if ((v210 & 0xC000000000000001) != 0) {
    goto LABEL_180;
  }
  if (*(void *)((v210 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v212 = (char *)*(id *)(v210 + 32);
    goto LABEL_131;
  }
  __break(1u);
LABEL_182:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_183:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000FA20C(uint64_t a1)
{
}

uint64_t sub_1000FA228(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v14[1] = a1;
  sub_100006CC8(&qword_1001C3C70);
  sub_1000FC418(&qword_1001C3740);
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.jsonEncodingFailed(_:), v4);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v11 = v8;
    unint64_t v12 = v9;
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v1 setCredentialUUIDs:isa];

    return sub_1000035EC(v11, v12);
  }
}

void sub_1000FA490(uint64_t a1)
{
}

void sub_1000FA4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v28 - v14;
  NSString v16 = String._bridgeToObjectiveC()();
  [v5 setIdentifier:v16 v28 v29];

  CredentialKeyType.rawValue.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setKeyType:v17];

  CredentialKeyUsage.rawValue.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setUsage:v18];

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v5 setKeyBlob:isa];

  Class v20 = Data._bridgeToObjectiveC()().super.isa;
  [v5 setPublicKey:v20];

  Class v21 = Data._bridgeToObjectiveC()().super.isa;
  [v5 setPublicKeyIdentifier:v21];

  id v22 = [v5 createdAt];
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_5;
  }
  uint64_t v23 = v22;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v24(v8, v13, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_5:
    Date.init()();
    sub_1000FC1B0((uint64_t)v8);
    goto LABEL_6;
  }
  v24(v15, v8, v9);
LABEL_6:
  Class v25 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v15, v9);
  [v5 setCreatedAt:v25];

  Date.init()();
  Class v27 = Date._bridgeToObjectiveC()().super.isa;
  v26(v13, v9);
  [v5 setUpdatedAt:v27];
}

id sub_1000FA874()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [v0 credentialUUIDs];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100006CC8(&qword_1001C3C70);
    sub_1000FC418(&qword_1001C3730);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_1000035EC(v8, v10);
    swift_release();
    if (v1)
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.jsonDecodingFailed(_:), v2);
      swift_errorRetain();
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return (id)swift_errorRelease();
    }
    else
    {
      return (id)v11[1];
    }
  }
  return result;
}

id sub_1000FAAE0()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [v0 elementIdentifiersByNamespace];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    switch(v10 >> 62)
    {
      case 1uLL:
        LODWORD(v11) = HIDWORD(v8) - v8;
        if (__OFSUB__(HIDWORD(v8), v8))
        {
          __break(1u);
LABEL_14:
          __break(1u);
          JUMPOUT(0x1000FADB0);
        }
        uint64_t v11 = (int)v11;
LABEL_7:
        if (v11 <= 0)
        {
LABEL_10:
          sub_1000035EC(v8, v10);
          id result = 0;
        }
        else
        {
          type metadata accessor for JSONDecoder();
          swift_allocObject();
          JSONDecoder.init()();
          sub_100006CC8(&qword_1001C3070);
          sub_1000FC210();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          if (v1)
          {
            swift_release();
            (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.jsonEncodingFailed(_:), v2);
            swift_errorRetain();
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_10000507C();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            swift_errorRelease();
            id result = (id)sub_1000035EC(v8, v10);
          }
          else
          {
            sub_1000035EC(v8, v10);
            swift_release();
            id result = (id)v15[1];
          }
        }
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(v8 + 16);
        uint64_t v12 = *(void *)(v8 + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        uint64_t v11 = v12 - v13;
        if (!v14) {
          goto LABEL_7;
        }
        goto LABEL_14;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v11 = BYTE6(v10);
        goto LABEL_7;
    }
  }
  return result;
}

void sub_1000FADC0(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v45 = *(void *)(v5 - 8);
  unint64_t v46 = v5;
  __chkstk_darwin(v5);
  uint64_t v51 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v7 - 8);
  int v44 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v43 = (char *)&v41 - v14;
  NSString v15 = String._bridgeToObjectiveC()();
  [v3 setIdentifier:v15];

  CredentialKeyType.rawValue.getter();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setKeyType:v16];

  CredentialKeyUsage.rawValue.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setUsage:v17];

  NSString v18 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  uint64_t v47 = sub_1000698C8;
  uint64_t v48 = a1;
  uint64_t v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  sub_1000698E4(v20);
  if (!v2)
  {
    os_unfair_lock_unlock(v19);
    unint64_t v22 = v50;
    if (v50 >> 60 == 15)
    {
LABEL_5:
      unint64_t v26 = v46;
      uint64_t v45 = *(void *)(v45 + 104);
      uint64_t v27 = v51;
      ((void (*)(uint64_t, void, unint64_t))v45)(v51, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v46);
      int v44 = (char *)sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      ((void (*)(uint64_t, void, unint64_t))v45)(v27, enum case for DIPError.Code.internalError(_:), v26);
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      return;
    }
    uint64_t v41 = v9;
    uint64_t v42 = v10;
    uint64_t v23 = v49;
    __chkstk_darwin(v21);
    os_unfair_lock_lock(v19);
    sub_100069A20(v24);
    os_unfair_lock_unlock(v19);
    unint64_t v25 = v50;
    if (v50 >> 60 == 15)
    {
      sub_100009764(v23, v22);
      goto LABEL_5;
    }
    uint64_t v28 = v49;
    uint64_t v51 = v23;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v3 setPublicKey:isa];

    uint64_t v45 = v28;
    unint64_t v46 = v25;
    Class v30 = Data._bridgeToObjectiveC()().super.isa;
    [v3 setPublicKeyIdentifier:v30];

    id v31 = [v3 createdAt];
    if (v31)
    {
      uint64_t v32 = v31;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = v41;
      uint64_t v34 = v42;
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      uint64_t v36 = (uint64_t)v44;
      v35(v44, v13, v41);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v33);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v33) != 1)
      {
        uint64_t v37 = v43;
        v35(v43, (char *)v36, v33);
LABEL_11:
        Class v38 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v39 = *(void (**)(char *, uint64_t))(v42 + 8);
        v39(v37, v33);
        [v3 setCreatedAt:v38];

        Date.init()();
        Class v40 = Date._bridgeToObjectiveC()().super.isa;
        v39(v13, v33);
        [v3 setUpdatedAt:v40];

        sub_100009764(v45, v46);
        sub_100009764(v51, v22);
        return;
      }
    }
    else
    {
      uint64_t v33 = v41;
      uint64_t v36 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v44, 1, 1, v41);
    }
    uint64_t v37 = v43;
    Date.init()();
    sub_1000FC1B0(v36);
    goto LABEL_11;
  }
  os_unfair_lock_unlock(v19);
  __break(1u);
}

id sub_1000FB490()
{
  unint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v48 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v48 - v10;
  id v12 = [self standardUserDefaults];
  v13._object = (void *)0x8000000100181550;
  v13._uint64_t countAndFlagsBits = 0xD000000000000029;
  Swift::Bool v14 = NSUserDefaults.internalBool(forKey:)(v13);

  if (v14)
  {
    uint64_t v15 = v4;
    defaultLogger()();
    NSString v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      NSString v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Forcing needsPresentmentKeyRefresh to true due to internal defaults setting", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v3);
    char v19 = 1;
    return (id)(v19 & 1);
  }
  unint64_t v20 = v2;
  unint64_t v21 = (unint64_t)sub_1000F6AA4((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
  if (v1) {
    return (id)(v19 & 1);
  }
  uint64_t v23 = v21;
  unint64_t v52 = (unint64_t)&_swiftEmptyArrayStorage;
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v49 = v4;
    uint64_t v50 = v3;
    if (v24)
    {
LABEL_9:
      uint64_t v48 = 0;
      if (v24 < 1)
      {
        __break(1u);
        goto LABEL_52;
      }
      for (uint64_t i = 0; i != v24; ++i)
      {
        if ((v23 & 0xC000000000000001) != 0) {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v26 = *(id *)(v23 + 8 * i + 32);
        }
        uint64_t v27 = v26;
        id v28 = [v26 payload:v48];

        if (v28)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v20 = v52;
      uint64_t v4 = v49;
      uint64_t v3 = v50;
      if ((v52 & 0x8000000000000000) != 0) {
        goto LABEL_47;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v49 = v4;
    uint64_t v50 = v3;
    if (v24) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v20 = (unint64_t)&_swiftEmptyArrayStorage;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_47;
  }
LABEL_22:
  if ((v20 & 0x4000000000000000) != 0)
  {
LABEL_47:
    swift_retain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v23 = (uint64_t)result;
    if (!result) {
      goto LABEL_48;
    }
    goto LABEL_24;
  }
  uint64_t v23 = *(void *)(v20 + 16);
  id result = (id)swift_retain();
  if (!v23)
  {
LABEL_48:
    uint64_t v44 = v4;
    swift_release_n();
    defaultLogger()();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Credential does not have any keys, skipping key refresh", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v3);
    char v19 = 0;
    return (id)(v19 & 1);
  }
LABEL_24:
  uint64_t v24 = v20 & 0xC000000000000001;
  if ((v20 & 0xC000000000000001) != 0)
  {
LABEL_52:
    id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_27;
  }
  if (!*(void *)(v20 + 16))
  {
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  id result = *(id *)(v20 + 32);
LABEL_27:
  uint64_t v29 = result;
  unint64_t v30 = v23 - 1;
  if (v23 == 1)
  {
LABEL_28:
    swift_release_n();
    uint64_t v31 = (uint64_t)[v29 timesUsed];
    if (v31 < 1)
    {

      char v19 = 0;
    }
    else
    {
      unint64_t v32 = v31;
      uint64_t v33 = v51;
      defaultLogger()();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 134217984;
        unint64_t v52 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Minimum number of times a presentment key is used is %lld, needs key refresh", v36, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
      char v19 = 1;
    }
    return (id)(v19 & 1);
  }
  if (v23 < 2) {
    goto LABEL_54;
  }
  if (v24 || (unint64_t v37 = *(void *)(v20 + 16), v37 >= 2) && v30 < v37)
  {
    uint64_t v38 = 0;
    do
    {
      if (v24) {
        id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v39 = *(id *)(v20 + 8 * v38 + 40);
      }
      id v40 = v39;
      id v41 = [v39 timesUsed:v48];
      id v42 = [v29 timesUsed];
      if ((uint64_t)v41 >= (uint64_t)v42) {
        id v43 = v40;
      }
      else {
        id v43 = v29;
      }
      if ((uint64_t)v41 < (uint64_t)v42) {
        uint64_t v29 = v40;
      }

      ++v38;
    }
    while (v30 != v38);
    goto LABEL_28;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1000FBA68()
{
  id v1 = [objc_allocWithZone((Class)DCCredentialOptions) init];
  [v1 setDeleteInactiveKeysAfterDays:[v0 deleteInactiveKeysAfterDays]];
  [v1 setDeleteIncompleteCredentialAfterDays:[v0 deleteIncompleteCredentialAfterDays]];
  unint64_t v2 = (unint64_t)[v0 readerAuthenticationPolicy];
  if ((v2 & 0x8000000000000000) != 0
    || ([v1 setReaderAuthenticationPolicy:v2],
        unint64_t v3 = (unint64_t)[v0 presentmentAuthPolicy],
        (v3 & 0x8000000000000000) != 0)
    || ([v1 setPresentmentAuthPolicy:v3],
        unint64_t v4 = (unint64_t)[v0 payloadProtectionPolicy],
        (v4 & 0x8000000000000000) != 0))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    [v1 setPayloadProtectionPolicy:v4];
    return (uint64_t)v1;
  }
  return result;
}

void sub_1000FBBB4(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::String v13 = (char *)&v27 - v12;
  NSString v14 = String._bridgeToObjectiveC()();
  [v2 setIdentifier:v14];

  CredentialKeyType.rawValue.getter();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setKeyType:v15];

  CredentialKeyUsage.rawValue.getter();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setUsage:v16];

  uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey);
  unint64_t v18 = *(void *)(a1 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey + 8);
  switch(v18 >> 62)
  {
    case 1uLL:
      if ((int)v17 != v17 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_7;
    case 2uLL:
      if (*(void *)(v17 + 16) == *(void *)(v17 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((v18 & 0xFF000000000000) != 0)
      {
LABEL_3:
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        [v2 setPublicKey:isa];
      }
      else
      {
LABEL_7:
        [v2 setPublicKey:0];
      }
      Class v20 = Data._bridgeToObjectiveC()().super.isa;
      [v2 setPublicKeyIdentifier:v20];

      id v21 = [v2 createdAt];
      if (v21)
      {
        unint64_t v22 = v21;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23(v6, v11, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
        {
          v23(v13, v6, v7);
          goto LABEL_13;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
      }
      Date.init()();
      sub_1000FC1B0((uint64_t)v6);
LABEL_13:
      Class v24 = Date._bridgeToObjectiveC()().super.isa;
      unint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
      v25(v13, v7);
      [v2 setCreatedAt:v24];

      Date.init()();
      Class v26 = Date._bridgeToObjectiveC()().super.isa;
      v25(v11, v7);
      [v2 setUpdatedAt:v26];

      return;
  }
}

Swift::Int sub_1000FBFC0()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1000FC008()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1000FC038()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

unsigned __int16 *sub_1000FC07C@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 4) {
    char v3 = 3;
  }
  else {
    char v3 = 0x2010003u >> (8 * v2);
  }
  *a2 = v3;
  return result;
}

void sub_1000FC0A4(_WORD *a1@<X8>)
{
  *a1 = *v1 + 1;
}

BOOL sub_1000FC0B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000FC0CC()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000FC114()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000FC140()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_WORD *sub_1000FC184@<X0>(_WORD *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1000FC1A4(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000FC1B0(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C15B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000FC210()
{
  unint64_t result = qword_1001C3728;
  if (!qword_1001C3728)
  {
    sub_100016F64(&qword_1001C3070);
    sub_1000FC418(&qword_1001C3730);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C3728);
  }
  return result;
}

uint64_t sub_1000FC2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C15B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FC314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C15B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000FC37C()
{
  unint64_t result = qword_1001C3738;
  if (!qword_1001C3738)
  {
    sub_100016F64(&qword_1001C3070);
    sub_1000FC418(&qword_1001C3740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C3738);
  }
  return result;
}

uint64_t sub_1000FC418(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100016F64(&qword_1001C3C70);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7VersionOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7VersionOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FC5D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s7VersionOMa()
{
  return &_s7VersionON;
}

unint64_t sub_1000FC614()
{
  unint64_t result = qword_1001C3748;
  if (!qword_1001C3748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C3748);
  }
  return result;
}

uint64_t _s17DesignationStatusOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s17DesignationStatusOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FC7C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000FC7EC(unsigned char *result, char a2)
{
  char *result = a2 & 1;
  return result;
}

ValueMetadata *_s17DesignationStatusOMa()
{
  return &_s17DesignationStatusON;
}

uint64_t destroy for PayloadContents(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1000035EC(*(void *)(a1 + 24), *(void *)(a1 + 32));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PayloadContents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_10000354C(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PayloadContents(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  unint64_t v5 = a2[4];
  sub_10000354C(v4, v5);
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  a1[3] = v4;
  a1[4] = v5;
  sub_1000035EC(v6, v7);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PayloadContents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for PayloadContents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1000035EC(v4, v5);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PayloadContents(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PayloadContents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PayloadContents()
{
  return &type metadata for PayloadContents;
}

unint64_t sub_1000FCAD0()
{
  unint64_t result = qword_1001C3750;
  if (!qword_1001C3750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001C3750);
  }
  return result;
}

uint64_t sub_1000FCB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = v13;
  v8[12] = v14;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a3;
  v8[6] = a4;
  v8[3] = a1;
  v8[4] = a2;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v8[16] = v10;
  v8[17] = *(void *)(v10 - 8);
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000FCC68, 0, 0);
}

uint64_t sub_1000FCC68()
{
  uint64_t v33 = v0;
  uint64_t v1 = dispatch thunk of SESKeystore.getACLConstraints(of:)();
  v0[20] = v1;
  v0[21] = v2;
  uint64_t v3 = v1;
  unint64_t v4 = v2;
  type metadata accessor for SecAccessControl(0);
  uint64_t v5 = static SecAccessControlRef.fromConstraintsData(_:)();
  v0[22] = v5;
  uint64_t v6 = (void *)v5;
  uint64_t v7 = SecAccessControlRef.osgnParentKey.getter();
  v0[23] = v7;
  v0[24] = v8;
  if (v8 >> 60 == 15)
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Not a child key; signing digest directly", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[17];
    uint64_t v13 = v0[16];
    uint64_t v30 = v0[18];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v30, v13);
    uint64_t v14 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)();
    uint64_t v16 = v15;

    sub_1000035EC(v3, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v17(v14, v16);
  }
  else
  {
    uint64_t v19 = v7;
    unint64_t v20 = v8;
    defaultLogger()();
    sub_10000354C(v19, v20);
    sub_10000354C(v19, v20);
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = v0[19];
    uint64_t v25 = v0[16];
    uint64_t v26 = v0[17];
    if (v23)
    {
      uint64_t v31 = v0[19];
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      Swift::String v28 = Data.base16EncodedString()();
      v0[2] = sub_10004C3A4(v28._countAndFlagsBits, (unint64_t)v28._object, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100009764(v19, v20);
      sub_100009764(v19, v20);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Child key of %s, using key chaining", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v25);
    }
    else
    {
      sub_100009764(v19, v20);
      sub_100009764(v19, v20);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    uint64_t v29 = (void *)swift_task_alloc();
    v0[25] = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_1000FD200;
    return sub_1000CCDA0(0);
  }
}

uint64_t sub_1000FD200(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_1000FDC70;
  }
  else {
    unint64_t v4 = sub_1000FD314;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FD314()
{
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[23];
  unint64_t v2 = v0[24];
  if (v1)
  {
    unint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    unint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
    sub_10000354C(v5, v6);
    char v7 = sub_100147900(v3, v2, v5, v6);
    sub_1000035EC(v5, v6);
    if (v7)
    {
      unint64_t v8 = (void *)swift_task_alloc();
      v0[28] = v8;
      *unint64_t v8 = v0;
      v8[1] = sub_1000FD8B0;
      uint64_t v9 = v0[22];
      uint64_t v10 = v0[7];
      uint64_t v11 = v0[8];
      uint64_t v12 = v0[5];
      uint64_t v13 = v0[6];
      uint64_t v14 = v0[3];
      uint64_t v15 = v0[4];
      return sub_1000FF23C(v1, v9, v14, v15, v12, v13, v10, v11);
    }
    uint64_t v27 = v0[23];
    unint64_t v28 = v0[24];
    unint64_t v34 = v0[21];
    uint64_t v30 = (void *)v0[22];
    uint64_t v32 = v0[20];
    uint64_t v18 = v0[14];
    uint64_t v17 = v0[15];
    uint64_t v19 = v0[13];
    _StringGuts.grow(_:)(76);
    v20._object = (void *)0x8000000100181750;
    v20._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v20);
    Swift::String v21 = Data.base16EncodedString()();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000100181780;
    v22._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v22);
    uint64_t v23 = *v4;
    unint64_t v24 = v4[1];
    sub_10000354C(*v4, v24);
    v25._uint64_t countAndFlagsBits = Data.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    sub_1000035EC(v23, v24);
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.idcsProgenitorKeyACLMismatch(_:), v19);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_100009764(v27, v28);

    sub_1000035EC(v32, v34);
  }
  else
  {
    unint64_t v33 = v0[21];
    uint64_t v29 = (void *)v0[22];
    uint64_t v31 = v0[20];
    (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v0[13]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v3, v2);

    sub_1000035EC(v31, v33);
  }
  (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_1000FD8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 232) = v2;
  swift_task_dealloc();
  if (v2)
  {
    char v7 = sub_1000FDAA8;
  }
  else
  {
    *(void *)(v6 + 240) = a2;
    *(void *)(v6 + 248) = a1;
    char v7 = sub_1000FD9E4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000FD9E4()
{
  uint64_t v1 = v0[23];
  unint64_t v2 = v0[24];
  unint64_t v3 = v0[21];
  unint64_t v4 = (void *)v0[22];
  uint64_t v5 = v0[20];
  swift_release();
  sub_100009764(v1, v2);

  sub_1000035EC(v5, v3);
  uint64_t v6 = v0[30];
  uint64_t v7 = v0[31];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v8(v7, v6);
}

uint64_t sub_1000FDAA8()
{
  uint64_t v1 = v0[23];
  unint64_t v2 = v0[24];
  unint64_t v3 = v0[21];
  unint64_t v4 = (void *)v0[22];
  uint64_t v5 = v0[20];
  swift_release();
  sub_100009764(v1, v2);

  sub_1000035EC(v5, v3);
  (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000FDC70()
{
  unint64_t v1 = v0[21];
  unint64_t v2 = (void *)v0[22];
  uint64_t v3 = v0[20];
  sub_100009764(v0[23], v0[24]);

  sub_1000035EC(v3, v1);
  (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000FDE28(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100006CC8(&qword_1001C0890);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000FDEDC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100006CC8(&qword_1001C0890);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2) {
      uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v10 = v8;
    sub_1000FFC50((uint64_t)&v10, *(void *)(*(void *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000FDFCC(uint64_t a1, uint64_t a2)
{
  v2[22] = a1;
  v2[23] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  return _swift_task_switch(sub_1000FE08C, 0, 0);
}

uint64_t sub_1000FE08C()
{
  unint64_t v2 = (void *)v0[22];
  uint64_t v1 = v0[23];
  sub_10004B42C((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[27] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_1000FE1E8;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000FDEDC;
  v0[13] = &unk_1001B6EC8;
  v0[14] = v4;
  [v2 evaluateAccessControl:v1 operation:3 options:isa reply:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000FE1E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v1;
  if (v1) {
    unint64_t v2 = sub_1000FE7A4;
  }
  else {
    unint64_t v2 = sub_1000FE2F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FE2F8()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);

  swift_bridgeObjectRelease();
  uint64_t v4 = enum case for DIPError.Code.localAuthenticationInvalidContext(_:);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.localAuthenticationInvalidContext(_:), v2);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  id v6 = [v5 domain:0xD000000000000019, 0x8000000100181960, 109];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
LABEL_9:
      uint64_t v23 = v5;
      (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 200) + 104))(*(void *)(v0 + 208), v4, *(void *)(v0 + 192));
      swift_errorRetain();
      goto LABEL_18;
    }
  }
  if ([v5 code] != (id)-1026) {
    goto LABEL_9;
  }
  id v12 = [v5 userInfo];
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v13 + 16) && (unint64_t v16 = sub_10013C484(v14, v15), (v17 & 1) != 0))
  {
    sub_10004DD90(*(void *)(v13 + 56) + 32 * v16, v0 + 120);
  }
  else
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 144))
  {
    if (swift_dynamicCast())
    {

      swift_errorRelease();
      uint64_t v18 = *(void *)(v0 + 152);
      uint64_t v19 = *(void *)(v0 + 160);
      swift_task_dealloc();
      Swift::String v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v20(v18, v19);
    }
  }
  else
  {
    sub_1000FFBF0(v0 + 120);
  }
  uint64_t v23 = v5;
  (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 104))(*(void *)(v0 + 208), enum case for DIPError.Code.localAuthenticationMissingNonce(_:), *(void *)(v0 + 192));
LABEL_18:
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();

  swift_errorRelease();
  swift_task_dealloc();
  Swift::String v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_1000FE7A4()
{
  uint64_t v1 = *(void **)(v0 + 216);
  swift_willThrow();

  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v2 domain];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_12;
    }
  }
  if ([v2 code] != (id)-1026)
  {
LABEL_12:
    Swift::String v21 = v2;
    (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 104))(*(void *)(v0 + 208), enum case for DIPError.Code.localAuthenticationInvalidContext(_:), *(void *)(v0 + 192));
    swift_errorRetain();
LABEL_21:
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_errorRelease();
    swift_task_dealloc();
    Swift::String v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  id v10 = [v2 userInfo];
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v11 + 16) && (unint64_t v14 = sub_10013C484(v12, v13), (v15 & 1) != 0))
  {
    sub_10004DD90(*(void *)(v11 + 56) + 32 * v14, v0 + 120);
  }
  else
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 144))
  {
    sub_1000FFBF0(v0 + 120);
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    Swift::String v21 = v2;
    (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 104))(*(void *)(v0 + 208), enum case for DIPError.Code.localAuthenticationMissingNonce(_:), *(void *)(v0 + 192));
    goto LABEL_21;
  }

  swift_errorRelease();
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 160);
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v18(v16, v17);
}

uint64_t sub_1000FEB90(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v48 = a4;
  uint64_t v49 = a7;
  uint64_t v46 = a3;
  uint64_t v47 = a6;
  uint64_t v45 = a5;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SESKeystore.SignatureOutputFormat();
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v44 = v13;
  __chkstk_darwin(v13);
  id v42 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SHA256();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SHA256Digest();
  uint64_t v40 = *(void *)(v19 - 8);
  uint64_t v41 = v19;
  __chkstk_darwin(v19);
  Swift::String v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FFBA8(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      unint64_t v37 = v12;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      unint64_t v36 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10000354C(a1, a2);
      uint64_t v24 = v51;
      sub_100063458((int)a1, a1 >> 32);
      uint64_t v51 = v24;
      goto LABEL_9;
    case 2uLL:
      unint64_t v37 = v12;
      uint64_t v22 = *(void *)(a1 + 16);
      unint64_t v36 = *(void *)(a1 + 24);
      sub_10000354C(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v23 = v51;
      sub_100063458(v22, v36);
      uint64_t v51 = v23;
      if (v23)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1000FF22CLL);
      }
      swift_release();
      swift_release();
LABEL_9:
      sub_1000035EC(a1, a2);
      uint64_t v12 = v37;
      goto LABEL_10;
    case 3uLL:
      memset(v52, 0, 14);
      goto LABEL_6;
    default:
      v52[0] = a1;
      LOWORD(v52[1]) = a2;
      BYTE2(v52[1]) = BYTE2(a2);
      BYTE3(v52[1]) = BYTE3(a2);
      BYTE4(v52[1]) = BYTE4(a2);
      BYTE5(v52[1]) = BYTE5(a2);
LABEL_6:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_1000035EC(a1, a2);
LABEL_10:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      sub_1000FFBA8(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v25 = v41;
      uint64_t v26 = Digest.data.getter();
      unint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v25);
      uint64_t v30 = v42;
      uint64_t v29 = v43;
      uint64_t v31 = v44;
      (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, enum case for SESKeystore.SignatureOutputFormat.der(_:), v44);
      uint64_t v32 = v51;
      uint64_t v33 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      sub_1000035EC(v26, v28);
      if (v32)
      {
        (*(void (**)(char *, void, uint64_t))(v38 + 104))(v12, enum case for DIPError.Code.internalError(_:), v39);
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
      }
      return v33;
  }
}

uint64_t sub_1000FF23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 200) = v13;
  *(_OWORD *)(v8 + 184) = v12;
  *(void *)(v8 + 168) = a7;
  *(void *)(v8 + 176) = a8;
  *(void *)(v8 + 152) = a5;
  *(void *)(v8 + 160) = a6;
  *(void *)(v8 + 136) = a3;
  *(void *)(v8 + 144) = a4;
  *(void *)(v8 + 120) = a1;
  *(void *)(v8 + 128) = a2;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 208) = v9;
  *(void *)(v8 + 216) = *(void *)(v9 - 8);
  *(void *)(v8 + 224) = swift_task_alloc();
  return _swift_task_switch(sub_1000FF31C, 0, 0);
}

uint64_t sub_1000FF31C()
{
  id v1 = [objc_allocWithZone((Class)LAContext) init];
  v0[29] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[30] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000FF3D0;
  uint64_t v3 = v0[16];
  return sub_1000FDFCC((uint64_t)v1, v3);
}

uint64_t sub_1000FF3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[31] = a1;
  v4[32] = a2;
  v4[33] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000FF68C;
  }
  else {
    uint64_t v5 = sub_1000FF4E8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000FF4E8()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = sub_1000FEB90(v0[31], v0[32], v0[21], v0[22], *(void *)(v0[15] + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob), *(void *)(v0[15] + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8), v0[24], v0[25]);
  v0[34] = v1;
  v0[35] = v2;
  v0[36] = v3;
  if (v1)
  {
    uint64_t v4 = (void *)v0[29];
    sub_1000035EC(v0[31], v0[32]);

    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = (void *)v0[29];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[37] = isa;
    v0[2] = v0;
    v0[7] = v0 + 39;
    v0[3] = sub_1000FF6F8;
    uint64_t v9 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000FDE28;
    v0[13] = &unk_1001B6EB0;
    v0[14] = v9;
    [v7 setCredential:isa type:-11 reply:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_1000FF68C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FF6F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 304) = v1;
  if (v1) {
    uint64_t v2 = sub_1000FFAF8;
  }
  else {
    uint64_t v2 = sub_1000FF808;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FF808()
{
  uint64_t v1 = *(void **)(v0 + 232);

  id v2 = [v1 externalizedContext];
  if (!v2)
  {
    uint64_t v16 = *(void *)(v0 + 280);
    unint64_t v15 = *(void *)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 248);
    unint64_t v17 = *(void *)(v0 + 256);
    uint64_t v14 = *(void **)(v0 + 232);
    (*(void (**)(void, void, void))(*(void *)(v0 + 216) + 104))(*(void *)(v0 + 224), enum case for DIPError.Code.localAuthenticationCannotExternalizeContext(_:), *(void *)(v0 + 208));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000FFBA8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v16, v15);
    sub_1000035EC(v18, v17);
    goto LABEL_5;
  }
  uint64_t v3 = v2;
  uint64_t v23 = *(void *)(v0 + 272);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v7 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)();
  uint64_t v10 = *(void *)(v0 + 280);
  unint64_t v9 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 248);
  unint64_t v11 = *(void *)(v0 + 256);
  uint64_t v13 = *(void **)(v0 + 232);
  if (v23)
  {
    sub_1000035EC(v4, v6);
    sub_1000035EC(v10, v9);
    sub_1000035EC(v12, v11);
    uint64_t v14 = v13;
LABEL_5:

    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  uint64_t v21 = v8;
  uint64_t v24 = v7;
  sub_1000035EC(v4, v6);
  sub_1000035EC(v10, v9);
  sub_1000035EC(v12, v11);

  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v22(v24, v21);
}

uint64_t sub_1000FFAF8()
{
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[35];
  unint64_t v3 = v0[36];
  uint64_t v5 = v0[31];
  unint64_t v4 = v0[32];
  unint64_t v6 = (void *)v0[29];
  swift_willThrow();
  sub_1000035EC(v2, v3);
  sub_1000035EC(v5, v4);

  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000FFBA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FFBF0(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C15C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FFC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C3770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000FFCB8()
{
  type metadata accessor for SymmetricKey();
  sub_1001006A0(&qword_1001C3778);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  switch(v10 >> 62)
  {
    case 1uLL:
      if (v9 >> 32 < (int)v9)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10010003CLL);
      }
      sub_10000354C(v9, v10);
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v9, __DataStorage._offset.getter())) {
        goto LABEL_14;
      }
      __DataStorage._length.getter();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v0);
      swift_bridgeObjectRelease();
      v1._uint64_t countAndFlagsBits = 0x2E736574796220;
      v1._object = (void *)0xE700000000000000;
      String.append(_:)(v1);
      sub_1000035EC(v9, v10);
LABEL_11:
      sub_1000035EC(v9, v10);
      return 0xD00000000000001CLL;
    case 2uLL:
      uint64_t v2 = *(void *)(v9 + 16);
      uint64_t v3 = *(void *)(v9 + 24);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v2, __DataStorage._offset.getter())) {
        goto LABEL_15;
      }
      if (__OFSUB__(v3, v2)) {
        goto LABEL_13;
      }
      __DataStorage._length.getter();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 0x2E736574796220;
      v5._object = (void *)0xE700000000000000;
      String.append(_:)(v5);
      swift_release();
      swift_release();
      goto LABEL_11;
    default:
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 0x2E736574796220;
      v7._object = (void *)0xE700000000000000;
      String.append(_:)(v7);
      goto LABEL_11;
  }
}

unint64_t GenericPasswordConvertibleProtocol.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  switch(v3 >> 62)
  {
    case 1uLL:
      if (v2 >> 32 < (int)v2)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100100388);
      }
      sub_10000354C(v2, v3);
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_14;
      }
      __DataStorage._length.getter();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 0x2E736574796220;
      v7._object = (void *)0xE700000000000000;
      String.append(_:)(v7);
      sub_1000035EC(v4, v5);
LABEL_11:
      sub_1000035EC(v4, v5);
      return 0xD00000000000001CLL;
    case 2uLL:
      uint64_t v8 = *(void *)(v2 + 16);
      uint64_t v9 = *(void *)(v2 + 24);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v8, __DataStorage._offset.getter())) {
        goto LABEL_15;
      }
      if (__OFSUB__(v9, v8)) {
        goto LABEL_13;
      }
      __DataStorage._length.getter();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 0x2E736574796220;
      v11._object = (void *)0xE700000000000000;
      String.append(_:)(v11);
      swift_release();
      swift_release();
      goto LABEL_11;
    default:
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 0x2E736574796220;
      v13._object = (void *)0xE700000000000000;
      String.append(_:)(v13);
      goto LABEL_11;
  }
}

uint64_t SymmetricKey.init<A>(rawRepresentation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  SymmetricKey.init<A>(data:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t SymmetricKey.rawRepresentation.getter()
{
  type metadata accessor for SymmetricKey();
  sub_1001006A0(&qword_1001C3778);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  return v1;
}

uint64_t sub_100100530(uint64_t a1, uint64_t a2)
{
  return SymmetricKey.init<A>(rawRepresentation:)(a1, a2);
}

uint64_t sub_100100548()
{
  sub_1001006A0(&qword_1001C3778);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  return v1;
}

void sub_1001005D4(UInt8 *bytes@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (bytes) {
    CFIndex v4 = a2 - (void)bytes;
  }
  else {
    CFIndex v4 = 0;
  }
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(0, bytes, v4, kCFAllocatorNull);
  if (v5)
  {
    CFDataRef v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  *a3 = v7;
  a3[1] = v9;
}

uint64_t sub_10010065C(uint64_t a1)
{
  uint64_t result = sub_1001006A0(&qword_1001C3780);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001006A0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SymmetricKey();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001006E4(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      sub_10000354C(a1, a2);
      CFDataRef v6 = (const UInt8 *)__DataStorage._bytes.getter();
      if (!v6) {
        goto LABEL_8;
      }
      uint64_t v7 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a1, v7)) {
LABEL_37:
      }
        __break(1u);
      v6 += (int)a1 - v7;
LABEL_8:
      uint64_t v8 = __DataStorage._length.getter();
      if (v8 >= v5) {
        uint64_t v9 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v9 = v8;
      }
      if (v6) {
        CFIndex v10 = v9;
      }
      else {
        CFIndex v10 = 0;
      }
      CFDataRef v11 = CFDataCreateWithBytesNoCopy(0, v6, v10, kCFAllocatorNull);
      if (v11)
      {
        CFDataRef v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000035EC(a1, a2);
      }
      else
      {
        sub_1000035EC(a1, a2);
        return 0;
      }
      return v13;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v16 = (const UInt8 *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_19;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_36;
      }
      v16 += v14 - v17;
LABEL_19:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_35;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        CFIndex v21 = v19;
      }
      else {
        CFIndex v21 = v20;
      }
      if (v16) {
        CFIndex v22 = v21;
      }
      else {
        CFIndex v22 = 0;
      }
      CFDataRef v23 = CFDataCreateWithBytesNoCopy(0, v16, v22, kCFAllocatorNull);
      if (v23)
      {
        CFDataRef v24 = v23;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        swift_release();
        swift_release();

        return v13;
      }
      swift_release();
      swift_release();
      return 0;
    case 3uLL:
      memset(bytes, 0, 14);
      CFDataRef v4 = CFDataCreateWithBytesNoCopy(0, bytes, 0, kCFAllocatorNull);
      if (v4) {
        goto LABEL_29;
      }
      return 0;
    default:
      *(void *)bytes = a1;
      *(_WORD *)&bytes[8] = a2;
      bytes[10] = BYTE2(a2);
      bytes[11] = BYTE3(a2);
      bytes[12] = BYTE4(a2);
      bytes[13] = BYTE5(a2);
      CFDataRef v4 = CFDataCreateWithBytesNoCopy(0, bytes, BYTE6(a2), kCFAllocatorNull);
      if (!v4) {
        return 0;
      }
LABEL_29:
      CFDataRef v25 = v4;
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return v13;
  }
}

uint64_t SyncableKeyStoreProvider.__allocating_init(keychainWrapper:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  long long v10 = *(_OWORD *)(a1 + 24);
  uint64_t v3 = v10;
  uint64_t v4 = sub_100036D00(a1, v10);
  uint64_t v5 = *(void *)(v10 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  *(_OWORD *)(v2 + 40) = v10;
  uint64_t v8 = sub_10002C3A0((uint64_t *)(v2 + 16));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(v8, v7, v3);
  sub_10000B9DC(a1);
  return v2;
}

uint64_t *SyncableKeyStoreProvider.init(keychainWrapper:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_100036D00(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = sub_100102A6C((uint64_t)v7, v1, v3, v4);
  sub_10000B9DC(a1);
  return v9;
}

uint64_t SyncableKeyStoreProvider.storeSyncableKey(key:label:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v70 = a3;
  uint64_t v67 = a1;
  unint64_t v68 = a2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v62 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v64 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v61 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v60 - v12;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v63 = v6;
  uint64_t v65 = v9;
  uint64_t v66 = v8;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v60 = v4;
    BOOL v18 = (uint8_t *)v17;
    uint64_t v71 = swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v73 = sub_10004C3A4(v70, a4, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Storing Account Key Signing Key in iCloud keychain key with label %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v65 + 8))(v13, v66);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100177AA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v20;
  type metadata accessor for CFString(0);
  uint64_t v22 = v21;
  *(void *)(inited + 72) = v21;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v23;
  *(void *)(inited + 120) = v22;
  *(void *)(inited + 96) = kSecAttrAccessibleAfterFirstUnlock;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v24;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v70;
  *(void *)(inited + 152) = a4;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v25;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v26;
  swift_bridgeObjectRetain();
  CFStringRef v27 = (id)kSecClassGenericPassword;
  CFStringRef v28 = (id)kSecAttrAccessibleAfterFirstUnlock;
  uint64_t v30 = v67;
  unint64_t v29 = v68;
  sub_10000354C(v67, v68);
  uint64_t v31 = sub_1001006E4(v30, v29);
  uint64_t v33 = v32;
  sub_1000035EC(v30, v29);
  *(void *)(inited + 264) = &type metadata for Data;
  *(void *)(inited + 240) = v31;
  *(void *)(inited + 248) = v33;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v34;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = 1;
  unint64_t v35 = sub_10004AB68(inited);
  uint64_t v36 = v69[5];
  uint64_t v37 = v69[6];
  sub_100014D14(v69 + 2, v36);
  OSStatus v38 = (*(uint64_t (**)(unint64_t, void, uint64_t, uint64_t))(v37 + 8))(v35, 0, v36, v37);
  swift_bridgeObjectRelease();
  if (v38)
  {
    uint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v71 = 0xD000000000000029;
    unint64_t v72 = 0x8000000100181A20;
    CFStringRef v39 = SecCopyErrorMessageString(v38, 0);
    if (v39)
    {
      uint64_t v40 = (__CFString *)v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;
    }
    else
    {
      LODWORD(v73) = v38;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = v49;
    }
    uint64_t v51 = v62;
    uint64_t v50 = v63;
    v52._uint64_t countAndFlagsBits = v41;
    v52._object = v43;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v51 + 104))(v64, enum case for DIPError.Code.accountKeyAlreadyExists(_:), v50);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    uint64_t v53 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v54 = (*(unsigned __int8 *)(*(void *)v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v53 + 80);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1001768E0;
    unint64_t v56 = v55 + v54;
    unint64_t v57 = v56 + v53[14];
    uint64_t v58 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v59 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v56, v58, v59);
    *(void *)(v57 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v57 = v38;
    sub_10004A5E8(v55);
    type metadata accessor for DIPError();
    sub_100102B68((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  else
  {
    uint64_t v44 = v61;
    defaultLogger()();
    uint64_t v45 = Logger.logObject.getter();
    int v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 67109120;
      LODWORD(v71) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v46, "Account Key Signing Key Storage result -> %d", v47, 8u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v44, v66);
  }
}

unint64_t SyncableKeyStoreProvider.readSyncableKey(label:)(uint64_t a1, unint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  __chkstk_darwin(v3);
  uint64_t v71 = (char *)v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v66 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v65 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v65 - v12;
  defaultLogger()();
  unint64_t v14 = a2;
  swift_bridgeObjectRetain_n();
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v74 = v6;
  uint64_t v67 = v11;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v68 = v5;
    uint64_t v19 = (uint8_t *)v18;
    unint64_t v78 = swift_slowAlloc();
    uint64_t v20 = v73;
    *(_DWORD *)uint64_t v19 = 136315138;
    v65[1] = v19 + 4;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10004C3A4(v20, v14, (uint64_t *)&v78);
    uint64_t v21 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetching Account Key Signing Key from iCloud Keychain with label %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v68;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v5);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
    uint64_t v21 = v73;
  }
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100177AA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v23;
  type metadata accessor for CFString(0);
  uint64_t v25 = v24;
  *(void *)(inited + 72) = v24;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v26;
  *(void *)(inited + 120) = v25;
  *(void *)(inited + 96) = kSecAttrAccessibleAfterFirstUnlock;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v27;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v21;
  *(void *)(inited + 152) = v14;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v28;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v29;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = 1;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v30;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = 1;
  swift_bridgeObjectRetain();
  CFStringRef v31 = (id)kSecClassGenericPassword;
  CFStringRef v32 = (id)kSecAttrAccessibleAfterFirstUnlock;
  unint64_t v33 = sub_10004AB68(inited);
  v80[0] = 0;
  uint64_t v34 = v72[5];
  uint64_t v35 = v72[6];
  sub_100014D14(v72 + 2, v34);
  OSStatus v36 = (*(uint64_t (**)(unint64_t, id *, uint64_t, uint64_t))(v35 + 16))(v33, v80, v34, v35);
  swift_bridgeObjectRelease();
  if (v36 != -25300)
  {
    if (v36)
    {
      unint64_t v78 = 0;
      unint64_t v79 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      unint64_t v78 = 0xD000000000000029;
      unint64_t v79 = 0x8000000100181AD0;
      CFStringRef v49 = SecCopyErrorMessageString(v36, 0);
      if (v49)
      {
        uint64_t v50 = (__CFString *)v49;
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v52;
      }
      else
      {
        LODWORD(v76) = v36;
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v53 = v55;
      }
      v56._uint64_t countAndFlagsBits = v51;
      v56._object = v53;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      unint64_t v54 = v78;
      (*(void (**)(char *, void, uint64_t))(v69 + 104))(v71, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v70);
      sub_100006CC8((uint64_t *)&unk_1001C4950);
      unint64_t v57 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
      unint64_t v58 = (*(unsigned __int8 *)(*(void *)v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v57 + 80);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1001768E0;
      unint64_t v60 = v59 + v58;
      unint64_t v61 = v60 + v57[14];
      uint64_t v62 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v63 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(v60, v62, v63);
      *(void *)(v61 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v61 = v36;
      sub_10004A5E8(v59);
      type metadata accessor for DIPError();
      sub_100102B68((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    else
    {
      uint64_t v37 = v67;
      defaultLogger()();
      OSStatus v38 = Logger.logObject.getter();
      int v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, (os_log_type_t)v39))
      {
        uint64_t v68 = v5;
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        unint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        swift_beginAccess();
        if (v80[0])
        {
          id v41 = [v80[0] base64EncodedStringWithOptions:0];
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v44 = v43;
        }
        else
        {
          uint64_t v42 = 0;
          unint64_t v44 = 0xE000000000000000;
        }
        uint64_t v77 = sub_10004C3A4(v42, v44, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Account Key Signing Key exists %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v68);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v5);
      }
      swift_beginAccess();
      if (v80[0])
      {
        id v75 = v80[0];
        swift_unknownObjectRetain();
        if (swift_dynamicCast())
        {
          unint64_t v54 = v77;
          swift_unknownObjectRelease();
          return v54;
        }
      }
      (*(void (**)(char *, void, uint64_t))(v69 + 104))(v71, enum case for DIPError.Code.invalidAccountKeySigningKey(_:), v70);
      unint64_t v54 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100102B68((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_unknownObjectRelease();
    return v54;
  }
  uint64_t v45 = v66;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  int v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    unint64_t v78 = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 136315138;
    unint64_t v72 = v48 + 4;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10004C3A4(v73, v14, (uint64_t *)&v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Account Key Signing Key with label %s doesn't exist in the iCloud keychain", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v5);
  swift_unknownObjectRelease();
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SyncableKeyStoreProvider.deleteKey(label:)(Swift::String label)
{
  object = label._object;
  uint64_t countAndFlagsBits = label._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4);
  Swift::String v52 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  unint64_t v54 = (unint64_t)object;
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v48 = v7;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v49 = v1;
    uint64_t v55 = v14;
    uint64_t v47 = v6;
    *(_DWORD *)uint64_t v13 = 136315138;
    int v46 = v13 + 4;
    uint64_t v15 = countAndFlagsBits;
    unint64_t v16 = v54;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_10004C3A4(v15, v16, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t countAndFlagsBits = v15;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Deleting keychain key with label %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v47);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100177AB0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v18;
  type metadata accessor for CFString(0);
  uint64_t v20 = v19;
  *(void *)(inited + 72) = v19;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v21;
  *(void *)(inited + 120) = v20;
  *(void *)(inited + 96) = kSecAttrAccessibleAfterFirstUnlock;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v22;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v23;
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 192) = countAndFlagsBits;
  *(void *)(inited + 200) = v54;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v24;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = 1;
  swift_bridgeObjectRetain();
  CFStringRef v25 = (id)kSecClassGenericPassword;
  CFStringRef v26 = (id)kSecAttrAccessibleAfterFirstUnlock;
  unint64_t v27 = sub_10004AB68(inited);
  uint64_t v28 = v53[5];
  uint64_t v29 = v53[6];
  sub_100014D14(v53 + 2, v28);
  OSStatus v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v29 + 24))(v27, v28, v29);
  swift_bridgeObjectRelease();
  if (v30 != -25300 && v30)
  {
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v55 = 0xD000000000000029;
    unint64_t v56 = 0x800000010017C540;
    CFStringRef v31 = SecCopyErrorMessageString(v30, 0);
    if (v31)
    {
      CFStringRef v32 = (__CFString *)v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;
    }
    else
    {
      LODWORD(v57) = v30;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = v36;
    }
    uint64_t v37 = v50;
    v38._uint64_t countAndFlagsBits = v33;
    v38._object = v35;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v37 + 104))(v52, enum case for DIPError.Code.failedToDeletePayloadProtectionKey(_:), v51);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    int v39 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v40 = (*(unsigned __int8 *)(*(void *)v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v39 + 80);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1001768E0;
    unint64_t v42 = v41 + v40;
    unint64_t v43 = v42 + v39[14];
    uint64_t v44 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v45 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104))(v42, v44, v45);
    *(void *)(v43 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v43 = v30;
    sub_10004A5E8(v41);
    type metadata accessor for DIPError();
    sub_100102B68((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t SyncableKeyStoreProvider.deinit()
{
  sub_10000B9DC(v0 + 16);
  return v0;
}

uint64_t SyncableKeyStoreProvider.__deallocating_deinit()
{
  sub_10000B9DC(v0 + 16);

  return swift_deallocClassInstance();
}

unint64_t sub_100102620(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C0898);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8((uint64_t *)&unk_1001C17E0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100102B00(v12, (uint64_t)v5);
    unint64_t result = sub_100102814((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_10004DCD8(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100102814(uint64_t a1)
{
  type metadata accessor for DIPError.PropertyKey();
  sub_100102B68(&qword_1001C3828, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1001028AC(a1, v2);
}

unint64_t sub_1001028AC(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    unint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100102B68(&qword_1001C3830, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t *sub_100102A6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a2[5] = a3;
  a2[6] = a4;
  uint64_t v7 = sub_10002C3A0(a2 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v7, a1, a3);
  return a2;
}

uint64_t type metadata accessor for SyncableKeyStoreProvider()
{
  return self;
}

uint64_t sub_100102B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C0898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100102B68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100102BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v2[2] = v5;
  v2[3] = *(void *)(v5 - 8);
  v2[4] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v2[5] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100102CB4;
  return sub_100103264(a1, a2, 1);
}

uint64_t sub_100102CB4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001030EC;
  }
  else {
    uint64_t v4 = sub_100102DC8;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_100102DC8()
{
  unint64_t v1 = v0[6];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v6 = v0[3];
    uint64_t v5 = v0[4];
    uint64_t v7 = v0[2];
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(v6 + 104);
    v8(v5, enum case for DIPError.Code.idcsMissingPresentmentKey(_:), v7);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v8(v0[4], enum case for DIPError.Code.internalError(_:), v0[2]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    unint64_t v9 = (void (*)(void))v0[1];
    v9();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v2 = *(id *)(v0[6] + 32);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = (void (*)(id))v0[1];
  v3(v2);
}

uint64_t sub_1001030EC()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.internalError(_:), v0[2]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100103264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[38] = a3;
  v4[39] = v3;
  v4[36] = a1;
  v4[37] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[40] = v5;
  v4[41] = *(void *)(v5 - 8);
  v4[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[43] = v6;
  v4[44] = *(void *)(v6 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[48] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v4[49] = v7;
  v4[50] = *(void *)(v7 - 8);
  v4[51] = swift_task_alloc();
  return _swift_task_switch(sub_100103428, 0, 0);
}

uint64_t sub_100103428()
{
  uint64_t v1 = v0[38];
  static IDCSSignposts.storageGeneratePresentmentKeys.getter();
  DIPSignpost.init(_:)();
  if (v1 < 1)
  {
    (*(void (**)(void, void, void))(v0[41] + 104))(v0[42], enum case for DIPError.Code.idcsInvalidArgument(_:), v0[40]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    v0[52] = *(void *)(v0[39] + 24);
    id v2 = (void *)swift_task_alloc();
    v0[53] = v2;
    *id v2 = v0;
    v2[1] = sub_1001036B4;
    return sub_1000C8D7C();
  }
}

uint64_t sub_1001036B4()
{
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10010578C;
  }
  else {
    id v2 = sub_1001037C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001037C8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing progenitor key designations before generating new presentment keys", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[47];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[44];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[55] = v7;
  v0[56] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[57] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100103910;
  return sub_1000C1B94(0, 0xF000000000000000, 1);
}

uint64_t sub_100103910()
{
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10010592C;
  }
  else {
    os_log_type_t v2 = sub_100103A24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100103A24()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[36];
  uint64_t v3 = v0[37];
  v0[59] = *(void *)(v2 + 160);
  uint64_t v5 = (void *)swift_allocObject();
  v0[60] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  uint64_t v6 = swift_allocObject();
  v0[61] = v6;
  *(void *)(v6 + 16) = &unk_1001C3858;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[62] = v7;
  uint64_t v8 = sub_100006CC8(&qword_1001C3870);
  *uint64_t v7 = v0;
  v7[1] = sub_100103B84;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 28, &unk_1001C3868, v6, v8);
}

uint64_t sub_100103B84()
{
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100103F48;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_100103CA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100103CA8()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  *(void *)(v0 + 512) = *(void *)(v0 + 224);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 232);
  *(void *)(v0 + 536) = *(void *)(v0 + 248);
  uint64_t v4 = (void *)swift_allocObject();
  *(void *)(v0 + 544) = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 552) = v5;
  *(void *)(v5 + 16) = sub_10010D044;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v6;
  uint64_t v7 = sub_100006CC8(&qword_1001C3878);
  *uint64_t v6 = v0;
  v6[1] = sub_100103E20;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 256, sub_100044CA8, v5, v7);
}

uint64_t sub_100103E20()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100104BB0;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_10010413C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100103F48()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[41] + 104))(v0[42], enum case for DIPError.Code.internalError(_:), v0[40]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10010413C()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  v0[72] = v2;
  v0[73] = v1;
  uint64_t v3 = v0[34];
  unint64_t v4 = v0[35];
  v0[74] = v3;
  v0[75] = v4;
  if (v1)
  {
    sub_100063724(v2, v1, v3, v4);
    sub_10000354C(v3, v4);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[76] = v5;
    void *v5 = v0;
    v5[1] = sub_100104A4C;
    return sub_10013FFEC(v2, v1, v3, v4);
  }
  unint64_t v58 = v0 + 13;
  uint64_t v7 = v0[71];
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, (os_log_type_t)v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v9, "Skipping creation of progenitor key authorization because no key signing key exists", v10, 2u);
    swift_slowDealloc();
  }
  unint64_t v11 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v12 = v0[46];
  uint64_t v13 = v0[43];

  v11(v12, v13);
  v0[17] = 0;
  *unint64_t v58 = 0u;
  *(_OWORD *)(v0 + 15) = 0u;
  uint64_t v14 = v0[64];
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v59 = v7;
    unint64_t v16 = v0 + 2;
    uint64_t v17 = (uint64_t)(v0 + 18);
    uint64_t v18 = (uint64_t)(v0 + 23);
    uint64_t v19 = v14 + 32;
    uint64_t v56 = (uint64_t)(v0 + 23);
    uint64_t v57 = (uint64_t)(v0 + 18);
    unint64_t v54 = v0;
    uint64_t v55 = v0 + 2;
    while (1)
    {
      long long v20 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v19;
      *((_OWORD *)v16 + 1) = v20;
      long long v21 = *(_OWORD *)(v19 + 32);
      long long v22 = *(_OWORD *)(v19 + 48);
      long long v23 = *(_OWORD *)(v19 + 64);
      v16[10] = *(void *)(v19 + 80);
      *((_OWORD *)v16 + 3) = v22;
      *((_OWORD *)v16 + 4) = v23;
      *((_OWORD *)v16 + 2) = v21;
      sub_10010D064((uint64_t)v58, v18);
      uint64_t v66 = v19;
      uint64_t v67 = v15;
      if (v0[26])
      {
        long long v24 = *(_OWORD *)(v18 + 16);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        *(_OWORD *)(v17 + 16) = v24;
        *(void *)(v17 + 32) = *(void *)(v18 + 32);
        sub_10010D0CC(v16);
        unint64_t v25 = sub_1001581DC();
        if (v59)
        {
          unint64_t v48 = v0[75];
          uint64_t v49 = v0[74];
          uint64_t v50 = v0[73];
          uint64_t v51 = v0[72];
          Swift::String v52 = (void *)v0[67];
          sub_1000035EC(v0[65], v0[66]);

          sub_10010D1E0(v16);
          sub_100063808(v51, v50, v49, v48);
          swift_bridgeObjectRelease();
          sub_10001B67C(v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10010D164((uint64_t)v58);
          (*(void (**)(void, void, void))(v0[41] + 104))(v0[42], enum case for DIPError.Code.internalError(_:), v0[40]);
          swift_errorRetain();
          sub_100102620((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_errorRelease();
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v53 = (uint64_t (*)(void))v0[1];
          return v53();
        }
        unint64_t v27 = v25;
        unint64_t v28 = v26;
        sub_10001B67C(v17);
        uint64_t v59 = 0;
        uint64_t v73 = v27;
        unint64_t v74 = v28;
      }
      else
      {
        sub_10010D0CC(v16);
        sub_10010D164(v18);
        uint64_t v73 = 0;
        unint64_t v74 = 0xF000000000000000;
      }
      uint64_t v61 = v0[65];
      unint64_t v62 = v0[66];
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[55];
      uint64_t v30 = v0[45];
      uint64_t v31 = v0[43];
      uint64_t v68 = v0[10];
      unint64_t v69 = v0[11];
      unint64_t v70 = v0[9];
      uint64_t v71 = v0[8];
      uint64_t v32 = v0[6];
      uint64_t v34 = v0[4];
      unint64_t v33 = v0[5];
      unint64_t v72 = v0[7];
      defaultLogger()();
      *(void *)(swift_task_alloc() + 16) = v16;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v29(v30, v31);
      defaultLogger()();
      *(void *)(swift_task_alloc() + 16) = v16;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v29(v30, v31);
      defaultLogger()();
      uint64_t v35 = (void *)swift_task_alloc();
      uint64_t v35[2] = v16;
      v35[3] = v73;
      v35[4] = v74;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v29(v30, v31);
      swift_bridgeObjectRetain();
      unint64_t v36 = v33;
      sub_10000354C(v34, v33);
      sub_10000354C(v32, v72);
      sub_10000354C(v71, v70);
      sub_10000354C(v61, v62);
      sub_10000354C(v68, v69);
      sub_100009778(v73, v74);
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v64.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v63.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v60.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v37.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v38.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      if (v74 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100009764(v73, v74);
      }
      uint64_t v0 = v54;
      unint64_t v40 = v54[66];
      uint64_t v41 = v54[65];
      [objc_allocWithZone((Class)DCCredentialCryptoKey) initWithIdentifier:v65 publicKey:v64.super.isa publicKeyIdentifier:v63.super.isa publicKeyCOSEKey:v60.super.isa keyType:2 keyUsage:3 progenitorKeyAttestation:v37.super.isa casdAttestation:v38.super.isa keyAuthorization:isa kskAttestation:0];
      sub_1000035EC(v68, v69);
      sub_1000035EC(v41, v40);
      sub_1000035EC(v71, v70);
      sub_1000035EC(v32, v72);
      sub_1000035EC(v34, v36);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100009764(v73, v74);
      unint64_t v16 = v55;
      sub_10010D1E0(v55);
      uint64_t v19 = v66 + 88;
      --v15;
      uint64_t v18 = v56;
      uint64_t v17 = v57;
      if (v67 == 1)
      {
        unint64_t v42 = (void *)v54[67];
        sub_1000035EC(v54[65], v54[66]);

        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
  }
  unint64_t v43 = (void *)v0[67];
  sub_1000035EC(v0[65], v0[66]);
  swift_bridgeObjectRelease();

LABEL_21:
  uint64_t v44 = v0[50];
  uint64_t v45 = v0[51];
  uint64_t v46 = v0[49];
  sub_100063808(v0[72], v0[73], v0[74], v0[75]);
  swift_bridgeObjectRelease();
  sub_10010D164((uint64_t)v58);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = (uint64_t (*)(void *))v0[1];
  return v47(_swiftEmptyArrayStorage);
}

uint64_t sub_100104A4C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 616) = a1;
  *(void *)(v4 + 624) = v1;
  swift_task_dealloc();
  sub_1000035EC(*(void *)(v3 + 592), *(void *)(v3 + 600));
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100105ADC;
  }
  else
  {
    uint64_t v5 = sub_100104DD0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100104BB0()
{
  uint64_t v1 = (void *)v0[67];
  unint64_t v2 = v0[66];
  uint64_t v3 = v0[65];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000035EC(v3, v2);

  (*(void (**)(void, void, void))(v0[41] + 104))(v0[42], enum case for DIPError.Code.internalError(_:), v0[40]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100104DD0()
{
  uint64_t v82 = v0;
  NSData v60 = v0 + 13;
  uint64_t v1 = v0[77];
  if (v1)
  {
    uint64_t v2 = v0[78];
    v0[16] = &type metadata for KeySigningKeySignatureProvider;
    v0[17] = &off_1001B8D28;
    v0[13] = v1;
    uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
    uint64_t v4 = swift_task_alloc();
    *(void *)(v4 + 16) = sub_10006991C;
    *(void *)(v4 + 24) = v1;
    v3 += 4;
    swift_retain_n();
    os_unfair_lock_lock(v3);
    sub_100063E20(v81);
    os_unfair_lock_unlock(v3);
    if (v2)
    {
      return swift_task_dealloc();
    }
    unint64_t v14 = v0[75];
    uint64_t v15 = v0[74];
    uint64_t v16 = v0[73];
    uint64_t v17 = v0[72];
    unint64_t v13 = v81[0];
    swift_release_n();
    sub_100063808(v17, v16, v15, v14);
    swift_release();
    swift_task_dealloc();
    uint64_t v6 = 0;
  }
  else
  {
    sub_100063808(v0[72], v0[73], v0[74], v0[75]);
    uint64_t v6 = v0[78];
    defaultLogger()();
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, (os_log_type_t)v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v8, "Skipping creation of progenitor key authorization because no key signing key exists", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[55];
    uint64_t v11 = v0[46];
    uint64_t v12 = v0[43];

    v10(v11, v12);
    unint64_t v13 = 0;
    v0[17] = 0;
    *NSData v60 = 0u;
    *(_OWORD *)(v0 + 15) = 0u;
  }
  uint64_t v18 = v0[64];
  v81[0] = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v61 = v6;
    long long v20 = v0 + 2;
    uint64_t v21 = (uint64_t)(v0 + 18);
    uint64_t v22 = (uint64_t)(v0 + 23);
    uint64_t v23 = v18 + 32;
    unint64_t v69 = v13;
    uint64_t v58 = (uint64_t)(v0 + 23);
    uint64_t v59 = (uint64_t)(v0 + 18);
    uint64_t v56 = v0;
    uint64_t v57 = v0 + 2;
    while (1)
    {
      long long v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)long long v20 = *(_OWORD *)v23;
      *((_OWORD *)v20 + 1) = v24;
      long long v25 = *(_OWORD *)(v23 + 32);
      long long v26 = *(_OWORD *)(v23 + 48);
      long long v27 = *(_OWORD *)(v23 + 64);
      v20[10] = *(void *)(v23 + 80);
      *((_OWORD *)v20 + 3) = v26;
      *((_OWORD *)v20 + 4) = v27;
      *((_OWORD *)v20 + 2) = v25;
      sub_10010D064((uint64_t)v60, v22);
      uint64_t v68 = v19;
      if (v0[26])
      {
        long long v28 = *(_OWORD *)(v22 + 16);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        *(_OWORD *)(v21 + 16) = v28;
        *(void *)(v21 + 32) = *(void *)(v22 + 32);
        sub_10010D0CC(v20);
        unint64_t v29 = sub_1001581DC();
        if (v61)
        {
          unint64_t v50 = v0[75];
          uint64_t v51 = v0[74];
          uint64_t v52 = v0[73];
          uint64_t v53 = v0[72];
          unint64_t v54 = (void *)v0[67];
          sub_1000035EC(v0[65], v0[66]);

          sub_10010D1E0(v20);
          sub_100063808(v53, v52, v51, v50);
          swift_bridgeObjectRelease();
          sub_10001B67C(v21);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10010D164((uint64_t)v60);
          (*(void (**)(void, void, void))(v0[41] + 104))(v0[42], enum case for DIPError.Code.internalError(_:), v0[40]);
          swift_errorRetain();
          sub_100102620((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_errorRelease();
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v55 = (uint64_t (*)(void))v0[1];
          return v55();
        }
        unint64_t v31 = v29;
        unint64_t v32 = v30;
        sub_10001B67C(v21);
        uint64_t v61 = 0;
        uint64_t v78 = v31;
        unint64_t v79 = v32;
      }
      else
      {
        sub_10010D0CC(v20);
        sub_10010D164(v22);
        uint64_t v78 = 0;
        unint64_t v79 = 0xF000000000000000;
      }
      uint64_t v62 = v0[65];
      unint64_t v63 = v0[66];
      unint64_t v33 = (void (*)(uint64_t, uint64_t))v0[55];
      uint64_t v34 = v0[45];
      uint64_t v35 = v0[43];
      uint64_t v71 = v0[10];
      unint64_t v70 = v0[11];
      unint64_t v72 = v0[9];
      uint64_t v73 = v0[8];
      unint64_t v74 = v0[7];
      uint64_t v75 = v0[6];
      unint64_t v76 = v0[5];
      uint64_t v77 = v0[4];
      defaultLogger()();
      *(void *)(swift_task_alloc() + 16) = v20;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v33(v34, v35);
      defaultLogger()();
      *(void *)(swift_task_alloc() + 16) = v20;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v33(v34, v35);
      defaultLogger()();
      unint64_t v36 = (void *)swift_task_alloc();
      v36[2] = v20;
      v36[3] = v78;
      v36[4] = v79;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v33(v34, v35);
      swift_bridgeObjectRetain();
      sub_10000354C(v77, v76);
      sub_10000354C(v75, v74);
      sub_10000354C(v73, v72);
      sub_10000354C(v62, v63);
      sub_10000354C(v71, v70);
      sub_100009778(v78, v79);
      swift_bridgeObjectRetain();
      NSString v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v66.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v65.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v64.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v37.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v38.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      if (v79 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100009764(v78, v79);
      }
      uint64_t v0 = v56;
      long long v20 = v57;
      if (v69)
      {
        v40.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v40.super.Class isa = 0;
      }
      unint64_t v41 = v56[66];
      uint64_t v42 = v56[65];
      [objc_allocWithZone((Class)DCCredentialCryptoKey) initWithIdentifier:v67 publicKey:v66.super.isa publicKeyIdentifier:v65.super.isa publicKeyCOSEKey:v64.super.isa keyType:2 keyUsage:3 progenitorKeyAttestation:v37.super.isa casdAttestation:v38.super.isa keyAuthorization:isa kskAttestation:v40.super.isa];
      sub_1000035EC(v71, v70);
      sub_1000035EC(v42, v41);
      sub_1000035EC(v73, v72);
      sub_1000035EC(v75, v74);
      sub_1000035EC(v77, v76);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v81[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v81[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100009764(v78, v79);
      sub_10010D1E0(v57);
      v23 += 88;
      uint64_t v19 = v68 - 1;
      uint64_t v22 = v58;
      uint64_t v21 = v59;
      if (v68 == 1)
      {
        unint64_t v43 = (void *)v56[67];
        sub_1000035EC(v56[65], v56[66]);

        swift_bridgeObjectRelease();
        uint64_t v44 = (void *)v81[0];
        goto LABEL_27;
      }
    }
  }
  uint64_t v45 = (void *)v0[67];
  sub_1000035EC(v0[65], v0[66]);

  swift_bridgeObjectRelease();
  uint64_t v44 = _swiftEmptyArrayStorage;
LABEL_27:
  id v80 = v44;
  uint64_t v46 = v0[50];
  uint64_t v47 = v0[51];
  uint64_t v48 = v0[49];
  sub_100063808(v0[72], v0[73], v0[74], v0[75]);
  swift_bridgeObjectRelease();
  sub_10010D164((uint64_t)v60);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v49 = (uint64_t (*)(void *))v0[1];
  return v49(v80);
}

uint64_t sub_10010578C()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = v0[43];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Refreshing progenitor key designations before generating new presentment keys", v6, 2u);
    swift_slowDealloc();
  }
  uint64_t v7 = v0[47];
  uint64_t v8 = v0[43];
  uint64_t v9 = v0[44];

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v0[55] = v10;
  v0[56] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v7, v8);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[57] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100103910;
  return sub_1000C1B94(0, 0xF000000000000000, 1);
}

uint64_t sub_10010592C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[43];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v3);
  uint64_t v4 = v0[38];
  uint64_t v5 = v0[39];
  uint64_t v7 = v0[36];
  uint64_t v6 = v0[37];
  v0[59] = *(void *)(v5 + 160);
  uint64_t v8 = (void *)swift_allocObject();
  v0[60] = v8;
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  v8[5] = v4;
  uint64_t v9 = swift_allocObject();
  v0[61] = v9;
  *(void *)(v9 + 16) = &unk_1001C3858;
  *(void *)(v9 + 24) = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[62] = v10;
  uint64_t v11 = sub_100006CC8(&qword_1001C3870);
  void *v10 = v0;
  v10[1] = sub_100103B84;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 28, &unk_1001C3868, v9, v11);
}

uint64_t sub_100105ADC()
{
  unint64_t v1 = v0[75];
  uint64_t v2 = v0[74];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = (void *)v0[67];
  unint64_t v6 = v0[66];
  uint64_t v7 = v0[65];
  sub_100063808(v4, v3, v2, v1);
  sub_1000035EC(v7, v6);

  sub_100063808(v4, v3, v2, v1);
  (*(void (**)(void, void, void))(v0[41] + 104))(v0[42], enum case for DIPError.Code.internalError(_:), v0[40]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100105D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v6[10] = v10;
  v6[11] = *(void *)(v10 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v6[13] = v11;
  v6[14] = *(void *)(v11 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v12 = (void *)swift_task_alloc();
  v6[16] = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_100105E88;
  return sub_1001065B8(a4, a5, a2);
}

uint64_t sub_100105E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[17] = a1;
  v5[18] = a2;
  v5[19] = a3;
  swift_task_dealloc();
  if (v3)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    return _swift_task_switch(sub_100105FD4, 0, 0);
  }
}

uint64_t sub_100105FD4()
{
  unint64_t v33 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[14];
    uint64_t v29 = v0[13];
    uint64_t v31 = v0[15];
    uint64_t v5 = v0[7];
    unint64_t v4 = v0[8];
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[3] = sub_10004C3A4(v5, v4, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "calling generateSESPresentmentKey for %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v31, v29);
  }
  else
  {
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[13];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  unint64_t v10 = v0[18];
  uint64_t v11 = (void *)v0[19];
  uint64_t v12 = v0[17];
  uint64_t v30 = v0[12];
  uint64_t v13 = v0[9];
  uint64_t v27 = v0[11];
  uint64_t v28 = v0[10];
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  uint64_t v17 = v0[5];
  uint64_t v16 = v0[6];
  uint64_t v18 = (void *)swift_allocObject();
  v0[20] = v18;
  v18[2] = v16;
  v18[3] = v14;
  v18[4] = v15;
  v18[5] = v17;
  v18[6] = v13;
  v18[7] = v12;
  v18[8] = v10;
  v18[9] = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000354C(v12, v10);
  uint64_t v19 = swift_allocObject();
  v0[21] = v19;
  *(void *)(v19 + 16) = sub_10010D2D0;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 104);
  id v22 = v11;
  v21(v30, v20, v28);
  swift_retain();
  uint64_t v23 = (void *)swift_task_alloc();
  v0[22] = v23;
  uint64_t v24 = sub_100006CC8(&qword_1001C3890);
  *uint64_t v23 = v0;
  v23[1] = sub_10010630C;
  uint64_t v25 = v0[12];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v25, sub_100063E20, v19, v24);
}

uint64_t sub_10010630C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    unint64_t v6 = sub_100106530;
  }
  else
  {
    swift_release();
    *(void *)(v2 + 192) = *(void *)(v2 + 16);
    unint64_t v6 = sub_1001064A4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001064A4()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = *(_OWORD *)(v0 + 136);
  *(void *)uint64_t v2 = *(void *)(v0 + 192);
  *(_OWORD *)(v2 + 8) = v3;
  *(void *)(v2 + 24) = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100106530()
{
  uint64_t v1 = (void *)v0[19];
  sub_1000035EC(v0[17], v0[18]);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001065B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[29] = a3;
  v4[30] = v3;
  v4[27] = a1;
  v4[28] = a2;
  uint64_t v5 = type metadata accessor for CoreIDVFeatureFlag();
  v4[31] = v5;
  v4[32] = *(void *)(v5 - 8);
  v4[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[34] = v6;
  v4[35] = *(void *)(v6 - 8);
  v4[36] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[37] = v7;
  v4[38] = *(void *)(v7 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[45] = v8;
  v4[46] = *(void *)(v8 - 8);
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[51] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  v4[52] = v9;
  v4[53] = *(void *)(v9 - 8);
  v4[54] = swift_task_alloc();
  return _swift_task_switch(sub_100106880, 0, 0);
}

uint64_t sub_100106880()
{
  uint64_t v15 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  static IDCSSignposts.storagePrepareProgenitorKeyMetadata.getter();
  DIPSignpost.init(_:)();
  uint64_t v6 = (void *)swift_allocObject();
  *(void *)(v0 + 440) = v6;
  v6[2] = v3;
  v6[3] = v4;
  v6[4] = v5;
  v6[5] = v2;
  *(void *)(v0 + 448) = *(void *)(v2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 456) = v7;
  *(void *)(v7 + 16) = sub_10010D340;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 656) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  *(void *)(v0 + 464) = v9;
  *(void *)(v0 + 472) = (v1 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v15, v8, v14);
  swift_retain();
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v10;
  type metadata accessor for DCCredentialPresentmentAuthPolicy(0);
  void *v10 = v0;
  v10[1] = sub_100106A48;
  uint64_t v12 = *(void *)(v0 + 400);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 192, v12, sub_100063E20, v7, v11);
}

uint64_t sub_100106A48()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[46] + 8))(v2[50], v2[45]);
    swift_release();
    uint64_t v3 = sub_100106BCC;
  }
  else
  {
    uint64_t v4 = v2[50];
    uint64_t v5 = v2[45];
    uint64_t v6 = v2[46];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[62] = v7;
    v2[63] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    swift_release();
    swift_release();
    v2[64] = v2[24];
    uint64_t v3 = sub_100106E30;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100106BCC()
{
  swift_release();
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100106E30()
{
  uint64_t v53 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v49 = *(void *)(v0 + 304);
    uint64_t v50 = *(void *)(v0 + 296);
    uint64_t v51 = *(void *)(v0 + 352);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    id v4 = (id)DCCredentialPresentmentAuthPolicyToString();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    *(void *)(v0 + 208) = sub_10004C3A4(v5, v7, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Creating presentment key for auth policy %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v8(v51, v50);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 304);

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  *(void *)(v0 + 520) = v8;
  uint64_t v12 = *(void *)(v0 + 488);
  char v13 = sub_10010CC0C(*(void *)(v0 + 512));
  if (v12)
  {
LABEL_5:
    uint64_t v15 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 416);
    (*(void (**)(void, void, void))(*(void *)(v0 + 280) + 104))(*(void *)(v0 + 288), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 272));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  if (v13)
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    uint64_t v20 = *(unsigned int *)(v0 + 656);
    uint64_t v21 = *(void *)(v0 + 392);
    uint64_t v22 = *(void *)(v0 + 360);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v24 = swift_allocObject();
    *(void *)(v0 + 528) = v24;
    *(void *)(v24 + 16) = sub_10010D360;
    *(void *)(v24 + 24) = v23;
    swift_retain();
    v19(v21, v20, v22);
    swift_retain();
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_100107828;
    uint64_t v26 = *(void *)(v0 + 392);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 660, v26, sub_10008B610, v24, &_s7VersionON);
  }
  else
  {
    if (*(void *)(v0 + 512) != 1)
    {
      uint64_t v33 = *(void *)(v0 + 280);
      uint64_t v32 = *(void *)(v0 + 288);
      uint64_t v34 = *(void *)(v0 + 272);
      v52[0] = 0;
      v52[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v35._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      v35._object = (void *)0x8000000100181E90;
      String.append(_:)(v35);
      id v36 = (id)DCCredentialPresentmentAuthPolicyToString();
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v39 = v38;

      v40._uint64_t countAndFlagsBits = v37;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))(v32, enum case for DIPError.Code.idcsInvalidActionForPresentmentAuthPolicy(_:), v34);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      goto LABEL_5;
    }
    *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 240) + 24);
    type metadata accessor for AppleIDVManager();
    swift_retain();
    sub_10015A018((uint64_t *)(v0 + 40));
    defaultLogger()();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Credential uses anyBiometricOrPasscode policy", v29, 2u);
      swift_slowDealloc();
    }
    uint64_t v30 = *(void *)(v0 + 312);
    uint64_t v31 = *(void *)(v0 + 296);

    v8(v30, v31);
    SecAccessControlCreateFlags v41 = sub_1000A7760(0x40000001uLL, 1);
    unint64_t v43 = v42;
    swift_release();
    sub_10000B9DC(v0 + 40);
    type metadata accessor for SecAccessControl(0);
    uint64_t v44 = static SecAccessControlRef.fromData(_:)();
    sub_1000035EC(v41, v43);
    uint64_t v46 = *(void *)(v0 + 424);
    uint64_t v45 = *(void *)(v0 + 432);
    uint64_t v47 = *(void *)(v0 + 416);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void, unint64_t, uint64_t))(v0 + 8);
    return v48(0, 0xC000000000000000, v44);
  }
}

uint64_t sub_100107828()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 496))(*(void *)(v2 + 392), *(void *)(v2 + 360));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100108018;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v2 + 661) = *(unsigned char *)(v2 + 660);
    uint64_t v3 = sub_100107990;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100107990()
{
  if (!*(unsigned char *)(v0 + 661))
  {
    defaultLogger()();
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "legacy key found, migrating to v2", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
    int v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    uint64_t v17 = *(unsigned int *)(v0 + 656);
    uint64_t v18 = *(void *)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 360);
    uint64_t v20 = *(void *)(v0 + 344);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v22 = *(void *)(v0 + 232);

    v16(v20, v21);
    uint64_t v23 = swift_allocObject();
    *(void *)(v0 + 552) = v23;
    *(void *)(v23 + 16) = sub_10010D398;
    *(void *)(v23 + 24) = v22;
    swift_retain();
    v39(v18, v17, v19);
    swift_retain();
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v24;
    unint64_t v8 = sub_10010D3B4();
    void *v24 = v0;
    v24[1] = sub_10010827C;
    uint64_t v9 = *(void *)(v0 + 384);
    uint64_t v10 = sub_100063E20;
    uint64_t v11 = v0 + 200;
    uint64_t v12 = v23;
    goto LABEL_7;
  }
  if (*(unsigned char *)(v0 + 661) == 1)
  {
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    uint64_t v2 = *(unsigned int *)(v0 + 656);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 360);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = swift_allocObject();
    *(void *)(v0 + 632) = v6;
    *(void *)(v6 + 16) = sub_10010D37C;
    *(void *)(v6 + 24) = v5;
    swift_retain();
    v1(v3, v2, v4);
    swift_retain();
    unint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v7;
    unint64_t v8 = sub_100006CC8(&qword_1001C3898);
    *unint64_t v7 = v0;
    v7[1] = sub_100109004;
    uint64_t v9 = *(void *)(v0 + 376);
    uint64_t v10 = sub_10004A390;
    uint64_t v11 = v0 + 144;
    uint64_t v12 = v6;
LABEL_7:
    return NSManagedObjectContext.perform<A>(schedule:_:)(v11, v9, v10, v12, v8);
  }
  defaultLogger()();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid key type", v27, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
  uint64_t v29 = *(void *)(v0 + 320);
  uint64_t v30 = *(void *)(v0 + 296);
  uint64_t v32 = *(void *)(v0 + 280);
  uint64_t v31 = *(void *)(v0 + 288);
  uint64_t v33 = *(void *)(v0 + 272);

  v28(v29, v30);
  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.idcsInvalidKeyVersion(_:), v33);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v34 = *(void *)(v0 + 424);
  uint64_t v35 = *(void *)(v0 + 432);
  uint64_t v38 = *(void *)(v0 + 416);
  (*(void (**)(void, void, void))(*(void *)(v0 + 280) + 104))(*(void *)(v0 + 288), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 272));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v38);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_100108018()
{
  swift_release();
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10010827C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 496))(*(void *)(v2 + 384), *(void *)(v2 + 360));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100108764;
  }
  else
  {
    swift_release();
    *(void *)(v2 + 576) = *(void *)(v2 + 200);
    uint64_t v3 = sub_1001083E4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001083E4()
{
  uint64_t v1 = (void *)v0[72];
  uint64_t v2 = v0[71];
  id v3 = [v1 aclData];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v7 = sub_1000C590C(v4, v6, (uint64_t)[v1 aclType]);
  uint64_t v9 = v8;
  uint64_t v10 = v2;
  v0[73] = v7;
  v0[74] = v8;
  uint64_t v11 = (void *)v0[72];
  sub_1000035EC(v4, v6);
  if (v10)
  {

    uint64_t v13 = v0[53];
    uint64_t v12 = v0[54];
    uint64_t v14 = v0[52];
    (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    id v17 = [v11 aclType];
    uint64_t v18 = (void *)swift_task_alloc();
    v0[75] = v18;
    void *v18 = v0;
    v18[1] = sub_1001089C8;
    uint64_t v19 = v0[29];
    return sub_1000C282C(v7, v9, (uint64_t)v17, v19, 0);
  }
}

uint64_t sub_100108764()
{
  swift_release();
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001089C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[76] = a1;
  v4[77] = a2;
  v4[78] = v2;
  swift_task_dealloc();
  if (v2) {
    unint64_t v5 = sub_100109C60;
  }
  else {
    unint64_t v5 = sub_100108AE4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100108AE4()
{
  if (v0[77] >> 60 == 15)
  {
    unint64_t v1 = v0[74];
    uint64_t v2 = v0[73];
    uint64_t v3 = (void *)v0[72];
    (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.progenitorKeyAttestationUnavailable(_:), v0[34]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v4 = v2;
LABEL_5:
    sub_1000035EC(v4, v1);

    uint64_t v9 = v0[53];
    uint64_t v8 = v0[54];
    uint64_t v17 = v0[52];
    (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  uint64_t v5 = v0[78];
  type metadata accessor for SecAccessControl(0);
  uint64_t v6 = static SecAccessControlRef.fromData(_:)();
  if (v5)
  {
    unint64_t v1 = v0[74];
    uint64_t v7 = v0[73];
    uint64_t v3 = (void *)v0[72];
    sub_100009764(v0[76], v0[77]);
    uint64_t v4 = v7;
    goto LABEL_5;
  }
  uint64_t v20 = v6;
  uint64_t v12 = (void *)v0[72];
  sub_1000035EC(v0[73], v0[74]);

  uint64_t v19 = v0[77];
  uint64_t v18 = v0[76];
  uint64_t v14 = v0[53];
  uint64_t v13 = v0[54];
  uint64_t v15 = v0[52];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v16(v18, v19, v20);
}

uint64_t sub_100109004()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 648) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 496))(*(void *)(v2 + 376), *(void *)(v2 + 360));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1001099FC;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1001091B0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001091B0()
{
  uint64_t v1 = v0[81];
  uint64_t v3 = v0[20];
  unint64_t v2 = v0[21];
  uint64_t v5 = v0[22];
  unint64_t v4 = v0[23];
  uint64_t v6 = sub_1001432CC(v0[18], v0[19], v3, v2, v5, v4);
  if (v1)
  {
    sub_100009764(v5, v4);
    sub_1000035EC(v3, v2);
    swift_bridgeObjectRelease();
    uint64_t v9 = v0[53];
    uint64_t v8 = v0[54];
    uint64_t v10 = v0[52];
    (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v42 = v7;
    uint64_t v38 = v3;
    unint64_t v39 = v2;
    uint64_t v40 = sub_100143294(v7);
    uint64_t v41 = v13;
    uint64_t v15 = v0[32];
    uint64_t v14 = v0[33];
    uint64_t v16 = v0[31];
    sub_100014D14((void *)(v0[30] + 120), *(void *)(v0[30] + 144));
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for CoreIDVFeatureFlag.bbkc(_:), v16);
    char v17 = dispatch thunk of FeatureFlagProviding.isEnabled(_:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    if (v17)
    {
      defaultLogger()();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "BBKC is enabled; using key chaining for presentment key ACL",
          v20,
          2u);
        swift_slowDealloc();
      }
      uint64_t v21 = (void (*)(uint64_t, uint64_t))v0[65];
      uint64_t v22 = v0[42];
      uint64_t v23 = v0[37];
      uint64_t v24 = v0[30];

      v21(v22, v23);
      v0[12] = *(void *)(v24 + 24);
      type metadata accessor for AppleIDVManager();
      swift_retain();
      sub_10015A018(v0 + 13);
      uint64_t v25 = *(void *)(v42 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
      unint64_t v26 = *(void *)(v42 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
      sub_10000354C(v25, v26);
      uint64_t v37 = (uint64_t)sub_1000A7ADC(v25, v26);
      swift_release();
      sub_10000B9DC((uint64_t)(v0 + 13));
      sub_100009764(v5, v4);
      sub_1000035EC(v38, v2);
      swift_release();
      sub_1000035EC(v25, v26);
    }
    else
    {
      defaultLogger()();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "BBKC is not enabled; presentment key ACL matches progenitor key ACL",
          v29,
          2u);
        swift_slowDealloc();
      }
      uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[65];
      uint64_t v31 = v0[41];
      uint64_t v32 = v0[37];

      v30(v31, v32);
      uint64_t v37 = sub_100146334();
      sub_100009764(v5, v4);
      sub_1000035EC(v38, v39);
      swift_release();
    }
    uint64_t v34 = v0[53];
    uint64_t v33 = v0[54];
    uint64_t v35 = v0[52];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v36(v40, v41, v37);
  }
}

uint64_t sub_1001099FC()
{
  swift_release();
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100109C60()
{
  uint64_t v1 = (void *)v0[72];
  sub_1000035EC(v0[73], v0[74]);

  uint64_t v3 = v0[53];
  uint64_t v2 = v0[54];
  uint64_t v4 = v0[52];
  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_100109ED0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = v9;
  uint64_t v65 = a8;
  uint64_t v58 = a6;
  uint64_t v66 = a5;
  v54[0] = a9;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v54 - v20;
  uint64_t v22 = a2;
  uint64_t v23 = a4;
  id v24 = sub_1000075AC(v22, a3);
  if (!v9)
  {
    NSData v64 = v21;
    uint64_t v59 = v19;
    uint64_t v61 = v16;
    uint64_t v63 = a1;
    if (v66 < 1)
    {
LABEL_24:
      __break(1u);
    }
    else
    {
      NSString v67 = (void (**)(char *, uint64_t))(v69 + 8);
      uint64_t v56 = v71;
      unint64_t v26 = _swiftEmptyArrayStorage;
      uint64_t v27 = 1;
      *(void *)&long long v25 = 134218242;
      long long v55 = v25;
      v54[1] = (char *)&type metadata for Any + 8;
      NSData v60 = (void *)0x8000000100181E30;
      os_log_type_t v28 = v64;
      id v62 = v24;
      uint64_t v57 = a7;
      while (1)
      {
        sub_10010A458(v24, v23, v71);
        if (v10) {
          goto LABEL_21;
        }
        uint64_t v69 = 0;
        defaultLogger()();
        sub_10010D0CC(v71);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        BOOL v31 = os_log_type_enabled(v29, v30);
        uint64_t v68 = v27;
        if (v31)
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v73 = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = v55;
          uint64_t v70 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v32 + 12) = 2080;
          uint64_t v33 = v23;
          uint64_t v34 = v26;
          unint64_t v36 = *((void *)&v71[0] + 1);
          uint64_t v35 = *(void *)&v71[0];
          swift_bridgeObjectRetain();
          uint64_t v70 = sub_10004C3A4(v35, v36, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v26 = v34;
          uint64_t v23 = v33;
          swift_bridgeObjectRelease();
          sub_10010D1E0(v71);
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%ld] created a new presentment key with identifier %s", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          os_log_type_t v28 = v64;
          swift_slowDealloc();
        }
        else
        {
          sub_10010D1E0(v71);
        }

        uint64_t v37 = *v67;
        uint64_t v38 = v61;
        (*v67)(v28, v61);
        sub_10010D0CC(v71);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v26 = sub_1000D12B8(0, v26[2] + 1, 1, v26);
        }
        unint64_t v40 = v26[2];
        unint64_t v39 = v26[3];
        if (v40 >= v39 >> 1) {
          unint64_t v26 = sub_1000D12B8((void *)(v39 > 1), v40 + 1, 1, v26);
        }
        v26[2] = v40 + 1;
        uint64_t v41 = &v26[11 * v40];
        long long v42 = v71[1];
        *((_OWORD *)v41 + 2) = v71[0];
        *((_OWORD *)v41 + 3) = v42;
        long long v43 = v71[2];
        long long v44 = v71[3];
        long long v45 = v71[4];
        v41[14] = v72;
        *((_OWORD *)v41 + 5) = v44;
        *((_OWORD *)v41 + 6) = v45;
        *((_OWORD *)v41 + 4) = v43;
        id v46 = [self standardUserDefaults];
        v47._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        v47._object = v60;
        Swift::Bool v48 = NSUserDefaults.internalBool(forKey:)(v47);

        if (v48)
        {
          uint64_t v49 = v59;
          defaultLogger()();
          uint64_t v50 = Logger.logObject.getter();
          os_log_type_t v51 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v52 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v52 = 0;
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "Sleeping after generating presentment key due to user defaults setting", v52, 2u);
            uint64_t v49 = v59;
            swift_slowDealloc();
          }

          v37(v49, v38);
          [self sleepForTimeInterval:5.0];
          os_log_type_t v28 = v64;
        }
        sub_10010D1E0(v71);
        if (v66 == v68) {
          break;
        }
        uint64_t v27 = v68 + 1;
        uint64_t v10 = v69;
        id v24 = v62;
        if (__OFADD__(v68, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
      }
      uint64_t v53 = v69;
      sub_100007290();
      if (v53)
      {
LABEL_21:

        swift_bridgeObjectRelease();
        return;
      }

      *(void *)v54[0] = v26;
    }
  }
}

uint64_t sub_10010A458@<X0>(void *a1@<X0>, uint64_t a2@<X4>, void *a3@<X8>)
{
  id v46 = a1;
  uint64_t v47 = a2;
  uint64_t v5 = type metadata accessor for COSEKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v9 - 8);
  uint64_t v48 = type metadata accessor for DIPSignpost();
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.storageGenerateSESPresentmentKey.getter();
  DIPSignpost.init(_:)();
  uint64_t v12 = sub_100144CA8();
  if (v3)
  {
    uint64_t v21 = v48;
    uint64_t v22 = v49;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v21);
  }
  else
  {
    uint64_t v13 = v12;
    uint64_t v14 = v47;
    uint64_t v44 = v6;
    long long v45 = v8;
    long long v42 = a3;
    uint64_t v43 = v5;
    uint64_t v15 = (void *)sub_10014504C(v12);
    uint64_t v17 = v16;
    type metadata accessor for StoredCryptoKey();
    id v18 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v14 + 16)];
    sub_1000FA490(v13);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v18 setAttestation:isa];

    [v46 addCryptoKeysObject:v18];
    type metadata accessor for CBOREncoder();
    swift_allocObject();
    CBOREncoder.init()();
    uint64_t v20 = (uint64_t)v45;
    sub_10006AA9C((uint64_t)v45);
    id v46 = v15;
    uint64_t v47 = v17;
    sub_100056460((unint64_t *)&unk_1001C0BD0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
    uint64_t v23 = v43;
    uint64_t v24 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    uint64_t v25 = v49;
    unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    uint64_t v41 = v24;
    long long v45 = (char *)v27;
    v26(v20, v23);

    swift_release();
    uint64_t v28 = *(void *)(v13 + 16);
    uint64_t v43 = *(void *)(v13 + 24);
    uint64_t v44 = v28;
    uint64_t v29 = *(void *)(v13 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
    unint64_t v40 = *(void *)(v13 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey + 8);
    unint64_t v30 = v40;
    uint64_t v32 = *(void *)(v13 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
    unint64_t v31 = *(void *)(v13 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier + 8);
    swift_bridgeObjectRetain();
    sub_10000354C(v29, v30);
    sub_10000354C(v32, v31);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v11, v48);
    uint64_t v34 = v42;
    uint64_t v35 = v43;
    *long long v42 = v44;
    v34[1] = v35;
    unint64_t v36 = v40;
    v34[2] = v29;
    v34[3] = v36;
    v34[4] = v32;
    v34[5] = v31;
    uint64_t v37 = (uint64_t)v45;
    v34[6] = v41;
    v34[7] = v37;
    uint64_t v38 = v47;
    v34[8] = v46;
    v34[9] = v38;
    v34[10] = v13;
  }
  return result;
}

void sub_10010A8C8(uint64_t a1@<X2>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1000075AC(a1, a2);
  if (!v3)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (unint64_t)sub_1000F5DBC();
    unint64_t v8 = v7;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v8 & 0xC000000000000001) != 0)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v9 = *(id *)(v8 + 32);
      }
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      id v11 = [v10 identifier];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        id v16 = [v10 publicKeyIdentifier];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          *a3 = v13;
          a3[1] = v15;
          a3[2] = v18;
          a3[3] = v20;
          return;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
      }
      goto LABEL_14;
    }

    swift_bridgeObjectRelease();
LABEL_14:
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
}

unint64_t sub_10010AA70(uint64_t *a1)
{
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x2063696C62757020;
  v5._object = (void *)0xED0000203A79656BLL;
  String.append(_:)(v5);
  Swift::String v6 = Data.base16EncodedString()();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

unint64_t sub_10010AB44(uint64_t *a1)
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0xD000000000000015;
  v5._object = (void *)0x8000000100181E10;
  String.append(_:)(v5);
  Swift::String v6 = Data.base16EncodedString()();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

unint64_t sub_10010AC18(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  uint64_t v6 = *a1;
  Swift::String v5 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100181DF0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  if (a3 >> 60 == 15)
  {
    object = (void *)0xE500000000000000;
    uint64_t countAndFlagsBits = 0x3E6C696E3CLL;
  }
  else
  {
    Swift::String v11 = Data.base16EncodedString()();
    uint64_t countAndFlagsBits = v11._countAndFlagsBits;
    object = v11._object;
  }
  uint64_t v12 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

void sub_10010AD1C(uint64_t a1@<X1>, void *a2@<X2>, unint64_t *a3@<X8>)
{
  Swift::String v5 = sub_1000075AC(a1, a2);
  if (!v3)
  {
    uint64_t v6 = v5;
    id v7 = [v5 options];
    if (v7)
    {
      id v8 = v7;
      unint64_t v9 = (unint64_t)[v7 presentmentAuthPolicy];
      if ((v9 & 0x8000000000000000) != 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      unint64_t v10 = v9;

      uint64_t v6 = v8;
    }
    else
    {
      unint64_t v10 = 0;
    }

    *a3 = v10;
  }
}

void sub_10010AE08(char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (!v1)
  {
    id v8 = v7;
    if (v7)
    {
      unsigned int v9 = [v7 version];

      if (v9 == 2) {
        char v10 = 1;
      }
      else {
        char v10 = 2;
      }
      if (v9 == 1) {
        char v10 = 0;
      }
      *a1 = v10;
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

void sub_10010B038(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (!v1)
  {
    id v8 = v7;
    if (v7)
    {
      id v9 = [v7 encryptedACL];
      if (v9)
      {
        char v10 = v9;
        uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v13 = v12;

        unint64_t v14 = (unint64_t)[v8 aclType];
        if ((v14 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        else
        {
          unint64_t v15 = v14;
          type metadata accessor for AppleIDVManager();
          sub_10015A018(v22);
          sub_100014D14(v22, v22[3]);
          uint64_t v16 = dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)();
          unint64_t v18 = v17;
          id v23 = objc_allocWithZone((Class)DCCredentialAuthACL);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          id v20 = [v23 initWithData:isa type:v15];
          sub_1000035EC(v16, v18);

          sub_10000B9DC((uint64_t)v22);
          sub_1000035EC(v11, v13);
          *a1 = v20;
        }
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

void sub_10010B4BC(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  if (v1) {
    return;
  }
  id v8 = v7;
  if (!v7)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  id v9 = [v7 progenitorKey];
  if (!v9)
  {
LABEL_11:
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingProgenitorKeyFromACL(_:), v3);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return;
  }
  char v10 = v9;
  id v11 = [v9 identifier];
  if (!v11)
  {

    goto LABEL_11;
  }
  unint64_t v12 = v11;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v13;

  id v14 = [v10 keyBlob];
  if (!v14)
  {

    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  unint64_t v15 = v14;
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  uint64_t v19 = v27;
  *a1 = v26;
  a1[1] = v19;
  a1[2] = v16;
  a1[3] = v18;
  sub_10000354C(v16, v18);
  id v20 = [v10 publicKeyIdentifier];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    sub_1000035EC(v16, v18);
  }
  else
  {

    sub_1000035EC(v16, v18);
    uint64_t v22 = 0;
    unint64_t v24 = 0xF000000000000000;
  }

  a1[4] = v22;
  a1[5] = v24;
}

uint64_t sub_10010B8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10010B9A8, 0, 0);
}

uint64_t sub_10010B9A8()
{
  unint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)swift_allocObject();
  v0[10] = v6;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = v5;
  v6[6] = v4;
  sub_10000354C(v3, v1);
  uint64_t v7 = swift_allocObject();
  v0[11] = v7;
  *(void *)(v7 + 16) = sub_10010CBB0;
  *(void *)(v7 + 24) = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[12] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10010BB08;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_10010BB08()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10010BC2C;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000BBD1C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010BC2C()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10010BDB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for DIPError.Code();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v32 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_10000C438();
  if (!v6)
  {
    uint64_t v29 = a1;
    uint64_t v16 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
    if (v16)
    {
      unint64_t v30 = 0;
      unint64_t v31 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v30 = 0xD000000000000016;
      unint64_t v31 = 0x8000000100181C80;
      Swift::String v17 = Data.base16EncodedString()();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 0x79646165726C6120;
      v18._object = (void *)0xEF73747369786520;
      String.append(_:)(v18);
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v32, enum case for DIPError.Code.idcsPublicKeyIdentifierAlreadyExists(_:), v12);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    uint64_t v19 = sub_1000075AC(a5, a6);
    unint64_t v20 = (unint64_t)sub_1000F58F8();
    if (v20 >> 62) {
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v21 > 1)
    {
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v32, enum case for DIPError.Code.featureNotSupported(_:), v12);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      return;
    }
    uint64_t v22 = sub_1001490C4(a2, a3);
    type metadata accessor for StoredCryptoKey();
    id v23 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v29 + 16)];
    sub_1000FBBB4(v22);
    unint64_t v24 = (unint64_t)sub_1000F58F8();
    unint64_t v25 = v24;
    if (v24 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_9;
      }
    }
    else if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_9:
      if ((v25 & 0xC000000000000001) != 0)
      {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v26 = *(id *)(v25 + 32);
      }
      uint64_t v27 = v26;
      goto LABEL_17;
    }
    uint64_t v27 = 0;
LABEL_17:
    swift_bridgeObjectRelease();
    [v23 setPayload:v27];

    [v19 addCryptoKeysObject:v23];
    sub_100007290();

    swift_release();
  }
}

uint64_t sub_10010C2B8(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10010C37C, 0, 0);
}

uint64_t sub_10010C37C()
{
  unint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_allocObject();
  v0[10] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  sub_10000354C(v3, v2);
  uint64_t v5 = swift_allocObject();
  v0[11] = v5;
  *(void *)(v5 + 16) = sub_10010CB04;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[12] = v6;
  uint64_t v7 = sub_100006CC8(&qword_1001C0860);
  *uint64_t v6 = v0;
  v6[1] = sub_10010C4D4;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044D90, v5, v7);
}

uint64_t sub_10010C4D4()
{
  unint64_t v2 = (void *)*v1;
  v2[13] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10010C640, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v4 = v2[2];
    uint64_t v3 = v2[3];
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v2[1];
    return v5(v4, v3);
  }
}

uint64_t sub_10010C640()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10010C7CC(uint64_t a1@<X1>, unint64_t a2@<X2>, char *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)sub_10000C438();
  if (!v4)
  {
    uint64_t v26 = a1;
    uint64_t v27 = v9;
    if (v12[2])
    {
      uint64_t v14 = v12[4];
      uint64_t v13 = (void *)v12[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();

      *a4 = v14;
      a4[1] = (uint64_t)v13;
    }
    else
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      unint64_t v15 = a2;
      uint64_t v16 = v26;
      sub_10000354C(v26, v15);
      sub_10000354C(v16, v15);
      Swift::String v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_t v24 = v17;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v25 = v8;
        unint64_t v20 = (uint8_t *)v19;
        uint64_t v30 = swift_slowAlloc();
        uint64_t v28 = v11;
        *(_DWORD *)unint64_t v20 = 136315138;
        v23[1] = v20 + 4;
        Swift::String v21 = Data.base16EncodedString()();
        uint64_t v29 = sub_10004C3A4(v21._countAndFlagsBits, (unint64_t)v21._object, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000035EC(v16, v15);
        sub_1000035EC(v16, v15);
        os_log_t v22 = v24;
        _os_log_impl((void *)&_mh_execute_header, v24, v18, "No credentials found with public key identifier %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v25);
      }
      else
      {
        sub_1000035EC(v16, v15);
        sub_1000035EC(v16, v15);

        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v8);
      }
      *a4 = 0;
      a4[1] = 0;
    }
  }
}

uint64_t sub_10010CAC4()
{
  sub_1000035EC(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10010CB04(uint64_t *a1@<X8>)
{
  sub_10010C7CC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), a1);
}

void *sub_10010CB24@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10010CB68()
{
  sub_1000035EC(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10010CBB0(uint64_t a1)
{
  sub_10010BDB8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_10010CBD4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010CC0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 1)
  {
    char v6 = 0;
  }
  else if (a1 == 2)
  {
    char v6 = 1;
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v7._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
    v7._object = (void *)0x8000000100181E90;
    String.append(_:)(v7);
    id v8 = (id)DCCredentialPresentmentAuthPolicyToString();
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = v10;

    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsInvalidActionForPresentmentAuthPolicy(_:), v2);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v6 & 1;
}

uint64_t sub_10010CE58()
{
  return sub_10010CFF8(48);
}

uint64_t sub_10010CE60(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_100007458;
  return sub_100105D14(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_10010CF28(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C3860 + dword_1001C3860);
  return v8(a1, a2, v6);
}

uint64_t sub_10010CFF0()
{
  return sub_10010CFF8(40);
}

uint64_t sub_10010CFF8(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_10010D044(uint64_t *a1@<X8>)
{
  sub_10010A8C8(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_10010D064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C3880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_10010D0CC(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  swift_bridgeObjectRetain();
  sub_10000354C(v2, v3);
  sub_10000354C(v4, v5);
  sub_10000354C(v6, v7);
  sub_10000354C(v8, v9);
  swift_retain();
  return a1;
}

uint64_t sub_10010D164(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C3880);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10010D1C4()
{
  return sub_10010AA70(*(uint64_t **)(v0 + 16));
}

unint64_t sub_10010D1CC()
{
  return sub_10010AB44(*(uint64_t **)(v0 + 16));
}

unint64_t sub_10010D1D4()
{
  return sub_10010AC18(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void *sub_10010D1E0(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v3);
  sub_1000035EC(v4, v5);
  sub_1000035EC(v6, v7);
  sub_1000035EC(v8, v9);
  swift_release();
  return a1;
}

uint64_t sub_10010D278()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000035EC(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocObject(v0, 80, 7);
}

void sub_10010D2D0(uint64_t a1@<X8>)
{
  sub_100109ED0(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), a1);
}

uint64_t sub_10010D2F8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10010D340(unint64_t *a1@<X8>)
{
  sub_10010AD1C(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_10010D360(char *a1@<X8>)
{
}

void sub_10010D37C(uint64_t *a1@<X8>)
{
}

void sub_10010D398(void *a1@<X8>)
{
}

unint64_t sub_10010D3B4()
{
  unint64_t result = qword_1001C38A0;
  if (!qword_1001C38A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1001C38A0);
  }
  return result;
}

uint64_t destroy for KeyLookupInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);

  return sub_1000035EC(v2, v3);
}

void *initializeWithCopy for KeyLookupInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  sub_10000354C(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

void *assignWithCopy for KeyLookupInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[2];
  unint64_t v4 = a2[3];
  sub_10000354C(v5, v4);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v5;
  a1[3] = v4;
  sub_1000035EC(v6, v7);
  return a1;
}

void *assignWithTake for KeyLookupInfo(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1000035EC(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyLookupInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyLookupInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s7KSKInfoVMa()
{
  return &_s7KSKInfoVN;
}

void destroy for ProgenitorKeyMetadata(uint64_t *a1)
{
  sub_1000035EC(*a1, a1[1]);
  unint64_t v2 = (void *)a1[2];
}

uint64_t *_s7idcredd21ProgenitorKeyMetadataVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000354C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  unint64_t v6 = (void *)a2[2];
  a1[2] = (uint64_t)v6;
  id v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for ProgenitorKeyMetadata(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000354C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000035EC(v6, v7);
  uint64_t v8 = (void *)a2[2];
  unint64_t v9 = (void *)a1[2];
  a1[2] = (uint64_t)v8;
  id v10 = v8;

  return a1;
}

uint64_t *assignWithTake for ProgenitorKeyMetadata(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000035EC(v4, v5);
  uint64_t v6 = (void *)a1[2];
  a1[2] = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for ProgenitorKeyMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProgenitorKeyMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProgenitorKeyMetadata()
{
  return &type metadata for ProgenitorKeyMetadata;
}

uint64_t destroy for PresentmentKeyMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1000035EC(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_1000035EC(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_1000035EC(*(void *)(a1 + 48), *(void *)(a1 + 56));
  sub_1000035EC(*(void *)(a1 + 64), *(void *)(a1 + 72));

  return swift_release();
}

void *initializeWithCopy for PresentmentKeyMetadata(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_10000354C(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  sub_10000354C(v7, v8);
  a1[4] = v7;
  a1[5] = v8;
  uint64_t v9 = a2[6];
  unint64_t v10 = a2[7];
  sub_10000354C(v9, v10);
  a1[6] = v9;
  a1[7] = v10;
  uint64_t v11 = a2[8];
  unint64_t v12 = a2[9];
  sub_10000354C(v11, v12);
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = a2[10];
  swift_retain();
  return a1;
}

void *assignWithCopy for PresentmentKeyMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  sub_10000354C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  sub_1000035EC(v6, v7);
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_10000354C(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  a1[4] = v8;
  a1[5] = v9;
  sub_1000035EC(v10, v11);
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_10000354C(v12, v13);
  uint64_t v14 = a1[6];
  unint64_t v15 = a1[7];
  a1[6] = v12;
  a1[7] = v13;
  sub_1000035EC(v14, v15);
  uint64_t v16 = a2[8];
  unint64_t v17 = a2[9];
  sub_10000354C(v16, v17);
  uint64_t v18 = a1[8];
  unint64_t v19 = a1[9];
  a1[8] = v16;
  a1[9] = v17;
  sub_1000035EC(v18, v19);
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for PresentmentKeyMetadata(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void *assignWithTake for PresentmentKeyMetadata(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1000035EC(v5, v6);
  uint64_t v7 = a1[4];
  unint64_t v8 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_1000035EC(v7, v8);
  uint64_t v9 = a1[6];
  unint64_t v10 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_1000035EC(v9, v10);
  uint64_t v11 = a1[8];
  unint64_t v12 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_1000035EC(v11, v12);
  a1[10] = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentKeyMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentKeyMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentKeyMetadata()
{
  return &type metadata for PresentmentKeyMetadata;
}

uint64_t sub_10010DAE4()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C14B8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000912D4(v0, qword_1001C38B0);
  uint64_t v6 = sub_100091338(v0, (uint64_t)qword_1001C38B0);
  type metadata accessor for AsyncCoreDataStore();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v8 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 URLForResource:v9 withExtension:v10];

  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v12(v5, v3, v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v5, 0, 1, v0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v5, 1, v0);
    if (result != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v12)(v6, v5, v0);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v5, 1, 1, v0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10010DD50(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v26 = type metadata accessor for AsyncCoreDataStore.StoreType();
  uint64_t v1 = *(void *)(v26 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  id v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v24 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v24 - v12;
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  URL.appendingPathComponent(_:)();
  uint64_t v27 = v14;
  v14(v11, v4);
  if (qword_1001C0410 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_100091338(v4, (uint64_t)qword_1001C38B0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v11, v15, v4);
  v16(v8, (uint64_t)v13, v4);
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  uint64_t v18 = v3;
  uint64_t v25 = v13;
  uint64_t v19 = v28;
  uint64_t v20 = v26;
  v17(v18, v28, v26);
  type metadata accessor for AsyncCoreDataStore();
  swift_allocObject();
  Swift::String v21 = NSURLFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v22 = AsyncCoreDataStore.init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v20);
  v27(v25, v4);
  uint64_t result = v29;
  *(void *)(v29 + 16) = v22;
  return result;
}

uint64_t type metadata accessor for IDCSCoreDataStore()
{
  return self;
}

uint64_t destroy for JapanNationalIDRequestValidator()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for JapanNationalIDRequestValidator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JapanNationalIDRequestValidator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for JapanNationalIDRequestValidator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for JapanNationalIDRequestValidator()
{
  return &type metadata for JapanNationalIDRequestValidator;
}

uint64_t sub_10010E1E8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v42 = v9;
  uint64_t v43 = v8;
  uint64_t v41 = v12;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    unint64_t v40 = (void (*)(void, void))swift_slowAlloc();
    long long v45 = v40;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_10004C3A4(a1, a2, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Validating doctype %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v40 = *(void (**)(void, void))(v42 + 8);
    v40(v14, v43);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unint64_t v40 = *(void (**)(void, void))(v9 + 8);
    v40(v14, v8);
  }
  uint64_t v19 = a3 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & *(void *)(a3 + 64);
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  if (!v22) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v26 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (unint64_t i = v26 | (v25 << 6); ; unint64_t i = __clz(__rbit64(v29)) + (v25 << 6))
  {
    unint64_t v31 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v33 = *v31;
    unint64_t v32 = v31[1];
    uint64_t v34 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v35 = sub_10010EADC(v33, v32, v34, a4);
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0) {
      break;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }
    if (v28 >= v23) {
      goto LABEL_27;
    }
    unint64_t v29 = *(void *)(v19 + 8 * v28);
    ++v25;
    if (!v29)
    {
      int64_t v25 = v28 + 1;
      if (v28 + 1 >= v23) {
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v19 + 8 * v25);
      if (!v29)
      {
        int64_t v25 = v28 + 2;
        if (v28 + 2 >= v23) {
          goto LABEL_27;
        }
        unint64_t v29 = *(void *)(v19 + 8 * v25);
        if (!v29)
        {
          int64_t v30 = v28 + 3;
          if (v30 >= v23)
          {
LABEL_27:
            swift_release();
            return 1;
          }
          unint64_t v29 = *(void *)(v19 + 8 * v30);
          if (!v29)
          {
            while (1)
            {
              int64_t v25 = v30 + 1;
              if (__OFADD__(v30, 1)) {
                goto LABEL_31;
              }
              if (v25 >= v23) {
                goto LABEL_27;
              }
              unint64_t v29 = *(void *)(v19 + 8 * v25);
              ++v30;
              if (v29) {
                goto LABEL_21;
              }
            }
          }
          int64_t v25 = v30;
        }
      }
    }
LABEL_21:
    unint64_t v22 = (v29 - 1) & v29;
  }
  unint64_t v36 = v41;
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    long long v45 = (void (*)(void, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_10004C3A4(v33, v32, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Validation for namespace %s has failed", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v40(v36, v43);
  swift_release();
  return 0;
}

uint64_t sub_10010E704()
{
  return sub_10010E1E8(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10010E710(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ISO23220_1_Japan_ElementIdentifier.individualNumber(_:), v8);
  swift_bridgeObjectRetain();
  uint64_t v12 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  sub_10013C484(v12, v14);
  char v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    return 1;
  }
  defaultLogger()();
  BOOL v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    int v28 = v19;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v32 = v27;
    *(_DWORD *)uint64_t v20 = 136315138;
    v26[1] = v20 + 4;
    uint64_t v21 = v29;
    (*(void (**)(char *, void, uint64_t))(v29 + 104))(v4, enum case for ISO18013KnownNamespaces.iso23220_1_jp(_:), v2);
    uint64_t v22 = ISO18013KnownNamespaces.rawValue.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
    uint64_t v31 = sub_10004C3A4(v22, v24, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v28, "Unauthorized reader requested restricted element in %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  return 0;
}

uint64_t sub_10010EADC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for ISO18013KnownNamespaces.iso23220_1_jp(_:), v10);
  uint64_t v14 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v14 == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease();
    if (a4)
    {
      char v19 = 1;
      return v19 & 1;
    }
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v19 = 1;
    if ((v18 & 1) == 0 || a4) {
      return v19 & 1;
    }
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_10004C3A4(a1, a2, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Validating %s for physical presentments", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  char v19 = sub_10010E710(v25);
  return v19 & 1;
}

uint64_t sub_10010EE14(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010EE78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

char *sub_10010EF40(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_allocWithZone((Class)NSXPCListener);
  uint64_t v8 = v1;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v7 initWithMachServiceName:v9];

  *(void *)&v8[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_xpcListener] = v10;
  *(void *)&v8[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_dataContainer] = a1;
  swift_retain();

  uint64_t v11 = (objc_class *)type metadata accessor for CredentialStoreListener();
  v19.receiver = v8;
  v19.super_class = v11;
  BOOL v12 = [(char *)[super init];
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_xpcListener];
  uint64_t v14 = v12;
  [v13 setDelegate:v14];
  [v13 resume];
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    BOOL v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Credential store listener is started", v17, 2u);
    swift_slowDealloc();
  }
  swift_release();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

id sub_10010F15C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  BOOL v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Credential store listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_xpcListener] invalidate];
  NSString v9 = (objc_class *)type metadata accessor for CredentialStoreListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10010F344()
{
  return sub_10010F35C("credential store connection invalidated");
}

uint64_t sub_10010F350()
{
  return sub_10010F35C("credential store connection interrupted");
}

uint64_t sub_10010F35C(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  BOOL v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for CredentialStoreListener()
{
  return self;
}

id sub_10010F54C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  BOOL v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying CredentialStoreSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  NSString v9 = (objc_class *)type metadata accessor for CredentialStoreSessionProxy();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10010F7E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_10010F91C, 0, 0);
}

uint64_t sub_10010F91C()
{
  os_log_type_t v38 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy createCredential", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  os_log_type_t v7 = (void *)v0[6];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v8;
  v0[17] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  defaultLogger()();
  id v9 = v7;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  objc_super v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v33 = v12;
    uint64_t v13 = v0[4];
    unint64_t v14 = v0[5];
    uint64_t v35 = v0[6];
    uint64_t v15 = swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v13, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    if (v35)
    {
      id v16 = [v10 description];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE500000000000000;
      uint64_t v17 = 0x3E6C696E3CLL;
    }
    os_log_type_t v22 = v33;
    uint64_t v34 = v0[11];
    uint64_t v36 = v0[14];
    v0[3] = sub_10004C3A4(v17, v19, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v11, v22, "create credential options: partition = %s, options = (%s)", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v8(v36, v34);
  }
  else
  {
    uint64_t v20 = v0[14];
    uint64_t v21 = v0[11];
    swift_bridgeObjectRelease_n();

    v8(v20, v21);
  }
  sub_100124294();
  uint64_t v28 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[18] = v28;
  if (v28)
  {
    swift_retain();
    uint64_t v29 = (void *)swift_task_alloc();
    v0[19] = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_10010FEC0;
    uint64_t v30 = v0[5];
    uint64_t v31 = v0[6];
    uint64_t v32 = v0[4];
    return sub_1000AC894(v32, v30, v31);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v23 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v24 = v0[13];
    uint64_t v25 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v23(v24, v25);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_10010FEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 160) = v2;
  swift_task_dealloc();
  if (v2)
  {
    os_log_type_t v7 = sub_100110090;
  }
  else
  {
    *(void *)(v6 + 168) = a2;
    *(void *)(v6 + 176) = a1;
    os_log_type_t v7 = sub_10010FFF4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10010FFF4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  return v1(v2, v3);
}

uint64_t sub_100110090()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100110368(int a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  id v10 = a2;
  a4;
  objc_super v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *objc_super v11 = v4;
  v11[1] = sub_100110450;
  return sub_10010F7E0(v7, v9, (uint64_t)a2);
}

uint64_t sub_100110450()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 24);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v7 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v8 = 0;
    uint64_t v9 = (void *)v7;
  }
  else
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v9 = v8;
  }
  id v10 = *(void (***)(void, void, void))(v3 + 32);
  ((void (**)(void, NSString, uint64_t))v10)[2](v10, v8, v7);

  _Block_release(v10);
  objc_super v11 = *(uint64_t (**)(void))(v6 + 8);
  return v11();
}

uint64_t sub_100110620(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100110750, 0, 0);
}

uint64_t sub_100110750()
{
  unint64_t v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy generateKeySigningKey for credential identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v6(v21, v20);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[13] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v15;
  if (v15)
  {
    swift_retain();
    id v16 = (void *)swift_task_alloc();
    v0[15] = v16;
    *id v16 = v0;
    v16[1] = sub_100110BA8;
    uint64_t v18 = v0[3];
    uint64_t v17 = v0[4];
    return sub_10015C840(v18, v17);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    id v10 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100110BA8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100110D60;
  }
  else
  {
    *(void *)(v4 + 136) = a1;
    uint64_t v5 = sub_100110CD0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100110CD0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 136);
  return v1(v2);
}

uint64_t sub_100110D60()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100111028(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001110FC;
  return sub_100110620(v5, v7);
}

uint64_t sub_1001110FC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1001112B8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001113E8, 0, 0);
}

uint64_t sub_1001113E8()
{
  uint64_t v22 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[10];
    uint64_t v19 = v0[9];
    uint64_t v20 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy isAccountKeySigningKeyAvailable for accountKeyIdentifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v6(v20, v19);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  sub_100124294();
  if (*(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage))
  {
    uint64_t v12 = v0[3];
    uint64_t v13 = (void *)v0[4];
    swift_retain();
    char v14 = sub_10013EE44(v12, v13);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v16 = v14 & 1;
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v6(v10, v11);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v16 = 0;
  }
  return v15(v16);
}

uint64_t sub_100111994(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100111A68;
  return sub_1001112B8(v5, v7);
}

uint64_t sub_100111A68(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100111C1C(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100111D4C, 0, 0);
}

uint64_t sub_100111D4C()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = v0[10];
    uint64_t v22 = v0[9];
    uint64_t v23 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy createAccountKeySigningKey for accountKeyIdentifier: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v6(v23, v22);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  sub_100124294();
  if (*(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage))
  {
    uint64_t v10 = v0[3];
    unint64_t v11 = v0[4];
    swift_retain();
    uint64_t v12 = sub_10013F298(v10, v11);
    unint64_t v14 = v13;
    uint64_t v19 = sub_100017810(v12, v13);
    sub_1000035EC(v12, v14);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(uint64_t))v0[1];
    return v20(v19);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v6(v15, v16);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100112370(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127234;
  return sub_100111C1C(v5, v7);
}

uint64_t sub_100112444(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100112574, 0, 0);
}

uint64_t sub_100112574()
{
  uint64_t v26 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v22 = v0[10];
    uint64_t v23 = v0[9];
    uint64_t v24 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "retrieveAccountKeySigningKey for label: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v6(v24, v23);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  sub_100124294();
  if (!*(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage))
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v10 = v0[3];
  unint64_t v11 = v0[4];
  swift_retain();
  unint64_t v12 = sub_10013F6A0(v10, v11);
  unint64_t v14 = v13;
  if (v13 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.accountKeySigningKeyDoesntExist(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
LABEL_9:
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v6(v16, v17);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  uint64_t v15 = v12;
  uint64_t v20 = sub_100017810(v12, v13);
  sub_100009764(v15, v14);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t))v0[1];
  return v21(v20);
}

uint64_t sub_100112C74(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127234;
  return sub_100112444(v5, v7);
}

uint64_t sub_100112D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100112E7C, 0, 0);
}

uint64_t sub_100112E7C()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = v0[12];
    uint64_t v22 = v0[11];
    uint64_t v23 = v0[14];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy generateAccountKeyAuthorization for credential identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v6(v23, v22);
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[12];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[15] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[16] = v15;
  if (v15)
  {
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[17] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_1001132E0;
    uint64_t v18 = v0[5];
    uint64_t v17 = v0[6];
    uint64_t v19 = v0[3];
    uint64_t v20 = v0[4];
    return sub_100017E9C(v18, v17, v19, v20);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1001132E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void **)v5;
  *(void *)(*(void *)v5 + 144) = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v11 = sub_1001134BC;
  }
  else
  {
    v10[19] = a4;
    v10[20] = a3;
    v10[21] = a2;
    v10[22] = a1;
    uint64_t v11 = sub_100113428;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_100113428()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  return v1(v2, v3, v4, v5);
}

uint64_t sub_1001134BC()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011378C(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v4[5] = v10;
  a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_100113888;
  return sub_100112D48(v6, v8, v9, v11);
}

uint64_t sub_100113888(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = *v5;
  uint64_t v11 = *(void **)(*v5 + 16);
  uint64_t v12 = *v5;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (***)(void, void, void, void))(v10 + 24);
  if (v6)
  {
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void, void *))v13)[2](v13, 0, 0, v14);

    _Block_release(v13);
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v16 = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class, Class, void))v13)[2](v13, isa, v16, 0);

    _Block_release(v13);
    sub_1000035EC(a1, a2);
    sub_1000035EC(a3, a4);
  }
  uint64_t v17 = *(uint64_t (**)(void))(v12 + 8);
  return v17();
}

uint64_t sub_100113AC4(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100113BF4, 0, 0);
}

uint64_t sub_100113BF4()
{
  uint64_t v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy generateDeviceEncryptionKey for credential identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v6(v21, v20);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[13] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v15;
  if (v15)
  {
    swift_retain();
    Class v16 = (void *)swift_task_alloc();
    v0[15] = v16;
    *Class v16 = v0;
    v16[1] = sub_100114054;
    uint64_t v18 = v0[3];
    uint64_t v17 = v0[4];
    return sub_1000F1EC0(v18, v17);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100114054(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100127224;
  }
  else
  {
    *(void *)(v4 + 136) = a1;
    uint64_t v5 = sub_100127218;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001142F8(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127234;
  return sub_100113AC4(v5, v7);
}

uint64_t sub_1001143CC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001144FC, 0, 0);
}

uint64_t sub_1001144FC()
{
  uint64_t v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy generatePresentmentKey for credential identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v6(v21, v20);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[13] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v15;
  if (v15)
  {
    swift_retain();
    Class v16 = (void *)swift_task_alloc();
    v0[15] = v16;
    *Class v16 = v0;
    v16[1] = sub_100114054;
    uint64_t v18 = v0[3];
    uint64_t v17 = v0[4];
    return sub_100102BB0(v18, v17);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100114AD0(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127234;
  return sub_1001143CC(v5, v7);
}

uint64_t sub_100114BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100114CD4, 0, 0);
}

uint64_t sub_100114CD4()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v24 = v0[11];
    uint64_t v25 = v0[14];
    unint64_t v5 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v22 = v0[4];
    uint64_t v23 = v0[12];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v0[2] = v4;
    uint64_t v26 = v7;
    *(_DWORD *)uint64_t v6 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_10004C3A4(v22, v5, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CredentialStoreSessionProxy generatePresentmentKeys numKeys=%ld for credential identifier %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v8(v25, v24);
  }
  else
  {
    uint64_t v9 = v0[14];
    uint64_t v10 = v1[11];
    uint64_t v11 = v1[12];
    swift_bridgeObjectRelease_n();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  v1[15] = v8;
  sub_100124294();
  uint64_t v17 = *(void *)(v1[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v1[16] = v17;
  if (v17)
  {
    swift_retain();
    uint64_t v18 = (void *)swift_task_alloc();
    v1[17] = v18;
    void *v18 = v1;
    v18[1] = sub_100115160;
    uint64_t v19 = v1[5];
    uint64_t v20 = v1[6];
    uint64_t v21 = v1[4];
    return sub_100103264(v21, v19, v20);
  }
  else
  {
    (*(void (**)(void, void, void))(v1[9] + 104))(v1[10], enum case for DIPError.Code.badLogic(_:), v1[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v1[15];
    uint64_t v13 = v1[13];
    uint64_t v14 = v1[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v12(v13, v14);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v1[1];
    return v15();
  }
}

uint64_t sub_100115160(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_1001134BC;
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    unint64_t v5 = sub_100115288;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100115288()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 152);
  return v1(v2);
}

uint64_t sub_100115498(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[5] = v10;
  void *v10 = v4;
  v10[1] = sub_10011557C;
  return sub_100114BA4(v7, v9, a2);
}

uint64_t sub_10011557C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_10000C854(0, &qword_1001C3D98);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100115740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100115874, 0, 0);
}

uint64_t sub_100115874()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = v0[12];
    uint64_t v22 = v0[11];
    uint64_t v23 = v0[14];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy authorizeDeviceKeySigningKey with credential identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v6(v23, v22);
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[12];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[15] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[16] = v15;
  if (v15)
  {
    swift_retain();
    Class v16 = (void *)swift_task_alloc();
    v0[17] = v16;
    *Class v16 = v0;
    v16[1] = sub_100115CD8;
    uint64_t v17 = v0[5];
    uint64_t v18 = v0[6];
    uint64_t v20 = v0[3];
    uint64_t v19 = v0[4];
    return sub_100019E58(v20, v19, v17, v18);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100115CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 144) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1001134BC;
  }
  else
  {
    *(void *)(v6 + 152) = a2;
    *(void *)(v6 + 160) = a1;
    uint64_t v7 = sub_100115E0C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100115E0C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  return v1(v2, v3);
}

uint64_t sub_100116020(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v4[5] = v10;
  a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_10011611C;
  return sub_100115740(v6, v8, v9, v11);
}

uint64_t sub_10011611C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000035EC(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t sub_1001162F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100116428, 0, 0);
}

uint64_t sub_100116428()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = v0[12];
    uint64_t v22 = v0[11];
    uint64_t v23 = v0[14];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy authorizeRemoteKeySigningKey with credential identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v6(v23, v22);
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[12];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[15] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[16] = v15;
  if (v15)
  {
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[17] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10011688C;
    uint64_t v17 = v0[5];
    uint64_t v18 = v0[6];
    uint64_t v20 = v0[3];
    uint64_t v19 = v0[4];
    return sub_10015E28C(v20, v19, v17, v18);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_10011688C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 144) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100127214;
  }
  else
  {
    *(void *)(v6 + 152) = a2;
    *(void *)(v6 + 160) = a1;
    uint64_t v7 = sub_10012722C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100116B44(int a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  id v10 = a2;
  a4;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v4[5] = v11;
  v4[6] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v4[7] = v14;
  *uint64_t v14 = v4;
  v14[1] = sub_100116C48;
  return sub_1001162F4(v7, v9, v11, v13);
}

uint64_t sub_100116C48(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v8 = *v3;
  uint64_t v7 = *v3;
  uint64_t v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();

  sub_1000035EC(*(void *)(v7 + 40), *(void *)(v7 + 48));
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v11 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v13 = (void *)v11;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000035EC(a1, a2);
    uint64_t v11 = 0;
    uint64_t v13 = isa;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v8 + 24);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v10 + 8);
  return v15();
}

uint64_t sub_100116E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_100116F64, 0, 0);
}

uint64_t sub_100116F64()
{
  uint64_t v32 = v0;
  uint64_t v2 = v0[6];
  unint64_t v1 = v0[7];
  defaultLogger()();
  swift_bridgeObjectRetain();
  sub_10000354C(v2, v1);
  swift_bridgeObjectRetain();
  sub_10000354C(v2, v1);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v28 = v0[13];
    uint64_t v29 = v0[12];
    uint64_t v30 = v0[15];
    uint64_t v6 = v0[6];
    unint64_t v5 = v0[7];
    unint64_t v7 = v0[5];
    uint64_t v8 = v0[4];
    uint64_t v9 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v8, v7, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    Swift::String v10 = Data.base16EncodedString()();
    v0[3] = sub_10004C3A4(v10._countAndFlagsBits, (unint64_t)v10._object, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    sub_1000035EC(v6, v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStoreSessionProxy associateExternalPresentmentKey with credential identifier %s public key identifier %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v11(v30, v29);
  }
  else
  {
    uint64_t v12 = v0[15];
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[13];
    uint64_t v16 = v0[6];
    unint64_t v15 = v0[7];
    swift_bridgeObjectRelease_n();
    sub_1000035EC(v16, v15);
    sub_1000035EC(v16, v15);

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v0[16] = v11;
  sub_100124294();
  uint64_t v22 = *(void *)(v0[8] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[17] = v22;
  if (v22)
  {
    swift_retain();
    uint64_t v23 = (void *)swift_task_alloc();
    v0[18] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100117470;
    uint64_t v24 = v0[6];
    uint64_t v25 = v0[7];
    uint64_t v27 = v0[4];
    uint64_t v26 = v0[5];
    return sub_10010B8E0(v27, v26, v24, v25);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.badLogic(_:), v0[9]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v18 = v0[14];
    uint64_t v19 = v0[12];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v17(v18, v19);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_100117470()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100117610;
  }
  else {
    uint64_t v2 = sub_100117584;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100117584()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100117610()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001178E0(int a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  id v10 = a2;
  a4;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v4[5] = v11;
  v4[6] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v4[7] = v14;
  *uint64_t v14 = v4;
  v14[1] = sub_100127208;
  return sub_100116E30(v7, v9, v11, v13);
}

uint64_t sub_1001179E4(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100117B14, 0, 0);
}

uint64_t sub_100117B14()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  defaultLogger()();
  sub_10000354C(v1, v2);
  sub_10000354C(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v24 = v0[10];
    uint64_t v25 = v0[9];
    uint64_t v26 = v0[12];
    uint64_t v6 = v0[3];
    unint64_t v5 = v0[4];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    Swift::String v8 = Data.base16EncodedString()();
    v0[2] = sub_10004C3A4(v8._countAndFlagsBits, (unint64_t)v8._object, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    sub_1000035EC(v6, v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStoreSessionProxy credentialIdentifierForPublicKeyIdentifier with public key identifier %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v9(v26, v25);
  }
  else
  {
    uint64_t v10 = v0[12];
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[10];
    uint64_t v14 = v0[3];
    unint64_t v13 = v0[4];
    sub_1000035EC(v14, v13);
    sub_1000035EC(v14, v13);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[13] = v9;
  sub_100124294();
  uint64_t v20 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v20;
  if (v20)
  {
    swift_retain();
    uint64_t v21 = (void *)swift_task_alloc();
    v0[15] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100117FAC;
    uint64_t v23 = v0[3];
    uint64_t v22 = v0[4];
    return sub_10010C2B8(v23, v22);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v15 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v15(v16, v17);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_100117FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 128) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100110D60;
  }
  else
  {
    *(void *)(v6 + 136) = a2;
    *(void *)(v6 + 144) = a1;
    uint64_t v7 = sub_10002274C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10011825C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v3[4] = v7;
  v3[5] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v3[6] = v10;
  void *v10 = v3;
  v10[1] = sub_100118338;
  return sub_1001179E4(v7, v9);
}

uint64_t sub_100118338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v3;
  unint64_t v7 = *(void *)(*v3 + 40);
  uint64_t v8 = *(void *)(*v3 + 32);
  uint64_t v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();

  sub_1000035EC(v8, v7);
  if (v4)
  {
    a2 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v11 = 0;
    uint64_t v12 = (void *)a2;
  }
  else if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    a2 = 0;
    uint64_t v12 = v11;
  }
  else
  {
    NSString v11 = 0;
    uint64_t v12 = 0;
  }
  unint64_t v13 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, NSString, uint64_t))v13)[2](v13, v11, a2);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v10 + 8);
  return v14();
}

uint64_t sub_100118518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_10011864C, 0, 0);
}

uint64_t sub_10011864C()
{
  uint64_t v30 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v26 = v0[14];
    uint64_t v27 = v0[13];
    uint64_t v28 = v0[16];
    unint64_t v3 = v0[5];
    uint64_t v4 = v0[4];
    uint64_t v5 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2080;
    id v6 = (id)DCCredentialPayloadFormatToString();
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    v0[3] = sub_10004C3A4(v7, v9, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy replacePayload for credential identifier %s (format = %s)", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v10(v28, v27);
  }
  else
  {
    uint64_t v11 = v0[16];
    uint64_t v12 = v0[13];
    uint64_t v13 = v0[14];
    swift_bridgeObjectRelease_n();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  v0[17] = v10;
  sub_100124294();
  uint64_t v19 = *(void *)(v0[9] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[18] = v19;
  if (v19)
  {
    swift_retain();
    uint64_t v20 = (void *)swift_task_alloc();
    v0[19] = v20;
    void *v20 = v0;
    v20[1] = sub_100118B18;
    uint64_t v21 = v0[7];
    uint64_t v22 = v0[8];
    uint64_t v23 = v0[5];
    uint64_t v24 = v0[6];
    uint64_t v25 = v0[4];
    return sub_1000564A8(v25, v23, v24, v21, v22);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.badLogic(_:), v0[10]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[17];
    uint64_t v15 = v0[15];
    uint64_t v16 = v0[13];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v14(v15, v16);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100118B18()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100118CB8;
  }
  else {
    os_log_type_t v2 = sub_100118C2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100118C2C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100118CB8()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100118F98(int a1, void *a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v5[4] = v10;
  id v12 = a2;
  a5;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v5[5] = v13;
  v5[6] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v5[7] = v16;
  *uint64_t v16 = v5;
  v16[1] = sub_1001190B0;
  return sub_100118518(v9, v11, v13, v15, a3);
}

uint64_t sub_1001190B0()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void *)(*v1 + 48);
  uint64_t v6 = *(void *)(*v1 + 40);
  uint64_t v7 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(void, void))(v9 + 16))(*(void *)(v3 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_10011928C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1001193B8, 0, 0);
}

uint64_t sub_1001193B8()
{
  uint64_t v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[9];
    uint64_t v20 = v0[8];
    uint64_t v21 = v0[11];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[2] = sub_10004C3A4(v4, v6, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy credentialIdentifiers, partitions = %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v7(v21, v20);
  }
  else
  {
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[9];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[12] = v7;
  sub_100124294();
  uint64_t v16 = *(void *)(v0[4] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[13] = v16;
  if (v16)
  {
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[14] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100119838;
    uint64_t v18 = v0[3];
    return sub_1000AD5D8(v18);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.badLogic(_:), v0[5]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[8];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v11(v12, v13);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100119838(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_1001199F0;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    unint64_t v5 = sub_100119960;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100119960()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

uint64_t sub_1001199F0()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[12];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100119CB8(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v5;
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100119D8C;
  return sub_10011928C(v5);
}

uint64_t sub_100119D8C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_100006CC8(&qword_1001C3C70);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100119F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10011A084, 0, 0);
}

uint64_t sub_10011A084()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = v0[11];
    uint64_t v22 = v0[10];
    uint64_t v23 = v0[13];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[2] = sub_10004C3A4(v4, v6, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy credentialIdentifiersDocType, partitions = %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v7(v23, v22);
  }
  else
  {
    uint64_t v8 = v0[13];
    uint64_t v9 = v0[10];
    uint64_t v10 = v0[11];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[14] = v7;
  sub_100124294();
  uint64_t v16 = *(void *)(v0[6] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[15] = v16;
  if (v16)
  {
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[16] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10011A510;
    uint64_t v18 = v0[4];
    uint64_t v19 = v0[5];
    uint64_t v20 = v0[3];
    return sub_1000ABA10(v20, v18, v19);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.badLogic(_:), v0[7]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[14];
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[10];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v11(v12, v13);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10011A510(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_100127228;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    unint64_t v5 = sub_10012721C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011A7BC(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  void *v10 = v4;
  v10[1] = sub_10011A8B8;
  return sub_100119F54(v6, v7, v9);
}

uint64_t sub_10011A8B8()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_100006CC8(&qword_1001C3C70);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_10011AA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return _swift_task_switch(sub_10011ABD0, 0, 0);
}

uint64_t sub_10011ABD0()
{
  uint64_t v27 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v23 = v0[13];
    uint64_t v24 = v0[12];
    uint64_t v25 = v0[15];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[2] = sub_10004C3A4(v4, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy credentialIdentifiersDocTypeRegion, partitions = %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v7(v25, v24);
  }
  else
  {
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[12];
    uint64_t v10 = v0[13];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[16] = v7;
  sub_100124294();
  uint64_t v16 = *(void *)(v0[8] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[17] = v16;
  if (v16)
  {
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[18] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10011B060;
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[7];
    uint64_t v20 = v0[4];
    uint64_t v21 = v0[5];
    uint64_t v22 = v0[3];
    return sub_1000ADEC8(v22, v20, v21, v18, v19);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.badLogic(_:), v0[9]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[12];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v11(v12, v13);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10011B060(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_100117610;
  }
  else
  {
    *(void *)(v4 + 160) = a1;
    unint64_t v5 = sub_10011B188;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011B188()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 160);
  return v1(v2);
}

uint64_t sub_10011B3B0(int a1, int a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[4] = v8;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v5[5] = v10;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  v5[6] = v13;
  a5;
  uint64_t v14 = (void *)swift_task_alloc();
  v5[7] = v14;
  *uint64_t v14 = v5;
  v14[1] = sub_10011B4E4;
  return sub_10011AA9C(v8, v9, v11, a3, v13);
}

uint64_t sub_10011B4E4()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_100006CC8(&qword_1001C3C70);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_10011B6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10011B818, 0, 0);
}

uint64_t sub_10011B818()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = v0[11];
    uint64_t v22 = v0[10];
    uint64_t v23 = v0[13];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[2] = sub_10004C3A4(v4, v6, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy activeRegionsInPartitions, partitions = %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v7(v23, v22);
  }
  else
  {
    uint64_t v8 = v0[13];
    uint64_t v9 = v0[10];
    uint64_t v10 = v0[11];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[14] = v7;
  sub_100124294();
  uint64_t v16 = *(void *)(v0[6] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[15] = v16;
  if (v16)
  {
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[16] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10011BC9C;
    uint64_t v18 = v0[4];
    uint64_t v19 = v0[5];
    uint64_t v20 = v0[3];
    return sub_1000AE818(v20, v18, v19);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.badLogic(_:), v0[7]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[14];
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[10];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v11(v12, v13);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10011BC9C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_10011BE54;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    unint64_t v5 = sub_10011BDC4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011BDC4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  return v1(v2);
}

uint64_t sub_10011BE54()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011C124(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  void *v10 = v4;
  v10[1] = sub_10011C220;
  return sub_10011B6E8(v6, v7, v9);
}

uint64_t sub_10011C220()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_10011C3F4(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10011C524, 0, 0);
}

uint64_t sub_10011C524()
{
  uint64_t v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy deleteCredential, credential identifier = %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v6(v21, v20);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[13] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v15;
  if (v15)
  {
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[15] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10011C980;
    uint64_t v18 = v0[3];
    uint64_t v17 = v0[4];
    return sub_1000AF14C(v18, v17);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_10011C980()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100110D60;
  }
  else {
    os_log_type_t v2 = sub_10011CA94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011CA94()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011CC9C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127230;
  return sub_10011C3F4(v5, v7);
}

uint64_t sub_10011CD70(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  sub_100006CC8((uint64_t *)&unk_1001C3B50);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_10011CEE0, 0, 0);
}

uint64_t sub_10011CEE0()
{
  uint64_t v29 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v25 = v0[16];
    uint64_t v26 = v0[15];
    uint64_t v27 = v0[18];
    unint64_t v3 = v0[8];
    uint64_t v4 = v0[7];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[6] = sub_10004C3A4(v4, v3, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy properties, credential identifier = %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v6(v27, v26);
  }
  else
  {
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[16];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[19] = v6;
  sub_100124294();
  uint64_t v21 = *(void *)(v0[9] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[20] = v21;
  if (v21)
  {
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc();
    v0[21] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10011D408;
    uint64_t v24 = v0[7];
    uint64_t v23 = v0[8];
    return sub_1000AC2A0(v24, v23);
  }
  (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.badLogic(_:), v0[12]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[11];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1) {
    goto LABEL_8;
  }
  uint64_t v13 = v0[12];
  uint64_t v14 = v0[13];
  uint64_t v15 = v0[10];
  sub_100124DF0(v0[11], v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 88))(v15, v13) != enum case for DIPError.Code.idcsUnknownCredential(_:))
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[10], v0[12]);
LABEL_8:
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[19];
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[15];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v16(v17, v18);
  }
  sub_100014BBC(v0[11], (uint64_t *)&unk_1001C3B50);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10011D408(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10011D5DC;
  }
  else
  {
    *(void *)(v4 + 184) = a1;
    uint64_t v5 = sub_10011D530;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011D530()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 184);
  return v1(v2);
}

uint64_t sub_10011D5DC()
{
  swift_release();
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[13];
    uint64_t v6 = v0[10];
    sub_100124DF0(v0[11], v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v6, v4) == enum case for DIPError.Code.idcsUnknownCredential(_:)) {
      goto LABEL_5;
    }
    (*(void (**)(void, void))(v0[13] + 8))(v0[10], v0[12]);
  }
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[15];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v7(v8, v9);
LABEL_5:
  sub_100014BBC(v0[11], (uint64_t *)&unk_1001C3B50);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10011D980(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127234;
  return sub_10011CD70(v5, v7);
}

uint64_t sub_10011DA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10011DB84, 0, 0);
}

uint64_t sub_10011DB84()
{
  uint64_t v24 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[10];
    uint64_t v22 = v0[13];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy setState, credential identifier = %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v6(v22, v21);
  }
  else
  {
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[14] = v6;
  sub_100124294();
  uint64_t v15 = *(void *)(v0[6] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[15] = v15;
  if (v15)
  {
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[16] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10011DFE0;
    uint64_t v17 = v0[4];
    uint64_t v18 = v0[5];
    uint64_t v19 = v0[3];
    return sub_1000B3230(v19, v17, v18);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.badLogic(_:), v0[7]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[14];
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[10];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_10011DFE0()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10011BE54;
  }
  else {
    os_log_type_t v2 = sub_10001D6C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011E274(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[5] = v10;
  void *v10 = v4;
  v10[1] = sub_10011E358;
  return sub_10011DA54(v7, v9, a2);
}

uint64_t sub_10011E358()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10011E4F8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10011E618, 0, 0);
}

uint64_t sub_10011E618()
{
  sub_100124294();
  uint64_t v6 = *(void *)(v0[4] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[11] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10011E8C8;
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    return sub_1000B4058(v9, v8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[6];
    uint64_t v2 = v0[7];
    uint64_t v3 = v0[5];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10011E8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 104) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10011EA78;
  }
  else
  {
    *(void *)(v6 + 112) = a2;
    *(void *)(v6 + 120) = a1;
    uint64_t v7 = sub_10011E9FC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10011E9FC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  return v1(v2, v3);
}

uint64_t sub_10011EA78()
{
  swift_release();
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011ED30(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10011EE04;
  return sub_10011E4F8(v5, v7);
}

uint64_t sub_10011EE04(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v10 = 0;
    Class isa = 0;
    uint64_t v12 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t sub_10011EFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  return _swift_task_switch(sub_10011F0F8, 0, 0);
}

uint64_t sub_10011F0F8()
{
  sub_100124294();
  uint64_t v6 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v6;
  if (v6)
  {
    uint64_t v7 = v0[4];
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[15] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10011F3BC;
    uint64_t v9 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = v0[2];
    uint64_t v11 = v0[3];
    return sub_1000B55D4(v12, v11, v7, v9, v10);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.badLogic(_:), v0[11]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[9];
    uint64_t v2 = v0[10];
    uint64_t v3 = v0[8];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10011F3BC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10011F560;
  }
  else
  {
    *(void *)(v4 + 136) = a1;
    uint64_t v5 = sub_10011F4E4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011F4E4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 136);
  return v1(v2);
}

uint64_t sub_10011F560()
{
  swift_release();
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011F834(int a1, int a2, void *a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  v5[4] = v9;
  sub_100006CC8(&qword_1001C3C70);
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v5[5] = v11;
  if (a3)
  {
    id v12 = a3;
    id v13 = a5;
    a3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    id v16 = a5;
    uint64_t v15 = 0xF000000000000000;
  }
  v5[6] = a3;
  v5[7] = v15;
  uint64_t v17 = (void *)swift_task_alloc();
  v5[8] = v17;
  *uint64_t v17 = v5;
  v17[1] = sub_10011F984;
  return sub_10011EFD4(v8, v10, v11, (uint64_t)a3, v15);
}

uint64_t sub_10011F984()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  sub_100009764(*(void *)(v3 + 48), *(void *)(v3 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v7 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v9 = (void *)v7;
  }
  else
  {
    sub_100006CC8(&qword_1001C3C00);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v9 = isa;
  }
  uint64_t v10 = *(void (***)(void, void, void))(v4 + 24);
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, v7);

  _Block_release(v10);
  uint64_t v11 = *(uint64_t (**)(void))(v6 + 8);
  return v11();
}

uint64_t sub_10011FB94(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10011FCB4, 0, 0);
}

uint64_t sub_10011FCB4()
{
  sub_100124294();
  uint64_t v6 = *(void *)(v0[4] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[11] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10011FF68;
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    return sub_1000871B8(v9, v8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[6];
    uint64_t v2 = v0[7];
    uint64_t v3 = v0[5];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10011FF68(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10011EA78;
  }
  else
  {
    *(void *)(v4 + 112) = a1;
    uint64_t v5 = sub_100120090;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100120090()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 112);
  return v1(v2);
}

uint64_t sub_100120288(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10012035C;
  return sub_10011FB94(v5, v7);
}

uint64_t sub_10012035C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_10012050C(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10012063C, 0, 0);
}

uint64_t sub_10012063C()
{
  uint64_t v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy payloads (debug), credential identifier = %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v6(v21, v20);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[13] = v6;
  sub_100124294();
  sub_100124720();
  uint64_t v15 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[14] = v15;
  if (v15)
  {
    swift_retain();
    id v16 = (void *)swift_task_alloc();
    v0[15] = v16;
    *id v16 = v0;
    v16[1] = sub_100110BA8;
    uint64_t v18 = v0[3];
    uint64_t v17 = v0[4];
    return sub_10003ED9C(v18, v17);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v11, v12);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100120C24(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100120CF8;
  return sub_10012050C(v5, v7);
}

uint64_t sub_100120CF8()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_10000C854(0, &qword_1001C3C28);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100120EBC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100120FEC, 0, 0);
}

uint64_t sub_100120FEC()
{
  uint64_t v20 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = v0[10];
    uint64_t v17 = v0[9];
    uint64_t v18 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStoreSessionProxy deleteAccountKeySigningKey for accountKeyIdentifier: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v6(v18, v17);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  sub_100124294();
  if (*(void *)(v0[5] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage))
  {
    uint64_t v13 = v0[3];
    uint64_t v14 = (void *)v0[4];
    swift_retain();
    sub_10013FA30(v13, v14);
    swift_release();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v6(v10, v11);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1001215A4(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127230;
  return sub_100120EBC(v5, v7);
}

uint64_t sub_100121678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_10012179C, 0, 0);
}

uint64_t sub_10012179C()
{
  sub_100124294();
  sub_100124720();
  uint64_t v6 = *(void *)(v0[6] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[13] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[14] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100121A68;
    uint64_t v8 = v0[4];
    uint64_t v9 = v0[5];
    uint64_t v11 = v0[2];
    uint64_t v10 = v0[3];
    return sub_1000B55D4(v11, v10, 0, v8, v9);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.badLogic(_:), v0[10]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[8];
    uint64_t v2 = v0[9];
    uint64_t v3 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100121A68(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100121C0C;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_100121B90;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100121B90()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

uint64_t sub_100121C0C()
{
  swift_release();
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100121ECC(int a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  if (a2)
  {
    id v10 = a2;
    id v11 = a4;
    a2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    id v14 = a4;
    uint64_t v13 = 0xF000000000000000;
  }
  v4[5] = a2;
  v4[6] = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  v4[7] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_100121FDC;
  return sub_100121678(v7, v9, (uint64_t)a2, v13);
}

uint64_t sub_100121FDC()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  sub_100009764(*(void *)(v3 + 40), *(void *)(v3 + 48));
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v7 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v9 = (void *)v7;
  }
  else
  {
    sub_100006CC8(&qword_1001C3C00);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v9 = isa;
  }
  id v10 = *(void (***)(void, void, void))(v4 + 24);
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, v7);

  _Block_release(v10);
  id v11 = *(uint64_t (**)(void))(v6 + 8);
  return v11();
}

uint64_t sub_1001221D0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_1001222EC, 0, 0);
}

uint64_t sub_1001222EC()
{
  sub_100124720();
  uint64_t v6 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[9] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[10] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100122594;
    return sub_10003F684();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[4];
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[3];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100122594(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100122738;
  }
  else
  {
    *(void *)(v4 + 96) = a1;
    uint64_t v5 = sub_1001226BC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001226BC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  return v1(v2);
}

uint64_t sub_100122738()
{
  swift_release();
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001229DC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100122A84;
  return sub_1001221D0();
}

uint64_t sub_100122A84()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_10000C854(0, &qword_1001C3BD8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  id v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100122C24(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100122D40, 0, 0);
}

uint64_t sub_100122D40()
{
  sub_100124720();
  if (*(void *)(v0[3] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage))
  {
    sub_10004479C(v0[2]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.badLogic(_:), v0[7]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[5];
    uint64_t v2 = v0[6];
    uint64_t v3 = v0[4];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t sub_100123120(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[4] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10002A5A8;
  return sub_100122C24(a1);
}

uint64_t sub_1001231DC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_1001232FC, 0, 0);
}

uint64_t sub_1001232FC()
{
  sub_100124720();
  uint64_t v6 = *(void *)(v0[4] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[11] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001235AC;
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    return sub_100040C18(v9, v8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[6];
    uint64_t v2 = v0[7];
    uint64_t v3 = v0[5];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001235AC()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10011EA78;
  }
  else {
    uint64_t v2 = sub_1001236C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001236C0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001238B4(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100127230;
  return sub_1001231DC(v5, v7);
}

uint64_t sub_100123988(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100123AA8, 0, 0);
}

uint64_t sub_100123AA8()
{
  sub_100124720();
  uint64_t v6 = *(void *)(v0[4] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v0[11] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100123D58;
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    return sub_1000418E4(v9, v8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v1 = v0[6];
    uint64_t v2 = v0[7];
    uint64_t v3 = v0[5];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100123D58(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10012720C;
  }
  else
  {
    *(void *)(v4 + 112) = a1;
    uint64_t v5 = sub_100120090;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100123FFC(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001240D0;
  return sub_100123988(v5, v7);
}

uint64_t sub_1001240D0()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_10000C854(0, &qword_1001C3BA0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

void sub_100124294()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5._rawValue = *(void **)(v0 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions);
  if (*((void *)v5._rawValue + 2)
    && ((sub_10010EE78(42, 0xE100000000000000, *(void **)(v0 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions)) & 1) == 0|| (byte_1001C4BB0 & 1) != 0)&& (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) != 0)
  {
    uint64_t v7 = (void *)Strong;
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v8._object = (void *)0x8000000100182780;
    Swift::Bool v9 = NSXPCConnection.hasArrayEntitlement(name:values:)(v8, v5);
    swift_bridgeObjectRelease();
    if (!v9)
    {
      unint64_t v11 = 0;
      unint64_t v12 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD00000000000001FLL;
      unint64_t v12 = 0x800000010017C820;
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

void sub_100124720()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((byte_1001C4BB0 & 1) != 0 && (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) != 0)
  {
    Swift::OpaquePointer v5 = (void *)Strong;
    v6._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v6._object = (void *)0x8000000100182730;
    if (!NSXPCConnection.isEntitled(_:)(v6))
    {
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v0);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v0);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for CredentialStoreSessionProxy()
{
  return self;
}

uint64_t sub_100124AAC(uint64_t a1, uint64_t a2, int *a3)
{
  Swift::String v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100016FE0;
  return v6();
}

uint64_t sub_100124B78(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100016FE0;
  return v7();
}

uint64_t sub_100124C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100014BBC(a1, &qword_1001C0E30);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100124DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100124E5C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3B60 + dword_1001C3B60);
  return v6(v2, v3, v4);
}

uint64_t sub_100124F18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100124F50(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100007458;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001C3B90 + dword_1001C3B90);
  return v6(a1, v4);
}

uint64_t sub_10012500C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3BA8 + dword_1001C3BA8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001250C8()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100125108()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1001C3BB8 + dword_1001C3BB8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001251C4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100125204()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  Swift::OpaquePointer v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C3BC8 + dword_1001C3BC8);
  return v5(v2, v3);
}

uint64_t sub_1001252BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, void *))((char *)&dword_1001C3BE0 + dword_1001C3BE0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100125388()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3C08 + dword_1001C3C08);
  return v6(v2, v3, v4);
}

uint64_t sub_100125448()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3C18 + dword_1001C3C18);
  return v6(v2, v3, v4);
}

uint64_t sub_100125508()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3C30 + dword_1001C3C30);
  return v6(v2, v3, v4);
}

uint64_t sub_1001255C8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(int, int, void *, void *, void *))((char *)&dword_1001C3C50 + dword_1001C3C50);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_10012569C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3C78 + dword_1001C3C78);
  return v6(v2, v3, v4);
}

uint64_t sub_10012575C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100007458;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, void *))((char *)&dword_1001C3C88 + dword_1001C3C88);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100125828()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3C98 + dword_1001C3C98);
  return v6(v2, v3, v4);
}

uint64_t sub_1001258E8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3CA8 + dword_1001C3CA8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001259A8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_1001C3CB8 + dword_1001C3CB8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100125A74()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100125ACC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  Swift::OpaquePointer v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(int, int, uint64_t, void *, void *))((char *)&dword_1001C3CC8 + dword_1001C3CC8);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_100125BA0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_1001C3CD8 + dword_1001C3CD8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100125C6C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3CE8 + dword_1001C3CE8);
  return v6(v2, v3, v4);
}

uint64_t sub_100125D28()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100125D78()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  Swift::OpaquePointer v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(int, void *, uint64_t, void *, void *))((char *)&dword_1001C3CF8 + dword_1001C3CF8);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_100125E4C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C3D08 + dword_1001C3D08);
  return v6(v2, v3, v4);
}

uint64_t sub_100125F0C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, void *))((char *)&dword_1001C3D18 + dword_1001C3D18);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100125FD8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, void *))((char *)&dword_1001C3D38 + dword_1001C3D38);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001260A4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_1001C3D58 + dword_1001C3D58);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100126170()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, void *))((char *)&dword_1001C3D78 + dword_1001C3D78);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10012623C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3DA0 + dword_1001C3DA0);
  return v6(v2, v3, v4);
}

uint64_t sub_1001262FC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3DC0 + dword_1001C3DC0);
  return v6(v2, v3, v4);
}

uint64_t sub_1001263BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_1001C3DE0 + dword_1001C3DE0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100126488()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3E00 + dword_1001C3E00);
  return v6(v2, v3, v4);
}

uint64_t sub_100126548()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3E20 + dword_1001C3E20);
  return v6(v2, v3, v4);
}

uint64_t sub_100126608()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3E40 + dword_1001C3E40);
  return v6(v2, v3, v4);
}

uint64_t sub_1001266C8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C3E60 + dword_1001C3E60);
  return v6(v2, v3, v4);
}

uint64_t sub_100126788()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  Swift::OpaquePointer v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, void *))((char *)&dword_1001C3E80 + dword_1001C3E80);
  return v7(v2, v3, v5, v4);
}

id sub_100126850(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v9 = OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage;
  *(void *)&v3[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage] = 0;
  uint64_t v10 = v3;
  defaultLogger()();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v16[0] = a2;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Creating CredentialStoreSessionProxy", v13, 2u);
    a2 = v16[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id result = (id)os_transaction_create();
  if (result)
  {
    *(void *)&v10[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign();
    *(void *)&v10[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_dataContainer] = a2;
    *(void *)&v10[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions] = _swiftEmptyArrayStorage;
    *(void *)&v3[v9] = 0;
    swift_retain();

    swift_release();
    uint64_t v15 = (objc_class *)type metadata accessor for CredentialStoreSessionProxy();
    v17.receiver = v10;
    v17.super_class = v15;
    return [super init];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100126A58(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  defaultLogger()();
  uint64_t v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 67109120;
    LODWORD(aBlock) = [v8 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "credential store listener connection received from %d", v11, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v12 = [self interfaceWithProtocol:&OBJC_PROTOCOL___DCCredentialStoreXPCProtocol];
  [v8 setExportedInterface:v12];

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC7idcredd23CredentialStoreListener_dataContainer);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CredentialStoreSessionProxy());
  swift_retain();
  id v16 = sub_100126850((uint64_t)Strong, v14);

  swift_release();
  [v8 setExportedObject:v16];

  uint64_t v25 = sub_10010F344;
  uint64_t v26 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_100127238;
  uint64_t v24 = &unk_1001B8250;
  objc_super v17 = _Block_copy(&aBlock);
  [v8 setInvalidationHandler:v17];
  _Block_release(v17);
  uint64_t v25 = sub_10010F350;
  uint64_t v26 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_100127238;
  uint64_t v24 = &unk_1001B8278;
  uint64_t v18 = _Block_copy(&aBlock);
  [v8 setInterruptionHandler:v18];
  _Block_release(v18);
  [v8 resume];
  swift_unknownObjectWeakDestroy();
  return 1;
}

uint64_t sub_100126DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeatureFlagProvider();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v38 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v37 = (char *)v32 - v10;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v33 = v11;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v35 = a2;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v36 = a3;
    v32[1] = v19;
    v40[0] = v19;
    uint64_t v34 = v7;
    *(_DWORD *)uint64_t v18 = 136315138;
    v32[0] = v18 + 4;
    swift_bridgeObjectRetain();
    uint64_t v20 = v6;
    uint64_t v21 = Array.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = v21;
    uint64_t v6 = v20;
    v39[0] = sub_10004C3A4(v24, v23, v40);
    uint64_t v7 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CredentialStoreSessionProxy configure with partitions %s", v18, 0xCu);
    swift_arrayDestroy();
    a3 = v36;
    swift_slowDealloc();
    a2 = v35;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v33);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  *(void *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_dataContainer);
  v40[3] = (uint64_t)&type metadata for CredentialDecryptionKeyIdentifierProvider;
  v40[4] = (uint64_t)&off_1001B3EC8;
  type metadata accessor for PayloadProcessorBuilder();
  uint64_t v26 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v27 = sub_100096070();
  uint64_t v28 = v37;
  FeatureFlagProvider.init()();
  sub_100096280((uint64_t)v40, (uint64_t)v39);
  uint64_t v29 = (uint64_t)v38;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v38, v28, v6);
  swift_retain();
  uint64_t v30 = sub_1000962DC(a1, v25, 0, (uint64_t)v39, v26, (uint64_t)v27, v29);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
  swift_release();
  sub_100085E70((uint64_t)v40);
  *(void *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage) = v30;
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_1001271F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100127200()
{
  return swift_release();
}

uint64_t sub_100127238(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void *sub_10012727C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006CC8(&qword_1001C0E30);
  __chkstk_darwin(v2 - 8);
  uint64_t v21 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  sub_10000C854(0, &qword_1001C4010);
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = 0;
  static DispatchQoS.unspecified.getter();
  v22[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_100127E50(&qword_1001C4018, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100006CC8(&qword_1001C4020);
  sub_100127E98(&qword_1001C4028, &qword_1001C4020);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  v0[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[6] = 0;
  os_transaction_create();
  if (qword_1001C03C0 != -1) {
    swift_once();
  }
  uint64_t v9 = *(os_unfair_lock_s **)(qword_1001C4BD0 + 16);
  uint64_t v10 = (uint64_t *)&v9[4];
  uint64_t v11 = v9 + 18;
  os_unfair_lock_lock(v9 + 18);
  sub_100006E24(v10, v22);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = v22[0];
  uint64_t v13 = v22[3];
  uint64_t v14 = v22[5];
  sub_100006E40(v22[1]);
  sub_100006E40(v13);
  sub_100006E40(v14);
  type metadata accessor for IDCSAsyncDataContainer();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 24) = v12;
  sub_100006CC8(&qword_1001C4030);
  swift_allocObject();
  swift_retain_n();
  *(void *)(v15 + 16) = AsyncCoreDataContainer.init(contextBuilder:)();
  sub_1001277B4();
  type metadata accessor for DIPBackgroundActivityManager();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  swift_retain();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  swift_retain();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  swift_release();
  uint64_t v16 = type metadata accessor for TaskPriority();
  uint64_t v17 = (uint64_t)v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v21, 1, 1, v16);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v15;
  v18[5] = 0xD000000000000015;
  v18[6] = 0x8000000100182F60;
  v18[7] = &off_1001B3620;
  swift_retain_n();
  sub_1000AB864(v17, (uint64_t)&unk_1001C4048, (uint64_t)v18);
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  return v1;
}

void (__cdecl *sub_1001277B4())(int)
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting up listeners", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CredentialStoreListener());
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10010EF40(v16);
  uint64_t v18 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v17;

  id v19 = objc_allocWithZone((Class)type metadata accessor for PresentmentListener());
  uint64_t v20 = swift_retain();
  uint64_t v21 = sub_10004DE00(v20);
  unint64_t v22 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v21;

  id v23 = objc_allocWithZone((Class)type metadata accessor for BiometricStoreListener());
  uint64_t v24 = swift_retain();
  uint64_t v25 = sub_10001B9D4(v24);
  uint64_t v26 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v25;

  sub_10000C854(0, &qword_1001C3FE8);
  id v27 = *(id *)(v1 + 40);
  uint64_t v28 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

  *(void *)(v1 + 48) = v28;
  swift_unknownObjectRelease();
  if (*(void *)(v1 + 48))
  {
    swift_getObjectType();
    aBlock[4] = sub_100127BD0;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127238;
    aBlock[3] = &unk_1001B82A0;
    uint64_t v29 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    sub_100127CF4();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v29);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v35);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }
  uint64_t v30 = (void (__cdecl *)(int))SIG_IGN.getter();
  id result = signal(15, v30);
  if (*(void *)(v1 + 48))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.resume()();
    return (void (__cdecl *)(int))swift_unknownObjectRelease();
  }
  return result;
}

void sub_100127BD0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SIGTERM received; shutting down", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  exit(0);
}

uint64_t sub_100127CF4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100127DBC()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonInitializer()
{
  return self;
}

uint64_t sub_100127E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100127E48()
{
  return swift_release();
}

uint64_t sub_100127E50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100127E98(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100016F64(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100127EE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10003EB58(a1);
}

uint64_t sub_100127F04(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100016FE0;
  return sub_10015719C(a1, a2, v2);
}

uint64_t sub_100127FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100016FE0;
  return sub_1001573F4(a1, a2, v2);
}

uint64_t sub_100128054()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001280A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100007458;
  return sub_1000A8050(a1, v4, v5, v6, v7, v9, v8);
}

void *sub_100128178()
{
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v0 = SESKeystore.init()();
  type metadata accessor for SEPairingManager();
  swift_allocObject();
  uint64_t v1 = SEPairingManager.init()();
  uint64_t v2 = type metadata accessor for GenericPasswordKeychainWrapper();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = type metadata accessor for SyncableKeyStoreProvider();
  uint64_t v5 = (void *)swift_allocObject();
  v5[5] = v2;
  v5[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v5[2] = v3;
  v15[3] = v4;
  v15[4] = &off_1001B6F00;
  v15[0] = v5;
  type metadata accessor for CredentialKeyManager();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = sub_100036D00((uint64_t)v15, v4);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v15[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = *v9;
  swift_retain();
  uint64_t v12 = sub_1001631B4(v0, v1, v11, v6);
  sub_10000B9DC((uint64_t)v15);
  swift_release();
  return v12;
}

uint64_t sub_100128328(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = sub_100006CC8(&qword_1001C4200);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  sub_100006CC8(&qword_1001C41F8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PresentmentRequestInterpretation(0);
  v2[17] = v4;
  v2[18] = *(void *)(v4 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[20] = v5;
  v2[21] = *(void *)(v5 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_10012853C, 0, 0);
}

uint64_t sub_10012853C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentFlow interpretRequest", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[6];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v0[23] = *(void *)(v7 + 112);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[24] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100128694;
  uint64_t v9 = v0[19];
  uint64_t v10 = v0[5];
  return sub_1000DB0F8(v9, v10);
}

uint64_t sub_100128694()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_100128C68;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_1001287B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001287B0()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[6];
  sub_10012A07C(v1, v4, type metadata accessor for PresentmentRequestInterpretation);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  sub_100037944(v4, v5, &qword_1001C41F8);
  uint64_t v7 = v6 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation;
  swift_beginAccess();
  sub_100129F88(v5, v7);
  swift_endAccess();
  v8._object = (void *)0x8000000100183110;
  v9._uint64_t countAndFlagsBits = 0x6639646364353638;
  v9._object = (void *)0xE800000000000000;
  v8._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
  logMilestone(tag:description:)(v9, v8);
  uint64_t v10 = *(void *)v1;
  uint64_t v11 = *(void *)(*(void *)v1 + 16);
  if (v11)
  {
    uint64_t v47 = v0[13];
    uint64_t v48 = v0[14];
    uint64_t v45 = v0[11];
    uint64_t v46 = v0[12];
    uint64_t v44 = v0[10];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = sub_100129FF4(v10);
    uint64_t v14 = result;
    uint64_t v15 = 0;
    uint64_t v16 = v10 + 64;
    char v17 = *(unsigned char *)(v10 + 32);
    uint64_t v39 = v10 + 80;
    uint64_t v40 = v11;
    uint64_t v41 = v0;
    int v42 = v13;
    uint64_t v49 = v10;
    uint64_t v43 = v10 + 64;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << v17)
    {
      unint64_t v19 = (unint64_t)v14 >> 6;
      if ((*(void *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(v10 + 36) != v13) {
        goto LABEL_25;
      }
      uint64_t v50 = v15;
      uint64_t v21 = (void *)v0[13];
      uint64_t v20 = (void *)v0[14];
      uint64_t v22 = (uint64_t)v20 + *(int *)(v44 + 48);
      id v23 = (void *)v0[12];
      os_log_type_t v51 = (void *)v0[11];
      uint64_t v24 = *(void *)(v10 + 56);
      uint64_t v25 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v14);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      uint64_t v28 = type metadata accessor for PresentmentProposal();
      sub_10012A07C(v24 + *(void *)(*(void *)(v28 - 8) + 72) * v14, v22, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      void *v20 = v27;
      *(void *)(v48 + 8) = v26;
      *uint64_t v21 = v27;
      *(void *)(v47 + 8) = v26;
      sub_10012A07C(v22, (uint64_t)v21 + *(int *)(v44 + 48), (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      sub_100037944((uint64_t)v21, (uint64_t)v23, &qword_1001C4200);
      swift_bridgeObjectRetain_n();
      sub_100014BBC((uint64_t)v20, &qword_1001C4200);
      uint64_t v29 = *(int *)(v44 + 48);
      uint64_t v30 = (id *)((char *)v51 + v29);
      uint64_t v31 = *(void *)(v46 + 8);
      *os_log_type_t v51 = *v23;
      *(void *)(v45 + 8) = v31;
      sub_10012A07C((uint64_t)v23 + v29, (uint64_t)v51 + v29, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      id v32 = *v30;
      sub_10012A0E4((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      sub_100014BBC((uint64_t)v23, &qword_1001C4200);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v10 = v49;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      char v17 = *(unsigned char *)(v49 + 32);
      unint64_t v18 = 1 << v17;
      if (v14 >= 1 << v17) {
        goto LABEL_26;
      }
      uint64_t v16 = v43;
      uint64_t v33 = *(void *)(v43 + 8 * v19);
      if ((v33 & (1 << v14)) == 0) {
        goto LABEL_27;
      }
      int v13 = v42;
      if (*(_DWORD *)(v49 + 36) != v42) {
        goto LABEL_28;
      }
      unint64_t v34 = v33 & (-2 << (v14 & 0x3F));
      if (v34)
      {
        unint64_t v18 = __clz(__rbit64(v34)) | v14 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v0 = v41;
      }
      else
      {
        unint64_t v35 = v19 + 1;
        unint64_t v36 = (v18 + 63) >> 6;
        uint64_t v0 = v41;
        if (v19 + 1 < v36)
        {
          unint64_t v37 = *(void *)(v43 + 8 * v35);
          if (v37)
          {
LABEL_18:
            unint64_t v18 = __clz(__rbit64(v37)) + (v35 << 6);
          }
          else
          {
            while (v36 - 2 != v19)
            {
              unint64_t v37 = *(void *)(v39 + 8 * v19++);
              if (v37)
              {
                unint64_t v35 = v19 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v15 = v50 + 1;
      uint64_t v14 = v18;
      if (v50 + 1 == v40)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
LABEL_20:
    sub_10012A0E4(v0[19], type metadata accessor for PresentmentRequestInterpretation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v38 = (uint64_t (*)(void *))v0[1];
    return v38(_swiftEmptyArrayStorage);
  }
  return result;
}

uint64_t sub_100128C68()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100128E24(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  sub_100006CC8(&qword_1001C41F8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PresentmentRequestInterpretation(0);
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_100128FCC, 0, 0);
}

uint64_t sub_100128FCC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentFlow buildCredentialResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[12];
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[6];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v11 = v10 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation;
  swift_beginAccess();
  sub_100129EBC(v11, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    uint64_t v12 = v0[9];
    uint64_t v13 = v0[7];
    uint64_t v14 = v0[8];
    sub_100014BBC(v0[10], &qword_1001C41F8);
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t))(v14 + 104);
    v21(v12, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v13);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v21(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    uint64_t v17 = v0[6];
    sub_100129F24(v0[10], v0[13]);
    v0[17] = *(void *)(v17 + 120);
    swift_retain();
    unint64_t v18 = (void *)swift_task_alloc();
    v0[18] = v18;
    void *v18 = v0;
    v18[1] = sub_1001293B0;
    uint64_t v19 = v0[13];
    uint64_t v20 = v0[5];
    return sub_10006C68C(v20, v19);
  }
}

uint64_t sub_1001293B0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = sub_1001295A4;
  }
  else
  {
    *(void *)(v4 + 160) = a1;
    uint64_t v5 = sub_1001294F4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001294F4()
{
  sub_10012A0E4(v0[13], type metadata accessor for PresentmentRequestInterpretation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[20];
  return v1(v2);
}

uint64_t sub_1001295A4()
{
  uint64_t v1 = v0[8];
  sub_10012A0E4(v0[13], type metadata accessor for PresentmentRequestInterpretation);
  (*(void (**)(void, void, void))(v1 + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100129734(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100129850, 0, 0);
}

uint64_t sub_100129850()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentFlow buildErrorResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v0[10] = *(void *)(v7 + 120);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001299A4;
  uint64_t v9 = v0[2];
  return sub_1000716E4(v9);
}

uint64_t sub_1001299A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(v6 + 96) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return _swift_task_switch(sub_100129B14, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t sub_100129B14()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100129C70()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100014BBC(v0 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation, &qword_1001C41F8);
  swift_release();
  return v0;
}

uint64_t sub_100129CE8()
{
  sub_100129C70();

  return swift_deallocClassInstance();
}

uint64_t sub_100129D40()
{
  return type metadata accessor for PresentmentFlow();
}

uint64_t type metadata accessor for PresentmentFlow()
{
  uint64_t result = qword_1001C4080;
  if (!qword_1001C4080) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100129D94()
{
  sub_100129E64();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100129E64()
{
  if (!qword_1001C40A8)
  {
    type metadata accessor for PresentmentRequestInterpretation(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001C40A8);
    }
  }
}

uint64_t sub_100129EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C41F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100129F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresentmentRequestInterpretation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100129F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C41F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100129FF4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10012A07C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012A0E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10012A144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v19 = (void *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_payloadProcessorBuilder);
  v19[3] = type metadata accessor for PayloadProcessorBuilder();
  v19[4] = &off_1001B8C60;
  *uint64_t v19 = a7;
  uint64_t v20 = (char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator;
  uint64_t v21 = type metadata accessor for IdentityReaderAuthenticator();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  a12[3] = a5;
  a12[4] = a2;
  a12[2] = a1;
  a12[11] = a4;
  sub_100037944(a3, (uint64_t)(a12 + 5), &qword_1001C4210);
  a12[12] = a6;
  *(void *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_credentialKeyManager) = a8;
  *(void *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_presentmentKeySelectionProvider) = a9;
  uint64_t v22 = (void *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_readerMetadataProvider);
  *uint64_t v22 = a10;
  v22[1] = a11;
  return a12;
}

uint64_t sub_10012A28C(uint64_t a1, uint64_t a2, void **a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  id v105 = a3;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  *(void *)&long long v106 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v98 - v18;
  uint64_t v20 = v8 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation;
  uint64_t v21 = type metadata accessor for PresentmentRequestInterpretation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  LODWORD(v101) = v23;
  BOOL v24 = os_log_type_enabled(v22, v23);
  *(void *)&long long v107 = a2;
  uint64_t v108 = a7;
  uint64_t v103 = a6;
  uint64_t v104 = v15;
  if (v24)
  {
    uint64_t v25 = a1;
    uint64_t v26 = swift_slowAlloc();
    unint64_t v99 = (uint8_t *)swift_slowAlloc();
    v113[0] = (uint64_t)v99;
    *(_DWORD *)uint64_t v26 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v27 = Array.description.getter();
    uint64_t v100 = a5;
    uint64_t v28 = v27;
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    *(void *)&long long v110 = sub_10004C3A4(v28, v30, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    os_log_type_t v98 = (void *)(v26 + 14);
    id v31 = (id)DCPresentmentTypeToString();
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = a4;
    unint64_t v35 = v34;

    uint64_t v36 = v32;
    a2 = v107;
    *(void *)&long long v110 = sub_10004C3A4(v36, v35, v113);
    a5 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v101, "PresentmentFlow init with partitions = %s, type = %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v25;
    uint64_t v15 = v104;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v37 = *(void (**)(char *, uint64_t))(v102 + 8);
  v37(v19, v15);
  if (v105)
  {
    unint64_t v101 = v37;
    uint64_t v102 = a1;
    os_log_type_t v38 = v105;
    defaultLogger()();
    uint64_t v39 = v38;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      int v42 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v98 = (void *)swift_slowAlloc();
      unint64_t v99 = v42;
      *(_DWORD *)int v42 = 138412290;
      v113[0] = (uint64_t)v39;
      uint64_t v43 = v39;
      uint64_t v100 = a4;
      uint64_t v44 = v43;
      a2 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v98 = v105;

      a4 = v100;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Presentment session options: %@", v99, 0xCu);
      sub_100006CC8(&qword_1001C1350);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v40 = v39;
    }

    v101((char *)v106, v104);
    id v45 = [v39 sessionEncryptionMode];
    id v46 = [v39 responseEncryptionMode];
    id v47 = [v39 readerAuthenticationPolicy];
    id v48 = [v39 elementFallbackModes];
    id v49 = [v39 messageEncodingFormat];

    *(void *)(v8 + 56) = v45;
    *(void *)(v8 + 64) = v46;
    *(void *)(v8 + 72) = v47;
    *(void *)(v8 + 80) = v48;
    *(void *)(v8 + 88) = v49;
    *(unsigned char *)(v8 + 96) = 0;
    a1 = v102;
  }
  else
  {
    *(void *)(v8 + 88) = 0;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(unsigned char *)(v8 + 96) = 1;
  }
  uint64_t v50 = sub_100096844(a1);
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = v50;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a4;
  if (a5)
  {
    swift_retain();
    os_log_type_t v51 = a5;
  }
  else
  {
    swift_retain_n();
    uint64_t v52 = sub_100128178();
    uint64_t v114 = type metadata accessor for FeatureFlagProvider();
    uint64_t v115 = (_UNKNOWN **)&protocol witness table for FeatureFlagProvider;
    sub_10002C3A0(v113);
    FeatureFlagProvider.init()();
    type metadata accessor for BiometricsHelper();
    swift_allocObject();
    uint64_t v53 = BiometricsHelper.init()();
    uint64_t v111 = type metadata accessor for DeviceInformationProvider();
    unint64_t v112 = (_UNKNOWN **)&protocol witness table for DeviceInformationProvider;
    sub_10002C3A0((uint64_t *)&v110);
    DeviceInformationProvider.init()();
    type metadata accessor for BiometricStorage();
    os_log_type_t v51 = (void *)swift_allocObject();
    uint64_t v51[2] = a4;
    sub_10002C404((uint64_t)v113, (uint64_t)(v51 + 8));
    v51[13] = v52;
    type metadata accessor for AppleIDVManager();
    sub_10015A018((uint64_t *)v109);
    sub_10000B9DC((uint64_t)v113);
    sub_10002C468(v109, (uint64_t)(v51 + 3));
    v51[14] = v53;
    sub_10002C468(&v110, (uint64_t)(v51 + 15));
  }
  *(void *)(v8 + 40) = v51;
  type metadata accessor for ACLFetcher();
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = v51;
  type metadata accessor for AppleIDVManager();
  swift_retain();
  swift_retain();
  sub_10015A018((uint64_t *)(v54 + 24));
  *(void *)(v8 + 48) = v54;
  uint64_t v55 = *(void *)(v8 + 56);
  *(void *)&long long v106 = v8 + 56;
  uint64_t v56 = *(void *)(v8 + 24);
  uint64_t v57 = *(void *)(v8 + 64);
  uint64_t v58 = *(void *)(v8 + 72);
  uint64_t v59 = *(void *)(v8 + 80);
  uint64_t v60 = *(void *)(v8 + 88);
  char v61 = *(unsigned char *)(v8 + 96);
  type metadata accessor for PresentmentSessionCryptor();
  uint64_t v62 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v62 + 168) = 0;
  *(void *)(v62 + 112) = v56;
  *(void *)(v62 + 120) = v55;
  *(void *)(v62 + 128) = v57;
  *(void *)(v62 + 136) = v58;
  *(void *)(v62 + 144) = v59;
  *(void *)(v62 + 152) = v60;
  *(unsigned char *)(v62 + 160) = v61;
  *(void *)(v8 + 104) = v62;
  type metadata accessor for SEPairingManager();
  swift_allocObject();
  uint64_t v63 = v108;
  swift_retain();
  uint64_t v64 = SEPairingManager.init()();
  uint64_t v65 = type metadata accessor for GenericPasswordKeychainWrapper();
  uint64_t v66 = swift_allocObject();
  uint64_t v67 = type metadata accessor for SyncableKeyStoreProvider();
  uint64_t v68 = (void *)swift_allocObject();
  v68[5] = v65;
  v68[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v68[2] = v66;
  uint64_t v114 = v67;
  uint64_t v115 = &off_1001B6F00;
  v113[0] = (uint64_t)v68;
  type metadata accessor for CredentialKeyManager();
  uint64_t v69 = (void *)swift_allocObject();
  uint64_t v70 = sub_100036D00((uint64_t)v113, v67);
  __chkstk_darwin(v70);
  uint64_t v72 = (uint64_t *)((char *)&v98 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v73 + 16))(v72);
  uint64_t v74 = *v72;
  swift_retain();
  uint64_t v75 = sub_1001631B4(v63, v64, v74, v69);
  sub_10000B9DC((uint64_t)v113);
  swift_release();
  *(void *)(v8 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_credentialKeyManager) = v75;
  uint64_t v76 = *(void *)(v8 + 16);
  sub_100037944(v8 + 56, (uint64_t)v113, &qword_1001C4210);
  uint64_t v77 = *(void *)(v8 + 32);
  uint64_t v78 = *(void *)(v8 + 104);
  uint64_t v79 = *(void *)(v8 + 48);
  type metadata accessor for PresentmentKeySelectionProvider();
  uint64_t v104 = swift_allocObject();
  uint64_t v102 = type metadata accessor for ReaderMetadataProvider(0);
  uint64_t v80 = type metadata accessor for PayloadProcessorBuilder();
  uint64_t v111 = v80;
  unint64_t v112 = &off_1001B8C60;
  uint64_t v81 = v103;
  *(void *)&long long v110 = v103;
  type metadata accessor for PresentmentRequestInterpreter(0);
  uint64_t v82 = (void *)swift_allocObject();
  uint64_t v83 = sub_100036D00((uint64_t)&v110, v80);
  id v105 = &v98;
  __chkstk_darwin(v83);
  uint64_t v85 = (uint64_t *)((char *)&v98 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v86 + 16))(v85);
  unint64_t v87 = sub_10012A144(v76, v107, (uint64_t)v113, v77, v78, v79, *v85, (uint64_t)v75, v104, v102, (uint64_t)&off_1001B5B20, v82);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000B9DC((uint64_t)&v110);
  *(void *)(v8 + 112) = v87;
  long long v88 = *(_OWORD *)v106;
  long long v106 = *(_OWORD *)(v8 + 72);
  long long v107 = v88;
  uint64_t v89 = *(void *)(v8 + 88);
  LOBYTE(v77) = *(unsigned char *)(v8 + 96);
  uint64_t v91 = *(void *)(v8 + 24);
  uint64_t v90 = *(void *)(v8 + 32);
  uint64_t v92 = *(void *)(v8 + 104);
  uint64_t v94 = *(void *)(v8 + 40);
  uint64_t v93 = *(void *)(v8 + 48);
  type metadata accessor for PresentmentResponseBuilder();
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = v91;
  *(_OWORD *)(v95 + 24) = v107;
  *(_OWORD *)(v95 + 40) = v106;
  *(void *)(v95 + 56) = v89;
  *(unsigned char *)(v95 + 64) = v77;
  *(void *)(v95 + 72) = v90;
  *(void *)(v95 + 80) = v92;
  *(void *)(v95 + 120) = v80;
  *(void *)(v95 + 88) = v93;
  *(void *)(v95 + 96) = v81;
  *(void *)(v95 + 144) = v94;
  uint64_t v96 = v108;
  *(void *)(v95 + 128) = &off_1001B8C60;
  *(void *)(v95 + 136) = v96;
  *(void *)(v8 + 120) = v95;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v8;
}

uint64_t sub_10012ADE0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10012AF00, 0, 0);
}

uint64_t sub_10012AF00()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentFlow generateTransportKey", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = *(void *)(v7 + 104);
  v0[11] = v8;
  swift_retain();
  return _swift_task_switch(sub_10012B020, v8, 0);
}

uint64_t sub_10012B020()
{
  uint64_t v1 = sub_1000555E8(v0[2], v0[3]);
  v0[12] = 0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  swift_release();
  v0[13] = v4;
  v0[14] = v2;
  return _swift_task_switch(sub_10012B0C4, 0, 0);
}

uint64_t sub_10012B0C4()
{
  v1._object = (void *)0x8000000100183160;
  v2._uint64_t countAndFlagsBits = 0x6165306264333232;
  v2._object = (void *)0xE800000000000000;
  v1._uint64_t countAndFlagsBits = 0xD00000000000004BLL;
  logMilestone(tag:description:)(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  return v3(v4, v5);
}

uint64_t sub_10012B16C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10012B2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v34 = a5;
  uint64_t v35 = a2;
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = *(void (**)(char *, void, uint64_t))(v7 + 104);
  v13((char *)&v32 - v11, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v6);
  uint64_t v14 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v18 = v12;
  uint64_t v19 = a1;
  uint64_t v20 = v35;
  v17(v18, v6);
  if (v14 == v19 && v16 == v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_13:
    uint64_t v29 = v34;
    *(void *)(v34 + 24) = &type metadata for MDLRequestValidator;
    *(void *)(v29 + 32) = &off_1001B85D0;
    goto LABEL_14;
  }
  v13(v10, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v6);
  uint64_t v23 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v25 = v24;
  v17(v10, v6);
  if (v23 == v19 && v25 == v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v34;
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v29 = v34;
    if ((v27 & 1) == 0)
    {
      *(void *)(v34 + 32) = 0;
      *(_OWORD *)uint64_t v29 = 0u;
      *(_OWORD *)(v29 + 16) = 0u;
      return result;
    }
  }
  *(void *)(v29 + 24) = &type metadata for JapanNationalIDRequestValidator;
  *(void *)(v29 + 32) = &off_1001B7390;
LABEL_14:
  unint64_t v30 = (void *)swift_allocObject();
  *(void *)uint64_t v29 = v30;
  v30[2] = v19;
  v30[3] = v20;
  uint64_t v31 = v32;
  uint64_t v30[4] = v33;
  v30[5] = v31;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_10012B550()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for PayloadProcessorAnalyticsRecorder()
{
  return &type metadata for PayloadProcessorAnalyticsRecorder;
}

char *sub_10012B5A0(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for COSE_Sign1();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100006CC8(&qword_1001C2838);
      memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = (uint64_t *)&v4[v11];
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    sub_10000354C(*v13, v15);
    *uint64_t v12 = v14;
    v12[1] = v15;
    uint64_t v16 = a3[6];
    uint64_t v17 = &v4[v16];
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for ISO18013SessionTranscript();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[7];
    uint64_t v21 = a3[8];
    char v22 = &v4[v20];
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *(void *)char v22 = *v23;
    *((void *)v22 + 1) = v24;
    *(void *)&v4[v21] = *(uint64_t *)((char *)a2 + v21);
    v4[a3[9]] = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10012B7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for COSE_Sign1();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  sub_1000035EC(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for ISO18013SessionTranscript();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return swift_release();
}

char *sub_10012B8D0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = (uint64_t *)&a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_10000354C(*v11, v13);
  uint64_t *v10 = v12;
  v10[1] = v13;
  uint64_t v14 = a3[6];
  unint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for ISO18013SessionTranscript();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  *(void *)&a1[v19] = *(void *)&a2[v19];
  a1[a3[9]] = a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

char *sub_10012BA88(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  unint64_t v13 = (uint64_t *)&a1[v12];
  uint64_t v14 = (uint64_t *)&a2[v12];
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10000354C(*v14, v16);
  uint64_t v17 = *v13;
  unint64_t v18 = v13[1];
  uint64_t *v13 = v15;
  v13[1] = v16;
  sub_1000035EC(v17, v18);
  uint64_t v19 = a3[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for ISO18013SessionTranscript();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_10012BCCC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for ISO18013SessionTranscript();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_10012BE58(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void *)&a1[v12];
  unint64_t v14 = *(void *)&a1[v12 + 8];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  sub_1000035EC(v13, v14);
  uint64_t v15 = a3[6];
  unint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for ISO18013SessionTranscript();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v23 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_10012C074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012C088);
}

uint64_t sub_10012C088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006CC8(&qword_1001C2838);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10012C1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012C1B8);
}

uint64_t sub_10012C1B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100006CC8(&qword_1001C2838);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for ISO18013SessionTranscript();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for IdentityReaderAuthenticator()
{
  uint64_t result = qword_1001C4270;
  if (!qword_1001C4270) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10012C31C()
{
  sub_100087150();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ISO18013SessionTranscript();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10012C408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012C418(a1, a2, a3);
}

uint64_t sub_10012C418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100014BBC(a1, &qword_1001C0E30);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10012C59C(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason();
  v2[33] = v3;
  v2[34] = *(void *)(v3 - 8);
  v2[35] = swift_task_alloc();
  sub_100006CC8((uint64_t *)&unk_1001C3B50);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[38] = v4;
  v2[39] = *(void *)(v4 - 8);
  v2[40] = swift_task_alloc();
  sub_100006CC8(&qword_1001C42C0);
  v2[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for IDCSAnalytics.ReaderAuthOutcome();
  v2[42] = v5;
  v2[43] = *(void *)(v5 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v2[46] = v6;
  v2[47] = *(void *)(v6 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2838);
  v2[59] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for COSE_Sign1();
  v2[60] = v7;
  v2[61] = *(void *)(v7 - 8);
  v2[62] = swift_task_alloc();
  return _swift_task_switch(sub_10012C8F8, 0, 0);
}

uint64_t sub_10012C8F8()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 472);
  sub_100037898(*(void *)(v0 + 256), v3, &qword_1001C2838);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100014BBC(*(void *)(v0 + 472), &qword_1001C2838);
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "no reader auth structure provided, skipping reader authentication", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 368);
    uint64_t v8 = *(void *)(v0 + 376);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v87 = *(void *)(v0 + 336);
    uint64_t v88 = *(void *)(v0 + 264);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    type metadata accessor for IDCSAnalytics();
    type metadata accessor for IdentityReaderAuthenticator();
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:), v87);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for IDCSAnalytics.ReaderAuthFailureReason.noAuthProvided(_:), v88);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v88);
    static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)();
    sub_100014BBC(v12, &qword_1001C42C0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v87);
    goto LABEL_34;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 488) + 32))(*(void *)(v0 + 496), *(void *)(v0 + 472), *(void *)(v0 + 480));
  uint64_t v14 = COSE_Sign1.x509Chain.getter();
  if (!v14) {
    goto LABEL_14;
  }
  if (!*(void *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_14:
    (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:), *(void *)(v0 + 304));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v22 = swift_allocError();
    goto LABEL_15;
  }
  unint64_t v15 = decodeCertificateChain(fromDER:)();
  *(void *)(v0 + 504) = v15;
  swift_bridgeObjectRelease();
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v16)
  {
LABEL_42:
    uint64_t v83 = *(void *)(v0 + 312);
    uint64_t v82 = *(void *)(v0 + 320);
    uint64_t v84 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))(v82, enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:), v84);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v22 = swift_allocError();
LABEL_15:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    id v23 = [self standardUserDefaults];
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v25 = [v23 BOOLForKey:v24];

    if (v25)
    {
      uint64_t v26 = *(void *)(v0 + 488);
      uint64_t v27 = *(void *)(v0 + 496);
      uint64_t v28 = *(void *)(v0 + 480);
      uint64_t v29 = *(void *)(v0 + 448);
      uint64_t v30 = *(void *)(v0 + 368);
      uint64_t v31 = *(void *)(v0 + 376);
      defaultLogger()();
      DIPLogError(_:message:log:)();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
      goto LABEL_34;
    }
    uint64_t v33 = *(void *)(v0 + 304);
    uint64_t v32 = *(void *)(v0 + 312);
    uint64_t v34 = *(void *)(v0 + 296);
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) != 1)
    {
      uint64_t v36 = *(void *)(v0 + 304);
      uint64_t v35 = *(void *)(v0 + 312);
      uint64_t v37 = *(void *)(v0 + 288);
      sub_100037898(*(void *)(v0 + 296), v37, (uint64_t *)&unk_1001C3B50);
      int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 88))(v37, v36);
      if (v38 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
        || v38 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
      {
        sub_100014BBC(*(void *)(v0 + 296), (uint64_t *)&unk_1001C3B50);
        defaultLogger()();
        id v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, v48))
        {
          id v49 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v49 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Encountered invalid signature during reader auth", v49, 2u);
          swift_slowDealloc();
        }
        uint64_t v50 = *(void *)(v0 + 392);
        uint64_t v52 = *(void *)(v0 + 368);
        uint64_t v51 = *(void *)(v0 + 376);

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
        int v46 = 1;
        goto LABEL_29;
      }
      if (v38 == enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
      {
        defaultLogger()();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Encountered revoked reader auth certiifcate", v41, 2u);
          swift_slowDealloc();
        }
        uint64_t v42 = *(void *)(v0 + 376);
        uint64_t v43 = *(void *)(v0 + 384);
        uint64_t v44 = *(void *)(v0 + 368);
        uint64_t v45 = *(void *)(v0 + 296);

        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
        sub_100014BBC(v45, (uint64_t *)&unk_1001C3B50);
        int v46 = 1;
        goto LABEL_29;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 304));
    }
    uint64_t v53 = *(void *)(v0 + 448);
    uint64_t v55 = *(void *)(v0 + 368);
    uint64_t v54 = *(void *)(v0 + 376);
    uint64_t v56 = *(void *)(v0 + 296);
    defaultLogger()();
    DIPLogError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    sub_100014BBC(v56, (uint64_t *)&unk_1001C3B50);
    int v46 = 0;
LABEL_29:
    int v89 = v46;
    uint64_t v57 = *(void *)(v0 + 344);
    uint64_t v86 = *(void *)(v0 + 352);
    uint64_t v59 = *(void *)(v0 + 328);
    uint64_t v58 = *(void *)(v0 + 336);
    uint64_t v61 = *(void *)(v0 + 272);
    uint64_t v60 = *(void *)(v0 + 280);
    uint64_t v62 = *(void *)(v0 + 264);
    sub_100131C38(v22, v60);
    type metadata accessor for IdentityReaderAuthenticator();
    uint64_t v63 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:);
    if (v46) {
      uint64_t v63 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.rejected(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v57 + 104))(v86, *v63, v58);
    type metadata accessor for IDCSAnalytics();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v59, v60, v62);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v59, 0, 1, v62);
    static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)();
    sub_100014BBC(v59, &qword_1001C42C0);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v86, v58);
    uint64_t v64 = *(void *)(v0 + 488);
    uint64_t v65 = *(void *)(v0 + 496);
    uint64_t v66 = *(void *)(v0 + 480);
    if (v89)
    {
      uint64_t v67 = *(void *)(v0 + 272);
      uint64_t v85 = *(void *)(v0 + 280);
      uint64_t v68 = *(void *)(v0 + 264);
      (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 304));
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v85, v68);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
LABEL_35:
      return v69();
    }
    uint64_t v70 = *(void *)(v0 + 272);
    uint64_t v71 = *(void *)(v0 + 280);
    uint64_t v72 = *(void *)(v0 + 264);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
LABEL_34:
    uint64_t v73 = *(_OWORD **)(v0 + 248);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(_OWORD *)((char *)v73 + 89) = 0u;
    v73[4] = 0u;
    v73[5] = 0u;
    v73[2] = 0u;
    v73[3] = 0u;
    *uint64_t v73 = 0u;
    v73[1] = 0u;
    uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_35;
  }
LABEL_9:
  if ((v15 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v18 = *(id *)(v15 + 32);
  }
  *(void *)(v0 + 512) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_100039828();
  *(void *)(v0 + 520) = v19;
  uint64_t v20 = v19;
  uint64_t v21 = sub_10003AD48();
  *(void *)(v0 + 528) = v21;
  uint64_t v74 = (uint64_t)v21;
  uint64_t v75 = *(void *)(v0 + 256);
  uint64_t v76 = type metadata accessor for IdentityReaderAuthenticator();
  *(void *)(v0 + 536) = v76;
  uint64_t v77 = *(int *)(v76 + 28);
  *(_DWORD *)(v0 + 568) = v77;
  uint64_t v78 = (uint64_t *)(v75 + v77);
  uint64_t v79 = *v78;
  uint64_t v80 = v78[1];
  uint64_t v81 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v81;
  void *v81 = v0;
  v81[1] = sub_10012D774;
  return sub_10012F7C8(v79, v80, v15, v20, v74);
}

uint64_t sub_10012D774(char a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(unsigned char *)(v4 + 572) = a1;
  *(void *)(v4 + 552) = a2;
  *(void *)(v4 + 560) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    os_log_type_t v5 = sub_10012EE1C;
  }
  else
  {
    os_log_type_t v5 = sub_10012D8DC;
  }
  return _swift_task_switch(v5, 0, 0);
}

unint64_t sub_10012D8DC()
{
  swift_retain();
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Verified reader certificate chain", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 560);
  unint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 464);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 376);

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v6, v8);
  sub_100130810(v5);
  if (v4)
  {
    uint64_t v10 = *(void **)(v0 + 512);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v11 = *(void *)(v0 + 320);
    uint64_t v13 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for DIPError.Code.internalError(_:), v13);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v14 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();

    swift_errorRelease();
    goto LABEL_15;
  }
  unint64_t v139 = v9;
  unint64_t v15 = (_OWORD *)(v0 + 16);
  v16._uint64_t countAndFlagsBits = 0xD000000000000028;
  v16._object = (void *)0x8000000100183300;
  v17._uint64_t countAndFlagsBits = 0x3138303730663863;
  v17._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v17, v16);
  defaultLogger()();
  id v18 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Verified reader auth signature with reader leaf certificate", v20, 2u);
    swift_slowDealloc();
  }
  uint64_t v21 = *(void **)(v0 + 512);
  uint64_t v22 = *(void *)(v0 + 456);
  uint64_t v23 = *(void *)(v0 + 368);

  v139(v22, v23);
  id v24 = v21;
  sub_100096950((uint64_t *)(v0 + 16));
  uint64_t v145 = *(void *)(v0 + 32);
  uint64_t v146 = *(void *)(v0 + 16);
  uint64_t v143 = *(void *)(v0 + 40);
  uint64_t v144 = *(void *)(v0 + 24);
  uint64_t v141 = *(void *)(v0 + 56);
  uint64_t v142 = *(void *)(v0 + 48);

  sub_100037944(v0 + 32, v0 + 200, &qword_1001C0860);
  sub_100037944(v0 + 200, v0 + 168, &qword_1001C0860);
  if (*(void *)(v0 + 176))
  {
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 168);
    sub_1000377E0();
    Collection.nilIfEmpty.getter();
    uint64_t v25 = *(void *)(v0 + 224);
    swift_bridgeObjectRelease();
    if (v25)
    {
      uint64_t v26 = *(void *)(v0 + 448);
      uint64_t v27 = *(void *)(v0 + 360);
      uint64_t v28 = *(void *)(v0 + 344);
      uint64_t v135 = *(void *)(v0 + 368);
      uint64_t v136 = *(void *)(v0 + 336);
      uint64_t v29 = *(void *)(v0 + 328);
      uint64_t v30 = *(void *)(v0 + 272);
      uint64_t v137 = *(void *)(v0 + 264);
      defaultLogger()();
      *(void *)(swift_task_alloc() + 16) = v15;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v139(v26, v135);
      type metadata accessor for IDCSAnalytics();
      (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v27, enum case for IDCSAnalytics.ReaderAuthOutcome.authenticated(_:), v136);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, 1, 1, v137);
      static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)();
      sub_100014BBC(v29, &qword_1001C42C0);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v136);
      defaultLogger()();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Reader authenticated offline successfully", v33, 2u);
        swift_slowDealloc();
      }
      uint64_t v34 = *(void *)(v0 + 552);
      uint64_t v35 = *(void *)(v0 + 536);
      uint64_t v36 = *(void *)(v0 + 440);
      uint64_t v37 = *(void *)(v0 + 368);
      uint64_t v38 = *(void *)(v0 + 256);

      v139(v36, v37);
      uint64_t v39 = *(int *)(v35 + 32);
      swift_release();
      *(void *)(v38 + v39) = v34;
      if (v34)
      {
        os_log_type_t v40 = (uint64_t *)(v0 + 424);
        defaultLogger()();
        os_log_type_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.info.getter();
        uint64_t v43 = v139;
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          uint64_t v45 = "Ongoing OCSP check in the background";
LABEL_42:
          _os_log_impl((void *)&_mh_execute_header, v41, v42, v45, v44, 2u);
          uint64_t v102 = *v40;
          swift_slowDealloc();
LABEL_44:
          char v103 = *(unsigned char *)(v0 + 572);
          uint64_t v104 = *(void *)(v0 + 368);

          v43(v102, v104);
          if (v103)
          {
            char v105 = 0;
          }
          else
          {
            char v105 = 1;
            if (*(void *)(v0 + 16) != 0x2E6173742E6C646DLL || *(void *)(v0 + 24) != 0xEF766F672E736864)
            {
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                char v105 = 1;
              }
              else {
                char v105 = 2;
              }
            }
          }
          unint64_t v106 = *(void *)(v0 + 504);
          *(unsigned char *)(*(void *)(v0 + 256) + *(int *)(*(void *)(v0 + 536) + 36)) = v105;
          if (v106 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v107 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v107 = *(void *)((*(void *)(v0 + 504) & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          uint64_t v108 = *(void *)(v0 + 504);
          if (v107 < 2)
          {
            swift_bridgeObjectRelease();
            defaultLogger()();
            long long v110 = Logger.logObject.getter();
            os_log_type_t v111 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v110, v111))
            {
              unint64_t v112 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v112 = 0;
              _os_log_impl((void *)&_mh_execute_header, v110, v111, "Reader certificate is a root CA", v112, 2u);
              swift_slowDealloc();
            }
            uint64_t v114 = *(void *)(v0 + 488);
            uint64_t v113 = *(void *)(v0 + 496);
            uint64_t v115 = *(void *)(v0 + 480);
            uint64_t v116 = *(void *)(v0 + 408);
            uint64_t v117 = *(void *)(v0 + 368);
            swift_release();

            v139(v116, v117);
            (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v115);
            uint64_t v120 = 0;
            uint64_t v121 = 0;
            uint64_t v122 = 0;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v125 = 0;
          }
          else
          {
            unint64_t result = v107 - 1;
            if ((v108 & 0xC000000000000001) != 0)
            {
              id v109 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (result >= *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                return result;
              }
              id v109 = *(id *)(v108 + 8 * result + 32);
            }
            swift_bridgeObjectRelease();
            id v118 = v109;
            sub_100096950((uint64_t *)(v0 + 64));
            uint64_t v119 = *(void *)(v0 + 488);
            uint64_t v140 = *(void *)(v0 + 496);
            uint64_t v138 = *(void *)(v0 + 480);
            uint64_t v120 = *(void *)(v0 + 64);
            uint64_t v121 = *(void *)(v0 + 72);
            uint64_t v122 = *(void *)(v0 + 80);
            uint64_t v123 = *(void *)(v0 + 88);
            uint64_t v124 = *(void *)(v0 + 96);
            uint64_t v125 = *(void *)(v0 + 104);

            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v140, v138);
          }
          uint64_t v126 = v125;
          uint64_t v127 = v124;
          uint64_t v128 = v123;
          uint64_t v129 = v122;
          uint64_t v130 = v121;
          uint64_t v131 = v120;
          uint64_t v134 = *(void *)(v0 + 512);
          char v133 = *(unsigned char *)(*(void *)(v0 + 256) + *(int *)(*(void *)(v0 + 536) + 36));
          goto LABEL_35;
        }
      }
      else
      {
        os_log_type_t v40 = (uint64_t *)(v0 + 432);
        defaultLogger()();
        os_log_type_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.info.getter();
        uint64_t v43 = v139;
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          uint64_t v45 = "No OCSP check in the background";
          goto LABEL_42;
        }
      }
      uint64_t v102 = *v40;
      goto LABEL_44;
    }
  }
  unint64_t v147 = *(void **)(v0 + 512);
  uint64_t v46 = *(void *)(v0 + 312);
  uint64_t v47 = *(void *)(v0 + 320);
  uint64_t v48 = *(void *)(v0 + 304);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v0 + 152) = *v15;
  sub_1000F11A0(v0 + 152);
  sub_1000F11A0(v0 + 200);
  sub_100037944(v0 + 48, v0 + 136, &qword_1001C0860);
  sub_1000F11A0(v0 + 136);
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v47, enum case for DIPError.Code.idcsMissingReaderOrganization(_:), v48);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v14 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_release();

LABEL_15:
  id v49 = [self standardUserDefaults];
  NSString v50 = String._bridgeToObjectiveC()();
  unsigned int v51 = [v49 BOOLForKey:v50];

  if (v51)
  {
    uint64_t v53 = *(void *)(v0 + 488);
    uint64_t v52 = *(void *)(v0 + 496);
    uint64_t v54 = *(void *)(v0 + 480);
    uint64_t v55 = *(void *)(v0 + 448);
    uint64_t v56 = *(void *)(v0 + 368);
    uint64_t v57 = *(void *)(v0 + 376);
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
LABEL_34:
    uint64_t v134 = 0;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    char v133 = 0;
LABEL_35:
    uint64_t v100 = *(void *)(v0 + 248);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(void *)uint64_t v100 = v134;
    *(void *)(v100 + 8) = v146;
    *(void *)(v100 + 16) = v144;
    *(void *)(v100 + 24) = v145;
    *(void *)(v100 + 32) = v143;
    *(void *)(v100 + 40) = v142;
    *(void *)(v100 + 48) = v141;
    *(void *)(v100 + 56) = v131;
    *(void *)(v100 + 64) = v130;
    *(void *)(v100 + 72) = v129;
    *(void *)(v100 + 80) = v128;
    *(void *)(v100 + 88) = v127;
    *(void *)(v100 + 96) = v126;
    *(unsigned char *)(v100 + 104) = v133;
    uint64_t v96 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_36;
  }
  uint64_t v58 = *(void *)(v0 + 304);
  uint64_t v59 = *(void *)(v0 + 312);
  uint64_t v60 = *(void *)(v0 + 296);
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58) == 1) {
    goto LABEL_18;
  }
  uint64_t v66 = *(void *)(v0 + 304);
  uint64_t v67 = *(void *)(v0 + 312);
  uint64_t v68 = *(void *)(v0 + 288);
  sub_100037898(*(void *)(v0 + 296), v68, (uint64_t *)&unk_1001C3B50);
  int v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 88))(v68, v66);
  if (v69 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
    || v69 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    sub_100014BBC(*(void *)(v0 + 296), (uint64_t *)&unk_1001C3B50);
    defaultLogger()();
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Encountered invalid signature during reader auth", v79, 2u);
      swift_slowDealloc();
    }
    uint64_t v80 = *(void *)(v0 + 392);
    uint64_t v81 = *(void *)(v0 + 368);
    uint64_t v82 = *(void *)(v0 + 376);

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v80, v81);
  }
  else
  {
    if (v69 != enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 304));
LABEL_18:
      uint64_t v61 = *(void *)(v0 + 448);
      uint64_t v62 = *(void *)(v0 + 368);
      uint64_t v63 = *(void *)(v0 + 376);
      uint64_t v64 = *(void *)(v0 + 296);
      defaultLogger()();
      DIPLogError(_:message:log:)();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
      sub_100014BBC(v64, (uint64_t *)&unk_1001C3B50);
      int v65 = 0;
      goto LABEL_29;
    }
    defaultLogger()();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Encountered revoked reader auth certiifcate", v72, 2u);
      swift_slowDealloc();
    }
    uint64_t v74 = *(void *)(v0 + 376);
    uint64_t v73 = *(void *)(v0 + 384);
    uint64_t v75 = *(void *)(v0 + 368);
    uint64_t v76 = *(void *)(v0 + 296);

    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    sub_100014BBC(v76, (uint64_t *)&unk_1001C3B50);
  }
  int v65 = 1;
LABEL_29:
  int v148 = v65;
  uint64_t v84 = *(void *)(v0 + 344);
  uint64_t v83 = *(void *)(v0 + 352);
  uint64_t v85 = *(void *)(v0 + 328);
  uint64_t v86 = *(void *)(v0 + 336);
  uint64_t v88 = *(void *)(v0 + 272);
  uint64_t v87 = *(void *)(v0 + 280);
  uint64_t v89 = *(void *)(v0 + 264);
  sub_100131C38(v14, v87);
  type metadata accessor for IdentityReaderAuthenticator();
  uint64_t v90 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:);
  if (v65) {
    uint64_t v90 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.rejected(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v84 + 104))(v83, *v90, v86);
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v85, v87, v89);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v89);
  static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)();
  sub_100014BBC(v85, &qword_1001C42C0);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v86);
  uint64_t v91 = *(void *)(v0 + 488);
  uint64_t v92 = *(void *)(v0 + 496);
  uint64_t v93 = *(void *)(v0 + 480);
  if (!v148)
  {
    uint64_t v98 = *(void *)(v0 + 272);
    uint64_t v97 = *(void *)(v0 + 280);
    uint64_t v99 = *(void *)(v0 + 264);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v93);
    goto LABEL_34;
  }
  uint64_t v94 = *(void *)(v0 + 272);
  uint64_t v132 = *(void *)(v0 + 280);
  uint64_t v95 = *(void *)(v0 + 264);
  (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 304));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v132, v95);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v93);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v96 = *(uint64_t (**)(void))(v0 + 8);
LABEL_36:
  return v96();
}

uint64_t sub_10012EE1C()
{
  uint64_t v87 = v0;
  uint64_t v1 = (void *)v0[64];
  int v2 = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(void, void, void))(v0[39] + 104))(v0[40], enum case for DIPError.Code.internalError(_:), v0[38]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = type metadata accessor for DIPError();
  uint64_t v85 = sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v86 = v3;
  uint64_t v4 = swift_allocError();
  HIBYTE(v62[1]) = -18;
  strcpy((char *)v62, "authenticate()");
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();

  swift_errorRelease();
  id v5 = [self standardUserDefaults:v62[0] :v62[1] :100];
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned __int8 v7 = [v5 BOOLForKey:v6];

  if (v7)
  {
    uint64_t v8 = v0[61];
    uint64_t v9 = v0[62];
    uint64_t v10 = v0[60];
    uint64_t v11 = v0[56];
    uint64_t v12 = v0[46];
    uint64_t v13 = v0[47];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    goto LABEL_20;
  }
  uint64_t v15 = v0[38];
  uint64_t v14 = v0[39];
  uint64_t v16 = v0[37];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15);
  LODWORD(v79) = v2;
  os_log_type_t v78 = "missing reader certs";
  if (v17 == 1) {
    goto LABEL_4;
  }
  uint64_t v24 = v0[38];
  uint64_t v23 = v0[39];
  uint64_t v25 = v0[36];
  sub_100037898(v0[37], v25, (uint64_t *)&unk_1001C3B50);
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v25, v24);
  if (v26 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
    || v26 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    sub_100014BBC(v0[37], (uint64_t *)&unk_1001C3B50);
    defaultLogger()();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Encountered invalid signature during reader auth", v36, 2u);
      swift_slowDealloc();
    }
    uint64_t v37 = v0[49];
    uint64_t v39 = v0[46];
    uint64_t v38 = v0[47];

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    goto LABEL_14;
  }
  if (v26 == enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
  {
    defaultLogger()();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Encountered revoked reader auth certiifcate", v29, 2u);
      swift_slowDealloc();
    }
    uint64_t v30 = v0[47];
    uint64_t v31 = v0[48];
    uint64_t v32 = v0[46];
    uint64_t v33 = v0[37];

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    sub_100014BBC(v33, (uint64_t *)&unk_1001C3B50);
LABEL_14:
    int v22 = 1;
    goto LABEL_15;
  }
  (*(void (**)(void, void))(v0[39] + 8))(v0[36], v0[38]);
LABEL_4:
  uint64_t v18 = v0[56];
  uint64_t v20 = v0[46];
  uint64_t v19 = v0[47];
  uint64_t v21 = v0[37];
  defaultLogger()();
  DIPLogError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  sub_100014BBC(v21, (uint64_t *)&unk_1001C3B50);
  int v22 = 0;
LABEL_15:
  LODWORD(v83) = v22;
  uint64_t v40 = v0[43];
  uint64_t v80 = v0[44];
  uint64_t v42 = v0[41];
  uint64_t v41 = v0[42];
  uint64_t v82 = v41;
  uint64_t v44 = v0[34];
  uint64_t v43 = v0[35];
  uint64_t v45 = v0[32];
  uint64_t v46 = v0[33];
  sub_100131C38(v4, v43);
  uint64_t v47 = v45 + *(int *)(type metadata accessor for IdentityReaderAuthenticator() + 28);
  uint64_t v48 = *(void (**)(uint64_t, void, uint64_t))(v40 + 104);
  uint64_t v84 = v4;
  uint64_t v81 = *(void *)(v47 + 8);
  id v49 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:);
  if (v22) {
    id v49 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.rejected(_:);
  }
  v48(v80, *v49, v41);
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v42, v43, v46);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v42, 0, 1, v46);
  static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)();
  sub_100014BBC(v42, &qword_1001C42C0);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v80, v82);
  uint64_t v50 = v0[61];
  uint64_t v51 = v0[62];
  uint64_t v52 = v0[60];
  if (v83)
  {
    uint64_t v65 = v0[59];
    uint64_t v66 = v0[58];
    uint64_t v67 = v0[57];
    uint64_t v68 = v0[56];
    uint64_t v69 = v0[55];
    uint64_t v70 = v0[54];
    uint64_t v71 = v0[53];
    uint64_t v72 = v0[52];
    uint64_t v73 = v0[51];
    uint64_t v74 = v0[50];
    uint64_t v75 = v0[49];
    uint64_t v76 = v0[48];
    uint64_t v77 = v0[45];
    uint64_t v80 = v0[44];
    uint64_t v81 = v0[41];
    uint64_t v53 = v0[38];
    uint64_t v54 = v0[39];
    uint64_t v82 = v0[37];
    uint64_t v83 = v0[36];
    uint64_t v55 = v0[34];
    uint64_t v63 = v0[33];
    uint64_t v64 = v0[35];
    (*(void (**)(void, void, uint64_t))(v54 + 104))(v0[40], v79, v53);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    v62[2] = 195;
    HIBYTE(v62[1]) = -18;
    strcpy((char *)v62, "authenticate()");
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v64, v63);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v52);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v56 = (uint64_t (*)(void))v0[1];
    goto LABEL_21;
  }
  uint64_t v57 = v0[34];
  uint64_t v58 = v0[35];
  uint64_t v59 = v0[33];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v52);
LABEL_20:
  uint64_t v76 = v0[51];
  uint64_t v77 = v0[50];
  os_log_type_t v78 = (const char *)v0[49];
  uint64_t v79 = v0[48];
  uint64_t v80 = v0[45];
  uint64_t v81 = v0[44];
  uint64_t v82 = v0[41];
  uint64_t v83 = v0[40];
  uint64_t v84 = v0[37];
  uint64_t v85 = v0[36];
  uint64_t v86 = v0[35];
  uint64_t v60 = (_OWORD *)v0[31];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)((char *)v60 + 89) = 0u;
  v60[4] = 0u;
  v60[5] = 0u;
  v60[2] = 0u;
  v60[3] = 0u;
  *uint64_t v60 = 0u;
  v60[1] = 0u;
  uint64_t v56 = (uint64_t (*)(void))v0[1];
LABEL_21:
  return v56();
}

uint64_t sub_10012F7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  sub_100006CC8(&qword_1001C42D8);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[18] = v8;
  v5[19] = *(void *)(v8 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_10012F9B4, 0, 0);
}

uint64_t sub_10012F9B4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Verifying trust with Apple issued roots", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[19];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[23] = v7;
  v0[24] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[25] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10012FAFC;
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[6];
  uint64_t v12 = v0[4];
  return sub_1001320F4(v12, v10, v9, v11);
}

uint64_t sub_10012FAFC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10012FEA4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(BOOL, uint64_t))(v5 + 8);
    BOOL v7 = *(void *)(v4 + 208) == 0;
    return v6(v7, a1);
  }
}

uint64_t sub_10012FCD0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100130720, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(BOOL, uint64_t))(v5 + 8);
    BOOL v7 = *(void *)(v4 + 208) == 0;
    return v6(v7, a1);
  }
}

uint64_t sub_10012FEA4()
{
  uint64_t v69 = v0;
  uint64_t v1 = v0[15];
  v0[2] = sub_1001337A8();
  sub_100006CC8(&qword_1001C0890);
  char v2 = swift_dynamicCast();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v2)
  {
    uint64_t v5 = v0[16];
    uint64_t v4 = v0[17];
    uint64_t v6 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[13];
    v3(v8, 0, 1, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v4, v8, v6);
    defaultLogger()();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v9(v5, v4, v6);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[15];
    uint64_t v13 = v0[16];
    uint64_t v15 = v0[14];
    uint64_t v62 = v9;
    if (v12)
    {
      uint64_t v64 = v0[18];
      uint64_t v66 = (void (*)(uint64_t, uint64_t))v0[23];
      uint64_t v61 = v0[20];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v17 = Error.localizedDescription.getter();
      v0[3] = sub_10004C3A4(v17, v18, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v63(v13, v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to verify trust with Apple issued roots: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v66(v61, v64);
    }
    else
    {
      uint64_t v32 = (void (*)(uint64_t, uint64_t))v0[23];
      uint64_t v33 = v0[18];
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      uint64_t v34 = v0[20];
      v63(v0[16], v15);

      v32(v34, v33);
    }
    uint64_t v67 = v0[11];
    uint64_t v35 = v0[9];
    uint64_t v36 = v0[10];
    sub_100006CC8(&qword_1001C42E8);
    uint64_t v37 = *(void *)(v36 + 72);
    unint64_t v38 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_100176D30;
    unint64_t v40 = v39 + v38;
    uint64_t v41 = *(void (**)(void))(v36 + 104);
    ((void (*)(unint64_t, void, uint64_t))v41)(v40, enum case for DIPError.Code.idcsUnknownDocumentType(_:), v35);
    v41();
    v41();
    v41();
    DIPError.code.getter();
    uint64_t v65 = *(void (**)(uint64_t, unint64_t, uint64_t))(v36 + 16);
    v65(v67, v40, v35);
    sub_1001342C4(&qword_1001C42F0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    swift_bridgeObjectRetain();
    v43(v67, v35);
    if (v42) {
      goto LABEL_14;
    }
    uint64_t v44 = v0[11];
    uint64_t v45 = v0[9];
    v65(v44, v40 + v37, v45);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    v43(v44, v45);
    if ((v46 & 1) != 0
      || (uint64_t v47 = v0[11],
          uint64_t v48 = v0[9],
          v65(v47, v40 + 2 * v37, v48),
          char v49 = dispatch thunk of static Equatable.== infix(_:_:)(),
          v43(v47, v48),
          (v49 & 1) != 0))
    {
LABEL_14:
      uint64_t v50 = v0[12];
      uint64_t v51 = v0[9];
      swift_bridgeObjectRelease();
      v43(v50, v51);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v52 = v63;
LABEL_15:
      uint64_t v53 = v0[17];
      uint64_t v54 = v0[14];
      sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      v62(v55, v53, v54);
      swift_willThrow();
      swift_errorRelease();
      v52(v53, v54);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v56 = (uint64_t (*)(void))v0[1];
      return v56(0);
    }
    uint64_t v57 = v0[11];
    uint64_t v58 = v0[12];
    uint64_t v59 = v0[9];
    v65(v57, v40 + 3 * v37, v59);
    char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
    v43(v57, v59);
    swift_bridgeObjectRelease();
    v43(v58, v59);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v52 = v63;
    if (v60) {
      goto LABEL_15;
    }
    v63(v0[17], v0[14]);
    swift_errorRelease();
  }
  else
  {
    uint64_t v19 = v0[13];
    v3(v19, 1, 1, v0[14]);
    swift_errorRelease();
    sub_100014BBC(v19, &qword_1001C42D8);
  }
  defaultLogger()();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    int v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Verifying trust with non Apple issued roots", v22, 2u);
    swift_slowDealloc();
  }
  uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[23];
  uint64_t v24 = v0[21];
  uint64_t v25 = v0[18];

  v23(v24, v25);
  int v26 = (void *)swift_task_alloc();
  v0[27] = v26;
  *int v26 = v0;
  v26[1] = sub_10012FCD0;
  uint64_t v28 = v0[6];
  uint64_t v27 = v0[7];
  uint64_t v30 = v0[4];
  uint64_t v29 = v0[5];
  return sub_1001320F4(v30, v29, v27, v28);
}

uint64_t sub_100130720()
{
  sub_1001337A8();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100130810(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v124 = a1;
  uint64_t v129 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v129 - 8);
  uint64_t v4 = __chkstk_darwin(v129);
  uint64_t v107 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v106 = (char *)&v92 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  char v105 = (char *)&v92 - v9;
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v92 - v10;
  uint64_t v102 = type metadata accessor for COSESignatureValidator();
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v108 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_100006CC8(&qword_1001C2800);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  long long v110 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006CC8(&qword_1001C1A90);
  __chkstk_darwin(v14 - 8);
  unint64_t v115 = (unint64_t)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for ISO18013SessionTranscript();
  unint64_t v112 = *(void (***)(char *, void, uint64_t))(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v113 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for ISO18013ReaderAuthentication();
  uint64_t v111 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v119 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006CC8(&qword_1001C1318);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PublicKeyAlgorithm();
  uint64_t v122 = *(void *)(v21 - 8);
  uint64_t v123 = v21;
  __chkstk_darwin(v21);
  uint64_t v121 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v125 = v23;
  uint64_t v126 = v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v100 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v99 = (char *)&v92 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v92 - v29;
  uint64_t v31 = sub_100006CC8(&qword_1001C2838);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for COSE_Sign1();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v92 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v116 = v2;
  uint64_t v39 = v38;
  sub_100037898(v2, (uint64_t)v33, &qword_1001C2838);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v39) == 1)
  {
    sub_100014BBC((uint64_t)v33, &qword_1001C2838);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, enum case for DIPError.Code.idcsMissingReaderAuth(_:), v129);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v109 = v3;
  uint64_t v98 = v35;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  id v118 = v37;
  uint64_t v97 = v39;
  v41(v37, v33, v39);
  defaultLogger()();
  char v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Verifying reader signature", v44, 2u);
    swift_slowDealloc();
  }

  uint64_t v45 = v126 + 8;
  uint64_t v93 = *(void (**)(char *, uint64_t))(v126 + 8);
  v93(v30, v125);
  char v46 = v118;
  uint64_t v47 = COSE_Sign1.signature.getter();
  unint64_t v49 = v48;
  uint64_t v50 = SecCertificateRef.rawECPublicKeyData()();
  uint64_t v52 = v109;
  if (v51 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v109 + 104))(v11, enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:), v129);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v53 = v47;
    unint64_t v54 = v49;
LABEL_9:
    sub_1000035EC(v53, v54);
    return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v46, v97);
  }
  unint64_t v55 = v51;
  uint64_t v126 = v45;
  uint64_t v94 = v50;
  uint64_t v96 = v47;
  unint64_t v95 = v49;
  SecCertificateRef.publicKeyAlgorithm()();
  uint64_t v57 = v122;
  uint64_t v56 = v123;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v20, 1, v123) == 1)
  {
    sub_100014BBC((uint64_t)v20, &qword_1001C1318);
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v11, enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:), v129);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v94, v55);
    uint64_t v53 = v96;
    unint64_t v54 = v95;
    goto LABEL_9;
  }
  unint64_t v124 = v55;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v121, v20, v56);
  uint64_t v58 = type metadata accessor for IdentityReaderAuthenticator();
  unint64_t v59 = v116;
  v112[2](v113, v116 + *(int *)(v58 + 24), v114);
  uint64_t v60 = v57;
  sub_10000354C(*(void *)(v59 + *(int *)(v58 + 20)), *(void *)(v59 + *(int *)(v58 + 20) + 8));
  uint64_t v61 = v119;
  ISO18013ReaderAuthentication.init(sessionTranscript:itemsRequestBytes:)();
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v62 = CBOREncoder.init()();
  uint64_t v63 = enum case for ISO18013PresentmentType.physical(_:);
  uint64_t v64 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v65 = *(void *)(v64 - 8);
  unint64_t v66 = v115;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v65 + 104))(v115, v63, v64);
  (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v64);
  CBOREncoder.presentmentType.setter();
  swift_allocObject();
  CBOREncoder.init()();
  sub_1001342C4(&qword_1001C42D0, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderAuthentication);
  uint64_t v67 = v120;
  uint64_t v68 = v117;
  uint64_t v69 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  uint64_t v71 = v96;
  if (v68)
  {
    swift_release();
    swift_release();
    sub_100009764(v94, v124);
    sub_1000035EC(v71, v95);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v61, v67);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v121, v123);
    return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v118, v97);
  }
  else
  {
    uint64_t v117 = v62;
    uint64_t v72 = v69;
    unint64_t v73 = v70;
    swift_release();
    uint64_t v127 = v72;
    unint64_t v128 = v73;
    swift_allocObject();
    sub_10000354C(v72, v73);
    CBOREncoder.init()();
    sub_100082FDC();
    sub_100083030();
    uint64_t v74 = v110;
    CBOREncodedCBOR.init(value:tag:encoder:)();
    uint64_t v114 = v72;
    unint64_t v115 = v73;
    uint64_t v75 = v104;
    uint64_t v76 = CBOREncodedCBOR.dataValue.getter();
    unint64_t v116 = v77;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v74, v75);
    uint64_t v78 = v109 + 104;
    uint64_t v79 = *(void (***)(char *, void, uint64_t))(v109 + 104);
    uint64_t v80 = v129;
    ((void (*)(char *, void, uint64_t))v79)(v11, enum case for DIPError.Code.idcsUnknownReaderAuthAlgorithm(_:), v129);
    ((void (*)(char *, void, uint64_t))v79)(v105, enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:), v80);
    ((void (*)(char *, void, uint64_t))v79)(v106, enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:), v80);
    uint64_t v109 = v78;
    unint64_t v112 = v79;
    ((void (*)(char *, void, uint64_t))v79)(v107, enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:), v80);
    uint64_t v113 = v11;
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)();
    COSE_Sign1.algorithmIdentifier.getter();
    uint64_t v81 = v96;
    unint64_t v82 = v95;
    uint64_t v83 = v94;
    unint64_t v84 = v124;
    unint64_t v85 = v116;
    COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)();
    sub_1000035EC(v76, v85);
    swift_release();
    sub_100009764(v83, v84);
    sub_1000035EC(v81, v82);
    sub_1000035EC(v114, v115);
    uint64_t v86 = v98;
    uint64_t v87 = v97;
    uint64_t v88 = v118;
    uint64_t v89 = v119;
    uint64_t v90 = v120;
    uint64_t v91 = v111;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v108, v102);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v90);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
    return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v88, v87);
  }
}

uint64_t sub_100131B9C()
{
  _StringGuts.grow(_:)(58);
  v0._object = (void *)0x8000000100183380;
  v0._uint64_t countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_100131C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006CC8(&qword_1001C42D8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPError();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = a1;
  swift_errorRetain();
  sub_100006CC8(&qword_1001C0890);
  int v15 = swift_dynamicCast();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v15)
  {
    v16(v10, 1, 1, v11);
    sub_100014BBC((uint64_t)v10, &qword_1001C42D8);
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.other(_:);
    goto LABEL_5;
  }
  v16(v10, 0, 1, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  DIPError.code.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v17 == enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.misformattedCertificate(_:);
LABEL_5:
    uint64_t v19 = *v18;
    uint64_t v20 = type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);
    uint64_t v22 = a2;
    uint64_t v23 = v19;
    return v21(v22, v23, v20);
  }
  if (v17 == enum case for DIPError.Code.idcsUnknownIssuerAuthAlgorithm(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.unsupportedIssuerAuthAlgorithm(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsMissingReaderAuth(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.noAuthProvided(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.missingCertificate(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.untrustedCertificate(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsMissingReaderOrganization(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.missingOrganization(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsUnknownReaderAuthAlgorithm(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.unsupportedReaderAuthAlgorithm(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.misformattedSignature(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.invalidSignature(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.revokedCertificate(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsExpiredReaderAuthCertificate(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.expiredCertificate(_:);
    goto LABEL_5;
  }
  if (v17 == enum case for DIPError.Code.idcsUnknownDocumentType(_:))
  {
    uint64_t v18 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.unknownDocumentType(_:);
    goto LABEL_5;
  }
  int v25 = enum case for DIPError.Code.idcsNotYetValidReaderAuthCertificate(_:);
  int v26 = v17;
  uint64_t v20 = type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason();
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);
  if (v26 != v25)
  {
    v21(a2, enum case for IDCSAnalytics.ReaderAuthFailureReason.other(_:), v20);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v23 = enum case for IDCSAnalytics.ReaderAuthFailureReason.notYetValidCertificate(_:);
  uint64_t v22 = a2;
  return v21(v22, v23, v20);
}

uint64_t sub_1001320F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPCertUsage();
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = *(void *)(v6 + 64);
  v4[9] = swift_task_alloc();
  sub_100006CC8(&qword_1001C0E30);
  v4[10] = swift_task_alloc();
  v4[11] = sub_100006CC8(&qword_1001C42F8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPOIDVerifier();
  v4[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[14] = v8;
  v4[15] = *(void *)(v8 + 64);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_100132298, 0, 0);
}

uint64_t sub_100132298()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = (void *)v0[3];
  v3._rawValue = (void *)v0[4];
  uint64_t v5 = v0[2];
  DIPOIDVerifier.init()();
  DIPOIDVerifier.setTrustedRoots(_:)(v3);
  uint64_t v6 = v1 + *(int *)(v2 + 48);
  sub_100132918(v1, v6, v5, v4);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[18] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100132434;
  uint64_t v8 = v0[5];
  return DIPOIDVerifier.verifyChain(_:forUsage:)(v8, v6);
}

uint64_t sub_100132434(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 152) = a1;
  *(void *)(v3 + 160) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100132834;
  }
  else {
    uint64_t v4 = sub_100132548;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100132548()
{
  if ((sub_100132D64() & 1) != 0
    || (id v1 = [self standardUserDefaults],
        v2._object = (void *)0x8000000100183500,
        v2._uint64_t countAndFlagsBits = 0xD000000000000026,
        Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2),
        v1,
        v3))
  {
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v25 = v10;
    uint64_t v26 = *(void *)(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 40);
    uint64_t v29 = v9;
    uint64_t v31 = *(void *)(v0 + 24);
    uint64_t v32 = *(void **)(v0 + 152);
    uint64_t v30 = *(void *)(v0 + 16);
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v5, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v8, v12);
    unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    unint64_t v15 = (v26 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + v15 + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v17 + v14, v4, v7);
    *(void *)(v17 + v15) = v28;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v17 + v16, v25, v12);
    uint64_t v18 = (void *)(v17 + ((v27 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
    void *v18 = v30;
    v18[1] = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_10012C418(v29, (uint64_t)&unk_1001C4308, v17);
  }
  else
  {

    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 112);
  sub_100014BBC(*(void *)(v0 + 96), &qword_1001C42F8);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v23(v19);
}

uint64_t sub_100132834()
{
  sub_100014BBC(v0[12], &qword_1001C42F8);
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100132918(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006CC8(&qword_1001C12B0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v26 - v14;
  swift_bridgeObjectRetain();
  ISO18013KnownDocTypes.init(rawValue:)();
  uint64_t v16 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    sub_100037898((uint64_t)v15, (uint64_t)v13, &qword_1001C12B0);
    int v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v13, v16);
    if (v18 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
    {
      uint64_t v19 = enum case for DIPCertUsage.iso18013ReaderAuth(_:);
      uint64_t v20 = type metadata accessor for DIPCertUsage();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);
      v21(v26, v19, v20);
      uint64_t v22 = (unsigned int *)&enum case for DIPCertUsage.iso18013ReaderAuthNoNetwork(_:);
LABEL_6:
      v21(v27, *v22, v20);
      return sub_100014BBC((uint64_t)v15, &qword_1001C12B0);
    }
    if (v18 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      uint64_t v23 = enum case for DIPCertUsage.japanNationalIDCardReaderAuth(_:);
      uint64_t v20 = type metadata accessor for DIPCertUsage();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);
      v21(v26, v23, v20);
      uint64_t v22 = (unsigned int *)&enum case for DIPCertUsage.japanNationalIDCardReaderAuthNoNetwork(_:);
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
  }
  sub_100014BBC((uint64_t)v15, &qword_1001C12B0);
  unint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t v28 = 0xD00000000000001BLL;
  unint64_t v29 = 0x80000001001835B0;
  v25._uint64_t countAndFlagsBits = a3;
  v25._object = a4;
  String.append(_:)(v25);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.idcsUnknownDocumentType(_:), v6);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

uint64_t sub_100132D64()
{
  CFDictionaryRef v1 = SecTrustCopyResult(v0);
  if (!v1) {
    goto LABEL_9;
  }
  CFDictionaryRef v2 = v1;
  if ([(__CFDictionary *)v1 objectForKey:kSecTrustRevocationChecked])
  {
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {

    memset(v6, 0, sizeof(v6));
  }
  sub_100037944((uint64_t)v6, (uint64_t)v7, &qword_1001C15C8);
  if (!v8)
  {
    sub_100014BBC((uint64_t)v7, &qword_1001C15C8);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v3 = 1;
    return v3 & 1;
  }
  char v3 = v5 ^ 1;
  return v3 & 1;
}

uint64_t sub_100132E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  uint64_t v9 = type metadata accessor for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome();
  v8[8] = v9;
  v8[9] = *(void *)(v9 - 8);
  v8[10] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError.Code();
  v8[11] = v10;
  v8[12] = *(void *)(v10 - 8);
  v8[13] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v8[14] = v11;
  v8[15] = *(void *)(v11 - 8);
  v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  return _swift_task_switch(sub_100132FDC, 0, 0);
}

uint64_t sub_100132FDC()
{
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x8000000100183500;
  v2._uint64_t countAndFlagsBits = 0xD000000000000026;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Simulating OCSP failure due to internal defaults setting", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[17];
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[15];
    uint64_t v11 = v0[12];
    uint64_t v10 = v0[13];
    uint64_t v12 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.internalError(_:), v12);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v14 = v0[9];
    uint64_t v13 = v0[10];
    uint64_t v15 = v0[8];
    sub_1001337A8();
    type metadata accessor for IDCSAnalytics();
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.revoked(_:), v15);
    static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    int v18 = (void *)swift_task_alloc();
    v0[18] = v18;
    void *v18 = v0;
    v18[1] = sub_100133378;
    uint64_t v20 = v0[4];
    uint64_t v19 = v0[5];
    return DIPOIDVerifier.verifyChain(_:forUsage:)(v20, v19);
  }
}

uint64_t sub_100133378(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 152) = a1;
  *(void *)(v3 + 160) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100133678;
  }
  else {
    uint64_t v4 = sub_10013348C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013348C()
{
  if (sub_100132D64())
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Reader certificate might have revoked certificate when making request", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[15];
    uint64_t v4 = v0[16];
    uint64_t v6 = v0[14];

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    char v15 = 1;
    uint64_t v7 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.inconclusive(_:);
  }
  else
  {
    char v15 = 0;
    uint64_t v7 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.notRevoked(_:);
  }
  uint64_t v8 = (void *)v0[19];
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[8];
  uint64_t v12 = (char *)v0[2];
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v10, *v7, v11);
  static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  *uint64_t v12 = v15;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100133678()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  sub_1001337A8();
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.revoked(_:), v3);
  static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001337A8()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v80 = (char *)v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v74 = (char *)v67 - v4;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v73 = (char *)v67 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v72 = (char *)v67 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v71 = (char *)v67 - v14;
  __chkstk_darwin(v13);
  unint64_t v70 = (char *)v67 - v15;
  uint64_t v16 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  unint64_t v77 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v67 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)v67 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)v67 - v26;
  __chkstk_darwin(v25);
  unint64_t v29 = (char *)v67 - v28;
  uint64_t v30 = static DIPOIDVerifier.getSpecificCertificateError(_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  uint64_t v79 = v29;
  v31(v29, 1, 1, v0);
  uint64_t v78 = v30;
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
  unsigned int v33 = v32(v27, 1, v0);
  uint64_t v81 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v32;
  uint64_t v82 = v1 + 48;
  if (v33 == 1) {
    goto LABEL_2;
  }
  v67[0] = v21;
  v67[1] = v1 + 56;
  uint64_t v44 = v73;
  uint64_t v69 = v31;
  uint64_t v68 = v27;
  sub_100037898((uint64_t)v27, (uint64_t)v24, (uint64_t *)&unk_1001C3B50);
  int v45 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v24, v0);
  uint64_t v43 = v1;
  uint64_t v34 = v0;
  if (v45 == enum case for DIPError.Code.revokedCertificate(_:))
  {
    char v46 = v72;
    defaultLogger()();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Encountered revoked reader auth certificate", v49, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v46, v76);
    uint64_t v40 = (uint64_t)v79;
    sub_100014BBC((uint64_t)v79, (uint64_t *)&unk_1001C3B50);
    uint64_t v50 = (unsigned int *)&enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:);
LABEL_13:
    (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))(v40, *v50, v0);
    v69((char *)v40, 0, 1, v0);
LABEL_14:
    uint64_t v39 = v80;
LABEL_15:
    uint64_t v41 = (uint64_t)v77;
    uint64_t v42 = (uint64_t)v68;
    goto LABEL_16;
  }
  if (v45 == enum case for DIPError.Code.expiredCertificate(_:))
  {
    unint64_t v51 = v71;
    defaultLogger()();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Encountered expired reader auth certificate", v54, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v51, v76);
    uint64_t v40 = (uint64_t)v79;
    sub_100014BBC((uint64_t)v79, (uint64_t *)&unk_1001C3B50);
    uint64_t v50 = (unsigned int *)&enum case for DIPError.Code.idcsExpiredReaderAuthCertificate(_:);
    goto LABEL_13;
  }
  uint64_t v58 = v69;
  if (v45 == enum case for DIPError.Code.notYetValidCertificate(_:))
  {
    defaultLogger()();
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Encountered not yet valid reader auth certificate", v61, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v76);
    uint64_t v40 = (uint64_t)v79;
    sub_100014BBC((uint64_t)v79, (uint64_t *)&unk_1001C3B50);
    (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v40, enum case for DIPError.Code.idcsNotYetValidReaderAuthCertificate(_:), v34);
    v58((char *)v40, 0, 1, v34);
    goto LABEL_14;
  }
  if (v45 == enum case for DIPError.Code.idcsUnknownDocumentType(_:))
  {
    uint64_t v62 = v70;
    defaultLogger()();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Encountered unknown document type", v65, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v62, v76);
    swift_getErrorValue();
    uint64_t v66 = v67[0];
    Error.dipErrorCode.getter();
    uint64_t v40 = (uint64_t)v79;
    sub_100014BBC((uint64_t)v79, (uint64_t *)&unk_1001C3B50);
    sub_100037944(v66, v40, (uint64_t *)&unk_1001C3B50);
    uint64_t v39 = v80;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v24, v34);
  uint64_t v27 = v68;
  uint64_t v0 = v34;
LABEL_2:
  uint64_t v34 = v0;
  uint64_t v35 = v27;
  defaultLogger()();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Encountered generic reader auth certificate failure", v38, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v75 + 8))(v8, v76);
  uint64_t v40 = (uint64_t)v79;
  uint64_t v39 = v80;
  uint64_t v41 = (uint64_t)v77;
  uint64_t v42 = (uint64_t)v35;
  uint64_t v43 = v1;
LABEL_16:
  sub_100014BBC(v42, (uint64_t *)&unk_1001C3B50);
  sub_100037898(v40, v41, (uint64_t *)&unk_1001C3B50);
  if (v81(v41, 1, v34) == 1)
  {
    sub_100014BBC(v41, (uint64_t *)&unk_1001C3B50);
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v39, enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:), v34);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v55 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v56 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v74, v41, v34);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v56, v34);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001342C4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v55 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v56, v34);
  }
  sub_100014BBC(v40, (uint64_t *)&unk_1001C3B50);
  return v55;
}

uint64_t sub_1001342BC()
{
  return sub_100131B9C();
}

uint64_t sub_1001342C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013430C()
{
  uint64_t v1 = type metadata accessor for DIPOIDVerifier();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for DIPCertUsage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v10, v12);
}

uint64_t sub_10013449C(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for DIPOIDVerifier() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for DIPCertUsage() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = v1 + v9;
  uint64_t v15 = (uint64_t *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v18;
  void *v18 = v3;
  v18[1] = sub_100007458;
  return sub_100132E4C(a1, v10, v11, v12, v13, v14, v16, v17);
}

uint64_t destroy for IdentityReaderAuthenticator.Result(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for IdentityReaderAuthenticator.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  id v9 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v8;
    uint64_t v10 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v10;
    uint64_t v11 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for IdentityReaderAuthenticator.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (_OWORD *)(a1 + 56);
  uint64_t v8 = (_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v9)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100134930(a1 + 56);
      long long v11 = *(_OWORD *)(a2 + 72);
      long long v10 = *(_OWORD *)(a2 + 88);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 72) = v11;
      *(_OWORD *)(a1 + 88) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v8;
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    *uint64_t v7 = v12;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t sub_100134930(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for IdentityReaderAuthenticator.Result(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for IdentityReaderAuthenticator.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  if (!v8)
  {
    sub_100134930(a1 + 56);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_6;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityReaderAuthenticator.Result(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityReaderAuthenticator.Result(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityReaderAuthenticator.Result()
{
  return &type metadata for IdentityReaderAuthenticator.Result;
}

ValueMetadata *type metadata accessor for CertificateKnownIssuer()
{
  return &type metadata for CertificateKnownIssuer;
}

unsigned char *_s7idcredd24ServerRevocationResponseOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100134C20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerRevocationResponse()
{
  return &type metadata for ServerRevocationResponse;
}

unint64_t sub_100134C5C()
{
  unint64_t result = qword_1001C4310;
  if (!qword_1001C4310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C4310);
  }
  return result;
}

unint64_t sub_100134CB4()
{
  unint64_t result = qword_1001C4318;
  if (!qword_1001C4318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C4318);
  }
  return result;
}

ValueMetadata *type metadata accessor for MDLRequestValidator()
{
  return &type metadata for MDLRequestValidator;
}

uint64_t sub_100134D28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v58 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v6 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  long long v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v59 = a3;
  uint64_t v50 = v8;
  unint64_t v51 = v12;
  uint64_t v52 = v9;
  if (v17)
  {
    uint64_t v56 = v6;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_10004C3A4(a1, a2, &v61);
    uint64_t v6 = v56;
    a3 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Validating doctype %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v19 = v52;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v19 = v9;
  }
  unint64_t v49 = *(void (**)(char *, uint64_t))(v19 + 8);
  v49(v14, v8);
  uint64_t v20 = *(void *)(a3 + 64);
  uint64_t v53 = a3 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v54 = (unint64_t)(v21 + 63) >> 6;
  LODWORD(v56) = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
  uint64_t v55 = (void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v24 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v26 = 0;
  uint64_t v27 = v58;
  while (1)
  {
    if (v23)
    {
      unint64_t v28 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v29 = v28 | (v26 << 6);
    }
    else
    {
      int64_t v30 = v26 + 1;
      if (__OFADD__(v26, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      if (v30 >= v54) {
        goto LABEL_35;
      }
      unint64_t v31 = *(void *)(v53 + 8 * v30);
      ++v26;
      if (!v31)
      {
        int64_t v26 = v30 + 1;
        if (v30 + 1 >= v54) {
          goto LABEL_35;
        }
        unint64_t v31 = *(void *)(v53 + 8 * v26);
        if (!v31)
        {
          int64_t v26 = v30 + 2;
          if (v30 + 2 >= v54) {
            goto LABEL_35;
          }
          unint64_t v31 = *(void *)(v53 + 8 * v26);
          if (!v31)
          {
            int64_t v32 = v30 + 3;
            if (v32 >= v54)
            {
LABEL_35:
              swift_release();
              return 1;
            }
            unint64_t v31 = *(void *)(v53 + 8 * v32);
            if (!v31)
            {
              while (1)
              {
                int64_t v26 = v32 + 1;
                if (__OFADD__(v32, 1)) {
                  goto LABEL_39;
                }
                if (v26 >= v54) {
                  goto LABEL_35;
                }
                unint64_t v31 = *(void *)(v53 + 8 * v26);
                ++v32;
                if (v31) {
                  goto LABEL_24;
                }
              }
            }
            int64_t v26 = v32;
          }
        }
      }
LABEL_24:
      unint64_t v23 = (v31 - 1) & v31;
      unint64_t v29 = __clz(__rbit64(v31)) + (v26 << 6);
    }
    unsigned int v33 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v29);
    uint64_t v35 = *v33;
    unint64_t v34 = v33[1];
    uint64_t v36 = *(void *)(*(void *)(a3 + 56) + 8 * v29);
    os_log_type_t v37 = v57;
    (*v55)(v57, v56, v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v38 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v40 = v39;
    (*v24)(v37, v27);
    if (v38 == v35 && v40 == v34)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    char v43 = sub_100135398(v36);
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0) {
      break;
    }
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    a3 = v59;
  }
  uint64_t v44 = v51;
  defaultLogger()();
  swift_bridgeObjectRetain();
  int v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_10004C3A4(v35, v34, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Validation for namespace %s has failed", v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v49(v44, v50);
  swift_release();
  return 0;
}

uint64_t sub_10013538C()
{
  return sub_100134D28(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100135398(uint64_t a1)
{
  v21[0] = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v21[0] - 8);
  __chkstk_darwin(v21[0]);
  unsigned int v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  int64_t v12 = 0;
  do
  {
    if (v8)
    {
      v8 &= v8 - 1;
    }
    else
    {
      int64_t v14 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      if (v14 >= v9) {
        goto LABEL_24;
      }
      uint64_t v15 = *(void *)(v5 + 8 * v14);
      ++v12;
      if (!v15)
      {
        int64_t v12 = v14 + 1;
        if (v14 + 1 >= v9) {
          goto LABEL_24;
        }
        uint64_t v15 = *(void *)(v5 + 8 * v12);
        if (!v15)
        {
          int64_t v12 = v14 + 2;
          if (v14 + 2 >= v9) {
            goto LABEL_24;
          }
          uint64_t v15 = *(void *)(v5 + 8 * v12);
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v9) {
              goto LABEL_24;
            }
            uint64_t v15 = *(void *)(v5 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v12 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_30;
                }
                if (v12 >= v9) {
                  goto LABEL_24;
                }
                uint64_t v15 = *(void *)(v5 + 8 * v12);
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v16;
          }
        }
      }
LABEL_20:
      uint64_t v8 = (v15 - 1) & v15;
    }
    swift_bridgeObjectRetain();
    char v13 = static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)();
    uint64_t result = swift_bridgeObjectRelease();
  }
  while ((v13 & 1) == 0 || !__OFADD__(v11++, 1));
  __break(1u);
LABEL_24:
  swift_release();
  if (v11 >= 3)
  {
    defaultLogger()();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      v21[1] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Rejecting request because it contains %ld age over elements", v20, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, void))(v2 + 8))(v4, v21[0]);
  }
  return v11 < 3;
}

void *sub_100135658(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v6) {
      break;
    }
    char v13 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a3 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a3 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      id v11 = v9;
      a1(&v12, &v11);

      if (v3) {
        return (void *)swift_release();
      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8) {
        return v13;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001357C8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v12++, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_27;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v12 + 2;
        if (v12 + 2 >= v10) {
          goto LABEL_27;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v12 + 3;
          if (v12 + 3 >= v10) {
            goto LABEL_27;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v12 + 4;
            if (v12 + 4 >= v10)
            {
LABEL_27:
              swift_release();
              char v18 = 0;
              return v18 & 1;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_30;
                }
                if (v12 >= v10) {
                  goto LABEL_27;
                }
                unint64_t v16 = *(void *)(v6 + 8 * v12);
                ++v17;
                if (v16) {
                  goto LABEL_18;
                }
              }
            }
          }
        }
      }
      int64_t v12 = v17;
    }
LABEL_18:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_19:
    char v19 = *(unsigned char *)(*(void *)(a3 + 56) + v14);
    uint64_t result = a1(&v19);
    if (v3)
    {
      swift_release();
      return v18 & 1;
    }
    if (result)
    {
      swift_release();
      char v18 = 1;
      return v18 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100135970(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v15 = v7;
      char v10 = a1(&v15);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      char v11 = v10;

      if (v11)
      {
        swift_bridgeObjectRelease();
        char v12 = 1;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  char v12 = 0;
  return v12 & 1;
}

uint64_t sub_100135AA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0;
    id v7 = (uint64_t *)(a3 + 40);
    uint64_t v8 = _swiftEmptyArrayStorage;
    id v15 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      char v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v11)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        char v19 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100068310(0, v8[2] + 1, 1);
          uint64_t v8 = v19;
        }
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          uint64_t result = sub_100068310(v12 > 1, v13 + 1, 1);
          uint64_t v8 = v19;
        }
        v8[2] = v13 + 1;
        unint64_t v14 = &v8[2 * v13];
        v14[4] = v10;
        v14[5] = v9;
        uint64_t v4 = a3;
        uint64_t v5 = v15;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_100135C20(id *a1, uint64_t a2)
{
  id v3 = [*a1 elementIdentifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = (void *)(a2 + *(int *)(type metadata accessor for ElementFallback(0) + 28));
  if (v4 == *v7 && v6 == v7[1]) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v9 & 1;
}

void sub_100135CCC(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *a1;
  id v10 = [v9 elementIdentifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  unint64_t v14 = (void *)(a2 + *(int *)(type metadata accessor for ElementFallback(0) + 28));
  if (v11 == *v14 && v13 == v14[1])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      *a3 = v9;
      id v17 = v9;
      return;
    }
  }
  defaultLogger()();
  id v18 = v9;
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v35 = a3;
  if (v21)
  {
    uint64_t v34 = v6;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v22 = 136315138;
    v31[1] = v22 + 4;
    int64_t v32 = v22;
    id v23 = [v18 elementIdentifier];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v37 = sub_10004C3A4(v24, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Updating intent to retain for %s to true because it is the destination of a fallback", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v34);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v6);
  }
  id v27 = [v18 elementIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v28 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v28 initWithElementIdentifier:v29 intentToRetain:1];

  *uint64_t v35 = v30;
}

uint64_t type metadata accessor for ElementFallbackProcessor()
{
  return self;
}

void *sub_100136050(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        sub_100006CC8(&qword_1001C12D8);
        uint64_t v7 = swift_allocObject();
        *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
        id v8 = [v5 elementIdentifier];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        *(void *)(v7 + 32) = v9;
        *(void *)(v7 + 40) = v11;
        sub_100006CC8(&qword_1001C3C70);
        sub_10013792C();
        LOBYTE(v8) = Collection<>.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if (v8)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v3;
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100136240(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v189 = a5;
  uint64_t v198 = a2;
  uint64_t v203 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v203 - 8);
  uint64_t v9 = __chkstk_darwin(v203);
  uint64_t v11 = (char *)v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v185 - v12;
  uint64_t v14 = type metadata accessor for CredentialElement(0);
  uint64_t v201 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v194 = (uint64_t)v185 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v216 = (void *)((char *)v185 - v17);
  uint64_t v210 = type metadata accessor for ElementFallback(0);
  uint64_t v18 = __chkstk_darwin(v210);
  uint64_t v188 = (uint64_t)v185 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v187 = (uint64_t)v185 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v209 = (uint64_t)v185 - v23;
  __chkstk_darwin(v22);
  unint64_t v26 = (void *)((char *)v185 - v25);
  id v220 = a3;
  uint64_t v219 = a4;
  uint64_t v193 = *(void *)(a1 + 16);
  if (!v193)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v182 = 0;
    v183 = 0;
    goto LABEL_129;
  }
  uint64_t v192 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  uint64_t v191 = *(void *)(v24 + 72);
  uint64_t v202 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v200 = &v218;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v185[0] = a1;
  swift_bridgeObjectRetain();
  uint64_t v196 = 0;
  v195 = 0;
  uint64_t v27 = 0;
  *(void *)&long long v28 = 136315394;
  long long v186 = v28;
  v185[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v28 = 136315650;
  long long v199 = v28;
  uint64_t v190 = v11;
  v204 = v13;
  unint64_t v205 = v26;
  uint64_t v29 = v209;
  while (1)
  {
    uint64_t v197 = v27 + 1;
    sub_1000D948C(v192 + v191 * v27, (uint64_t)v26, type metadata accessor for ElementFallback);
    uint64_t v30 = v220[8];
    unsigned int v206 = v220 + 8;
    uint64_t v31 = 1 << *((unsigned char *)v220 + 32);
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    else {
      uint64_t v32 = -1;
    }
    unint64_t v33 = v32 & v30;
    int64_t v207 = (unint64_t)(v31 + 63) >> 6;
    unsigned int v208 = v220;
    swift_bridgeObjectRetain();
    int64_t v34 = 0;
    if (v33)
    {
      do
      {
        while (1)
        {
          uint64_t v214 = (v33 - 1) & v33;
          unint64_t v35 = __clz(__rbit64(v33)) | (v34 << 6);
LABEL_25:
          uint64_t v39 = (uint64_t *)(v208[6] + 16 * v35);
          uint64_t v40 = *v39;
          uint64_t v41 = (void *)v39[1];
          uint64_t v42 = *(void *)(v208[7] + 8 * v35);
          char v43 = *(uint64_t (**)(uint64_t, void *))((char *)v26 + *(int *)(v210 + 32));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v213 = v40;
          LOBYTE(v40) = v43(v40, v41);
          swift_release();
          if (v40) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v33 = v214;
          if (!v214) {
            goto LABEL_14;
          }
        }
        uint64_t v215 = v41;
        int64_t v44 = *(void *)(v42 + 16);
        int64_t v211 = v34;
        if (v44)
        {
          v218 = _swiftEmptyArrayStorage;
          sub_100068310(0, v44, 0);
          uint64_t v45 = v42 + ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80));
          uint64_t v46 = *(void *)(v201 + 72);
          uint64_t v47 = v218;
          do
          {
            uint64_t v48 = v216;
            sub_1000D948C(v45, (uint64_t)v216, type metadata accessor for CredentialElement);
            uint64_t v49 = *v48;
            uint64_t v50 = v48[1];
            swift_bridgeObjectRetain();
            sub_10013788C((uint64_t)v48, type metadata accessor for CredentialElement);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100068310(0, v47[2] + 1, 1);
              uint64_t v47 = v218;
            }
            unint64_t v52 = v47[2];
            unint64_t v51 = v47[3];
            if (v52 >= v51 >> 1)
            {
              sub_100068310(v51 > 1, v52 + 1, 1);
              uint64_t v47 = v218;
            }
            v47[2] = v52 + 1;
            uint64_t v53 = &v47[2 * v52];
            v53[4] = v49;
            v53[5] = v50;
            v45 += v46;
            --v44;
          }
          while (v44);
          uint64_t v54 = swift_bridgeObjectRelease();
          uint64_t v13 = v204;
          unint64_t v26 = v205;
          uint64_t v29 = v209;
          int64_t v34 = v211;
        }
        else
        {
          uint64_t v54 = swift_bridgeObjectRelease();
          uint64_t v47 = _swiftEmptyArrayStorage;
        }
        __chkstk_darwin(v54);
        uint64_t v55 = v212;
        uint64_t v56 = v213;
        v185[-4] = v26;
        v185[-3] = v56;
        uint64_t v57 = (uint64_t)v215;
        v185[-2] = v215;
        uint64_t v58 = sub_100135AA8((uint64_t)sub_100137870, (uint64_t)&v185[-6], (uint64_t)v47);
        uint64_t v212 = v55;
        uint64_t v59 = v220;
        if (v220[2])
        {
          swift_bridgeObjectRetain();
          unint64_t v60 = sub_10013C484(v56, v57);
          if (v61)
          {
            uint64_t v62 = *(void *)(v59[7] + 8 * v60);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            uint64_t v63 = v212;
            os_log_type_t v64 = sub_100137B74(v62, v58);
            uint64_t v212 = v63;
            uint64_t v65 = (uint64_t)v215;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v218 = v59;
            uint64_t v67 = (uint64_t)v64;
            int64_t v34 = v211;
            sub_1001698E0(v67, v56, v65, isUniquelyReferenced_nonNull_native);
            id v220 = v218;
            swift_bridgeObjectRelease();
            goto LABEL_40;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        sub_100170834(v56, v57);
        swift_bridgeObjectRelease();
        uint64_t v65 = (uint64_t)v215;
LABEL_40:
        swift_bridgeObjectRelease();
        uint64_t v68 = v219;
        if (!v219[2]) {
          goto LABEL_44;
        }
        swift_bridgeObjectRetain();
        unint64_t v69 = sub_10013C484(v56, v65);
        if ((v70 & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_44:
          swift_bridgeObjectRetain();
          sub_100170990(v56, v65);
          swift_bridgeObjectRelease();
          uint64_t v74 = (uint64_t)v215;
          goto LABEL_45;
        }
        unint64_t v71 = *(void *)(v68[7] + 8 * v69);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v72 = v212;
        unint64_t v73 = sub_100136050(v71);
        uint64_t v212 = v72;
        uint64_t v74 = (uint64_t)v215;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        char v75 = swift_isUniquelyReferenced_nonNull_native();
        v218 = v68;
        uint64_t v76 = (uint64_t)v73;
        int64_t v34 = v211;
        sub_100169A8C(v76, v56, v74, v75);
        uint64_t v219 = v218;
        swift_bridgeObjectRelease();
LABEL_45:
        swift_bridgeObjectRelease();
        defaultLogger()();
        sub_1000D948C((uint64_t)v26, v29, type metadata accessor for ElementFallback);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc();
          uint64_t v215 = (void *)swift_slowAlloc();
          v218 = v215;
          *(_DWORD *)uint64_t v79 = v199;
          swift_bridgeObjectRetain();
          uint64_t v217 = sub_10004C3A4(v213, v74, (uint64_t *)&v218);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v79 + 12) = 2080;
          uint64_t v80 = (uint64_t *)(v209 + *(int *)(v210 + 28));
          uint64_t v81 = *v80;
          unint64_t v82 = v80[1];
          swift_bridgeObjectRetain();
          uint64_t v217 = sub_10004C3A4(v81, v82, (uint64_t *)&v218);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10013788C(v209, type metadata accessor for ElementFallback);
          *(_WORD *)(v79 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v83 = Array.description.getter();
          unint64_t v85 = v84;
          swift_bridgeObjectRelease();
          uint64_t v86 = v83;
          uint64_t v13 = v204;
          uint64_t v217 = sub_10004C3A4(v86, v85, (uint64_t *)&v218);
          uint64_t v29 = v209;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Removing elements from namespace %s due to fallback %s: %s", (uint8_t *)v79, 0x20u);
          swift_arrayDestroy();
          int64_t v34 = v211;
          swift_slowDealloc();
          unint64_t v26 = v205;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          sub_10013788C(v29, type metadata accessor for ElementFallback);

          swift_bridgeObjectRelease_n();
        }
        (*v202)(v13, v203);
        unint64_t v33 = v214;
      }
      while (v214);
    }
LABEL_14:
    if (__OFADD__(v34++, 1))
    {
      __break(1u);
      goto LABEL_131;
    }
    if (v34 < v207)
    {
      unint64_t v37 = v206[v34];
      if (v37) {
        goto LABEL_24;
      }
      int64_t v38 = v34 + 1;
      if (v34 + 1 < v207)
      {
        unint64_t v37 = v206[v38];
        if (v37) {
          goto LABEL_23;
        }
        int64_t v38 = v34 + 2;
        if (v34 + 2 < v207)
        {
          unint64_t v37 = v206[v38];
          if (v37) {
            goto LABEL_23;
          }
          int64_t v38 = v34 + 3;
          if (v34 + 3 < v207) {
            break;
          }
        }
      }
    }
LABEL_54:
    swift_release();
    uint64_t v88 = v26[4];
    uint64_t v87 = v26[5];
    uint64_t v89 = v220;
    if (!v220[2]) {
      goto LABEL_68;
    }
    swift_bridgeObjectRetain();
    unint64_t v90 = sub_10013C484(v88, v87);
    if ((v91 & 1) == 0
      || (uint64_t v92 = *(void *)(v89[7] + 8 * v90),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          (uint64_t v93 = *(void *)(v92 + 16)) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_68:
      char v100 = 0;
      goto LABEL_69;
    }
    uint64_t v94 = (uint64_t *)((char *)v26 + *(int *)(v210 + 28));
    uint64_t v95 = *v94;
    uint64_t v96 = v94[1];
    uint64_t v97 = *(void *)(v201 + 72);
    uint64_t v98 = (void *)(v92
                   + ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80))
                   + 8);
    while (1)
    {
      BOOL v99 = *(v98 - 1) == v95 && *v98 == v96;
      if (v99 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      uint64_t v98 = (void *)((char *)v98 + v97);
      if (!--v93)
      {
        swift_bridgeObjectRelease();
        char v100 = 0;
        unint64_t v26 = v205;
        goto LABEL_69;
      }
    }
    swift_bridgeObjectRelease();
    char v100 = 1;
    unint64_t v26 = v205;
LABEL_69:
    uint64_t v101 = v219;
    if (v219[2])
    {
      swift_bridgeObjectRetain();
      unint64_t v102 = sub_10013C484(v88, v87);
      if (v103)
      {
        unint64_t v104 = *(void *)(v101[7] + 8 * v102);
        swift_bridgeObjectRetain();
        uint64_t v105 = swift_bridgeObjectRelease();
        __chkstk_darwin(v105);
        v185[-2] = v26;
        uint64_t v106 = v212;
        LODWORD(v215) = sub_100135970(sub_10013790C, (uint64_t)&v185[-4], v104);
        uint64_t v212 = v106;
        swift_bridgeObjectRelease();
        if (v100) {
          goto LABEL_88;
        }
        goto LABEL_75;
      }
      swift_bridgeObjectRelease();
    }
    LODWORD(v215) = 0;
    if (v100) {
      goto LABEL_88;
    }
LABEL_75:
    uint64_t v107 = v26[4];
    uint64_t v108 = v26[5];
    sub_1000D948C((uint64_t)v26 + *(int *)(v210 + 28), v194, type metadata accessor for CredentialElement);
    swift_bridgeObjectRetain();
    sub_100006E40((uint64_t)v196);
    char v109 = swift_isUniquelyReferenced_nonNull_native();
    v218 = v89;
    unint64_t v111 = sub_10013C484(v107, v108);
    uint64_t v112 = v89[2];
    BOOL v113 = (v110 & 1) == 0;
    uint64_t v114 = v112 + v113;
    if (__OFADD__(v112, v113)) {
      goto LABEL_132;
    }
    char v115 = v110;
    if (v89[3] >= v114)
    {
      if ((v109 & 1) == 0)
      {
        sub_10009A5D0();
        uint64_t v89 = v218;
      }
    }
    else
    {
      sub_1000983F8(v114, v109);
      uint64_t v89 = v218;
      unint64_t v116 = sub_10013C484(v107, v108);
      if ((v115 & 1) != (v117 & 1)) {
        goto LABEL_134;
      }
      unint64_t v111 = v116;
    }
    id v220 = v89;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((v115 & 1) == 0)
    {
      sub_100168F44(v111, v107, v108, (uint64_t)_swiftEmptyArrayStorage, v89);
      swift_bridgeObjectRetain();
    }
    uint64_t v118 = v89[7];
    swift_bridgeObjectRelease();
    unint64_t v119 = *(void *)(v118 + 8 * v111);
    char v120 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v118 + 8 * v111) = v119;
    if ((v120 & 1) == 0)
    {
      unint64_t v119 = sub_1000D0F9C(0, *(void *)(v119 + 16) + 1, 1, v119);
      *(void *)(v118 + 8 * v111) = v119;
    }
    unint64_t v26 = v205;
    unint64_t v122 = *(void *)(v119 + 16);
    unint64_t v121 = *(void *)(v119 + 24);
    if (v122 >= v121 >> 1)
    {
      unint64_t v119 = sub_1000D0F9C(v121 > 1, v122 + 1, 1, v119);
      *(void *)(v118 + 8 * v111) = v119;
    }
    *(void *)(v119 + 16) = v122 + 1;
    sub_1000913D8(v194, v119+ ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80))+ *(void *)(v201 + 72) * v122);
    swift_bridgeObjectRelease();
    uint64_t v196 = sub_1000EC028;
LABEL_88:
    uint64_t v123 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
    if (!*(void *)(v123 + 16))
    {
      int v133 = 0;
      goto LABEL_98;
    }
    uint64_t v125 = *v26;
    uint64_t v124 = v26[1];
    swift_bridgeObjectRetain();
    unint64_t v126 = sub_10013C484(v125, v124);
    if (v127)
    {
      uint64_t v128 = *(void *)(*(void *)(v123 + 56) + 8 * v126);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v128 + 16))
      {
        int v133 = 0;
        goto LABEL_98;
      }
      uint64_t v130 = v26[2];
      uint64_t v129 = v26[3];
      swift_bridgeObjectRetain();
      unint64_t v131 = sub_10013C484(v130, v129);
      if (v132) {
        int v133 = *(unsigned __int8 *)(*(void *)(v128 + 56) + v131);
      }
      else {
        int v133 = 0;
      }
    }
    else
    {
      int v133 = 0;
    }
    swift_bridgeObjectRelease();
LABEL_98:
    swift_bridgeObjectRelease();
    uint64_t v134 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
    uint64_t v136 = v26[4];
    uint64_t v135 = v26[5];
    if (!*(void *)(v134 + 16)) {
      goto LABEL_108;
    }
    swift_bridgeObjectRetain();
    unint64_t v137 = sub_10013C484(v136, v135);
    if ((v138 & 1) == 0) {
      goto LABEL_107;
    }
    uint64_t v139 = *(void *)(*(void *)(v134 + 56) + 8 * v137);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v139 + 16))
    {
      uint64_t v140 = (uint64_t *)((char *)v26 + *(int *)(v210 + 28));
      uint64_t v141 = *v140;
      uint64_t v142 = v140[1];
      swift_bridgeObjectRetain();
      unint64_t v143 = sub_10013C484(v141, v142);
      if (v144)
      {
        int v145 = *(unsigned __int8 *)(*(void *)(v139 + 56) + v143);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v215 & 1) == 0) {
          goto LABEL_114;
        }
        if (v133 != v145) {
          goto LABEL_110;
        }
        goto LABEL_5;
      }
LABEL_107:
      swift_bridgeObjectRelease();
    }
LABEL_108:
    swift_bridgeObjectRelease();
    if ((v215 & 1) == 0)
    {
      LOBYTE(v145) = 0;
LABEL_114:
      swift_bridgeObjectRetain();
      uint64_t v155 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter();
      uint64_t v156 = sub_1000BA634(v133 | v145, v155, v189);
      swift_bridgeObjectRelease();
      id v157 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
      NSString v158 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v159 = [v157 initWithElementIdentifier:v158 intentToRetain:v156];

      swift_bridgeObjectRetain();
      uint64_t v160 = v159;
      sub_100006E40((uint64_t)v195);
      char v161 = swift_isUniquelyReferenced_nonNull_native();
      v218 = v101;
      unint64_t v163 = sub_10013C484(v136, v135);
      uint64_t v164 = v101[2];
      BOOL v165 = (v162 & 1) == 0;
      uint64_t v166 = v164 + v165;
      if (__OFADD__(v164, v165)) {
        goto LABEL_133;
      }
      char v167 = v162;
      if (v101[3] >= v166)
      {
        if ((v161 & 1) == 0)
        {
          sub_10009AC94();
          uint64_t v101 = v218;
        }
      }
      else
      {
        sub_100098E24(v166, v161);
        uint64_t v101 = v218;
        unint64_t v168 = sub_10013C484(v136, v135);
        if ((v167 & 1) != (v169 & 1)) {
          goto LABEL_134;
        }
        unint64_t v163 = v168;
      }
      unint64_t v26 = v205;
      uint64_t v219 = v101;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if ((v167 & 1) == 0)
      {
        sub_100168F44(v163, v136, v135, (uint64_t)_swiftEmptyArrayStorage, v101);
        swift_bridgeObjectRetain();
      }
      uint64_t v170 = v101[7];
      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v170 + 8 * v163) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v170 + 8 * v163) & 0xFFFFFFFFFFFFFF8)
                                                                                                 + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      uint64_t v171 = v190;
      defaultLogger()();
      uint64_t v172 = v187;
      sub_1000D948C((uint64_t)v26, v187, type metadata accessor for ElementFallback);
      uint64_t v173 = v188;
      sub_1000D948C((uint64_t)v26, v188, type metadata accessor for ElementFallback);
      uint64_t v174 = Logger.logObject.getter();
      os_log_type_t v175 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v174, v175))
      {
        uint64_t v176 = swift_slowAlloc();
        v218 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v176 = v186;
        uint64_t v177 = *(void *)(v172 + 16);
        unint64_t v178 = *(void *)(v172 + 24);
        swift_bridgeObjectRetain();
        uint64_t v217 = sub_10004C3A4(v177, v178, (uint64_t *)&v218);
        uint64_t v215 = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10013788C(v172, type metadata accessor for ElementFallback);
        *(_WORD *)(v176 + 12) = 2080;
        uint64_t v179 = (uint64_t *)(v173 + *(int *)(v210 + 28));
        uint64_t v180 = *v179;
        unint64_t v181 = v179[1];
        swift_bridgeObjectRetain();
        uint64_t v217 = sub_10004C3A4(v180, v181, (uint64_t *)&v218);
        unint64_t v26 = v205;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10013788C(v173, type metadata accessor for ElementFallback);
        _os_log_impl((void *)&_mh_execute_header, v174, v175, "Adding element due to %s fallback: %s", (uint8_t *)v176, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v202)(v190, v203);
      }
      else
      {

        sub_10013788C(v172, type metadata accessor for ElementFallback);
        sub_10013788C(v173, type metadata accessor for ElementFallback);

        (*v202)(v171, v203);
      }
      v195 = sub_1000EC028;
      goto LABEL_5;
    }
    if (v133)
    {
LABEL_110:
      if (v101[2])
      {
        swift_bridgeObjectRetain();
        unint64_t v146 = sub_10013C484(v136, v135);
        uint64_t v29 = v209;
        if (v147)
        {
          unint64_t v148 = *(void *)(v101[7] + 8 * v146);
          swift_bridgeObjectRetain();
          uint64_t v149 = swift_bridgeObjectRelease();
          __chkstk_darwin(v149);
          v185[-2] = v26;
          uint64_t v150 = v212;
          uint64_t v151 = sub_100135658((void (*)(uint64_t *__return_ptr, id *))sub_1001378EC, (uint64_t)&v185[-4], v148);
          uint64_t v212 = v150;
          swift_bridgeObjectRelease();
          uint64_t v152 = v26[4];
          uint64_t v153 = v26[5];
          swift_bridgeObjectRetain();
          char v154 = swift_isUniquelyReferenced_nonNull_native();
          v218 = v101;
          sub_100169A8C((uint64_t)v151, v152, v153, v154);
          uint64_t v219 = v218;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v204;
        goto LABEL_6;
      }
    }
LABEL_5:
    uint64_t v13 = v204;
    uint64_t v29 = v209;
LABEL_6:
    sub_10013788C((uint64_t)v26, type metadata accessor for ElementFallback);
    uint64_t v27 = v197;
    if (v197 == v193)
    {
      swift_bridgeObjectRelease();
      a3 = v220;
      v182 = v196;
      v183 = v195;
LABEL_129:
      sub_100006E40((uint64_t)v182);
      sub_100006E40((uint64_t)v183);
      return (uint64_t)a3;
    }
  }
  unint64_t v37 = v206[v38];
  if (v37)
  {
LABEL_23:
    int64_t v34 = v38;
LABEL_24:
    uint64_t v214 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v34 << 6);
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v34 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v34 >= v207) {
      goto LABEL_54;
    }
    unint64_t v37 = v206[v34];
    ++v38;
    if (v37) {
      goto LABEL_24;
    }
  }
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100137870(uint64_t *a1)
{
  return sub_100139070(a1) & 1;
}

uint64_t sub_10013788C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1001378EC(void **a1@<X0>, void *a2@<X8>)
{
  sub_100135CCC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10013790C(id *a1)
{
  return sub_100135C20(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t sub_10013792C()
{
  unint64_t result = qword_1001C43B8[0];
  if (!qword_1001C43B8[0])
  {
    sub_100016F64(&qword_1001C3C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001C43B8);
  }
  return result;
}

uint64_t sub_100137988(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 40;
    uint64_t v15 = -(uint64_t)v1;
    unint64_t v14 = *(void *)(result + 16);
    do
    {
      if (v2 <= v1) {
        unint64_t v4 = v1;
      }
      else {
        unint64_t v4 = v2;
      }
      uint64_t v5 = -(uint64_t)v4;
      for (uint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
      {
        if (v5 + v2 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v7 = *(i - 1);
        uint64_t v8 = *i;
        sub_100006CC8(&qword_1001C12D8);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_1001768E0;
        *(void *)(v9 + 32) = v7;
        *(void *)(v9 + 40) = v8;
        swift_bridgeObjectRetain_n();
        sub_100006CC8(&qword_1001C3C70);
        sub_10013792C();
        char v10 = Collection<>.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          break;
        }
        unint64_t result = swift_bridgeObjectRelease();
        ++v2;
        if (v15 + v2 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = sub_100068310(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v1 = v14;
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        unint64_t result = sub_100068310(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v7;
      v13[5] = v8;
    }
    while (v15 + v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

void *sub_100137B74(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for CredentialElement(0) - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v10 = (uint64_t *)((char *)&v22 - v9);
  unint64_t result = _swiftEmptyArrayStorage;
  long long v28 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = *(void *)(v8 + 72);
    uint64_t v22 = v2;
    uint64_t v23 = (v13 + 32) & ~v13;
    uint64_t v15 = a1 + v23;
    uint64_t v16 = _swiftEmptyArrayStorage;
    long long v24 = xmmword_1001768E0;
    do
    {
      sub_1000D948C(v15, (uint64_t)v10, type metadata accessor for CredentialElement);
      uint64_t v27 = v25;
      sub_100006CC8(&qword_1001C12D8);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v24;
      uint64_t v18 = v10[1];
      *(void *)(v17 + 32) = *v10;
      *(void *)(v17 + 40) = v18;
      uint64_t v26 = v17;
      swift_bridgeObjectRetain();
      sub_100006CC8(&qword_1001C3C70);
      sub_10013792C();
      char v19 = Collection<>.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v19)
      {
        sub_10013788C((uint64_t)v10, type metadata accessor for CredentialElement);
      }
      else
      {
        sub_1000913D8((uint64_t)v10, (uint64_t)v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000682D4(0, v16[2] + 1, 1);
        }
        uint64_t v16 = v28;
        unint64_t v21 = v28[2];
        unint64_t v20 = v28[3];
        if (v21 >= v20 >> 1)
        {
          sub_1000682D4(v20 > 1, v21 + 1, 1);
          uint64_t v16 = v28;
        }
        void v16[2] = v21 + 1;
        sub_1000913D8((uint64_t)v7, (uint64_t)v16 + v23 + v21 * v14);
      }
      v15 += v14;
      --v12;
    }
    while (v12);
    return v28;
  }
  return result;
}

uint64_t sub_100137DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CredentialElement(0);
  uint64_t v158 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v162 = (uint64_t)v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v171 - 8);
  uint64_t v11 = __chkstk_darwin(v171);
  uint64_t v156 = (char *)v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v152 - v13;
  uint64_t v15 = a1;
  uint64_t v177 = type metadata accessor for ElementFallback(0);
  uint64_t v16 = __chkstk_darwin(v177);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v20 = (char *)v152 - v19;
  __chkstk_darwin(v18);
  uint64_t v25 = (char *)v152 - v24;
  uint64_t v183 = a2;
  uint64_t v182 = a3;
  uint64_t v161 = *(void *)(v15 + 16);
  if (!v161)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v150 = 0;
    uint64_t v149 = 0;
    goto LABEL_123;
  }
  uint64_t v154 = v23;
  uint64_t v155 = v22;
  uint64_t v160 = v15 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  uint64_t v159 = *(void *)(v21 + 72);
  uint64_t v170 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v166 = (uint64_t *)&v181;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v152[0] = v15;
  swift_bridgeObjectRetain();
  unint64_t v163 = 0;
  id v157 = 0;
  uint64_t v26 = 0;
  *(void *)&long long v27 = 136315394;
  long long v153 = v27;
  v152[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v27 = 136315650;
  long long v165 = v27;
  char v167 = v14;
  char v169 = v20;
  uint64_t v172 = v25;
  while (2)
  {
    sub_1000D948C(v160 + v159 * v26, (uint64_t)v25, type metadata accessor for ElementFallback);
    if (v182) {
      unint64_t v28 = v182;
    }
    else {
      unint64_t v28 = sub_10004AA18((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v164 = v26 + 1;
    uint64_t v29 = *(void *)(v28 + 64);
    unint64_t v174 = v28 + 64;
    uint64_t v30 = 1 << *(unsigned char *)(v28 + 32);
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v32 = v31 & v29;
    int64_t v175 = (unint64_t)(v30 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v33 = 0;
    unint64_t v176 = v28;
    while (1)
    {
      if (v32)
      {
        uint64_t v179 = (v32 - 1) & v32;
        unint64_t v34 = __clz(__rbit64(v32)) | (v33 << 6);
        goto LABEL_27;
      }
      if (__OFADD__(v33++, 1))
      {
        __break(1u);
        goto LABEL_125;
      }
      if (v33 >= v175) {
        goto LABEL_53;
      }
      unint64_t v36 = *(void *)(v174 + 8 * v33);
      if (!v36) {
        break;
      }
LABEL_26:
      uint64_t v179 = (v36 - 1) & v36;
      unint64_t v34 = __clz(__rbit64(v36)) + (v33 << 6);
LABEL_27:
      int64_t v38 = (uint64_t *)(*(void *)(v28 + 48) + 16 * v34);
      uint64_t v39 = *v38;
      unint64_t v40 = v38[1];
      uint64_t v41 = *(void *)(*(void *)(v28 + 56) + 8 * v34);
      uint64_t v42 = *(uint64_t (**)(uint64_t, unint64_t))&v25[*(int *)(v177 + 32)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v43 = (uint64_t)v25;
      char v44 = v42(v39, v40);
      uint64_t v45 = swift_release();
      if ((v44 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = (char *)v43;
        goto LABEL_13;
      }
      __chkstk_darwin(v45);
      v152[-4] = v43;
      v152[-3] = v39;
      v152[-2] = v40;
      uint64_t v46 = sub_100135AA8((uint64_t)sub_100137870, (uint64_t)&v152[-6], v41);
      uint64_t v47 = v46;
      uint64_t v48 = v182;
      int64_t v178 = v33;
      if (!v182)
      {
        swift_bridgeObjectRelease();
        uint64_t v56 = v183;
        if (v183) {
          goto LABEL_42;
        }
        goto LABEL_34;
      }
      uint64_t v49 = v46;
      if (*(void *)(v182 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v50 = sub_10013C484(v39, v40);
        if (v51)
        {
          uint64_t v52 = *(void *)(*(void *)(v48 + 56) + 8 * v50);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v52)
          {
            swift_bridgeObjectRetain();
            uint64_t v53 = sub_100137988(v52);
            uint64_t v47 = v49;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v181 = (void *)v48;
            uint64_t v55 = v53;
            uint64_t v14 = v167;
            sub_10016990C(v55, v39, v40, isUniquelyReferenced_nonNull_native);
            uint64_t v182 = (uint64_t)v181;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRetain();
      sub_100170860(v39, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = v49;
LABEL_41:
      int64_t v33 = v178;
      uint64_t v56 = v183;
      if (v183)
      {
LABEL_42:
        uint64_t v57 = v47;
        if (*(void *)(v56 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v58 = sub_10013C484(v39, v40);
          if (v59)
          {
            uint64_t v60 = *(void *)(*(void *)(v56 + 56) + 8 * v58);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v60)
            {
              swift_bridgeObjectRetain();
              char v61 = sub_100137B74(v60, v57);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              char v62 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v181 = (void *)v56;
              uint64_t v63 = (uint64_t)v61;
              uint64_t v14 = v167;
              sub_1001698E0(v63, v39, v40, v62);
              uint64_t v183 = (uint64_t)v181;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_48:
              int64_t v33 = v178;
              goto LABEL_49;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRetain();
        sub_100170834(v39, v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
LABEL_34:
      swift_bridgeObjectRelease();
LABEL_49:
      defaultLogger()();
      uint64_t v64 = (uint64_t)v169;
      sub_1000D948C(v43, (uint64_t)v169, type metadata accessor for ElementFallback);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        uint64_t v168 = swift_slowAlloc();
        unint64_t v181 = (void *)v168;
        *(_DWORD *)uint64_t v67 = v165;
        uint64_t v173 = v4;
        swift_bridgeObjectRetain();
        uint64_t v180 = sub_10004C3A4(v39, v40, (uint64_t *)&v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v67 + 12) = 2080;
        uint64_t v68 = (uint64_t *)(v64 + *(int *)(v177 + 28));
        uint64_t v69 = *v68;
        unint64_t v70 = v68[1];
        swift_bridgeObjectRetain();
        uint64_t v180 = sub_10004C3A4(v69, v70, (uint64_t *)&v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10013788C(v64, type metadata accessor for ElementFallback);
        *(_WORD *)(v67 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v71 = Array.description.getter();
        unint64_t v73 = v72;
        swift_bridgeObjectRelease();
        uint64_t v180 = sub_10004C3A4(v71, v73, (uint64_t *)&v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        int64_t v33 = v178;
        swift_bridgeObjectRelease_n();
        uint64_t v4 = v173;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Removing elements from namespace %s due to fallback %s: %s", (uint8_t *)v67, 0x20u);
        swift_arrayDestroy();
        uint64_t v14 = v167;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        sub_10013788C(v64, type metadata accessor for ElementFallback);

        swift_bridgeObjectRelease_n();
      }
      (*v170)(v14, v171);
      uint64_t v25 = v172;
LABEL_13:
      unint64_t v28 = v176;
      unint64_t v32 = v179;
    }
    int64_t v37 = v33 + 1;
    if (v33 + 1 >= v175) {
      goto LABEL_53;
    }
    unint64_t v36 = *(void *)(v174 + 8 * v37);
    if (v36) {
      goto LABEL_25;
    }
    int64_t v37 = v33 + 2;
    if (v33 + 2 >= v175) {
      goto LABEL_53;
    }
    unint64_t v36 = *(void *)(v174 + 8 * v37);
    if (v36)
    {
LABEL_25:
      int64_t v33 = v37;
      goto LABEL_26;
    }
    int64_t v37 = v33 + 3;
    if (v33 + 3 < v175)
    {
      unint64_t v36 = *(void *)(v174 + 8 * v37);
      if (!v36)
      {
        while (1)
        {
          int64_t v33 = v37 + 1;
          if (__OFADD__(v37, 1)) {
            break;
          }
          if (v33 >= v175) {
            goto LABEL_53;
          }
          unint64_t v36 = *(void *)(v174 + 8 * v33);
          ++v37;
          if (v36) {
            goto LABEL_26;
          }
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      goto LABEL_25;
    }
LABEL_53:
    swift_release();
    uint64_t v74 = (void *)v183;
    if (!v183 || !*(void *)(v183 + 16))
    {
LABEL_66:
      LODWORD(v80) = 2;
      goto LABEL_67;
    }
    uint64_t v75 = *((void *)v25 + 4);
    uint64_t v76 = *((void *)v25 + 5);
    swift_bridgeObjectRetain();
    unint64_t v77 = sub_10013C484(v75, v76);
    if ((v78 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    uint64_t v79 = *(void *)(v74[7] + 8 * v77);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = *(void *)(v79 + 16);
    if (v80)
    {
      uint64_t v81 = v4;
      unint64_t v82 = &v25[*(int *)(v177 + 28)];
      uint64_t v83 = *(void *)v82;
      uint64_t v84 = *((void *)v82 + 1);
      uint64_t v85 = *(void *)(v158 + 72);
      uint64_t v86 = (void *)(v79
                     + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80))
                     + 8);
      while (1)
      {
        BOOL v87 = *(v86 - 1) == v83 && *v86 == v84;
        if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v86 = (void *)((char *)v86 + v85);
        if (!--v80)
        {
          swift_bridgeObjectRelease();
          goto LABEL_117;
        }
      }
      swift_bridgeObjectRelease();
      LODWORD(v80) = 1;
LABEL_117:
      uint64_t v4 = v81;
      uint64_t v14 = v167;
      uint64_t v25 = v172;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_67:
    uint64_t v88 = (void *)v182;
    uint64_t v173 = v4;
    if (!v182 || !*(void *)(v182 + 16))
    {
LABEL_81:
      int v100 = 2;
      if (!v74) {
        goto LABEL_97;
      }
      goto LABEL_82;
    }
    uint64_t v89 = *((void *)v25 + 4);
    uint64_t v90 = *((void *)v25 + 5);
    swift_bridgeObjectRetain();
    unint64_t v91 = sub_10013C484(v89, v90);
    if ((v92 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_81;
    }
    uint64_t v93 = *(void *)(v88[7] + 8 * v91);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v94 = *(void *)(v93 + 16);
    if (v94)
    {
      uint64_t v95 = &v172[*(int *)(v177 + 28)];
      uint64_t v96 = *(void *)v95;
      uint64_t v97 = *((void *)v95 + 1);
      uint64_t v98 = (void *)(v93 + 40);
      while (1)
      {
        BOOL v99 = *(v98 - 1) == v96 && *v98 == v97;
        if (v99 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v98 += 2;
        if (!--v94) {
          goto LABEL_78;
        }
      }
      swift_bridgeObjectRelease();
      int v100 = 1;
      uint64_t v25 = v172;
      if (!v74) {
        goto LABEL_97;
      }
    }
    else
    {
LABEL_78:
      swift_bridgeObjectRelease();
      int v100 = 0;
      uint64_t v25 = v172;
      if (!v74) {
        goto LABEL_97;
      }
    }
LABEL_82:
    if (v80 != 2 && (v80 & 1) == 0)
    {
      uint64_t v102 = *((void *)v25 + 4);
      uint64_t v101 = *((void *)v25 + 5);
      sub_1000D948C((uint64_t)&v25[*(int *)(v177 + 28)], v162, type metadata accessor for CredentialElement);
      swift_bridgeObjectRetain();
      sub_100006E40((uint64_t)v163);
      char v103 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v181 = v74;
      unint64_t v105 = sub_10013C484(v102, v101);
      uint64_t v106 = v74[2];
      BOOL v107 = (v104 & 1) == 0;
      uint64_t v108 = v106 + v107;
      if (__OFADD__(v106, v107)) {
        goto LABEL_126;
      }
      char v109 = v104;
      if (v74[3] >= v108)
      {
        if ((v103 & 1) == 0)
        {
          sub_10009A5D0();
          uint64_t v74 = v181;
        }
      }
      else
      {
        sub_1000983F8(v108, v103);
        uint64_t v74 = v181;
        unint64_t v110 = sub_10013C484(v102, v101);
        if ((v109 & 1) != (v111 & 1)) {
          goto LABEL_128;
        }
        unint64_t v105 = v110;
      }
      uint64_t v14 = v167;
      uint64_t v183 = (uint64_t)v74;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if ((v109 & 1) == 0)
      {
        sub_100168F44(v105, v102, v101, (uint64_t)_swiftEmptyArrayStorage, v74);
        swift_bridgeObjectRetain();
      }
      uint64_t v112 = v74[7];
      swift_bridgeObjectRelease();
      unint64_t v113 = *(void *)(v112 + 8 * v105);
      char v114 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v112 + 8 * v105) = v113;
      if ((v114 & 1) == 0)
      {
        unint64_t v113 = sub_1000D0F9C(0, *(void *)(v113 + 16) + 1, 1, v113);
        *(void *)(v112 + 8 * v105) = v113;
      }
      unint64_t v116 = *(void *)(v113 + 16);
      unint64_t v115 = *(void *)(v113 + 24);
      if (v116 >= v115 >> 1)
      {
        unint64_t v113 = sub_1000D0F9C(v115 > 1, v116 + 1, 1, v113);
        *(void *)(v112 + 8 * v105) = v113;
      }
      *(void *)(v113 + 16) = v116 + 1;
      sub_1000913D8(v162, v113+ ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80))+ *(void *)(v158 + 72) * v116);
      swift_bridgeObjectRelease();
      unint64_t v163 = sub_1000EC028;
      uint64_t v25 = v172;
    }
LABEL_97:
    uint64_t v26 = v164;
    if (v100)
    {
      uint64_t v4 = v173;
    }
    else
    {
      if (v88)
      {
        uint64_t v118 = *((void *)v25 + 4);
        uint64_t v117 = *((void *)v25 + 5);
        unint64_t v119 = &v25[*(int *)(v177 + 28)];
        uint64_t v121 = *(void *)v119;
        uint64_t v120 = *((void *)v119 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100006E40((uint64_t)v157);
        char v122 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v181 = v88;
        unint64_t v124 = sub_10013C484(v118, v117);
        uint64_t v125 = v88[2];
        BOOL v126 = (v123 & 1) == 0;
        uint64_t v127 = v125 + v126;
        if (__OFADD__(v125, v126)) {
          goto LABEL_127;
        }
        char v128 = v123;
        if (v88[3] >= v127)
        {
          if ((v122 & 1) == 0)
          {
            sub_10009AAA0();
            uint64_t v88 = v181;
          }
        }
        else
        {
          sub_100098B18(v127, v122);
          uint64_t v88 = v181;
          unint64_t v129 = sub_10013C484(v118, v117);
          if ((v128 & 1) != (v130 & 1)) {
            goto LABEL_128;
          }
          unint64_t v124 = v129;
        }
        uint64_t v182 = (uint64_t)v88;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((v128 & 1) == 0)
        {
          sub_100168F44(v124, v118, v117, (uint64_t)_swiftEmptyArrayStorage, v88);
          swift_bridgeObjectRetain();
        }
        uint64_t v131 = v88[7];
        swift_bridgeObjectRelease();
        char v132 = *(char **)(v131 + 8 * v124);
        char v133 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v131 + 8 * v124) = v132;
        if ((v133 & 1) == 0)
        {
          char v132 = sub_1000D0D48(0, *((void *)v132 + 2) + 1, 1, v132);
          *(void *)(v131 + 8 * v124) = v132;
        }
        unint64_t v135 = *((void *)v132 + 2);
        unint64_t v134 = *((void *)v132 + 3);
        if (v135 >= v134 >> 1)
        {
          char v132 = sub_1000D0D48((char *)(v134 > 1), v135 + 1, 1, v132);
          *(void *)(v131 + 8 * v124) = v132;
        }
        uint64_t v25 = v172;
        *((void *)v132 + 2) = v135 + 1;
        uint64_t v136 = &v132[16 * v135];
        *((void *)v136 + 4) = v121;
        *((void *)v136 + 5) = v120;
        swift_bridgeObjectRelease();
        id v157 = sub_1000EC028;
        uint64_t v14 = v167;
      }
      unint64_t v137 = v156;
      defaultLogger()();
      uint64_t v138 = v154;
      sub_1000D948C((uint64_t)v25, v154, type metadata accessor for ElementFallback);
      uint64_t v139 = v155;
      sub_1000D948C((uint64_t)v25, v155, type metadata accessor for ElementFallback);
      uint64_t v140 = Logger.logObject.getter();
      os_log_type_t v141 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v140, v141))
      {
        uint64_t v142 = swift_slowAlloc();
        uint64_t v179 = swift_slowAlloc();
        unint64_t v181 = (void *)v179;
        *(_DWORD *)uint64_t v142 = v153;
        uint64_t v143 = *(void *)(v138 + 16);
        unint64_t v144 = *(void *)(v138 + 24);
        swift_bridgeObjectRetain();
        uint64_t v180 = sub_10004C3A4(v143, v144, (uint64_t *)&v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10013788C(v138, type metadata accessor for ElementFallback);
        *(_WORD *)(v142 + 12) = 2080;
        int v145 = (uint64_t *)(v139 + *(int *)(v177 + 28));
        unint64_t v146 = v137;
        uint64_t v147 = *v145;
        unint64_t v148 = v145[1];
        swift_bridgeObjectRetain();
        uint64_t v180 = sub_10004C3A4(v147, v148, (uint64_t *)&v181);
        uint64_t v25 = v172;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10013788C(v139, type metadata accessor for ElementFallback);
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "Adding element due to %s fallback: %s", (uint8_t *)v142, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v14 = v167;
        (*v170)(v146, v171);
      }
      else
      {
        sub_10013788C(v138, type metadata accessor for ElementFallback);
        sub_10013788C(v139, type metadata accessor for ElementFallback);

        (*v170)(v137, v171);
      }
      uint64_t v4 = v173;
      uint64_t v26 = v164;
    }
    sub_10013788C((uint64_t)v25, type metadata accessor for ElementFallback);
    if (v26 != v161) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  a2 = v183;
  uint64_t v149 = v157;
  uint64_t v150 = v163;
LABEL_123:
  sub_100006E40((uint64_t)v150);
  sub_100006E40((uint64_t)v149);
  return a2;
}

uint64_t sub_100139070(uint64_t *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = type metadata accessor for ElementFallback(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + *(int *)(v7 + 36)))(v2, v4, v5, v6) & 1;
}

uint64_t sub_1001390E8()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001391A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = *v1;
  uint64_t v3 = v19;
  uint64_t v4 = *(void *)(v19 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v20 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = (char *)v1 + *(void *)(v3 + 128);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v14, v5);
  uint64_t v15 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v13, v4);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  uint64_t v16 = v21;
  uint64_t result = sub_10013A044();
  if (!v16)
  {
    (*(void (**)(uint64_t))(*(void *)(v19 + 88) + 16))(result);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v4);
    uint64_t v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v11, v5);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v14, v18, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1001394AC(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 32) = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = *(void *)(v5 - 8);
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1001395A8, v2, 0);
}

uint64_t sub_1001395A8()
{
  sub_1001391A8(*(void *)(v0 + 56));
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 32) + 88) + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 8) + **(int **)(v1 + 8));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100015370;
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 80);
  return v7(v4, v5, v3, v1);
}

uint64_t sub_100139704(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = *v1;
  v2[4] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001397FC, v1, 0);
}

uint64_t sub_1001397FC()
{
  sub_1001391A8(v0[7]);
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 88) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 16) + **(int **)(v1 + 16));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000157CC;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  return v6(v4, v3, v1);
}

uint64_t sub_100139954(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = *v1;
  v2[4] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100139A4C, v1, 0);
}

uint64_t sub_100139A4C()
{
  sub_1001391A8(v0[7]);
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 88) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 32) + **(int **)(v1 + 32));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100015370;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  return v6(v4, v3, v1);
}

uint64_t sub_100139BA4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = *v2;
  v3[5] = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100139CA0, v2, 0);
}

uint64_t sub_100139CA0()
{
  sub_1001391A8(v0[8]);
  uint64_t v1 = *(void *)(*(void *)(v0[5] + 88) + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 24) + **(int **)(v1 + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100015E38;
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  return v7(v5, v4, v3, v1);
}

uint64_t sub_100139DF8()
{
  v1[2] = v0;
  uint64_t v2 = *v0;
  v1[3] = *v0;
  uint64_t v3 = *(void *)(v2 + 80);
  v1[4] = v3;
  v1[5] = *(void *)(v3 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_100139EF0, v0, 0);
}

uint64_t sub_100139EF0()
{
  sub_1001391A8(v0[6]);
  uint64_t v1 = *(void *)(*(void *)(v0[3] + 88) + 8);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 40) + **(int **)(v1 + 40));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100016728;
  uint64_t v3 = v0[4];
  return v5(v3, v1);
}

uint64_t sub_10013A044()
{
  uint64_t v27 = type metadata accessor for DIPError.Code();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
  uint64_t v34 = *(void *)(v31 - 8);
  uint64_t v2 = __chkstk_darwin(v31);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for HPKEEncryptedMessageAlgorithm();
  uint64_t v28 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v10 = JSONDecoder.init()();
  sub_10013CA0C(&qword_1001C4500, (void (*)(uint64_t))&type metadata accessor for HPKEEncryptedMessageAlgorithm);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  if (!v0)
  {
    uint64_t v25 = v4;
    uint64_t v26 = v7;
    uint64_t v12 = v29;
    uint64_t v11 = v30;
    HPKEEncryptedMessageAlgorithm.algorithm.getter();
    uint64_t v13 = v31;
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v6, v31);
    uint64_t v15 = v9;
    if (v14 == enum case for HPKEEncryptionParamsAlgorithmIdentifier.HPKE_v1(_:))
    {
      uint64_t v10 = sub_10013B88C();
      uint64_t v23 = v28;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v26);
      return v10;
    }
    uint64_t v24 = v9;
    if (v14 == enum case for HPKEEncryptionParamsAlgorithmIdentifier.HPKE_KW_v1(_:))
    {
      uint64_t v10 = sub_10013A6B0();
      uint64_t v23 = v28;
      uint64_t v15 = v24;
      goto LABEL_8;
    }
    uint64_t v16 = v12;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v12, enum case for DIPError.Code.internalError(_:), v27);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10013CA0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v17 = v34;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v13);
    uint64_t v18 = v25;
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v19._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v19._object = (void *)0x8000000100183790;
    String.append(_:)(v19);
    unint64_t v20 = v24;
    HPKEEncryptedMessageAlgorithm.algorithm.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v13);
    v21._uint64_t countAndFlagsBits = 0x74616D726F6620;
    v21._object = (void *)0xE700000000000000;
    String.append(_:)(v21);
    uint64_t v10 = v32;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v16, enum case for DIPError.Code.idcsPayloadDecryptionFailureHPKE(_:), v27);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10013CA0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v26);
  }
  return v10;
}

uint64_t sub_10013A6B0()
{
  uint64_t v1 = v0;
  uint64_t v90 = type metadata accessor for Logger();
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v88 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for HPKEParams();
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  unint64_t v91 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C44A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v96 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for AEADKey();
  uint64_t v97 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v94 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HPKEPrivateKey();
  uint64_t v101 = *(void *)(v7 - 8);
  uint64_t v102 = v7;
  __chkstk_darwin(v7);
  int v100 = (uint64_t *)((char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for HPKESuiteKwV1();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v98 = v9;
  uint64_t v99 = v10;
  __chkstk_darwin(v9);
  char v103 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006CC8(&qword_1001C44B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v111 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006CC8(&qword_1001C44B8);
  uint64_t v105 = *(void *)(v14 - 8);
  uint64_t v106 = v14;
  __chkstk_darwin(v14);
  char v104 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for DIPError.Code();
  uint64_t v107 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v108 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006CC8(&qword_1001C44C0);
  uint64_t v110 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  Swift::String v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100006CC8(&qword_1001C44C8);
  uint64_t v112 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v24 = JSONDecoder.init()();
  uint64_t v25 = v1;
  sub_1000A2DFC(&qword_1001C44D0, &qword_1001C44C8);
  uint64_t v26 = v20;
  unint64_t v27 = v113;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v27)
  {
    uint64_t v28 = v111;
    unint64_t v113 = 0;
    uint64_t v87 = v17;
    swift_release();
    HPKEEncryptedMessageWithKeyWrap.getMessages()();
    if (shouldIncludeUnencryptedData()())
    {
      uint64_t v29 = v26;
      uint64_t v30 = v87;
      SealedMessage.unencryptedData.getter();
      uint64_t v31 = v109;
      if (!v115)
      {
        (*(void (**)(char *, void, uint64_t))(v107 + 104))(v108, enum case for DIPError.Code.idcsPayloadDecryptionDigitalIDMissing(_:), v109);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v34 = v22;
        uint64_t v24 = type metadata accessor for DIPError();
        sub_10013CA0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_12;
      }
      uint64_t v24 = Data.init(base64Encoded:options:)();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      if (v33 >> 60 == 15)
      {
        (*(void (**)(char *, void, uint64_t))(v107 + 104))(v108, enum case for DIPError.Code.idcsPayloadDecryptionFailureB64Decode(_:), v31);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v34 = v22;
        uint64_t v24 = type metadata accessor for DIPError();
        sub_10013CA0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
LABEL_12:
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v19, v30);
        (*(void (**)(char *, uint64_t))(v112 + 8))(v34, v29);
        return v24;
      }
      uint64_t v85 = v22;
      (*(void (**)(char *, uint64_t))(v110 + 8))(v19, v30);
      uint64_t v47 = (void (**)(char *, uint64_t))(v112 + 8);
      uint64_t v48 = v26;
LABEL_14:
      (*v47)(v85, v48);
      return v24;
    }
    uint64_t v86 = v19;
    HPKEEncryptedMessageWithKeyWrap.getKeys()();
    uint64_t v35 = v105;
    uint64_t v36 = v26;
    uint64_t v37 = v106;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v28, 1, v106) == 1)
    {
      sub_100014BBC(v28, &qword_1001C44B0);
      (*(void (**)(char *, void, uint64_t))(v107 + 104))(v108, enum case for DIPError.Code.idcsPayloadDecryptionFailureMissingKeys(_:), v109);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v24 = type metadata accessor for DIPError();
      sub_10013CA0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v86, v87);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v22, v36);
      return v24;
    }
    uint64_t v84 = v36;
    uint64_t v85 = v22;
    int64_t v38 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v104, v28, v37);
    uint64_t v39 = *(void **)(v25 + 128);
    uint64_t v41 = v100;
    uint64_t v40 = v101;
    *int v100 = v39;
    (*(void (**)(void *, void, uint64_t))(v40 + 104))(v41, enum case for HPKEPrivateKey.sep(_:), v102);
    id v42 = v39;
    uint64_t v43 = v103;
    HPKESuiteKwV1.init(skR:info:)();
    swift_allocObject();
    uint64_t v44 = v35;
    uint64_t v45 = JSONDecoder.init()();
    uint64_t v116 = v23;
    uint64_t v117 = &protocol witness table for JSONDecoder;
    unint64_t v114 = v45;
    sub_100006CC8(&qword_1001C44D8);
    sub_10013C0AC();
    sub_10013C158();
    uint64_t v24 = (uint64_t)v43;
    unint64_t v46 = v113;
    HPKESuiteKwV1.openMessageHPKE<A>(envelope:authenticationContext:decoder:)();
    if (v46)
    {
      sub_10000B9DC((uint64_t)&v114);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v43, v98);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v37);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v86, v87);
    }
    else
    {
      sub_10000B9DC((uint64_t)&v114);
      uint64_t v49 = v118;
      uint64_t v50 = SealedMessage.keyID.getter();
      if (*(void *)(v49 + 16) && (unint64_t v52 = sub_10013C484(v50, v51), (v53 & 1) != 0))
      {
        uint64_t v54 = v97;
        uint64_t v55 = v95;
        (*(void (**)(char *, unint64_t, uint64_t))(v97 + 16))(v96, *(void *)(v49 + 56) + *(void *)(v97 + 72) * v52, v95);
        uint64_t v56 = 0;
        uint64_t v57 = v108;
      }
      else
      {
        uint64_t v56 = 1;
        uint64_t v57 = v108;
        uint64_t v55 = v95;
        uint64_t v54 = v97;
      }
      uint64_t v58 = (uint64_t)v96;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v96, v56, 1, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v58, 1, v55) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v94, v58, v55);
        uint64_t v63 = v91;
        HPKEEnvelope.params.getter();
        uint64_t v64 = HPKEParams.pkISm.getter();
        unint64_t v66 = v65;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v63, v93);
        uint64_t v67 = v112;
        uint64_t v68 = v99;
        if (v66 >> 60 == 15)
        {
          uint64_t v111 = 0;
          unint64_t v113 = 0xC000000000000000;
        }
        else
        {
          uint64_t v69 = v64;
          unint64_t v70 = v66;
          uint64_t v71 = v88;
          defaultLogger()();
          unint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v74 = 0;
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "pkISm is set; using it for aad", v74, 2u);
            uint64_t v67 = v112;
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v90);
          unint64_t v113 = v70;
          uint64_t v111 = v69;
        }
        uint64_t v75 = SealedMessage.data.getter();
        unint64_t v77 = v76;
        uint64_t v78 = HPKESuiteKwV1.openMessageAEAD(cipherText:key:aad:)();
        uint64_t v79 = (void (**)(char *, uint64_t))(v97 + 8);
        uint64_t v47 = (void (**)(char *, uint64_t))(v67 + 8);
        uint64_t v24 = v78;
        uint64_t v80 = v75;
        unint64_t v81 = v77;
        unint64_t v82 = (void (**)(char *, uint64_t))(v110 + 8);
        uint64_t v83 = (void (**)(char *, uint64_t))(v105 + 8);
        sub_1000035EC(v80, v81);
        sub_1000035EC(v111, v113);
        (*v79)(v94, v55);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v103, v98);
        (*v83)(v104, v106);
        (*v82)(v86, v87);
        uint64_t v48 = v84;
        goto LABEL_14;
      }
      sub_100014BBC(v58, &qword_1001C44A8);
      unint64_t v114 = 0;
      unint64_t v115 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v114 = 0xD000000000000021;
      unint64_t v115 = 0x80000001001836E0;
      uint64_t v59 = v87;
      uint64_t v60 = v86;
      v61._uint64_t countAndFlagsBits = SealedMessage.keyID.getter();
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      uint64_t v24 = v114;
      (*(void (**)(char *, void, uint64_t))(v107 + 104))(v57, enum case for DIPError.Code.idcsPayloadDecryptionFailureMissingKeys(_:), v109);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10013CA0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v43, v98);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v106);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v60, v59);
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v85, v84);
    return v24;
  }
  swift_release();
  return v24;
}

uint64_t sub_10013B88C()
{
  uint64_t v1 = type metadata accessor for HPKEPrivateKey();
  uint64_t v17 = *(void *)(v1 - 8);
  uint64_t v18 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for HPKESuiteKwV1();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006CC8(&qword_1001C4498);
  uint64_t v19 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000A2DFC(&qword_1001C44A0, &qword_1001C4498);
  uint64_t v10 = v22[8];
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v10)
  {
    uint64_t v12 = *(void **)(v0 + 128);
    *uint64_t v3 = v12;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))(v3, enum case for HPKEPrivateKey.sep(_:), v18);
    id v13 = v12;
    HPKESuiteKwV1.init(skR:info:)();
    uint64_t v14 = v21;
    v22[3] = v21;
    uint64_t v22[4] = (uint64_t)&protocol witness table for HPKESuiteKwV1;
    uint64_t v15 = sub_10002C3A0(v22);
    uint64_t v16 = v20;
    (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(v15, v6, v14);
    HPKEEncryptedMessagePlain.open(with:authenticationContext:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v14);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
    sub_10000B9DC((uint64_t)v22);
    return v22[5];
  }
  return result;
}

uint64_t sub_10013BBDC()
{
  sub_1000035EC(*(void *)(v0 + 112), *(void *)(v0 + 120));

  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10013BC84()
{
  sub_10013BBDC();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for HPKEPayloadProcessor()
{
  return sub_100016FAC();
}

uint64_t sub_10013BCC8(uint64_t a1, char a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100007458;
  return sub_1001394AC(a1, a2);
}

uint64_t sub_10013BD74(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016B68;
  return sub_100139704(a1);
}

uint64_t sub_10013BE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100016FDC;
  return sub_100139BA4(a1, a2);
}

uint64_t sub_10013BEB4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016FE0;
  return sub_100139954(a1);
}

uint64_t sub_10013BF50()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016FDC;
  return sub_100139DF8();
}

uint64_t sub_10013BFE0()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_10013C000, v2, 0);
}

uint64_t sub_10013C000()
{
  uint64_t v1 = sub_10013A044();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

unint64_t sub_10013C0AC()
{
  unint64_t result = qword_1001C44E0;
  if (!qword_1001C44E0)
  {
    sub_100016F64(&qword_1001C44D8);
    sub_10013CA0C(&qword_1001C44E8, (void (*)(uint64_t))&type metadata accessor for AEADKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C44E0);
  }
  return result;
}

unint64_t sub_10013C158()
{
  unint64_t result = qword_1001C44F0;
  if (!qword_1001C44F0)
  {
    sub_100016F64(&qword_1001C44D8);
    sub_10013CA0C(&qword_1001C44F8, (void (*)(uint64_t))&type metadata accessor for AEADKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C44F0);
  }
  return result;
}

unint64_t sub_10013C204(uint64_t a1)
{
  type metadata accessor for DIPError.PropertyKey();
  sub_10013CA0C(&qword_1001C3828, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10013C6C0(a1, v2, (uint64_t (*)(void))&type metadata accessor for DIPError.PropertyKey, &qword_1001C3830, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
}

unint64_t sub_10013C2D8(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10013C584(a1, v2);
}

unint64_t sub_10013C344(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10013C620(a1, v2);
}

unint64_t sub_10013C3B0(uint64_t a1)
{
  type metadata accessor for SESKeystore.KeyDesignation();
  sub_10013CA0C((unint64_t *)&qword_1001C4990, (void (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10013C6C0(a1, v2, (uint64_t (*)(void))&type metadata accessor for SESKeystore.KeyDesignation, qword_1001C4508, (void (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation, (uint64_t)&protocol conformance descriptor for SESKeystore.KeyDesignation);
}

unint64_t sub_10013C484(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10013C860(a1, a2, v4);
}

unint64_t sub_10013C4FC(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10013C584(a1, v2);
}

unint64_t sub_10013C540(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10013C944(a1, v4);
}

unint64_t sub_10013C584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10013C620(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10013C6C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_10013CA0C(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_10013C860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10013C944(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10006995C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100047450((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_10013CA0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013CA54()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10013CB0C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006CC8(&qword_1001C45F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v14 = type metadata accessor for AES.GCM.Nonce();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_10013ED90();
  uint64_t v15 = v25;
  static AES.GCM.seal<A>(_:using:nonce:)();
  sub_10013EDE4((uint64_t)v9);
  if (!v15)
  {
    uint64_t v16 = v22;
    unint64_t v17 = v4;
    unint64_t v4 = AES.GCM.SealedBox.combined.getter();
    unint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v19 >> 60 == 15)
    {
      (*(void (**)(char *, void, unint64_t))(v16 + 104))(v6, enum case for DIPError.Code.failedToEncryptPayload(_:), v17);
      unint64_t v4 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10013EB0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  return v4;
}

uint64_t sub_10013CE74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = *v1;
  uint64_t v3 = v19;
  uint64_t v4 = *(void *)(v19 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v20 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = (char *)v1 + *(void *)(v3 + 128);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v14, v5);
  uint64_t v15 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v13, v4);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  uint64_t v16 = v21;
  uint64_t result = sub_10013D870();
  if (!v16)
  {
    (*(void (**)(uint64_t))(*(void *)(v19 + 88) + 16))(result);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v4);
    unint64_t v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v11, v5);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v14, v18, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10013D178(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 32) = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = *(void *)(v5 - 8);
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_10013D274, v2, 0);
}

uint64_t sub_10013D274()
{
  sub_10013CE74(*(void *)(v0 + 56));
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 32) + 88) + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 8) + **(int **)(v1 + 8));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100015370;
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 80);
  return v7(v4, v5, v3, v1);
}

uint64_t sub_10013D3D0(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = *v1;
  v2[4] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_10013D4C8, v1, 0);
}

uint64_t sub_10013D4C8()
{
  sub_10013CE74(v0[7]);
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 88) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 16) + **(int **)(v1 + 16));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000157CC;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  return v6(v4, v3, v1);
}

uint64_t sub_10013D620(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = *v1;
  v2[4] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_10013D718, v1, 0);
}

uint64_t sub_10013D718()
{
  sub_10013CE74(v0[7]);
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 88) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 32) + **(int **)(v1 + 32));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100015370;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  return v6(v4, v3, v1);
}

uint64_t sub_10013D870()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + 112);
  unint64_t v8 = *(void *)(v0 + 120);
  swift_retain();
  uint64_t v9 = v7;
  uint64_t v10 = v2;
  uint64_t v11 = sub_10013DA7C(v9, v8);
  swift_release();
  if (v10)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10013EB0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v11;
}

uint64_t sub_10013DA7C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v15 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000354C(a1, a2);
  sub_10013E6D8(a1, a2);
  if (v2)
  {
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v15, enum case for DIPError.Code.failedToDecryptPayload(_:), v6);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10013EB0C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v3 = static AES.GCM.open(_:using:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v3;
}

uint64_t sub_10013DD68(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = *v2;
  v3[5] = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_10013DE64, v2, 0);
}

uint64_t sub_10013DE64()
{
  sub_10013CE74(v0[8]);
  uint64_t v1 = *(void *)(*(void *)(v0[5] + 88) + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 24) + **(int **)(v1 + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100015E38;
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  return v7(v5, v4, v3, v1);
}

uint64_t sub_10013DFBC()
{
  v1[2] = v0;
  uint64_t v2 = *v0;
  v1[3] = *v0;
  uint64_t v3 = *(void *)(v2 + 80);
  v1[4] = v3;
  v1[5] = *(void *)(v3 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10013E0B4, v0, 0);
}

uint64_t sub_10013E0B4()
{
  sub_10013CE74(v0[6]);
  uint64_t v1 = *(void *)(*(void *)(v0[3] + 88) + 8);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 40) + **(int **)(v1 + 40));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100016728;
  uint64_t v3 = v0[4];
  return v5(v3, v1);
}

uint64_t sub_10013E208()
{
  sub_1000035EC(*(void *)(v0 + 112), *(void *)(v0 + 120));
  swift_release();
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10013E2B0()
{
  sub_10013E208();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AESGCMPayloadProcessor()
{
  return sub_100016FAC();
}

uint64_t sub_10013E2F4(uint64_t a1, char a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100007458;
  return sub_10013D178(a1, a2);
}

uint64_t sub_10013E3A0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016B68;
  return sub_10013D3D0(a1);
}

uint64_t sub_10013E438(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100016FDC;
  return sub_10013DD68(a1, a2);
}

uint64_t sub_10013E4E0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016FE0;
  return sub_10013D620(a1);
}

uint64_t sub_10013E57C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016FDC;
  return sub_10013DFBC();
}

uint64_t sub_10013E60C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_10013E62C, v2, 0);
}

uint64_t sub_10013E62C()
{
  uint64_t v1 = sub_10013D870();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10013E6D8(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10013E848);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 > 27)
      {
        sub_10000354C(a1, a2);
        sub_10013E858(a1, a2);
        AES.GCM.SealedBox.init(combined:)();
        return sub_1000035EC(a1, a2);
      }
      else
      {
LABEL_7:
        uint64_t v8 = type metadata accessor for CryptoKitError();
        sub_10013EB0C(&qword_1001C45E8, (void (*)(uint64_t))&type metadata accessor for CryptoKitError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for CryptoKitError.incorrectParameterSize(_:), v8);
        swift_willThrow();
        return sub_1000035EC(a1, a2);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10013E858(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_100014D14(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_10000354C(a1, a2);
      sub_10000354C(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_10013EB54(v8, v13, &v27);
      sub_1000035EC(v5, v6);
LABEL_27:
      sub_1000035EC(a1, a2);
      uint64_t v24 = v27;
      sub_10000B9DC((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_10000354C(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_10013EB54(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_10000354C(a1, a2);
      BOOL v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_10000354C(a1, a2);
      BOOL v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_10013EB54(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_10013EB0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_10013EB54@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_10013EBCC(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_10013EC90((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_10013ED0C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10013EBCC(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10013EC90(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_10013ED0C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t sub_10013ED90()
{
  unint64_t result = qword_1001C45F8;
  if (!qword_1001C45F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C45F8);
  }
  return result;
}

uint64_t sub_10013EDE4(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C45F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013EE44(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v37 = (char *)&v33 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - v13;
  id v15 = [self standardUserDefaults];
  v16._object = (void *)0x8000000100183FC0;
  v16._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

  if (!v17) {
    goto LABEL_6;
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  BOOL v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v36 = a1;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v34 = v7;
    uint64_t v39 = v22;
    uint64_t v35 = v6;
    *(_DWORD *)uint64_t v21 = 136315138;
    unint64_t v33 = v21 + 4;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_10004C3A4(v36, (unint64_t)a2, &v39);
    uint64_t v6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "forceDeleteAccountKeySigningKey internal setting is enabled. This is will delete the key with label %s if it exists.", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v34;
    swift_slowDealloc();
    a1 = v36;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  sub_100014D14((void *)(v3 + 48), *(void *)(v3 + 72));
  v23._uint64_t countAndFlagsBits = a1;
  v23._object = a2;
  SyncableKeyStoreProvider.deleteKey(label:)(v23);
  if (v24)
  {
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
LABEL_6:
    sub_100014D14((void *)(v3 + 48), *(void *)(v3 + 72));
    unint64_t v26 = SyncableKeyStoreProvider.readSyncableKey(label:)(a1, (unint64_t)a2);
    unint64_t v28 = v27;
    defaultLogger()();
    sub_100009778(v26, v28);
    uint64_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      uint64_t v31 = v7;
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v32 = 67109120;
      LODWORD(v39) = v28 >> 60 != 15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100009764(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "isAccountKeySigningKeyAvailable -> %{BOOL}d", v32, 8u);
      uint64_t v7 = v31;
      swift_slowDealloc();
    }
    else
    {
      sub_100009764(v26, v28);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    if (v28 >> 60 != 15)
    {
      sub_100009764(v26, v28);
      return 1;
    }
  }
  return 0;
}

uint64_t sub_10013F298(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v3;
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "createAccountKeySigningKey called", v12, 2u);
    uint64_t v3 = v21;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10004ACA0((uint64_t)&off_1001B36D8);
  SecAccessControlRef v13 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenUnlocked, 0x40000000uLL, 0);
  if (v13)
  {
    uint64_t v14 = v13;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    SecAccessControlSetConstraints();

    uint64_t v16 = v24;
    uint64_t v3 = dispatch thunk of SESKeystore.createKey(acl:)();
    unint64_t v18 = v17;
    sub_100014D14((void *)(v16 + 48), *(void *)(v16 + 72));
    SyncableKeyStoreProvider.storeSyncableKey(key:label:)(v3, v18, v22, a2);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v5, enum case for DIPError.Code.secAccessControlCannotCreateACL(_:), v3);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v3;
}

unint64_t sub_10013F6A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v31 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v30 = (char *)&v29 - v13;
  __chkstk_darwin(v12);
  id v15 = (char *)&v29 - v14;
  defaultLogger()();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = v5;
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "retrieveAccountKeySigningKey called", v18, 2u);
    uint64_t v4 = v3;
    uint64_t v5 = v29;
    swift_slowDealloc();
  }

  os_log_type_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v15, v8);
  sub_100014D14((void *)(v5 + 48), *(void *)(v5 + 72));
  unint64_t v20 = SyncableKeyStoreProvider.readSyncableKey(label:)(a1, a2);
  if (!v4)
  {
    a2 = v20;
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = dispatch thunk of SESKeystore.getPublicKey(of:)();
      sub_1000035EC(v22, v23);
      uint64_t v24 = v30;
      defaultLogger()();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "valid AccountKAK, verification successful", v27, 2u);
        swift_slowDealloc();
        uint64_t v24 = v30;
      }

      v19(v24, v8);
    }
  }
  return a2;
}

void sub_10013FA30(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  uint64_t v22 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = v3;
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "deleteAccountKeySigningKey called", v14, 2u);
    uint64_t v3 = v19;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100014D14((void *)(v3 + 48), *(void *)(v3 + 72));
  v15._uint64_t countAndFlagsBits = a1;
  v15._object = a2;
  SyncableKeyStoreProvider.deleteKey(label:)(v15);
  if (v16)
  {
    unint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0xD000000000000029;
    unint64_t v24 = 0x8000000100183B80;
    swift_getErrorValue();
    v17._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v22, enum case for DIPError.Code.unableToDeleteAccountKeySigningKey(_:), v21);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
}

uint64_t sub_10013FDB8(uint64_t a1, uint64_t a2)
{
  v17[2] = a1;
  v17[3] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(v2 + 16);
  UUID.init()();
  v17[0] = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100006CC8(&qword_1001C46E8);
  uint64_t v7 = type metadata accessor for SESKeystore.AttestationOIDs();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100176D20;
  unint64_t v12 = v11 + v10;
  uint64_t v13 = enum case for SESKeystore.AttestationOIDs.seid(_:);
  uint64_t v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 104);
  v14(v12, enum case for SESKeystore.AttestationOIDs.seid(_:), v7);
  v14(v12 + v9, enum case for SESKeystore.AttestationOIDs.acl(_:), v7);
  v14(v12 + 2 * v9, v13, v7);
  uint64_t v15 = dispatch thunk of SESKeystore.getAttestation(for:subjectIdentifier:oids:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_10013FFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  sub_100006CC8(&qword_1001C46D0);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DeviceIdentityKey();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[16] = v8;
  v5[17] = *(void *)(v8 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_1001401BC, 0, 0);
}

uint64_t sub_1001401BC()
{
  uint64_t v19 = v0;
  Swift::String v1 = *(Swift::String *)(v0 + 24);
  v18[0] = 778793835;
  v18[1] = 0xE400000000000000;
  String.append(_:)(v1);
  *(void *)(v0 + 160) = 0xE400000000000000;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_10004C3A4(778793835, 0xE400000000000000, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching key signing key with label %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v5(v17, v16);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease_n();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v5(v6, v8);
  }
  *(void *)(v0 + 168) = v5;
  uint64_t v9 = *(void *)(v0 + 88);
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)();
  uint64_t v10 = type metadata accessor for DeviceIdentityOptions();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10014049C;
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 88);
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(v12, 778793835, 0xE400000000000000, v13);
}

uint64_t sub_10014049C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  sub_100014BBC(*(void *)(v2 + 88), &qword_1001C46D0);
  swift_bridgeObjectRelease();
  if (v0) {
    os_log_type_t v3 = sub_100140BD0;
  }
  else {
    os_log_type_t v3 = sub_1001405F4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001405F4()
{
  uint64_t v1 = v0[14];
  unint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  (*(void (**)(uint64_t, void, void))(v0[13] + 16))(v1, v0[15], v0[12]);
  type metadata accessor for KeySigningKey(0);
  swift_allocObject();
  uint64_t v5 = sub_10006A1AC(v4, v3, v1);
  uint64_t v6 = v5;
  if (v2 >> 60 == 15)
  {
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[12];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0[13] + 8);
    swift_bridgeObjectRetain();
    v9(v7, v8);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v6);
  }
  uint64_t v12 = v0[23];
  uint64_t v14 = v0[5];
  unint64_t v13 = v0[6];
  uint64_t v15 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  uint64_t v16 = swift_task_alloc();
  *(void *)(v16 + 16) = sub_100069900;
  *(void *)(v16 + 24) = v6;
  v15 += 4;
  swift_bridgeObjectRetain();
  sub_100009778(v14, v13);
  swift_retain();
  os_unfair_lock_lock(v15);
  sub_100149360();
  os_unfair_lock_unlock(v15);
  if (v12)
  {
    return swift_task_dealloc();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    if (v38 >> 60 != 15)
    {
      if (sub_100147900(v37, v38, v0[5], v0[6]))
      {
        uint64_t v21 = v0[5];
        unint64_t v20 = v0[6];
        (*(void (**)(void, void))(v0[13] + 8))(v0[15], v0[12]);
        sub_100009764(v37, v38);
        sub_100009764(v21, v20);
      }
      else
      {
        defaultLogger()();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          unint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fetched key signing key does not have the expected public key identifier", v24, 2u);
          swift_slowDealloc();
        }
        uint64_t v25 = v0[16];
        uint64_t v35 = (void (*)(uint64_t, uint64_t))v0[21];
        uint64_t v36 = v0[15];
        uint64_t v26 = v0[13];
        uint64_t v31 = v0[18];
        uint64_t v33 = v0[12];
        uint64_t v27 = v0[5];
        unint64_t v28 = v0[6];
        sub_100009764(v37, v38);
        sub_100009764(v27, v28);

        swift_release();
        v35(v31, v25);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v33);
        uint64_t v6 = 0;
      }
      goto LABEL_3;
    }
    uint64_t v17 = v0[13];
    uint64_t v32 = v0[12];
    uint64_t v34 = v0[15];
    uint64_t v29 = v0[5];
    unint64_t v30 = v0[6];
    uint64_t v18 = *(void (**)(void, void, void))(v0[9] + 104);
    v18(v0[10], enum case for DIPError.Code.idcsInvalidPublicKey(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v29, v30);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, v32);
    v18(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_100140BD0()
{
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100140DA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v37 = a1;
  unint64_t v38 = a6;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  uint64_t v44 = type metadata accessor for DIPSignpost();
  uint64_t v14 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.ckmFetchSESPresentmentKey.getter();
  DIPSignpost.init(_:)();
  uint64_t v17 = dispatch thunk of SESKeystore.getPublicKey(of:)();
  if (v6) {
    goto LABEL_2;
  }
  uint64_t v19 = v17;
  uint64_t v36 = a5;
  unint64_t v20 = v18;
  type metadata accessor for SESPresentmentKey(0);
  uint64_t v21 = swift_allocObject();
  swift_bridgeObjectRetain();
  sub_10000354C(a3, a4);
  sub_10000354C(v19, v20);
  a2 = sub_10006B6AC(v37, a2, a3, a4, v19, v20, v21);
  swift_release();
  sub_1000035EC(v19, v20);
  sub_1000035EC(a3, a4);
  unint64_t v22 = v38;
  if (v38 >> 60 == 15)
  {
    sub_1000035EC(v19, v20);
LABEL_7:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v44);
    return a2;
  }
  unint64_t v35 = v20;
  uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
  unint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier + 8);
  uint64_t v37 = a2;
  uint64_t v25 = v36;
  sub_100009778(v36, v38);
  sub_10000354C(v23, v24);
  char v26 = sub_100147900(v23, v24, v25, v22);
  sub_1000035EC(v23, v24);
  if (v26)
  {
    sub_1000035EC(v19, v35);
    sub_100009764(v25, v22);
    a2 = v37;
    goto LABEL_7;
  }
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v28._uint64_t countAndFlagsBits = 0xD000000000000024;
  v28._object = (void *)0x8000000100183A20;
  String.append(_:)(v28);
  uint64_t v29 = *(void *)(v37 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
  unint64_t v30 = *(void *)(v37 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey + 8);
  sub_10000354C(v29, v30);
  Swift::String v31 = Data.base16EncodedString()();
  sub_1000035EC(v29, v30);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0x746365707865202CLL;
  v32._object = (void *)0xEB00000000206465;
  String.append(_:)(v32);
  Swift::String v33 = Data.base16EncodedString()();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v41, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v40);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  a2 = v22;
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_100009764(v36, v22);
  swift_release();
  sub_1000035EC(v19, v35);
LABEL_2:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v44);
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v41, enum case for DIPError.Code.internalError(_:), v40);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  return a2;
}

uint64_t sub_100141408@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a4;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v44 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v42 = v8;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v46 = a1;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v43 = v4;
    uint64_t v50 = v17;
    uint64_t v41 = a3;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    CFTypeRef result = (CFTypeRef)sub_10004C3A4(v46, a2, &v50);
    a3 = v41;
    uint64_t v8 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetching keychain key with label %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v46;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v48);
  _s7idcredd20GenericPasswordStoreC14createKeyQuery5label9laContextSDySSypGSS_So9LAContextCSgtF_0(a1, a2, a3);
  CFTypeRef result = 0;
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v19 = SecItemCopyMatching(isa, &result);

  if (v19 == -25300)
  {
    uint64_t v22 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v47, 1, 1, v22);
  }
  else if (v19)
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    uint64_t v50 = 0xD000000000000028;
    unint64_t v51 = 0x800000010017C240;
    CFStringRef v23 = SecCopyErrorMessageString(v19, 0);
    if (v23)
    {
      unint64_t v24 = (__CFString *)v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
    }
    else
    {
      LODWORD(v49) = v19;
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = v29;
    }
    uint64_t v30 = v44;
    v31._uint64_t countAndFlagsBits = v25;
    v31._object = v27;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v45, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v8);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    Swift::String v32 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v33 = (*(unsigned __int8 *)(*(void *)v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v32 + 80);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1001768E0;
    unint64_t v35 = v34 + v33;
    unint64_t v36 = v35 + v32[14];
    uint64_t v37 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v38 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v35, v37, v38);
    *(void *)(v36 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v36 = v19;
    sub_10004A5E8(v34);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else if (result && (CFTypeRef v49 = result, swift_unknownObjectRetain(), swift_dynamicCast()))
  {
    uint64_t v20 = v47;
    SymmetricKey.init<A>(data:)();
    uint64_t v21 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
  else
  {
    uint64_t v28 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v47, 1, 1, v28);
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100141B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CredentialKeyType();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CredentialKeyUsage();
  v5[14] = v8;
  v5[15] = *(void *)(v8 - 8);
  v5[16] = swift_task_alloc();
  sub_100006CC8(&qword_1001C46D0);
  v5[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DeviceIdentityKey();
  v5[18] = v9;
  v5[19] = *(void *)(v9 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v5[22] = v10;
  v5[23] = *(void *)(v10 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_100141D94, 0, 0);
}

uint64_t sub_100141D94()
{
  uint64_t v19 = v0;
  Swift::String v1 = *(Swift::String *)(v0 + 24);
  v18[0] = 778790244;
  v18[1] = 0xE400000000000000;
  String.append(_:)(v1);
  *(void *)(v0 + 208) = 0xE400000000000000;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v17 = *(void *)(v0 + 200);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_10004C3A4(778790244, 0xE400000000000000, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching device encryption key with label %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v5(v17, v16);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease_n();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v5(v6, v8);
  }
  *(void *)(v0 + 216) = v5;
  uint64_t v9 = *(void *)(v0 + 136);
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)();
  uint64_t v10 = type metadata accessor for DeviceIdentityOptions();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100142074;
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 136);
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(v12, 778790244, 0xE400000000000000, v13);
}

uint64_t sub_100142074()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  sub_100014BBC(*(void *)(v2 + 136), &qword_1001C46D0);
  swift_bridgeObjectRelease();
  if (v0) {
    os_log_type_t v3 = sub_1001428F4;
  }
  else {
    os_log_type_t v3 = sub_1001421CC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001421CC()
{
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v7 = v0[13];
  uint64_t v6 = v0[14];
  uint64_t v8 = v0[12];
  uint64_t v36 = v0[11];
  uint64_t v42 = v0[4];
  unint64_t v45 = v0[6];
  uint64_t v39 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[21], v3);
  type metadata accessor for DeviceEncryptionKey(0);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for CredentialKeyUsage.deviceEncryption(_:), v6);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for CredentialKeyType.sep(_:), v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v9 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey, v1, v3);
  uint64_t v10 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v11 = swift_allocObject();
  *(void *)(v9 + v10) = v11;
  *(_DWORD *)(v11 + 16) = 0;
  uint64_t v12 = (os_unfair_lock_s *)(v11 + 16);
  *(void *)(v9 + 16) = v39;
  *(void *)(v9 + 24) = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v9 + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v7, v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage, v4, v6);
  if (v45 >> 60 == 15)
  {
    uint64_t v13 = v0[21];
    uint64_t v14 = v0[18];
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0[19] + 8);
    swift_bridgeObjectRetain();
    v15(v13, v14);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v9);
  }
  uint64_t v18 = v0[29];
  uint64_t v20 = v0[5];
  unint64_t v19 = v0[6];
  uint64_t v21 = swift_task_alloc();
  *(void *)(v21 + 16) = sub_100069900;
  *(void *)(v21 + 24) = v9;
  swift_bridgeObjectRetain();
  sub_100009778(v20, v19);
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_1000B8BA0();
  os_unfair_lock_unlock(v12);
  if (v18)
  {
    return swift_task_dealloc();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    if (v47 >> 60 != 15)
    {
      if (sub_100147900(v46, v47, v0[5], v0[6]))
      {
        uint64_t v26 = v0[5];
        unint64_t v25 = v0[6];
        (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
        sub_100009764(v46, v47);
        sub_100009764(v26, v25);
      }
      else
      {
        defaultLogger()();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Fetched key signing key does not have the expected public key identifier", v29, 2u);
          swift_slowDealloc();
        }
        uint64_t v30 = v0[24];
        uint64_t v31 = v0[22];
        uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[27];
        uint64_t v44 = v0[21];
        uint64_t v32 = v0[19];
        uint64_t v38 = v0[18];
        uint64_t v33 = v0[5];
        unint64_t v34 = v0[6];
        sub_100009764(v46, v47);
        sub_100009764(v33, v34);

        swift_release();
        v41(v30, v31);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v44, v38);
        uint64_t v9 = 0;
      }
      goto LABEL_3;
    }
    uint64_t v22 = v0[19];
    uint64_t v40 = v0[18];
    uint64_t v43 = v0[21];
    uint64_t v35 = v0[5];
    unint64_t v37 = v0[6];
    CFStringRef v23 = *(void (**)(void, void, void))(v0[9] + 104);
    v23(v0[10], enum case for DIPError.Code.idcsInvalidPublicKey(_:), v0[8]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v35, v37);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v43, v40);
    v23(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_1001428F4()
{
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

id sub_100142AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v15[2] = a3;
  v15[3] = a4;
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for SESKeystore.SignatureOutputFormat();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)LAContext) init];
  id result = [v8 externalizedContext];
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for SESKeystore.SignatureOutputFormat.raw(_:), v4);
    uint64_t v14 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_1000035EC(v11, v13);

    return (id)v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100142C88(uint64_t a1, uint64_t a2)
{
  return sub_100143EA0(a1, a2, 0xD000000000000021, 0x800000010017F830, 397);
}

uint64_t sub_100142CBC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPSignpost();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100142E04, 0, 0);
}

uint64_t sub_100142E04()
{
  static IDCSSignposts.ckmGenerateSESProgenitorKey.getter();
  DIPSignpost.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100142EB0;
  return sub_100146A00();
}

uint64_t sub_100142EB0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100142FAC, 0, 0);
}

uint64_t sub_100142FAC()
{
  uint64_t v15 = v0;
  sub_100146044(v14);
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = v14[2];
  uint64_t v11 = v14[1];
  uint64_t v12 = v14[0];
  unint64_t v5 = v14[3];
  uint64_t v6 = v14[4];
  unint64_t v7 = v14[5];
  type metadata accessor for ProgenitorKey(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v13 = sub_10006B89C(v12, v11, v4, v5, v6, v7, v8);
  swift_release();
  sub_1000035EC(v6, v7);
  sub_1000035EC(v4, v5);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v13);
}

uint64_t sub_100143294(uint64_t a1)
{
  return sub_100145084(a1, (void (*)(uint64_t))&static IDCSSignposts.ckmGenerateSESProgenitorKeyAttestation.getter, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, 504);
}

uint64_t sub_1001432CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v37 = a1;
  unint64_t v38 = a6;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  uint64_t v44 = type metadata accessor for DIPSignpost();
  uint64_t v14 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.ckmFetchSESProgenitorKey.getter();
  DIPSignpost.init(_:)();
  uint64_t v17 = dispatch thunk of SESKeystore.getPublicKey(of:)();
  if (v6) {
    goto LABEL_2;
  }
  uint64_t v19 = v17;
  uint64_t v36 = a5;
  unint64_t v20 = v18;
  type metadata accessor for ProgenitorKey(0);
  uint64_t v21 = swift_allocObject();
  swift_bridgeObjectRetain();
  sub_10000354C(a3, a4);
  sub_10000354C(v19, v20);
  a2 = sub_10006B89C(v37, a2, a3, a4, v19, v20, v21);
  swift_release();
  sub_1000035EC(v19, v20);
  sub_1000035EC(a3, a4);
  unint64_t v22 = v38;
  if (v38 >> 60 == 15)
  {
    sub_1000035EC(v19, v20);
LABEL_7:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v44);
    return a2;
  }
  unint64_t v35 = v20;
  uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
  unint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier + 8);
  uint64_t v37 = a2;
  uint64_t v25 = v36;
  sub_100009778(v36, v38);
  sub_10000354C(v23, v24);
  char v26 = sub_100147900(v23, v24, v25, v22);
  sub_1000035EC(v23, v24);
  if (v26)
  {
    sub_1000035EC(v19, v35);
    sub_100009764(v25, v22);
    a2 = v37;
    goto LABEL_7;
  }
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v28._uint64_t countAndFlagsBits = 0xD000000000000024;
  v28._object = (void *)0x8000000100183A20;
  String.append(_:)(v28);
  uint64_t v29 = *(void *)(v37 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  unint64_t v30 = *(void *)(v37 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_10000354C(v29, v30);
  Swift::String v31 = Data.base16EncodedString()();
  sub_1000035EC(v29, v30);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0x746365707865202CLL;
  v32._object = (void *)0xEB00000000206465;
  String.append(_:)(v32);
  Swift::String v33 = Data.base16EncodedString()();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v41, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v40);
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  a2 = v22;
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_100009764(v36, v22);
  swift_release();
  sub_1000035EC(v19, v35);
LABEL_2:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v44);
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v41, enum case for DIPError.Code.internalError(_:), v40);
  swift_errorRetain();
  sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  return a2;
}

uint64_t sub_10014392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10014656C(*(void *)(a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob), *(void *)(a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8), a2, a3, a4);
  if (v4)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v16 = v13;
    unint64_t v17 = v14;
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 24);
    uint64_t v20 = a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey;
    uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    unint64_t v22 = *(void *)(v20 + 8);
    type metadata accessor for ProgenitorKey(0);
    uint64_t v23 = swift_allocObject();
    swift_bridgeObjectRetain();
    sub_10000354C(v21, v22);
    uint64_t v24 = sub_10006B89C(v18, v19, v16, v17, v21, v22, v23);
    swift_release();
    sub_1000035EC(v21, v22);
    sub_1000035EC(v16, v17);
    return v24;
  }
}

uint64_t sub_100143BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10014656C(*(void *)(a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob), *(void *)(a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob + 8), a2, a3, a4);
  if (v4)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v16 = v13;
    unint64_t v17 = v14;
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 24);
    uint64_t v20 = a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey;
    uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
    unint64_t v22 = *(void *)(v20 + 8);
    type metadata accessor for SESPresentmentKey(0);
    uint64_t v23 = swift_allocObject();
    swift_bridgeObjectRetain();
    sub_10000354C(v21, v22);
    uint64_t v24 = sub_10006B6AC(v18, v19, v16, v17, v21, v22, v23);
    swift_release();
    sub_1000035EC(v21, v22);
    sub_1000035EC(v16, v17);
    return v24;
  }
}

uint64_t sub_100143E6C(uint64_t a1, uint64_t a2)
{
  return sub_100143EA0(a1, a2, 0xD00000000000001DLL, 0x8000000100183E10, 490);
}

uint64_t sub_100143EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = dispatch thunk of SESKeystore.deleteKey(_:)();
  if (v5)
  {
    uint64_t v17 = a3;
    uint64_t v13 = enum case for DIPError.Code.internalError(_:);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
    v15(v11, enum case for DIPError.Code.internalError(_:), v8);
    swift_errorRetain();
    unint64_t v14 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    uint64_t v16 = a4;
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    v15(v11, v13, v8);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100144160()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CredentialKeyType();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CredentialKeyUsage();
  v1[10] = v4;
  v1[11] = *(void *)(v4 - 8);
  v1[12] = swift_task_alloc();
  sub_100006CC8(&qword_1001C46D0);
  v1[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DeviceIdentityKey();
  v1[14] = v5;
  v1[15] = *(void *)(v5 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[18] = v6;
  v1[19] = *(void *)(v6 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v1[21] = v7;
  v1[22] = *(void *)(v7 - 8);
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_10014442C, 0, 0);
}

uint64_t sub_10014442C()
{
  uint64_t v24 = v0;
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  UUID.init()();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  v0[24] = v4;
  v0[25] = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v23[0] = 778790244;
  v23[1] = 0xE400000000000000;
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  v0[26] = 0xE400000000000000;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v0[19];
    uint64_t v21 = v0[18];
    uint64_t v22 = v0[20];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(778790244, 0xE400000000000000, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Generating device encryption key with label %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v21);
  }
  else
  {
    uint64_t v13 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v14 = v0[18];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v15 = v0[13];
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)();
  uint64_t v16 = type metadata accessor for DeviceIdentityOptions();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[27] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100144724;
  uint64_t v18 = v0[17];
  uint64_t v19 = v0[13];
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(v18, 778790244, 0xE400000000000000, v19);
}

uint64_t sub_100144724()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  sub_100014BBC(*(void *)(v2 + 104), &qword_1001C46D0);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100144AC4;
  }
  else
  {
    uint64_t v3 = sub_100144890;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100144890()
{
  uint64_t v15 = v0[24];
  uint64_t v16 = v0[25];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v14 = v0[16];
  uint64_t v5 = v0[8];
  uint64_t v13 = v0[9];
  uint64_t v6 = v0[7];
  Swift::String v7 = *(void (**)(void))(v0[15] + 32);
  v7();
  type metadata accessor for DeviceEncryptionKey(0);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for CredentialKeyUsage.deviceEncryption(_:), v3);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v13, enum case for CredentialKeyType.sep(_:), v6);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v8 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey, v14, v1);
  uint64_t v9 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *(void *)(v8 + v9) = v10;
  *(void *)(v8 + 16) = v15;
  *(void *)(v8 + 24) = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v13, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage, v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v8);
}

uint64_t sub_100144AC4()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100144CA8()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v24 = (uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DIPSignpost();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.ckmGenerateSESPresentmentKey.getter();
  DIPSignpost.init(_:)();
  sub_100146044(v19);
  if (v0)
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
    uint64_t v9 = v2 + 104;
    v10(v24, enum case for DIPError.Code.internalError(_:), v1);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v24 = v19[0];
    uint64_t v11 = v20;
    uint64_t v17 = v20;
    uint64_t v18 = v19[1];
    unint64_t v12 = v21;
    uint64_t v13 = v22;
    unint64_t v14 = v23;
    type metadata accessor for SESPresentmentKey(0);
    uint64_t v15 = swift_allocObject();
    uint64_t v9 = sub_10006B6AC(v24, v18, v11, v12, v13, v14, v15);
    swift_release();
    sub_1000035EC(v13, v14);
    sub_1000035EC(v17, v12);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

uint64_t sub_10014504C(uint64_t a1)
{
  return sub_100145084(a1, (void (*)(uint64_t))&static IDCSSignposts.ckmGenerateSESPresentmentKeyAttestation.getter, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, 409);
}

uint64_t sub_100145084(uint64_t a1, void (*a2)(uint64_t), void *a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  uint64_t v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  uint64_t v54 = type metadata accessor for DIPSignpost();
  uint64_t v47 = *(void *)(v54 - 8);
  uint64_t v14 = __chkstk_darwin(v54);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v14);
  uint64_t v46 = v16;
  DIPSignpost.init(_:)();
  uint64_t v17 = (uint64_t *)(a1 + *a3);
  uint64_t v18 = *v17;
  uint64_t v42 = (void (*)(char *))v17[1];
  uint64_t v43 = v18;
  UUID.init()();
  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v52 = v19;
  uint64_t v53 = v21;
  uint64_t v50 = 45;
  unint64_t v51 = 0xE100000000000000;
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  sub_1000658BC();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  sub_100006CC8(&qword_1001C46E8);
  uint64_t v22 = type metadata accessor for SESKeystore.AttestationOIDs();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 72);
  unint64_t v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100176D20;
  unint64_t v27 = v26 + v25;
  Swift::String v28 = *(void (**)(unint64_t, void, uint64_t))(v23 + 104);
  v28(v27, enum case for SESKeystore.AttestationOIDs.seid(_:), v22);
  v28(v27 + v24, enum case for SESKeystore.AttestationOIDs.acl(_:), v22);
  v28(v27 + 2 * v24, enum case for SESKeystore.AttestationOIDs.osInfo(_:), v22);
  uint64_t v29 = v45;
  uint64_t v30 = dispatch thunk of SESKeystore.getAttestation(for:subjectIdentifier:oids:)();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29)
  {
    LODWORD(v43) = enum case for DIPError.Code.internalError(_:);
    uint64_t v42 = *(void (**)(char *))(v38 + 104);
    Swift::String v33 = v40;
    uint64_t v44 = v32;
    uint64_t v34 = v39;
    v42(v40);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v45 = v30;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    unint64_t v35 = v46;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v54);
    ((void (*)(char *, void, uint64_t))v42)(v33, v43, v34);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v30 = v45;
    swift_errorRelease();
  }
  else
  {
    uint64_t v36 = v46;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v54);
  }
  return v30;
}

uint64_t sub_1001456F8()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  sub_100006CC8(&qword_1001C46D0);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DeviceIdentityKey();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[12] = v4;
  v1[13] = *(void *)(v4 - 8);
  v1[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[15] = v5;
  v1[16] = *(void *)(v5 - 8);
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_10014590C, 0, 0);
}

uint64_t sub_10014590C()
{
  uint64_t v24 = v0;
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  UUID.init()();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  v0[18] = v4;
  v0[19] = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v23[0] = 778793835;
  v23[1] = 0xE400000000000000;
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  v0[20] = 0xE400000000000000;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v0[13];
    uint64_t v21 = v0[12];
    uint64_t v22 = v0[14];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(778793835, 0xE400000000000000, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Generating key signing key with label %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v21);
  }
  else
  {
    uint64_t v13 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v14 = v0[12];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v15 = v0[7];
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)();
  uint64_t v16 = type metadata accessor for DeviceIdentityOptions();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[21] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100145C04;
  uint64_t v18 = v0[11];
  uint64_t v19 = v0[7];
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(v18, 778793835, 0xE400000000000000, v19);
}

uint64_t sub_100145C04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  sub_100014BBC(*(void *)(v2 + 56), &qword_1001C46D0);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100145E78;
  }
  else
  {
    uint64_t v3 = sub_100145D70;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100145D70()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[10];
  (*(void (**)(uint64_t, void, void))(v0[9] + 32))(v3, v0[11], v0[8]);
  type metadata accessor for KeySigningKey(0);
  swift_allocObject();
  uint64_t v4 = sub_10006A1AC(v1, v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t sub_100145E78()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100146044@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v20 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = dispatch thunk of SESKeystore.createKey(acl:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v20, enum case for DIPError.Code.internalError(_:), v19);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    uint64_t v15 = v18;
    uint64_t result = dispatch thunk of SESKeystore.getPublicKey(of:)();
    *uint64_t v15 = v8;
    v15[1] = v10;
    void v15[2] = v13;
    v15[3] = v14;
    void v15[4] = result;
    void v15[5] = v17;
  }
  return result;
}

uint64_t sub_100146334()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = dispatch thunk of SESKeystore.getACLConstraints(of:)();
  if (v0)
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    type metadata accessor for SecAccessControl(0);
    uint64_t v1 = static SecAccessControlRef.fromConstraintsData(_:)();
    sub_1000035EC(v8, v9);
  }
  return v1;
}

uint64_t sub_10014656C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  __chkstk_darwin(v8);
  uint64_t v23 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v26 = v5;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  Logger.cryptoParam(_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v11 + 8);
  v14(v13, v10);
  uint64_t v15 = v29;
  uint64_t v16 = dispatch thunk of SESKeystore.changeACL(of:to:authorizingLAContext:)();
  if (v15)
  {
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for DIPError.Code.internalError(_:), v22);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v17 = v16;
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v18 = defaultLogger()();
    __chkstk_darwin(v18);
    uint64_t v17 = v16;
    Logger.cryptoParam(_:)();
    v14(v13, v10);
  }
  return v17;
}

unint64_t sub_1001468B8()
{
  uint64_t v0 = dispatch thunk of SESKeystore.getACLConstraints(of:)();
  unint64_t v2 = v1;
  type metadata accessor for SecAccessControl(0);
  uint64_t v4 = (void *)static SecAccessControlRef.fromConstraintsData(_:)();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = SecAccessControlRef.constraintsDescription.getter();
  String.append(_:)(v5);

  swift_bridgeObjectRelease();
  sub_1000035EC(v0, v2);
  return 0xD000000000000019;
}

uint64_t sub_100146A00()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100146B78, 0, 0);
}

uint64_t sub_100146B78()
{
  unint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[15];
  sub_100014D14(v1 + 11, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100146C30;
  return dispatch thunk of SEPairingManaging.pairSecureElementIfNecessary()(v2, v3);
}

uint64_t sub_100146C30()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100146D84, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100146D84()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v1, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

char *sub_100146F88(uint64_t a1, void *a2, void *a3)
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  uint64_t v35 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006CC8(&qword_1001C46D8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SymmetricKey();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v38 = 778793072;
  unint64_t v39 = 0xE400000000000000;
  v18._uint64_t countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  uint64_t v19 = v40;
  sub_100141408(v38, v39, v37, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    uint64_t v40 = a1;
    uint64_t v37 = a2;
    uint64_t v21 = v35;
    uint64_t v20 = v36;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v11, 1, v12) == 1)
    {
      sub_100014BBC((uint64_t)v11, &qword_1001C46D8);
      (*(void (**)(char *, void, uint64_t))(v21 + 104))(v8, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v34);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    else
    {
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v22(v17, v11, v12);
      v22(v15, v17, v12);
      type metadata accessor for PayloadProtectionKey(0);
      uint64_t v17 = (char *)swift_allocObject();
      *(_OWORD *)&v17[OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier] = xmmword_100176900;
      v22(&v17[OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key], v15, v12);
      uint64_t v23 = &v17[OBJC_IVAR____TtC7idcredd13CredentialKey_type];
      uint64_t v24 = enum case for CredentialKeyType.keychain(_:);
      uint64_t v25 = type metadata accessor for CredentialKeyType();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v23, v24, v25);
      uint64_t v26 = &v17[OBJC_IVAR____TtC7idcredd13CredentialKey_usage];
      uint64_t v27 = enum case for CredentialKeyUsage.payloadProtection(_:);
      uint64_t v28 = type metadata accessor for CredentialKeyUsage();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
      uint64_t v29 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
      sub_100006CC8(&qword_1001C2600);
      uint64_t v30 = swift_allocObject();
      *(_DWORD *)(v30 + 16) = 0;
      *(void *)&v17[v29] = v30;
      uint64_t v31 = v37;
      *((void *)v17 + 2) = v40;
      *((void *)v17 + 3) = v31;
      swift_bridgeObjectRetain();
    }
  }
  return v17;
}

uint64_t sub_100147450()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000B9DC(v0 + 48);
  sub_10000B9DC(v0 + 88);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CredentialKeyManager()
{
  return self;
}

uint64_t sub_1001474D4@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10000354C(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100147738);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_1000035EC(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_100147748(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100147770(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1001474D4((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100147848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1001474D4(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100147900(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100147B68);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10000354C(a3, a4);
                  sub_10000354C(a1, a2);
                  char v17 = sub_100147848((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_1000035EC(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10000354C(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100147848(v21, v22, v20, a3, a4);
                  sub_1000035EC(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10000354C(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10000354C(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100147770(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_1000035EC(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100147B98(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000065F8(0);
  if (v1)
  {
    uint64_t v14 = enum case for DIPError.Code.internalError(_:);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v15(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    v15(v12, v14, v9);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    char v28 = v12;
    char v29 = v6;
    uint64_t v30 = v3;
    uint64_t v16 = v31;
    BOOL v17 = sub_100007B44(v31, v13);
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v18 = v8;
      defaultLogger()();
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 134349056;
        uint64_t v32 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Deleting presentment key in slot %{public}ld from SE", v21, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v2);
      sub_100004BB4(v16);
    }
    else
    {
      uint64_t v22 = v29;
      defaultLogger()();
      int v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      BOOL v25 = os_log_type_enabled(v23, v24);
      uint64_t v26 = v30;
      if (v25)
      {
        char v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v27 = 134349056;
        uint64_t v32 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not trying to delete key in slot %{public}ld because slot is not occupied", v27, 0xCu);
        uint64_t v22 = v29;
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v2);
    }
  }
}

unint64_t sub_100148100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v39 = a1;
  uint64_t v38 = a4;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v37 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100176D30;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v15;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v16;
  type metadata accessor for SymmetricKey();
  sub_100148EFC(&qword_1001C3778, (void (*)(uint64_t))&type metadata accessor for SymmetricKey);
  CFStringRef v17 = (id)kSecClassGenericPassword;
  unint64_t v18 = a5;
  swift_bridgeObjectRetain();
  uint64_t v19 = v40;
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  long long v20 = v42;
  *(void *)(inited + 216) = &type metadata for Data;
  *(_OWORD *)(inited + 192) = v20;
  unint64_t v21 = sub_10004AB68(inited);
  if (a5 >> 60 != 11)
  {
    uint64_t v22 = v37;
    uint64_t v23 = v38;
    if (a5 >> 60 == 15)
    {
      uint64_t v24 = v38;
LABEL_7:
      sub_10004DDEC(v24, v18);
      return v21;
    }
    type metadata accessor for SecAccessControl(0);
    uint64_t v26 = v25;
    sub_100009778(v23, v18);
    sub_100009778(v23, v18);
    uint64_t v27 = static SecAccessControlRef.fromData(_:)();
    if (!v19)
    {
      char v29 = (void *)v27;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;
      uint64_t v43 = v26;
      *(void *)&long long v42 = v29;
      sub_10004DCD8(&v42, v41);
      id v33 = v29;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v44 = v21;
      sub_100169938(v41, v30, v32, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v38;
      sub_10004DDEC(v38, v18);

      uint64_t v24 = v35;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v10, enum case for DIPError.Code.internalError(_:), v8);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v28 = v38;
    sub_10004DDEC(v38, v18);
    sub_10004DDEC(v28, v18);
  }
  return v21;
}

void sub_100148574(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v47 = a4;
  unint64_t v48 = a5;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v46 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004CE78(a2, a3);
  if (!v5)
  {
    uint64_t v41 = v12;
    uint64_t v42 = v11;
    uint64_t v43 = a1;
    uint64_t v44 = v9;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      CFStringRef v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)CFStringRef v17 = 136315138;
      v40[1] = v17 + 4;
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_10004C3A4(a2, a3, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Storing keychain key with label %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v42);
      uint64_t v18 = a2;
      uint64_t v19 = v43;
      uint64_t v20 = v44;
      uint64_t v21 = v47;
      unint64_t v22 = v48;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v42);
      uint64_t v19 = v43;
      uint64_t v20 = v44;
      uint64_t v21 = v47;
      unint64_t v22 = v48;
      uint64_t v18 = a2;
    }
    sub_100148100(v19, v18, a3, v21, v22);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    OSStatus v24 = SecItemAdd(isa, 0);

    if (v24)
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v49 = 0xD00000000000002BLL;
      unint64_t v50 = 0x800000010017C180;
      CFStringRef v25 = SecCopyErrorMessageString(v24, 0);
      if (v25)
      {
        uint64_t v26 = (__CFString *)v25;
        uint64_t v27 = v46;
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;
      }
      else
      {
        uint64_t v27 = v46;
        LODWORD(v51) = v24;
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v30 = v31;
      }
      v32._uint64_t countAndFlagsBits = v28;
      v32._object = v30;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v45 + 104))(v27, enum case for DIPError.Code.failedToGeneratePayloadProtectionKey(_:), v20);
      sub_100006CC8((uint64_t *)&unk_1001C4950);
      id v33 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
      unint64_t v34 = (*(unsigned __int8 *)(*(void *)v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v33 + 80);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1001768E0;
      unint64_t v36 = v35 + v34;
      unint64_t v37 = v36 + v33[14];
      uint64_t v38 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v39 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v36, v38, v39);
      *(void *)(v37 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v37 = v24;
      sub_10004A5E8(v35);
      type metadata accessor for DIPError();
      sub_100148EFC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

char *sub_100148B44(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKeySize();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SymmetricKey();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v33 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - v11;
  id v13 = [objc_allocWithZone((Class)NSUUID) init];
  id v14 = [v13 UUIDString];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  CFStringRef v17 = v16;

  uint64_t v35 = 778793072;
  unint64_t v36 = 0xE400000000000000;
  uint64_t v34 = v15;
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  uint64_t v19 = v35;
  unint64_t v20 = v36;
  sub_100009778(a1, a2);
  static SymmetricKeySize.bits256.getter();
  SymmetricKey.init(size:)();
  sub_100009778(a1, a2);
  uint64_t v21 = v37;
  sub_100148574((uint64_t)v12, v19, v20, a1, a2);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    sub_100009764(a1, a2);
    sub_100009764(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100009764(a1, a2);
    swift_bridgeObjectRelease();
    sub_100009764(a1, a2);
    unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v23 = v33;
    v22(v33, v12, v7);
    type metadata accessor for PayloadProtectionKey(0);
    uint64_t v6 = (char *)swift_allocObject();
    *(_OWORD *)&v6[OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier] = xmmword_100176900;
    v22(&v6[OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key], v23, v7);
    OSStatus v24 = &v6[OBJC_IVAR____TtC7idcredd13CredentialKey_type];
    uint64_t v25 = enum case for CredentialKeyType.keychain(_:);
    uint64_t v26 = type metadata accessor for CredentialKeyType();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v24, v25, v26);
    uint64_t v27 = &v6[OBJC_IVAR____TtC7idcredd13CredentialKey_usage];
    uint64_t v28 = enum case for CredentialKeyUsage.payloadProtection(_:);
    uint64_t v29 = type metadata accessor for CredentialKeyUsage();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v27, v28, v29);
    uint64_t v30 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
    sub_100006CC8(&qword_1001C2600);
    uint64_t v31 = swift_allocObject();
    *(_DWORD *)(v31 + 16) = 0;
    *(void *)&v6[v30] = v31;
    *((void *)v6 + 2) = v34;
    *((void *)v6 + 3) = v17;
  }
  return v6;
}

uint64_t sub_100148EFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100148F44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  type metadata accessor for ExternalSEPresentmentKey(0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey) = xmmword_100176900;
  uint64_t v9 = (uint64_t *)(v8 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
  *uint64_t v9 = a3;
  v9[1] = a4;
  uint64_t v10 = v8 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v11 = enum case for CredentialKeyType.externalSE(_:);
  uint64_t v12 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v11, v12);
  uint64_t v13 = v8 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v14 = enum case for CredentialKeyUsage.presentment(_:);
  uint64_t v15 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  uint64_t v16 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)(v8 + v16) = v17;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_bridgeObjectRetain();
  sub_10000354C(a3, a4);
  return v8;
}

uint64_t sub_1001490C4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for ExternalSEPresentmentKey(0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey) = xmmword_100176900;
  uint64_t v12 = (uint64_t *)(v11 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
  *uint64_t v12 = a1;
  v12[1] = a2;
  uint64_t v13 = v11 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v14 = enum case for CredentialKeyType.externalSE(_:);
  uint64_t v15 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  uint64_t v16 = v11 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v17 = enum case for CredentialKeyUsage.presentment(_:);
  uint64_t v18 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v16, v17, v18);
  uint64_t v19 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  *(void *)(v11 + v19) = v20;
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  sub_10000354C(a1, a2);
  return v11;
}

unint64_t sub_1001492E0()
{
  return sub_1001468B8();
}

unint64_t sub_100149320()
{
  return sub_1001468B8();
}

uint64_t sub_100149360()
{
  return sub_1000B8BA0();
}

uint64_t sub_100149378(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPBackgroundDeferralStatus();
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = sub_100006CC8(&qword_1001C4718);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  sub_100006CC8(&qword_1001C4720);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FeatureFlagProvider();
  v3[39] = v6;
  v3[40] = *(void *)(v6 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[43] = v7;
  v3[44] = *(void *)(v7 - 8);
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  return _swift_task_switch(sub_100149660, 0, 0);
}

uint64_t sub_100149660()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting garbage collection", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[47];
  uint64_t v6 = v0[43];
  uint64_t v5 = v0[44];
  uint64_t v8 = v0[41];
  uint64_t v7 = v0[42];
  uint64_t v9 = v0[40];
  uint64_t v28 = v0[39];
  uint64_t v10 = (uint64_t *)v0[19];

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[48] = v11;
  v0[49] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v4, v6);
  uint64_t v12 = *v10;
  v0[5] = &type metadata for CredentialDecryptionKeyIdentifierProvider;
  v0[6] = &off_1001B3EC8;
  type metadata accessor for PayloadProcessorBuilder();
  uint64_t v13 = swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_100096070();
  FeatureFlagProvider.init()();
  sub_100096280((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v7, v28);
  swift_retain();
  uint64_t v29 = sub_1000962DC((uint64_t)&off_1001B3908, v12, 0, (uint64_t)(v0 + 7), v13, (uint64_t)v14, v8);
  v0[50] = v29;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v28);
  swift_release();
  sub_100085E70((uint64_t)(v0 + 2));
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v15 = SESKeystore.init()();
  type metadata accessor for SEPairingManager();
  swift_allocObject();
  uint64_t v16 = SEPairingManager.init()();
  uint64_t v17 = type metadata accessor for GenericPasswordKeychainWrapper();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = type metadata accessor for SyncableKeyStoreProvider();
  uint64_t v20 = (void *)swift_allocObject();
  v20[5] = v17;
  v20[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v20[2] = v18;
  v0[15] = v19;
  v0[16] = &off_1001B6F00;
  v0[12] = v20;
  type metadata accessor for CredentialKeyManager();
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = sub_100036D00((uint64_t)(v0 + 12), v19);
  uint64_t v23 = *(void *)(v19 - 8);
  OSStatus v24 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v24, v22, v19);
  uint64_t v25 = *v24;
  swift_retain();
  v0[51] = sub_1001631B4(v15, v16, v25, v21);
  sub_10000B9DC((uint64_t)(v0 + 12));
  swift_release();
  swift_task_dealloc();
  uint64_t v26 = (void *)swift_task_alloc();
  v0[52] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_100149A14;
  return sub_10014CF9C((uint64_t)v29);
}

uint64_t sub_100149A14()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10014B0B8;
  }
  else {
    os_log_type_t v2 = sub_100149B28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100149B28()
{
  uint64_t v1 = *(void (**)(void))(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  if (v1)
  {
    v1();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    unint64_t v6 = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v5(v2, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    unint64_t v6 = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v5(*(void *)(v0 + 304), 1, 1, v3);
  }
  *(void *)(v0 + 432) = v5;
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 192);
  *(_DWORD *)(v0 + 560) = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  uint64_t v13 = *(void (**)(uint64_t))(v12 + 104);
  *(void *)(v0 + 440) = v13;
  *(void *)(v0 + 448) = (v12 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v13(v8);
  *(void *)(v0 + 456) = v6;
  v5(v8, 0, 1, v11);
  uint64_t v14 = v9 + *(int *)(v10 + 48);
  sub_10015570C(v7, v9);
  sub_10015570C(v8, v14);
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  *(void *)(v0 + 464) = v15;
  *(void *)(v0 + 472) = (v12 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v15(v9, 1, v11) == 1)
  {
    uint64_t v16 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 184);
    sub_100014BBC(*(void *)(v0 + 296), &qword_1001C4720);
    sub_100014BBC(v16, &qword_1001C4720);
    if (v15(v14, 1, v17) == 1)
    {
      sub_100014BBC(*(void *)(v0 + 232), &qword_1001C4720);
LABEL_11:
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
      return v31();
    }
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)(v0 + 184);
  sub_10015570C(*(void *)(v0 + 232), *(void *)(v0 + 288));
  unsigned int v19 = v15(v14, 1, v18);
  uint64_t v21 = *(void *)(v0 + 296);
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v22 = *(void *)(v0 + 288);
  if (v19 == 1)
  {
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 192);
    sub_100014BBC(*(void *)(v0 + 296), &qword_1001C4720);
    sub_100014BBC(v20, &qword_1001C4720);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
LABEL_9:
    sub_100014BBC(*(void *)(v0 + 232), &qword_1001C4718);
    goto LABEL_14;
  }
  uint64_t v25 = *(void *)(v0 + 232);
  uint64_t v27 = *(void *)(v0 + 192);
  uint64_t v26 = *(void *)(v0 + 200);
  uint64_t v28 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v26, v14, v28);
  sub_100156C9C(&qword_1001C4758, (void (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v30(v26, v28);
  sub_100014BBC(v21, &qword_1001C4720);
  sub_100014BBC(v20, &qword_1001C4720);
  v30(v22, v28);
  sub_100014BBC(v25, &qword_1001C4720);
  if (v29) {
    goto LABEL_11;
  }
LABEL_14:
  id v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v33;
  *id v33 = v0;
  v33[1] = sub_100149FE4;
  uint64_t v34 = *(void *)(v0 + 408);
  return sub_10014DFE4(v34);
}

uint64_t sub_100149FE4()
{
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014B7CC;
  }
  else {
    uint64_t v2 = sub_10014A0F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014A0F8()
{
  uint64_t v1 = *(void (**)(void))(v0 + 136);
  if (v1)
  {
    v1();
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  id v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v4 = *(unsigned int *)(v0 + 560);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 432);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v32 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  v5(v6, v2, 1, v9);
  v3(v7, v4, v9);
  v5(v7, 0, 1, v9);
  uint64_t v10 = v8 + *(int *)(v32 + 48);
  sub_10015570C(v6, v8);
  sub_10015570C(v7, v10);
  int v11 = v33(v8, 1, v9);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  if (v11 == 1)
  {
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 184);
    sub_100014BBC(*(void *)(v0 + 272), &qword_1001C4720);
    sub_100014BBC(v13, &qword_1001C4720);
    if (v12(v10, 1, v14) == 1)
    {
      sub_100014BBC(*(void *)(v0 + 224), &qword_1001C4720);
LABEL_11:
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v0 + 184);
  sub_10015570C(*(void *)(v0 + 224), *(void *)(v0 + 264));
  unsigned int v16 = v12(v10, 1, v15);
  uint64_t v18 = *(void *)(v0 + 272);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 264);
  if (v16 == 1)
  {
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v21 = *(void *)(v0 + 192);
    sub_100014BBC(*(void *)(v0 + 272), &qword_1001C4720);
    sub_100014BBC(v17, &qword_1001C4720);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
LABEL_9:
    sub_100014BBC(*(void *)(v0 + 224), &qword_1001C4718);
    goto LABEL_14;
  }
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v24 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v25 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v10, v25);
  sub_100156C9C(&qword_1001C4758, (void (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v27(v23, v25);
  sub_100014BBC(v18, &qword_1001C4720);
  sub_100014BBC(v17, &qword_1001C4720);
  v27(v19, v25);
  sub_100014BBC(v22, &qword_1001C4720);
  if (v26) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_10014A558;
  uint64_t v31 = *(void *)(v0 + 408);
  return sub_10014E3C0(v31);
}

uint64_t sub_10014A558()
{
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014BE84;
  }
  else {
    uint64_t v2 = sub_10014A66C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014A66C()
{
  uint64_t v1 = *(void (**)(void))(v0 + 136);
  if (v1)
  {
    v1();
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  id v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v4 = *(unsigned int *)(v0 + 560);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 432);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v32 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  v5(v6, v2, 1, v9);
  v3(v7, v4, v9);
  v5(v7, 0, 1, v9);
  uint64_t v10 = v8 + *(int *)(v32 + 48);
  sub_10015570C(v6, v8);
  sub_10015570C(v7, v10);
  int v11 = v33(v8, 1, v9);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  if (v11 == 1)
  {
    uint64_t v13 = *(void *)(v0 + 256);
    uint64_t v14 = *(void *)(v0 + 184);
    sub_100014BBC(*(void *)(v0 + 248), &qword_1001C4720);
    sub_100014BBC(v13, &qword_1001C4720);
    if (v12(v10, 1, v14) == 1)
    {
      sub_100014BBC(*(void *)(v0 + 216), &qword_1001C4720);
LABEL_11:
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v0 + 184);
  sub_10015570C(*(void *)(v0 + 216), *(void *)(v0 + 240));
  unsigned int v16 = v12(v10, 1, v15);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 240);
  if (v16 == 1)
  {
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v21 = *(void *)(v0 + 192);
    sub_100014BBC(*(void *)(v0 + 248), &qword_1001C4720);
    sub_100014BBC(v17, &qword_1001C4720);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
LABEL_9:
    sub_100014BBC(*(void *)(v0 + 216), &qword_1001C4718);
    goto LABEL_14;
  }
  uint64_t v22 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v25 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v10, v25);
  sub_100156C9C(&qword_1001C4758, (void (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v27(v23, v25);
  sub_100014BBC(v18, &qword_1001C4720);
  sub_100014BBC(v17, &qword_1001C4720);
  v27(v19, v25);
  sub_100014BBC(v22, &qword_1001C4720);
  if (v26) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_10014AAC8;
  uint64_t v31 = *(void *)(v0 + 408);
  return sub_10014E878(v31);
}

uint64_t sub_10014AAC8()
{
  uint64_t v2 = (void *)*v1;
  v2[65] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10014C538, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[66] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10014AC3C;
    uint64_t v4 = v2[51];
    return sub_10014EB30(v4);
  }
}

uint64_t sub_10014AC3C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10014C844, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 544) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10014ADA8;
    return sub_10014EF5C();
  }
}

uint64_t sub_10014ADA8()
{
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014CB48;
  }
  else {
    uint64_t v2 = sub_10014AEBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014AEBC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Finished garbage collection", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[43];

  swift_release();
  swift_release();
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10014B0B8()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v47 = *(void *)(v0 + 344);
  unint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v5 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  v9[3] = &type metadata for String;
  *uint64_t v9 = 25447;
  v9[1] = 0xE200000000000000;
  sub_10004A5E8(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v12 = v48(v1, v47);
  uint64_t v13 = *(void (**)(uint64_t))(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 304);
  uint64_t v15 = *(void *)(v0 + 184);
  uint64_t v16 = *(void *)(v0 + 192);
  if (v13)
  {
    v13(v12);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    unint64_t v18 = (v16 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v17(v14, 0, 1, v15);
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    unint64_t v18 = (v16 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v17(*(void *)(v0 + 304), 1, 1, v15);
  }
  *(void *)(v0 + 432) = v17;
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 304);
  uint64_t v21 = *(void *)(v0 + 232);
  uint64_t v22 = *(void *)(v0 + 208);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v24 = *(void *)(v0 + 192);
  *(_DWORD *)(v0 + 560) = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  uint64_t v25 = *(void (**)(uint64_t))(v24 + 104);
  *(void *)(v0 + 440) = v25;
  *(void *)(v0 + 448) = (v24 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v25(v20);
  *(void *)(v0 + 456) = v18;
  v17(v20, 0, 1, v23);
  uint64_t v26 = v21 + *(int *)(v22 + 48);
  sub_10015570C(v19, v21);
  sub_10015570C(v20, v26);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  *(void *)(v0 + 464) = v27;
  *(void *)(v0 + 472) = (v24 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v27(v21, 1, v23) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 304);
    uint64_t v29 = *(void *)(v0 + 184);
    sub_100014BBC(*(void *)(v0 + 296), &qword_1001C4720);
    sub_100014BBC(v28, &qword_1001C4720);
    if (v27(v26, 1, v29) == 1)
    {
      sub_100014BBC(*(void *)(v0 + 232), &qword_1001C4720);
LABEL_11:
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
      return v43();
    }
    goto LABEL_9;
  }
  uint64_t v30 = *(void *)(v0 + 184);
  sub_10015570C(*(void *)(v0 + 232), *(void *)(v0 + 288));
  unsigned int v31 = v27(v26, 1, v30);
  uint64_t v33 = *(void *)(v0 + 296);
  uint64_t v32 = *(void *)(v0 + 304);
  uint64_t v34 = *(void *)(v0 + 288);
  if (v31 == 1)
  {
    uint64_t v35 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 192);
    sub_100014BBC(*(void *)(v0 + 296), &qword_1001C4720);
    sub_100014BBC(v32, &qword_1001C4720);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
LABEL_9:
    sub_100014BBC(*(void *)(v0 + 232), &qword_1001C4718);
    goto LABEL_14;
  }
  uint64_t v37 = *(void *)(v0 + 232);
  uint64_t v39 = *(void *)(v0 + 192);
  uint64_t v38 = *(void *)(v0 + 200);
  uint64_t v40 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v38, v26, v40);
  sub_100156C9C(&qword_1001C4758, (void (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v42(v38, v40);
  sub_100014BBC(v33, &qword_1001C4720);
  sub_100014BBC(v32, &qword_1001C4720);
  v42(v34, v40);
  sub_100014BBC(v37, &qword_1001C4720);
  if (v41) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v45;
  *uint64_t v45 = v0;
  v45[1] = sub_100149FE4;
  uint64_t v46 = *(void *)(v0 + 408);
  return sub_10014DFE4(v46);
}

uint64_t sub_10014B7CC()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v44 = *(void *)(v0 + 344);
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v5 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  v9[3] = &type metadata for String;
  *uint64_t v9 = 25447;
  v9[1] = 0xE200000000000000;
  sub_10004A5E8(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v12 = v46(v1, v44);
  uint64_t v13 = *(void (**)(uint64_t))(v0 + 136);
  if (v13)
  {
    v13(v12);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 1;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v16 = *(unsigned int *)(v0 + 560);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 184);
  v17(v18, v14, 1, v21);
  v15(v19, v16, v21);
  v17(v19, 0, 1, v21);
  uint64_t v22 = v20 + *(int *)(v45 + 48);
  sub_10015570C(v18, v20);
  sub_10015570C(v19, v22);
  int v23 = v47(v20, 1, v21);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  if (v23 == 1)
  {
    uint64_t v25 = *(void *)(v0 + 280);
    uint64_t v26 = *(void *)(v0 + 184);
    sub_100014BBC(*(void *)(v0 + 272), &qword_1001C4720);
    sub_100014BBC(v25, &qword_1001C4720);
    if (v24(v22, 1, v26) == 1)
    {
      sub_100014BBC(*(void *)(v0 + 224), &qword_1001C4720);
LABEL_11:
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
      return v40();
    }
    goto LABEL_9;
  }
  uint64_t v27 = *(void *)(v0 + 184);
  sub_10015570C(*(void *)(v0 + 224), *(void *)(v0 + 264));
  unsigned int v28 = v24(v22, 1, v27);
  uint64_t v30 = *(void *)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 280);
  uint64_t v31 = *(void *)(v0 + 264);
  if (v28 == 1)
  {
    uint64_t v32 = *(void *)(v0 + 184);
    uint64_t v33 = *(void *)(v0 + 192);
    sub_100014BBC(*(void *)(v0 + 272), &qword_1001C4720);
    sub_100014BBC(v29, &qword_1001C4720);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
LABEL_9:
    sub_100014BBC(*(void *)(v0 + 224), &qword_1001C4718);
    goto LABEL_14;
  }
  uint64_t v34 = *(void *)(v0 + 224);
  uint64_t v36 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 200);
  uint64_t v37 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v35, v22, v37);
  sub_100156C9C(&qword_1001C4758, (void (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v39(v35, v37);
  sub_100014BBC(v30, &qword_1001C4720);
  sub_100014BBC(v29, &qword_1001C4720);
  v39(v31, v37);
  sub_100014BBC(v34, &qword_1001C4720);
  if (v38) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_10014A558;
  uint64_t v43 = *(void *)(v0 + 408);
  return sub_10014E3C0(v43);
}

uint64_t sub_10014BE84()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v44 = *(void *)(v0 + 344);
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v5 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  v9[3] = &type metadata for String;
  *uint64_t v9 = 25447;
  v9[1] = 0xE200000000000000;
  sub_10004A5E8(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v12 = v46(v1, v44);
  uint64_t v13 = *(void (**)(uint64_t))(v0 + 136);
  if (v13)
  {
    v13(v12);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 1;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v16 = *(unsigned int *)(v0 + 560);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 184);
  v17(v18, v14, 1, v21);
  v15(v19, v16, v21);
  v17(v19, 0, 1, v21);
  uint64_t v22 = v20 + *(int *)(v45 + 48);
  sub_10015570C(v18, v20);
  sub_10015570C(v19, v22);
  int v23 = v47(v20, 1, v21);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  if (v23 == 1)
  {
    uint64_t v25 = *(void *)(v0 + 256);
    uint64_t v26 = *(void *)(v0 + 184);
    sub_100014BBC(*(void *)(v0 + 248), &qword_1001C4720);
    sub_100014BBC(v25, &qword_1001C4720);
    if (v24(v22, 1, v26) == 1)
    {
      sub_100014BBC(*(void *)(v0 + 216), &qword_1001C4720);
LABEL_11:
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
      return v40();
    }
    goto LABEL_9;
  }
  uint64_t v27 = *(void *)(v0 + 184);
  sub_10015570C(*(void *)(v0 + 216), *(void *)(v0 + 240));
  unsigned int v28 = v24(v22, 1, v27);
  uint64_t v30 = *(void *)(v0 + 248);
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v31 = *(void *)(v0 + 240);
  if (v28 == 1)
  {
    uint64_t v32 = *(void *)(v0 + 184);
    uint64_t v33 = *(void *)(v0 + 192);
    sub_100014BBC(*(void *)(v0 + 248), &qword_1001C4720);
    sub_100014BBC(v29, &qword_1001C4720);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
LABEL_9:
    sub_100014BBC(*(void *)(v0 + 216), &qword_1001C4718);
    goto LABEL_14;
  }
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v36 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 200);
  uint64_t v37 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v35, v22, v37);
  sub_100156C9C(&qword_1001C4758, (void (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v39(v35, v37);
  sub_100014BBC(v30, &qword_1001C4720);
  sub_100014BBC(v29, &qword_1001C4720);
  v39(v31, v37);
  sub_100014BBC(v34, &qword_1001C4720);
  if (v38) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_10014AAC8;
  uint64_t v43 = *(void *)(v0 + 408);
  return sub_10014E878(v43);
}

uint64_t sub_10014C538()
{
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v1 = v0[45];
  uint64_t v15 = v0[43];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v5 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  v9[3] = &type metadata for String;
  *uint64_t v9 = 25447;
  v9[1] = 0xE200000000000000;
  sub_10004A5E8(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  swift_errorRelease();
  v16(v1, v15);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[66] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10014AC3C;
  uint64_t v13 = v0[51];
  return sub_10014EB30(v13);
}

uint64_t sub_10014C844()
{
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v1 = v0[45];
  uint64_t v14 = v0[43];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v5 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  v9[3] = &type metadata for String;
  *uint64_t v9 = 25447;
  v9[1] = 0xE200000000000000;
  sub_10004A5E8(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  swift_errorRelease();
  v15(v1, v14);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[68] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10014ADA8;
  return sub_10014EF5C();
}

uint64_t sub_10014CB48()
{
  uint64_t v1 = v0[45];
  uint64_t v20 = v0[43];
  uint64_t v21 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v5 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001768E0;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  v9[3] = &type metadata for String;
  *uint64_t v9 = 25447;
  v9[1] = 0xE200000000000000;
  sub_10004A5E8(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  swift_errorRelease();
  v21(v1, v20);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finished garbage collection", v14, 2u);
    swift_slowDealloc();
  }
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v16 = v0[46];
  uint64_t v17 = v0[43];

  swift_release();
  swift_release();
  v15(v16, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10014CF9C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[15] = v5;
  v2[16] = *(void *)(v5 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10014D124, 0, 0);
}

uint64_t sub_10014D124()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Garbage collecting incomplete credentials", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[16];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[19] = v7;
  v0[20] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  unint64_t v8 = (void *)swift_task_alloc();
  v0[21] = v8;
  uint64_t v9 = sub_100006CC8(&qword_1001C30C0);
  *unint64_t v8 = v0;
  v8[1] = sub_10014D2A8;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 6, sub_1001556D4, 0, v9);
}

uint64_t sub_10014D2A8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10014D67C;
  }
  else
  {
    *(void *)(v2 + 184) = *(void *)(v2 + 48);
    uint64_t v3 = sub_10014D3C4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10014D3C4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 256) = v2;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << v2;
  uint64_t v5 = *(void *)(v1 + 56);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  int v6 = enum case for DIPError.Code.internalError(_:);
  *(_DWORD *)(v0 + 248) = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  *(_DWORD *)(v0 + 252) = v6;
  *(void *)(v0 + 192) = 0;
  unint64_t v7 = v3 & v5;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = __clz(__rbit64(v7));
    uint64_t v10 = (v7 - 1) & v7;
LABEL_5:
    *(void *)(v0 + 200) = v8;
    *(void *)(v0 + 208) = v10;
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v9);
    uint64_t v12 = *v11;
    *(void *)(v0 + 216) = *v11;
    uint64_t v13 = v11[1];
    *(void *)(v0 + 224) = v13;
    swift_bridgeObjectRetain();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10014D708;
    return sub_1000AF14C(v12, v13);
  }
  unint64_t v16 = 63 - v4;
  if (v16 > 0x7F)
  {
    unint64_t v17 = *(void *)(v1 + 64);
    if (v17)
    {
      uint64_t v8 = 1;
LABEL_11:
      uint64_t v10 = (v17 - 1) & v17;
      unint64_t v9 = __clz(__rbit64(v17)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v16 >= 0xC0)
    {
      unint64_t v17 = *(void *)(v1 + 72);
      if (v17)
      {
        uint64_t v8 = 2;
        goto LABEL_11;
      }
      if (v16 >= 0x100)
      {
        unint64_t v17 = *(void *)(v1 + 80);
        if (v17)
        {
          uint64_t v8 = 3;
          goto LABEL_11;
        }
        if (v16 >= 0x140)
        {
          unint64_t v17 = *(void *)(v1 + 88);
          if (v17)
          {
            uint64_t v8 = 4;
            goto LABEL_11;
          }
          uint64_t v18 = 0;
          uint64_t v19 = v16 >> 6;
          if (v19 <= 5) {
            uint64_t v19 = 5;
          }
          uint64_t v20 = v19 - 5;
          while (v20 != v18)
          {
            unint64_t v17 = *(void *)(v1 + 96 + 8 * v18++);
            if (v17)
            {
              uint64_t v8 = v18 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  uint64_t v22 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 96);
  swift_release();
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for IDCSAnalytics.GarbageCollectionEventType.incompleteCredential(_:), v23);
  static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10014D67C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014D708()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v2 = sub_10014DAB4;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v2 = sub_10014D824;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10014D824()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v3 = *(void *)(v0 + 200);
  unint64_t v4 = *(void *)(v0 + 208);
  *(void *)(v0 + 192) = v2;
  if (v4)
  {
    unint64_t v5 = __clz(__rbit64(v4));
    uint64_t v6 = (v4 - 1) & v4;
    unint64_t v7 = v5 | (v3 << 6);
    uint64_t v8 = *(void *)(v0 + 184);
LABEL_4:
    *(void *)(v0 + 200) = v3;
    *(void *)(v0 + 208) = v6;
    unint64_t v9 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v7);
    uint64_t v10 = *v9;
    *(void *)(v0 + 216) = *v9;
    uint64_t v11 = v9[1];
    *(void *)(v0 + 224) = v11;
    swift_bridgeObjectRetain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10014D708;
    sub_1000AF14C(v10, v11);
    return;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1)) {
    goto LABEL_25;
  }
  int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
  uint64_t v8 = *(void *)(v0 + 184);
  if (v13 < v14)
  {
    uint64_t v15 = v8 + 56;
    unint64_t v16 = *(void *)(v8 + 56 + 8 * v13);
    ++v3;
    if (v16)
    {
LABEL_10:
      uint64_t v6 = (v16 - 1) & v16;
      unint64_t v7 = __clz(__rbit64(v16)) + (v3 << 6);
      goto LABEL_4;
    }
    int64_t v3 = v13 + 1;
    if (v13 + 1 < v14)
    {
      unint64_t v16 = *(void *)(v15 + 8 * v3);
      if (v16) {
        goto LABEL_10;
      }
      int64_t v3 = v13 + 2;
      if (v13 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v3);
        if (v16) {
          goto LABEL_10;
        }
        int64_t v17 = v13 + 3;
        if (v17 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * v17);
          if (v16)
          {
            int64_t v3 = v17;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v3 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              break;
            }
            if (v3 >= v14) {
              goto LABEL_21;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v3);
            ++v17;
            if (v16) {
              goto LABEL_10;
            }
          }
LABEL_26:
          __break(1u);
          return;
        }
      }
    }
  }
LABEL_21:
  uint64_t v19 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 96);
  swift_release();
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for IDCSAnalytics.GarbageCollectionEventType.incompleteCredential(_:), v20);
  static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(void (**)(void))(v0 + 8);
  v21();
}

uint64_t sub_10014DAB4()
{
  Swift::String v32 = *(Swift::String *)(v0 + 216);
  uint64_t v2 = *(unsigned int *)(v0 + 248);
  uint64_t v1 = *(unsigned int *)(v0 + 252);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v33 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 72);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  unint64_t v7 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001768E0;
  unint64_t v10 = v9 + v8;
  uint64_t v11 = (void *)(v10 + v7[14]);
  uint64_t v12 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v2, v12);
  v11[3] = &type metadata for String;
  *uint64_t v11 = 25447;
  v11[1] = 0xE200000000000000;
  sub_10004A5E8(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v5, v1, v6);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0xD000000000000020;
  *(void *)(v0 + 24) = 0x8000000100184470;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t result = v34(v3, v33);
  int64_t v14 = *(void *)(v0 + 200);
  unint64_t v15 = *(void *)(v0 + 208);
  if (v15)
  {
    unint64_t v16 = __clz(__rbit64(v15));
    uint64_t v17 = (v15 - 1) & v15;
    unint64_t v18 = v16 | (v14 << 6);
    uint64_t result = *(void *)(v0 + 184);
LABEL_3:
    *(void *)(v0 + 200) = v14;
    *(void *)(v0 + 208) = v17;
    uint64_t v19 = (uint64_t *)(*(void *)(result + 48) + 16 * v18);
    uint64_t v20 = *v19;
    *(void *)(v0 + 216) = *v19;
    uint64_t v21 = v19[1];
    *(void *)(v0 + 224) = v21;
    swift_bridgeObjectRetain();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10014D708;
    return sub_1000AF14C(v20, v21);
  }
  int64_t v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  int64_t v24 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 184);
  if (v23 < v24)
  {
    uint64_t v25 = result + 56;
    unint64_t v26 = *(void *)(result + 56 + 8 * v23);
    ++v14;
    if (v26)
    {
LABEL_9:
      uint64_t v17 = (v26 - 1) & v26;
      unint64_t v18 = __clz(__rbit64(v26)) + (v14 << 6);
      goto LABEL_3;
    }
    int64_t v14 = v23 + 1;
    if (v23 + 1 < v24)
    {
      unint64_t v26 = *(void *)(v25 + 8 * v14);
      if (v26) {
        goto LABEL_9;
      }
      int64_t v14 = v23 + 2;
      if (v23 + 2 < v24)
      {
        unint64_t v26 = *(void *)(v25 + 8 * v14);
        if (v26) {
          goto LABEL_9;
        }
        int64_t v27 = v23 + 3;
        if (v27 < v24)
        {
          unint64_t v26 = *(void *)(v25 + 8 * v27);
          if (v26)
          {
            int64_t v14 = v27;
            goto LABEL_9;
          }
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              break;
            }
            if (v14 >= v24) {
              goto LABEL_20;
            }
            unint64_t v26 = *(void *)(v25 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_9;
            }
          }
LABEL_24:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_20:
  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v30 = *(void *)(v0 + 96);
  swift_release();
  type metadata accessor for IDCSAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for IDCSAnalytics.GarbageCollectionEventType.incompleteCredential(_:), v30);
  static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_10014DFE4(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10014E0A4, 0, 0);
}

uint64_t sub_10014E0A4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Garbage collecting inactive presentment keys", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100156CE4(v7, v0 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 104) = v9;
  *(void *)(v9 + 16) = v8;
  long long v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v0 + 48);
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 112) = v11;
  *(void *)(v11 + 16) = sub_100156F44;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10014E29C;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v12, sub_1000B983C, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_10014E29C()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_10015717C;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_100157198;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014E3C0(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10014E480, 0, 0);
}

uint64_t sub_10014E480()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Garbage collecting orphan SE slots", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100156CE4(v7, v0 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 104) = v9;
  *(void *)(v9 + 16) = v8;
  long long v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v0 + 48);
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 112) = v11;
  *(void *)(v11 + 16) = sub_100156ED8;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10014E678;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v12, sub_1000B983C, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_10014E678()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_10014E800;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_10014E79C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014E79C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014E800()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014E878(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10014E938, 0, 0);
}

uint64_t sub_10014E938()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Garbage collecting unused device encryption keys", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100156CE4(v7, v0 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 104) = v9;
  *(void *)(v9 + 16) = v8;
  long long v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v0 + 48);
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 112) = v11;
  *(void *)(v11 + 16) = &unk_1001C4768;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10014E29C;
  return AsyncCoreDataContainer.write<A>(_:)(v12, &unk_1001C1AB0, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_10014EB30(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_10014EBF0, 0, 0);
}

uint64_t sub_10014EBF0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Garbage collecting oprhaned Payload Protection Keys", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = swift_allocObject();
  v0[7] = v8;
  *(void *)(v8 + 16) = 7;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  v0[8] = v9;
  *(void *)(v9 + 16) = sub_1001557AC;
  *(void *)(v9 + 24) = v8;
  swift_retain();
  swift_retain();
  long long v10 = (void *)swift_task_alloc();
  v0[9] = v10;
  void *v10 = v0;
  v10[1] = sub_10014EDC0;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v10, sub_100086288, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_10014EDC0()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_10014EEE4;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_100049D60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014EEE4()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014EF5C()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10014F01C, 0, 0);
}

uint64_t sub_10014F01C()
{
  int64_t v13 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[5];
    uint64_t v3 = v0[6];
    uint64_t v5 = v0[4];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[2] = sub_10004C3A4(0xD000000000000024, 0x8000000100184250, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s start", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v8 = v0[5];
    uint64_t v7 = v0[6];
    uint64_t v9 = v0[4];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  long long v10 = (void *)swift_task_alloc();
  v0[7] = v10;
  void *v10 = v0;
  v10[1] = sub_10014F248;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v10, sub_1001556B8, 0, (char *)&type metadata for () + 8);
}

uint64_t sub_10014F248()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10014F35C;
  }
  else {
    os_log_type_t v2 = sub_100049D60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014F35C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014F3C0@<X0>(void *a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  Swift::Int v60 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v49 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)v49 - v15;
  unint64_t v70 = &_swiftEmptySetSingleton;
  unint64_t v17 = v68;
  uint64_t result = sub_100168964((uint64_t)&off_1001B3938);
  if (!v17)
  {
    unint64_t v19 = result;
    uint64_t v54 = 0;
    uint64_t v55 = v3;
    char v62 = v14;
    uint64_t v63 = v11;
    uint64_t v67 = v8;
    uint64_t result = Date.init()();
    uint64_t v58 = v16;
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v21 = v19;
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v21 = v19;
      uint64_t v22 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v23 = v67;
    uint64_t v24 = v7;
    unint64_t v25 = v21;
    if (v22)
    {
      if (v22 >= 1)
      {
        uint64_t v26 = 0;
        unint64_t v68 = v25 & 0xC000000000000001;
        uint64_t v64 = (void (**)(char *, char *, uint64_t))(v67 + 32);
        unint64_t v66 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
        Swift::String v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
        uint64_t v57 = (void (**)(char *, uint64_t))(v67 + 8);
        uint64_t v52 = (void (**)(char *, uint64_t))(v60 + 8);
        *(void *)&long long v20 = 136315138;
        long long v50 = v20;
        v49[1] = (char *)&type metadata for Any + 8;
        uint64_t v65 = v22;
        while (1)
        {
          if (v68) {
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v27 = *(id *)(v25 + 8 * v26 + 32);
          }
          uint64_t v28 = v27;
          id v29 = [v27 options];
          if (v29)
          {
            uint64_t v30 = v29;
            id v31 = [v29 deleteIncompleteCredentialAfterDays];

            if ((uint64_t)v31 > 0)
            {
              uint64_t v32 = v1;
              id v33 = [v28 updatedAt];
              if (v33)
              {
                uint64_t v34 = v33;
                uint64_t v35 = v63;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v36 = *v64;
                uint64_t v37 = v35;
                char v38 = v62;
                (*v64)(v6, v37, v24);
                (*v66)(v6, 0, 1, v24);
                if ((*v61)(v6, 1, v24) != 1)
                {
                  v36(v38, v6, v24);
                  id v39 = [v28 credentialIdentifier];
                  if (v39)
                  {
                    uint64_t v40 = v39;
                    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    Swift::Int v60 = v41;

                    if (Date.isAtLeast(days:after:)())
                    {
                      uint64_t v42 = v55;
                      defaultLogger()();
                      swift_bridgeObjectRetain_n();
                      uint64_t v43 = Logger.logObject.getter();
                      os_log_type_t v44 = static os_log_type_t.debug.getter();
                      uint64_t v53 = v43;
                      int v51 = v44;
                      if (os_log_type_enabled(v43, v44))
                      {
                        uint64_t v45 = swift_slowAlloc();
                        v49[0] = swift_slowAlloc();
                        uint64_t v69 = v49[0];
                        *(_DWORD *)uint64_t v45 = v50;
                        unint64_t v46 = v60;
                        swift_bridgeObjectRetain();
                        *(void *)(v45 + 4) = sub_10004C3A4(v56, v46, &v69);
                        swift_bridgeObjectRelease_n();
                        _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v51, "Identified credential %s for garbage collection", (uint8_t *)v45, 0xCu);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();

                        uint64_t v47 = *v52;
                        uint64_t v48 = v55;
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                        uint64_t v47 = *v52;
                        uint64_t v48 = v42;
                      }
                      uint64_t v1 = v32;
                      v47(v48, v32);
                      sub_100003980(&v69, v56, v60);

                      swift_bridgeObjectRelease();
                      (*v57)(v38, v24);
                      goto LABEL_24;
                    }
                    (*v57)(v38, v24);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                    (*v57)(v38, v24);
                  }
LABEL_23:
                  uint64_t v1 = v32;
LABEL_24:
                  uint64_t v23 = v67;
                  uint64_t v22 = v65;
                  goto LABEL_8;
                }
              }
              else
              {
                (*v66)(v6, 1, 1, v24);
              }

              sub_100014BBC((uint64_t)v6, &qword_1001C15B0);
              goto LABEL_23;
            }

            uint64_t v23 = v67;
          }
          else
          {
          }
LABEL_8:
          if (v22 == ++v26) {
            goto LABEL_29;
          }
        }
      }
      __break(1u);
    }
    else
    {
LABEL_29:
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v58, v24);
      *uint64_t v59 = v70;
    }
  }
  return result;
}

uint64_t sub_10014FA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v160 = a2;
  uint64_t v159 = type metadata accessor for DIPError.Code();
  unint64_t v181 = *(char **)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v158 = (char *)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v171 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType();
  uint64_t v165 = *(void *)(v166 - 8);
  __chkstk_darwin(v166);
  uint64_t v164 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = type metadata accessor for Logger();
  uint64_t v170 = *(void *)(v167 - 8);
  uint64_t v8 = __chkstk_darwin(v167);
  id v157 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v156 = (char *)&v131 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v131 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v131 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v169 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  long long v20 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v131 - v22;
  __chkstk_darwin(v21);
  unint64_t v25 = (char *)&v131 - v24;
  uint64_t result = sub_10000CA44();
  if (!v2)
  {
    unint64_t v27 = result;
    uint64_t v151 = a1;
    uint64_t v172 = v23;
    uint64_t v179 = v20;
    uint64_t v152 = 0;
    unint64_t v146 = v14;
    uint64_t v180 = v17;
    Date.init()();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    unint64_t v31 = v27 >> 62;
    uint64_t v32 = v16;
    uint64_t v155 = v25;
    if (v30)
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v33 = 134349056;
      uint64_t v34 = v27;
      if (v31)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = *(void **)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      id v184 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}ld presentment keys are potentially eligible for deletion", v33, 0xCu);
      swift_slowDealloc();

      uint64_t v36 = v170;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v36 = v170;
      uint64_t v34 = v27;
    }
    id v39 = *(void (**)(void, void))(v36 + 8);
    uint64_t v38 = v36 + 8;
    uint64_t v37 = v39;
    v39(v32, v167);
    uint64_t v41 = (uint64_t)v171;
    uint64_t v42 = (uint64_t *)v169;
    uint64_t v43 = (uint64_t)v179;
    if (v31) {
      goto LABEL_87;
    }
    uint64_t v44 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
    if (v44)
    {
      uint64_t v150 = 0;
      unint64_t v45 = 0;
      unint64_t v182 = v34 & 0xC000000000000001;
      uint64_t v175 = v34 + 32;
      uint64_t v176 = v34 & 0xFFFFFFFFFFFFFF8;
      uint64_t v177 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 7);
      uint64_t v173 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 6);
      unint64_t v174 = (void (**)(uint64_t, uint64_t, uint64_t))(v42 + 4);
      uint64_t v161 = (void (**)(char *, uint64_t))(v42 + 1);
      int v145 = &v184;
      unsigned int v142 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
      unsigned int v141 = enum case for DIPError.Code.internalError(_:);
      uint64_t v140 = v181 + 104;
      *(void *)&long long v40 = 136315394;
      long long v143 = v40;
      long long v139 = xmmword_1001768E0;
      unint64_t v138 = 0xD000000000000057;
      unint64_t v137 = 0x80000001001840A0;
      unint64_t v136 = 0x8000000100184040;
      unint64_t v135 = 0x8000000100184450;
      uint64_t v42 = &v165;
      unint64_t v134 = (char *)&type metadata for Any + 8;
      uint64_t v163 = v34;
      uint64_t v178 = v44;
      while (1)
      {
        if (v182)
        {
          id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v45 >= *(void *)(v176 + 16)) {
            goto LABEL_85;
          }
          id v46 = *(id *)(v175 + 8 * v45);
        }
        uint64_t v47 = v46;
        BOOL v48 = __OFADD__(v45++, 1);
        if (v48)
        {
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          char v130 = v42;
          swift_bridgeObjectRetain();
          uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v42 = v130;
          goto LABEL_9;
        }
        id v49 = [v46 credential];
        if (v49)
        {
          long long v50 = v49;
          int v51 = (char *)[v49 options];
          if (v51)
          {
            unint64_t v181 = v51;
            id v52 = [v47 updatedAt];
            if (v52)
            {
              uint64_t v53 = v52;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v54 = v43;
              uint64_t v55 = *v174;
              uint64_t v56 = v180;
              (*v174)(v41, v54, v180);
              (*v177)(v41, 0, 1, v56);
              if ((*v173)(v41, 1, v56) != 1)
              {
                uint64_t v57 = v172;
                v55((uint64_t)v172, v41, v56);
                id v58 = [v47 identifier];
                if (!v58)
                {

                  (*v161)(v57, v56);
                  goto LABEL_72;
                }
                uint64_t v59 = v58;
                uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v162 = v60;

                Swift::String v61 = [v47 keyBlob];
                os_log_t v148 = v61;
                if (v61)
                {
                  char v62 = v61;
                  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v65 = v64;

                  sub_1000035EC(v63, v65);
                  id v66 = [v47 keyBlob];
                  uint64_t v34 = v163;
                  if (v66)
                  {
                    uint64_t v67 = v66;
                    uint64_t v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v154 = v68;

                    uint64_t v147 = 0;
                  }
                  else
                  {
                    uint64_t v147 = 0;
                    uint64_t v153 = 0;
                    unint64_t v154 = 0xF000000000000000;
                  }
                  uint64_t v41 = (uint64_t)v171;
                }
                else
                {
                  id v69 = [v47 keySlot];
                  uint64_t v34 = v163;
                  uint64_t v44 = v178;
                  if ((uint64_t)v69 <= 0)
                  {
                    swift_bridgeObjectRelease();

                    (*v161)(v172, v180);
                    uint64_t v43 = (uint64_t)v179;
                    goto LABEL_13;
                  }
                  uint64_t v147 = (uint64_t)v69;
                  uint64_t v153 = 0;
                  unint64_t v154 = 0xF000000000000000;
                }
                uint64_t v70 = v180;
                uint64_t v71 = v181;
                if ((uint64_t)[v181 deleteInactiveKeysAfterDays] < 1)
                {
                  swift_bridgeObjectRelease();

                  sub_100009764(v153, v154);
                  (*v161)(v172, v70);
                }
                else
                {
                  unint64_t v72 = v172;
                  if (Date.isAtLeast(days:after:)())
                  {
                    unint64_t v144 = v37;
                    uint64_t v170 = v38;
                    unint64_t v73 = (unint64_t)sub_1000F58F8();
                    unint64_t v74 = v73;
                    if (v73 >> 62)
                    {
                      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
                      if (!v34)
                      {
LABEL_47:
                        swift_bridgeObjectRelease();
                        unint64_t v77 = v146;
                        defaultLogger()();
                        unint64_t v78 = (unint64_t)v162;
                        swift_bridgeObjectRetain_n();
                        id v79 = v50;
                        uint64_t v80 = Logger.logObject.getter();
                        int v81 = static os_log_type_t.debug.getter();
                        BOOL v82 = os_log_type_enabled(v80, (os_log_type_t)v81);
                        id v168 = v79;
                        if (v82)
                        {
                          LODWORD(v133) = v81;
                          uint64_t v83 = swift_slowAlloc();
                          char v132 = (void *)swift_slowAlloc();
                          id v184 = v132;
                          *(_DWORD *)uint64_t v83 = v143;
                          swift_bridgeObjectRetain();
                          uint64_t v183 = sub_10004C3A4(v149, v78, (uint64_t *)&v184);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease_n();
                          *(_WORD *)(v83 + 12) = 2080;
                          id v84 = [v79 credentialIdentifier];
                          uint64_t v85 = v151;
                          if (v84)
                          {
                            uint64_t v86 = v84;
                            uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                            unint64_t v89 = v88;
                          }
                          else
                          {
                            uint64_t v87 = 0x3E6C696E3CLL;
                            unint64_t v89 = 0xE500000000000000;
                          }
                          uint64_t v183 = sub_10004C3A4(v87, v89, (uint64_t *)&v184);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          id v109 = v168;

                          swift_bridgeObjectRelease();
                          _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v133, "Identified presentment key %s in credential %s for deletion", (uint8_t *)v83, 0x16u);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();

                          uint64_t v38 = v170;
                          uint64_t v37 = v144;
                          v144(v77, v167);
                        }
                        else
                        {

                          swift_bridgeObjectRelease_n();
                          uint64_t v38 = v170;
                          uint64_t v37 = v144;
                          v144(v77, v167);
                          uint64_t v85 = v151;
                        }
                        uint64_t v110 = *(void **)(v85 + 16);
                        [v110 deleteObject:v47];
                        id v184 = 0;
                        if (![v110 save:&v184])
                        {
                          id v114 = v184;
                          _convertNSErrorToError(_:)();

                          swift_willThrow();
                          goto LABEL_70;
                        }
                        BOOL v48 = __OFADD__(v150++, 1);
                        unint64_t v111 = v154;
                        if (v48) {
                          __break(1u);
                        }
                        id v112 = v184;
                        if (v111 >> 60 == 15)
                        {
                          uint64_t v41 = (uint64_t)v171;
                          uint64_t v113 = v180;
                          uint64_t v44 = v178;
                          if (v148) {
                            goto LABEL_65;
                          }
                          uint64_t v117 = v152;
                          sub_100147B98(v147);
                          if (v117)
                          {
LABEL_70:
                            uint64_t v152 = 0;
                            sub_100006CC8((uint64_t *)&unk_1001C4950);
                            uint64_t v118 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
                            unint64_t v119 = (*(unsigned __int8 *)(*(void *)v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v118 + 80);
                            uint64_t v120 = swift_allocObject();
                            *(_OWORD *)(v120 + 16) = v139;
                            unint64_t v121 = v120 + v119;
                            char v122 = (void *)(v120 + v119 + v118[14]);
                            uint64_t v123 = type metadata accessor for DIPError.PropertyKey();
                            (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v123 - 8) + 104))(v121, v142, v123);
                            v122[3] = &type metadata for String;
                            void *v122 = 25447;
                            v122[1] = 0xE200000000000000;
                            sub_10004A5E8(v120);
                            (*(void (**)(char *, void, uint64_t))v140)(v158, v141, v159);
                            type metadata accessor for DIPError();
                            sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
                            swift_allocError();
                            swift_errorRetain();
                            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                            id v184 = 0;
                            unint64_t v185 = 0xE000000000000000;
                            _StringGuts.grow(_:)(27);
                            swift_bridgeObjectRelease();
                            id v184 = (id)0xD000000000000019;
                            unint64_t v185 = v135;
                            v124._uint64_t countAndFlagsBits = v149;
                            v124._object = v162;
                            String.append(_:)(v124);
                            swift_bridgeObjectRelease();
                            uint64_t v125 = v157;
                            defaultLogger()();
                            DIPRecordError(_:message:log:)();
                            swift_bridgeObjectRelease();

                            swift_errorRelease();
                            swift_errorRelease();

                            sub_100009764(v153, v154);
                            uint64_t v108 = v125;
LABEL_71:
                            uint64_t v38 = v170;
                            uint64_t v37 = v144;
                            v144(v108, v167);
                            (*v161)(v172, v180);
                            uint64_t v41 = (uint64_t)v171;
LABEL_72:
                            uint64_t v44 = v178;
                            uint64_t v43 = (uint64_t)v179;
LABEL_73:
                            uint64_t v34 = v163;
                            goto LABEL_13;
                          }
                          uint64_t v152 = 0;
LABEL_65:
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          uint64_t v115 = v153;
                          sub_100009778(v153, v111);
                          uint64_t v116 = v152;
                          sub_100142C88(v115, v111);
                          if (v116)
                          {
                            sub_100009764(v115, v111);
                            goto LABEL_70;
                          }
                          uint64_t v152 = 0;

                          sub_100009764(v115, v111);
                          swift_bridgeObjectRelease();

                          sub_100009764(v115, v111);
                          uint64_t v41 = (uint64_t)v171;
                          uint64_t v113 = v180;
                          uint64_t v44 = v178;
                        }
                        (*v161)(v172, v113);
                        uint64_t v43 = (uint64_t)v179;
                        goto LABEL_73;
                      }
                    }
                    else
                    {
                      uint64_t v34 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      if (!v34) {
                        goto LABEL_47;
                      }
                    }
                    id v168 = (id)(v74 & 0xC000000000000001);
                    uint64_t v43 = 4;
                    while (1)
                    {
                      uint64_t v38 = v43 - 4;
                      if (v168)
                      {
                        id v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                        uint64_t v41 = v43 - 3;
                        if (__OFADD__(v38, 1)) {
                          goto LABEL_86;
                        }
                      }
                      else
                      {
                        id v75 = *(id *)(v74 + 8 * v43);
                        uint64_t v41 = v43 - 3;
                        if (__OFADD__(v38, 1)) {
                          goto LABEL_86;
                        }
                      }
                      uint64_t v37 = (void (*)(void, void))v75;
                      id v76 = [v75 presentmentKey];

                      if (!v76) {
                        break;
                      }

                      ++v43;
                      if (v41 == v34) {
                        goto LABEL_47;
                      }
                    }
                    id v168 = v37;
                    swift_bridgeObjectRelease();
                    uint64_t v92 = v156;
                    defaultLogger()();
                    id v93 = v50;
                    unint64_t v94 = (unint64_t)v162;
                    swift_bridgeObjectRetain();
                    id v95 = v93;
                    uint64_t v96 = Logger.logObject.getter();
                    int v97 = static os_log_type_t.debug.getter();
                    if (!os_log_type_enabled(v96, (os_log_type_t)v97))
                    {
                      swift_bridgeObjectRelease_n();

                      sub_100009764(v153, v154);
                      uint64_t v108 = v92;
                      goto LABEL_71;
                    }
                    LODWORD(v147) = v97;
                    os_log_t v148 = v96;
                    uint64_t v98 = swift_slowAlloc();
                    char v133 = (void *)swift_slowAlloc();
                    id v184 = v133;
                    *(_DWORD *)uint64_t v98 = v143;
                    swift_bridgeObjectRetain();
                    uint64_t v183 = sub_10004C3A4(v149, v94, (uint64_t *)&v184);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v98 + 12) = 2080;
                    id v99 = [v95 credentialIdentifier];
                    uint64_t v41 = (uint64_t)v171;
                    uint64_t v100 = v167;
                    uint64_t v34 = v163;
                    if (v99)
                    {
                      uint64_t v101 = v99;
                      uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v162 = v95;
                      uint64_t v103 = v100;
                      uint64_t v104 = v102;
                      unint64_t v106 = v105;

                      uint64_t v107 = v104;
                      uint64_t v100 = v103;
                      id v95 = v162;
                    }
                    else
                    {
                      uint64_t v107 = 0x3E6C696E3CLL;
                      unint64_t v106 = 0xE500000000000000;
                    }
                    uint64_t v183 = sub_10004C3A4(v107, v106, (uint64_t *)&v184);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    swift_bridgeObjectRelease();
                    os_log_t v126 = v148;
                    _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v147, "Skipping deletion of presentment key %s in credential %s because credential has a payload without an assigned presentment key", (uint8_t *)v98, 0x16u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    sub_100009764(v153, v154);
                    uint64_t v38 = v170;
                    uint64_t v37 = v144;
                    v144(v156, v100);
                    uint64_t v90 = *v161;
                    unint64_t v91 = v172;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();

                    sub_100009764(v153, v154);
                    uint64_t v90 = *v161;
                    unint64_t v91 = v72;
                  }
                  v90(v91, v180);
                }
                goto LABEL_29;
              }
            }
            else
            {
              (*v177)(v41, 1, 1, v180);
            }

            sub_100014BBC(v41, &qword_1001C15B0);
LABEL_29:
            uint64_t v44 = v178;
            uint64_t v43 = (uint64_t)v179;
            goto LABEL_13;
          }
        }
LABEL_13:
        if (v45 == v44) {
          goto LABEL_82;
        }
      }
    }
    uint64_t v150 = 0;
LABEL_82:
    swift_bridgeObjectRelease();
    type metadata accessor for IDCSAnalytics();
    uint64_t v127 = v165;
    char v128 = v164;
    uint64_t v129 = v166;
    (*(void (**)(char *, void, uint64_t))(v165 + 104))(v164, enum case for IDCSAnalytics.GarbageCollectionEventType.inactivePresentmentKey(_:), v166);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v128, v129);
    sub_100007290();
    return (*(uint64_t (**)(char *, uint64_t))(v169 + 8))(v155, v180);
  }
  return result;
}

uint64_t sub_100151004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_1001511A0, 0, 0);
}

uint64_t sub_1001511A0()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 120);
  *(void *)(v0 + 232) = *(void *)(v4 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 240) = v5;
  *(void *)(v5 + 16) = sub_100156E2C;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 416) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(void *)(v0 + 248) = v7;
  *(void *)(v0 + 256) = (v3 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  swift_retain();
  v7(v1, v6, v2);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v8;
  uint64_t v9 = sub_100006CC8(&qword_1001C3C70);
  *uint64_t v8 = v0;
  v8[1] = sub_10015131C;
  uint64_t v10 = *(void *)(v0 + 224);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 112, v10, sub_100156E48, v5, v9);
}

uint64_t sub_10015131C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[26] + 8))(v2[28], v2[25]);
    swift_release();
    uint64_t v3 = sub_10015186C;
  }
  else
  {
    uint64_t v4 = v2[28];
    uint64_t v5 = v2[25];
    uint64_t v6 = v2[26];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[35] = v7;
    v2[36] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    swift_release();
    swift_release();
    v2[37] = v2[14];
    uint64_t v3 = sub_1001514A0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001514A0()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 304) = v2;
  if (v2)
  {
    *(void *)(v0 + 312) = *(void *)(*(void *)(v0 + 128) + 32);
    *(_DWORD *)(v0 + 420) = enum case for DIPError.Code.internalError(_:);
    *(_DWORD *)(v0 + 424) = enum case for DIPError.PropertyKey.daemonSessionState(_:);
    *(void *)(v0 + 352) = 0;
    *(void *)(v0 + 360) = _swiftEmptyArrayStorage;
    uint64_t v3 = v1[4];
    *(void *)(v0 + 368) = v3;
    uint64_t v4 = (void *)v1[5];
    *(void *)(v0 + 376) = v4;
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 176);
    if (v7)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v11 + 4) = sub_10004C3A4(v3, (unint64_t)v4, &v29);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "deleting encryption key %s", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v23(v8, v9);
    *(void *)(v0 + 384) = v23;
    *(void *)(v0 + 64) = 778790244;
    *(void *)(v0 + 72) = 0xE400000000000000;
    v24._uint64_t countAndFlagsBits = v3;
    v24._object = v4;
    String.append(_:)(v24);
    uint64_t v25 = *(void *)(v0 + 64);
    uint64_t v26 = *(void *)(v0 + 72);
    *(void *)(v0 + 392) = v26;
    unint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v27;
    *unint64_t v27 = v0;
    v27[1] = sub_100151BBC;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v25, v26);
  }
  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    uint64_t v13 = *(unsigned int *)(v0 + 416);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 200);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    sub_100156CE4(v16, v0 + 16);
    uint64_t v18 = swift_allocObject();
    *(void *)(v0 + 320) = v18;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = _swiftEmptyArrayStorage;
    long long v19 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v18 + 32) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v18 + 48) = v19;
    *(_OWORD *)(v18 + 64) = *(_OWORD *)(v0 + 48);
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 328) = v20;
    *(void *)(v20 + 16) = sub_100156EB4;
    *(void *)(v20 + 24) = v18;
    swift_retain();
    v12(v14, v13, v15);
    swift_retain();
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100151914;
    uint64_t v22 = *(void *)(v0 + 216);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v21, v22, sub_10004A390, v20, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_10015186C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100151914()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 280))(*(void *)(v2 + 216), *(void *)(v2 + 200));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100151B14;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_100151A80;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100151A80()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100151B14()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100151BBC()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100152104;
  }
  else {
    uint64_t v2 = sub_100151CF0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100151CF0()
{
  uint64_t v37 = v0;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(char **)(v0 + 360);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = sub_1000D0D48(0, *((void *)v2 + 2) + 1, 1, *(char **)(v0 + 360));
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000D0D48((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  uint64_t v6 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 376);
  *((void *)v2 + 2) = v4 + 1;
  BOOL v7 = &v2[16 * v4];
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = v5;
  uint64_t v8 = *(void *)(v0 + 352) + 1;
  if (v8 == *(void *)(v0 + 304))
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    uint64_t v10 = *(unsigned int *)(v0 + 416);
    uint64_t v11 = *(void *)(v0 + 216);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    sub_100156CE4(v13, v0 + 16);
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 320) = v15;
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = v2;
    long long v16 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v15 + 48) = v16;
    *(_OWORD *)(v15 + 64) = *(_OWORD *)(v0 + 48);
    uint64_t v17 = swift_allocObject();
    *(void *)(v0 + 328) = v17;
    *(void *)(v17 + 16) = sub_100156EB4;
    *(void *)(v17 + 24) = v15;
    swift_retain();
    v9(v11, v10, v12);
    swift_retain();
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v18;
    void *v18 = v0;
    v18[1] = sub_100151914;
    uint64_t v19 = *(void *)(v0 + 216);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v18, v19, sub_10004A390, v17, (char *)&type metadata for () + 8);
  }
  else
  {
    *(void *)(v0 + 352) = v8;
    *(void *)(v0 + 360) = v2;
    uint64_t v20 = *(void *)(v0 + 296) + 16 * v8;
    uint64_t v21 = *(void *)(v20 + 32);
    *(void *)(v0 + 368) = v21;
    uint64_t v22 = *(void **)(v20 + 40);
    *(void *)(v0 + 376) = v22;
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 192);
    uint64_t v27 = *(void *)(v0 + 168);
    uint64_t v28 = *(void *)(v0 + 176);
    if (v25)
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v29 + 4) = sub_10004C3A4(v21, (unint64_t)v22, &v36);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "deleting encryption key %s", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v30(v26, v27);
    *(void *)(v0 + 384) = v30;
    *(void *)(v0 + 64) = 778790244;
    *(void *)(v0 + 72) = 0xE400000000000000;
    v31._uint64_t countAndFlagsBits = v21;
    v31._object = v22;
    String.append(_:)(v31);
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v33 = *(void *)(v0 + 72);
    *(void *)(v0 + 392) = v33;
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_100151BBC;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v32, v33);
  }
}

uint64_t sub_100152104()
{
  uint64_t v46 = v0;
  Swift::String v41 = *(Swift::String *)(v0 + 368);
  unsigned int v38 = *(_DWORD *)(v0 + 424);
  unsigned int v40 = *(_DWORD *)(v0 + 420);
  uint64_t v43 = *(void *)(v0 + 168);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v39 = *(void *)(v0 + 144);
  uint64_t v42 = *(void *)(v0 + 184);
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)(v0 + 152) + 104);
  v2(v1);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  unint64_t v3 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001768E0;
  unint64_t v6 = v5 + v4;
  BOOL v7 = (void *)(v6 + v3[14]);
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v6, v38, v8);
  v7[3] = &type metadata for String;
  *BOOL v7 = 25447;
  v7[1] = 0xE200000000000000;
  sub_10004A5E8(v5);
  ((void (*)(uint64_t, void, uint64_t))v2)(v1, v40, v39);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 80) = 0xD00000000000002BLL;
  *(void *)(v0 + 88) = 0x80000001001843C0;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  v44(v42, v43);
  uint64_t v9 = *(void *)(v0 + 352) + 1;
  if (v9 == *(void *)(v0 + 304))
  {
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    uint64_t v12 = *(unsigned int *)(v0 + 416);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    sub_100156CE4(v15, v0 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v0 + 320) = v17;
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = v10;
    long long v18 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v17 + 32) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v17 + 48) = v18;
    *(_OWORD *)(v17 + 64) = *(_OWORD *)(v0 + 48);
    uint64_t v19 = swift_allocObject();
    *(void *)(v0 + 328) = v19;
    *(void *)(v19 + 16) = sub_100156EB4;
    *(void *)(v19 + 24) = v17;
    swift_retain();
    v11(v13, v12, v14);
    swift_retain();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v20;
    void *v20 = v0;
    v20[1] = sub_100151914;
    uint64_t v21 = *(void *)(v0 + 216);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v20, v21, sub_10004A390, v19, (char *)&type metadata for () + 8);
  }
  else
  {
    *(void *)(v0 + 352) = v9;
    uint64_t v22 = *(void *)(v0 + 296) + 16 * v9;
    uint64_t v23 = *(void *)(v22 + 32);
    *(void *)(v0 + 368) = v23;
    os_log_type_t v24 = *(void **)(v22 + 40);
    *(void *)(v0 + 376) = v24;
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    BOOL v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 176);
    if (v27)
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 4) = sub_10004C3A4(v23, (unint64_t)v24, &v45);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "deleting encryption key %s", (uint8_t *)v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v32(v28, v29);
    *(void *)(v0 + 384) = v32;
    *(void *)(v0 + 64) = 778790244;
    *(void *)(v0 + 72) = 0xE400000000000000;
    v33._uint64_t countAndFlagsBits = v23;
    v33._object = v24;
    String.append(_:)(v33);
    uint64_t v34 = *(void *)(v0 + 64);
    uint64_t v35 = *(void *)(v0 + 72);
    *(void *)(v0 + 392) = v35;
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_100151BBC;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v34, v35);
  }
}

uint64_t sub_100152820@<X0>(void *a1@<X8>)
{
  int v81 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v87 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v63 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v63 - v15;
  unint64_t v17 = v90;
  uint64_t result = sub_10000CE78();
  if (!v17)
  {
    unint64_t v19 = result;
    unint64_t v73 = v6;
    uint64_t v74 = 0;
    uint64_t v89 = v7;
    uint64_t v83 = v11;
    id v84 = v14;
    uint64_t result = Date.init()();
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v21 = v19;
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v21 = v19;
      uint64_t v22 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v23 = v87;
    uint64_t v77 = v8;
    if (v22)
    {
      unint64_t v72 = v3;
      uint64_t v70 = v1;
      if (v22 >= 1)
      {
        uint64_t v24 = 0;
        unint64_t v25 = v21;
        unint64_t v90 = v21 & 0xC000000000000001;
        uint64_t v85 = (void (**)(uint64_t, char *, uint64_t))(v77 + 32);
        uint64_t v87 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
        BOOL v82 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
        id v79 = (void (**)(char *, uint64_t))(v77 + 8);
        id v69 = (void (**)(char *, uint64_t))(v23 + 1);
        uint64_t v80 = (char *)_swiftEmptyArrayStorage;
        *(void *)&long long v20 = 136315394;
        long long v67 = v20;
        id v66 = (char *)&type metadata for Any + 8;
        uint64_t v26 = (uint64_t)v73;
        unint64_t v88 = v16;
        uint64_t v86 = v22;
        unint64_t v75 = v21;
        while (1)
        {
          if (v90) {
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v27 = *(id *)(v25 + 8 * v24 + 32);
          }
          uint64_t v28 = v27;
          id v29 = [v27 credential];
          if (!v29) {
            goto LABEL_8;
          }
          uint64_t v30 = v29;
          id v31 = [v29 options];
          if (!v31) {
            break;
          }
          uint64_t v32 = v31;
          id v33 = [v28 updatedAt];
          if (!v33)
          {
            (*v87)(v26, 1, 1, v89);
LABEL_24:

            sub_100014BBC(v26, &qword_1001C15B0);
            goto LABEL_36;
          }
          uint64_t v34 = v33;
          uint64_t v35 = v83;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v36 = *v85;
          uint64_t v37 = v35;
          unsigned int v38 = v84;
          uint64_t v39 = v89;
          (*v85)(v26, v37, v89);
          (*v87)(v26, 0, 1, v39);
          if ((*v82)(v26, 1, v39) == 1) {
            goto LABEL_24;
          }
          v36((uint64_t)v38, (char *)v26, v39);
          id v40 = [v28 identifier];
          if (!v40)
          {

            goto LABEL_35;
          }
          Swift::String v41 = v40;
          uint64_t v42 = v38;
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v44 = v43;

          if ((uint64_t)[v32 deleteInactiveKeysAfterDays] > 0)
          {
            unint64_t v78 = v44;
            unsigned int v38 = v42;
            if (Date.isAtLeast(days:after:)())
            {
              defaultLogger()();
              swift_bridgeObjectRetain_n();
              id v45 = v30;
              uint64_t v46 = Logger.logObject.getter();
              int v65 = static os_log_type_t.debug.getter();
              unint64_t v68 = v46;
              BOOL v47 = os_log_type_enabled(v46, (os_log_type_t)v65);
              unint64_t v25 = v75;
              id v71 = v45;
              if (v47)
              {
                BOOL v48 = v45;
                uint64_t v49 = swift_slowAlloc();
                uint64_t v64 = swift_slowAlloc();
                uint64_t v91 = v64;
                *(_DWORD *)uint64_t v49 = v67;
                unint64_t v50 = v78;
                swift_bridgeObjectRetain();
                *(void *)(v49 + 4) = sub_10004C3A4(v76, v50, &v91);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v49 + 12) = 2080;
                id v51 = [v48 credentialIdentifier];
                if (v51)
                {
                  id v52 = v51;
                  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v54 = v53;

                  uint64_t v55 = v63;
                }
                else
                {
                  unint64_t v54 = 0xE500000000000000;
                  uint64_t v55 = 0x3E6C696E3CLL;
                }
                *(void *)(v49 + 14) = sub_10004C3A4(v55, v54, &v91);
                id v56 = v71;

                swift_bridgeObjectRelease();
                uint64_t v57 = v68;
                _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v65, "Identified device encryption key %s in credential %s for deletion", (uint8_t *)v49, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*v69)(v72, v70);
                unsigned int v38 = v84;
              }
              else
              {

                swift_bridgeObjectRelease_n();
                (*v69)(v72, v70);
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v80 = sub_1000D0D48(0, *((void *)v80 + 2) + 1, 1, v80);
              }
              unint64_t v59 = *((void *)v80 + 2);
              unint64_t v58 = *((void *)v80 + 3);
              unint64_t v60 = v78;
              if (v59 >= v58 >> 1)
              {
                uint64_t v80 = sub_1000D0D48((char *)(v58 > 1), v59 + 1, 1, v80);
                unint64_t v60 = v78;
              }
              Swift::String v61 = v80;
              *((void *)v80 + 2) = v59 + 1;
              char v62 = &v61[16 * v59];
              *((void *)v62 + 4) = v76;
              *((void *)v62 + 5) = v60;

LABEL_35:
              (*v79)(v38, v39);
LABEL_36:
              uint64_t v16 = v88;
              uint64_t v22 = v86;
              goto LABEL_9;
            }
          }
          (*v79)(v42, v39);
          swift_bridgeObjectRelease();

          uint64_t v16 = v88;
          uint64_t v22 = v86;
          unint64_t v25 = v75;
LABEL_9:
          if (v22 == ++v24) {
            goto LABEL_38;
          }
        }

LABEL_8:
        goto LABEL_9;
      }
      __break(1u);
    }
    else
    {
      uint64_t v80 = (char *)_swiftEmptyArrayStorage;
LABEL_38:
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v16, v89);
      void *v81 = v80;
    }
  }
  return result;
}

unint64_t sub_100153044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v87 = *(v4 - 1);
  __chkstk_darwin(v4);
  uint64_t v80 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  BOOL v82 = *(unint64_t **)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType();
  uint64_t v81 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1;
  uint64_t v16 = (void (*)(char *, uint64_t))v88;
  unint64_t result = sub_10000CE78();
  uint64_t v83 = v16;
  if (!v16)
  {
    unint64_t v19 = result;
    uint64_t v60 = v12;
    uint64_t v84 = v6;
    uint64_t v85 = v15;
    uint64_t v76 = v11;
    id v71 = v9;
    uint64_t v86 = v14;
    if (result >> 62) {
      goto LABEL_53;
    }
    uint64_t v20 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    if (v20)
    {
      unint64_t v21 = 0;
      unint64_t v88 = v19 & 0xC000000000000001;
      uint64_t v79 = v19 & 0xFFFFFFFFFFFFFF8;
      uint64_t v77 = 0;
      unint64_t v78 = (void *)(v19 + 32);
      ++v82;
      unsigned int v69 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
      unsigned int v68 = enum case for DIPError.Code.internalError(_:);
      long long v67 = (void (**)(uint64_t, void, void *))(v87 + 104);
      unint64_t v59 = (void *)(a2 + 72);
      *(void *)&long long v18 = 136315138;
      long long v66 = v18;
      int v65 = (char *)&type metadata for Any + 8;
      long long v64 = xmmword_1001768E0;
      unint64_t v63 = 0x80000001001840A0;
      unint64_t v62 = 0x8000000100184040;
      Swift::String v61 = (void *)0x80000001001843F0;
      uint64_t v22 = v81;
      uint64_t v23 = v86;
      uint64_t v74 = v20;
      unint64_t v75 = (void *)v19;
      uint64_t v73 = a2;
      uint64_t v70 = v4;
      while (1)
      {
        if (v88)
        {
          id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v21 >= *(void *)(v79 + 16)) {
            goto LABEL_50;
          }
          id v24 = (id)v78[v21];
        }
        unint64_t v25 = v24;
        if (__OFADD__(v21++, 1))
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        id v27 = [v24 identifier];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v4 = v30;

          uint64_t v31 = *(void *)(a2 + 16);
          if (!v31) {
            goto LABEL_21;
          }
          BOOL v32 = *(void *)(a2 + 32) == v29 && *(void *)(a2 + 40) == (void)v4;
          uint64_t v87 = v29;
          if (v32)
          {
LABEL_35:
            uint64_t v34 = v85;
          }
          else
          {
            char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v34 = v85;
            if ((v33 & 1) == 0)
            {
              if (v31 == 1) {
                goto LABEL_21;
              }
              if ((*(void *)(a2 + 48) != v87 || *(void **)(a2 + 56) != v4)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if (v31 != 2)
                {
                  uint64_t v35 = a2;
                  unint64_t v19 = (unint64_t)v59;
                  a2 = 2;
                  uint64_t v36 = v87;
                  while (1)
                  {
                    uint64_t v37 = a2 + 1;
                    if (__OFADD__(a2, 1)) {
                      break;
                    }
                    BOOL v38 = *(void *)(v19 - 8) == v36 && *(void *)v19 == (void)v4;
                    if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                      goto LABEL_35;
                    }
                    v19 += 16;
                    ++a2;
                    if (v37 == v31)
                    {
                      swift_bridgeObjectRelease();

                      a2 = v35;
                      goto LABEL_44;
                    }
                  }
LABEL_52:
                  __break(1u);
LABEL_53:
                  swift_bridgeObjectRetain();
                  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_4;
                }
LABEL_21:
                swift_bridgeObjectRelease();

                uint64_t v23 = v86;
                goto LABEL_7;
              }
            }
          }
          uint64_t v39 = v76;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          id v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc();
            v89[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v42 = v66;
            swift_bridgeObjectRetain();
            *(void *)(v42 + 4) = sub_10004C3A4(v87, (unint64_t)v4, (uint64_t *)v89);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "deleting encryption key %s from coreData", (uint8_t *)v42, 0xCu);
            swift_arrayDestroy();
            uint64_t v34 = v85;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          unint64_t v19 = *v82;
          ((void (*)(char *, uint64_t))*v82)(v39, v84);
          a2 = (uint64_t)v80;
          unint64_t v43 = *(void **)(v34 + 16);
          [v43 deleteObject:v25];
          v89[0] = 0;
          if ([v43 save:v89])
          {
            id v44 = v89[0];

            swift_bridgeObjectRelease();
            if (__OFADD__(v77, 1)) {
              goto LABEL_51;
            }
            ++v77;
          }
          else
          {
            id v45 = v89[0];
            uint64_t v83 = (void (*)(char *, uint64_t))v19;
            id v46 = v45;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            sub_100006CC8((uint64_t *)&unk_1001C4950);
            BOOL v47 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
            unint64_t v48 = (*(unsigned __int8 *)(*(void *)v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v47 + 80);
            uint64_t v49 = swift_allocObject();
            *(_OWORD *)(v49 + 16) = v64;
            unint64_t v50 = v49 + v48;
            id v51 = (void *)(v50 + v47[14]);
            uint64_t v52 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v52 - 8) + 104))(v50, v69, v52);
            v51[3] = &type metadata for String;
            *id v51 = 25447;
            v51[1] = 0xE200000000000000;
            unint64_t v72 = sub_10004A5E8(v49);
            (*v67)(a2, v68, v70);
            type metadata accessor for DIPError();
            sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            swift_errorRetain();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            v89[0] = 0;
            v89[1] = (id)0xE000000000000000;
            _StringGuts.grow(_:)(57);
            v53._uint64_t countAndFlagsBits = 0xD000000000000037;
            v53._object = v61;
            String.append(_:)(v53);
            v54._uint64_t countAndFlagsBits = v87;
            v54._object = v4;
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            uint64_t v55 = v71;
            defaultLogger()();
            DIPRecordError(_:message:log:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();

            v83(v55, v84);
            uint64_t v83 = 0;
          }
          a2 = v73;
LABEL_44:
          uint64_t v22 = v81;
          uint64_t v23 = v86;
          uint64_t v20 = v74;
          unint64_t v19 = (unint64_t)v75;
        }
        else
        {
        }
LABEL_7:
        if (v21 == v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = v60;
          goto LABEL_47;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v22 = v81;
    uint64_t v23 = v86;
    uint64_t v56 = v60;
LABEL_47:
    type metadata accessor for IDCSAnalytics();
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v23, enum case for IDCSAnalytics.GarbageCollectionEventType.inactiveDeviceEncryptionKey(_:), v56);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v56);
    uint64_t v57 = v83;
    unint64_t result = (unint64_t)sub_100007290();
    uint64_t v83 = v57;
  }
  return result;
}

void sub_100153A14(uint64_t a1)
{
  uint64_t v72 = a1;
  uint64_t v69 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType();
  uint64_t v71 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v70 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v67 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (void (*)(os_log_t, uint64_t))((char *)&v67 - v15);
  __chkstk_darwin(v14);
  os_log_t v91 = (os_log_t)((char *)&v67 - v17);
  sub_1000065F8(0);
  if (v1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return;
  }
  uint64_t v19 = v18;
  uint64_t v83 = 0;
  uint64_t v84 = v16;
  uint64_t v87 = v6;
  uint64_t v88 = v7;
  uint64_t v82 = v4;
  uint64_t v89 = v13;
  uint64_t v85 = v10;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v19;
  uint64_t v86 = v3;
  if (v22)
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v92 = (void *)swift_slowAlloc();
    *(_DWORD *)id v24 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v25 = Set.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v93 = sub_10004C3A4(v25, v27, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Occupied SE slots: %{public}s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v28 = *(void (**)(os_log_t, uint64_t))(v90 + 8);
  v28(v91, v88);
  uint64_t v29 = v83;
  uint64_t v30 = v84;
  unint64_t v31 = sub_10000D23C();
  if (v29)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v32 = v31;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  int v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    os_log_t v91 = v33;
    uint64_t v36 = swift_slowAlloc();
    LODWORD(v83) = v35;
    uint64_t v37 = (uint8_t *)v36;
    uint64_t v90 = swift_slowAlloc();
    uint64_t v92 = (void *)v90;
    uint64_t v81 = v37;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v80 = v37 + 4;
    swift_bridgeObjectRetain();
    uint64_t v38 = Set.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v93 = sub_10004C3A4(v38, v40, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v41 = v91;
    _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v83, "Credential SE slots: %s", v81, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v42 = v84;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v42 = v30;
  }
  v28(v42, v88);
  unint64_t v43 = *(void *)(v32 + 16);
  unint64_t v44 = *(void *)(v23 + 16);
  uint64_t v84 = v28;
  if (v43 <= v44 >> 3)
  {
    uint64_t v92 = (void *)v23;
    sub_100043888(v32);
    swift_bridgeObjectRelease();
    id v45 = v92;
  }
  else
  {
    id v45 = sub_1000439FC(v32, v23);
    swift_bridgeObjectRelease();
  }
  uint64_t v47 = v82;
  uint64_t v68 = 0;
  int64_t v48 = 0;
  uint64_t v49 = v45[7];
  uint64_t v74 = (char *)(v45 + 7);
  uint64_t v50 = 1 << *((unsigned char *)v45 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  int64_t v75 = (unint64_t)(v50 + 63) >> 6;
  LODWORD(v82) = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  LODWORD(v81) = enum case for DIPError.Code.internalError(_:);
  uint64_t v80 = (uint8_t *)(v47 + 104);
  *(void *)&long long v46 = 134349056;
  long long v73 = v46;
  long long v79 = xmmword_1001768E0;
  unint64_t v77 = 0x8000000100184040;
  unint64_t v78 = 0x80000001001840A0;
  unint64_t v76 = 0x8000000100184430;
  uint64_t v53 = v88;
  uint64_t v83 = v45;
  Swift::String v54 = (void (*)(char *, uint64_t))v84;
  while (v52)
  {
    unint64_t v55 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    unint64_t v56 = v55 | (v48 << 6);
    uint64_t v57 = v89;
LABEL_31:
    os_log_t v91 = *(os_log_t *)(v45[6] + 8 * v56);
    defaultLogger()();
    Swift::String v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = v73;
      *(void *)(v63 + 4) = v91;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Identified SE key in slot %{public}ld for deletion", (uint8_t *)v63, 0xCu);
      uint64_t v57 = v89;
      swift_slowDealloc();
    }

    v54(v57, v53);
    sub_100147B98((uint64_t)v91);
    BOOL v58 = __OFADD__(v68++, 1);
    id v45 = v83;
    if (v58)
    {
      __break(1u);
LABEL_40:
      uint64_t v64 = v69;
      swift_release();
      type metadata accessor for IDCSAnalytics();
      uint64_t v65 = v71;
      long long v66 = v70;
      (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, enum case for IDCSAnalytics.GarbageCollectionEventType.orphanedSESlots(_:), v64);
      static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v64);
      sub_100007290();
      return;
    }
  }
  BOOL v58 = __OFADD__(v48++, 1);
  uint64_t v57 = v89;
  if (v58)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v48 >= v75) {
    goto LABEL_40;
  }
  unint64_t v59 = *(void *)&v74[8 * v48];
  if (v59)
  {
LABEL_30:
    unint64_t v52 = (v59 - 1) & v59;
    unint64_t v56 = __clz(__rbit64(v59)) + (v48 << 6);
    goto LABEL_31;
  }
  int64_t v60 = v48 + 1;
  if (v48 + 1 >= v75) {
    goto LABEL_40;
  }
  unint64_t v59 = *(void *)&v74[8 * v60];
  if (v59) {
    goto LABEL_29;
  }
  int64_t v60 = v48 + 2;
  if (v48 + 2 >= v75) {
    goto LABEL_40;
  }
  unint64_t v59 = *(void *)&v74[8 * v60];
  if (v59) {
    goto LABEL_29;
  }
  int64_t v60 = v48 + 3;
  if (v48 + 3 >= v75) {
    goto LABEL_40;
  }
  unint64_t v59 = *(void *)&v74[8 * v60];
  if (v59)
  {
LABEL_29:
    int64_t v48 = v60;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v48 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    if (v48 >= v75) {
      goto LABEL_40;
    }
    unint64_t v59 = *(void *)&v74[8 * v48];
    ++v60;
    if (v59) {
      goto LABEL_30;
    }
  }
LABEL_42:
  __break(1u);
}

void sub_1001546D4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_100163D84();
  if (!v2)
  {
    unint64_t v10 = v9;
    uint64_t v18 = v8;
    uint64_t v22 = 0;
    if (v9 >> 62) {
      goto LABEL_13;
    }
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v19 = v6;
    for (unint64_t i = v5; v11; unint64_t i = v5)
    {
      unint64_t v5 = v10 & 0xC000000000000001;
      uint64_t v6 = 4;
      while (1)
      {
        id v12 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v10 + 8 * v6);
        uint64_t v13 = v12;
        uint64_t v14 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        os_log_type_t v21 = v12;
        sub_1001557C8(&v21, a2, &v22, a1);

        ++v6;
        if (v14 == v11) {
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v19 = v6;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    type metadata accessor for IDCSAnalytics();
    uint64_t v16 = v18;
    uint64_t v15 = v19;
    unint64_t v17 = i;
    (*(void (**)(char *, void, unint64_t))(v19 + 104))(v18, enum case for IDCSAnalytics.GarbageCollectionEventType.inactivePayloadProtectionKey(_:), i);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)();
    (*(void (**)(char *, unint64_t))(v15 + 8))(v16, v17);
    sub_100007290();
  }
}

uint64_t sub_100154908(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(51);
  v4._object = (void *)0x8000000100184380;
  v4._uint64_t countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return 0;
}

id sub_10015498C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  __chkstk_darwin(v3);
  uint64_t v83 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v85 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v84 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v93 = (char *)&v76 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v76 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v89 = (char *)&v76 - v15;
  __chkstk_darwin(v14);
  uint64_t v90 = (char *)&v76 - v16;
  uint64_t v17 = type metadata accessor for CredentialKeyType();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  id v24 = (char *)&v76 - v23;
  __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v76 - v25;
  uint64_t v27 = enum case for CredentialKeyType.legacySE(_:);
  unint64_t v94 = *(void *)(v18 + 104);
  ((void (*)(char *, void, uint64_t))v94)((char *)&v76 - v25, enum case for CredentialKeyType.legacySE(_:), v17);
  uint64_t v28 = sub_10000C8F8((uint64_t)v26, 0);
  if (v1) {
    return (id)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v26, v17);
  }
  long long v79 = v21;
  uint64_t v80 = v28;
  uint64_t v30 = v26;
  unint64_t v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  v31(v30, v17);
  ((void (*)(char *, uint64_t, uint64_t))v94)(v24, v27, v17);
  uint64_t v32 = sub_10000C8F8((uint64_t)v24, 1);
  v31(v24, v17);
  uint64_t v33 = (uint64_t)v79;
  ((void (*)(char *, uint64_t, uint64_t))v94)(v79, v27, v17);
  uint64_t v34 = sub_10000C8F8(v33, 2);
  uint64_t v78 = a1;
  v31((char *)v33, v17);
  int v35 = v90;
  defaultLogger()();
  unint64_t v36 = v80;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v37 = Logger.logObject.getter();
  LODWORD(v79) = static os_log_type_t.debug.getter();
  BOOL v38 = os_log_type_enabled(v37, (os_log_type_t)v79);
  unint64_t v39 = v36 >> 62;
  unint64_t v40 = v32;
  unint64_t v94 = v34;
  if (v38)
  {
    os_log_t v77 = v37;
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 134218496;
    uint64_t v42 = v91;
    if (v39)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v43 = *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v96 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v96 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 22) = 2048;
    if (v94 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v96 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v46 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v79, "count of keys : %ld + %ld + %ld", (uint8_t *)v41, 0x20u);
    swift_slowDealloc();

    uint64_t v47 = v92;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v42 = v91;
    uint64_t v47 = v92;
  }
  int64_t v48 = *(void (**)(char *, uint64_t))(v42 + 8);
  v48(v35, v47);
  if (v39)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v49 = *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v50 = v93;
  if (v49)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v52 = v47;
    defaultLogger()();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      unint64_t v94 = (unint64_t)v48;
      unint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      uint64_t v91 = 0;
      *(_DWORD *)unint64_t v55 = 136315138;
      uint64_t v95 = sub_10004C3A4(0xD000000000000024, 0x8000000100184250, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s no action performed", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v94)(v93, v52);
    }
    else
    {

      v48(v50, v52);
    }
    return sub_100007290();
  }
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v51) {
    goto LABEL_19;
  }
  if (v94 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v56 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v56) {
    goto LABEL_20;
  }
  uint64_t v57 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
  BOOL v58 = v57;
  if (v57)
  {
    id v59 = [v57 encryptedACL];
    if (v59)
    {
      int64_t v60 = v59;
      uint64_t v61 = v47;
      uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v64 = v63;

      switch(v64 >> 62)
      {
        case 1uLL:
          unint64_t v94 = (unint64_t)v48;
          sub_1000035EC(v62, v64);
          uint64_t v69 = (int)v62;
          uint64_t v70 = v62 >> 32;
          goto LABEL_37;
        case 2uLL:
          unint64_t v94 = (unint64_t)v48;
          uint64_t v69 = *(void *)(v62 + 16);
          uint64_t v70 = *(void *)(v62 + 24);
          sub_1000035EC(v62, v64);
LABEL_37:
          if (v69 != v70) {
            goto LABEL_38;
          }
          break;
        case 3uLL:
          sub_1000035EC(v62, v64);
          break;
        default:
          unint64_t v94 = (unint64_t)v48;
          sub_1000035EC(v62, v64);
          if ((v64 & 0xFF000000000000) == 0) {
            break;
          }
LABEL_38:
          uint64_t v71 = v88;
          defaultLogger()();
          uint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v74 = 0;
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "Setting sidv acl to empty data", v74, 2u);
            swift_slowDealloc();
          }

          ((void (*)(char *, uint64_t))v94)(v71, v61);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          [v58 setEncryptedACL:isa];

          sub_100007290();
          break;
      }
    }

    return sub_100007290();
  }
  uint64_t v65 = v89;
  defaultLogger()();
  long long v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "missing global auth acl, skipping", v68, 2u);
    swift_slowDealloc();
  }

  return (id)((uint64_t (*)(char *, uint64_t))v48)(v65, v47);
}

id sub_1001556B8(uint64_t *a1)
{
  return sub_10015498C(*a1);
}

uint64_t sub_1001556D4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10014F3C0(&v4);
  if (!v1) {
    *a1 = v4;
  }
  return result;
}

uint64_t sub_10015570C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C4720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100155774()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001557AC(uint64_t a1)
{
  sub_1001546D4(a1, *(void *)(v1 + 16));
}

unint64_t sub_1001557C8(void **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v174 = a4;
  uint64_t v173 = a3;
  uint64_t v175 = a2;
  uint64_t v172 = type metadata accessor for DIPError.Code();
  uint64_t v199 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v171 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for DIPError();
  uint64_t v190 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v169 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v193 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for Date();
  *(void *)&long long v189 = *(void *)(v195 - 8);
  uint64_t v9 = __chkstk_darwin(v195);
  uint64_t v196 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  long long v186 = (char *)&v149 - v12;
  __chkstk_darwin(v11);
  unint64_t v185 = (char *)&v149 - v13;
  uint64_t v197 = type metadata accessor for Logger();
  uint64_t v188 = *(char **)(v197 - 8);
  uint64_t v14 = __chkstk_darwin(v197);
  uint64_t v16 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v149 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v149 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v149 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v149 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  unint64_t v31 = (char *)&v149 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&v149 - v33;
  __chkstk_darwin(v32);
  unint64_t v36 = (char *)&v149 - v35;
  uint64_t v37 = *a1;
  BOOL v38 = v200;
  unint64_t result = (unint64_t)sub_1000F80DC();
  if (!v38)
  {
    unint64_t v41 = result;
    uint64_t v176 = 0;
    uint64_t v163 = v37;
    uint64_t v198 = v36;
    uint64_t v194 = v34;
    unint64_t v182 = v31;
    uint64_t v183 = v28;
    uint64_t v161 = v25;
    uint64_t v153 = v22;
    uint64_t v165 = v19;
    uint64_t v180 = v16;
    unint64_t v192 = result;
    if (result >> 62) {
      goto LABEL_63;
    }
    uint64_t v42 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    uint64_t v44 = (uint64_t)v193;
    uint64_t v43 = v194;
    uint64_t v46 = v195;
    uint64_t v45 = v196;
    uint64_t v48 = v197;
    uint64_t v47 = v198;
    if (v42)
    {
      if (v42 >= 1)
      {
        uint64_t v49 = 0;
        unint64_t v191 = v41 & 0xC000000000000001;
        unint64_t v200 = (void (**)(char *, uint64_t))(v188 + 8);
        uint64_t v179 = (void (**)(uint64_t, char *, uint64_t))(v189 + 32);
        unint64_t v181 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56);
        id v168 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
        uint64_t v162 = (void (**)(char *, char *, uint64_t))(v189 + 16);
        unint64_t v167 = v189 + 8;
        uint64_t v152 = &v204;
        unsigned int v160 = enum case for DIPError.Code.internalError(_:);
        uint64_t v159 = (void (**)(char *, void, uint64_t))(v199 + 104);
        uint64_t v158 = (void (**)(uint64_t, char *, uint64_t))(v190 + 16);
        id v157 = (void (**)(char *, uint64_t))(v190 + 8);
        *(void *)&long long v40 = 136315138;
        long long v189 = v40;
        uint64_t v188 = (char *)&type metadata for Any + 8;
        *(void *)&long long v40 = 136315394;
        long long v151 = v40;
        unint64_t v156 = 0x80000001001842F0;
        unint64_t v155 = 0x8000000100184040;
        unint64_t v154 = (void *)0x8000000100184330;
        uint64_t v150 = (void *)0x80000001001842C0;
        uint64_t v190 = v42;
        while (1)
        {
          uint64_t v199 = v49;
          if (v191) {
            id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v50 = *(id *)(v41 + 8 * v49 + 32);
          }
          uint64_t v51 = v50;
          defaultLogger()();
          id v52 = v51;
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v55 = swift_slowAlloc();
            uint64_t v201 = swift_slowAlloc();
            *(_DWORD *)uint64_t v55 = v189;
            id v56 = [v52 identifier];
            if (v56)
            {
              uint64_t v57 = v56;
              uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v60 = v59;
            }
            else
            {
              uint64_t v58 = 0;
              unint64_t v60 = 0xE000000000000000;
            }
            uint64_t v45 = v196;
            *(void *)(v55 + 4) = sub_10004C3A4(v58, v60, &v201);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "checking if payload protection key %s has a payload", (uint8_t *)v55, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v61 = *v200;
            uint64_t v48 = v197;
            uint64_t v47 = v198;
            (*v200)(v198, v197);
            uint64_t v44 = (uint64_t)v193;
            uint64_t v43 = v194;
            uint64_t v46 = v195;
          }
          else
          {

            uint64_t v61 = *v200;
            (*v200)(v47, v48);
          }
          id v62 = [v52 protectedPayload];

          if (v62)
          {
            defaultLogger()();
            id v63 = v52;
            unint64_t v64 = Logger.logObject.getter();
            os_log_type_t v65 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v64, v65))
            {
              uint64_t v66 = swift_slowAlloc();
              uint64_t v201 = swift_slowAlloc();
              *(_DWORD *)uint64_t v66 = v189;
              id v67 = [v63 identifier];
              if (v67)
              {
                uint64_t v68 = v67;
                uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v71 = v70;
              }
              else
              {
                uint64_t v69 = 0;
                unint64_t v71 = 0xE000000000000000;
              }
              uint64_t v45 = v196;
              *(void *)(v66 + 4) = sub_10004C3A4(v69, v71, &v201);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "Skipping payload protection key deletion for %s as it is associated with a payload", (uint8_t *)v66, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v43 = v194;
              uint64_t v48 = v197;
              v61(v194, v197);
              uint64_t v44 = (uint64_t)v193;
              uint64_t v46 = v195;
            }
            else
            {

              v61(v43, v48);
            }
            goto LABEL_8;
          }
          id v72 = [v52 identifier];
          if (!v72)
          {

            goto LABEL_9;
          }
          os_log_type_t v73 = v72;
          uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          int64_t v75 = v74;

          id v76 = [v52 createdAt];
          os_log_t v77 = v183;
          if (v76)
          {
            uint64_t v78 = v76;
            uint64_t v187 = v75;
            long long v79 = v186;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v80 = *v179;
            (*v179)(v44, v79, v46);
            (*v181)(v44, 0, 1, v46);
            if ((*v168)(v44, 1, v46) != 1)
            {
              uint64_t v177 = v61;
              uint64_t v81 = v185;
              v80((uint64_t)v185, (char *)v44, v46);
              defaultLogger()();
              (*v162)(v45, v81, v46);
              id v82 = v52;
              uint64_t v83 = Logger.logObject.getter();
              uint64_t v84 = v46;
              os_log_type_t v85 = static os_log_type_t.debug.getter();
              BOOL v86 = os_log_type_enabled(v83, v85);
              uint64_t v87 = (void (**)(char *, uint64_t))v167;
              uint64_t v178 = v167 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              if (v86)
              {
                uint64_t v88 = swift_slowAlloc();
                uint64_t v89 = swift_slowAlloc();
                uint64_t v201 = v89;
                *(_DWORD *)uint64_t v88 = v151;
                uint64_t v90 = v82;
                id v91 = [v82 identifier];
                uint64_t v164 = (void (*)(char *, uint64_t))v89;
                if (v91)
                {
                  uint64_t v92 = v91;
                  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v95 = v94;
                }
                else
                {
                  uint64_t v93 = 0;
                  unint64_t v95 = 0xE000000000000000;
                }
                uint64_t v203 = sub_10004C3A4(v93, v95, &v201);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v88 + 12) = 2080;
                sub_100156C9C(&qword_1001C1358, (void (*)(uint64_t))&type metadata accessor for Date);
                uint64_t v112 = v195;
                unint64_t v111 = v196;
                uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v203 = sub_10004C3A4(v113, v114, &v201);
                id v82 = v90;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                uint64_t v115 = v111;
                id v109 = *(void (**)(char *, uint64_t))v167;
                (*(void (**)(char *, uint64_t))v167)(v115, v112);
                os_log_type_t v116 = v85;
                uint64_t v46 = v112;
                _os_log_impl((void *)&_mh_execute_header, v83, v116, "The createdAt for the payload protection key %s is %s", (uint8_t *)v88, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v110 = v177;
                v177(v183, v197);
                uint64_t v44 = (uint64_t)v193;
              }
              else
              {
                unint64_t v106 = v45;

                uint64_t v107 = *v87;
                (*v87)(v106, v84);

                uint64_t v108 = v77;
                id v109 = v107;
                uint64_t v110 = v177;
                v177(v108, v197);
                uint64_t v46 = v84;
              }
              uint64_t v117 = v186;
              uint64_t v118 = v165;
              Date.init()();
              char v119 = Date.isAtLeast(days:after:)();
              v109(v117, v46);
              id v166 = v82;
              if (v119)
              {
                defaultLogger()();
                uint64_t v120 = Logger.logObject.getter();
                os_log_type_t v121 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v120, v121))
                {
                  char v122 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)char v122 = 0;
                  uint64_t v123 = v120;
                  os_log_type_t v124 = v121;
                  uint64_t v125 = "The time to delete payload protection keys has elapsed. Will attempt to delete";
                  goto LABEL_50;
                }
              }
              else
              {
                os_log_t v126 = v161;
                defaultLogger()();
                uint64_t v127 = Logger.logObject.getter();
                os_log_type_t v128 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v127, v128))
                {
                  uint64_t v129 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v129 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v127, v128, "The time to delete payload protection keys has not elapsed", v129, 2u);
                  swift_slowDealloc();
                }

                v110(v126, v197);
                id v130 = [self standardUserDefaults];
                v131._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
                v131._object = v150;
                Swift::Bool v132 = NSUserDefaults.internalBool(forKey:)(v131);

                if (!v132)
                {
                  v109(v185, v46);
                  swift_bridgeObjectRelease();

LABEL_59:
                  uint64_t v45 = v196;
                  uint64_t v48 = v197;
                  uint64_t v43 = v194;
                  goto LABEL_8;
                }
                uint64_t v118 = v153;
                defaultLogger()();
                uint64_t v120 = Logger.logObject.getter();
                os_log_type_t v133 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v120, v133))
                {
                  char v122 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)char v122 = 0;
                  uint64_t v123 = v120;
                  os_log_type_t v124 = v133;
                  uint64_t v125 = "Forcing to delete payload protection keys as the internal settings is enabled";
LABEL_50:
                  _os_log_impl((void *)&_mh_execute_header, v123, v124, v125, v122, 2u);
                  swift_slowDealloc();
                }
              }

              v110(v118, v197);
              uint64_t v134 = *v173 + 1;
              unint64_t v135 = v163;
              uint64_t v136 = v184;
              if (__OFADD__(*v173, 1))
              {
                __break(1u);
LABEL_63:
                swift_bridgeObjectRetain();
                uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
                unint64_t result = swift_bridgeObjectRelease();
                unint64_t v41 = v192;
                goto LABEL_4;
              }
              uint64_t v164 = v109;
              uint64_t *v173 = v134;
              uint64_t v201 = 778793072;
              unint64_t v202 = 0xE400000000000000;
              v137._uint64_t countAndFlagsBits = v136;
              v137._object = v187;
              String.append(_:)(v137);
              uint64_t v138 = v176;
              sub_10004CE78(v201, v202);
              if (!v138)
              {
                swift_bridgeObjectRelease();
                uint64_t v139 = defaultLogger()();
                __chkstk_darwin(v139);
                Logger.cryptoParam(_:)();
                v177(v180, v197);
                uint64_t v140 = v135;
                id v141 = v166;
                [v140 removeCryptoKeysObject:v166];
                sub_100007290();
                uint64_t v176 = 0;
                v164(v185, v46);
                swift_bridgeObjectRelease();

                goto LABEL_59;
              }
              swift_bridgeObjectRelease();
              uint64_t v176 = 0;
              (*v159)(v171, v160, v172);
              swift_errorRetain();
              sub_100102620((uint64_t)_swiftEmptyArrayStorage);
              unsigned int v142 = v169;
              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
              sub_100156C9C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
              uint64_t v143 = v170;
              swift_allocError();
              (*v158)(v144, v142, v143);
              uint64_t v201 = 0;
              unint64_t v202 = 0xE000000000000000;
              _StringGuts.grow(_:)(77);
              v145._uint64_t countAndFlagsBits = 0xD00000000000004BLL;
              v145._object = v154;
              String.append(_:)(v145);
              v146._uint64_t countAndFlagsBits = v184;
              v146._object = v187;
              String.append(_:)(v146);
              swift_bridgeObjectRelease();
              uint64_t v147 = v180;
              defaultLogger()();
              DIPRecordError(_:message:log:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();

              uint64_t v148 = v197;
              v177(v147, v197);
              (*v157)(v142, v143);
              uint64_t v46 = v195;
              v164(v185, v195);
              uint64_t v48 = v148;
              swift_errorRelease();
              goto LABEL_56;
            }
          }
          else
          {
            (*v181)(v44, 1, 1, v46);
          }
          swift_bridgeObjectRelease();
          sub_100014BBC(v44, &qword_1001C15B0);
          uint64_t v96 = v182;
          defaultLogger()();
          id v97 = v52;
          uint64_t v98 = Logger.logObject.getter();
          os_log_type_t v99 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v98, v99))
          {
            uint64_t v100 = swift_slowAlloc();
            uint64_t v201 = swift_slowAlloc();
            *(_DWORD *)uint64_t v100 = v189;
            id v101 = [v97 identifier];
            if (v101)
            {
              uint64_t v102 = v101;
              uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v105 = v104;
            }
            else
            {
              uint64_t v103 = 0;
              unint64_t v105 = 0xE000000000000000;
            }
            *(void *)(v100 + 4) = sub_10004C3A4(v103, v105, &v201);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "CreatedAt doesn't exist for payloadProtectionKey %s", (uint8_t *)v100, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v48 = v197;
            v61(v182, v197);
            uint64_t v44 = (uint64_t)v193;
            uint64_t v46 = v195;
LABEL_56:
            uint64_t v45 = v196;
            uint64_t v43 = v194;
            goto LABEL_8;
          }

          v61(v96, v48);
          uint64_t v43 = v194;
LABEL_8:
          uint64_t v47 = v198;
LABEL_9:
          uint64_t v49 = v199 + 1;
          unint64_t v41 = v192;
          if (v190 == v199 + 1) {
            return swift_bridgeObjectRelease();
          }
        }
      }
      __break(1u);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100156C94()
{
  return sub_100154908(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100156C9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100156CE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  uint64_t v3 = a2 + 8;
  uint64_t v4 = a1 + 8;
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(v3, v4, v6);
  return a2;
}

uint64_t sub_100156D74(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100007458;
  return sub_100151004(a1, a2, v6, v2 + 24);
}

uint64_t sub_100156E2C@<X0>(void *a1@<X8>)
{
  return sub_100152820(a1);
}

void *sub_100156E48@<X0>(void *a1@<X8>)
{
  return sub_1000638B8(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100156E64()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000B9DC(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

unint64_t sub_100156EB4()
{
  return sub_100153044(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100156ED8(uint64_t a1)
{
}

uint64_t sub_100156EFC()
{
  swift_release();
  swift_release();
  sub_10000B9DC(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100156F44(uint64_t a1)
{
  return sub_10014FA5C(a1, *(void *)(v1 + 16));
}

uint64_t destroy for GarbageCollector(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_release();

  return sub_10000B9DC(v1);
}

uint64_t initializeWithCopy for GarbageCollector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for GarbageCollector(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  sub_10000BAAC(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for GarbageCollector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  sub_10000B9DC(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GarbageCollector(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GarbageCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GarbageCollector()
{
  return &type metadata for GarbageCollector;
}

uint64_t sub_10015719C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 64) = a3;
  return _swift_task_switch(sub_1001571BC, 0, 0);
}

uint64_t sub_1001571BC()
{
  uint64_t v1 = v0[8];
  v0[6] = type metadata accessor for FeatureFlagProvider();
  v0[7] = &protocol witness table for FeatureFlagProvider;
  sub_10002C3A0(v0 + 3);
  swift_retain();
  FeatureFlagProvider.init()();
  v0[2] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100157298;
  return sub_100149378(0, 0);
}

uint64_t sub_100157298()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100157394, 0, 0);
}

uint64_t sub_100157394()
{
  sub_1001575DC(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001573F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  sub_100006CC8(&qword_1001C0E30);
  *(void *)(v3 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100157488, 0, 0);
}

uint64_t sub_100157488()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  swift_retain();
  v4(v2, 1, 1, v3);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  swift_retain();
  sub_1000AB864(v2, (uint64_t)&unk_1001C3050, (uint64_t)v5);
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10015759C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001575DC(uint64_t a1)
{
  return a1;
}

char *sub_100157630(uint64_t a1)
{
  return sub_1001599D4(a1, &enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.accountKeySigningKey(_:), 0xD000000000000021, 0x8000000100184750, 73);
}

char *sub_10015766C(uint64_t a1)
{
  uint64_t v25 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v19 = *(void *)(v1 - 8);
  uint64_t v20 = v1;
  __chkstk_darwin(v1);
  uint64_t v21 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType();
  uint64_t v3 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose();
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for COSEKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  uint64_t v13 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v25, v9);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.keySigningKey(_:), v22);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.accountKeySigningKey(_:), v24);
  KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)();
  uint64_t v16 = v26;
  uint64_t v17 = sub_1001586F0((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v23);
  if (v16)
  {
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, enum case for DIPError.Code.internalError(_:), v20);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100159FC0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v17;
}

uint64_t sub_100157B04()
{
  uint64_t v37 = type metadata accessor for DIPError.Code();
  uint64_t v0 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  BOOL v38 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v32 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006CC8(&qword_1001C0B68);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for COSEKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v27 - v17;
  sub_100069D68((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100014BBC((uint64_t)v11, &qword_1001C0B68);
    uint64_t v19 = *(void (**)(char *, void, uint64_t))(v0 + 104);
    uint64_t v20 = v38;
    uint64_t v21 = v37;
    v19(v38, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v37);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100159FC0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v22 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v23 = v21;
  }
  else
  {
    uint64_t v28 = v0;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    (*(void (**)(char *, void, uint64_t))(v29 + 104))(v6, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.deviceEncryptionKey(_:), v30);
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v32, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.keyAuthorizationKey(_:), v35);
    KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)();
    uint64_t v24 = v36;
    uint64_t v25 = sub_1001586F0((uint64_t)v8);
    if (!v24)
    {
      uint64_t v22 = (uint64_t)v25;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      return v22;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    uint64_t v19 = *(void (**)(char *, void, uint64_t))(v28 + 104);
    uint64_t v22 = v24;
    uint64_t v20 = v38;
    uint64_t v23 = v37;
  }
  v19(v20, enum case for DIPError.Code.internalError(_:), v23);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100159FC0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  return v22;
}

unint64_t sub_1001581DC()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  __chkstk_darwin(v1);
  uint64_t v29 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType();
  uint64_t v25 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  __chkstk_darwin(v3);
  uint64_t v24 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose();
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  uint64_t v23 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for COSEKey();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v20 - v16;
  sub_10006AA9C((uint64_t)&v20 - v16);
  if (v0)
  {
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v29, enum case for DIPError.Code.internalError(_:), v28);
    swift_errorRetain();
    unint64_t v19 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100159FC0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = v8;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v7, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.presentmentKey(_:), v22);
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v24, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.keyAuthorizationKey(_:), v26);
    KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)();
    unint64_t v19 = (unint64_t)sub_1001586F0((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v20);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  return v19;
}

char *sub_1001586F0(uint64_t a1)
{
  os_log_t v126 = (char *)a1;
  uint64_t v108 = type metadata accessor for DIPError.Code();
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v110 = (char *)&v95 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100006CC8(&qword_1001C2838);
  __chkstk_darwin(v109);
  uint64_t v111 = (uint64_t)&v95 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v118 = type metadata accessor for SHA256();
  uint64_t v113 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  unint64_t v117 = (unint64_t)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for SHA256Digest();
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v112 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v122 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  unint64_t isa = (unint64_t)v122[-1].isa;
  __chkstk_darwin(v122);
  uint64_t v123 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for RFC8152SigStructure();
  uint64_t v121 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v125 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v95 - v12;
  uint64_t v14 = sub_100006CC8(&qword_1001C2800);
  char v119 = *(void (**)(uint64_t, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v17 = CBOREncoder.init()();
  type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  sub_100159FC0(&qword_1001C4780, (void (*)(uint64_t))&type metadata accessor for KeyAuthorizationCOSE_Sign1Payload);
  uint64_t v18 = v127;
  uint64_t v19 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  if (v18) {
    goto LABEL_3;
  }
  uint64_t v104 = v14;
  os_log_t v126 = v13;
  uint64_t v102 = v11;
  uint64_t v127 = v8;
  uint64_t v106 = v17;
  unint64_t v105 = v7;
  *(void *)&long long v129 = v19;
  *((void *)&v129 + 1) = v20;
  unint64_t v21 = v20;
  uint64_t v22 = v19;
  swift_allocObject();
  sub_10000354C(v22, v21);
  CBOREncoder.init()();
  sub_100082FDC();
  sub_100083030();
  CBOREncodedCBOR.init(value:tag:encoder:)();
  uint64_t v101 = v22;
  unint64_t v100 = v21;
  uint64_t v24 = v104;
  uint64_t v103 = 0;
  uint64_t v25 = CBOREncodedCBOR.dataValue.getter();
  unint64_t v27 = v26;
  (*((void (**)(char *, uint64_t))v119 + 1))(v16, v24);
  uint64_t v28 = (uint64_t)v126;
  uint64_t v29 = defaultLogger()();
  __chkstk_darwin(v29);
  Logger.cryptoParam(_:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
  v125 += 8;
  char v119 = v30;
  v30(v28, v127);
  sub_100006CC8(&qword_1001C2828);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001768E0;
  *(void *)(inited + 32) = static RFC8152SigStructure.protectedHeaderAlg.getter();
  unint64_t v32 = isa;
  uint64_t v34 = isa + 104;
  uint64_t v33 = *(void (**)(void))(isa + 104);
  uint64_t v35 = v123;
  LODWORD(v104) = enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:);
  uint64_t v36 = v122;
  os_log_type_t v99 = (void (*)(uint64_t, void, NSObject *))v33;
  v33(v123);
  uint64_t v37 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
  (*(void (**)(uint64_t, NSObject *))(v32 + 8))(v35, v36);
  unint64_t v38 = v27;
  *(void *)(inited + 40) = v37;
  sub_10004CC60(inited);
  swift_setDeallocating();
  sub_10000354C(v25, v27);
  uint64_t v16 = v105;
  RFC8152SigStructure.init(protected:payload:)();
  sub_100159FC0(&qword_1001C2830, (void (*)(uint64_t))&type metadata accessor for RFC8152SigStructure);
  uint64_t v39 = v124;
  uint64_t v40 = v103;
  uint64_t v41 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v16, v39);
    sub_1000035EC(v101, v100);
    sub_1000035EC(v25, v27);
LABEL_3:
    swift_release();
    return v16;
  }
  uint64_t v43 = v41;
  uint64_t v95 = v34;
  uint64_t v98 = v25;
  uint64_t v103 = 0;
  unint64_t v44 = v42;
  uint64_t v45 = defaultLogger()();
  __chkstk_darwin(v45);
  Logger.cryptoParam(_:)();
  v119(v28, v127);
  sub_100159FC0(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
  unint64_t v47 = v117;
  unint64_t v46 = v118;
  dispatch thunk of HashFunction.init()();
  unint64_t isa = v44;
  unint64_t v97 = v38;
  uint64_t v96 = v43;
  switch(v44 >> 62)
  {
    case 1uLL:
      unint64_t v48 = isa;
      if (v43 >> 32 < (int)v43) {
        __break(1u);
      }
      sub_10000354C(v43, isa);
      uint64_t v58 = v103;
      sub_100063458((int)v43, v43 >> 32);
      uint64_t v103 = v58;
      sub_1000035EC(v43, v48);
      os_log_type_t v54 = v116;
      unint64_t v56 = v118;
      uint64_t v55 = v119;
      uint64_t v57 = v115;
      unint64_t v49 = v47;
      break;
    case 2uLL:
      unint64_t v48 = isa;
      uint64_t v51 = *(void *)(v43 + 16);
      uint64_t v52 = *(void *)(v43 + 24);
      sub_10000354C(v43, isa);
      swift_retain();
      swift_retain();
      uint64_t v53 = v103;
      sub_100063458(v51, v52);
      uint64_t v103 = v53;
      if (v53)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x100159988);
      }
      swift_release();
      swift_release();
      sub_1000035EC(v43, v48);
      os_log_type_t v54 = v116;
      unint64_t v56 = v118;
      uint64_t v55 = v119;
      uint64_t v57 = v115;
      unint64_t v49 = v117;
      break;
    case 3uLL:
      *(void *)((char *)&v129 + 6) = 0;
      *(void *)&long long v129 = 0;
      unint64_t v49 = v47;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v50 = v43;
      unint64_t v48 = isa;
      goto LABEL_12;
    default:
      *(void *)&long long v129 = v43;
      unint64_t v48 = isa;
      DWORD2(v129) = isa;
      WORD6(v129) = WORD2(isa);
      unint64_t v49 = v47;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v50 = v43;
LABEL_12:
      sub_1000035EC(v50, v48);
      os_log_type_t v54 = v116;
      uint64_t v55 = v119;
      unint64_t v56 = v46;
      uint64_t v57 = v115;
      break;
  }
  unint64_t v59 = v112;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(unint64_t, unint64_t))(v113 + 8))(v49, v56);
  sub_100159FC0(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v60 = Digest.data.getter();
  unint64_t v62 = v61;
  (*(void (**)(char *, uint64_t))(v114 + 8))(v59, v57);
  uint64_t v63 = (uint64_t)v126;
  uint64_t v64 = defaultLogger()();
  __chkstk_darwin(v64);
  Logger.cryptoParam(_:)();
  v55(v63, v127);
  uint64_t v16 = (char *)v54[3];
  uint64_t v65 = v54[4];
  sub_100014D14(v54, (uint64_t)v16);
  uint64_t v66 = v103;
  uint64_t v67 = (*(uint64_t (**)(uint64_t, unint64_t, char *, uint64_t))(v65 + 16))(v60, v62, v16, v65);
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v105, v124);
    sub_1000035EC(v101, v100);
    sub_1000035EC(v98, v97);
    sub_1000035EC(v96, v48);
    sub_1000035EC(v60, v62);
    goto LABEL_3;
  }
  unint64_t v69 = v68;
  os_log_t v126 = (char *)v67;
  uint64_t v103 = 0;
  uint64_t v70 = v54[3];
  uint64_t v71 = v54[4];
  sub_100014D14(v54, v70);
  uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v70, v71);
  uint64_t v74 = v121;
  if (v73 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v107 + 104))(v110, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v108);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v16 = (char *)type metadata accessor for DIPError();
    sub_100159FC0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v96, isa);
    sub_1000035EC(v60, v62);
    swift_release();
    sub_1000035EC((uint64_t)v126, v69);
    sub_1000035EC(v98, v97);
    sub_1000035EC(v101, v100);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v105, v124);
  }
  else
  {
    uint64_t v75 = v72;
    unint64_t v76 = v73;
    v99(v123, v104, v122);
    unint64_t v77 = v97;
    sub_10000354C(v98, v97);
    sub_100009778(v75, v76);
    uint64_t v78 = (uint64_t)v126;
    sub_10000354C((uint64_t)v126, v69);
    uint64_t v123 = v75;
    uint64_t v79 = v78;
    uint64_t v80 = v111;
    COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
    sub_100159F1C();
    uint64_t v81 = v103;
    uint64_t v82 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    unint64_t v84 = v76;
    unint64_t v85 = v69;
    uint64_t v103 = v81;
    if (v81)
    {
      uint64_t v16 = (char *)v84;
      sub_1000035EC(v96, isa);
      sub_1000035EC(v60, v62);
      swift_release();
      sub_1000035EC(v79, v69);
      sub_100009764(v123, (unint64_t)v16);
      sub_1000035EC(v98, v77);
      sub_1000035EC(v101, v100);
      sub_100014BBC(v80, &qword_1001C2838);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v105, v124);
    }
    else
    {
      uint64_t v16 = (char *)v82;
      unint64_t v86 = v83;
      unint64_t v117 = v85;
      unint64_t v118 = v84;
      uint64_t v87 = v102;
      defaultLogger()();
      sub_10000354C((uint64_t)v16, v86);
      sub_10000354C((uint64_t)v16, v86);
      uint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.debug.getter();
      int v90 = v89;
      char v122 = v88;
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v91 = swift_slowAlloc();
        LODWORD(v116) = v90;
        uint64_t v92 = (uint8_t *)v91;
        *(void *)&long long v129 = swift_slowAlloc();
        *(_DWORD *)uint64_t v92 = 136315138;
        uint64_t v115 = (uint64_t)(v92 + 4);
        Swift::String v93 = Data.base16EncodedString()();
        uint64_t v128 = sub_10004C3A4(v93._countAndFlagsBits, (unint64_t)v93._object, (uint64_t *)&v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000035EC((uint64_t)v16, v86);
        sub_1000035EC((uint64_t)v16, v86);
        unint64_t v94 = v122;
        _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v116, "Created key authorization %s", v92, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000035EC(v96, isa);
        sub_1000035EC(v60, v62);

        swift_release();
      }
      else
      {
        sub_1000035EC(v96, isa);
        sub_1000035EC(v60, v62);

        swift_release();
        sub_1000035EC((uint64_t)v16, v86);
        sub_1000035EC((uint64_t)v16, v86);
      }
      sub_1000035EC((uint64_t)v126, v117);
      sub_100009764(v123, v118);
      sub_1000035EC(v98, v97);
      sub_1000035EC(v101, v100);
      v119((uint64_t)v87, v127);
      sub_100014BBC(v111, &qword_1001C2838);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v105, v124);
    }
  }
  return v16;
}

char *sub_100159998(uint64_t a1)
{
  return sub_1001599D4(a1, (unsigned int *)&enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.keySigningKey(_:), 0xD00000000000001ALL, 0x8000000100184530, 63);
}

char *sub_1001599D4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v27 = a4;
  uint64_t v28 = a3;
  uint64_t v33 = a2;
  uint64_t v32 = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  __chkstk_darwin(v5);
  uint64_t v25 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType();
  uint64_t v7 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose();
  uint64_t v10 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for COSEKey();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  uint64_t v17 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v32, v13);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *v33, v29);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.keyAuthorizationKey(_:), v31);
  KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)();
  uint64_t v20 = v34;
  unint64_t v21 = sub_1001586F0((uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v30);
  if (v20)
  {
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, enum case for DIPError.Code.internalError(_:), v24);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100159FC0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v21;
}

uint64_t sub_100159E74()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 26, 0xD000000000000018);
}

uint64_t sub_100159EAC()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 33, 0xD00000000000001FLL);
}

uint64_t sub_100159EE4()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 27, 0xD000000000000019);
}

unint64_t sub_100159F1C()
{
  unint64_t result = qword_1001C4788;
  if (!qword_1001C4788)
  {
    sub_100016F64(&qword_1001C2838);
    sub_100159FC0(&qword_1001C4790, (void (*)(uint64_t))&type metadata accessor for COSE_Sign1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C4788);
  }
  return result;
}

uint64_t sub_100159FC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialKeyAuthorizer()
{
  return &type metadata for CredentialKeyAuthorizer;
}

uint64_t sub_10015A018@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1001C03C0 != -1) {
    swift_once();
  }
  uint64_t v3 = *(os_unfair_lock_s **)(qword_1001C4BD0 + 16);
  uint64_t v4 = (uint64_t *)&v3[4];
  uint64_t v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_100006E24(v4, v11);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v11[1];
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  sub_100017800((uint64_t)v12);
  swift_release();
  sub_100006E40(v6);
  sub_100006E40((uint64_t)v7);
  uint64_t v9 = sub_100006E40(v8);
  if (v7)
  {
    v7(v9);
    return sub_100006E40((uint64_t)v7);
  }
  else
  {
    swift_allocObject();
    uint64_t result = AppleIDVManager.init()();
    a1[3] = v1;
    a1[4] = (uint64_t)&protocol witness table for AppleIDVManager;
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for PresentmentKeySelectionProvider()
{
  return self;
}

unint64_t sub_10015A1A4(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10015A230(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v33 = type metadata accessor for DIPError.Code();
  uint64_t v29 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v30 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = sub_10000D6C4(a4, a5);
  if (v7)
  {
    uint64_t v17 = v33;
    uint64_t v19 = v29;
    uint64_t v18 = v30;
LABEL_3:
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.internalError(_:), v17);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return;
  }
  uint64_t v20 = (void *)v16;
  if (!v16)
  {
    uint64_t v31 = 0;
    uint64_t v32 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v31 = 0xD00000000000001FLL;
    uint64_t v32 = (void *)0x8000000100184890;
    v25._uint64_t countAndFlagsBits = a4;
    v25._object = a5;
    String.append(_:)(v25);
    uint64_t v19 = v29;
    uint64_t v18 = v30;
    uint64_t v17 = v33;
    (*(void (**)(char *, void, uint64_t))(v29 + 104))(v30, enum case for DIPError.Code.invalidStoredData(_:), v33);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_3;
  }
  if (a7)
  {
    unint64_t v21 = (void *)v16;
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    swift_bridgeObjectRetain();
    v22._uint64_t countAndFlagsBits = 11565;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = a6;
    v23._object = a7;
    String.append(_:)(v23);
    unint64_t v24 = sub_100044E98(v31, v32);
    id v26 = (id)v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for StoredRelyingParty();
      id v26 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(a1 + 16)];
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v26 setRelyingPartyIdentifier:v27];
    }
    [v26 addPresentmentKeysObject:v21, v29];

    uint64_t v20 = v21;
  }
  uint64_t v28 = [(char *)[v20 timesUsed:v29];
  if (__OFADD__(v28, 1))
  {
    __break(1u);
  }
  else
  {
    [v20 setTimesUsed:v28 + 1];
  }
}

uint64_t sub_10015A658(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v237 = a4;
  uint64_t v229 = a1;
  object = (void *)type metadata accessor for Logger();
  uint64_t v241 = *(object - 1);
  uint64_t v11 = __chkstk_darwin(object);
  id v228 = (char *)&v223 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  Class v232 = (char *)&v223 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v227 = (uint64_t)&v223 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  Class v234 = (char *)&v223 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  size_t v230 = (size_t)&v223 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v226 = (char *)&v223 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  Class v231 = (char *)&v223 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  NSString v27 = (char *)&v223 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v223 - v28;
  defaultLogger()();
  swift_bridgeObjectRetain();
  id v30 = a6;
  sub_100009778(a2, a3);
  id v31 = v30;
  swift_bridgeObjectRetain();
  sub_100009778(a2, a3);
  uint64_t countAndFlagsBits = Logger.logObject.getter();
  LODWORD(v235) = static os_log_type_t.debug.getter();
  BOOL v33 = os_log_type_enabled((os_log_t)countAndFlagsBits, (os_log_type_t)v235);
  unint64_t v242 = a3;
  uint64_t v244 = (void (*)(void, void))a2;
  uint64_t v238 = object;
  uint64_t v239 = a5;
  id v240 = v31;
  if (v33)
  {
    uint64_t v225 = countAndFlagsBits;
    size_t v236 = a3 >> 60;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(void *)&long long __s1 = v35;
    *(_DWORD *)uint64_t v34 = 136315650;
    id v36 = [v31 credentialIdentifier];
    Class v233 = v27;
    uint64_t v224 = v35;
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;
    }
    else
    {
      uint64_t v38 = 0;
      unint64_t v40 = 0xE000000000000000;
    }
    uint64_t countAndFlagsBits = 0x3E6C696E3CLL;
    *(void *)&__s2[0] = sub_10004C3A4(v38, v40, (uint64_t *)&__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    if (v239) {
      uint64_t v45 = v237;
    }
    else {
      uint64_t v45 = 0x3E6C696E3CLL;
    }
    object = (void *)0xE500000000000000;
    if (v239) {
      unint64_t v46 = (unint64_t)v239;
    }
    else {
      unint64_t v46 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    *(void *)&__s2[0] = sub_10004C3A4(v45, v46, (uint64_t *)&__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 22) = 2080;
    if (v236 <= 0xE)
    {
      uint64_t v48 = (uint64_t)v244;
      unint64_t v47 = v242;
      Swift::String v49 = Data.base16EncodedString()();
      uint64_t countAndFlagsBits = v49._countAndFlagsBits;
      object = v49._object;
    }
    else
    {
      unint64_t v47 = v242;
      uint64_t v48 = (uint64_t)v244;
    }
    uint64_t v50 = v225;
    *(void *)&__s2[0] = sub_10004C3A4(countAndFlagsBits, (unint64_t)object, (uint64_t *)&__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009764(v48, v47);
    sub_100009764(v48, v47);
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v235, "PresentmentKeySelectionProvider selectPresentmentKey credential = %s, relyingPartyIdentifier = %s, requiredPublicKeyIdentifier = %s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v41 = *(void (**)(char *, void *))(v241 + 8);
    v41(v29, v238);
    uint64_t v42 = v243;
    a2 = v48;
    NSString v27 = v233;
    if (v236 > 0xE)
    {
LABEL_18:
      uint64_t v51 = v239;
      if (!v239) {
        goto LABEL_151;
      }
      swift_bridgeObjectRetain();
      id v52 = [v240 credentialIdentifier];
      if (!v52)
      {
        swift_bridgeObjectRelease();
        goto LABEL_151;
      }
      uint64_t v53 = v52;
      uint64_t v244 = (void (*)(void, void))v41;
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v56 = v55;

      *(void *)&long long __s1 = v54;
      *((void *)&__s1 + 1) = v56;
      swift_bridgeObjectRetain();
      v57._uint64_t countAndFlagsBits = 11565;
      v57._object = (void *)0xE200000000000000;
      String.append(_:)(v57);
      v58._uint64_t countAndFlagsBits = v237;
      v58._object = v51;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      Swift::String v59 = (Swift::String)__s1;
      unint64_t v60 = sub_100044E98(__s1, *((void **)&__s1 + 1));
      if (v42)
      {
        *(void *)&long long __s1 = 0;
        *((void *)&__s1 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        *(void *)&long long __s1 = 0xD00000000000001DLL;
        *((void *)&__s1 + 1) = 0x800000010017C010;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        unint64_t v61 = v228;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        v244(v61, v238);
        unint64_t v62 = 0;
        uint64_t v243 = 0;
      }
      else
      {
        unint64_t v62 = (void *)v60;
        uint64_t v243 = 0;
        swift_bridgeObjectRelease();
        if (v62)
        {
          unint64_t v43 = v62;
          id v148 = [(id)v43 presentmentKeys];
          object = (void *)v230;
          if (v148)
          {
            uint64_t v149 = v148;
            id v150 = [v148 anyObject];

            if (v150)
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              memset(__s2, 0, sizeof(__s2));
            }
            sub_100044CD4((uint64_t)__s2, (uint64_t)&__s1);
            if (*((void *)&v247 + 1))
            {
              type metadata accessor for StoredCryptoKey();
              a2 = (uint64_t)&type metadata for Any;
              if (swift_dynamicCast())
              {
                uint64_t v165 = *(void **)&__s2[0];
                id v166 = [*(id *)&__s2[0] payload];

                if (v166)
                {
                  unint64_t v167 = v226;
                  defaultLogger()();
                  id v168 = v165;
                  swift_bridgeObjectRetain();
                  uint64_t countAndFlagsBits = (uint64_t)v168;
                  uint64_t v71 = Logger.logObject.getter();
                  LOBYTE(v73) = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v71, (os_log_type_t)v73))
                  {
                    uint64_t v68 = swift_slowAlloc();
                    unint64_t v242 = swift_slowAlloc();
                    *(void *)&long long __s1 = v242;
                    *(_DWORD *)uint64_t v68 = 136315394;
                    id v169 = [(id)countAndFlagsBits identifier];
                    if (!v169) {
                      goto LABEL_190;
                    }
                    uint64_t v170 = v169;
                    uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v173 = v172;

                    goto LABEL_191;
                  }

                  swift_bridgeObjectRelease_n();
                  uint64_t v177 = v167;
LABEL_192:
                  v244(v177, v238);
                  return countAndFlagsBits;
                }
              }
              else
              {
              }
              goto LABEL_23;
            }
          }
          else
          {
            long long __s1 = 0u;
            long long v247 = 0u;
          }

          sub_1000FFBF0((uint64_t)&__s1);
LABEL_23:
          defaultLogger()();
          swift_bridgeObjectRetain();
          uint64_t v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = (uint8_t *)swift_slowAlloc();
            a2 = (uint64_t)object;
            object = (void *)swift_slowAlloc();
            *(void *)&long long __s1 = object;
            *(_DWORD *)uint64_t v65 = 136315138;
            uint64_t countAndFlagsBits = (uint64_t)(v65 + 12);
            swift_bridgeObjectRetain();
            *(void *)&__s2[0] = sub_10004C3A4(v237, (unint64_t)v51, (uint64_t *)&__s1);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "No existing RP found for relying party identifier %s", v65, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v66 = (void *)a2;
          }
          else
          {

            swift_bridgeObjectRelease_n();
            uint64_t v66 = object;
          }
          uint64_t v41 = (void (*)(char *, void *))v244;
          v244(v66, v238);
          uint64_t v42 = v243;
LABEL_151:
          unint64_t v143 = (unint64_t)sub_1000F6A84();
          if (v42) {
            return countAndFlagsBits;
          }
          unint64_t v77 = v143;
          uint64_t v244 = (void (*)(void, void))v41;
          *(void *)&long long __s1 = _swiftEmptyArrayStorage;
          if (v143 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v243 = 0;
            if (v89)
            {
LABEL_155:
              if (v89 < 1) {
                goto LABEL_261;
              }
              for (uint64_t i = 0; i != v89; ++i)
              {
                if ((v77 & 0xC000000000000001) != 0) {
                  Swift::String v146 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  Swift::String v146 = *(id *)(v77 + 8 * i + 32);
                }
                object = v146;
                id v147 = [v146 payload];

                if (v147)
                {
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized ContiguousArray._endMutation()();
                }
                else
                {
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v77 = __s1;
              a2 = (uint64_t)&selRef_generateDeviceEncryptionKeyForCredential_completion_;
              if ((__s1 & 0x8000000000000000) != 0) {
                goto LABEL_225;
              }
              goto LABEL_204;
            }
          }
          else
          {
            uint64_t v89 = *(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t v243 = 0;
            if (v89) {
              goto LABEL_155;
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v77 = (unint64_t)_swiftEmptyArrayStorage;
          a2 = (uint64_t)&selRef_generateDeviceEncryptionKeyForCredential_completion_;
          if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
            goto LABEL_225;
          }
LABEL_204:
          if ((v77 & 0x4000000000000000) == 0)
          {
            uint64_t v89 = *(void *)(v77 + 16);
            swift_retain();
            if (!v89)
            {
LABEL_226:
              swift_release();
              id v189 = 0;
LABEL_227:
              defaultLogger()();
              uint64_t v197 = Logger.logObject.getter();
              os_log_type_t v198 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v197, v198))
              {
                uint64_t v199 = (uint8_t *)swift_slowAlloc();
                *(_DWORD *)uint64_t v199 = 134217984;
                *(void *)&long long __s1 = v189;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v197, v198, "Minimum key times used is %lld", v199, 0xCu);
                swift_slowDealloc();
              }

              unint64_t v200 = v241 + 8;
              v244(v234, v238);
              *(void *)&long long __s1 = _swiftEmptyArrayStorage;
              unint64_t v242 = v200;
              if (v89)
              {
                for (uint64_t j = 0; j != v89; ++j)
                {
                  if ((v77 & 0xC000000000000001) != 0) {
                    id v202 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v202 = *(id *)(v77 + 8 * j + 32);
                  }
                  uint64_t v203 = v202;
                  if ([v202 *(SEL *)(a2 + 640)] == v189)
                  {
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                  }
                  else
                  {
                  }
                }
                swift_release();
                unint64_t v204 = __s1;
              }
              else
              {
                swift_release();
                unint64_t v204 = (unint64_t)_swiftEmptyArrayStorage;
              }
              unint64_t v205 = (void (*)(uint64_t, void *))v244;
              object = v232;
              if ((v204 & 0x8000000000000000) != 0 || (v204 & 0x4000000000000000) != 0)
              {
                swift_retain();
                uint64_t v218 = _CocoaArrayWrapper.endIndex.getter();
                swift_release();
                if (v218)
                {
                  swift_bridgeObjectRetain();
                  unint64_t v206 = _CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                  if ((v206 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_288:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_289:
                    __break(1u);
LABEL_290:
                    __break(1u);
LABEL_291:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_292:
                    __break(1u);
LABEL_293:
                    __break(1u);
LABEL_294:
                    __break(1u);
LABEL_295:
                    __break(1u);
LABEL_296:
                    __break(1u);
LABEL_297:
                    __break(1u);
LABEL_298:
                    __break(1u);
LABEL_299:
                    __break(1u);
LABEL_300:
                    __break(1u);
LABEL_301:
                    __break(1u);
                    JUMPOUT(0x10015C810);
                  }
                  object = v232;
                  if (v206)
                  {
LABEL_243:
                    unint64_t v207 = sub_10015A1A4(v206);
                    if ((v204 & 0xC000000000000001) == 0)
                    {
                      if ((v207 & 0x8000000000000000) != 0)
                      {
                        __break(1u);
                      }
                      else if (v207 < *(void *)(v204 + 16))
                      {
                        id v208 = *(id *)(v204 + 8 * v207 + 32);
                        goto LABEL_247;
                      }
                      __break(1u);
LABEL_267:
                      __break(1u);
LABEL_268:
                      __break(1u);
                      goto LABEL_269;
                    }
LABEL_264:
                    id v208 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_247:
                    uint64_t v209 = v208;
                    swift_release();
                    defaultLogger()();
                    uint64_t countAndFlagsBits = v209;
                    uint64_t v210 = Logger.logObject.getter();
                    os_log_type_t v211 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v210, v211))
                    {
                      uint64_t v212 = (uint8_t *)swift_slowAlloc();
                      *(void *)&long long __s1 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v212 = 136315138;
                      id v213 = [(id)countAndFlagsBits identifier];
                      if (v213)
                      {
                        uint64_t v214 = v213;
                        uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v217 = v216;
                      }
                      else
                      {
                        uint64_t v215 = 0x3E6C696E3CLL;
                        unint64_t v217 = 0xE500000000000000;
                      }
                      *(void *)&__s2[0] = sub_10004C3A4(v215, v217, (uint64_t *)&__s1);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v210, v211, "Selected random key %s", v212, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      v244(v232, v238);
                    }
                    else
                    {

                      v244(object, v238);
                    }
                    return countAndFlagsBits;
                  }
                  __break(1u);
                }
              }
              else
              {
                unint64_t v206 = *(void *)(v204 + 16);
                if (v206) {
                  goto LABEL_243;
                }
              }
              swift_release();
              uint64_t v219 = v227;
              defaultLogger()();
              id v220 = Logger.logObject.getter();
              os_log_type_t v221 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v220, v221))
              {
                uint64_t v222 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v222 = 0;
                _os_log_impl((void *)&_mh_execute_header, v220, v221, "No keys have minimum times used; this should not happen",
                  v222,
                  2u);
                unint64_t v205 = (void (*)(uint64_t, void *))v244;
                swift_slowDealloc();
              }

              v205(v219, v238);
              return 0;
            }
LABEL_206:
            uint64_t countAndFlagsBits = v77 & 0xC000000000000001;
            if ((v77 & 0xC000000000000001) != 0) {
              goto LABEL_262;
            }
            if (*(void *)(v77 + 16))
            {
              id v186 = *(id *)(v77 + 32);
              goto LABEL_209;
            }
            __break(1u);
            __break(1u);
            goto LABEL_264;
          }
LABEL_225:
          swift_retain();
          uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
          if (!v89) {
            goto LABEL_226;
          }
          goto LABEL_206;
        }
      }
      object = (void *)v230;
      goto LABEL_23;
    }
  }
  else
  {
    swift_bridgeObjectRelease_n();

    sub_100009764(a2, a3);
    sub_100009764(a2, a3);

    uint64_t v41 = *(void (**)(char *, void *))(v241 + 8);
    v41(v29, object);
    uint64_t v42 = v243;
    if (a3 >> 60 == 15) {
      goto LABEL_18;
    }
  }
  unint64_t v43 = v242;
  sub_10000354C(a2, v242);
  unint64_t v44 = (unint64_t)sub_1000F6A84();
  if (v42)
  {
    sub_100009764(a2, v43);
    return countAndFlagsBits;
  }
  uint64_t v67 = v44;
  Class v233 = v27;
  if (v44 >> 62) {
    goto LABEL_197;
  }
  uint64_t v68 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v243 = 0;
  if (!v68)
  {
LABEL_198:
    swift_bridgeObjectRelease();
    uint64_t v179 = v231;
    defaultLogger()();
    sub_100009778(a2, v43);
    sub_100009778(a2, v43);
    uint64_t v180 = Logger.logObject.getter();
    uint64_t v181 = a2;
    unint64_t v182 = v43;
    os_log_type_t v183 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v180, v183))
    {
      uint64_t v184 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long __s1 = swift_slowAlloc();
      *(_DWORD *)uint64_t v184 = 136315138;
      Swift::String v185 = Data.base16EncodedString()();
      *(void *)&__s2[0] = sub_10004C3A4(v185._countAndFlagsBits, (unint64_t)v185._object, (uint64_t *)&__s1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100009764(v181, v182);
      sub_100009764(v181, v182);
      _os_log_impl((void *)&_mh_execute_header, v180, v183, "No key was found with matching public key identifier %s", v184, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100009764(v181, v182);
      (*(void (**)(char *, void *))(v241 + 8))(v231, v238);
    }
    else
    {
      sub_100009764(v181, v182);
      sub_100009764(v181, v182);
      sub_100009764(v181, v182);

      (*(void (**)(char *, void *))(v241 + 8))(v179, v238);
    }
    return 0;
  }
  while (2)
  {
    uint64_t v237 = v43 >> 62;
    id v240 = (id)(v67 & 0xC000000000000001);
    id v228 = (char *)HIDWORD(a2);
    BOOL v69 = __OFSUB__(HIDWORD(a2), a2);
    LODWORD(v232) = v69;
    size_t v230 = HIDWORD(a2) - (int)a2;
    size_t v236 = BYTE6(v43);
    Class v234 = (char *)(v43 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v229 = (int)a2;
    uint64_t v227 = a2 >> 32;
    v226 = (char *)((a2 >> 32) - (int)a2);
    uint64_t v70 = 4;
    uint64_t v235 = v67;
    uint64_t v239 = (void *)v68;
LABEL_34:
    uint64_t v71 = (v70 - 4);
    if (v240) {
      id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v72 = *(id *)(v67 + 8 * v70);
    }
    uint64_t countAndFlagsBits = (uint64_t)v72;
    uint64_t v73 = v70 - 3;
    if (__OFADD__(v71, 1))
    {
      __break(1u);
LABEL_190:
      uint64_t v171 = 0x3E6C696E3CLL;
      unint64_t v173 = 0xE500000000000000;
LABEL_191:
      *(void *)&__s2[0] = sub_10004C3A4(v171, v173, (uint64_t *)&__s1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      unint64_t v178 = (unint64_t)v239;
      swift_bridgeObjectRetain();
      *(void *)&__s2[0] = sub_10004C3A4(v237, v178, (uint64_t *)&__s1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v73, "Found key %s with relying party identifier %s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v177 = v226;
      goto LABEL_192;
    }
    id v74 = [v72 publicKeyIdentifier];
    if (!v74)
    {
      sub_100009778(a2, v43);
      sub_100009764(0, 0xF000000000000000);
      sub_100009764(a2, v43);
      goto LABEL_33;
    }
    uint64_t v75 = v74;
    uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    a2 = v76;

    unint64_t v77 = (unint64_t)a2 >> 62;
    uint64_t v78 = 0;
    switch((unint64_t)a2 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v67), v67))
        {
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          swift_bridgeObjectRetain();
          uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v243 = v42;
          if (!v68) {
            goto LABEL_198;
          }
          continue;
        }
        uint64_t v78 = HIDWORD(v67) - (int)v67;
LABEL_45:
        sub_10000354C(v67, a2);
LABEL_46:
        size_t v81 = v236;
        switch((int)v237)
        {
          case 1:
            size_t v81 = v230;
            if (v232) {
              goto LABEL_195;
            }
            goto LABEL_50;
          case 2:
            uint64_t v83 = *((void *)v244 + 2);
            uint64_t v82 = *((void *)v244 + 3);
            BOOL v84 = __OFSUB__(v82, v83);
            size_t v81 = v82 - v83;
            if (!v84) {
              goto LABEL_50;
            }
            goto LABEL_196;
          case 3:
            if (v78) {
              goto LABEL_32;
            }
            goto LABEL_170;
          default:
LABEL_50:
            if (v78 != v81)
            {
LABEL_32:
              sub_1000035EC(v67, a2);
              sub_1000035EC(v67, a2);
              a2 = (uint64_t)v244;
              uint64_t v67 = v235;
              goto LABEL_33;
            }
            if (v78 >= 1)
            {
              switch((int)v77)
              {
                case 1:
                  uint64_t v89 = (int)v67;
                  if ((int)v67 > v67 >> 32)
                  {
                    __break(1u);
LABEL_261:
                    __break(1u);
LABEL_262:
                    id v186 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_209:
                    uint64_t v187 = v186;
                    unint64_t v188 = v89 - 1;
                    if (v89 == 1)
                    {
LABEL_210:
                      swift_release();
                      id v189 = [v187 *(SEL *)(a2 + 640)];

                      goto LABEL_227;
                    }
                    if (v89 >= 2)
                    {
                      if (countAndFlagsBits || (unint64_t v190 = *(void *)(v77 + 16), v190 >= 2) && v188 < v190)
                      {
                        uint64_t v191 = 0;
                        do
                        {
                          if (countAndFlagsBits) {
                            id v192 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                          }
                          else {
                            id v192 = *(id *)(v77 + 8 * v191 + 40);
                          }
                          id v193 = v192;
                          id v194 = [v192 *(SEL *)(a2 + 640)];
                          id v195 = [v187 *(SEL *)(a2 + 640)];
                          if ((uint64_t)v194 >= (uint64_t)v195) {
                            uint64_t v196 = v193;
                          }
                          else {
                            uint64_t v196 = v187;
                          }
                          if ((uint64_t)v194 < (uint64_t)v195) {
                            uint64_t v187 = v193;
                          }

                          ++v191;
                        }
                        while (v188 != v191);
                        goto LABEL_210;
                      }
LABEL_286:
                      __break(1u);
                    }
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
LABEL_281:
                    __break(1u);
LABEL_282:
                    __break(1u);
LABEL_283:
                    __break(1u);
LABEL_284:
                    __break(1u);
LABEL_285:
                    __break(1u);
                    goto LABEL_286;
                  }
                  sub_100009778((uint64_t)v244, v242);
                  int v90 = (char *)__DataStorage._bytes.getter();
                  if (v90)
                  {
                    uint64_t v91 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v67, v91)) {
                      goto LABEL_268;
                    }
                    v90 += (int)v67 - v91;
                  }
                  unint64_t v43 = v242;
                  __DataStorage._length.getter();
                  if (v237)
                  {
                    if (v237 == 1)
                    {
                      if (v227 < v229) {
                        goto LABEL_277;
                      }
                      swift_retain();
                      uint64_t v92 = (char *)__DataStorage._bytes.getter();
                      if (v92)
                      {
                        uint64_t v93 = __DataStorage._offset.getter();
                        if (__OFSUB__(v229, v93)) {
                          goto LABEL_285;
                        }
                        v92 += v229 - v93;
                      }
                      uint64_t v94 = __DataStorage._length.getter();
                      size_t v95 = (size_t)v226;
                      if (v94 < (uint64_t)v226) {
                        size_t v95 = v94;
                      }
                      if (!v90) {
                        goto LABEL_289;
                      }
                      if (!v92) {
                        goto LABEL_290;
                      }
                      int v96 = memcmp(v90, v92, v95);
                      uint64_t v97 = (uint64_t)v244;
                      unint64_t v43 = v242;
                      sub_100009764((uint64_t)v244, v242);
                      uint64_t v98 = v97;
                    }
                    else
                    {
                      uint64_t v136 = *((void *)v244 + 2);
                      uint64_t v225 = *((void *)v244 + 3);
                      swift_retain();
                      swift_retain();
                      Swift::String v137 = (char *)__DataStorage._bytes.getter();
                      if (v137)
                      {
                        uint64_t v138 = __DataStorage._offset.getter();
                        if (__OFSUB__(v136, v138)) {
                          goto LABEL_284;
                        }
                        v137 += v136 - v138;
                      }
                      BOOL v84 = __OFSUB__(v225, v136);
                      uint64_t v139 = (char *)v225 - v136;
                      if (v84) {
                        goto LABEL_279;
                      }
                      uint64_t v140 = __DataStorage._length.getter();
                      if (v140 >= (uint64_t)v139) {
                        size_t v141 = (size_t)v139;
                      }
                      else {
                        size_t v141 = v140;
                      }
                      if (!v90) {
                        goto LABEL_300;
                      }
                      uint64_t v42 = v243;
                      if (!v137) {
                        goto LABEL_301;
                      }
                      int v96 = memcmp(v90, v137, v141);
LABEL_142:
                      swift_release();
                      uint64_t v97 = (uint64_t)v244;
                      swift_release();
LABEL_143:
                      uint64_t v98 = v97;
                      unint64_t v43 = v242;
                    }
                    sub_100009764(v98, v43);
LABEL_145:
                    sub_1000035EC(v67, a2);
                    unint64_t v142 = a2;
                    a2 = v97;
                    sub_1000035EC(v67, v142);
                  }
                  else
                  {
                    uint64_t v135 = (uint64_t)v244;
                    LODWORD(__s1) = v244;
                    BYTE4(__s1) = (_BYTE)v228;
                    *(_WORD *)((char *)&__s1 + 5) = *(_WORD *)((char *)&v244 + 5);
                    BYTE7(__s1) = HIBYTE(v244);
                    WORD4(__s1) = v43;
                    BYTE10(__s1) = BYTE2(v43);
                    BYTE11(__s1) = BYTE3(v43);
                    BYTE12(__s1) = BYTE4(v43);
                    BYTE13(__s1) = BYTE5(v43);
                    if (!v90) {
                      goto LABEL_299;
                    }
                    int v96 = memcmp(v90, &__s1, v236);
                    sub_100009764(v135, v43);
                    sub_1000035EC(v67, a2);
                    sub_1000035EC(v67, a2);
                    a2 = v135;
                  }
                  uint64_t v67 = v235;
                  if (!v96) {
                    goto LABEL_171;
                  }
                  break;
                case 2:
                  uint64_t v99 = *(void *)(v67 + 16);
                  sub_100009778((uint64_t)v244, v43);
                  swift_retain();
                  swift_retain();
                  uint64_t v100 = __DataStorage._bytes.getter();
                  if (v100)
                  {
                    uint64_t v101 = v100;
                    uint64_t v102 = __DataStorage._offset.getter();
                    if (__OFSUB__(v99, v102)) {
                      goto LABEL_267;
                    }
                    uint64_t v225 = (v101 + v99 - v102);
                  }
                  else
                  {
                    uint64_t v225 = 0;
                  }
                  uint64_t v42 = v243;
                  __DataStorage._length.getter();
                  unint64_t v43 = v242;
                  if (v237)
                  {
                    if (v237 == 1)
                    {
                      if (v227 < v229) {
                        goto LABEL_272;
                      }
                      swift_retain();
                      uint64_t v107 = (char *)__DataStorage._bytes.getter();
                      if (v107)
                      {
                        uint64_t v108 = __DataStorage._offset.getter();
                        if (__OFSUB__(v229, v108)) {
                          goto LABEL_283;
                        }
                        v107 += v229 - v108;
                      }
                      uint64_t v109 = __DataStorage._length.getter();
                      size_t v110 = (size_t)v226;
                      if (v109 < (uint64_t)v226) {
                        size_t v110 = v109;
                      }
                      if (!v225) {
                        goto LABEL_292;
                      }
                      if (!v107) {
                        goto LABEL_293;
                      }
                      int v111 = memcmp(v225, v107, v110);
                      uint64_t v112 = (uint64_t)v244;
                      sub_100009764((uint64_t)v244, v43);
                      swift_release();
                      swift_release();
                      sub_100009764(v112, v43);
                      sub_1000035EC(v67, a2);
                      uint64_t v113 = v67;
                      unint64_t v114 = a2;
                      a2 = v112;
                    }
                    else
                    {
                      uint64_t v128 = *((void *)v244 + 2);
                      uint64_t v224 = *((void *)v244 + 3);
                      swift_retain();
                      swift_retain();
                      long long v129 = (char *)__DataStorage._bytes.getter();
                      if (v129)
                      {
                        uint64_t v130 = __DataStorage._offset.getter();
                        if (__OFSUB__(v128, v130)) {
                          goto LABEL_282;
                        }
                        v129 += v128 - v130;
                      }
                      BOOL v84 = __OFSUB__(v224, v128);
                      int64_t v131 = v224 - v128;
                      if (v84) {
                        goto LABEL_278;
                      }
                      uint64_t v132 = __DataStorage._length.getter();
                      if (v132 >= v131) {
                        size_t v133 = v131;
                      }
                      else {
                        size_t v133 = v132;
                      }
                      if (!v225) {
                        goto LABEL_297;
                      }
                      unint64_t v43 = v242;
                      if (!v129) {
                        goto LABEL_298;
                      }
                      int v111 = memcmp(v225, v129, v133);
                      swift_release();
                      swift_release();
                      swift_release();
                      uint64_t v134 = (uint64_t)v244;
                      swift_release();
                      sub_100009764(v134, v43);
                      sub_1000035EC(v67, a2);
                      uint64_t v113 = v67;
                      unint64_t v114 = a2;
                      a2 = v134;
                    }
                    sub_1000035EC(v113, v114);
                    uint64_t v42 = v243;
                    uint64_t v67 = v235;
                    if (!v111) {
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    uint64_t v127 = (uint64_t)v244;
                    LODWORD(__s1) = v244;
                    BYTE4(__s1) = (_BYTE)v228;
                    *(_WORD *)((char *)&__s1 + 5) = *(_WORD *)((char *)&v244 + 5);
                    BYTE7(__s1) = HIBYTE(v244);
                    DWORD2(__s1) = v242;
                    WORD6(__s1) = WORD2(v242);
                    if (!v225) {
                      goto LABEL_296;
                    }
                    LODWORD(v225) = memcmp(v225, &__s1, v236);
                    swift_release();
                    swift_release();
                    sub_100009764(v127, v43);
                    sub_1000035EC(v67, a2);
                    sub_1000035EC(v67, a2);
                    a2 = v127;
                    uint64_t v67 = v235;
                    if (!v225) {
                      goto LABEL_171;
                    }
                  }
                  break;
                case 3:
                  *(void *)((char *)&__s1 + 6) = 0;
                  *(void *)&long long __s1 = 0;
                  if (!v237) {
                    goto LABEL_87;
                  }
                  if (v237 == 1)
                  {
                    if (v227 < v229) {
                      goto LABEL_271;
                    }
                    sub_100009778((uint64_t)v244, v43);
                    uint64_t v103 = __DataStorage._bytes.getter();
                    if (!v103) {
                      goto LABEL_291;
                    }
                    uint64_t v86 = v103;
                    uint64_t v104 = __DataStorage._offset.getter();
                    uint64_t v88 = v229 - v104;
                    if (__OFSUB__(v229, v104)) {
                      goto LABEL_276;
                    }
LABEL_83:
                    uint64_t v105 = __DataStorage._length.getter();
                    if (v105 >= (uint64_t)v226) {
                      size_t v106 = (size_t)v226;
                    }
                    else {
                      size_t v106 = v105;
                    }
                    int v96 = memcmp(&__s1, (const void *)(v86 + v88), v106);
                    uint64_t v97 = (uint64_t)v244;
                    goto LABEL_143;
                  }
                  unint64_t v122 = v43;
                  uint64_t v123 = *((void *)v244 + 2);
                  uint64_t v124 = *((void *)v244 + 3);
                  sub_100009778((uint64_t)v244, v122);
                  swift_retain();
                  swift_retain();
                  unint64_t v118 = (char *)__DataStorage._bytes.getter();
                  if (v118)
                  {
                    uint64_t v125 = __DataStorage._offset.getter();
                    if (__OFSUB__(v123, v125)) {
                      goto LABEL_281;
                    }
                    v118 += v123 - v125;
                  }
                  BOOL v84 = __OFSUB__(v124, v123);
                  int64_t v120 = v124 - v123;
                  if (v84) {
                    goto LABEL_274;
                  }
                  uint64_t v121 = __DataStorage._length.getter();
                  uint64_t v42 = v243;
                  if (!v118) {
                    goto LABEL_295;
                  }
LABEL_111:
                  if (v121 >= v120) {
                    size_t v126 = v120;
                  }
                  else {
                    size_t v126 = v121;
                  }
                  int v96 = memcmp(&__s1, v118, v126);
                  goto LABEL_142;
                default:
                  *(void *)&long long __s1 = v67;
                  WORD4(__s1) = a2;
                  BYTE10(__s1) = BYTE2(a2);
                  BYTE11(__s1) = BYTE3(a2);
                  BYTE12(__s1) = BYTE4(a2);
                  BYTE13(__s1) = BYTE5(a2);
                  if (!v237)
                  {
LABEL_87:
                    uint64_t v97 = (uint64_t)v244;
                    LODWORD(__s2[0]) = v244;
                    BYTE4(__s2[0]) = (_BYTE)v228;
                    *(_WORD *)((char *)__s2 + 5) = *(_WORD *)((char *)&v244 + 5);
                    BYTE7(__s2[0]) = HIBYTE(v244);
                    WORD4(__s2[0]) = v43;
                    BYTE10(__s2[0]) = BYTE2(v43);
                    BYTE11(__s2[0]) = BYTE3(v43);
                    BYTE12(__s2[0]) = BYTE4(v43);
                    BYTE13(__s2[0]) = BYTE5(v43);
                    int v96 = memcmp(&__s1, __s2, v236);
                    goto LABEL_145;
                  }
                  if (v237 == 1)
                  {
                    if (v227 < v229) {
                      goto LABEL_270;
                    }
                    sub_100009778((uint64_t)v244, v43);
                    uint64_t v85 = __DataStorage._bytes.getter();
                    if (!v85) {
                      goto LABEL_288;
                    }
                    uint64_t v86 = v85;
                    uint64_t v87 = __DataStorage._offset.getter();
                    uint64_t v88 = v229 - v87;
                    if (__OFSUB__(v229, v87)) {
                      goto LABEL_275;
                    }
                    goto LABEL_83;
                  }
                  unint64_t v115 = v43;
                  uint64_t v116 = *((void *)v244 + 2);
                  uint64_t v117 = *((void *)v244 + 3);
                  sub_100009778((uint64_t)v244, v115);
                  swift_retain();
                  swift_retain();
                  unint64_t v118 = (char *)__DataStorage._bytes.getter();
                  if (v118)
                  {
                    uint64_t v119 = __DataStorage._offset.getter();
                    if (__OFSUB__(v116, v119)) {
                      goto LABEL_280;
                    }
                    v118 += v116 - v119;
                  }
                  BOOL v84 = __OFSUB__(v117, v116);
                  int64_t v120 = v117 - v116;
                  if (v84) {
                    goto LABEL_273;
                  }
                  uint64_t v121 = __DataStorage._length.getter();
                  uint64_t v42 = v243;
                  if (!v118) {
                    goto LABEL_294;
                  }
                  goto LABEL_111;
              }
LABEL_33:

              ++v70;
              uint64_t v68 = (uint64_t)v239;
              if ((void *)v73 == v239) {
                goto LABEL_198;
              }
              goto LABEL_34;
            }
LABEL_170:
            sub_1000035EC(v67, a2);
            sub_1000035EC(v67, a2);
            a2 = (uint64_t)v244;
LABEL_171:
            swift_bridgeObjectRelease();
            long long v151 = v233;
            defaultLogger()();
            sub_100009778(a2, v43);
            id v152 = (id)countAndFlagsBits;
            sub_100009778(a2, v43);
            uint64_t v153 = a2;
            id v154 = v152;
            unint64_t v155 = Logger.logObject.getter();
            unint64_t v156 = v43;
            os_log_type_t v157 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v155, v157))
            {
              uint64_t v158 = swift_slowAlloc();
              uint64_t v159 = (void *)swift_slowAlloc();
              *(void *)&long long __s1 = v159;
              *(_DWORD *)uint64_t v158 = 136315394;
              id v160 = [v154 identifier];
              id v240 = v159;
              if (v160)
              {
                uint64_t v161 = v160;
                uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v164 = v163;
              }
              else
              {
                uint64_t v162 = 0x3E6C696E3CLL;
                unint64_t v164 = 0xE500000000000000;
              }
              *(void *)&__s2[0] = sub_10004C3A4(v162, v164, (uint64_t *)&__s1);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v158 + 12) = 2080;
              uint64_t v174 = (uint64_t)v244;
              unint64_t v175 = v242;
              Swift::String v176 = Data.base16EncodedString()();
              *(void *)&__s2[0] = sub_10004C3A4(v176._countAndFlagsBits, (unint64_t)v176._object, (uint64_t *)&__s1);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100009764(v174, v175);
              sub_100009764(v174, v175);
              _os_log_impl((void *)&_mh_execute_header, v155, v157, "Found key %s with matching public key identifier %s", (uint8_t *)v158, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_100009764(v174, v175);
              (*(void (**)(char *, void *))(v241 + 8))(v233, v238);
            }
            else
            {
              sub_100009764(v153, v156);

              sub_100009764(v153, v156);
              sub_100009764(v153, v156);

              (*(void (**)(char *, void *))(v241 + 8))(v151, v238);
            }
            return countAndFlagsBits;
        }
      case 2uLL:
        uint64_t v80 = *(void *)(v67 + 16);
        uint64_t v79 = *(void *)(v67 + 24);
        uint64_t v78 = v79 - v80;
        if (!__OFSUB__(v79, v80)) {
          goto LABEL_45;
        }
        goto LABEL_194;
      case 3uLL:
        goto LABEL_46;
      default:
        uint64_t v78 = BYTE6(a2);
        goto LABEL_46;
    }
  }
}

uint64_t sub_10015C840(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v3[8] = v6;
  v3[9] = *(void *)(v6 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[11] = v7;
  v3[12] = *(void *)(v7 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v3[16] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10015C9C0;
  return sub_10015ED64(a1, a2);
}

uint64_t sub_10015C9C0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10015DBFC;
  }
  else {
    uint64_t v4 = sub_10015CAD4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10015CAD4()
{
  id v31 = v0;
  uint64_t v1 = v0[17];
  if (v1)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[15];
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    unint64_t v8 = v0[6];
    if (v4)
    {
      uint64_t v26 = v0[5];
      uint64_t v29 = v0[11];
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      v0[4] = sub_10004C3A4(v26, v8, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Credential %s already has a ksk", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v29);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    }
    uint64_t v19 = v0[18];
    sub_100068E48(v1);
    uint64_t v21 = v20;
    swift_release();
    if (v19)
    {
      (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v22 = (uint64_t (*)(void))v0[1];
      return v22();
    }
    else
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
      return v24(v21);
    }
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[14];
    uint64_t v15 = v0[11];
    uint64_t v14 = v0[12];
    unint64_t v16 = v0[6];
    if (v12)
    {
      uint64_t v27 = v0[5];
      uint64_t v28 = v0[14];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      v0[3] = sub_10004C3A4(v27, v16, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Generating new ksk for credential %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v18(v28, v15);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v18(v13, v15);
    }
    v0[19] = v18;
    uint64_t v25 = (void *)swift_task_alloc();
    v0[20] = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_10015D06C;
    return sub_1001456F8();
  }
}

uint64_t sub_10015D06C(uint64_t a1)
{
  BOOL v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[21] = a1;
  v4[22] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10015DD9C, 0, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v4[23] = v6;
    *uint64_t v6 = v5;
    v6[1] = sub_10015D1F4;
    uint64_t v7 = v4[6];
    uint64_t v8 = v4[5];
    return sub_10015F9E4(a1, v8, v7);
  }
}

uint64_t sub_10015D1F4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10015DF3C;
  }
  else
  {
    *(unsigned char *)(v4 + 224) = a1 & 1;
    uint64_t v5 = sub_10015D320;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10015D320()
{
  if (*(unsigned char *)(v0 + 224) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 192);
    sub_100068E48(*(void *)(v0 + 168));
    uint64_t v3 = v2;
    swift_release();
    if (v1)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 104))(*(void *)(v0 + 80), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 64));
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
      return v4();
    }
    else
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v9(v3);
    }
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10015D5C8;
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 40);
    return sub_10015ED64(v8, v7);
  }
}

uint64_t sub_10015D5C8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10015E0E4;
  }
  else {
    uint64_t v4 = sub_10015D6DC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10015D6DC()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[26];
  if (!v1)
  {
    uint64_t v12 = v0[9];
    uint64_t v11 = v0[10];
    uint64_t v13 = v0[8];
    uint64_t v15 = v0[5];
    uint64_t v14 = (void *)v0[6];
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v24[0] = 0xD000000000000018;
    v24[1] = 0x8000000100184990;
    v16._uint64_t countAndFlagsBits = v15;
    v16._object = v14;
    String.append(_:)(v16);
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v13);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
LABEL_7:
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[11];
  unint64_t v8 = v0[6];
  if (v4)
  {
    uint64_t v9 = v0[5];
    uint64_t v23 = v0[13];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v9, v8, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "After trying new key, using existing ksk for %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v5(v23, v7);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v5(v6, v7);
  }
  uint64_t v17 = v0[27];
  sub_100068E48(v1);
  uint64_t v19 = v18;
  swift_release();
  swift_release();
  if (v17) {
    goto LABEL_7;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(uint64_t))v0[1];
  return v22(v19);
}

uint64_t sub_10015DBFC()
{
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10015DD9C()
{
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10015DF3C()
{
  swift_release();
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10015E0E4()
{
  swift_release();
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10015E28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[16] = v7;
  v5[17] = *(void *)(v7 - 8);
  v5[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for COSEKey();
  v5[19] = v8;
  v5[20] = *(void *)(v8 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_10015E40C, 0, 0);
}

uint64_t sub_10015E40C()
{
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  CBORDecoder.init()();
  sub_1001610D0(&qword_1001C0BB0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  swift_release();
  uint64_t v4 = (void *)swift_allocObject();
  v0[22] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  uint64_t v5 = swift_allocObject();
  v0[23] = v5;
  *(void *)(v5 + 16) = &unk_1001C4840;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  uint64_t v7 = type metadata accessor for KeySigningKey(0);
  *uint64_t v6 = v0;
  v6[1] = sub_10015E760;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 7, &unk_1001C4850, v5, v7);
}

uint64_t sub_10015E760()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10015EB9C;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 208) = *(void *)(v2 + 56);
    uint64_t v3 = sub_10015E88C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10015E88C()
{
  v0[2] = v0[26];
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[21];
  v0[5] = &type metadata for KeySigningKeySignatureProvider;
  v0[6] = &off_1001B8D28;
  swift_retain();
  uint64_t v3 = sub_100159998(v2);
  uint64_t v5 = v1;
  uint64_t v7 = v0[20];
  uint64_t v6 = v0[21];
  uint64_t v8 = v0[19];
  if (v5)
  {
    swift_release();
    sub_10001B67C((uint64_t)(v0 + 2));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v18 = v0[19];
    uint64_t v12 = v0[17];
    uint64_t v11 = v0[18];
    uint64_t v17 = v0[16];
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    defaultLogger()();
    uint64_t v15 = swift_task_alloc();
    *(void *)(v15 + 16) = v13;
    *(void *)(v15 + 24) = v14;
    Logger.sensitive(_:)();
    swift_release();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v17);
    sub_10001B67C((uint64_t)(v0 + 2));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v16 = (uint64_t (*)(char *, uint64_t))v0[1];
    return v16(v13, v14);
  }
}

uint64_t sub_10015EB9C()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(void, void, void))(v0[14] + 104))(v0[15], enum case for DIPError.Code.internalError(_:), v0[13]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10015ED64(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_10015EE28, 0, 0);
}

uint64_t sub_10015EE28()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = (void *)swift_allocObject();
  v0[12] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = swift_allocObject();
  v0[13] = v5;
  *(void *)(v5 + 16) = sub_1001613A0;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[14] = v6;
  uint64_t v7 = sub_100006CC8(&qword_1001C3720);
  *uint64_t v6 = v0;
  v6[1] = sub_10015EF84;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100086288, v5, v7);
}

uint64_t sub_10015EF84()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10015F2F4;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_10015F0A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10015F0A8()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  v0[16] = v2;
  v0[17] = v1;
  uint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  v0[18] = v3;
  v0[19] = v4;
  if (v1)
  {
    sub_100063724(v2, v1, v3, v4);
    sub_10000354C(v3, v4);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[20] = v5;
    void *v5 = v0;
    v5[1] = sub_10015F1D8;
    return sub_10013FFEC(v2, v1, v3, v4);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7(0);
  }
}

uint64_t sub_10015F1D8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v4 = sub_10015F82C;
  }
  else
  {
    sub_1000035EC(v3[18], v3[19]);
    unint64_t v4 = sub_10015F480;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10015F2F4()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10015F480()
{
  uint64_t v2 = v0[18];
  unint64_t v1 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = (void *)v0[17];
  if (v0[21])
  {
    sub_100063808(v0[16], v0[17], v0[18], v0[19]);
    sub_100063808(v4, (uint64_t)v3, v2, v1);
    uint64_t v5 = v0[21];
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
    return v6(v5);
  }
  else
  {
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v18 = v0[9];
    uint64_t v11 = v0[6];
    uint64_t v10 = (void *)v0[7];
    _StringGuts.grow(_:)(79);
    v12._uint64_t countAndFlagsBits = 0x69746E6564657263;
    v12._object = (void *)0xEB00000000206C61;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = v11;
    v13._object = v10;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v14._object = (void *)0x8000000100184A00;
    String.append(_:)(v14);
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v4;
    v15._object = v3;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0xD000000000000023;
    v16._object = (void *)0x8000000100184A20;
    String.append(_:)(v16);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v18);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100063808(v4, (uint64_t)v3, v2, v1);
    sub_100063808(v4, (uint64_t)v3, v2, v1);
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_10015F82C()
{
  uint64_t v1 = v0[18];
  unint64_t v2 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  sub_1000035EC(v1, v2);
  sub_100063808(v4, v3, v1, v2);
  sub_100063808(v4, v3, v1, v2);
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10015F9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_10015FAA8, 0, 0);
}

uint64_t sub_10015FAA8()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)swift_allocObject();
  v0[9] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v5[5] = v4;
  uint64_t v6 = swift_allocObject();
  v0[10] = v6;
  *(void *)(v6 + 16) = sub_100161334;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10015FC04;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v0 + 13, sub_100161354, v6, &type metadata for Bool);
}

uint64_t sub_10015FC04()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10015FD6C, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = *(unsigned __int8 *)(v2 + 104);
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 8);
    return v4(v3);
  }
}

uint64_t sub_10015FD6C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

void sub_10015FEFC(uint64_t a1@<X2>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000075AC(a1, a2);
  if (v3) {
    return;
  }
  Swift::String v12 = v11;
  uint64_t v37 = a3;
  unint64_t v13 = (unint64_t)sub_1000F5DBC();
  unint64_t v14 = v13;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_4;
    }
  }
  else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if ((v14 & 0xC000000000000001) != 0)
    {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v15 = *(id *)(v14 + 32);
    }
    Swift::String v16 = v15;
    swift_bridgeObjectRelease();
    id v17 = [v16 identifier];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v36 = v19;

      id v20 = [v16 publicKeyIdentifier];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        uint64_t v25 = v37;
        uint64_t v26 = v36;
        *uint64_t v37 = v35;
        v25[1] = (uint64_t)v26;
        v25[2] = v22;
        v25[3] = v24;
        return;
      }
      swift_bridgeObjectRelease();
    }

    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
LABEL_14:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v39 = v35;
    os_log_t v34 = v28;
    id v30 = v36;
    *(_DWORD *)id v36 = 136315138;
    BOOL v33 = v30 + 4;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_10004C3A4(a1, (unint64_t)a2, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v31 = v34;
    _os_log_impl((void *)&_mh_execute_header, v34, v29, "Credential %s does not have a key signing key", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v32 = v37;
  *(_OWORD *)uint64_t v37 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
}

void sub_100160290(uint8_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, unsigned char *a5@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000075AC(a2, a3);
  if (!v5)
  {
    os_log_type_t v29 = a1;
    uint64_t v30 = v11;
    os_log_t v31 = v13;
    id v15 = v14;
    unint64_t v16 = (unint64_t)sub_1000F5DBC();
    uint64_t v27 = a5;
    id v28 = v15;
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v18 = v10;
    unint64_t v19 = (unint64_t)a3;
    swift_bridgeObjectRelease();
    id v20 = v31;
    if (v17)
    {
      uint64_t v21 = a2;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v32 = v18;
        *(_DWORD *)uint64_t v24 = 136315138;
        os_log_type_t v29 = v24 + 4;
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_10004C3A4(v21, v19, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Credential %s already has a ksk when trying to add a new one", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v32);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v18);
      }
      *uint64_t v27 = 0;
    }
    else
    {
      type metadata accessor for StoredCryptoKey();
      id v25 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*((void *)v29 + 2)];
      sub_1000FADC0(v32);
      [v28 addCryptoKeysObject:v25];
      sub_100007290();

      *uint64_t v27 = 1;
    }
  }
}

uint64_t sub_100160618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_10016073C, 0, 0);
}

uint64_t sub_10016073C()
{
  uint64_t v1 = v0[13];
  uint64_t v15 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = (void *)swift_allocObject();
  v0[15] = v7;
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v6;
  uint64_t v8 = swift_allocObject();
  v0[16] = v8;
  *(void *)(v8 + 16) = sub_10001B6D4;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v15, v9, v2);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[17] = v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C0860);
  *uint64_t v11 = v0;
  v11[1] = sub_1001608E4;
  uint64_t v13 = v0[14];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v13, sub_1000B95A0, v8, v12);
}

uint64_t sub_1001608E4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(*(void *)(v2 + 104) + 8))(*(void *)(v2 + 112), *(void *)(v2 + 96));
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100160D90;
  }
  else
  {
    swift_release();
    *(_OWORD *)(v2 + 152) = *(_OWORD *)(v2 + 16);
    uint64_t v3 = sub_100160A58;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100160A58()
{
  uint64_t v1 = v0[20];
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[21] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100160C74;
    uint64_t v3 = v0[19];
    return sub_10013FFEC(v3, v1, 0, 0xF000000000000000);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v0[9]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100160C74(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100160FC8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100160E08;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100160D90()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100160E08()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (v1)
  {
    **(void **)(v0 + 32) = v1;
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(void *)(v0 + 72));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001610D0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100160FC8()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100161040()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

uint64_t sub_1001610D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016111C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100007458;
  return sub_100160618(a1, a2, v6, v7, v8);
}

double sub_1001611E0@<D0>(void (*a1)(long long *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  a1(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100161224(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C4848 + dword_1001C4848);
  return v8(a1, a2, v6);
}

unint64_t sub_1001612EC()
{
  return sub_100161040();
}

uint64_t sub_1001612F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100161334(uint8_t *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_100160290(a1, *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *sub_100161354@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr, void))(v2 + 16))(&v6, *a1);
  if (!v3) {
    *a2 = v6;
  }
  return result;
}

void sub_1001613A0(uint64_t *a1@<X8>)
{
  sub_10015FEFC(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

ValueMetadata *type metadata accessor for KeySigningKeyLookupInfo()
{
  return &type metadata for KeySigningKeyLookupInfo;
}

void *sub_1001613DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_defaultActor_initialize();
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v8 = SESKeystore.init()();
  type metadata accessor for SEPairingManager();
  swift_allocObject();
  uint64_t v9 = SEPairingManager.init()();
  uint64_t v10 = type metadata accessor for GenericPasswordKeychainWrapper();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = type metadata accessor for SyncableKeyStoreProvider();
  uint64_t v13 = (void *)swift_allocObject();
  v13[5] = v10;
  v13[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v13[2] = v11;
  v23[3] = v12;
  v23[4] = &off_1001B6F00;
  v23[0] = v13;
  type metadata accessor for CredentialKeyManager();
  unint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = sub_100036D00((uint64_t)v23, v12);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)&v23[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = *v17;
  swift_retain();
  id v20 = sub_1001631B4(v8, v9, v19, v14);
  sub_10000B9DC((uint64_t)v23);
  swift_release();
  v4[17] = v20;
  v4[18] = 0;
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = a3;
  return v4;
}

uint64_t sub_1001615C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[85] = v15;
  v8[84] = v14;
  v8[83] = a8;
  v8[82] = a7;
  v8[81] = a6;
  v8[80] = a5;
  v8[79] = a4;
  v8[78] = a3;
  v8[77] = a2;
  v8[76] = a1;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v8[86] = v9;
  v8[87] = *(void *)(v9 - 8);
  v8[88] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ISO18013CodingKeyFormat();
  v8[89] = v10;
  v8[90] = *(void *)(v10 - 8);
  v8[91] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v8[92] = v11;
  v8[93] = *(void *)(v11 - 8);
  v8[94] = swift_task_alloc();
  return _swift_task_switch(sub_100161764, 0, 0);
}

uint64_t sub_100161764()
{
  uint64_t v135 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v118 = *((void *)v0 + 93);
    uint64_t v123 = *((void *)v0 + 92);
    uint64_t v128 = *((void *)v0 + 94);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v133 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    id v4 = (id)DCCredentialPayloadFormatToString();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    *((void *)v0 + 75) = sub_10004C3A4(v5, v7, &v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "makePayloadProcessor for payload format %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v128, v123);
  }
  else
  {
    uint64_t v8 = *((void *)v0 + 94);
    uint64_t v9 = *((void *)v0 + 93);
    uint64_t v10 = *((void *)v0 + 92);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  switch(*((void *)v0 + 79))
  {
    case 0:
      uint64_t v119 = *((void *)v0 + 91);
      uint64_t v11 = *((void *)v0 + 90);
      uint64_t v116 = *((void *)v0 + 89);
      unint64_t v12 = *((void *)v0 + 78);
      uint64_t v13 = *((void *)v0 + 77);
      uint64_t v129 = *((void *)v0 + 76);
      (*(void (**)(void))(v11 + 104))();
      *((void *)v0 + 68) = &type metadata for PayloadProcessorAnalyticsRecorder;
      *((void *)v0 + 69) = &off_1001B8360;
      uint64_t v14 = type metadata accessor for ISO18013PackagePayloadProcessor();
      uint64_t v15 = swift_allocObject();
      sub_100036D00((uint64_t)v0 + 520, (uint64_t)&type metadata for PayloadProcessorAnalyticsRecorder);
      swift_task_alloc();
      value witness table for ()[2]();
      *((void *)v0 + 73) = &type metadata for PayloadProcessorAnalyticsRecorder;
      *((void *)v0 + 74) = &off_1001B8360;
      sub_10000354C(v13, v12);
      swift_defaultActor_initialize();
      uint64_t v16 = v15 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
      uint64_t v17 = type metadata accessor for ISO18013Package();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
      *(void *)(v15 + 112) = v13;
      *(void *)(v15 + 120) = v12;
      sub_10002C468(v0 + 35, v15 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v119, v116);
      sub_10000B9DC((uint64_t)v0 + 520);
      swift_task_dealloc();
      *(void *)(v129 + 24) = v14;
      *(void *)(v129 + 32) = &off_1001B4CD0;
      goto LABEL_24;
    case 1:
      uint64_t v26 = *((void *)v0 + 81);
      if (!v26) {
        goto LABEL_18;
      }
      uint64_t v27 = (uint64_t)v0 + 440;
      unint64_t v28 = *((void *)v0 + 83);
      uint64_t v29 = *((void *)v0 + 82);
      uint64_t v124 = v29;
      unint64_t v130 = v28;
      type metadata accessor for SESKeystore();
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_10000354C(v29, v28);
      uint64_t v120 = SESKeystore.init()();
      type metadata accessor for SEPairingManager();
      swift_allocObject();
      uint64_t v30 = SEPairingManager.init()();
      uint64_t v31 = type metadata accessor for GenericPasswordKeychainWrapper();
      uint64_t v32 = swift_allocObject();
      uint64_t v33 = type metadata accessor for SyncableKeyStoreProvider();
      uint64_t v34 = (void *)swift_allocObject();
      uint64_t v35 = v0;
      v34[5] = v31;
      v34[6] = &protocol witness table for GenericPasswordKeychainWrapper;
      v34[2] = v32;
      *((void *)v0 + 58) = v33;
      *((void *)v0 + 59) = &off_1001B6F00;
      *((void *)v0 + 55) = v34;
      type metadata accessor for CredentialKeyManager();
      uint64_t inited = (void *)swift_initStackObject();
      *((void *)v0 + 95) = inited;
      uint64_t v37 = *((void *)v0 + 58);
      uint64_t v38 = sub_100036D00((uint64_t)v0 + 440, v37);
      uint64_t v39 = *(void *)(v37 - 8);
      unint64_t v40 = (uint64_t *)swift_task_alloc();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v39 + 16))(v40, v38, v37);
      uint64_t v41 = *v40;
      swift_retain();
      *((void *)v35 + 96) = sub_1001631B4(v120, v30, v41, inited);
      sub_10000B9DC(v27);
      swift_release();
      swift_task_dealloc();
      sub_10000354C(v124, v130);
      uint64_t v42 = (void *)swift_task_alloc();
      *((void *)v35 + 97) = v42;
      *uint64_t v42 = v35;
      unint64_t v43 = sub_1001627A4;
      goto LABEL_11;
    case 2:
      uint64_t v26 = *((void *)v0 + 81);
      if (!v26)
      {
LABEL_18:
        uint64_t v70 = *((void *)v0 + 88);
        uint64_t v71 = *((void *)v0 + 87);
        uint64_t v72 = *((void *)v0 + 86);
        uint64_t v133 = 0;
        unint64_t v134 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        uint64_t v133 = 0xD000000000000014;
        unint64_t v134 = 0x8000000100179E90;
        id v73 = (id)DCCredentialPayloadFormatToString();
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v76 = v75;

        v77._uint64_t countAndFlagsBits = v74;
        v77._object = v76;
        String.append(_:)(v77);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v71 + 104))(v70, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v72);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000507C();
        swift_allocError();
        goto LABEL_21;
      }
      uint64_t v44 = (uint64_t)(v0 + 25);
      unint64_t v45 = *((void *)v0 + 83);
      uint64_t v46 = *((void *)v0 + 82);
      uint64_t v125 = v46;
      unint64_t v131 = v45;
      type metadata accessor for SESKeystore();
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_10000354C(v46, v45);
      uint64_t v121 = SESKeystore.init()();
      type metadata accessor for SEPairingManager();
      swift_allocObject();
      uint64_t v47 = SEPairingManager.init()();
      uint64_t v48 = type metadata accessor for GenericPasswordKeychainWrapper();
      uint64_t v49 = swift_allocObject();
      uint64_t v50 = type metadata accessor for SyncableKeyStoreProvider();
      uint64_t v51 = (void *)swift_allocObject();
      uint64_t v35 = v0;
      v51[5] = v48;
      v51[6] = &protocol witness table for GenericPasswordKeychainWrapper;
      uint64_t v51[2] = v49;
      *((void *)v0 + 53) = v50;
      *((void *)v0 + 54) = &off_1001B6F00;
      *((void *)v0 + 50) = v51;
      type metadata accessor for CredentialKeyManager();
      id v52 = (void *)swift_initStackObject();
      *((void *)v0 + 100) = v52;
      uint64_t v53 = *((void *)v0 + 53);
      uint64_t v54 = sub_100036D00((uint64_t)(v0 + 25), v53);
      uint64_t v55 = *(void *)(v53 - 8);
      uint64_t v56 = (uint64_t *)swift_task_alloc();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v55 + 16))(v56, v54, v53);
      uint64_t v57 = *v56;
      swift_retain();
      *((void *)v35 + 101) = sub_1001631B4(v121, v47, v57, v52);
      sub_10000B9DC(v44);
      swift_release();
      swift_task_dealloc();
      sub_10000354C(v125, v131);
      uint64_t v42 = (void *)swift_task_alloc();
      *((void *)v35 + 102) = v42;
      *uint64_t v42 = v35;
      unint64_t v43 = sub_100162B54;
LABEL_11:
      v42[1] = v43;
      uint64_t v58 = *((void *)v35 + 83);
      uint64_t v59 = *((void *)v35 + 82);
      uint64_t v60 = *((void *)v35 + 80);
      uint64_t result = sub_100141B0C(v60, v26, v59, v58);
      break;
    case 3:
      unint64_t v62 = (void *)*((void *)v0 + 81);
      if (v62)
      {
        unint64_t v63 = *((void *)v0 + 85);
        uint64_t v126 = (uint64_t)(v0 + 30);
        if (v63 >> 60 == 15)
        {
          unint64_t v64 = *((void *)v0 + 83);
          uint64_t v65 = *((void *)v0 + 82);
          swift_bridgeObjectRetain();
          sub_10000354C(v65, v64);
          id v132 = 0;
        }
        else
        {
          uint64_t v87 = *((void *)v0 + 84);
          unint64_t v88 = *((void *)v0 + 83);
          uint64_t v89 = *((void *)v0 + 82);
          uint64_t v90 = *((void *)v0 + 80);
          id v91 = objc_allocWithZone((Class)LAContext);
          sub_100063724(v90, (uint64_t)v62, v89, v88);
          sub_100009778(v87, v63);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100009764(v87, v63);
          id v132 = [v91 initWithExternalizedContext:isa];
        }
        uint64_t v122 = *((void *)v0 + 80);
        type metadata accessor for SESKeystore();
        swift_allocObject();
        uint64_t v117 = SESKeystore.init()();
        type metadata accessor for SEPairingManager();
        swift_allocObject();
        uint64_t v93 = SEPairingManager.init()();
        uint64_t v94 = type metadata accessor for GenericPasswordKeychainWrapper();
        uint64_t v95 = swift_allocObject();
        uint64_t v96 = type metadata accessor for SyncableKeyStoreProvider();
        uint64_t v97 = (void *)swift_allocObject();
        uint64_t v98 = v0;
        v97[5] = v94;
        v97[6] = &protocol witness table for GenericPasswordKeychainWrapper;
        v97[2] = v95;
        *((void *)v0 + 63) = v96;
        *((void *)v0 + 64) = &off_1001B6F00;
        *((void *)v0 + 60) = v97;
        type metadata accessor for CredentialKeyManager();
        uint64_t v99 = (void *)swift_initStackObject();
        uint64_t v100 = *((void *)v0 + 63);
        uint64_t v101 = sub_100036D00(v126, v100);
        uint64_t v102 = *(void *)(v100 - 8);
        uint64_t v103 = (uint64_t *)swift_task_alloc();
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v102 + 16))(v103, v101, v100);
        uint64_t v104 = *v103;
        swift_retain();
        sub_1001631B4(v117, v93, v104, v99);
        sub_10000B9DC(v126);
        swift_release();
        swift_task_dealloc();
        uint64_t v105 = sub_100146F88(v122, v62, v132);
        unint64_t v106 = *((void *)v98 + 83);
        uint64_t v107 = *((void *)v98 + 82);
        uint64_t v108 = *((void *)v98 + 81);
        uint64_t v109 = *((void *)v98 + 80);
        uint64_t v110 = (uint64_t)v105;
        unint64_t v111 = *((void *)v98 + 78);
        uint64_t v112 = *((void *)v98 + 77);
        uint64_t v113 = *((void *)v98 + 76);
        swift_release();
        unint64_t v127 = v106;
        uint64_t v114 = sub_100006CC8(&qword_1001C4910);
        swift_allocObject();
        sub_10000354C(v112, v111);
        swift_retain();
        uint64_t v15 = (uint64_t)sub_1001613DC(v112, v111, v110);
        uint64_t v115 = v113;
        *(void *)(v113 + 24) = v114;
        uint64_t v0 = v98;
        *(void *)(v115 + 32) = &off_1001B8788;
        swift_release();

        sub_100063808(v109, v108, v107, v127);
LABEL_24:
        **((void **)v0 + 76) = v15;
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v86 = (uint64_t (*)(void))*((void *)v0 + 1);
      }
      else
      {
        uint64_t v78 = *((void *)v0 + 88);
        uint64_t v79 = *((void *)v0 + 87);
        uint64_t v80 = *((void *)v0 + 86);
        uint64_t v133 = 0;
        unint64_t v134 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        uint64_t v133 = 0xD00000000000001FLL;
        unint64_t v134 = 0x8000000100184B40;
        id v81 = (id)DCCredentialPayloadFormatToString();
        uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BOOL v84 = v83;

        v85._uint64_t countAndFlagsBits = v82;
        v85._object = v84;
        String.append(_:)(v85);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v78, enum case for DIPError.Code.idcsMissingPayloadProtectionKey(_:), v80);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000507C();
        swift_allocError();
LABEL_21:
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v86 = (uint64_t (*)(void))*((void *)v0 + 1);
      }
      uint64_t result = v86();
      break;
    case 4:
      unint64_t v66 = *((void *)v0 + 78);
      uint64_t v67 = *((void *)v0 + 77);
      uint64_t v68 = *((void *)v0 + 76);
      uint64_t v69 = type metadata accessor for ACWGPackagePayloadProcessor();
      swift_allocObject();
      sub_10000354C(v67, v66);
      uint64_t v15 = sub_100037CE4(v67, v66);
      *(void *)(v68 + 24) = v69;
      *(void *)(v68 + 32) = &off_1001B4DC0;
      goto LABEL_24;
    default:
      uint64_t v18 = *((void *)v0 + 88);
      uint64_t v19 = *((void *)v0 + 87);
      uint64_t v20 = *((void *)v0 + 86);
      uint64_t v133 = 0;
      unint64_t v134 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      uint64_t v133 = 0xD00000000000001BLL;
      unint64_t v134 = 0x8000000100184A80;
      id v21 = (id)DCCredentialPayloadFormatToString();
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      v25._uint64_t countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.idcsUnsupportedPayloadFormat(_:), v20);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      goto LABEL_21;
  }
  return result;
}

uint64_t sub_1001627A4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[98] = a1;
  v3[99] = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v4 = sub_100163000;
  }
  else
  {
    sub_1000035EC(v3[82], v3[83]);
    swift_release();
    id v4 = sub_1001628D4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001628D4()
{
  if (v0[98])
  {
    uint64_t v16 = v0[82];
    unint64_t v17 = v0[83];
    uint64_t v1 = v0[81];
    uint64_t v2 = v0[80];
    unint64_t v3 = v0[78];
    uint64_t v4 = v0[77];
    uint64_t v5 = v0[76];
    uint64_t v6 = (void *)DeviceIdentityKey.key.getter();
    uint64_t v7 = sub_100006CC8((uint64_t *)&unk_1001C4920);
    uint64_t v8 = (void *)swift_allocObject();
    sub_10000354C(v4, v3);
    id v9 = v6;
    swift_defaultActor_initialize();
    v8[14] = v4;
    v8[15] = v3;
    v8[16] = v9;
    v8[17] = 0;
    *(void *)(v5 + 24) = v7;
    *(void *)(v5 + 32) = &off_1001B40A8;

    swift_release();
    sub_100063808(v2, v1, v16, v17);
    *(void *)v0[76] = v8;
  }
  else
  {
    unint64_t v11 = v0[83];
    uint64_t v12 = v0[82];
    uint64_t v13 = v0[81];
    uint64_t v14 = v0[80];
    (*(void (**)(void, void, void))(v0[87] + 104))(v0[88], enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v0[86]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100063808(v14, v13, v12, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100162B54(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  v3[103] = a1;
  v3[104] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1001630C8;
  }
  else
  {
    sub_1000035EC(v3[82], v3[83]);
    swift_release();
    uint64_t v4 = sub_100162C84;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100162C84()
{
  if (v0[103])
  {
    unint64_t v1 = v0[85];
    uint64_t v2 = (void *)DeviceIdentityKey.key.getter();
    if (v1 >> 60 == 15) {
      goto LABEL_6;
    }
    unint64_t v3 = v0[85];
    uint64_t v4 = v0[84];
    id v5 = objc_allocWithZone((Class)LAContext);
    sub_10000354C(v4, v3);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(v4, v3);
    id v7 = [v5 initWithExternalizedContext:isa];

    if (!v7)
    {
LABEL_6:
      uint64_t v10 = 0;
      Swift::String v25 = 0;
    }
    else
    {
      id v8 = [v7 externalizedContext];
      Swift::String v25 = v7;
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

LABEL_8:
        uint64_t v28 = v0[82];
        unint64_t v29 = v0[83];
        uint64_t v26 = v0[80];
        uint64_t v27 = v0[81];
        unint64_t v13 = v0[78];
        uint64_t v14 = v0[77];
        uint64_t v15 = v0[76];
        uint64_t v16 = sub_100006CC8(&qword_1001C4918);
        swift_allocObject();
        sub_10000354C(v14, v13);
        id v17 = v2;
        sub_100009778(v10, v12);
        uint64_t v18 = sub_100163488(v14, v13, v17, v10, v12);

        sub_1000035EC(v14, v13);
        *(void *)(v15 + 24) = v16;
        *(void *)(v15 + 32) = &off_1001B8698;
        sub_100009764(v10, v12);

        swift_release();
        sub_100063808(v26, v27, v28, v29);
        *(void *)v0[76] = v18;
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v19 = (uint64_t (*)(void))v0[1];
        goto LABEL_10;
      }
      uint64_t v10 = 0;
    }
    unint64_t v12 = 0xF000000000000000;
    goto LABEL_8;
  }
  unint64_t v20 = v0[83];
  uint64_t v21 = v0[82];
  uint64_t v22 = v0[81];
  uint64_t v23 = v0[80];
  (*(void (**)(void, void, void))(v0[87] + 104))(v0[88], enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v0[86]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_100063808(v23, v22, v21, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
LABEL_10:
  return v19();
}

uint64_t sub_100163000()
{
  unint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[81];
  uint64_t v4 = v0[80];
  sub_1000035EC(v2, v1);
  swift_release();
  sub_100063808(v4, v3, v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001630C8()
{
  unint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[81];
  uint64_t v4 = v0[80];
  sub_1000035EC(v2, v1);
  swift_release();
  sub_100063808(v4, v3, v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t type metadata accessor for PayloadProcessorBuilder()
{
  return self;
}

void *sub_1001631B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = type metadata accessor for SEPairingManager();
  uint64_t v14 = &protocol witness table for SEPairingManager;
  *(void *)&long long v12 = a2;
  uint64_t v10 = type metadata accessor for SyncableKeyStoreProvider();
  unint64_t v11 = &off_1001B6F00;
  *(void *)&long long v9 = a3;
  a4[3] = sub_100006D0C();
  type metadata accessor for DeviceIdentityKeystore();
  swift_allocObject();
  a4[4] = DeviceIdentityKeystore.init()();
  a4[5] = sub_10004CD38();
  a4[2] = a1;
  sub_10002C468(&v12, (uint64_t)(a4 + 11));
  sub_10002C468(&v9, (uint64_t)(a4 + 6));
  return a4;
}

uint64_t sub_100163270(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 5) {
    return (0xEu >> a1) & 1;
  }
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    long long v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v17 = v15;
    *(_DWORD *)long long v9 = 136315138;
    uint64_t v14 = v9 + 4;
    id v10 = (id)DCCredentialPayloadFormatToString();
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    uint64_t v16 = sub_10004C3A4(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unknown payload format %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

void *sub_100163488(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  swift_defaultActor_initialize();
  v5[18] = 0;
  v5[14] = a1;
  v5[15] = a2;
  v5[16] = a3;
  sub_10000354C(a1, a2);
  id v11 = a3;
  Class isa = 0;
  if (a5 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a4, a5);
  }
  id v13 = [objc_allocWithZone((Class)LAContext) initWithExternalizedContext:isa];

  v5[17] = v13;
  return v5;
}

uint64_t sub_100163544(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 5) {
    return qword_100178228[a1];
  }
  unint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t v12 = 0xD00000000000001BLL;
  unint64_t v13 = 0x8000000100184A80;
  id v7 = (id)DCCredentialPayloadFormatToString();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsUnsupportedPayloadFormat(_:), v2);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

ValueMetadata *type metadata accessor for KeyLookupInfo()
{
  return &type metadata for KeyLookupInfo;
}

unint64_t sub_100163764(uint64_t a1, void *a2)
{
  uint64_t v35 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  id v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  id v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredential.getter();
  uint64_t v37 = v10;
  DIPSignpost.init(_:)();
  type metadata accessor for StoredCredential();
  Swift::String v11 = (void *)static StoredCredential.fetchRequest()();
  [v11 setFetchLimit:1];
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  uint64_t v12 = swift_allocObject();
  long long v34 = xmmword_1001768E0;
  *(_OWORD *)(v12 + 16) = xmmword_1001768E0;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10000DB88();
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  swift_bridgeObjectRetain();
  unint64_t v13 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v13];

  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v15._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v15._object = (void *)0x8000000100184BC0;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = a1;
    v16._object = a2;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 8250;
    v17._object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    uint64_t v42 = v2;
    sub_100006CC8(&qword_1001C0890);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v36, enum case for DIPError.Code.coreDataError(_:), v35);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    uint64_t v18 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v19 = (*(unsigned __int8 *)(*(void *)v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v18 + 80);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = v34;
    unint64_t v21 = v20 + v19;
    uint64_t v22 = (uint64_t *)(v20 + v19 + v18[14]);
    uint64_t v23 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v24 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v21, v23, v24);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v25 = dispatch thunk of Error._code.getter();
    v22[3] = (uint64_t)&type metadata for Int;
    *uint64_t v22 = v25;
    sub_10004A5E8(v20);
    uint64_t v26 = type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v27 = v37;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
    return v26;
  }
  unint64_t v28 = result;
  uint64_t v30 = v37;
  uint64_t v29 = v38;
  uint64_t v31 = v39;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_10:

    swift_bridgeObjectRelease();
    uint64_t v26 = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v33) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v28 & 0xC000000000000001) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v32 = *(id *)(v28 + 32);
LABEL_8:
    uint64_t v26 = (uint64_t)v32;

    swift_bridgeObjectRelease();
LABEL_11:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    return v26;
  }
  __break(1u);
  return result;
}

uint64_t sub_100163D84()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v23 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v24 = type metadata accessor for DIPSignpost();
  uint64_t v5 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllCredentials.getter();
  DIPSignpost.init(_:)();
  type metadata accessor for StoredCredential();
  uint64_t v8 = (void *)static StoredCredential.fetchRequest()();
  uint64_t v9 = NSManagedObjectContext.fetch<A>(_:)();

  if (v0)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v10._uint64_t countAndFlagsBits = 0xD000000000000020;
    v10._object = (void *)0x8000000100184C80;
    String.append(_:)(v10);
    uint64_t v27 = v0;
    sub_100006CC8(&qword_1001C0890);
    _print_unlocked<A, B>(_:_:)();
    v21[1] = v26;
    void v21[2] = v25;
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v23, enum case for DIPError.Code.coreDataError(_:), v1);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    Swift::String v11 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v12 = (*(unsigned __int8 *)(*(void *)v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v11 + 80);
    uint64_t v13 = swift_allocObject();
    uint64_t v22 = v9;
    uint64_t v14 = v13;
    *(_OWORD *)(v13 + 16) = xmmword_1001768E0;
    unint64_t v15 = v13 + v12;
    Swift::String v16 = (uint64_t *)(v13 + v12 + v11[14]);
    uint64_t v17 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v15, v17, v18);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v19 = dispatch thunk of Error._code.getter();
    v16[3] = (uint64_t)&type metadata for Int;
    *Swift::String v16 = v19;
    sub_10004A5E8(v14);
    type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
    return v22;
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  }
  return v9;
}

unint64_t sub_100164254(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for DIPSignpost();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiers.getter();
  DIPSignpost.init(_:)();
  id v9 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 initWithEntityName:v10];

  [v11 setResultType:2];
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1001767E0;
  *(void *)(v12 + 32) = 0xD000000000000014;
  *(void *)(v12 + 40) = 0x8000000100184CD0;
  *(void *)(v12 + 88) = &type metadata for String;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = 0x6F69746974726170;
  *(void *)(v12 + 72) = 0xE90000000000006ELL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setPropertiesToFetch:isa];

  if (*(void *)(a1 + 16))
  {
    sub_100044DE0();
    sub_100006CC8(&qword_1001C0878);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1001768E0;
    *(void *)(v14 + 56) = sub_100006CC8(&qword_1001C3C70);
    *(void *)(v14 + 64) = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
    *(void *)(v14 + 32) = a1;
    swift_bridgeObjectRetain();
    unint64_t v15 = NSPredicate.init(format:_:)();
    [v11 setPredicate:v15];
  }
  sub_100006CC8((uint64_t *)&unk_1001C4960);
  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {
    uint64_t v33 = v8;

    uint64_t v17 = enum case for DIPError.Code.coreDataError(_:);
    unint64_t v18 = v1;
    uint64_t v19 = v34;
  }
  else
  {
    uint64_t v30 = sub_100168C24(v16);
    swift_bridgeObjectRelease();
    if (v30)
    {
      unint64_t v18 = sub_10016A010((uint64_t)v30);

      swift_bridgeObjectRelease();
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v37);
      return v18;
    }
    uint64_t v33 = v8;
    uint64_t v17 = enum case for DIPError.Code.coreDataError(_:);
    uint64_t v19 = v34;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v35, enum case for DIPError.Code.coreDataError(_:), v34);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    unint64_t v18 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v20._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v20._object = (void *)0x8000000100184D10;
  String.append(_:)(v20);
  unint64_t v40 = v18;
  sub_100006CC8(&qword_1001C0890);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v35, v17, v19);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  unint64_t v21 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(*(void *)v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v21 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1001768E0;
  unint64_t v24 = v23 + v22;
  uint64_t v25 = (uint64_t *)(v23 + v22 + v21[14]);
  uint64_t v26 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v27 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v24, v26, v27);
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v28 = dispatch thunk of Error._code.getter();
  v25[3] = (uint64_t)&type metadata for Int;
  *uint64_t v25 = v28;
  sub_10004A5E8(v23);
  type metadata accessor for DIPError();
  sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v29 = v33;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v37);
  return v18;
}

unint64_t sub_100164A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  __chkstk_darwin(v8);
  NSString v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiersByDocType.getter();
  DIPSignpost.init(_:)();
  id v11 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 initWithEntityName:v12];

  [v13 setResultType:2];
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v14 = swift_allocObject();
  long long v39 = xmmword_1001767E0;
  *(_OWORD *)(v14 + 16) = xmmword_1001767E0;
  *(void *)(v14 + 32) = 0xD000000000000014;
  *(void *)(v14 + 40) = 0x8000000100184CD0;
  *(void *)(v14 + 88) = &type metadata for String;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = 0x6F69746974726170;
  *(void *)(v14 + 72) = 0xE90000000000006ELL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setPropertiesToFetch:isa];

  uint64_t v16 = *(void *)(a1 + 16);
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  if (v16)
  {
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = v39;
    *(void *)(v17 + 56) = sub_100006CC8(&qword_1001C3C70);
    *(void *)(v17 + 64) = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
    *(void *)(v17 + 32) = a1;
    *(void *)(v17 + 96) = &type metadata for String;
    *(void *)(v17 + 104) = sub_10000DB88();
    *(void *)(v17 + 72) = v43;
    *(void *)(v17 + 80) = a3;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1001768E0;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10000DB88();
    *(void *)(v18 + 32) = v43;
    *(void *)(v18 + 40) = a3;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = NSPredicate.init(format:_:)();
  [v13 setPredicate:v19];

  sub_100006CC8((uint64_t *)&unk_1001C4960);
  uint64_t v20 = (uint64_t)v44;
  unint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
  if (v20)
  {
    uint64_t v44 = v10;

    uint64_t v22 = enum case for DIPError.Code.coreDataError(_:);
    uint64_t v23 = v20;
    uint64_t v25 = v40;
    uint64_t v24 = v41;
  }
  else
  {
    uint64_t v37 = sub_100168C24(v21);
    swift_bridgeObjectRelease();
    if (v37)
    {
      unint64_t v35 = sub_10016A010((uint64_t)v37);

      swift_bridgeObjectRelease();
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v46);
      return v35;
    }
    uint64_t v44 = v10;
    uint64_t v22 = enum case for DIPError.Code.coreDataError(_:);
    uint64_t v25 = v40;
    uint64_t v24 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v42, enum case for DIPError.Code.coreDataError(_:), v41);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v23 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v26._object = (void *)0x8000000100184D10;
  String.append(_:)(v26);
  uint64_t v49 = v23;
  sub_100006CC8(&qword_1001C0890);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v42, v22, v24);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v27 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v28 = (*(unsigned __int8 *)(*(void *)v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v27 + 80);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1001768E0;
  unint64_t v30 = v29 + v28;
  uint64_t v31 = (uint64_t *)(v29 + v28 + v27[14]);
  uint64_t v32 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v30, v32, v33);
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v34 = dispatch thunk of Error._code.getter();
  void v31[3] = (uint64_t)&type metadata for Int;
  uint64_t *v31 = v34;
  unint64_t v35 = sub_10004A5E8(v29);
  type metadata accessor for DIPError();
  sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v36 = v44;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v46);
  return v35;
}

unint64_t sub_10016524C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v48 = a4;
  uint64_t v52 = a2;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for DIPSignpost();
  uint64_t v55 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiersByDocTypeAndRegion.getter();
  uint64_t v54 = v13;
  DIPSignpost.init(_:)();
  id v14 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 initWithEntityName:v15];

  [v16 setResultType:2];
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v17 = swift_allocObject();
  long long v47 = xmmword_1001767E0;
  *(_OWORD *)(v17 + 16) = xmmword_1001767E0;
  *(void *)(v17 + 32) = 0xD000000000000014;
  *(void *)(v17 + 40) = 0x8000000100184CD0;
  *(void *)(v17 + 88) = &type metadata for String;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = 0x6F69746974726170;
  *(void *)(v17 + 72) = 0xE90000000000006ELL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v16 setPropertiesToFetch:isa];

  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v56 = v11;
  if (v19)
  {
    sub_100044DE0();
    sub_100006CC8(&qword_1001C0878);
    uint64_t v20 = swift_allocObject();
    if (a5)
    {
      *(_OWORD *)(v20 + 16) = xmmword_100176D20;
      *(void *)(v20 + 56) = sub_100006CC8(&qword_1001C3C70);
      *(void *)(v20 + 64) = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
      *(void *)(v20 + 32) = a1;
      *(void *)(v20 + 96) = &type metadata for String;
      unint64_t v21 = sub_10000DB88();
      *(void *)(v20 + 72) = v52;
      *(void *)(v20 + 80) = a3;
      *(void *)(v20 + 136) = &type metadata for String;
      *(void *)(v20 + 144) = v21;
      uint64_t v22 = v48;
      *(void *)(v20 + 104) = v21;
      *(void *)(v20 + 112) = v22;
      *(void *)(v20 + 120) = a5;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v20 + 16) = v47;
      *(void *)(v20 + 56) = sub_100006CC8(&qword_1001C3C70);
      *(void *)(v20 + 64) = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
      *(void *)(v20 + 32) = a1;
      *(void *)(v20 + 96) = &type metadata for String;
      *(void *)(v20 + 104) = sub_10000DB88();
      *(void *)(v20 + 72) = v52;
      *(void *)(v20 + 80) = a3;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if (!a5) {
      goto LABEL_11;
    }
    uint64_t v23 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000) == 0) {
      uint64_t v23 = v48 & 0xFFFFFFFFFFFFLL;
    }
    if (v23)
    {
      sub_100044DE0();
      sub_100006CC8(&qword_1001C0878);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v47;
      *(void *)(v24 + 56) = &type metadata for String;
      unint64_t v25 = sub_10000DB88();
      *(void *)(v24 + 32) = v52;
      *(void *)(v24 + 40) = a3;
      *(void *)(v24 + 96) = &type metadata for String;
      *(void *)(v24 + 104) = v25;
      uint64_t v26 = v48;
      *(void *)(v24 + 64) = v25;
      *(void *)(v24 + 72) = v26;
      *(void *)(v24 + 80) = a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
LABEL_11:
      sub_100044DE0();
      sub_100006CC8(&qword_1001C0878);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_1001768E0;
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10000DB88();
      *(void *)(v27 + 32) = v52;
      *(void *)(v27 + 40) = a3;
      swift_bridgeObjectRetain();
    }
  }
  unint64_t v28 = NSPredicate.init(format:_:)();
  unint64_t v29 = v53;
  [v16 setPredicate:v28];

  sub_100006CC8((uint64_t *)&unk_1001C4960);
  unint64_t v30 = NSManagedObjectContext.fetch<A>(_:)();
  if (v29)
  {

    uint64_t v31 = enum case for DIPError.Code.coreDataError(_:);
    unint64_t v32 = v29;
    uint64_t v34 = v49;
    uint64_t v33 = v50;
  }
  else
  {
    uint64_t v44 = sub_100168C24(v30);
    swift_bridgeObjectRelease();
    if (v44)
    {
      unint64_t v32 = sub_10016A010((uint64_t)v44);

      swift_bridgeObjectRelease();
      uint64_t v45 = v54;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v56);
      return v32;
    }
    uint64_t v31 = enum case for DIPError.Code.coreDataError(_:);
    uint64_t v34 = v49;
    uint64_t v33 = v50;
    (*(void (**)(char *, void, uint64_t))(v49 + 104))(v51, enum case for DIPError.Code.coreDataError(_:), v50);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    unint64_t v32 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  uint64_t v57 = 0;
  unint64_t v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v35._object = (void *)0x8000000100184D10;
  String.append(_:)(v35);
  unint64_t v59 = v32;
  sub_100006CC8(&qword_1001C0890);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v51, v31, v33);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v36 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v37 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1001768E0;
  long long v39 = (uint64_t *)(v38 + v37 + v36[14]);
  uint64_t v40 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v41 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v38 + v37, v40, v41);
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v42 = dispatch thunk of Error._code.getter();
  v39[3] = (uint64_t)&type metadata for Int;
  uint64_t *v39 = v42;
  sub_10004A5E8(v38);
  type metadata accessor for DIPError();
  sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v43 = v54;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v56);
  return v32;
}

unint64_t sub_100165C00(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v83 = a3;
  uint64_t v77 = a2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v72 = v4;
  __chkstk_darwin(v4);
  id v73 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v70 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v69 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v69 - v12;
  uint64_t v14 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for DIPSignpost();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveRegionsInPartitions.getter();
  DIPSignpost.init(_:)();
  uint64_t v76 = type metadata accessor for StoredPayload();
  uint64_t v19 = (void *)static StoredPayload.fetchRequest()();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1001768E0;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 32) = 0x6E6F69676572;
  *(void *)(v20 + 40) = 0xE600000000000000;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v80 = v19;
  [v19 setPropertiesToFetch:isa];

  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v79 = v16;
  if (v22)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v69 = (void (*)(void, void))swift_slowAlloc();
      uint64_t v86 = v69;
      *(_DWORD *)uint64_t v25 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v26 = Array.description.getter();
      uint64_t v74 = v18;
      uint64_t v75 = v15;
      uint64_t v27 = v26;
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v85 = sub_10004C3A4(v27, v29, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      unint64_t v30 = v83;
      swift_bridgeObjectRetain();
      uint64_t v31 = v77;
      uint64_t v85 = sub_10004C3A4(v77, v30, (uint64_t *)&v86);
      uint64_t v18 = v74;
      uint64_t v15 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "fetchActiveRegionsInPartitions partitions %s docType %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v69 = *(void (**)(void, void))(v81 + 8);
      v69(v13, v82);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v69 = *(void (**)(void, void))(v81 + 8);
      v69(v13, v82);
      uint64_t v31 = v77;
    }
    sub_100044DE0();
    sub_100006CC8(&qword_1001C0878);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_100176D20;
    *(void *)(v38 + 56) = sub_100006CC8(&qword_1001C3C70);
    uint64_t v39 = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
    *(void *)(v38 + 32) = a1;
    *(void *)(v38 + 96) = &type metadata for UInt;
    *(void *)(v38 + 104) = &protocol witness table for UInt;
    *(void *)(v38 + 64) = v39;
    *(void *)(v38 + 72) = 2;
    *(void *)(v38 + 136) = &type metadata for String;
    *(void *)(v38 + 144) = sub_10000DB88();
    unint64_t v40 = v83;
    *(void *)(v38 + 112) = v31;
    *(void *)(v38 + 120) = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = NSPredicate.init(format:_:)();
    uint64_t v16 = v79;
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v74 = v18;
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v75 = v15;
      uint64_t v86 = (void (*)(void, void))v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      unint64_t v36 = v83;
      swift_bridgeObjectRetain();
      uint64_t v37 = v77;
      uint64_t v85 = sub_10004C3A4(v77, v36, (uint64_t *)&v86);
      uint64_t v18 = v74;
      uint64_t v16 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "fetchActiveRegionsInPartitions docType %s", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v15 = v75;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v69 = *(void (**)(void, void))(v81 + 8);
      v69(v11, v82);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v69 = *(void (**)(void, void))(v81 + 8);
      v69(v11, v82);
      uint64_t v37 = v77;
    }
    sub_100044DE0();
    sub_100006CC8(&qword_1001C0878);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1001767E0;
    *(void *)(v42 + 56) = &type metadata for UInt;
    *(void *)(v42 + 64) = &protocol witness table for UInt;
    *(void *)(v42 + 32) = 2;
    *(void *)(v42 + 96) = &type metadata for String;
    *(void *)(v42 + 104) = sub_10000DB88();
    unint64_t v43 = v83;
    *(void *)(v42 + 72) = v37;
    *(void *)(v42 + 80) = v43;
    swift_bridgeObjectRetain();
    uint64_t v41 = NSPredicate.init(format:_:)();
  }
  id v44 = v80;
  [v80 setPredicate:v41];

  uint64_t v45 = v78;
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v45)
  {

    (*(void (**)(char *, void, uint64_t))(v71 + 104))(v73, enum case for DIPError.Code.internalError(_:), v72);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v47 = type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return v47;
  }
  unint64_t v48 = result;
  unint64_t v83 = 0;
  uint64_t v75 = v15;
  uint64_t v87 = &_swiftEmptySetSingleton;
  uint64_t v74 = v18;
  if (!(result >> 62))
  {
    uint64_t v49 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v49) {
      goto LABEL_14;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    unint64_t v59 = v70;
    defaultLogger()();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      unint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = (void (*)(void, void))swift_slowAlloc();
      *(_DWORD *)unint64_t v62 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v63 = Set.description.getter();
      unint64_t v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v84 = sub_10004C3A4(v63, v65, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "fetchActiveRegionsInPartitions returning %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v66 = v70;
    }
    else
    {

      unint64_t v66 = v59;
    }
    v69(v66, v82);
    uint64_t v67 = v75;
    swift_beginAccess();
    uint64_t v47 = (uint64_t)v87;
    uint64_t v68 = v74;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v68, v67);
    return v47;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_28;
  }
LABEL_14:
  if (v49 >= 1)
  {
    uint64_t v50 = 0;
    while (1)
    {
      if ((v48 & 0xC000000000000001) != 0) {
        id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v51 = *(id *)(v48 + 8 * v50 + 32);
      }
      uint64_t v52 = v51;
      id v53 = [v51 region];
      if (v53)
      {
        uint64_t v54 = v53;
        Swift::Int v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v57 = v56;

        uint64_t v58 = HIBYTE(v57) & 0xF;
        if ((v57 & 0x2000000000000000) == 0) {
          uint64_t v58 = v55 & 0xFFFFFFFFFFFFLL;
        }
        if (v58)
        {
          sub_100003980((Swift::Int *)&v86, v55, v57);

          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
      }

LABEL_18:
      if (v49 == ++v50) {
        goto LABEL_28;
      }
    }
  }
  __break(1u);
  return result;
}

void (*sub_100166880(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_100169C44(v6, a2, a3);
  return sub_100166900;
}

void sub_100166900(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_100166954(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  unint64_t v64 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v67 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveDocTypes.getter();
  unint64_t v65 = v10;
  DIPSignpost.init(_:)();
  type metadata accessor for StoredPayload();
  id v11 = (id)static StoredPayload.fetchRequest()();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v12 = swift_allocObject();
  long long v73 = xmmword_1001767E0;
  *(_OWORD *)(v12 + 16) = xmmword_1001767E0;
  *(void *)(v12 + 32) = 0x65707954636F64;
  *(void *)(v12 + 40) = 0xE700000000000000;
  *(void *)(v12 + 88) = &type metadata for String;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = 0x6E6F69676572;
  *(void *)(v12 + 72) = 0xE600000000000000;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setPropertiesToFetch:isa];

  uint64_t v14 = *(void *)(a1 + 16);
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  id v70 = v11;
  if (v14)
  {
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = v73;
    *(void *)(v15 + 56) = sub_100006CC8(&qword_1001C3C70);
    id v11 = v70;
    uint64_t v16 = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
    *(void *)(v15 + 32) = a1;
    *(void *)(v15 + 96) = &type metadata for UInt;
    *(void *)(v15 + 104) = &protocol witness table for UInt;
    *(void *)(v15 + 64) = v16;
    *(void *)(v15 + 72) = 2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1001768E0;
    *(void *)(v17 + 56) = &type metadata for UInt;
    *(void *)(v17 + 64) = &protocol witness table for UInt;
    *(void *)(v17 + 32) = 2;
  }
  uint64_t v18 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v18];

  uint64_t v19 = v74;
  unint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v21 = v19;
  if (v19)
  {

    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
    swift_errorRetain();
    unint64_t v22 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v23 = v65;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v67);
    return v22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = v20;
  uint64_t v77 = (uint8_t *)_swiftEmptyDictionarySingleton;
  if (v20 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  os_log_type_t v61 = v21;
  uint64_t v26 = 0;
  if (!v25)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    uint64_t v52 = v64;
    defaultLogger()();
    id v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      Swift::Int v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::Int v55 = 136315138;
      uint64_t v74 = v55 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100006CC8(&qword_1001C30C0);
      uint64_t v56 = Dictionary.description.getter();
      unint64_t v58 = v57;
      swift_bridgeObjectRelease();
      uint64_t v75 = sub_10004C3A4(v56, v58, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "fetchActiveDocTypesAndRegions returning %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v63);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v62 + 8))(v52, v63);
    }
    swift_beginAccess();
    unint64_t v22 = (unint64_t)v77;
    unint64_t v59 = v65;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v59, v67);
    sub_100006E40((uint64_t)v26);
    return v22;
  }
  *(void *)&long long v73 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v27 = 4;
  uint64_t v68 = v25;
  uint64_t v69 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    unint64_t v21 = (uint8_t *)(v27 - 4);
    if ((void)v73) {
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v28 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v27);
    }
    unint64_t v29 = v28;
    uint64_t v30 = v27 - 3;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    id v31 = [v28 docType:v61];
    if (v31) {
      break;
    }

LABEL_11:
    ++v27;
    if (v30 == v25) {
      goto LABEL_33;
    }
  }
  unint64_t v32 = v31;
  uint64_t v74 = (uint8_t *)(v27 - 3);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  id v36 = [v29 region];
  if (!v36)
  {
    swift_bridgeObjectRelease();

LABEL_32:
    uint64_t v30 = (uint64_t)v74;
    goto LABEL_11;
  }
  uint64_t v37 = v36;
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::Int v71 = v39;
  Swift::Int v72 = v38;

  sub_100006E40((uint64_t)v26);
  unint64_t v21 = v77;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v76 = v21;
  uint64_t v77 = (uint8_t *)0x8000000000000000;
  id v11 = (id)v33;
  unint64_t v41 = sub_10013C484(v33, v35);
  uint64_t v42 = *((void *)v21 + 2);
  BOOL v43 = (v40 & 1) == 0;
  uint64_t v44 = v42 + v43;
  if (__OFADD__(v42, v43)) {
    goto LABEL_39;
  }
  char v45 = v40;
  if (*((void *)v21 + 3) >= v44)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_10009B5E0();
    }
    goto LABEL_25;
  }
  sub_100099C30(v44, isUniquelyReferenced_nonNull_native);
  unint64_t v46 = sub_10013C484(v33, v35);
  if ((v45 & 1) == (v47 & 1))
  {
    unint64_t v41 = v46;
LABEL_25:
    uint64_t isUniquelyReferenced_nonNull_native = v69;
    unint64_t v21 = v76;
    uint64_t v77 = v76;
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
    {
      *(void *)&v21[8 * (v41 >> 6) + 64] |= 1 << v41;
      unint64_t v48 = (uint64_t *)(*((void *)v21 + 6) + 16 * v41);
      *unint64_t v48 = v33;
      v48[1] = v35;
      *(void *)(*((void *)v21 + 7) + 8 * v41) = &_swiftEmptySetSingleton;
      uint64_t v49 = *((void *)v21 + 2);
      uint64_t v50 = v49 + 1;
      BOOL v51 = __OFADD__(v49, 1);
      swift_bridgeObjectRetain();
      if (v51) {
        goto LABEL_40;
      }
      *((void *)v21 + 2) = v50;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100003980((Swift::Int *)&v76, v72, v71);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v26 = sub_100168E14;
    id v11 = v70;
    uint64_t v25 = v68;
    goto LABEL_32;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100167354(uint64_t a1)
{
  uint64_t v33 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v2 = *(v33 - 1);
  __chkstk_darwin(v33);
  uint64_t v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v37 = type metadata accessor for DIPSignpost();
  uint64_t v5 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveDocTypes.getter();
  DIPSignpost.init(_:)();
  type metadata accessor for StoredPayload();
  uint64_t v8 = (void *)static StoredPayload.fetchRequest()();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001768E0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 32) = 0x65707954636F64;
  *(void *)(v9 + 40) = 0xE700000000000000;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setPropertiesToFetch:isa];

  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1001767E0;
  *(void *)(v11 + 56) = sub_100006CC8(&qword_1001C3C70);
  uint64_t v12 = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 96) = &type metadata for UInt;
  *(void *)(v11 + 104) = &protocol witness table for UInt;
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 72) = 2;
  swift_bridgeObjectRetain();
  id v13 = v8;
  uint64_t v14 = NSPredicate.init(format:_:)();
  [v8 setPredicate:v14];

  uint64_t v15 = v36;
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v15)
  {

    (*(void (**)(char *, void, void *))(v2 + 104))(v34, enum case for DIPError.Code.internalError(_:), v33);
    swift_errorRetain();
    uint64_t v17 = (void *)sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10016A594((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v37);
    return (unint64_t)v17;
  }
  unint64_t v18 = result;
  uint64_t v34 = 0;
  uint64_t v35 = v7;
  uint64_t v19 = v37;
  uint64_t v36 = v5;
  Swift::Int v39 = &_swiftEmptySetSingleton;
  if (!(result >> 62))
  {
    uint64_t v20 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v21 = v35;
    uint64_t v22 = v36;
    if (v20) {
      goto LABEL_5;
    }
LABEL_16:

    swift_bridgeObjectRelease();
    uint64_t v17 = &_swiftEmptySetSingleton;
    uint64_t v31 = v19;
LABEL_17:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v31);
    return (unint64_t)v17;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v21 = v35;
  uint64_t v22 = v36;
  if (!v20) {
    goto LABEL_16;
  }
LABEL_5:
  if (v20 >= 1)
  {
    uint64_t v33 = v13;
    for (uint64_t i = 0; i != v20; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v28 = *(id *)(v18 + 8 * i + 32);
      }
      unint64_t v29 = v28;
      id v30 = [v28 docType];
      if (v30)
      {
        os_log_type_t v24 = v30;
        Swift::Int v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v27 = v26;

        sub_100003980(&v38, v25, v27);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v17 = v39;
    uint64_t v22 = v36;
    uint64_t v31 = v37;
    unint64_t v21 = v35;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100167908(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v82 = a4;
  unint64_t v90 = a3;
  uint64_t v88 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  uint64_t v87 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v78 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v78 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v78 - v18;
  uint64_t v20 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v20 - 8);
  uint64_t v21 = type metadata accessor for DIPSignpost();
  uint64_t v84 = *(void *)(v21 - 8);
  uint64_t v85 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveCredentialsByDocTypeAndRegion.getter();
  unint64_t v83 = v23;
  DIPSignpost.init(_:)();
  uint64_t v24 = type metadata accessor for StoredCredential();
  id v89 = (id)static StoredCredential.fetchRequest()();
  if (*(void *)(a1 + 16))
  {
    if (a5)
    {
      swift_bridgeObjectRetain();
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v25 = v90;
      swift_bridgeObjectRetain_n();
      Swift::Int v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      int v28 = v27;
      BOOL v29 = os_log_type_enabled(v26, v27);
      uint64_t v81 = v24;
      if (v29)
      {
        uint64_t v30 = swift_slowAlloc();
        int v80 = v28;
        uint64_t v31 = v30;
        uint64_t v79 = swift_slowAlloc();
        uint64_t v92 = v79;
        *(_DWORD *)uint64_t v31 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v32 = Array.description.getter();
        unint64_t v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v91 = sub_10004C3A4(v32, v34, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v35 = v88;
        uint64_t v91 = sub_10004C3A4(v88, v90, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v31 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v36 = v82;
        uint64_t v91 = sub_10004C3A4(v82, a5, &v92);
        uint64_t v37 = v35;
        unint64_t v25 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v80, "fetchActiveCredentialsByDocTypeAndRegion partitions %s docType %s region %s ", (uint8_t *)v31, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v87 + 8))(v19, v86);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v19, v86);
        uint64_t v37 = v88;
        uint64_t v36 = v82;
      }
      sub_100044DE0();
      sub_100006CC8(&qword_1001C0878);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_100176D30;
      *(void *)(v67 + 56) = sub_100006CC8(&qword_1001C3C70);
      uint64_t v68 = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
      *(void *)(v67 + 32) = a1;
      *(void *)(v67 + 96) = &type metadata for UInt;
      *(void *)(v67 + 104) = &protocol witness table for UInt;
      *(void *)(v67 + 64) = v68;
      *(void *)(v67 + 72) = 2;
      *(void *)(v67 + 136) = &type metadata for String;
      unint64_t v69 = sub_10000DB88();
      *(void *)(v67 + 112) = v37;
      *(void *)(v67 + 120) = v25;
      *(void *)(v67 + 176) = &type metadata for String;
      *(void *)(v67 + 184) = v69;
      *(void *)(v67 + 144) = v69;
      *(void *)(v67 + 152) = v36;
      *(void *)(v67 + 160) = a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v70 = NSPredicate.init(format:_:)();
      uint64_t v65 = v84;
      uint64_t v64 = v85;
      uint64_t v66 = v83;
    }
    else
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v48 = v90;
      swift_bridgeObjectRetain_n();
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        uint64_t v92 = v82;
        *(_DWORD *)uint64_t v51 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v52 = Array.description.getter();
        uint64_t v81 = v24;
        uint64_t v53 = v52;
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
        uint64_t v91 = sub_10004C3A4(v53, v55, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v91 = sub_10004C3A4(v88, v48, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v56 = v48;
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "fetchActiveCredentialsByDocTypeAndRegion partitions %s docType %s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v56 = v48;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v87 + 8))(v17, v86);
      uint64_t v65 = v84;
      uint64_t v64 = v85;
      uint64_t v66 = v83;
      sub_100044DE0();
      sub_100006CC8(&qword_1001C0878);
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_100176D20;
      *(void *)(v71 + 56) = sub_100006CC8(&qword_1001C3C70);
      uint64_t v72 = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
      *(void *)(v71 + 32) = a1;
      *(void *)(v71 + 96) = &type metadata for UInt;
      *(void *)(v71 + 104) = &protocol witness table for UInt;
      *(void *)(v71 + 64) = v72;
      *(void *)(v71 + 72) = 2;
      *(void *)(v71 + 136) = &type metadata for String;
      *(void *)(v71 + 144) = sub_10000DB88();
      *(void *)(v71 + 112) = v88;
      *(void *)(v71 + 120) = v56;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v70 = NSPredicate.init(format:_:)();
    }
  }
  else
  {
    if (!a5) {
      goto LABEL_13;
    }
    uint64_t v38 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000) == 0) {
      uint64_t v38 = v82 & 0xFFFFFFFFFFFFLL;
    }
    if (v38)
    {
      swift_bridgeObjectRetain();
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v39 = v90;
      swift_bridgeObjectRetain_n();
      char v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      uint64_t v43 = v88;
      if (v42)
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v92 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v91 = sub_10004C3A4(v43, v90, &v92);
        uint64_t v81 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v44 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v45 = v82;
        uint64_t v91 = sub_10004C3A4(v82, a5, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "fetchActiveCredentialsByDocTypeAndRegion docType %s region %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        unint64_t v39 = v90;
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v46 = v14;
        uint64_t v47 = v88;
        (*(void (**)(char *, uint64_t))(v87 + 8))(v46, v86);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v14, v86);
        uint64_t v47 = v43;
        uint64_t v45 = v82;
      }
      sub_100044DE0();
      sub_100006CC8(&qword_1001C0878);
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = xmmword_100176D20;
      *(void *)(v76 + 56) = &type metadata for UInt;
      *(void *)(v76 + 64) = &protocol witness table for UInt;
      *(void *)(v76 + 32) = 2;
      *(void *)(v76 + 96) = &type metadata for String;
      unint64_t v77 = sub_10000DB88();
      *(void *)(v76 + 72) = v47;
      *(void *)(v76 + 80) = v39;
      *(void *)(v76 + 136) = &type metadata for String;
      *(void *)(v76 + 144) = v77;
      *(void *)(v76 + 104) = v77;
      *(void *)(v76 + 112) = v45;
      *(void *)(v76 + 120) = a5;
      swift_bridgeObjectRetain();
      id v70 = NSPredicate.init(format:_:)();
      uint64_t v65 = v84;
      uint64_t v64 = v85;
      uint64_t v66 = v83;
    }
    else
    {
LABEL_13:
      uint64_t v81 = v24;
      defaultLogger()();
      unint64_t v57 = v90;
      swift_bridgeObjectRetain_n();
      unint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        uint64_t v92 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v61 = v88;
        uint64_t v91 = sub_10004C3A4(v88, v57, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_type_t v62 = v59;
        uint64_t v63 = v61;
        _os_log_impl((void *)&_mh_execute_header, v58, v62, "fetchActiveCredentialsByDocTypeAndRegion docType %s", v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v87 + 8))(v11, v86);
        uint64_t v65 = v84;
        uint64_t v64 = v85;
        uint64_t v66 = v83;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v11, v86);
        uint64_t v65 = v84;
        uint64_t v64 = v85;
        uint64_t v66 = v83;
        uint64_t v63 = v88;
      }
      sub_100044DE0();
      sub_100006CC8(&qword_1001C0878);
      uint64_t v73 = swift_allocObject();
      *(_OWORD *)(v73 + 16) = xmmword_1001767E0;
      *(void *)(v73 + 56) = &type metadata for UInt;
      *(void *)(v73 + 64) = &protocol witness table for UInt;
      *(void *)(v73 + 32) = 2;
      *(void *)(v73 + 96) = &type metadata for String;
      *(void *)(v73 + 104) = sub_10000DB88();
      *(void *)(v73 + 72) = v63;
      *(void *)(v73 + 80) = v57;
      swift_bridgeObjectRetain();
      id v70 = NSPredicate.init(format:_:)();
    }
  }
  [v89 setPredicate:v70];

  uint64_t v74 = NSManagedObjectContext.fetch<A>(_:)();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v64);
  return v74;
}

uint64_t sub_100168650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v5 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for DIPSignpost();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveCredentialsByDocType.getter();
  DIPSignpost.init(_:)();
  uint64_t v10 = type metadata accessor for StoredCredential();
  uint64_t v11 = (void *)static StoredCredential.fetchRequest()();
  uint64_t v12 = *(void *)(a1 + 16);
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  if (v12)
  {
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100176D20;
    v19[1] = v10;
    *(void *)(v13 + 56) = sub_100006CC8(&qword_1001C3C70);
    uint64_t v14 = sub_10016A640((unint64_t *)&qword_1001C4970, &qword_1001C3C70);
    *(void *)(v13 + 32) = a1;
    *(void *)(v13 + 96) = &type metadata for UInt;
    *(void *)(v13 + 104) = &protocol witness table for UInt;
    *(void *)(v13 + 64) = v14;
    *(void *)(v13 + 72) = 2;
    *(void *)(v13 + 136) = &type metadata for String;
    *(void *)(v13 + 144) = sub_10000DB88();
    *(void *)(v13 + 112) = v20;
    *(void *)(v13 + 120) = a3;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1001767E0;
    *(void *)(v15 + 56) = &type metadata for UInt;
    *(void *)(v15 + 64) = &protocol witness table for UInt;
    *(void *)(v15 + 32) = 2;
    *(void *)(v15 + 96) = &type metadata for String;
    *(void *)(v15 + 104) = sub_10000DB88();
    *(void *)(v15 + 72) = v20;
    *(void *)(v15 + 80) = a3;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v16];

  uint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v17;
}

uint64_t sub_100168964(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v3 - 8);
  uint64_t v20 = type metadata accessor for DIPSignpost();
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialInStates.getter();
  DIPSignpost.init(_:)();
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v19[1] = v1;
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_1000683D0(0, v7, 0);
    uint64_t v8 = v21;
    uint64_t v9 = (uint64_t *)(a1 + 32);
    unint64_t v10 = v21[2];
    do
    {
      uint64_t v12 = *v9++;
      uint64_t v11 = v12;
      uint64_t v21 = v8;
      unint64_t v13 = v8[3];
      if (v10 >= v13 >> 1)
      {
        sub_1000683D0(v13 > 1, v10 + 1, 1);
        uint64_t v8 = v21;
      }
      v8[2] = v10 + 1;
      v8[v10++ + 4] = v11;
      --v7;
    }
    while (v7);
  }
  type metadata accessor for StoredCredential();
  uint64_t v14 = (void *)static StoredCredential.fetchRequest()();
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1001768E0;
  *(void *)(v15 + 56) = sub_100006CC8(&qword_1001C4998);
  *(void *)(v15 + 64) = sub_10016A640((unint64_t *)&unk_1001C49A0, &qword_1001C4998);
  *(void *)(v15 + 32) = v8;
  uint64_t v16 = NSPredicate.init(format:_:)();
  [v14 setPredicate:v16];

  uint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
  return v17;
}

void *sub_100168C24(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  sub_1000683B0(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v2)
  {
    unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_7:
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v6 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1)) {
          goto LABEL_22;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1))
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
      sub_100006CC8((uint64_t *)&unk_1001C4960);
      sub_100006CC8((uint64_t *)&unk_1001C4980);
      if (!swift_dynamicCast())
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000683B0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        uint64_t v4 = _swiftEmptyArrayStorage;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000683B0(v8 > 1, v9 + 1, 1);
        uint64_t v4 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v11;
      if (v7 == v2) {
        return v4;
      }
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_7;
  }
  return v4;
}

void sub_100168E14(void *a1@<X8>)
{
  *a1 = &_swiftEmptySetSingleton;
}

unint64_t sub_100168E24(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_100168E68(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SESKeystore.KeyDesignation();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  uint64_t result = sub_100014C18(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

_OWORD *sub_100168F48(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10004DCD8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_100168FB4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_100168FFC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SESKeystore.KeyDesignation();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      BOOL v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10016A594((unint64_t *)&qword_1001C4990, (void (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for MockSESKeystore.MockDesignatedKey(0) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *BOOL v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100169348(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          BOOL v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100169520(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1001696F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SESKeystore.KeyDesignation();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10013C3B0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10009A0E0();
      goto LABEL_7;
    }
    sub_100097C58(v17, a3 & 1);
    unint64_t v24 = sub_10013C3B0(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100168E68(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21
      + *(void *)(*(void *)(type metadata accessor for MockSESKeystore.MockDesignatedKey(0) - 8) + 72) * v14;

  return sub_10016A5DC(a1, v22);
}

uint64_t sub_1001698E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100169AB8(a1, a2, a3, a4, (void (*)(void))sub_10009A5D0, (void (*)(void))sub_1000983F8);
}

uint64_t sub_10016990C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100169AB8(a1, a2, a3, a4, (void (*)(void))sub_10009AAA0, (void (*)(void))sub_100098B18);
}

_OWORD *sub_100169938(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10013C484(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10009AAAC();
      goto LABEL_7;
    }
    sub_100098B24(v15, a4 & 1);
    unint64_t v21 = sub_10013C484(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10000B9DC((uint64_t)v19);
    return sub_10004DCD8(a1, v19);
  }
LABEL_13:
  sub_100168F48(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_100169A8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100169AB8(a1, a2, a3, a4, (void (*)(void))sub_10009AC94, (void (*)(void))sub_100098E24);
}

uint64_t sub_100169AB8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_10013C484(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    char v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = sub_10013C484(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  unint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  *unint64_t v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v30;

  return swift_bridgeObjectRetain();
}

void (*sub_100169C44(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100169EFC(v6);
  v6[10] = sub_100169D64(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100169CF0;
}

void sub_100169CF0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  unint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_100169D64(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_10013C484(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_100169EAC;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10009AAA0();
      goto LABEL_7;
    }
    sub_100098B18(v16, a4 & 1);
    unint64_t v20 = sub_10013C484(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100169EAC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100169F38(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_100169EFC(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_100169F2C;
}

uint64_t sub_100169F2C(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t *sub_100169F38(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *result;
  if (*result)
  {
    uint64_t v9 = (void *)*a3;
    if (a2)
    {
      *(void *)(v9[7] + 8 * a4) = v8;
    }
    else
    {
      v9[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v10 = (void *)(v9[6] + 16 * a4);
      void *v10 = a5;
      v10[1] = a6;
      *(void *)(v9[7] + 8 * a4) = v8;
      uint64_t v11 = v9[2];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12)
      {
        __break(1u);
        return result;
      }
      v9[2] = v13;
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100169520(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

unint64_t sub_10016A010(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v56 - v7;
  unint64_t result = sub_10004AA18((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v65 = (void *)result;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return result;
  }
  uint64_t v11 = (void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v63 = 0x8000000100184CD0;
  long long v58 = xmmword_1001768E0;
  uint64_t v59 = v2;
  uint64_t v60 = a1;
  uint64_t v61 = v10;
  os_log_type_t v62 = v8;
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 8 * v12 + 32);
    if (!*(void *)(v13 + 16)) {
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_10013C484(0x6F69746974726170, 0xE90000000000006ELL);
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      defaultLogger()();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "missing partition; skipping", v36, 2u);
        swift_slowDealloc();
      }

      (*v11)(v6, v2);
      goto LABEL_4;
    }
    if (!*(void *)(v13 + 16)) {
      goto LABEL_21;
    }
    uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_10013C484(0xD000000000000014, v63);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v61;
      uint64_t v8 = v62;
LABEL_21:
      swift_bridgeObjectRelease();
      defaultLogger()();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "missing credential identifier; skipping", v39, 2u);
        swift_slowDealloc();
      }

      (*v11)(v8, v2);
      goto LABEL_4;
    }
    char v21 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v19);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v24 = v65;
    if (!v65[2]) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_10013C484(v17, v18);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      break;
    }
    unint64_t v57 = sub_100166880(v64, v17, v18);
    uint64_t v28 = *v27;
    if (*v27)
    {
      BOOL v29 = v27;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *BOOL v29 = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v28 = sub_1000D0D48(0, *((void *)v28 + 2) + 1, 1, v28);
        *BOOL v29 = v28;
      }
      unint64_t v32 = *((void *)v28 + 2);
      unint64_t v31 = *((void *)v28 + 3);
      if (v32 >= v31 >> 1)
      {
        uint64_t v28 = sub_1000D0D48((char *)(v31 > 1), v32 + 1, 1, v28);
        *BOOL v29 = v28;
      }
      a1 = v60;
      *((void *)v28 + 2) = v32 + 1;
      BOOL v33 = &v28[16 * v32];
      *((void *)v33 + 4) = v22;
      *((void *)v33 + 5) = v23;
      ((void (*)(void *, void))v57)(v64, 0);
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    ((void (*)(void *, void))v57)(v64, 0);
LABEL_37:
    swift_bridgeObjectRelease();
    a1 = v60;
LABEL_38:
    uint64_t v2 = v59;
    uint64_t v10 = v61;
    uint64_t v8 = v62;
LABEL_4:
    if (v10 == ++v12)
    {
      swift_bridgeObjectRelease();
      return (unint64_t)v65;
    }
  }
  sub_100006CC8(&qword_1001C12D8);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v58;
  *(void *)(v40 + 32) = v22;
  *(void *)(v40 + 40) = v23;
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  v64[0] = v24;
  unint64_t v43 = sub_10013C484(v17, v18);
  uint64_t v44 = v24[2];
  BOOL v45 = (v42 & 1) == 0;
  uint64_t v46 = v44 + v45;
  if (!__OFADD__(v44, v45))
  {
    char v47 = v42;
    if (v24[3] < v46)
    {
      sub_100098B18(v46, v41);
      unint64_t v48 = sub_10013C484(v17, v18);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_43;
      }
      unint64_t v43 = v48;
      os_log_type_t v50 = (void *)v64[0];
      if ((v47 & 1) == 0) {
        goto LABEL_34;
      }
LABEL_31:
      uint64_t v51 = v50[7];
      swift_bridgeObjectRelease();
      *(void *)(v51 + 8 * v43) = v40;
LABEL_36:
      uint64_t v65 = v50;
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    if (v41)
    {
      os_log_type_t v50 = (void *)v64[0];
      if (v42) {
        goto LABEL_31;
      }
    }
    else
    {
      sub_10009AAA0();
      os_log_type_t v50 = (void *)v64[0];
      if (v47) {
        goto LABEL_31;
      }
    }
LABEL_34:
    v50[(v43 >> 6) + 8] |= 1 << v43;
    uint64_t v52 = (uint64_t *)(v50[6] + 16 * v43);
    uint64_t *v52 = v17;
    v52[1] = v18;
    *(void *)(v50[7] + 8 * v43) = v40;
    uint64_t v53 = v50[2];
    BOOL v54 = __OFADD__(v53, 1);
    uint64_t v55 = v53 + 1;
    if (v54) {
      goto LABEL_42;
    }
    v50[2] = v55;
    swift_bridgeObjectRetain();
    goto LABEL_36;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10016A594(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016A5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016A640(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100016F64(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016A690()
{
  uint64_t v0 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  DIPError.Code.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000C3D8((uint64_t)v2);
    return -5000;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for DIPError.Code.missingEntitlement(_:)) {
    goto LABEL_8;
  }
  if (v11 == enum case for DIPError.Code.invalidStoredData(_:))
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5004;
  }
  if (v11 == enum case for DIPError.Code.idcsUnauthorizedPartition(_:))
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5002;
  }
  else if (v11 == enum case for DIPError.Code.idcsUnknownCredential(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5015;
  }
  else if (v11 == enum case for DIPError.Code.idcsInvalidPayload(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5101;
  }
  else if (v11 == enum case for DIPError.Code.idcsUnsupportedPayloadFormat(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5102;
  }
  else if (v11 == enum case for DIPError.Code.idcsIncorrectCredentialState(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5200;
  }
  else
  {
    if (v11 == enum case for DIPError.Code.idcsMissingPayload(_:)
      || v11 == enum case for DIPError.Code.idcsMissingKeySigningKey(_:)
      || v11 == enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:)
      || v11 == enum case for DIPError.Code.idcsMissingPresentmentKey(_:)
      || v11 == enum case for DIPError.Code.idcsInvalidPublicKey(_:))
    {
      goto LABEL_6;
    }
    if (v11 == enum case for DIPError.Code.idcsInvalidCredentialStateTransition(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -5201;
    }
    else if (v11 == enum case for DIPError.Code.idcsPublicKeyIdentifierAlreadyExists(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -5016;
    }
    else if (v11 == enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:) {
           || v11 == enum case for DIPError.Code.idcsUnknownIssuerAuthAlgorithm(_:)
    }
           || v11 == enum case for DIPError.Code.idcsMisformattedIssuerAuthSignature(_:)
           || v11 == enum case for DIPError.Code.idcsInvalidIssuerAuthSignature(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -5104;
    }
    else if (v11 == enum case for DIPError.Code.idcsPayloadRequiresAuth(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -5017;
    }
    else if (v11 == enum case for DIPError.Code.idcsInvalidPayloadAuth(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -5018;
    }
    else
    {
      int v12 = v11;
      int v13 = enum case for DIPError.Code.idcsPayloadPresentmentKeyMismatch(_:);
      unint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
      v14(v9, v3);
      if (v12 != v13)
      {
        v14(v7, v3);
        return -5000;
      }
      return -5105;
    }
  }
}

void *sub_10016ACD8(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  sub_1000658BC();
  uint64_t result = (void *)StringProtocol.components<A>(separatedBy:)();
  uint64_t v3 = result;
  if (result[2] != 2
    || ((uint64_t v4 = result[4],
         unint64_t v5 = result[5],
         uint64_t v6 = HIBYTE(v5) & 0xF,
         uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL,
         (v5 & 0x2000000000000000) != 0)
      ? (uint64_t v8 = HIBYTE(v5) & 0xF)
      : (uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL),
        !v8))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t)sub_10003E1D0(v4, v5, 10);
    LOBYTE(v4) = v27;
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_59;
    }
    for (uint64_t i = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          uint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
    {
      uint64_t v10 = (uint64_t)sub_10003E1B8(i, v7, 10);
      LOBYTE(v4) = v11 & 1;
LABEL_45:
      if (v4) {
        break;
      }
      if (v3[2] >= 2uLL)
      {
        uint64_t v21 = v3[6];
        unint64_t v22 = v3[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_10003D4BC(v21, v22);
        if (v23) {
          return 0;
        }
        else {
          return (void *)v10;
        }
      }
      __break(1u);
LABEL_59:
      ;
    }
    goto LABEL_50;
  }
  uint64_t v28 = result[4];
  uint64_t v29 = v5 & 0xFFFFFFFFFFFFFFLL;
  if (v4 == 43)
  {
    if (!v6) {
      goto LABEL_61;
    }
    if (v6 == 1 || (BYTE1(v4) - 48) > 9u) {
      goto LABEL_32;
    }
    uint64_t v10 = (BYTE1(v4) - 48);
    if (v6 != 2)
    {
      if ((BYTE2(v4) - 48) > 9u) {
        goto LABEL_32;
      }
      uint64_t v10 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
      uint64_t v12 = v6 - 3;
      if (v6 != 3)
      {
        int v13 = (unsigned __int8 *)&v28 + 3;
        while (1)
        {
          unsigned int v14 = *v13 - 48;
          if (v14 > 9) {
            goto LABEL_32;
          }
          uint64_t v15 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_32;
          }
          uint64_t v10 = v15 + v14;
          if (__OFADD__(v15, v14)) {
            goto LABEL_32;
          }
          LOBYTE(v4) = 0;
          ++v13;
          if (!--v12) {
            goto LABEL_45;
          }
        }
      }
    }
LABEL_44:
    LOBYTE(v4) = 0;
    goto LABEL_45;
  }
  if (v4 != 45)
  {
    if (!v6 || (v4 - 48) > 9u) {
      goto LABEL_32;
    }
    uint64_t v10 = (v4 - 48);
    if (v6 != 1)
    {
      if ((BYTE1(v4) - 48) > 9u) {
        goto LABEL_32;
      }
      uint64_t v10 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
      uint64_t v16 = v6 - 2;
      if (v6 != 2)
      {
        uint64_t v17 = (unsigned __int8 *)&v28 + 2;
        while (1)
        {
          unsigned int v18 = *v17 - 48;
          if (v18 > 9) {
            goto LABEL_32;
          }
          uint64_t v19 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_32;
          }
          uint64_t v10 = v19 + v18;
          if (__OFADD__(v19, v18)) {
            goto LABEL_32;
          }
          LOBYTE(v4) = 0;
          ++v17;
          if (!--v16) {
            goto LABEL_45;
          }
        }
      }
    }
    goto LABEL_44;
  }
  if (v6)
  {
    if (v6 != 1 && (BYTE1(v4) - 48) <= 9u)
    {
      if (v6 == 2)
      {
        LOBYTE(v4) = 0;
        uint64_t v10 = -(uint64_t)(BYTE1(v4) - 48);
        goto LABEL_45;
      }
      if ((BYTE2(v4) - 48) <= 9u)
      {
        uint64_t v10 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
        uint64_t v20 = v6 - 3;
        if (v6 == 3) {
          goto LABEL_44;
        }
        unint64_t v24 = (unsigned __int8 *)&v28 + 3;
        while (1)
        {
          unsigned int v25 = *v24 - 48;
          if (v25 > 9) {
            break;
          }
          uint64_t v26 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            break;
          }
          uint64_t v10 = v26 - v25;
          if (__OFSUB__(v26, v25)) {
            break;
          }
          LOBYTE(v4) = 0;
          ++v24;
          if (!--v20) {
            goto LABEL_45;
          }
        }
      }
    }
LABEL_32:
    uint64_t v10 = 0;
    LOBYTE(v4) = 1;
    goto LABEL_45;
  }
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}