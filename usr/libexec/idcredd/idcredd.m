int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v3 = type metadata accessor for Logger();
  v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  setDefaultLogger(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  byte_1001C4BB0 = isInternalBuild()();
  qword_1001C4BB8 = 0;
  type metadata accessor for DaemonInitializer();
  swift_allocObject();
  qword_1001C4BB8 = (uint64_t)sub_10012727C();
  swift_release();
  v8 = [self currentRunLoop];
  [v8 run];

  exit(0);
}

void type metadata accessor for DCPresentmentType(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for DCPresentmentMessageEncodingFormat(uint64_t a1)
{
}

void type metadata accessor for DCCredentialPayloadFormat(uint64_t a1)
{
}

void type metadata accessor for DCCredentialPayloadProtectionType(uint64_t a1)
{
}

void type metadata accessor for DCCredentialCryptoKeyType(uint64_t a1)
{
}

void type metadata accessor for DCCredentialCryptoKeyUsage(uint64_t a1)
{
}

void type metadata accessor for DCCredentialPayloadProtectionPolicy(uint64_t a1)
{
}

void type metadata accessor for DCCredentialPresentmentAuthPolicy(uint64_t a1)
{
}

void type metadata accessor for DCCredentialReaderAuthenticationPolicy(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

Swift::Int sub_100002E8C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100002ED4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100002F00()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_100002F44(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100002F58@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100002F68(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_100002F74@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100002F80(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100002F88@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100002F9C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100002FB0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_100002FC4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100002FF0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100003014(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100003028(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10000303C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100003050@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100003064(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100003078(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10000308C(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000030A0()
{
  return *v0 == 0;
}

uint64_t sub_1000030B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_1000030C8(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_1000030DC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

uint64_t sub_10000310C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100003498(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void type metadata accessor for DCCredentialAuthenticationTokenStatus(uint64_t a1)
{
}

void type metadata accessor for DCPresentmentTransportKeySpecification(uint64_t a1)
{
}

void type metadata accessor for DCPresentmentResponseStatus(uint64_t a1)
{
}

void type metadata accessor for SecTrust(uint64_t a1)
{
}

void type metadata accessor for COSEAlgorithm(uint64_t a1)
{
}

void type metadata accessor for COSEKeyEC2Curve(uint64_t a1)
{
}

void type metadata accessor for COSEKeyKTYType(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for DCCredentialAuthACLType(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for DCCredentialState(uint64_t a1)
{
}

void type metadata accessor for DCCredentialCompletenessResult(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
}

void type metadata accessor for DCPresentmentElementFallbackMode(uint64_t a1)
{
}

void type metadata accessor for DCPresentmentSessionResponseEncryptionMode(uint64_t a1)
{
}

void type metadata accessor for DCPresentmentSessionEncryptionMode(uint64_t a1)
{
}

void sub_1000032A0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000032E8()
{
  return sub_100003378(&qword_1001C05B8, type metadata accessor for DCCredentialCompletenessResult);
}

uint64_t sub_100003330()
{
  return sub_100003378(&qword_1001C05C0, type metadata accessor for DCCredentialCompletenessResult);
}

uint64_t sub_100003378(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000033C0()
{
  return sub_100003378(&qword_1001C05C8, type metadata accessor for DCCredentialCompletenessResult);
}

uint64_t sub_100003408()
{
  return sub_100003378(&qword_1001C05D0, type metadata accessor for DCCredentialCompletenessResult);
}

uint64_t sub_100003450()
{
  return sub_100003378(&qword_1001C05D8, type metadata accessor for DCCredentialState);
}

uint64_t sub_100003498(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t GenericPasswordKeychainWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SELegacyKeystore()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for SELegacyKeystore.KeyCreationResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_10000354C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t destroy for SELegacyKeystore.KeyCreationResult(void *a1)
{
  sub_1000035EC(a1[1], a1[2]);
  sub_1000035EC(a1[3], a1[4]);
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];

  return sub_1000035EC(v2, v3);
}

uint64_t sub_1000035EC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void *initializeWithCopy for SELegacyKeystore.KeyCreationResult(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  sub_10000354C(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  sub_10000354C(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  uint64_t v9 = a2[5];
  unint64_t v8 = a2[6];
  sub_10000354C(v9, v8);
  a1[5] = v9;
  a1[6] = v8;
  return a1;
}

void *assignWithCopy for SELegacyKeystore.KeyCreationResult(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_10000354C(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_1000035EC(v6, v7);
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_10000354C(v8, v9);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_1000035EC(v10, v11);
  uint64_t v13 = a2[5];
  unint64_t v12 = a2[6];
  sub_10000354C(v13, v12);
  uint64_t v14 = a1[5];
  unint64_t v15 = a1[6];
  a1[5] = v13;
  a1[6] = v12;
  sub_1000035EC(v14, v15);
  return a1;
}

__n128 initializeWithTake for SELegacyKeystore.KeyCreationResult(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SELegacyKeystore.KeyCreationResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000035EC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1000035EC(v6, v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v8;
  sub_1000035EC(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SELegacyKeystore.KeyCreationResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SELegacyKeystore.KeyCreationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SELegacyKeystore.KeyCreationResult()
{
  return &type metadata for SELegacyKeystore.KeyCreationResult;
}

uint64_t sub_100003884(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *unsigned int v3 = 0x8000000000000000;
    sub_100004094(a2, v9, isUniquelyReferenced_nonNull_native);
    *unsigned int v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100003980(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *unsigned int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000041B8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *unsigned int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100003B30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006CC8(&qword_1001C0768);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100003DB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006CC8(&qword_1001C0770);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100004094(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100003B30();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100004354();
      goto LABEL_14;
    }
    sub_1000046A0();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_1000041B8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100003DB4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000044EC();
      goto LABEL_22;
    }
    sub_100004904();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_100004354()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C0768);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000044EC()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C0770);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000046A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006CC8(&qword_1001C0768);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100004904()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006CC8(&qword_1001C0770);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_100004BB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v37 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int64_t v10 = (char *)v30 - v9;
  defaultLogger()();
  int64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 134349056;
    uint64_t v39 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SELegacyKeystore deleteKey keySlot = %{public}ld", v13, 0xCu);
    swift_slowDealloc();
  }

  unint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v10, v5);
  id v15 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
  id v16 = (id)SESLegacyKeyDelete();
  if (v16)
  {
    v33 = v14;
    v34 = v4;
    id v17 = v16;
    int64_t v18 = v37;
    defaultLogger()();
    id v19 = v17;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v31 = v5;
      unint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      id v32 = v15;
      uint64_t v39 = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      v30[1] = v23 + 4;
      swift_getErrorValue();
      uint64_t v25 = Error.localizedDescription.getter();
      uint64_t v38 = sub_10004C3A4(v25, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error from SESLegacyKeyDelete: %s", v23, 0xCu);
      swift_arrayDestroy();
      id v15 = v32;
      swift_slowDealloc();
      swift_slowDealloc();

      BOOL v27 = v37;
      uint64_t v28 = v31;
    }
    else
    {

      BOOL v27 = v18;
      uint64_t v28 = v5;
    }
    v33(v27, v28);
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, enum case for DIPError.Code.sesLegacyKeyDeleteError(_:), v36);
    id v29 = v19;
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
  }
}

unint64_t sub_10000507C()
{
  unint64_t result = qword_1001C0E20;
  if (!qword_1001C0E20)
  {
    type metadata accessor for DIPError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C0E20);
  }
  return result;
}

uint64_t sub_1000050D4(uint64_t a1, unint64_t a2, uint8_t *a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for DIPError.Code();
  uint64_t v73 = *(void *)(v12 - 8);
  uint64_t v74 = v12;
  __chkstk_darwin(v12);
  v75 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v82 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  v71 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v80 = (char *)&v69 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v69 - v19;
  defaultLogger()();
  sub_10000354C(a1, a2);
  sub_10000354C(a4, a5);
  id v81 = a6;
  id v21 = a6;
  sub_10000354C(a1, a2);
  sub_10000354C(a4, a5);
  id v79 = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  LODWORD(v76) = v23;
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v77 = v14;
  v78 = (void *)a5;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    v70 = (void *)swift_slowAlloc();
    id v84 = v70;
    *(_DWORD *)uint64_t v25 = 136315906;
    os_log_t v69 = v22;
    Swift::String v26 = Data.base16EncodedString()();
    uint64_t v83 = sub_10004C3A4(v26._countAndFlagsBits, (unint64_t)v26._object, (uint64_t *)&v84);
    v72 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(a1, a2);
    sub_1000035EC(a1, a2);
    *(_WORD *)(v25 + 12) = 2050;
    uint64_t v83 = (uint64_t)v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2080;
    Swift::String v27 = Data.base16EncodedString()();
    uint64_t v83 = sub_10004C3A4(v27._countAndFlagsBits, (unint64_t)v27._object, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(a4, a5);
    sub_1000035EC(a4, a5);
    *(_WORD *)(v25 + 32) = 2080;
    uint64_t v83 = (uint64_t)v81;
    sub_100006CC8(&qword_1001C0778);
    uint64_t v28 = Optional.debugDescription.getter();
    uint64_t v83 = sub_10004C3A4(v28, v29, (uint64_t *)&v84);
    a3 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v30 = v79;

    swift_bridgeObjectRelease();
    os_log_t v31 = v69;
    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v76, "SELegacyKeystore signDigest digest = %s, keySlot = %{public}ld, externalizedLAContext = %s, seAccessEndpoint = %s", (uint8_t *)v25, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = v77;
    swift_slowDealloc();
  }
  else
  {
    sub_1000035EC(a1, a2);
    sub_1000035EC(a1, a2);
    sub_1000035EC(a4, a5);
    sub_1000035EC(a4, a5);

    id v30 = v79;
  }
  v76 = *(void (**)(char *, uint64_t))(v82 + 8);
  v76(v20, v14);
  id v32 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a3];
  if (v81)
  {
    id v33 = v30;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v35 = Data._bridgeToObjectiveC()().super.isa;
    id v84 = 0;
    id v36 = (id)SESLegacyKeySignPrecomputedDigestWithListenerEndpoint();
  }
  else
  {
    Class v37 = Data._bridgeToObjectiveC()().super.isa;
    Class v38 = Data._bridgeToObjectiveC()().super.isa;
    id v84 = 0;
    id v36 = (id)SESLegacyKeySignPrecomputedDigest();
  }
  id v39 = v32;
  id v40 = v84;
  v41 = v80;
  if (v40)
  {
    uint64_t v42 = (uint64_t)v40;
    id v81 = v36;
    id v43 = v40;
    defaultLogger()();
    id v44 = v43;
    v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v78 = (void *)swift_slowAlloc();
      id v84 = v78;
      *(_DWORD *)v47 = 136446210;
      v72 = v47 + 4;
      id v48 = [v44 debugDescription];
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v79 = v39;
      unint64_t v51 = v50;

      uint64_t v83 = sub_10004C3A4(v49, v51, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v39 = v79;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error from SESLegacyKeySignPrecomputedDigest: %{public}s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v52 = v80;
      uint64_t v53 = v77;
    }
    else
    {

      v52 = v41;
      uint64_t v53 = v14;
    }
    v76(v52, v53);
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v75, enum case for DIPError.Code.sesLegacyKeySignError(_:), v74);
    id v67 = v44;
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    id v39 = v81;
    goto LABEL_15;
  }
  if (!v36)
  {
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v75, enum case for DIPError.Code.sesLegacyKeySignError(_:), v74);
    uint64_t v42 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_15:

    return v42;
  }
  id v54 = v36;
  id v55 = [v54 signature];
  uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v57 = v56;

  v58 = v71;
  defaultLogger()();
  sub_10000354C(v42, v57);
  sub_10000354C(v42, v57);
  v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    id v81 = v54;
    v61 = (uint8_t *)swift_slowAlloc();
    v62 = (void *)swift_slowAlloc();
    id v79 = v32;
    id v84 = v62;
    *(_DWORD *)v61 = 136315138;
    Swift::String v63 = Data.base16EncodedString()();
    uint64_t v83 = sub_10004C3A4(v63._countAndFlagsBits, (unint64_t)v63._object, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v42, v57);
    sub_1000035EC(v42, v57);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "SESLegacyKeySignPrecomputedDigest signature %s", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v64 = v81;
    v65 = v71;
    uint64_t v66 = v77;
  }
  else
  {

    sub_1000035EC(v42, v57);
    sub_1000035EC(v42, v57);

    v65 = v58;
    uint64_t v66 = v14;
  }
  v76(v65, v66);
  return v42;
}

uint64_t sub_100005BA4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  id v79 = a3;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v72 = *(void *)(v11 - 8);
  uint64_t v73 = v11;
  __chkstk_darwin(v11);
  uint64_t v74 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  v71 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v78 = (char *)&v66 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v66 - v19;
  defaultLogger()();
  sub_10000354C(a1, a2);
  sub_10000354C(a4, a5);
  id v21 = a6;
  sub_10000354C(a1, a2);
  sub_10000354C(a4, a5);
  v80 = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  LODWORD(v75) = v23;
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v76 = v14;
  uint64_t v77 = v13;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    os_log_t v69 = swift_slowAlloc();
    uint64_t v82 = v69;
    *(_DWORD *)uint64_t v25 = 136315906;
    os_log_t v68 = v22;
    Swift::String v26 = Data.base16EncodedString()();
    uint64_t v81 = sub_10004C3A4(v26._countAndFlagsBits, (unint64_t)v26._object, (uint64_t *)&v82);
    uint64_t v67 = (uint64_t)a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(a1, a2);
    sub_1000035EC(a1, a2);
    *(_WORD *)(v25 + 12) = 2050;
    uint64_t v81 = (uint64_t)v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2080;
    Swift::String v27 = Data.base16EncodedString()();
    uint64_t v81 = sub_10004C3A4(v27._countAndFlagsBits, (unint64_t)v27._object, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(a4, a5);
    sub_1000035EC(a4, a5);
    *(_WORD *)(v25 + 32) = 2080;
    uint64_t v81 = v67;
    sub_100006CC8(&qword_1001C0778);
    uint64_t v28 = Optional.debugDescription.getter();
    uint64_t v81 = sub_10004C3A4(v28, v29, (uint64_t *)&v82);
    uint64_t v13 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v30 = v80;

    swift_bridgeObjectRelease();
    os_log_t v31 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v75, "SELegacyKeystore signDigestSidv digest = %s, keySlot = %{public}ld, externalizedLAContext = %s, seAccessEndpoint = %s", (uint8_t *)v25, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = v76;
    swift_slowDealloc();
  }
  else
  {
    sub_1000035EC(a1, a2);
    sub_1000035EC(a1, a2);
    sub_1000035EC(a4, a5);
    sub_1000035EC(a4, a5);

    os_log_t v31 = v80;
  }

  v75 = *(void (**)(char *, uint64_t))(v14 + 8);
  v75(v20, v13);
  id v32 = objc_allocWithZone((Class)NSNumber);
  id v33 = [v32 initWithInteger:v79];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v35 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v82 = 0;
  id v36 = (char *)(id)SESLegacyKeySignPrecomputedWithIDV();

  if (v82)
  {
    v80 = v82;
    Class v37 = v82;
    Class v38 = v78;
    defaultLogger()();
    id v39 = v37;
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      id v43 = swift_slowAlloc();
      id v79 = v33;
      uint64_t v82 = v43;
      v71 = v36;
      *(_DWORD *)uint64_t v42 = 136446210;
      v70 = v42 + 4;
      id v44 = [v39 debugDescription];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      uint64_t v81 = sub_10004C3A4(v45, v47, (uint64_t *)&v82);
      id v36 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Error from SESLegacyKeySignPrecomputedWithIDV: %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      id v33 = v79;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v77;
      uint64_t v49 = v78;
    }
    else
    {

      uint64_t v49 = v38;
      uint64_t v48 = v13;
    }
    v75(v49, v48);
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, enum case for DIPError.Code.sesLegacyKeySignError(_:), v73);
    id v64 = v39;
    uint64_t v52 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_12;
  }
  if (!v36)
  {
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, enum case for DIPError.Code.sesLegacyKeySignError(_:), v73);
    uint64_t v52 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_12:

    return v52;
  }
  unint64_t v50 = v36;
  id v51 = [v50 signature];
  uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v54 = v53;

  id v55 = v71;
  defaultLogger()();
  sub_10000354C(v52, v54);
  sub_10000354C(v52, v54);
  unint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = swift_slowAlloc();
    id v79 = v33;
    uint64_t v82 = v59;
    *(_DWORD *)v58 = 136315138;
    v80 = v50;
    Swift::String v60 = Data.base16EncodedString()();
    uint64_t v81 = sub_10004C3A4(v60._countAndFlagsBits, (unint64_t)v60._object, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v52, v54);
    sub_1000035EC(v52, v54);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "SESLegacyKeySignPrecomputedWithIDV signature %s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v61 = v80;
    uint64_t v62 = v77;
    Swift::String v63 = v71;
  }
  else
  {

    sub_1000035EC(v52, v54);
    sub_1000035EC(v52, v54);

    Swift::String v63 = v55;
    uint64_t v62 = v13;
  }
  v75(v63, v62);
  return v52;
}

void sub_1000065F8(void *a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  __chkstk_darwin(v7);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  int64_t v10 = (char *)v39 - v9;
  id v45 = v1;
  uint64_t v46 = v11;
  if (a1)
  {
    uint64_t v12 = (char *)v39 - v9;
    id v48 = 0;
    id v13 = a1;
    id v14 = (id)SESLegacyKeyGetOccupiedSlotsWithListenerEndpoint();
    id v15 = v48;
    if (v14)
    {
      uint64_t v16 = v14;
      sub_100006C88();
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v18 = v15;

      int64_t v10 = v12;
      if (!v18) {
        goto LABEL_14;
      }
    }
    else
    {
      id v18 = v48;

      unint64_t v17 = 0;
      if (!v18) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    id v48 = 0;
    id v19 = (id)SESLegacyKeyGetOccupiedSlots();
    id v20 = v48;
    if (v19)
    {
      id v21 = v19;
      sub_100006C88();
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v18 = v20;

      if (!v18)
      {
LABEL_14:
        if (!v17)
        {
          (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.sesLegacyKeyGetOccupiedSlotsError(_:), v3);
          sub_100102620((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10000507C();
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          return;
        }
        id v48 = &_swiftEmptySetSingleton;
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v35) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v35 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v35)
          {
LABEL_17:
            if (v35 < 1) {
              __break(1u);
            }
            for (uint64_t i = 0; i != v35; ++i)
            {
              if ((v17 & 0xC000000000000001) != 0) {
                id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v37 = *(id *)(v17 + 8 * i + 32);
              }
              Class v38 = v37;
              sub_100003884(&v47, (uint64_t)[v37 integerValue]);
            }
          }
        }
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      id v18 = v48;
      unint64_t v17 = 0;
      if (!v18) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v43 = v7;
  uint64_t v44 = v4;
  id v45 = v18;
  id v22 = v18;
  swift_bridgeObjectRelease();
  defaultLogger()();
  id v23 = v22;
  BOOL v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    Swift::String v26 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v41 = (void *)swift_slowAlloc();
    id v48 = v41;
    uint64_t v42 = v10;
    *(_DWORD *)Swift::String v26 = 136446210;
    v39[1] = v26 + 4;
    id v40 = v26;
    Swift::String v27 = v6;
    id v28 = [v23 debugDescription];
    uint64_t v29 = v3;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    uint64_t v6 = v27;
    uint64_t v33 = v30;
    uint64_t v3 = v29;
    uint64_t v47 = sub_10004C3A4(v33, v32, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error from SESLegacyKeyGetOccupiedSlots: %{public}s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v43);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v43);
  }
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v6, enum case for DIPError.Code.sesLegacyKeyGetOccupiedSlotsError(_:), v3);
  id v34 = v23;
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
}

unint64_t sub_100006C88()
{
  unint64_t result = qword_1001C0760;
  if (!qword_1001C0760)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C0760);
  }
  return result;
}

uint64_t sub_100006CC8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006D0C()
{
  if (qword_1001C03C0 != -1) {
    swift_once();
  }
  v0 = *(os_unfair_lock_s **)(qword_1001C4BD0 + 16);
  uint64_t v1 = (uint64_t *)&v0[4];
  uint64_t v2 = v0 + 18;
  os_unfair_lock_lock(v0 + 18);
  sub_100006E24(v1, v9);
  os_unfair_lock_unlock(v2);
  uint64_t v3 = (uint64_t (*)(uint64_t))v9[1];
  uint64_t v4 = v9[3];
  uint64_t v5 = v9[5];
  swift_release();
  sub_100006E40(v4);
  uint64_t v6 = sub_100006E40(v5);
  if (v3)
  {
    uint64_t v7 = v3(v6);
    sub_100006E40((uint64_t)v3);
    return v7;
  }
  else
  {
    type metadata accessor for SELegacyKeystore();
    return swift_allocObject();
  }
}

uint64_t sub_100006E24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100017048(a1, a2);
}

uint64_t sub_100006E40(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100006E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_100006F18, 0, 0);
}

uint64_t sub_100006F18()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_allocObject();
  v0[10] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  uint64_t v6 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v1, v6, v7);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100007068;
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[2];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v11, v9, sub_100007584, v5, v10);
}

uint64_t sub_100007068()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    return _swift_task_switch(sub_10000722C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10000722C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100007290()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v4 = 0;
  if ([v1 save:&v4]) {
    return v4;
  }
  id v3 = v4;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_100007338()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IDCSAsyncDataContext()
{
  return self;
}

uint64_t sub_100007394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100007458;
  return sub_100006E50(a1, a2, a3, a4);
}

uint64_t sub_100007458()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10000754C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100007584()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

void *sub_1000075AC(uint64_t a1, void *a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)sub_100163764(a1, a2);
  if (!v3)
  {
    uint64_t v4 = v11;
    if (!v11)
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD000000000000019;
      unint64_t v28 = 0x8000000100179CE0;
      v18._countAndFlagsBits = a1;
      v18._object = a2;
      String.append(_:)(v18);
      uint64_t v4 = (void *)v27;
      (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.idcsUnknownCredential(_:), v7);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000971C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return v4;
    }
    id v13 = [v11 partition];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      if (byte_1001C4BB0 == 1 && (sub_100007A0C(42, 0xE100000000000000, *(void *)(v2 + 16)) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v4;
      }
      char v19 = sub_100007A0C(v15, v17, *(void *)(v2 + 16));
      swift_bridgeObjectRelease();
      if (v19) {
        return v4;
      }
    }
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    id v20 = [v4 partition:@"itrary" :0xEA0000000000206ELL];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      BOOL v24 = v23;
    }
    else
    {
      BOOL v24 = (void *)0xE500000000000000;
      uint64_t v22 = 0x3E6C696E3CLL;
    }
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD000000000000023;
    v26._object = (void *)0x8000000100179DA0;
    String.append(_:)(v26);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v7);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000971C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v4;
}

uint64_t sub_100007A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_100007B44(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100007C10(void *a1)
{
  if (byte_1001C4BB0 == 1 && (sub_100007A0C(42, 0xE100000000000000, *(void *)(v1 + 16)) & 1) != 0) {
    return 1;
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 16);
    if (*(void *)(v4 + 16))
    {
      Swift::String v25 = a1 + 4;
      uint64_t v6 = a1[4];
      uint64_t v5 = a1[5];
      uint64_t v7 = v4 + 56;
      swift_bridgeObjectRetain();
      for (uint64_t i = 1; ; ++i)
      {
        swift_bridgeObjectRetain();
        Hasher.init(_seed:)();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
        unint64_t v11 = v9 & ~v10;
        if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          break;
        }
        uint64_t v12 = *(void *)(v4 + 48);
        id v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v6 && v13[1] == v5;
        if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v15 = ~v10;
          unint64_t v16 = (v11 + 1) & ~v10;
          if (((*(void *)(v7 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
            break;
          }
          BOOL v17 = (void *)(v12 + 16 * v16);
          BOOL v18 = *v17 == v6 && v17[1] == v5;
          if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            for (unint64_t j = v16 + 1; ; unint64_t j = v21 + 1)
            {
              unint64_t v21 = j & v15;
              if (((*(void *)(v7 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0) {
                break;
              }
              uint64_t v22 = (void *)(v12 + 16 * v21);
              BOOL v23 = *v22 == v6 && v22[1] == v5;
              if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_18;
              }
            }
            break;
          }
        }
LABEL_18:
        swift_bridgeObjectRelease();
        if (i == v3)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        if (!*(void *)(v4 + 16)) {
          goto LABEL_32;
        }
        char v19 = &v25[2 * i];
        uint64_t v6 = *v19;
        uint64_t v5 = v19[1];
      }
      swift_bridgeObjectRelease();
LABEL_32:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t sub_100007E14(void *a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[a1 state];
  if (result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (result != 2)
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsIncorrectCredentialState(_:), v2);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000971C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100008038(Swift::UInt a1, uint64_t a2)
{
  sub_100006CC8(&qword_1001C0830);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001767E0;
  *(void *)(inited + 32) = 2;
  *(void *)(inited + 40) = &off_1001B3650;
  *(void *)(inited + 48) = 3;
  *(void *)(inited + 56) = &off_1001B3680;
  unint64_t v5 = sub_10004C994((void *)inited);
  swift_setDeallocating();
  sub_100006CC8(&qword_1001C0838);
  swift_arrayDestroy();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_10013C2D8(a1), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v9 = sub_10010EE14(a2, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_100008148(uint64_t a1, uint8_t *a2, uint8_t *a3)
{
  v78 = a2;
  uint64_t v77 = a3;
  uint64_t v73 = type metadata accessor for DIPError.Code();
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C0840);
  __chkstk_darwin(v4 - 8);
  uint64_t v74 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CredentialKeyUsage();
  uint64_t v75 = *(void *)(v6 - 8);
  uint64_t v76 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v69 - v10;
  uint64_t v79 = type metadata accessor for Logger();
  uint64_t v84 = *(void *)(v79 - 8);
  uint64_t v12 = __chkstk_darwin(v79);
  BOOL v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  BOOL v17 = (char *)&v69 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  id v20 = (char *)&v69 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  BOOL v23 = (char *)&v69 - v22;
  __chkstk_darwin(v21);
  Swift::String v25 = (char *)&v69 - v24;
  id v26 = [self standardUserDefaults];
  v27._countAndFlagsBits = 0xD00000000000001ELL;
  v27._object = (void *)0x8000000100179E70;
  Swift::Bool v28 = NSUserDefaults.internalBool(forKey:)(v27);

  if (v28)
  {
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Treating payload as accessible due to internal defaults setting", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v84 + 8))(v25, v79);
    goto LABEL_28;
  }
  uint64_t v33 = v76;
  unint64_t v32 = v77;
  uint64_t v34 = v75;
  v70 = v17;
  if (sub_100163270((unint64_t)v78))
  {
    if (!v32)
    {
      defaultLogger()();
      unint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Decryption key required but not available, can't proceed with processing", v52, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v84 + 8))(v14, v79);
      uint64_t v82 = 0;
      unint64_t v83 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      uint64_t v82 = 0xD000000000000014;
      unint64_t v83 = 0x8000000100179E90;
      id v53 = (id)DCCredentialPayloadFormatToString();
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v56 = v55;

      v57._countAndFlagsBits = v54;
      v57._object = v56;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v71 + 104))(v72, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v73);
      char v49 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000971C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return v49 & 1;
    }
    v78 = v32;
    id v35 = [(uint8_t *)v78 usage];
    id v36 = v11;
    id v37 = v9;
    if (v35)
    {
      Class v38 = v35;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v39 = (uint64_t)v74;
      CredentialKeyUsage.init(rawValue:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v39, 1, v33) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v36, v39, v33);
        id v40 = *(void (**)(char *, void, uint64_t))(v34 + 104);
LABEL_18:
        v40(v9, enum case for CredentialKeyUsage.deviceEncryptionAuthRequired(_:), v33);
        sub_10000971C(&qword_1001C0848, (void (*)(uint64_t))&type metadata accessor for CredentialKeyUsage);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v82 == v80 && v83 == v81)
        {
          swift_bridgeObjectRelease_n();
          v58 = *(void (**)(char *, uint64_t))(v34 + 8);
          v58(v9, v33);
          v58(v36, v33);
        }
        else
        {
          char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::String v60 = *(void (**)(char *, uint64_t))(v34 + 8);
          v60(v37, v33);
          v60(v36, v33);
          if ((v59 & 1) == 0)
          {
            id v64 = v70;
            defaultLogger()();
            v65 = Logger.logObject.getter();
            os_log_type_t v66 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v65, v66))
            {
              uint64_t v67 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v67 = 0;
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "Credential decryption key does not require auth, can proceed with processing", v67, 2u);
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v79);
            goto LABEL_28;
          }
        }
        defaultLogger()();
        v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v61, v62))
        {
          Swift::String v63 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v63 = 0;
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "Credential decryption key requires auth, can't proceed with processing", v63, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v84 + 8))(v20, v79);
        char v49 = 0;
        return v49 & 1;
      }
      sub_100008BA0(v39);
    }
    id v40 = *(void (**)(char *, void, uint64_t))(v34 + 104);
    v40(v36, enum case for CredentialKeyUsage.invalid(_:), v33);
    goto LABEL_18;
  }
  os_log_type_t v41 = v23;
  defaultLogger()();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v42, v43))
  {

    (*(void (**)(char *, uint64_t))(v84 + 8))(v41, v79);
LABEL_28:
    char v49 = 1;
    return v49 & 1;
  }
  uint64_t v44 = (uint8_t *)swift_slowAlloc();
  uint64_t v82 = swift_slowAlloc();
  *(_DWORD *)uint64_t v44 = 136315138;
  uint64_t v77 = v44 + 4;
  id v45 = (id)DCCredentialPayloadFormatToString();
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v48 = v47;

  uint64_t v80 = sub_10004C3A4(v46, v48, &v82);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v42, v43, "Payload format %s does not require decryption, can proceed with processing", v44, 0xCu);
  char v49 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v84 + 8))(v41, v79);
  return v49 & 1;
}

uint64_t sub_100008BA0(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C0840);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100008C00(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v68 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v68 - 8);
  uint64_t v5 = __chkstk_darwin(v68);
  char v59 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::String v63 = (char *)&v58 - v8;
  __chkstk_darwin(v7);
  v58 = (char *)&v58 - v9;
  uint64_t v10 = type metadata accessor for SHA256();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = (void *)type metadata accessor for SHA256Digest();
  uint64_t v14 = *(v70 - 1);
  __chkstk_darwin(v70);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = (unint64_t)sub_1000F58F8();
  sub_10000971C(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  uint64_t v67 = (uint8_t *)v17;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      unint64_t v69 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10000354C(a2, a3);
      sub_100063458((int)a2, a2 >> 32);
      sub_1000035EC(a2, a3);
      unint64_t v17 = (unint64_t)v67;
      goto LABEL_9;
    case 2uLL:
      uint64_t v18 = *(void *)(a2 + 16);
      unint64_t v69 = *(void *)(a2 + 24);
      sub_10000354C(a2, a3);
      swift_retain();
      swift_retain();
      sub_100063458(v18, v69);
      unint64_t v17 = (unint64_t)v67;
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      *(uint64_t *)((char *)&v71._countAndFlagsBits + 6) = 0;
      v71._uint64_t countAndFlagsBits = 0;
      goto LABEL_7;
    default:
      v71._uint64_t countAndFlagsBits = a2;
      LOWORD(v71._object) = a3;
      BYTE2(v71._object) = BYTE2(a3);
      BYTE3(v71._object) = BYTE3(a3);
      BYTE4(v71._object) = BYTE4(a3);
      BYTE5(v71._object) = BYTE5(a3);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_8:
      sub_1000035EC(a2, a3);
LABEL_9:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      sub_10000971C(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v19 = v70;
      uint64_t v20 = Digest.data.getter();
      unint64_t v69 = v21;
      (*(void (**)(char *, void *))(v14 + 8))(v16, v19);
      if (v17 >> 62) {
        goto LABEL_37;
      }
      uint64_t v23 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      break;
  }
  while (1)
  {
    uint64_t v24 = v63;
    unint64_t v25 = v69;
    if (!v23) {
      break;
    }
    v65 = (void (**)(char *, uint64_t))(v60 + 8);
    unint64_t v66 = v17 & 0xC000000000000001;
    uint64_t v26 = 4;
    *(void *)&long long v22 = 136315394;
    long long v62 = v22;
    v61 = (char *)&type metadata for Any + 8;
    unint64_t v64 = v23;
    while (1)
    {
      Swift::Bool v28 = v66 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v17 + 8 * v26);
      uint64_t v29 = v28;
      unint64_t v17 = v26 - 3;
      if (__OFADD__(v26 - 4, 1)) {
        break;
      }
      id v30 = [v28 ingestionHash];
      v70 = v29;
      if (v30)
      {
        unint64_t v31 = v30;
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v33;

        sub_10000354C(v32, v34);
        sub_10000354C(v20, v25);
        LOBYTE(v31) = sub_100147900(v32, v34, v20, v25);
        sub_1000035EC(v20, v25);
        sub_1000035EC(v32, v34);
        if (v31)
        {
          swift_bridgeObjectRelease();
          os_log_type_t v51 = v58;
          defaultLogger()();
          sub_10000354C(v32, v34);
          sub_10000354C(v32, v34);
          uint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v52, v53))
          {
            id v55 = (uint8_t *)swift_slowAlloc();
            uint64_t v72 = swift_slowAlloc();
            *(_DWORD *)id v55 = 136315138;
            uint64_t v67 = v55 + 4;
            Swift::String v71 = Data.base16EncodedString()();
            sub_100006CC8(&qword_1001C0860);
            uint64_t v56 = String.init<A>(describing:)();
            v71._uint64_t countAndFlagsBits = sub_10004C3A4(v56, v57, &v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000035EC(v32, v34);
            sub_1000035EC(v32, v34);
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "doesPayloadDataMatchIngestionHash -> new payload hash matches stored payload hash %s", v55, 0xCu);
            uint64_t v49 = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_1000035EC(v32, v34);
            sub_1000035EC(v20, v69);
            (*v65)(v51, v68);
          }
          else
          {
            sub_1000035EC(v20, v25);
            sub_1000035EC(v32, v34);
            sub_1000035EC(v32, v34);
            sub_1000035EC(v32, v34);

            (*v65)(v51, v68);
            return 1;
          }
          return v49;
        }
      }
      else
      {
        sub_10000354C(v20, v25);
        unint64_t v34 = 0xF000000000000000;
        sub_100009764(0, 0xF000000000000000);
        sub_100009764(v20, v25);
        uint64_t v32 = 0;
      }
      defaultLogger()();
      sub_10000354C(v20, v25);
      sub_100009778(v32, v34);
      sub_10000354C(v20, v25);
      sub_100009778(v32, v34);
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = v62;
        Swift::String v38 = Data.base16EncodedString()();
        *(void *)(v37 + 4) = sub_10004C3A4(v38._countAndFlagsBits, (unint64_t)v38._object, &v72);
        unint64_t v39 = v69;
        swift_bridgeObjectRelease();
        sub_1000035EC(v20, v39);
        sub_1000035EC(v20, v39);
        *(_WORD *)(v37 + 12) = 2080;
        if (v34 >> 60 == 15)
        {
          uint64_t countAndFlagsBits = 0;
          object = 0;
        }
        else
        {
          Swift::String v42 = Data.base16EncodedString()();
          object = v42._object;
          uint64_t countAndFlagsBits = v42._countAndFlagsBits;
        }
        v71._uint64_t countAndFlagsBits = countAndFlagsBits;
        v71._object = object;
        sub_100006CC8(&qword_1001C0860);
        uint64_t v43 = String.init<A>(describing:)();
        *(void *)(v37 + 14) = sub_10004C3A4(v43, v44, &v72);
        swift_bridgeObjectRelease();
        sub_100009764(v32, v34);
        sub_100009764(v32, v34);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "doesPayloadDataMatchIngestionHash -> new payload hash %s does not match stored payload hash %s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100009764(v32, v34);
        uint64_t v24 = v63;
        (*v65)(v63, v68);
        unint64_t v25 = v69;
      }
      else
      {
        sub_100009764(v32, v34);

        sub_1000035EC(v20, v25);
        sub_1000035EC(v20, v25);
        sub_100009764(v32, v34);
        sub_100009764(v32, v34);

        (*v65)(v24, v68);
      }
      ++v26;
      BOOL v27 = v17 == v64;
      unint64_t v17 = (unint64_t)v67;
      if (v27) {
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_28:
  swift_bridgeObjectRelease();
  id v45 = v59;
  defaultLogger()();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    unint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "doesPayloadDataMatchIngestionHash -> the new payload hash does not match any of stored payload hash.", v48, 2u);
    swift_slowDealloc();

    sub_1000035EC(v20, v25);
  }
  else
  {
    sub_1000035EC(v20, v25);
  }
  (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v68);
  return 0;
}

uint64_t sub_10000971C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009764(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000035EC(a1, a2);
  }
  return a1;
}

uint64_t sub_100009778(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000354C(a1, a2);
  }
  return a1;
}

id sub_10000978C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v125 = type metadata accessor for DIPError();
  uint64_t v121 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  v120 = (char *)v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v122 = *(void *)(v8 - 8);
  uint64_t v123 = v8;
  __chkstk_darwin(v8);
  v124 = (char *)v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for SHA256();
  v119 = *(void (**)(char *, uint64_t))(v128 - 8);
  __chkstk_darwin(v128);
  v130 = ((char *)v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = type metadata accessor for SHA256Digest();
  uint64_t v11 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  v126 = (char *)v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  v129 = (char *)v103 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  long long v22 = (char *)v103 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unint64_t v25 = (char *)v103 - v24;
  __chkstk_darwin(v23);
  id v30 = (char *)v103 - v29;
  if (a4 == 1)
  {
    v114 = v28;
    v118 = v27;
    v110 = v26;
    defaultLogger()();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "CredentialDecryptionKeyFinder finding ECv3 key", v39, 2u);
      swift_slowDealloc();
    }

    unint64_t v34 = *(void (**)(char *, uint64_t))(v14 + 8);
    v34(v25, v13);
    uint64_t v35 = sub_10000B1D0(a2, a3);
  }
  else
  {
    if (a4 != 2)
    {
      defaultLogger()();
      unint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        unint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "CredentialDecryptionKeyFinder payload does not require a decryption key; skipping key search",
          v50,
          2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
      return 0;
    }
    v114 = v28;
    v118 = v27;
    v110 = v26;
    defaultLogger()();
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "CredentialDecryptionKeyFinder finding HPKE key", v33, 2u);
      swift_slowDealloc();
    }

    unint64_t v34 = *(void (**)(char *, uint64_t))(v14 + 8);
    v34(v30, v13);
    uint64_t v35 = sub_10000AB20(a2, a3);
  }
  unint64_t v40 = v36;
  uint64_t v115 = v35;
  unint64_t v41 = (unint64_t)sub_1000F5AC0();
  uint64_t v52 = v41;
  v103[0] = v14;
  if (v41 >> 62) {
    goto LABEL_59;
  }
  uint64_t v53 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v54 = v128;
    uint64_t v113 = v13;
    if (!v53)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      v78 = v114;
      defaultLogger()();
      uint64_t v79 = v115;
      sub_10000354C(v115, v40);
      sub_10000354C(v79, v40);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc();
        v132[0] = swift_slowAlloc();
        v114 = v78;
        *(_DWORD *)uint64_t v82 = 136315138;
        Swift::String v83 = Data.base16EncodedString()();
        uint64_t v131 = sub_10004C3A4(v83._countAndFlagsBits, (unint64_t)v83._object, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000035EC(v79, v40);
        sub_1000035EC(v79, v40);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "CredentialDecryptionKeyFinder could not find key with matching HPKE fingerprint %s)", v82, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000035EC(v79, v40);
        uint64_t v84 = v114;
        uint64_t v85 = v113;
      }
      else
      {
        sub_1000035EC(v79, v40);
        sub_1000035EC(v79, v40);
        sub_1000035EC(v79, v40);

        uint64_t v84 = v78;
        uint64_t v85 = v13;
      }
      v34(v84, v85);
      return 0;
    }
    unint64_t v112 = v52 & 0xC000000000000001;
    v107 = (void (**)(uint64_t, uint64_t))((char *)v119 + 8);
    v106 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v111 = v103[0] + 8;
    uint64_t v55 = 4;
    *(void *)&long long v42 = 136315394;
    long long v104 = v42;
    v103[1] = (char *)&type metadata for Any + 8;
    unint64_t v109 = v40;
    uint64_t v108 = v52;
    uint64_t v105 = v53;
LABEL_18:
    id v56 = v112 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v52 + 8 * v55);
    unint64_t v57 = v56;
    uint64_t v11 = (uint64_t)v130;
    if (!__OFADD__(v55 - 4, 1)) {
      break;
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v116 = v55 - 3;
  id v58 = [v56 publicKey];
  if (!v58)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v122 + 104))(v124, enum case for DIPError.Code.invalidStoredData(_:), v123);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    sub_10000B990((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v115, v40);

    (*(void (**)(char *, void, uint64_t))(v122 + 104))(v124, enum case for DIPError.Code.internalError(_:), v123);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v43 = v120;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000B990((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v44 = v125;
    swift_allocError();
    uint64_t v45 = v121;
    (*(void (**)(uint64_t, char *, uint64_t))(v121 + 16))(v46, v43, v44);
    os_log_type_t v47 = v118;
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    v34(v47, v13);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
    swift_errorRelease();
    return 0;
  }
  char v59 = v58;
  id v117 = v57;
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v62 = v61;

  sub_10000B990(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
  uint64_t v52 = v54;
  dispatch thunk of HashFunction.init()();
  v119 = v34;
  switch(v62 >> 62)
  {
    case 1uLL:
      uint64_t v11 = (int)v60;
      uint64_t v13 = (v60 >> 32) - (int)v60;
      if (v60 >> 32 < (int)v60) {
        goto LABEL_55;
      }
      uint64_t v52 = v62 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10000354C(v60, v62);
      unint64_t v40 = __DataStorage._bytes.getter();
      if (v40 && __OFSUB__((int)v60, __DataStorage._offset.getter())) {
        goto LABEL_57;
      }
      uint64_t v11 = (uint64_t)v130;
      __DataStorage._length.getter();
      dispatch thunk of HashFunction.update(bufferPointer:)();
      goto LABEL_34;
    case 2uLL:
      unint64_t v40 = v62 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v13 = *(void *)(v60 + 16);
      unint64_t v34 = *(void (**)(char *, uint64_t))(v60 + 24);
      sub_10000354C(v60, v62);
      swift_retain();
      swift_retain();
      uint64_t v52 = v62 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = __DataStorage._bytes.getter();
      if (!v11) {
        goto LABEL_32;
      }
      uint64_t v52 = v62 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v63 = __DataStorage._offset.getter();
      if (__OFSUB__(v13, v63)) {
        goto LABEL_58;
      }
      v11 += v13 - v63;
LABEL_32:
      BOOL v64 = __OFSUB__(v34, v13);
      uint64_t v13 = (uint64_t)v34 - v13;
      if (v64) {
        goto LABEL_56;
      }
      __DataStorage._length.getter();
      uint64_t v11 = (uint64_t)v130;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      swift_release();
      swift_release();
LABEL_34:
      sub_1000035EC(v60, v62);
      uint64_t v13 = v113;
      unint64_t v40 = v109;
LABEL_37:
      v65 = v126;
      dispatch thunk of HashFunction.finalize()();
      (*v107)(v11, v54);
      sub_10000B990(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v66 = v127;
      uint64_t v67 = Digest.data.getter();
      unint64_t v69 = v68;
      (*v106)(v65, v66);
      v70 = v129;
      defaultLogger()();
      sub_10000354C(v60, v62);
      sub_10000354C(v67, v69);
      sub_10000354C(v60, v62);
      sub_10000354C(v67, v69);
      Swift::String v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = swift_slowAlloc();
        v132[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v73 = v104;
        Swift::String v74 = Data.base16EncodedString()();
        *(void *)(v73 + 4) = sub_10004C3A4(v74._countAndFlagsBits, (unint64_t)v74._object, v132);
        swift_bridgeObjectRelease();
        sub_1000035EC(v60, v62);
        sub_1000035EC(v60, v62);
        *(_WORD *)(v73 + 12) = 2080;
        Swift::String v75 = Data.base16EncodedString()();
        *(void *)(v73 + 14) = sub_10004C3A4(v75._countAndFlagsBits, (unint64_t)v75._object, v132);
        uint64_t v13 = v113;
        swift_bridgeObjectRelease();
        sub_1000035EC(v67, v69);
        sub_1000035EC(v67, v69);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Testing potential decryption key with public key %s, hash %s", (uint8_t *)v73, 0x16u);
        swift_arrayDestroy();
        unint64_t v40 = v109;
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v76 = v129;
      }
      else
      {
        sub_1000035EC(v60, v62);
        sub_1000035EC(v60, v62);
        sub_1000035EC(v67, v69);
        sub_1000035EC(v67, v69);

        uint64_t v76 = v70;
      }
      unint64_t v34 = v119;
      v119(v76, v13);
      char v77 = sub_100147900(v67, v69, v115, v40);
      uint64_t v52 = v108;
      if ((v77 & 1) == 0)
      {
        sub_1000035EC(v67, v69);
        sub_1000035EC(v60, v62);

        ++v55;
        uint64_t v54 = v128;
        if (v116 == v105) {
          goto LABEL_42;
        }
        goto LABEL_18;
      }
      v119 = v34;
      swift_bridgeObjectRelease();
      v86 = v110;
      defaultLogger()();
      id v87 = v117;
      uint64_t v88 = v115;
      sub_10000354C(v115, v40);
      id v89 = v87;
      sub_10000354C(v88, v40);
      v90 = Logger.logObject.getter();
      int v91 = static os_log_type_t.debug.getter();
      v130 = v90;
      if (os_log_type_enabled(v90, (os_log_type_t)v91))
      {
        LODWORD(v129) = v91;
        uint64_t v92 = swift_slowAlloc();
        uint64_t v128 = swift_slowAlloc();
        v132[0] = v128;
        *(_DWORD *)uint64_t v92 = v104;
        id v93 = [v89 identifier];
        if (v93)
        {
          v94 = v93;
          uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v97 = v96;
        }
        else
        {
          unint64_t v97 = 0xE500000000000000;
          uint64_t v95 = 0x3E6C696E3CLL;
        }
        uint64_t v131 = sub_10004C3A4(v95, v97, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v92 + 12) = 2080;
        uint64_t v99 = v115;
        unint64_t v100 = v109;
        Swift::String v101 = Data.base16EncodedString()();
        uint64_t v131 = sub_10004C3A4(v101._countAndFlagsBits, (unint64_t)v101._object, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000035EC(v99, v100);
        sub_1000035EC(v99, v100);
        v102 = v130;
        _os_log_impl((void *)&_mh_execute_header, v130, (os_log_type_t)v129, "CredentialDecryptionKeyFinder found key %s with matching identifier %s)", (uint8_t *)v92, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000035EC(v67, v69);
        sub_1000035EC(v60, v62);
        sub_1000035EC(v99, v100);
        v98 = v110;
      }
      else
      {
        sub_1000035EC(v60, v62);
        sub_1000035EC(v67, v69);
        sub_1000035EC(v88, v40);

        sub_1000035EC(v88, v40);
        sub_1000035EC(v88, v40);

        v98 = v86;
      }
      v119(v98, v113);
      return v117;
    case 3uLL:
      memset(v132, 0, 14);
      goto LABEL_36;
    default:
      v132[0] = v60;
      LOWORD(v132[1]) = v62;
      BYTE2(v132[1]) = BYTE2(v62);
      BYTE3(v132[1]) = BYTE3(v62);
      BYTE4(v132[1]) = BYTE4(v62);
      BYTE5(v132[1]) = BYTE5(v62);
LABEL_36:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_1000035EC(v60, v62);
      goto LABEL_37;
  }
}

uint64_t sub_10000AB20(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v32 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10000B990(&qword_1001C0868, (void (*)(uint64_t))&type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v2)
  {
    swift_release();
    uint64_t v15 = (uint64_t)v32;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v32, enum case for DIPError.Code.jsonDecodingFailed(_:), v3);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000B990((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v33 = v4;
    uint64_t v34 = v6;
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v14, v12, v9);
    uint64_t v16 = HPKEEnvelopeEncryptedMessagePKRHash.pkRHash.getter();
    uint64_t v18 = v14;
    if (v17 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v33 + 104))(v32, enum case for DIPError.Code.hpkeFailureMissingPkRHash(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v15 = type metadata accessor for DIPError();
      sub_10000B990((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v9);
    }
    else
    {
      uint64_t v15 = v16;
      unint64_t v20 = v17;
      uint64_t v33 = v9;
      defaultLogger()();
      sub_10000354C(v15, v20);
      sub_10000354C(v15, v20);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v24 = v31;
      if (v23)
      {
        os_log_type_t v32 = v18;
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v36 = v28;
        uint64_t v29 = v8;
        *(_DWORD *)unint64_t v25 = 136315138;
        v27[1] = v25 + 4;
        Swift::String v26 = Data.base16EncodedString()();
        uint64_t v35 = sub_10004C3A4(v26._countAndFlagsBits, (unint64_t)v26._object, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100009764(v15, v20);
        sub_100009764(v15, v20);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "HPKE payload containers pkRHash %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v34);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v32, v33);
      }
      else
      {

        sub_100009764(v15, v20);
        sub_100009764(v15, v20);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v34);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v33);
      }
    }
  }
  return v15;
}

unint64_t sub_10000B1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v47 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyAgreementParams();
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EncryptionParams();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v38 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for EncryptedDataContainerParamsOnly();
  uint64_t v43 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10000B990(&qword_1001C0870, (void (*)(uint64_t))&type metadata accessor for EncryptedDataContainerParamsOnly);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v2)
  {
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v47, enum case for DIPError.Code.jsonDecodingFailed(_:), v3);
    swift_errorRetain();
    unint64_t v20 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000B990((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v45 = v4;
    uint64_t v46 = v3;
    swift_release();
    uint64_t v21 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v19, v17, v14);
    uint64_t v36 = v19;
    EncryptedDataContainerParamsOnly.params.getter();
    EncryptionParams.keyAgreement.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
    uint64_t v22 = KeyAgreementParams.recipientFingerprint.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      BOOL v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)BOOL v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10004C3A4(v22, v24, &v49);
      uint64_t v21 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "ECv3 payload contains recipient fingerprint %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v42);
    uint64_t v29 = v46;
    uint64_t v28 = v47;
    uint64_t v30 = v45;
    unint64_t v20 = Data.init(base64Encoded:options:)();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v33 = v36;
    if (v32 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v30 + 104))(v28, enum case for DIPError.Code.jsonDecodingFailed(_:), v29);
      unint64_t v20 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000B990((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v33, v14);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v36, v14);
    }
  }
  return v20;
}

uint64_t sub_10000B990(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000B9DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeWithCopy for CredentialDecryptionKeyFinder(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for CredentialDecryptionKeyFinder(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_10000BAAC(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for CredentialDecryptionKeyFinder(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CredentialDecryptionKeyFinder(uint64_t a1, uint64_t a2)
{
  sub_10000B9DC(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialDecryptionKeyFinder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialDecryptionKeyFinder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialDecryptionKeyFinder()
{
  return &type metadata for CredentialDecryptionKeyFinder;
}

ValueMetadata *type metadata accessor for CredentialDecryptionKeyIdentifierProvider()
{
  return &type metadata for CredentialDecryptionKeyIdentifierProvider;
}

uint64_t sub_10000BDDC()
{
  uint64_t v0 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int v9 = (char *)&v16 - v8;
  DIPError.Code.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000C3D8((uint64_t)v2);
    return -5000;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for DIPError.Code.missingEntitlement(_:)) {
    goto LABEL_7;
  }
  if (v11 == enum case for DIPError.Code.invalidStoredData(_:)) {
    goto LABEL_15;
  }
  if (v11 == enum case for DIPError.Code.idcsUnauthorizedPartition(_:))
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5002;
  }
  if (v11 == enum case for DIPError.Code.idcsInvalidPayload(_:)
    || v11 == enum case for DIPError.Code.idcsMissingPresentmentKey(_:))
  {
    goto LABEL_15;
  }
  if (v11 == enum case for DIPError.Code.idcsPreconditionNotMet(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5003;
  }
  if (v11 == enum case for DIPError.Code.idcsInvalidPresentmentKey(_:))
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5004;
  }
  else if (v11 == enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionEstablishment(_:) {
         || v11 == enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:)
  }
         || v11 == enum case for DIPError.Code.idcsInvalidReaderRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5101;
  }
  else if (v11 == enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:) {
         || v11 == enum case for DIPError.Code.idcsPresentmentRequestDecryptionFailed(_:))
  }
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5103;
  }
  else if (v11 == enum case for DIPError.Code.idcsUnsupportedReaderRequestVersion(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5102;
  }
  else if (v11 == enum case for DIPError.Code.idcsMissingReaderAuth(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5104;
  }
  else if (v11 == enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:) {
         || v11 == enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:)
  }
         || v11 == enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:)
         || v11 == enum case for DIPError.Code.idcsMissingReaderCommonName(_:)
         || v11 == enum case for DIPError.Code.idcsMissingReaderOrganization(_:)
         || v11 == enum case for DIPError.Code.idcsUnknownReaderAuthAlgorithm(_:)
         || v11 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
         || v11 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5105;
  }
  else if (v11 == enum case for DIPError.Code.idcsInvalidPresentmentSelection(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -5106;
  }
  else
  {
    int v13 = enum case for DIPError.Code.idcsMissingAuthDataInPresentmentSelection(_:);
    uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    int v15 = v11;
    v14(v9, v3);
    if (v15 != v13)
    {
      v14(v7, v3);
      return -5000;
    }
    return -5107;
  }
}

uint64_t sub_10000C3D8(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000C438()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for DIPSignpost();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiersForPublicKeyIdentifier.getter();
  DIPSignpost.init(_:)();
  type metadata accessor for StoredCryptoKey();
  uint64_t v5 = static StoredCryptoKey.fetchRequest()();
  sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001768E0;
  uint64_t v7 = (void *)v5;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v6 + 56) = sub_10000C854(0, &qword_1001C0880);
  *(void *)(v6 + 64) = sub_10000C890();
  *(void *)(v6 + 32) = isa;
  int v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  unint64_t v10 = v37;
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v10)
  {

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return (unint64_t)v4;
  }
  unint64_t v12 = result;
  id v32 = v7;
  uint64_t v33 = v4;
  uint64_t v34 = v2;
  uint64_t v35 = v1;
  if (!(result >> 62))
  {
    uint64_t v13 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v31 = 0;
    if (v13) {
      goto LABEL_5;
    }
LABEL_19:
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
LABEL_20:

    swift_bridgeObjectRelease();
    uint64_t v30 = v33;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
    return (unint64_t)v4;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v31 = 0;
  if (!v13) {
    goto LABEL_19;
  }
LABEL_5:
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    unint64_t v15 = v12 & 0xC000000000000001;
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
    uint64_t v16 = &selRef_generateDeviceEncryptionKeyForCredential_completion_;
    unint64_t v37 = v12;
    uint64_t v36 = v13;
    do
    {
      if (v15) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v12 + 8 * v14 + 32);
      }
      uint64_t v19 = v18;
      id v20 = [v18 v16[40] v31 v32];
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = [v20 credentialIdentifier];

        if (v22)
        {
          unint64_t v23 = v15;
          unint64_t v24 = v16;
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = sub_1000D0D48(0, *((void *)v4 + 2) + 1, 1, v4);
          }
          unint64_t v29 = *((void *)v4 + 2);
          unint64_t v28 = *((void *)v4 + 3);
          if (v29 >= v28 >> 1) {
            uint64_t v4 = sub_1000D0D48((char *)(v28 > 1), v29 + 1, 1, v4);
          }
          *((void *)v4 + 2) = v29 + 1;
          unint64_t v17 = &v4[16 * v29];
          *((void *)v17 + 4) = v25;
          *((void *)v17 + 5) = v27;
          unint64_t v12 = v37;
          uint64_t v16 = v24;
          unint64_t v15 = v23;
          uint64_t v13 = v36;
        }
      }
      ++v14;
    }
    while (v13 != v14);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C854(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10000C890()
{
  unint64_t result = qword_1001C0888;
  if (!qword_1001C0888)
  {
    sub_10000C854(255, &qword_1001C0880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C0888);
  }
  return result;
}

uint64_t sub_10000C8F8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StoredCryptoKey();
  uint64_t v3 = (void *)static StoredCryptoKey.fetchRequest()();
  sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1001767E0;
  uint64_t v5 = CredentialKeyType.rawValue.getter();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000DB88();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = &type metadata for UInt;
  *(void *)(v4 + 104) = &protocol witness table for UInt;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = a2;
  int v9 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v9];

  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  return v10;
}

uint64_t sub_10000CA44()
{
  uint64_t v0 = type metadata accessor for CredentialKeyType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DIPSignpost();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllInactivePresentmentKeys.getter();
  uint64_t v39 = v7;
  DIPSignpost.init(_:)();
  uint64_t v38 = type metadata accessor for StoredCryptoKey();
  uint64_t v37 = static StoredCryptoKey.fetchRequest()();
  uint64_t v36 = sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  uint64_t v35 = sub_100006CC8(&qword_1001C0878);
  uint64_t v8 = swift_allocObject();
  long long v34 = xmmword_1001768E0;
  *(_OWORD *)(v8 + 16) = xmmword_1001768E0;
  uint64_t v33 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v33(v3, enum case for CredentialKeyType.legacySE(_:), v0);
  uint64_t v9 = CredentialKeyType.rawValue.getter();
  uint64_t v11 = v10;
  unint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v31[1] = v1 + 8;
  id v32 = v12;
  v12(v3, v0);
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000DB88();
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  uint64_t v14 = NSPredicate.init(format:_:)();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = v34;
  v33(v3, enum case for CredentialKeyType.ses(_:), v0);
  uint64_t v16 = CredentialKeyType.rawValue.getter();
  uint64_t v18 = v17;
  v32(v3, v0);
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = v13;
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  uint64_t v19 = NSPredicate.init(format:_:)();
  sub_100006CC8(&qword_1001C08A8);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1001768F0;
  *(void *)(v20 + 32) = v14;
  *(void *)(v20 + 40) = v19;
  uint64_t v42 = v20;
  specialized Array._endMutation()();
  id v21 = objc_allocWithZone((Class)NSCompoundPredicate);
  id v22 = v14;
  id v23 = v19;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v25 = v21;
  uint64_t v26 = (void *)v37;
  id v27 = [v25 initWithType:2 subpredicates:isa];

  [v26 setPredicate:v27];
  uint64_t v28 = NSManagedObjectContext.fetch<A>(_:)();

  unint64_t v29 = v39;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return v28;
}

uint64_t sub_10000CE78()
{
  uint64_t v0 = type metadata accessor for CredentialKeyType();
  uint64_t v27 = *(void *)(v0 - 8);
  uint64_t v28 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CredentialKeyUsage();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllInactiveDeviceEncryptionKeys.getter();
  unint64_t v29 = v10;
  DIPSignpost.init(_:)();
  v26[1] = type metadata accessor for StoredCryptoKey();
  uint64_t v11 = (void *)static StoredCryptoKey.fetchRequest()();
  v26[0] = sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1001767E0;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for CredentialKeyUsage.deviceEncryption(_:), v3);
  uint64_t v13 = CredentialKeyUsage.rawValue.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000DB88();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v2, enum case for CredentialKeyType.sep(_:), v28);
  uint64_t v19 = CredentialKeyType.rawValue.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v2, v18);
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v16;
  *(void *)(v12 + 72) = v19;
  *(void *)(v12 + 80) = v21;
  id v22 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v22];

  uint64_t v23 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v24 = v29;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v31);
  return v23;
}

unint64_t sub_10000D23C()
{
  uint64_t v0 = type metadata accessor for CredentialKeyType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DIPSignpost();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllSEKeySlots.getter();
  DIPSignpost.init(_:)();
  uint64_t v28 = type metadata accessor for StoredCryptoKey();
  uint64_t v8 = (void *)static StoredCryptoKey.fetchRequest()();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v9 = swift_allocObject();
  long long v27 = xmmword_1001768E0;
  *(_OWORD *)(v9 + 16) = xmmword_1001768E0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 32) = 0x746F6C5379656BLL;
  *(void *)(v9 + 40) = 0xE700000000000000;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setPropertiesToFetch:isa];

  sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v27;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for CredentialKeyType.legacySE(_:), v0);
  uint64_t v12 = CredentialKeyType.rawValue.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000DB88();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  uint64_t v15 = NSPredicate.init(format:_:)();
  [v8 setPredicate:v15];

  unint64_t v16 = v29;
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v16)
  {

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
    return (unint64_t)v7;
  }
  unint64_t v18 = result;
  unint64_t v29 = v7;
  uint64_t v33 = (char *)&_swiftEmptySetSingleton;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v21 = v30;
  uint64_t v20 = v31;
  id v22 = v29;
  if (!v19)
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)&_swiftEmptySetSingleton;
LABEL_14:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
    return (unint64_t)v7;
  }
  if (v19 >= 1)
  {
    uint64_t v23 = v8;
    for (uint64_t i = 0; i != v19; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v18 + 8 * i + 32);
      }
      uint64_t v26 = v25;
      sub_100003884(&v32, (uint64_t)[v25 keySlot]);
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v33;
    uint64_t v21 = v30;
    uint64_t v20 = v31;
    id v22 = v29;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

unint64_t sub_10000D6C4(uint64_t a1, void *a2)
{
  uint64_t v25 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v26 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StoredCryptoKey();
  uint64_t v7 = (void *)static StoredCryptoKey.fetchRequest()();
  [v7 setFetchLimit:1];
  sub_10000C854(0, (unint64_t *)&qword_1001C4930);
  sub_100006CC8(&qword_1001C0878);
  uint64_t v8 = swift_allocObject();
  long long v24 = xmmword_1001768E0;
  *(_OWORD *)(v8 + 16) = xmmword_1001768E0;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000DB88();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v11._object = (void *)0x800000010017A240;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 8250;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    uint64_t v29 = v2;
    sub_100006CC8(&qword_1001C0890);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v26, enum case for DIPError.Code.coreDataError(_:), v25);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    uint64_t v14 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = v24;
    uint64_t v17 = (uint64_t *)(v16 + v15 + v14[14]);
    uint64_t v18 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v19 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v16 + v15, v18, v19);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v20 = dispatch thunk of Error._code.getter();
    v17[3] = (uint64_t)&type metadata for Int;
    *uint64_t v17 = v20;
    sub_10004A5E8(v16);
    uint64_t v21 = type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v21;
  }
  unint64_t v22 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v21)
    {
LABEL_9:

      swift_bridgeObjectRelease();
      return v21;
    }
  }
  if ((v22 & 0xC000000000000001) != 0)
  {
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v23 = *(id *)(v22 + 32);
LABEL_8:
    uint64_t v21 = (uint64_t)v23;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t sub_10000DB88()
{
  unint64_t result = qword_1001C4940;
  if (!qword_1001C4940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C4940);
  }
  return result;
}

uint64_t type metadata accessor for MockSESKeystore(uint64_t a1)
{
  return sub_1000141A4(a1, (uint64_t *)&unk_1001C08D0);
}

uint64_t sub_10000DBFC()
{
  return swift_initClassMetadata2();
}

BOOL sub_10000DC50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000DC64()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000DCAC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000DCD8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10000DD1C(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = (char **)&v2[qword_1001C08B8];
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v6;
  uint64_t v32 = *v6;
  *uint64_t v6 = (char *)0x8000000000000000;
  unint64_t v10 = sub_10013C344(0);
  uint64_t v11 = *((void *)v8 + 2);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v3 = v9;
  if (*((void *)v8 + 3) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100099F50();
      uint64_t v8 = v32;
    }
LABEL_7:
    *uint64_t v6 = v8;
    swift_bridgeObjectRelease();
    uint64_t v8 = *v6;
    if ((v3 & 1) == 0) {
      sub_100168E24(v10, 0, 0, *v6);
    }
    uint64_t v16 = *((void *)v8 + 7);
    uint64_t v17 = *(void *)(v16 + 8 * v10);
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (!v18)
    {
      unint64_t v1 = 0xD000000000000017;
      *(void *)(v16 + 8 * v10) = v19;
      swift_endAccess();
      uint64_t v20 = &v4[qword_1001C08B0];
      swift_beginAccess();
      if (*(void *)(*(void *)v20 + 16))
      {
        sub_10013C344(0);
        if (v21)
        {
          swift_endAccess();
          sub_100006CC8(&qword_1001C08A0);
          uint64_t v22 = swift_allocObject();
          *(_OWORD *)(v22 + 16) = xmmword_1001768E0;
          *(void *)(v22 + 56) = &type metadata for String;
          *(void *)(v22 + 32) = 0xD000000000000017;
          *(void *)(v22 + 40) = 0x800000010017A400;
          swift_errorRetain();
          print(_:separator:terminator:)();
          swift_bridgeObjectRelease();
          swift_willThrow();
          return a1;
        }
      }
      swift_endAccess();
      unint64_t v10 = SecAccessControlRef.constraintsData.getter();
      unint64_t v3 = v23;
      a1 = randomData(numBytes:)();
      uint64_t v6 = v24;
      uint64_t v8 = &v4[qword_1001C08C0];
      swift_beginAccess();
      uint64_t v4 = *(char **)v8;
      sub_10000354C(a1, (unint64_t)v6);
      sub_100009778(v10, v3);
      char v25 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v8 = v4;
      if (v25)
      {
LABEL_14:
        unint64_t v27 = *((void *)v4 + 2);
        unint64_t v26 = *((void *)v4 + 3);
        if (v27 >= v26 >> 1)
        {
          uint64_t v4 = sub_1000D0E58((char *)(v26 > 1), v27 + 1, 1, v4);
          *(void *)uint64_t v8 = v4;
        }
        *((void *)v4 + 2) = v27 + 1;
        unint64_t v28 = &v4[32 * v27];
        *((void *)v28 + 4) = a1;
        *((void *)v28 + 5) = v6;
        *((void *)v28 + 6) = v10;
        *((void *)v28 + 7) = v3;
        swift_endAccess();
        sub_100006CC8(&qword_1001C08A0);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = xmmword_1001768E0;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        Swift::String v30 = Data.base16EncodedString()();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        *(void *)(v29 + 56) = &type metadata for String;
        *(void *)(v29 + 32) = v1 + 5;
        *(void *)(v29 + 40) = 0x800000010017A740;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        sub_100009764(v10, v3);
        return a1;
      }
LABEL_20:
      uint64_t v4 = sub_1000D0E58(0, *((void *)v4 + 2) + 1, 1, v4);
      *(void *)uint64_t v8 = v4;
      goto LABEL_14;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_100097990(v13, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v32;
  unint64_t v14 = sub_10013C344(0);
  if ((v3 & 1) == (v15 & 1))
  {
    unint64_t v10 = v14;
    goto LABEL_7;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10000E0F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (void **)(v2 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = *v9;
  uint64_t v11 = v45;
  *unint64_t v9 = (void *)0x8000000000000000;
  unint64_t v13 = sub_10013C344(1u);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v3 = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    sub_100097990(v16, isUniquelyReferenced_nonNull_native);
    uint64_t v11 = v45;
    unint64_t v17 = sub_10013C344(1u);
    if ((v3 & 1) != (v18 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v13 = v17;
  }
  while (1)
  {
    *unint64_t v9 = v11;
    swift_bridgeObjectRelease();
    uint64_t v19 = *v9;
    if ((v3 & 1) == 0) {
      sub_100168E24(v13, 1, 0, *v9);
    }
    uint64_t v20 = v19[7];
    uint64_t v21 = *(void *)(v20 + 8 * v13);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    sub_100099F50();
    uint64_t v11 = v45;
  }
  *(void *)(v20 + 8 * v13) = v23;
  swift_endAccess();
  uint64_t v24 = v4 + qword_1001C08B0;
  swift_beginAccess();
  if (*(void *)(*(void *)v24 + 16))
  {
    sub_10013C344(1u);
    if (v25)
    {
      swift_endAccess();
      sub_100006CC8(&qword_1001C08A0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1001768E0;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 32) = 0xD000000000000017;
      *(void *)(v26 + 40) = 0x800000010017A400;
      swift_errorRetain();
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  swift_endAccess();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1001768E0;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  *(void *)&long long v44 = 0xD000000000000026;
  *((void *)&v44 + 1) = 0x800000010017A6F0;
  Swift::String v28 = Data.base16EncodedString()();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  long long v29 = v44;
  *(void *)(v27 + 56) = &type metadata for String;
  *(_OWORD *)(v27 + 32) = v29;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_10000E608(a1, a2);
  unint64_t v32 = v31;
  sub_100014CC4(v30, v31, v33, v34);
  if (v32 >> 60 == 15)
  {
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&long long v44 = 0xD00000000000002BLL;
    *((void *)&v44 + 1) = 0x800000010017A480;
    Swift::String v35 = Data.base16EncodedString()();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v43, enum case for DIPError.Code.internalError(_:), v42);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100014C7C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  long long v44 = xmmword_100176900;
  Data._Representation.append(contentsOf:)();
  uint64_t v37 = Data.subdata(in:)();
  unint64_t v39 = v38;
  Data.append(_:)();
  sub_1000035EC(v37, v39);
  return v44;
}

uint64_t sub_10000E608(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2 + qword_1001C08C0;
  swift_beginAccess();
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  if (v6)
  {
    unint64_t v7 = a2 >> 62;
    BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v83 = v8;
    size_t v9 = BYTE6(a2);
    uint64_t v80 = (a1 >> 32) - (int)a1;
    uint64_t v81 = a1 >> 32;
    unint64_t v10 = (unint64_t *)(swift_bridgeObjectRetain() + 56);
    unint64_t v82 = a2;
    size_t __n = BYTE6(a2);
    unint64_t v85 = a2 >> 62;
    while (2)
    {
      uint64_t v11 = *(v10 - 3);
      unint64_t v12 = *(v10 - 2);
      uint64_t v13 = *(v10 - 1);
      unint64_t v14 = *v10;
      v10 += 4;
      uint64_t v15 = 0;
      switch(v12 >> 62)
      {
        case 1uLL:
          LODWORD(v15) = HIDWORD(v11) - v11;
          if (__OFSUB__(HIDWORD(v11), v11))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = (int)v15;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v11 + 16);
          uint64_t v16 = *(void *)(v11 + 24);
          BOOL v18 = __OFSUB__(v16, v17);
          uint64_t v15 = v16 - v17;
          if (!v18) {
            break;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v12);
          break;
      }
      size_t v19 = v9;
      switch((int)v7)
      {
        case 1:
          size_t v19 = HIDWORD(a1) - (int)a1;
          if (v83) {
            goto LABEL_123;
          }
          goto LABEL_17;
        case 2:
          uint64_t v21 = *(void *)(a1 + 16);
          uint64_t v20 = *(void *)(a1 + 24);
          BOOL v18 = __OFSUB__(v20, v21);
          size_t v19 = v20 - v21;
          if (!v18) {
            goto LABEL_17;
          }
          goto LABEL_124;
        case 3:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_118;
        default:
LABEL_17:
          if (v15 != v19) {
            goto LABEL_7;
          }
          if (v15 < 1)
          {
LABEL_118:
            sub_10000354C(v11, v12);
            sub_100009778(v13, v14);
            swift_bridgeObjectRelease();
            return v11;
          }
          uint64_t v86 = v13;
          switch(v12 >> 62)
          {
            case 1uLL:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_125;
              }
              sub_10000354C(v11, v12);
              sub_100009778(v13, v14);
              sub_10000354C(v11, v12);
              uint64_t v26 = (char *)__DataStorage._bytes.getter();
              if (!v26) {
                goto LABEL_31;
              }
              uint64_t v27 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v11, v27)) {
                goto LABEL_127;
              }
              v26 += (int)v11 - v27;
LABEL_31:
              __DataStorage._length.getter();
              LODWORD(v7) = v85;
              if (v85)
              {
                if (v85 == 1)
                {
                  if (v81 < (int)a1) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  Swift::String v28 = (char *)__DataStorage._bytes.getter();
                  if (v28)
                  {
                    uint64_t v29 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a1, v29)) {
                      goto LABEL_143;
                    }
                    v28 += (int)a1 - v29;
                  }
                  uint64_t v30 = __DataStorage._length.getter();
                  size_t v31 = (a1 >> 32) - (int)a1;
                  if (v30 < v80) {
                    size_t v31 = v30;
                  }
                  if (!v26) {
                    goto LABEL_145;
                  }
                  if (!v28) {
                    goto LABEL_146;
                  }
                  int v32 = memcmp(v26, v28, v31);
                  sub_1000035EC(a1, a2);
                  uint64_t v33 = v11;
                  unint64_t v34 = v12;
LABEL_54:
                  sub_1000035EC(v33, v34);
LABEL_84:
                  LODWORD(v7) = v85;
                  if (!v32) {
                    goto LABEL_119;
                  }
                }
                else
                {
                  uint64_t v66 = *(void *)(a1 + 16);
                  uint64_t v79 = *(char **)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v67 = __DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = v67;
                    uint64_t v69 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v69)) {
                      goto LABEL_142;
                    }
                    uint64_t v70 = v66;
                    Swift::String v71 = (const void *)(v68 + v66 - v69);
                  }
                  else
                  {
                    uint64_t v70 = v66;
                    Swift::String v71 = 0;
                  }
                  os_log_type_t v72 = &v79[-v70];
                  if (__OFSUB__(v79, v70)) {
                    goto LABEL_137;
                  }
                  uint64_t v73 = __DataStorage._length.getter();
                  if (v73 >= (uint64_t)v72) {
                    size_t v74 = (size_t)v72;
                  }
                  else {
                    size_t v74 = v73;
                  }
                  if (!v26) {
                    goto LABEL_156;
                  }
                  LODWORD(v7) = v85;
                  if (!v71) {
                    goto LABEL_157;
                  }
                  int v75 = memcmp(v26, v71, v74);
                  swift_release();
                  swift_release();
                  sub_1000035EC(v11, v12);
                  a2 = v82;
                  if (!v75)
                  {
LABEL_119:
                    swift_bridgeObjectRelease();
                    return v11;
                  }
                }
              }
              else
              {
                __s1[0] = a1;
                LOWORD(__s1[1]) = a2;
                BYTE2(__s1[1]) = BYTE2(a2);
                BYTE3(__s1[1]) = BYTE3(a2);
                BYTE4(__s1[1]) = BYTE4(a2);
                BYTE5(__s1[1]) = BYTE5(a2);
                if (!v26) {
                  goto LABEL_155;
                }
                int v65 = memcmp(v26, __s1, __n);
                sub_1000035EC(v11, v12);
                if (!v65) {
                  goto LABEL_119;
                }
              }
LABEL_115:
              sub_1000035EC(v11, v12);
              sub_100009764(v86, v14);
              size_t v9 = __n;
LABEL_7:
              if (--v6) {
                continue;
              }
              swift_bridgeObjectRelease();
              break;
            case 2uLL:
              uint64_t v35 = *(void *)(v11 + 16);
              sub_10000354C(v11, v12);
              sub_100009778(v13, v14);
              swift_retain();
              swift_retain();
              uint64_t v36 = __DataStorage._bytes.getter();
              if (v36)
              {
                uint64_t v37 = v36;
                uint64_t v38 = __DataStorage._offset.getter();
                if (__OFSUB__(v35, v38)) {
                  goto LABEL_126;
                }
                v78 = (void *)(v37 + v35 - v38);
              }
              else
              {
                v78 = 0;
              }
              __DataStorage._length.getter();
              a2 = v82;
              LODWORD(v7) = v85;
              if (v85)
              {
                if (v85 == 1)
                {
                  if (v81 < (int)a1) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  uint64_t v43 = (char *)__DataStorage._bytes.getter();
                  if (v43)
                  {
                    uint64_t v44 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a1, v44)) {
                      goto LABEL_141;
                    }
                    v43 += (int)a1 - v44;
                  }
                  uint64_t v45 = __DataStorage._length.getter();
                  size_t v46 = (a1 >> 32) - (int)a1;
                  if (v45 < v80) {
                    size_t v46 = v45;
                  }
                  if (!v78) {
                    goto LABEL_148;
                  }
                  if (!v43) {
                    goto LABEL_149;
                  }
                  int v47 = memcmp(v78, v43, v46);
                  sub_1000035EC(a1, v82);
                  swift_release();
                }
                else
                {
                  uint64_t v59 = *(void *)(a1 + 16);
                  uint64_t v77 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v60 = (char *)__DataStorage._bytes.getter();
                  if (v60)
                  {
                    uint64_t v61 = __DataStorage._offset.getter();
                    if (__OFSUB__(v59, v61)) {
                      goto LABEL_140;
                    }
                    v60 += v59 - v61;
                  }
                  BOOL v18 = __OFSUB__(v77, v59);
                  int64_t v62 = v77 - v59;
                  if (v18) {
                    goto LABEL_135;
                  }
                  uint64_t v63 = __DataStorage._length.getter();
                  if (v63 >= v62) {
                    size_t v64 = v62;
                  }
                  else {
                    size_t v64 = v63;
                  }
                  if (!v78) {
                    goto LABEL_153;
                  }
                  a2 = v82;
                  if (!v60) {
                    goto LABEL_154;
                  }
                  int v47 = memcmp(v78, v60, v64);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                swift_release();
                LODWORD(v7) = v85;
                if (!v47) {
                  goto LABEL_119;
                }
              }
              else
              {
                __s1[0] = a1;
                LOWORD(__s1[1]) = v82;
                *(_DWORD *)((char *)&__s1[1] + 2) = *(_DWORD *)((char *)&v82 + 2);
                if (!v78) {
                  goto LABEL_152;
                }
                int v58 = memcmp(v78, __s1, __n);
                swift_release();
                swift_release();
                if (!v58) {
                  goto LABEL_119;
                }
              }
              goto LABEL_115;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_55;
              }
              if (v7 == 1)
              {
                if (v81 < (int)a1) {
                  goto LABEL_129;
                }
                sub_10000354C(v11, v12);
                sub_100009778(v13, v14);
                sub_10000354C(a1, a2);
                uint64_t v39 = __DataStorage._bytes.getter();
                if (!v39) {
                  goto LABEL_147;
                }
                uint64_t v23 = v39;
                uint64_t v40 = __DataStorage._offset.getter();
                uint64_t v25 = (int)a1 - v40;
                if (__OFSUB__((int)a1, v40)) {
                  goto LABEL_134;
                }
LABEL_50:
                uint64_t v41 = __DataStorage._length.getter();
                if (v41 >= v80) {
                  size_t v42 = (a1 >> 32) - (int)a1;
                }
                else {
                  size_t v42 = v41;
                }
                int v32 = memcmp(__s1, (const void *)(v23 + v25), v42);
                uint64_t v33 = a1;
                unint64_t v34 = a2;
                goto LABEL_54;
              }
              uint64_t v54 = *(void *)(a1 + 16);
              uint64_t v55 = *(void *)(a1 + 24);
              sub_10000354C(v11, v12);
              sub_100009778(v13, v14);
              swift_retain();
              swift_retain();
              unint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_139;
                }
                v50 += v54 - v56;
              }
              BOOL v18 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v18) {
                goto LABEL_132;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_151;
              }
LABEL_80:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v32 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              a2 = v82;
              goto LABEL_84;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v12;
              BYTE2(__s1[1]) = BYTE2(v12);
              BYTE3(__s1[1]) = BYTE3(v12);
              BYTE4(__s1[1]) = BYTE4(v12);
              BYTE5(__s1[1]) = BYTE5(v12);
              if (!v7)
              {
LABEL_55:
                uint64_t __s2 = a1;
                __int16 v88 = a2;
                char v89 = BYTE2(a2);
                char v90 = BYTE3(a2);
                char v91 = BYTE4(a2);
                char v92 = BYTE5(a2);
                sub_10000354C(v11, v12);
                sub_100009778(v13, v14);
                if (!memcmp(__s1, &__s2, v9)) {
                  goto LABEL_119;
                }
                goto LABEL_115;
              }
              if (v7 == 1)
              {
                if (v81 < (int)a1) {
                  goto LABEL_128;
                }
                sub_10000354C(v11, v12);
                sub_100009778(v13, v14);
                sub_10000354C(a1, a2);
                uint64_t v22 = __DataStorage._bytes.getter();
                if (!v22)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
                  JUMPOUT(0x10000F06CLL);
                }
                uint64_t v23 = v22;
                uint64_t v24 = __DataStorage._offset.getter();
                uint64_t v25 = (int)a1 - v24;
                if (__OFSUB__((int)a1, v24)) {
                  goto LABEL_133;
                }
                goto LABEL_50;
              }
              uint64_t v48 = *(void *)(a1 + 16);
              uint64_t v49 = *(void *)(a1 + 24);
              sub_10000354C(v11, v12);
              sub_100009778(v13, v14);
              swift_retain();
              swift_retain();
              unint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_138;
                }
                v50 += v48 - v51;
              }
              BOOL v18 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v18) {
                goto LABEL_131;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_150;
              }
              goto LABEL_80;
          }
          break;
      }
      break;
    }
  }
  return 0;
}

uint64_t sub_10000F09C()
{
  uint64_t v2 = v0;
  char v3 = (void **)(v0 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *v3;
  uint64_t v22 = *v3;
  *char v3 = (void *)0x8000000000000000;
  unint64_t v7 = sub_10013C344(2u);
  uint64_t v8 = v5[2];
  BOOL v9 = (v6 & 1) == 0;
  uint64_t v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v1 = v6;
  if (v5[3] >= v10)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    sub_100097990(v10, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = v22;
    unint64_t v11 = sub_10013C344(2u);
    if ((v1 & 1) != (v12 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v7 = v11;
  }
  while (1)
  {
    *char v3 = v5;
    swift_bridgeObjectRelease();
    uint64_t v13 = *v3;
    if ((v1 & 1) == 0) {
      sub_100168E24(v7, 2, 0, *v3);
    }
    uint64_t v14 = v13[7];
    uint64_t v15 = *(void *)(v14 + 8 * v7);
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (!v16) {
      break;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    sub_100099F50();
    uint64_t v5 = v22;
  }
  *(void *)(v14 + 8 * v7) = v17;
  swift_endAccess();
  uint64_t v18 = v2 + qword_1001C08B0;
  swift_beginAccess();
  if (*(void *)(*(void *)v18 + 16) && (sub_10013C344(2u), (v19 & 1) != 0))
  {
    swift_endAccess();
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1001768E0;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 32) = 0xD000000000000017;
    *(void *)(v20 + 40) = 0x800000010017A400;
    swift_errorRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    swift_endAccess();
    return randomData(numBytes:)();
  }
}

uint64_t sub_10000F2CC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = (void **)(v2 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v47 = *v9;
  unint64_t v11 = v47;
  *BOOL v9 = (void *)0x8000000000000000;
  unint64_t v13 = sub_10013C344(3u);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_21;
  }
  char v3 = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_22;
    }
    while (1)
    {
LABEL_6:
      *BOOL v9 = v11;
      swift_bridgeObjectRelease();
      char v19 = *v9;
      if ((v3 & 1) == 0) {
        sub_100168E24(v13, 3, 0, *v9);
      }
      uint64_t v20 = v19[7];
      uint64_t v21 = *(void *)(v20 + 8 * v13);
      BOOL v22 = __OFADD__(v21, 1);
      uint64_t v23 = v21 + 1;
      if (!v22) {
        break;
      }
LABEL_21:
      __break(1u);
LABEL_22:
      sub_100099F50();
      unint64_t v11 = v47;
    }
    unint64_t v24 = 0xD00000000000002BLL;
    *(void *)(v20 + 8 * v13) = v23;
    swift_endAccess();
    uint64_t v25 = v4 + qword_1001C08B0;
    swift_beginAccess();
    if (*(void *)(*(void *)v25 + 16) && (sub_10013C344(3u), (v26 & 1) != 0))
    {
      swift_endAccess();
      sub_100006CC8(&qword_1001C08A0);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_1001768E0;
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 32) = 0xD000000000000017;
      *(void *)(v27 + 40) = 0x800000010017A400;
      swift_errorRetain();
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
      sub_100006CC8(&qword_1001C08A0);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1001768E0;
      unint64_t v45 = 0;
      unint64_t v46 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v45 = 0xD00000000000002BLL;
      unint64_t v46 = 0x800000010017A6A0;
      Swift::String v29 = Data.base16EncodedString()();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      unint64_t v30 = v45;
      unint64_t v31 = v46;
      *(void *)(v28 + 56) = &type metadata for String;
      *(void *)(v28 + 32) = v30;
      *(void *)(v28 + 40) = v31;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = sub_10000E608(a1, a2);
      if (v33 >> 60 != 15)
      {
        uint64_t v37 = v32;
        unint64_t v38 = v33;
        uint64_t v39 = v34;
        unint64_t v40 = v35;
        if (v35 >> 60 == 15)
        {
          unint64_t v24 = 0;
        }
        else
        {
          sub_100009778(v34, v35);
          unint64_t v24 = v39;
        }
        sub_100014CC4(v37, v38, v39, v40);
        return v24;
      }
      unint64_t v45 = 0;
      unint64_t v46 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v45 = 0xD00000000000002BLL;
      unint64_t v46 = 0x800000010017A480;
      Swift::String v36 = Data.base16EncodedString()();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v42 + 104))(v44, enum case for DIPError.Code.internalError(_:), v43);
      unint64_t v24 = sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100014C7C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    }
    swift_willThrow();
    return v24;
  }
  sub_100097990(v16, isUniquelyReferenced_nonNull_native);
  unint64_t v11 = v47;
  unint64_t v17 = sub_10013C344(3u);
  if ((v3 & 1) == (v18 & 1))
  {
    unint64_t v13 = v17;
    goto LABEL_6;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10000F7E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  unint64_t v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = (void **)(v2 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *v9;
  unint64_t v11 = v43;
  *BOOL v9 = (void *)0x8000000000000000;
  unint64_t v13 = sub_10013C344(4u);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v3 = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    sub_100097990(v16, isUniquelyReferenced_nonNull_native);
    unint64_t v11 = v43;
    unint64_t v17 = sub_10013C344(4u);
    if ((v3 & 1) != (v18 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v13 = v17;
  }
  while (1)
  {
    *BOOL v9 = v11;
    swift_bridgeObjectRelease();
    char v19 = *v9;
    if ((v3 & 1) == 0) {
      sub_100168E24(v13, 4, 0, *v9);
    }
    uint64_t v20 = v19[7];
    uint64_t v21 = *(void *)(v20 + 8 * v13);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    sub_100099F50();
    unint64_t v11 = v43;
  }
  *(void *)(v20 + 8 * v13) = v23;
  swift_endAccess();
  uint64_t v24 = v4 + qword_1001C08B0;
  swift_beginAccess();
  if (*(void *)(*(void *)v24 + 16))
  {
    sub_10013C344(4u);
    if (v25)
    {
      swift_endAccess();
      sub_100006CC8(&qword_1001C08A0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1001768E0;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 32) = 0xD000000000000017;
      *(void *)(v26 + 40) = 0x800000010017A400;
      swift_errorRetain();
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  swift_endAccess();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1001768E0;
  unint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  unint64_t v41 = 0xD000000000000027;
  unint64_t v42 = 0x800000010017A640;
  Swift::String v28 = Data.base16EncodedString()();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  unint64_t v29 = v41;
  unint64_t v30 = v42;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 32) = v29;
  *(void *)(v27 + 40) = v30;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_10000E608(a1, a2);
  unint64_t v33 = v32;
  sub_100014CC4(v31, v32, v34, v35);
  if (v33 >> 60 == 15)
  {
    unint64_t v41 = 0;
    unint64_t v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v41 = 0xD00000000000002BLL;
    unint64_t v42 = 0x800000010017A480;
    Swift::String v36 = Data.base16EncodedString()();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v40, enum case for DIPError.Code.internalError(_:), v39);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100014C7C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return randomData(numBytes:)();
}

uint64_t sub_10000FCAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (void **)(v4 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v49 = *v11;
  unint64_t v13 = v49;
  *unint64_t v11 = (void *)0x8000000000000000;
  unint64_t v15 = sub_10013C344(5u);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v5 = v14;
  if (v13[3] >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    sub_100097990(v18, isUniquelyReferenced_nonNull_native);
    unint64_t v13 = v49;
    unint64_t v19 = sub_10013C344(5u);
    if ((v5 & 1) != (v20 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v15 = v19;
  }
  while (1)
  {
    *unint64_t v11 = v13;
    swift_bridgeObjectRelease();
    uint64_t v21 = *v11;
    if ((v5 & 1) == 0) {
      sub_100168E24(v15, 5, 0, *v11);
    }
    uint64_t v22 = v21[7];
    uint64_t v23 = *(void *)(v22 + 8 * v15);
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (!v24) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    sub_100099F50();
    unint64_t v13 = v49;
  }
  *(void *)(v22 + 8 * v15) = v25;
  swift_endAccess();
  uint64_t v26 = v6 + qword_1001C08B0;
  swift_beginAccess();
  if (*(void *)(*(void *)v26 + 16))
  {
    sub_10013C344(5u);
    if (v27)
    {
      swift_endAccess();
      sub_100006CC8(&qword_1001C08A0);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1001768E0;
      *(void *)(v28 + 56) = &type metadata for String;
      *(void *)(v28 + 32) = 0xD000000000000017;
      *(void *)(v28 + 40) = 0x800000010017A400;
      swift_errorRetain();
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  swift_endAccess();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1001768E0;
  unint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  unint64_t v47 = 0xD00000000000001FLL;
  unint64_t v48 = 0x800000010017A5D0;
  Swift::String v30 = Data.base16EncodedString()();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x206874697720;
  v31._object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  Swift::String v32 = Data.base16EncodedString()();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  unint64_t v33 = v47;
  unint64_t v34 = v48;
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 32) = v33;
  *(void *)(v29 + 40) = v34;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_10000E608(a3, a4);
  unint64_t v37 = v36;
  sub_100014CC4(v35, v36, v38, v39);
  if (v37 >> 60 == 15)
  {
    unint64_t v47 = 0;
    unint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v47 = 0xD00000000000002BLL;
    unint64_t v48 = 0x800000010017A480;
    Swift::String v40 = Data.base16EncodedString()();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v44, enum case for DIPError.Code.internalError(_:), v43);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100014C7C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return randomData(numBytes:)();
}

uint64_t sub_1000101A4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = v2 + qword_1001C08B8;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v111 = *(void *)v5;
  uint64_t v7 = v111;
  *(void *)uint64_t v5 = 0x8000000000000000;
  unint64_t v9 = sub_10013C344(6u);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11)) {
    goto LABEL_136;
  }
  LOBYTE(v3) = v8;
  if (*(void *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_139;
    }
  }
  else
  {
    sub_100097990(v12, isUniquelyReferenced_nonNull_native);
    uint64_t v7 = v111;
    unint64_t v13 = sub_10013C344(6u);
    if ((v3 & 1) != (v14 & 1)) {
      goto LABEL_172;
    }
    unint64_t v9 = v13;
  }
  while (1)
  {
    unint64_t v15 = a2;
    *(void *)uint64_t v5 = v7;
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)v5;
    if ((v3 & 1) == 0) {
      sub_100168E24(v9, 6, 0, *(void **)v5);
    }
    uint64_t v17 = *(void *)(v16 + 56);
    uint64_t v18 = *(void *)(v17 + 8 * v9);
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_137;
    }
    *(void *)(v17 + 8 * v9) = v20;
    swift_endAccess();
    uint64_t v21 = v4 + qword_1001C08B0;
    swift_beginAccess();
    if (*(void *)(*(void *)v21 + 16))
    {
      sub_10013C344(6u);
      if (v22)
      {
        swift_endAccess();
        sub_100006CC8(&qword_1001C08A0);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_1001768E0;
        *(void *)(v23 + 56) = &type metadata for String;
        *(void *)(v23 + 32) = 0xD000000000000017;
        *(void *)(v23 + 40) = 0x800000010017A400;
        swift_errorRetain();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        return swift_willThrow();
      }
    }
    swift_endAccess();
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1001768E0;
    *(void *)&long long __s1 = 0;
    *((void *)&__s1 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    *(void *)&long long __s1 = 0xD00000000000001DLL;
    *((void *)&__s1 + 1) = 0x800000010017A5B0;
    Swift::String v25 = Data.base16EncodedString()();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    long long v26 = __s1;
    *(void *)(v5 + 56) = &type metadata for String;
    *(_OWORD *)(v5 + 32) = v26;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    v4 += qword_1001C08C0;
    uint64_t result = swift_beginAccess();
    uint64_t v93 = *(void *)(*(void *)v4 + 16);
    uint64_t v94 = v4;
    if (!v93) {
      return result;
    }
    unint64_t v9 = 0;
    unint64_t v27 = 0;
    BOOL v28 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v90 = v28;
    unint64_t v95 = a2 >> 62;
    uint64_t v88 = (a1 >> 32) - (int)a1;
    uint64_t v89 = a1 >> 32;
    uint64_t v3 = a1;
    while (v27 < *(void *)(*(void *)v94 + 16))
    {
      unint64_t v29 = v27++;
      unint64_t v30 = *(void *)v94 + v9;
      uint64_t v4 = *(void *)(v30 + 32);
      unint64_t v31 = *(void *)(v30 + 40);
      uint64_t v5 = 0;
      switch(v31 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v4), v4)) {
            goto LABEL_132;
          }
          uint64_t v5 = HIDWORD(v4) - (int)v4;
LABEL_26:
          sub_10000354C(v4, v31);
          break;
        case 2uLL:
          uint64_t v33 = *(void *)(v4 + 16);
          uint64_t v32 = *(void *)(v4 + 24);
          uint64_t v5 = v32 - v33;
          if (!__OFSUB__(v32, v33)) {
            goto LABEL_26;
          }
          goto LABEL_133;
        case 3uLL:
          break;
        default:
          uint64_t v5 = BYTE6(v31);
          break;
      }
      uint64_t v34 = BYTE6(a2);
      switch((int)v95)
      {
        case 1:
          uint64_t v34 = HIDWORD(a1) - (int)a1;
          if (v90) {
            goto LABEL_134;
          }
          goto LABEL_31;
        case 2:
          uint64_t v36 = *(void *)(v3 + 16);
          uint64_t v35 = *(void *)(v3 + 24);
          BOOL v19 = __OFSUB__(v35, v36);
          uint64_t v34 = v35 - v36;
          if (!v19) {
            goto LABEL_31;
          }
          goto LABEL_135;
        case 3:
          if (v5) {
            goto LABEL_18;
          }
          goto LABEL_128;
        default:
LABEL_31:
          if (v5 == v34)
          {
            if (v5 < 1)
            {
LABEL_128:
              sub_1000035EC(v4, v31);
LABEL_129:
              swift_beginAccess();
              sub_100010E4C(v29, &__s1);
              swift_endAccess();
              uint64_t v83 = v109;
              unint64_t v84 = v110;
              sub_1000035EC(__s1, *((unint64_t *)&__s1 + 1));
              return sub_100009764(v83, v84);
            }
            switch(v31 >> 62)
            {
              case 1uLL:
                LOBYTE(v3) = v4;
                if ((int)v4 > v4 >> 32) {
                  goto LABEL_138;
                }
                uint64_t v53 = __DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v5 = v53;
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v4, v54)) {
                    goto LABEL_141;
                  }
                  uint64_t v55 = (void *)(v5 + (int)v4 - v54);
                }
                else
                {
                  uint64_t v55 = 0;
                }
                __DataStorage._length.getter();
                if (!v95)
                {
                  *(void *)&long long __s1 = a1;
                  WORD4(__s1) = v15;
                  BYTE10(__s1) = BYTE2(v15);
                  BYTE11(__s1) = BYTE3(v15);
                  BYTE12(__s1) = BYTE4(v15);
                  BYTE13(__s1) = BYTE5(v15);
                  if (!v55) {
                    goto LABEL_165;
                  }
                  int v71 = memcmp(v55, &__s1, BYTE6(a2));
                  goto LABEL_113;
                }
                if (v95 == 1)
                {
                  if (v89 < (int)a1) {
                    goto LABEL_150;
                  }
                  swift_retain();
                  uint64_t v5 = __DataStorage._bytes.getter();
                  if (v5)
                  {
                    uint64_t v56 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a1, v56)) {
                      goto LABEL_157;
                    }
                    v5 += (int)a1 - v56;
                  }
                  uint64_t v57 = __DataStorage._length.getter();
                  uint64_t v58 = (a1 >> 32) - (int)a1;
                  if (v57 < v88) {
                    uint64_t v58 = v57;
                  }
                  if (!v55) {
                    goto LABEL_168;
                  }
                  if (!v5) {
                    goto LABEL_169;
                  }
                  size_t v51 = v58;
                  p_s1 = (long long *)v55;
                  unint64_t v50 = (const void *)v5;
LABEL_81:
                  int v46 = memcmp(p_s1, v50, v51);
                  uint64_t v3 = a1;
                  sub_1000035EC(a1, v15);
                  goto LABEL_126;
                }
                uint64_t v78 = *(void *)(a1 + 16);
                uint64_t v87 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v5 = __DataStorage._bytes.getter();
                if (v5)
                {
                  uint64_t v79 = __DataStorage._offset.getter();
                  if (__OFSUB__(v78, v79)) {
                    goto LABEL_156;
                  }
                  v5 += v78 - v79;
                }
                BOOL v19 = __OFSUB__(v87, v78);
                int64_t v80 = v87 - v78;
                if (v19) {
                  goto LABEL_151;
                }
                uint64_t v81 = __DataStorage._length.getter();
                if (v81 >= v80) {
                  size_t v82 = v80;
                }
                else {
                  size_t v82 = v81;
                }
                if (!v55) {
                  goto LABEL_170;
                }
                unint64_t v15 = a2;
                if (!v5) {
                  goto LABEL_171;
                }
                int v46 = memcmp(v55, (const void *)v5, v82);
                swift_release();
                uint64_t v3 = a1;
                goto LABEL_125;
              case 2uLL:
                uint64_t v40 = *(void *)(v4 + 16);
                swift_retain();
                swift_retain();
                uint64_t v5 = __DataStorage._bytes.getter();
                if (!v5) {
                  goto LABEL_44;
                }
                uint64_t v41 = __DataStorage._offset.getter();
                if (__OFSUB__(v40, v41))
                {
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
                }
                v5 += v40 - v41;
LABEL_44:
                __DataStorage._length.getter();
                unint64_t v15 = a2;
                if (v95)
                {
                  if (v95 == 1)
                  {
                    if (v89 < (int)a1) {
                      goto LABEL_144;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)a1, v43)) {
                        goto LABEL_155;
                      }
                      v42 += (int)a1 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    size_t v45 = (a1 >> 32) - (int)a1;
                    if (v44 < v88) {
                      size_t v45 = v44;
                    }
                    if (!v5) {
                      goto LABEL_166;
                    }
                    if (!v42) {
                      goto LABEL_167;
                    }
                    int v46 = memcmp((const void *)v5, v42, v45);
                    uint64_t v5 = a1;
                    unint64_t v15 = a2;
                    sub_1000035EC(a1, a2);
                    uint64_t v3 = a1;
                    swift_release();
LABEL_125:
                    swift_release();
LABEL_126:
                    uint64_t result = sub_1000035EC(v4, v31);
                    if (!v46) {
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    unint64_t v85 = (void *)v5;
                    uint64_t v72 = *(void *)(a1 + 16);
                    uint64_t v86 = *(void *)(a1 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v73 = (char *)__DataStorage._bytes.getter();
                    if (v73)
                    {
                      uint64_t v74 = __DataStorage._offset.getter();
                      if (__OFSUB__(v72, v74)) {
                        goto LABEL_154;
                      }
                      v73 += v72 - v74;
                    }
                    BOOL v19 = __OFSUB__(v86, v72);
                    uint64_t v5 = v86 - v72;
                    if (v19) {
                      goto LABEL_149;
                    }
                    uint64_t v75 = __DataStorage._length.getter();
                    if (v75 >= v5) {
                      size_t v76 = v5;
                    }
                    else {
                      size_t v76 = v75;
                    }
                    if (!v85) {
                      goto LABEL_160;
                    }
                    if (!v73) {
                      goto LABEL_161;
                    }
                    int v77 = memcmp(v85, v73, v76);
                    swift_release();
                    swift_release();
                    swift_release();
                    uint64_t v3 = a1;
                    swift_release();
                    uint64_t result = sub_1000035EC(v4, v31);
                    unint64_t v15 = a2;
                    if (!v77) {
                      goto LABEL_129;
                    }
                  }
                }
                else
                {
                  *(void *)&long long __s1 = a1;
                  DWORD2(__s1) = a2;
                  WORD6(__s1) = WORD2(a2);
                  if (!v5)
                  {
                    __break(1u);
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_163:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
LABEL_172:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    JUMPOUT(0x100010E1CLL);
                  }
                  int v71 = memcmp((const void *)v5, &__s1, BYTE6(a2));
                  swift_release();
                  swift_release();
LABEL_113:
                  uint64_t result = sub_1000035EC(v4, v31);
                  uint64_t v3 = a1;
                  if (!v71) {
                    goto LABEL_129;
                  }
                }
                break;
              case 3uLL:
                *(void *)((char *)&__s1 + 6) = 0;
                *(void *)&long long __s1 = 0;
                if (!v95) {
                  goto LABEL_68;
                }
                if (v95 == 1)
                {
                  if (v89 < (int)a1) {
                    goto LABEL_142;
                  }
                  sub_10000354C(v3, v15);
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (!v47) {
                    goto LABEL_163;
                  }
                  uint64_t v5 = v47;
                  uint64_t v48 = __DataStorage._offset.getter();
                  uint64_t v39 = (int)a1 - v48;
                  if (__OFSUB__((int)a1, v48)) {
                    goto LABEL_147;
                  }
                  goto LABEL_60;
                }
                uint64_t v59 = v3;
                uint64_t v60 = *(void *)(v3 + 16);
                uint64_t v61 = *(void *)(v59 + 24);
                swift_retain();
                swift_retain();
                int64_t v62 = (char *)__DataStorage._bytes.getter();
                if (v62)
                {
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__(v60, v63)) {
                    goto LABEL_152;
                  }
                  v62 += v60 - v63;
                }
                BOOL v19 = __OFSUB__(v61, v60);
                int64_t v64 = v61 - v60;
                if (v19) {
                  goto LABEL_146;
                }
                uint64_t v65 = __DataStorage._length.getter();
                unint64_t v15 = a2;
                if (!v62) {
                  goto LABEL_159;
                }
                goto LABEL_93;
              default:
                *(void *)&long long __s1 = v4;
                WORD4(__s1) = v31;
                BYTE10(__s1) = BYTE2(v31);
                BYTE11(__s1) = BYTE3(v31);
                BYTE12(__s1) = BYTE4(v31);
                BYTE13(__s1) = BYTE5(v31);
                if (!v95)
                {
LABEL_68:
                  __int16 __s2 = v3;
                  char v97 = BYTE2(v3);
                  char v98 = BYTE3(v3);
                  char v99 = BYTE4(a1);
                  char v100 = BYTE5(v3);
                  char v101 = BYTE6(v3);
                  char v102 = HIBYTE(v3);
                  __int16 v103 = v15;
                  char v104 = BYTE2(v15);
                  char v105 = BYTE3(v15);
                  char v106 = BYTE4(v15);
                  char v107 = BYTE5(v15);
                  int v46 = memcmp(&__s1, &__s2, BYTE6(a2));
                  goto LABEL_126;
                }
                if (v95 == 1)
                {
                  if (v89 < (int)a1) {
                    goto LABEL_143;
                  }
                  sub_10000354C(v3, v15);
                  uint64_t v37 = __DataStorage._bytes.getter();
                  if (!v37) {
                    goto LABEL_162;
                  }
                  uint64_t v5 = v37;
                  uint64_t v38 = __DataStorage._offset.getter();
                  uint64_t v39 = (int)a1 - v38;
                  if (__OFSUB__((int)a1, v38)) {
                    goto LABEL_148;
                  }
LABEL_60:
                  uint64_t v49 = __DataStorage._length.getter();
                  unint64_t v50 = (const void *)(v5 + v39);
                  if (v49 >= v88) {
                    size_t v51 = (a1 >> 32) - (int)a1;
                  }
                  else {
                    size_t v51 = v49;
                  }
                  p_s1 = &__s1;
                  goto LABEL_81;
                }
                uint64_t v66 = v3;
                uint64_t v67 = *(void *)(v3 + 16);
                uint64_t v68 = *(void *)(v66 + 24);
                swift_retain();
                swift_retain();
                int64_t v62 = (char *)__DataStorage._bytes.getter();
                if (v62)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_153;
                  }
                  v62 += v67 - v69;
                }
                BOOL v19 = __OFSUB__(v68, v67);
                int64_t v64 = v68 - v67;
                if (v19) {
                  goto LABEL_145;
                }
                uint64_t v65 = __DataStorage._length.getter();
                unint64_t v15 = a2;
                if (!v62) {
                  goto LABEL_164;
                }
LABEL_93:
                if (v65 >= v64) {
                  size_t v70 = v64;
                }
                else {
                  size_t v70 = v65;
                }
                uint64_t v5 = memcmp(&__s1, v62, v70);
                swift_release();
                uint64_t v3 = a1;
                swift_release();
                uint64_t result = sub_1000035EC(v4, v31);
                if (!v5) {
                  goto LABEL_129;
                }
                break;
            }
          }
          else
          {
LABEL_18:
            uint64_t result = sub_1000035EC(v4, v31);
          }
          v9 += 32;
          if (v93 == v27) {
            return result;
          }
          break;
      }
    }
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    sub_100099F50();
    uint64_t v7 = v111;
  }
}

uint64_t sub_100010E4C@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1000147C8((uint64_t)v5);
  }
  unint64_t v6 = *((void *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = &v5[32 * a1];
    long long v9 = *((_OWORD *)v7 + 2);
    long long v10 = *((_OWORD *)v7 + 3);
    char v8 = v7 + 32;
    unint64_t v11 = v6 - 1;
    *a2 = v9;
    a2[1] = v10;
    uint64_t v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 32, 32 * v12);
      *((void *)v5 + 2) = v11;
      char *v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100010F2C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  uint64_t v127 = a1;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  size_t v130 = *(void *)(v8 - 8);
  unint64_t v131 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (unint64_t)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (void **)(v3 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v147 = *v11;
  unint64_t v13 = v147;
  *unint64_t v11 = (void *)0x8000000000000000;
  unint64_t v15 = sub_10013C344(7u);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17)) {
    goto LABEL_138;
  }
  LOBYTE(v4) = v14;
  if (v13[3] >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_144;
    }
  }
  else
  {
    sub_100097990(v18, isUniquelyReferenced_nonNull_native);
    unint64_t v13 = v147;
    unint64_t v19 = sub_10013C344(7u);
    if ((v4 & 1) != (v20 & 1)) {
      goto LABEL_179;
    }
    unint64_t v15 = v19;
  }
  while (1)
  {
    *unint64_t v11 = v13;
    swift_bridgeObjectRelease();
    uint64_t v21 = *v11;
    if ((v4 & 1) == 0) {
      sub_100168E24(v15, 7, 0, *v11);
    }
    uint64_t v22 = v21[7];
    uint64_t v23 = *(void *)(v22 + 8 * v15);
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_139;
    }
    *(void *)(v22 + 8 * v15) = v25;
    swift_endAccess();
    unint64_t v26 = v5 + qword_1001C08B0;
    swift_beginAccess();
    if (*(void *)(*(void *)v26 + 16))
    {
      sub_10013C344(7u);
      if (v27)
      {
        swift_endAccess();
        sub_100006CC8(&qword_1001C08A0);
        unint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_1001768E0;
        *(void *)(v10 + 56) = &type metadata for String;
        *(void *)(v10 + 32) = 0xD000000000000017;
        *(void *)(v10 + 40) = 0x800000010017A400;
        swift_errorRetain();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
LABEL_14:
        swift_willThrow();
        return v10;
      }
    }
    uint64_t v129 = a3;
    swift_endAccess();
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1001768E0;
    *(void *)&long long __s1 = 0;
    *((void *)&__s1 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(void *)&long long __s1 = 0xD000000000000023;
    *((void *)&__s1 + 1) = 0x800000010017A450;
    a3 = v127;
    Swift::String v29 = Data.base16EncodedString()();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    long long v30 = __s1;
    *(void *)(v28 + 56) = &type metadata for String;
    *(_OWORD *)(v28 + 32) = v30;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_10000E608(a3, a2);
    if (v32 >> 60 == 15)
    {
      *(void *)&long long __s1 = 0;
      *((void *)&__s1 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long __s1 = 0xD00000000000002BLL;
      *((void *)&__s1 + 1) = 0x800000010017A480;
      Swift::String v35 = Data.base16EncodedString()();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, void, unint64_t))(v130 + 104))(v10, enum case for DIPError.Code.internalError(_:), v131);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100014C7C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      goto LABEL_14;
    }
    uint64_t v4 = v31;
    unint64_t v15 = v32;
    unint64_t v114 = v34;
    uint64_t v115 = v33;
    sub_10000354C(v31, v32);
    uint64_t v36 = randomData(numBytes:)();
    unint64_t v38 = v37;
    *(void *)&long long __s1 = v4;
    *((void *)&__s1 + 1) = v15;
    sub_10000354C(v4, v15);
    sub_100014870(v36, v38);
    sub_1000035EC(v36, v38);
    uint64_t v117 = v4;
    unint64_t v116 = v15;
    sub_1000035EC(v4, v15);
    unint64_t v120 = *((void *)&__s1 + 1);
    unint64_t v121 = __s1;
    sub_10000354C(__s1, *((unint64_t *)&__s1 + 1));
    uint64_t v119 = SecAccessControlRef.constraintsData.getter();
    unint64_t v118 = v39;
    unint64_t v10 = v5 + qword_1001C08C0;
    swift_beginAccess();
    uint64_t v129 = *(void *)(*(void *)v10 + 16);
    if (!v129) {
      goto LABEL_135;
    }
    unint64_t v11 = 0;
    unint64_t v5 = 0;
    unint64_t v131 = a2 >> 62;
    unint64_t v113 = HIDWORD(a3);
    BOOL v40 = __OFSUB__(HIDWORD(a3), a3);
    BOOL v124 = v40;
    size_t v123 = HIDWORD(a3) - (int)a3;
    size_t v130 = BYTE6(a2);
    uint64_t v126 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v122 = (int)a3;
    uint64_t v112 = a3 >> 32;
    uint64_t v111 = (a3 >> 32) - (int)a3;
    unint64_t v125 = a2;
    unint64_t v128 = v10;
LABEL_23:
    if (v5 < *(void *)(*(void *)v10 + 16)) {
      break;
    }
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    sub_100099F50();
    unint64_t v13 = v147;
  }
  unint64_t v15 = v5++;
  uint64_t v41 = (char *)v11 + *(void *)v10;
  uint64_t v4 = *((void *)v41 + 4);
  unint64_t v10 = *((void *)v41 + 5);
  uint64_t v42 = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_140;
      }
      uint64_t v42 = HIDWORD(v4) - (int)v4;
LABEL_29:
      sub_10000354C(v4, v10);
      break;
    case 2uLL:
      uint64_t v44 = *(void *)(v4 + 16);
      uint64_t v43 = *(void *)(v4 + 24);
      uint64_t v42 = v43 - v44;
      if (!__OFSUB__(v43, v44)) {
        goto LABEL_29;
      }
      goto LABEL_141;
    case 3uLL:
      break;
    default:
      uint64_t v42 = BYTE6(v10);
      break;
  }
  size_t v45 = v130;
  switch((int)v131)
  {
    case 1:
      size_t v45 = v123;
      if (v124) {
        goto LABEL_142;
      }
      goto LABEL_34;
    case 2:
      uint64_t v47 = *(void *)(a3 + 16);
      uint64_t v46 = *(void *)(a3 + 24);
      BOOL v24 = __OFSUB__(v46, v47);
      size_t v45 = v46 - v47;
      if (!v24) {
        goto LABEL_34;
      }
      goto LABEL_143;
    case 3:
      if (v42) {
        goto LABEL_21;
      }
      goto LABEL_132;
    default:
LABEL_34:
      if (v42 != v45)
      {
LABEL_21:
        sub_1000035EC(v4, v10);
        goto LABEL_22;
      }
      if (v42 >= 1)
      {
        switch(v10 >> 62)
        {
          case 1uLL:
            if ((int)v4 > v4 >> 32)
            {
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
              goto LABEL_148;
            }
            uint64_t v62 = __DataStorage._bytes.getter();
            if (v62)
            {
              uint64_t v63 = v62;
              uint64_t v64 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v4, v64)) {
                goto LABEL_147;
              }
              uint64_t v65 = (const void *)(v63 + (int)v4 - v64);
            }
            else
            {
              uint64_t v65 = 0;
            }
            a2 = v125;
            __DataStorage._length.getter();
            if (v131)
            {
              if (v131 == 1)
              {
                if (v112 < v122) {
                  goto LABEL_157;
                }
                swift_retain();
                int v71 = (char *)__DataStorage._bytes.getter();
                if (v71)
                {
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v122, v72)) {
                    goto LABEL_164;
                  }
                  v71 += v122 - v72;
                }
                uint64_t v73 = __DataStorage._length.getter();
                size_t v74 = v111;
                if (v73 < v111) {
                  size_t v74 = v73;
                }
                if (!v65) {
                  goto LABEL_175;
                }
                if (!v71) {
                  goto LABEL_176;
                }
                int v60 = memcmp(v65, v71, v74);
                a3 = v127;
                uint64_t v61 = v127;
LABEL_85:
                sub_1000035EC(v61, a2);
              }
              else
              {
                uint64_t v95 = *(void *)(v127 + 16);
                unint64_t v110 = *(char **)(v127 + 24);
                swift_retain();
                swift_retain();
                unint64_t v96 = (char *)__DataStorage._bytes.getter();
                if (v96)
                {
                  uint64_t v97 = __DataStorage._offset.getter();
                  if (__OFSUB__(v95, v97)) {
                    goto LABEL_163;
                  }
                  v96 += v95 - v97;
                }
                BOOL v24 = __OFSUB__(v110, v95);
                char v98 = &v110[-v95];
                if (v24) {
                  goto LABEL_158;
                }
                uint64_t v99 = __DataStorage._length.getter();
                if (v99 >= (uint64_t)v98) {
                  size_t v100 = (size_t)v98;
                }
                else {
                  size_t v100 = v99;
                }
                if (!v65) {
                  goto LABEL_177;
                }
                a2 = v125;
                if (!v96) {
                  goto LABEL_178;
                }
                int v60 = memcmp(v65, v96, v100);
LABEL_128:
                swift_release();
                a3 = v127;
LABEL_129:
                swift_release();
              }
LABEL_130:
              sub_1000035EC(v4, v10);
              if (!v60) {
                goto LABEL_133;
              }
            }
            else
            {
              LODWORD(__s1) = v127;
              BYTE4(__s1) = v113;
              *(_WORD *)((char *)&__s1 + 5) = *(_WORD *)((char *)&v127 + 5);
              BYTE7(__s1) = HIBYTE(v127);
              WORD4(__s1) = a2;
              BYTE10(__s1) = BYTE2(a2);
              BYTE11(__s1) = BYTE3(a2);
              BYTE12(__s1) = BYTE4(a2);
              BYTE13(__s1) = BYTE5(a2);
              if (!v65) {
                goto LABEL_172;
              }
              int v88 = memcmp(v65, &__s1, v130);
LABEL_116:
              sub_1000035EC(v4, v10);
              a3 = v127;
              if (!v88) {
                goto LABEL_133;
              }
            }
            break;
          case 2uLL:
            uint64_t v52 = *(void *)(v4 + 16);
            swift_retain();
            swift_retain();
            uint64_t v53 = __DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = v53;
              uint64_t v55 = __DataStorage._offset.getter();
              if (__OFSUB__(v52, v55)) {
                goto LABEL_146;
              }
              unint64_t v110 = (char *)(v54 + v52 - v55);
            }
            else
            {
              unint64_t v110 = 0;
            }
            a2 = v125;
            __DataStorage._length.getter();
            if (!v131)
            {
              LODWORD(__s1) = v127;
              BYTE4(__s1) = v113;
              *(_WORD *)((char *)&__s1 + 5) = *(_WORD *)((char *)&v127 + 5);
              BYTE7(__s1) = HIBYTE(v127);
              WORD4(__s1) = a2;
              BYTE10(__s1) = BYTE2(a2);
              BYTE11(__s1) = BYTE3(a2);
              BYTE12(__s1) = BYTE4(a2);
              BYTE13(__s1) = BYTE5(a2);
              if (!v110)
              {
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __DataStorage._length.getter();
                __break(1u);
LABEL_170:
                __DataStorage._length.getter();
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x100011F84);
              }
              int v88 = memcmp(v110, &__s1, v130);
              swift_release();
              swift_release();
              goto LABEL_116;
            }
            if (v131 == 1)
            {
              if (v112 < v122) {
                goto LABEL_151;
              }
              swift_retain();
              uint64_t v66 = (char *)__DataStorage._bytes.getter();
              if (v66)
              {
                uint64_t v67 = __DataStorage._offset.getter();
                if (__OFSUB__(v122, v67)) {
                  goto LABEL_162;
                }
                v66 += v122 - v67;
              }
              uint64_t v68 = __DataStorage._length.getter();
              size_t v69 = v111;
              if (v68 < v111) {
                size_t v69 = v68;
              }
              if (!v110) {
                goto LABEL_173;
              }
              if (!v66) {
                goto LABEL_174;
              }
              int v60 = memcmp(v110, v66, v69);
              uint64_t v70 = v127;
              sub_1000035EC(v127, a2);
              a3 = v70;
              swift_release();
              goto LABEL_129;
            }
            uint64_t v89 = *(void *)(v127 + 16);
            uint64_t v109 = *(void *)(v127 + 24);
            swift_retain();
            swift_retain();
            BOOL v90 = (char *)__DataStorage._bytes.getter();
            if (v90)
            {
              uint64_t v91 = __DataStorage._offset.getter();
              if (__OFSUB__(v89, v91)) {
                goto LABEL_161;
              }
              v90 += v89 - v91;
            }
            BOOL v24 = __OFSUB__(v109, v89);
            int64_t v92 = v109 - v89;
            if (v24) {
              goto LABEL_156;
            }
            uint64_t v93 = __DataStorage._length.getter();
            if (v93 >= v92) {
              size_t v94 = v92;
            }
            else {
              size_t v94 = v93;
            }
            if (!v110) {
              goto LABEL_167;
            }
            a2 = v125;
            if (!v90) {
              goto LABEL_168;
            }
            int v60 = memcmp(v110, v90, v94);
            swift_release();
            swift_release();
            goto LABEL_128;
          case 3uLL:
            *(void *)((char *)&__s1 + 6) = 0;
            *(void *)&long long __s1 = 0;
            if (!v131) {
              goto LABEL_60;
            }
            if (v131 == 1)
            {
              if (v112 < v122) {
                goto LABEL_149;
              }
              sub_10000354C(a3, a2);
              uint64_t v56 = __DataStorage._bytes.getter();
              if (!v56) {
                goto LABEL_170;
              }
              uint64_t v49 = v56;
              uint64_t v57 = __DataStorage._offset.getter();
              uint64_t v51 = v122 - v57;
              if (__OFSUB__(v122, v57)) {
                goto LABEL_154;
              }
              goto LABEL_52;
            }
            uint64_t v75 = a3;
            uint64_t v76 = *(void *)(a3 + 16);
            uint64_t v77 = *(void *)(v75 + 24);
            swift_retain();
            swift_retain();
            uint64_t v78 = (char *)__DataStorage._bytes.getter();
            if (v78)
            {
              uint64_t v79 = __DataStorage._offset.getter();
              if (__OFSUB__(v76, v79)) {
                goto LABEL_159;
              }
              v78 += v76 - v79;
            }
            BOOL v24 = __OFSUB__(v77, v76);
            int64_t v80 = v77 - v76;
            if (v24) {
              goto LABEL_152;
            }
            uint64_t v81 = __DataStorage._length.getter();
            a3 = v127;
            if (!v78) {
              goto LABEL_166;
            }
            goto LABEL_97;
          default:
            *(void *)&long long __s1 = v4;
            WORD4(__s1) = v10;
            BYTE10(__s1) = BYTE2(v10);
            BYTE11(__s1) = BYTE3(v10);
            BYTE12(__s1) = BYTE4(v10);
            BYTE13(__s1) = BYTE5(v10);
            if (!v131)
            {
LABEL_60:
              __int16 __s2 = a3;
              char v133 = BYTE2(a3);
              char v134 = BYTE3(a3);
              char v135 = v113;
              char v136 = BYTE5(a3);
              char v137 = BYTE6(a3);
              char v138 = HIBYTE(a3);
              __int16 v139 = a2;
              char v140 = BYTE2(a2);
              char v141 = BYTE3(a2);
              char v142 = BYTE4(a2);
              char v143 = BYTE5(a2);
              int v60 = memcmp(&__s1, &__s2, v130);
              goto LABEL_130;
            }
            if (v131 == 1)
            {
              if (v112 < v122) {
                goto LABEL_150;
              }
              sub_10000354C(a3, a2);
              uint64_t v48 = __DataStorage._bytes.getter();
              if (!v48) {
                goto LABEL_169;
              }
              uint64_t v49 = v48;
              uint64_t v50 = __DataStorage._offset.getter();
              uint64_t v51 = v122 - v50;
              if (__OFSUB__(v122, v50)) {
                goto LABEL_155;
              }
LABEL_52:
              uint64_t v58 = __DataStorage._length.getter();
              if (v58 >= v111) {
                size_t v59 = v111;
              }
              else {
                size_t v59 = v58;
              }
              int v60 = memcmp(&__s1, (const void *)(v49 + v51), v59);
              uint64_t v61 = a3;
              a2 = v125;
              goto LABEL_85;
            }
            uint64_t v82 = a3;
            uint64_t v83 = *(void *)(a3 + 16);
            uint64_t v84 = *(void *)(v82 + 24);
            swift_retain();
            swift_retain();
            uint64_t v78 = (char *)__DataStorage._bytes.getter();
            if (v78)
            {
              uint64_t v85 = __DataStorage._offset.getter();
              if (__OFSUB__(v83, v85)) {
                goto LABEL_160;
              }
              v78 += v83 - v85;
            }
            BOOL v24 = __OFSUB__(v84, v83);
            int64_t v80 = v84 - v83;
            if (v24) {
              goto LABEL_153;
            }
            uint64_t v81 = __DataStorage._length.getter();
            a3 = v127;
            if (!v78) {
              goto LABEL_171;
            }
LABEL_97:
            if (v81 >= v80) {
              size_t v86 = v80;
            }
            else {
              size_t v86 = v81;
            }
            int v87 = memcmp(&__s1, v78, v86);
            swift_release();
            swift_release();
            sub_1000035EC(v4, v10);
            a2 = v125;
            if (!v87) {
              goto LABEL_133;
            }
            break;
        }
LABEL_22:
        v11 += 4;
        unint64_t v10 = v128;
        if (v129 == v5) {
          goto LABEL_135;
        }
        goto LABEL_23;
      }
LABEL_132:
      sub_1000035EC(v4, v10);
LABEL_133:
      unint64_t v101 = v128;
      swift_beginAccess();
      sub_100010E4C(v15, &__s1);
      swift_endAccess();
      uint64_t v102 = v145;
      unint64_t v103 = v146;
      sub_1000035EC(__s1, *((unint64_t *)&__s1 + 1));
      sub_100009764(v102, v103);
      swift_beginAccess();
      if (*(void *)(*(void *)v101 + 16) < v15)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
      }
      uint64_t v104 = v121;
      uint64_t v105 = v120;
      sub_10000354C(v121, v120);
      uint64_t v106 = v119;
      uint64_t v107 = v118;
      sub_100009778(v119, v118);
      sub_1000D7E08(v15, v15, v104, v105, v106, v107);
      swift_endAccess();
LABEL_135:
      unint64_t v10 = v121;
      sub_1000035EC(v121, v120);
      sub_100009764(v119, v118);
      sub_100014CC4(v117, v116, v115, v114);
      return v10;
  }
}

uint64_t sub_100011FB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v93 = a3;
  uint64_t v91 = a1;
  unint64_t v92 = a2;
  uint64_t v5 = sub_100006CC8(&qword_1001C09C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v83 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  __chkstk_darwin(v7);
  uint64_t v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SESKeystore.KeyDesignation();
  uint64_t v78 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SESKeystore.DesignatedKey();
  uint64_t v89 = *(void *)(v11 - 8);
  uint64_t v90 = v11;
  __chkstk_darwin(v11);
  int v88 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SHA256();
  uint64_t v84 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SHA256Digest();
  unint64_t v85 = *(void *)(v16 - 8);
  uint64_t v86 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = v3;
  unint64_t v19 = (void **)(v3 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v96 = *v19;
  uint64_t v21 = v96;
  *unint64_t v19 = (void *)0x8000000000000000;
  unint64_t v23 = sub_10013C344(8u);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
    goto LABEL_30;
  }
  char v4 = v22;
  if (v21[3] >= v26)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_31;
    }
  }
  else
  {
    sub_100097990(v26, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = v96;
    unint64_t v27 = sub_10013C344(8u);
    if ((v4 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_35:
      swift_release();
      swift_release();
      __break(1u);
      JUMPOUT(0x100012A5CLL);
    }
    unint64_t v23 = v27;
  }
  while (1)
  {
    uint64_t v29 = v95;
    *unint64_t v19 = v21;
    swift_bridgeObjectRelease();
    long long v30 = *v19;
    if ((v4 & 1) == 0) {
      sub_100168E24(v23, 8, 0, *v19);
    }
    uint64_t v31 = v30[7];
    uint64_t v32 = *(void *)(v31 + 8 * v23);
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (!v33) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    sub_100099F50();
    uint64_t v21 = v96;
  }
  *(void *)(v31 + 8 * v23) = v34;
  swift_endAccess();
  Swift::String v35 = (uint64_t *)(v29 + qword_1001C08B0);
  swift_beginAccess();
  uint64_t v36 = *v35;
  if (*(void *)(v36 + 16) && (unint64_t v37 = sub_10013C344(8u), (v38 & 1) != 0))
  {
    uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 8 * v37);
    swift_endAccess();
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1001768E0;
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 32) = 0xD000000000000017;
    *(void *)(v40 + 40) = 0x800000010017A400;
    swift_errorRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    uint64_t v94 = v39;
    return swift_willThrow();
  }
  else
  {
    swift_endAccess();
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1001768E0;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0xD00000000000002ELL;
    *((void *)&v97 + 1) = 0x800000010017A420;
    sub_100014C7C(qword_1001C09C8, (void (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation);
    uint64_t v43 = v9;
    v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    long long v45 = v97;
    *(void *)(v42 + 56) = &type metadata for String;
    *(_OWORD *)(v42 + 32) = v45;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v94;
    uint64_t result = sub_10000E0F8(v91, v92);
    unint64_t v87 = v47;
    uint64_t v94 = v46;
    if (!v46)
    {
      uint64_t v48 = result;
      uint64_t v77 = v43;
      sub_100014C7C(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
      dispatch thunk of HashFunction.init()();
      uint64_t v76 = v48;
      switch(v87 >> 62)
      {
        case 1uLL:
          unint64_t v55 = v87;
          if (v48 >> 32 < (int)v48) {
            goto LABEL_33;
          }
          sub_10000354C(v48, v87);
          uint64_t v56 = v94;
          sub_100063458((int)v48, v48 >> 32);
          uint64_t v94 = v56;
          uint64_t v53 = v48;
          unint64_t v54 = v55;
          break;
        case 2uLL:
          unint64_t v49 = v87;
          uint64_t v51 = *(void *)(v48 + 16);
          uint64_t v50 = *(void *)(v48 + 24);
          sub_10000354C(v48, v87);
          swift_retain();
          swift_retain();
          uint64_t v52 = v94;
          sub_100063458(v51, v50);
          uint64_t v94 = v52;
          if (v52) {
            goto LABEL_35;
          }
          swift_release();
          swift_release();
LABEL_17:
          uint64_t v53 = v48;
          unint64_t v54 = v49;
          break;
        case 3uLL:
          *(void *)((char *)&v97 + 6) = 0;
          *(void *)&long long v97 = 0;
          dispatch thunk of HashFunction.update(bufferPointer:)();
          uint64_t v53 = v48;
          unint64_t v54 = v87;
          break;
        default:
          *(void *)&long long v97 = v48;
          unint64_t v49 = v87;
          DWORD2(v97) = v87;
          WORD6(v97) = WORD2(v87);
          dispatch thunk of HashFunction.update(bufferPointer:)();
          goto LABEL_17;
      }
      sub_1000035EC(v53, v54);
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v15, v13);
      sub_100014C7C(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v57 = v86;
      uint64_t v58 = Digest.data.getter();
      unint64_t v60 = v59;
      (*(void (**)(char *, uint64_t))(v85 + 8))(v18, v57);
      uint64_t v61 = v93;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = v77;
      switch(v60 >> 62)
      {
        case 1uLL:
          uint64_t v63 = (int)v58;
          uint64_t v62 = v58 >> 32;
          break;
        case 2uLL:
          uint64_t v63 = *(void *)(v58 + 16);
          uint64_t v62 = *(void *)(v58 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v63 = 0;
          uint64_t v62 = BYTE6(v60);
          break;
      }
      if (v62 < v63 || v63 > 16)
      {
        __break(1u);
LABEL_33:
        __break(1u);
      }
      uint64_t v65 = Data._Representation.subscript.getter();
      unint64_t v85 = v66;
      uint64_t v86 = v65;
      unint64_t v67 = v66;
      sub_1000035EC(v58, v60);
      uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      uint64_t v69 = (uint64_t)v79;
      v68(v79, v61, v64);
      sub_10000354C(v65, v67);
      uint64_t v70 = v88;
      SESKeystore.DesignatedKey.init(designation:publicKeyIdentifier:)();
      uint64_t v72 = v81;
      int v71 = v82;
      unint64_t v73 = v92;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(&v82[*(int *)(v81 + 20)], v70, v90);
      uint64_t v74 = v91;
      void *v71 = v91;
      v71[1] = v73;
      v68((char *)v69, v61, v64);
      uint64_t v75 = v83;
      sub_100014A94((uint64_t)v71, v83);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v75, 0, 1, v72);
      swift_beginAccess();
      sub_10000354C(v74, v73);
      sub_100012A7C(v75, v69);
      swift_endAccess();
      sub_1000035EC(v76, v87);
      sub_1000035EC(v86, v85);
      sub_100014B60((uint64_t)v71);
      return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v88, v90);
    }
  }
  return result;
}

uint64_t sub_100012A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006CC8(&qword_1001C09C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100014BBC(a1, &qword_1001C09C0);
    sub_10017067C(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for SESKeystore.KeyDesignation();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_100014BBC((uint64_t)v8, &qword_1001C09C0);
  }
  else
  {
    sub_100014C18(a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1001696F8((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for SESKeystore.KeyDesignation();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100012C88(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v4 = sub_100006CC8(&qword_1001C09C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v48 = (uint64_t)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SESKeystore.KeyDesignation();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v1;
  uint64_t v12 = (uint64_t *)(v1 + qword_1001C08B8);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *v12;
  uint64_t v14 = (void *)v52;
  *uint64_t v12 = 0x8000000000000000;
  unint64_t v16 = sub_10013C344(9u);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v3 = v15;
  if (v14[3] >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    sub_100097990(v19, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = (void *)v52;
    unint64_t v20 = sub_10013C344(9u);
    if ((v3 & 1) != (v21 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v16 = v20;
  }
  while (1)
  {
    *uint64_t v12 = (uint64_t)v14;
    swift_bridgeObjectRelease();
    uint64_t v22 = *v12;
    if ((v3 & 1) == 0) {
      sub_100168E24(v16, 9, 0, (void *)*v12);
    }
    uint64_t v23 = *(void *)(v22 + 56);
    uint64_t v24 = *(void *)(v23 + 8 * v16);
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (!v25) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    sub_100099F50();
    uint64_t v14 = (void *)v52;
  }
  *(void *)(v23 + 8 * v16) = v26;
  swift_endAccess();
  uint64_t v27 = v50 + qword_1001C08B0;
  swift_beginAccess();
  if (*(void *)(*(void *)v27 + 16) && (sub_10013C344(9u), (v28 & 1) != 0))
  {
    swift_endAccess();
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1001768E0;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 32) = 0xD000000000000017;
    *(void *)(v29 + 40) = 0x800000010017A400;
    swift_errorRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    swift_endAccess();
    uint64_t v31 = v11;
    defaultLogger()();
    uint64_t v32 = v44;
    uint64_t v33 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v8, v49, v45);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v43 = v2;
      unint64_t v37 = (uint8_t *)v36;
      v51[0] = swift_slowAlloc();
      uint64_t v42 = v31;
      *(_DWORD *)unint64_t v37 = 136315138;
      v41[1] = v37 + 4;
      sub_100014C7C(qword_1001C09C8, (void (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v52 = sub_10004C3A4(v38, v39, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "MockSESKeystore clearKeyDesignation with designation %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v47);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v47);
    }
    swift_beginAccess();
    uint64_t v40 = v48;
    sub_10017067C(v49, v48);
    swift_endAccess();
    return sub_100014BBC(v40, &qword_1001C09C0);
  }
}

uint64_t sub_100013214()
{
  uint64_t v2 = v0;
  uint64_t v84 = sub_100006CC8(&qword_1001C09B8);
  uint64_t v3 = __chkstk_darwin(v84);
  uint64_t v83 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v82 = (uint64_t)v71 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v81 = (char *)v71 - v8;
  __chkstk_darwin(v7);
  uint64_t v80 = (char *)v71 - v9;
  uint64_t v10 = type metadata accessor for SESKeystore.DesignatedKey();
  uint64_t v85 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  unint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v88 = (unint64_t)v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t)&v0[qword_1001C08B8];
  swift_beginAccess();
  LODWORD(v89) = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v90 = *(void **)v16;
  uint64_t v17 = v90;
  *(void *)uint64_t v16 = 0x8000000000000000;
  unint64_t v19 = sub_10013C344(0xAu);
  uint64_t v20 = v17[2];
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21)) {
    goto LABEL_46;
  }
  LOBYTE(v1) = v18;
  if (v17[3] < v22)
  {
    sub_100097990(v22, v89);
    uint64_t v17 = v90;
    unint64_t v23 = sub_10013C344(0xAu);
    if ((v1 & 1) == (v24 & 1))
    {
      unint64_t v19 = v23;
      goto LABEL_6;
    }
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if ((v89 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_6:
  *(void *)uint64_t v16 = v17;
  swift_bridgeObjectRelease();
  BOOL v25 = *(void **)v16;
  if ((v1 & 1) == 0) {
    sub_100168E24(v19, 10, 0, *(void **)v16);
  }
  uint64_t v26 = v25[7];
  uint64_t v27 = *(void *)(v26 + 8 * v19);
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28) {
    goto LABEL_47;
  }
  *(void *)(v26 + 8 * v19) = v29;
  swift_endAccess();
  long long v30 = &v2[qword_1001C08B0];
  swift_beginAccess();
  uint64_t v31 = *(void *)v30;
  if (!*(void *)(*(void *)v30 + 16) || (unint64_t v32 = sub_10013C344(0xAu), (v33 & 1) == 0))
  {
    swift_endAccess();
    uint64_t v1 = v88;
    defaultLogger()();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "SESKeystore getDesignatedKeys", v38, 2u);
      swift_slowDealloc();
    }

    unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v14 += 8;
    v39(v1, v13);
    uint64_t v40 = (uint64_t *)&v2[qword_1001C08C8];
    swift_beginAccess();
    uint64_t v13 = *v40;
    unint64_t v19 = *(void *)(*v40 + 16);
    uint64_t v34 = &_swiftEmptyArrayStorage;
    if (!v19) {
      return (uint64_t)v34;
    }
    uint64_t v90 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100068298(0, v19, 0);
    uint64_t v16 = sub_100129FF0(v13);
    uint64_t v42 = 0;
    uint64_t v43 = v13 + 64;
    uint64_t v75 = v85 + 32;
    uint64_t v76 = (void (**)(char *, uint64_t, uint64_t))(v85 + 16);
    char v44 = *(unsigned char *)(v13 + 32);
    v71[0] = v13 + 88;
    uint64_t v78 = v12;
    uint64_t v79 = v10;
    uint64_t v77 = v13;
    unint64_t v72 = v19;
    uint64_t v73 = v41;
    uint64_t v74 = v13 + 64;
    while (1)
    {
      if (v16 < 0 || v16 >= 1 << v44)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        sub_100099F50();
        uint64_t v17 = v90;
        goto LABEL_6;
      }
      if ((*(void *)(v43 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0) {
        goto LABEL_41;
      }
      if (*(_DWORD *)(v13 + 36) != v41) {
        goto LABEL_42;
      }
      uint64_t v87 = 1 << v16;
      unint64_t v88 = (unint64_t)v16 >> 6;
      uint64_t v86 = v42;
      uint64_t v46 = v84;
      uint64_t v47 = (uint64_t)v80;
      uint64_t v48 = (uint64_t)&v80[*(int *)(v84 + 48)];
      uint64_t v49 = *(void *)(v13 + 48);
      uint64_t v50 = type metadata accessor for SESKeystore.KeyDesignation();
      uint64_t v89 = *(void *)(v50 - 8);
      uint64_t v51 = v49 + *(void *)(v89 + 72) * v16;
      uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16);
      v52(v47, v51, v50);
      uint64_t v53 = *(void *)(v13 + 56);
      unint64_t v54 = (int *)(type metadata accessor for MockSESKeystore.MockDesignatedKey(0) - 8);
      uint64_t v55 = v53 + *(void *)(*(void *)v54 + 72) * v16;
      uint64_t v56 = v48;
      sub_100014A94(v55, v48);
      uint64_t v57 = v81;
      v52((uint64_t)v81, v47, v50);
      sub_100014A94(v56, (uint64_t)&v57[*(int *)(v46 + 48)]);
      uint64_t v58 = (uint64_t)v57;
      uint64_t v1 = v82;
      sub_100014AF8(v58, v82);
      sub_100014BBC(v47, &qword_1001C09B8);
      uint64_t v59 = *(int *)(v46 + 48);
      uint64_t v2 = v83;
      uint64_t v60 = (uint64_t)&v83[v59];
      uint64_t v61 = v1 + v59;
      v52((uint64_t)v83, v1, v50);
      uint64_t v10 = v79;
      sub_100014A94(v61, v60);
      uint64_t v62 = v54[7];
      uint64_t v12 = v78;
      (*v76)(v78, v60 + v62, v10);
      sub_100014B60(v60);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v2, v50);
      sub_100014BBC(v1, &qword_1001C09B8);
      uint64_t v34 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100068298(0, v34[2] + 1, 1);
        uint64_t v34 = v90;
      }
      unint64_t v19 = v34[2];
      unint64_t v63 = v34[3];
      unint64_t v14 = v19 + 1;
      uint64_t v13 = v77;
      if (v19 >= v63 >> 1)
      {
        sub_100068298(v63 > 1, v19 + 1, 1);
        uint64_t v34 = v90;
      }
      v34[2] = v14;
      (*(void (**)(unint64_t, char *, uint64_t))(v85 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(void *)(v85 + 72) * v19, v12, v10);
      uint64_t v90 = v34;
      char v44 = *(unsigned char *)(v13 + 32);
      unint64_t v45 = 1 << v44;
      if (v16 >= 1 << v44) {
        goto LABEL_43;
      }
      uint64_t v43 = v74;
      unint64_t v64 = v88;
      uint64_t v65 = *(void *)(v74 + 8 * v88);
      if ((v65 & v87) == 0) {
        goto LABEL_44;
      }
      LODWORD(v41) = v73;
      if (*(_DWORD *)(v13 + 36) != v73) {
        goto LABEL_45;
      }
      unint64_t v66 = v65 & (-2 << (v16 & 0x3F));
      if (v66)
      {
        unint64_t v45 = __clz(__rbit64(v66)) | v16 & 0xFFFFFFFFFFFFFFC0;
        unint64_t v19 = v72;
      }
      else
      {
        unint64_t v67 = (char *)(v88 + 1);
        unint64_t v68 = (v45 + 63) >> 6;
        unint64_t v19 = v72;
        if (v88 + 1 < v68)
        {
          unint64_t v69 = *(void *)(v74 + 8 * (void)v67);
          if (!v69)
          {
            unint64_t v67 = (char *)(v88 + 2);
            if (v88 + 2 >= v68) {
              goto LABEL_17;
            }
            unint64_t v69 = *(void *)(v74 + 8 * (void)v67);
            if (!v69)
            {
              while (v68 - 3 != v64)
              {
                unint64_t v69 = *(void *)(v71[0] + 8 * v64++);
                if (v69)
                {
                  unint64_t v67 = (char *)(v64 + 2);
                  goto LABEL_32;
                }
              }
              goto LABEL_17;
            }
          }
LABEL_32:
          unint64_t v45 = __clz(__rbit64(v69)) + ((void)v67 << 6);
        }
      }
LABEL_17:
      uint64_t v42 = v86 + 1;
      uint64_t v16 = v45;
      if (v86 + 1 == v19)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v34;
      }
    }
  }
  uint64_t v34 = *(void **)(*(void *)(v31 + 56) + 8 * v32);
  swift_endAccess();
  sub_100006CC8(&qword_1001C08A0);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1001768E0;
  *(void *)(v35 + 56) = &type metadata for String;
  *(void *)(v35 + 32) = 0xD000000000000017;
  *(void *)(v35 + 40) = 0x800000010017A400;
  swift_errorRetain();
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  v71[1] = v34;
  swift_willThrow();
  return (uint64_t)v34;
}

uint64_t sub_100013AC4()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = qword_1001C08B0;
  *(void *)(v0 + v1) = sub_10004CA94((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v2 = qword_1001C08B8;
  *(void *)(v0 + v2) = sub_10004CB88((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v0 + qword_1001C08C0) = &_swiftEmptyArrayStorage;
  uint64_t v3 = qword_1001C08C8;
  swift_retain();
  *(void *)(v0 + v3) = sub_10004A7E8((uint64_t)&_swiftEmptyArrayStorage);
  swift_release();
  return SESKeystore.init()();
}

uint64_t sub_100013B60()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100013BC0()
{
  SESKeystore.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100013C40()
{
  return type metadata accessor for MockSESKeystore(0);
}

uint64_t *sub_100013C48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10000354C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for SESKeystore.DesignatedKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100013D30(uint64_t a1, uint64_t a2)
{
  sub_1000035EC(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SESKeystore.DesignatedKey();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_100013DAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10000354C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for SESKeystore.DesignatedKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_100013E44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10000354C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1000035EC(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SESKeystore.DesignatedKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100013EE4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SESKeystore.DesignatedKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100013F60(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000035EC(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for SESKeystore.DesignatedKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100013FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100014004);
}

uint64_t sub_100014004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for SESKeystore.DesignatedKey();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000140C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000140D4);
}

void *sub_1000140D4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SESKeystore.DesignatedKey();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MockSESKeystore.MockDesignatedKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C0978);
}

uint64_t sub_1000141A4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000141DC()
{
  uint64_t result = type metadata accessor for SESKeystore.DesignatedKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for MockSESKeystore.MockKey(uint64_t *a1)
{
  uint64_t result = sub_1000035EC(*a1, a1[1]);
  unint64_t v3 = a1[3];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[2];
    return sub_1000035EC(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for MockSESKeystore.MockKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000354C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_10000354C(*v6, v7);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t *assignWithCopy for MockSESKeystore.MockKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000354C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000035EC(v6, v7);
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_10000354C(*v8, v9);
      uint64_t v12 = a1[2];
      unint64_t v13 = a1[3];
      a1[2] = v11;
      a1[3] = v9;
      sub_1000035EC(v12, v13);
      return a1;
    }
    sub_100014414((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    return a1;
  }
  uint64_t v10 = *v8;
  sub_10000354C(*v8, v9);
  a1[2] = v10;
  a1[3] = v9;
  return a1;
}

uint64_t sub_100014414(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for MockSESKeystore.MockKey(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for MockSESKeystore.MockKey(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000035EC(v4, v5);
  uint64_t v6 = (uint64_t *)(a2 + 16);
  unint64_t v7 = a1[3];
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = a1[2];
      a1[2] = *v6;
      a1[3] = v8;
      sub_1000035EC(v9, v7);
      return a1;
    }
    sub_100014414((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for MockSESKeystore.MockKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MockSESKeystore.MockKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MockSESKeystore.MockKey()
{
  return &type metadata for MockSESKeystore.MockKey;
}

unsigned char *initializeBufferWithCopyOfBuffer for MockSESKeystore.Method(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MockSESKeystore.Method(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MockSESKeystore.Method(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100014724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 10;
        break;
    }
  }
  return result;
}

uint64_t sub_10001474C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100014758(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MockSESKeystore.Method()
{
  return &type metadata for MockSESKeystore.Method;
}

unint64_t sub_100014774()
{
  unint64_t result = qword_1001C09B0;
  if (!qword_1001C09B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C09B0);
  }
  return result;
}

char *sub_1000147C8(uint64_t a1)
{
  return sub_1000D0E58(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000147DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100014870(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  unsigned int v4 = sub_100014D14(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_10000354C(a1, a2);
      sub_10000354C(v5, v6);
      sub_1000147DC((int)v5, v5 >> 32);
      sub_1000035EC(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_10000354C(a1, a2);
      swift_retain();
      swift_retain();
      sub_1000147DC(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_10000354C(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return sub_10000B9DC((uint64_t)v10);
}

uint64_t sub_100014A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C09B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014B60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100014BBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006CC8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100014C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014C7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100014CC4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_1000035EC(result, a2);
    return sub_100009764(a3, a4);
  }
  return result;
}

void *sub_100014D14(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100014D5C()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100014E14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = *v1;
  uint64_t v3 = v19;
  uint64_t v4 = *(void *)(v19 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v20 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v19 - v12;
  unint64_t v14 = (char *)v1 + *(void *)(v3 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v14, v5);
  uint64_t v15 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v13, v4);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  uint64_t v16 = v21;
  uint64_t result = sub_100016064();
  if (!v16)
  {
    (*(void (**)(uint64_t))(*(void *)(v19 + 88) + 16))(result);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v4);
    char v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v11, v5);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v14, v18, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_100015118(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 32) = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = *(void *)(v5 - 8);
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_100015214, v2, 0);
}

uint64_t sub_100015214()
{
  sub_100014E14(*(void *)(v0 + 56));
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 32) + 88) + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 8) + **(int **)(v1 + 8));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  void *v2 = v0;
  v2[1] = sub_100015370;
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 80);
  return v7(v4, v5, v3, v1);
}

uint64_t sub_100015370()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  uint64_t v5 = *(void **)v1;
  v5[9] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v6 = v5[3];
    return _swift_task_switch(sub_100015518, v6, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v5[1];
    return v7();
  }
}

uint64_t sub_100015518()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001557C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = *v1;
  v2[4] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100015674, v1, 0);
}

uint64_t sub_100015674()
{
  sub_100014E14(v0[7]);
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 88) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 16) + **(int **)(v1 + 16));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  void *v2 = v0;
  v2[1] = sub_1000157CC;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  return v6(v4, v3, v1);
}

uint64_t sub_1000157CC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[9] = v1;
  swift_task_dealloc();
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[5];
  if (v1)
  {
    uint64_t v8 = v4[3];
    (*(void (**)(void, uint64_t))(v6 + 8))(v4[7], v7);
    return _swift_task_switch(sub_100015518, v8, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v6 + 8))(v4[7], v7);
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v5[1];
    return v9(a1);
  }
}

uint64_t sub_100015994(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = *v1;
  v2[4] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100015A8C, v1, 0);
}

uint64_t sub_100015A8C()
{
  sub_100014E14(v0[7]);
  uint64_t v1 = *(void *)(*(void *)(v0[4] + 88) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 32) + **(int **)(v1 + 32));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  void *v2 = v0;
  v2[1] = sub_100015370;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  return v6(v4, v3, v1);
}

uint64_t sub_100015BE4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = *v2;
  v3[5] = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100015CE0, v2, 0);
}

uint64_t sub_100015CE0()
{
  sub_100014E14(v0[8]);
  uint64_t v1 = *(void *)(*(void *)(v0[5] + 88) + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 24) + **(int **)(v1 + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  void *v2 = v0;
  v2[1] = sub_100015E38;
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  return v7(v5, v4, v3, v1);
}

uint64_t sub_100015E38(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[10] = v1;
  swift_task_dealloc();
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[6];
  if (v1)
  {
    uint64_t v8 = v4[4];
    (*(void (**)(void, uint64_t))(v6 + 8))(v4[8], v7);
    return _swift_task_switch(sub_100016000, v8, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v6 + 8))(v4[8], v7);
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v5[1];
    return v9(a1);
  }
}

uint64_t sub_100016000()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100016064()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  __chkstk_darwin(v2);
  BOOL v25 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006CC8(&qword_1001C0AA8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100016F08();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v25, enum case for DIPError.Code.idcsPayloadDecryptionFailureECV3(_:), v23);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v19 = v7;
    swift_release();
    uint64_t v10 = v20;
    uint64_t v11 = v21;
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v21, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3_SH(_:), v4);
    uint64_t v12 = *(void **)(v0 + 128);
    uint64_t v13 = type metadata accessor for DIPECIESSessionECV3SH();
    swift_allocObject();
    id v14 = v12;
    uint64_t v15 = DIPECIESSessionECV3SH.init(_:)();
    uint64_t v16 = v10;
    v24[3] = v13;
    v24[4] = &protocol witness table for DIPECIESSessionECV3;
    v24[0] = v15;
    EncryptedDataContainer.getUnencryptedData(alg:decryptor:senderSigningKey:recipientSigningKey:)();
    uint64_t v17 = v19;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v4);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v6);
    sub_10000B9DC((uint64_t)v24);
    return v24[5];
  }
}

uint64_t sub_1000164DC()
{
  v1[2] = v0;
  uint64_t v2 = *v0;
  v1[3] = *v0;
  uint64_t v3 = *(void *)(v2 + 80);
  v1[4] = v3;
  v1[5] = *(void *)(v3 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000165D4, v0, 0);
}

uint64_t sub_1000165D4()
{
  sub_100014E14(v0[6]);
  uint64_t v1 = *(void *)(*(void *)(v0[3] + 88) + 8);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 40) + **(int **)(v1 + 40));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  void *v2 = v0;
  v2[1] = sub_100016728;
  uint64_t v3 = v0[4];
  return v5(v3, v1);
}

uint64_t sub_100016728(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[8] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[2];
    (*(void (**)(void, void))(v4[5] + 8))(v4[6], v4[4]);
    return _swift_task_switch(sub_1000168B4, v5, 0);
  }
  else
  {
    (*(void (**)(void, void))(v4[5] + 8))(v4[6], v4[4]);
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v4[1];
    return v6(a1);
  }
}

uint64_t sub_1000168B4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100016918()
{
  sub_1000035EC(*(void *)(v0 + 112), *(void *)(v0 + 120));

  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000169B8()
{
  sub_100016918();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ECv3SHPayloadProcessor()
{
  return sub_100016FAC();
}

uint64_t sub_1000169FC()
{
  return v0;
}

uint64_t sub_100016A08()
{
  return sub_1000169FC();
}

uint64_t sub_100016A24(uint64_t a1, char a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100007458;
  return sub_100015118(a1, a2);
}

uint64_t sub_100016AD0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016B68;
  return sub_10001557C(a1);
}

uint64_t sub_100016B68(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_100016C68(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100016FDC;
  return sub_100015BE4(a1, a2);
}

uint64_t sub_100016D10(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016FE0;
  return sub_100015994(a1);
}

uint64_t sub_100016DAC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016FDC;
  return sub_1000164DC();
}

uint64_t sub_100016E3C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_100016E5C, v2, 0);
}

uint64_t sub_100016E5C()
{
  uint64_t v1 = sub_100016064();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

unint64_t sub_100016F08()
{
  unint64_t result = qword_1001C0AB0;
  if (!qword_1001C0AB0)
  {
    sub_100016F64(&qword_1001C0AA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C0AB0);
  }
  return result;
}

uint64_t sub_100016F64(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100016FAC()
{
  return swift_getGenericMetadata();
}

double sub_100016FE4()
{
  type metadata accessor for EnvironmentManager();
  uint64_t v0 = swift_allocObject();
  sub_100006CC8(&qword_1001C0B58);
  uint64_t v1 = (_OWORD *)swift_allocObject();
  double result = 0.0;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  *(_OWORD *)((char *)v1 + 60) = 0u;
  *(void *)(v0 + 16) = v1;
  qword_1001C4BD0 = v0;
  return result;
}

uint64_t sub_100017048@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AsyncCoreDataStore.StoreType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[1];
  uint64_t v13 = *a1;
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  if (*a1)
  {
    *a2 = v13;
    a2[1] = v12;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    a2[5] = v17;
    a2[6] = v18;
  }
  else
  {
    uint64_t v25 = v9;
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    BOOL v28 = v7;
    uint64_t v29 = v18;
    uint64_t v30 = v17;
    uint64_t v31 = v16;
    uint64_t v32 = v15;
    uint64_t v33 = v14;
    uint64_t v34 = v12;
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No environment exists, creating new environment", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v8);
    uint64_t v22 = (uint64_t)v28;
    (*(void (**)(char *, void, uint64_t))(v26 + 104))(v28, enum case for AsyncCoreDataStore.StoreType.disk(_:), v27);
    type metadata accessor for IDCSCoreDataStore();
    swift_allocObject();
    uint64_t v23 = sub_10010DD50(v22);
    *a1 = v23;
    *(_OWORD *)(a1 + 1) = 0u;
    *(_OWORD *)(a1 + 3) = 0u;
    *(_OWORD *)(a1 + 5) = 0u;
    *a2 = v23;
    *(_OWORD *)(a2 + 1) = 0u;
    *(_OWORD *)(a2 + 3) = 0u;
    *(_OWORD *)(a2 + 5) = 0u;
    swift_retain();
    uint64_t v14 = v33;
    uint64_t v12 = v34;
    uint64_t v16 = v31;
    uint64_t v15 = v32;
    uint64_t v17 = v30;
  }
  return sub_100017780(v13, v12, v14, v15, v16, v17);
}

uint64_t sub_1000172E0()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EnvironmentManager()
{
  return self;
}

uint64_t destroy for Environment(void *a1)
{
  uint64_t result = swift_release();
  if (a1[1]) {
    uint64_t result = swift_release();
  }
  if (a1[3]) {
    uint64_t result = swift_release();
  }
  if (a1[5])
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for Environment(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v4 = a2[1];
  swift_retain();
  if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    uint64_t v8 = a2[4];
    a1[3] = v7;
    a1[4] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  uint64_t v9 = a2[5];
  if (v9)
  {
    uint64_t v10 = a2[6];
    a1[5] = v9;
    a1[6] = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  }
  return a1;
}

void *assignWithCopy for Environment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      uint64_t v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  uint64_t v7 = a2[3];
  if (a1[3])
  {
    if (v7)
    {
      uint64_t v8 = a2[4];
      a1[3] = v7;
      a1[4] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[4];
    a1[3] = v7;
    a1[4] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
LABEL_15:
  uint64_t v10 = a2[5];
  if (!a1[5])
  {
    if (v10)
    {
      uint64_t v12 = a2[6];
      a1[5] = v10;
      a1[6] = v12;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v11 = a2[6];
  a1[5] = v10;
  a1[6] = v11;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Environment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      uint64_t v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  uint64_t v7 = a2[3];
  if (a1[3])
  {
    if (v7)
    {
      uint64_t v8 = a2[4];
      a1[3] = v7;
      a1[4] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[4];
    a1[3] = v7;
    a1[4] = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
LABEL_15:
  uint64_t v10 = a2[5];
  if (!a1[5])
  {
    if (v10)
    {
      uint64_t v12 = a2[6];
      a1[5] = v10;
      a1[6] = v12;
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v11 = a2[6];
  a1[5] = v10;
  a1[6] = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

uint64_t sub_100017780(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    swift_retain();
    sub_100017800(a2);
    sub_100017800(a4);
    return sub_100017800(a6);
  }
  return result;
}

uint64_t sub_100017800(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100017810(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100006CC8(&qword_1001C0B68);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Insecure.SHA1();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  __chkstk_darwin(v8);
  uint64_t v60 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Insecure.SHA1Digest();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v2 + 112);
  uint64_t v15 = v61;
  uint64_t result = dispatch thunk of SESKeystore.getPublicKey(of:)();
  if (!v15)
  {
    uint64_t v18 = result;
    unint64_t v54 = v13;
    uint64_t v55 = a2;
    uint64_t v56 = v11;
    uint64_t v57 = v14;
    uint64_t v61 = 0;
    uint64_t v51 = v5;
    uint64_t v52 = v7;
    unint64_t v19 = v17;
    id v20 = [objc_allocWithZone((Class)DCCredentialCryptoKey) init];
    uint64_t v21 = v18;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v20 setPublicKey:isa];

    uint64_t v23 = sub_10001B948(&qword_1001C0BB8, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1);
    uint64_t v25 = v59;
    char v24 = v60;
    dispatch thunk of HashFunction.init()();
    uint64_t v26 = v24;
    uint64_t v27 = v56;
    uint64_t v53 = a1;
    switch(v19 >> 62)
    {
      case 1uLL:
        uint64_t v50 = v23;
        uint64_t v49 = v21 >> 32;
        if (v21 >> 32 < (int)v21) {
          __break(1u);
        }
        v48[1] = v19 & 0x3FFFFFFFFFFFFFFFLL;
        sub_10000354C(v21, v19);
        uint64_t v30 = v61;
        sub_10006B5CC((int)v21, v49);
        uint64_t v61 = v30;
        sub_1000035EC(v21, v19);
        break;
      case 2uLL:
        uint64_t v50 = v23;
        uint64_t v28 = *(void *)(v21 + 16);
        uint64_t v49 = *(void *)(v21 + 24);
        sub_10000354C(v21, v19);
        swift_retain();
        swift_retain();
        uint64_t v29 = v61;
        sub_10006B5CC(v28, v49);
        uint64_t v61 = v29;
        if (v29)
        {
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x100017E8CLL);
        }
        swift_release();
        swift_release();
        sub_1000035EC(v21, v19);
        uint64_t v26 = v60;
        break;
      case 3uLL:
        memset(v62, 0, 14);
        goto LABEL_7;
      default:
        v62[0] = v21;
        LOWORD(v62[1]) = v19;
        BYTE2(v62[1]) = BYTE2(v19);
        BYTE3(v62[1]) = BYTE3(v19);
        BYTE4(v62[1]) = BYTE4(v19);
        BYTE5(v62[1]) = BYTE5(v19);
LABEL_7:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        sub_1000035EC(v21, v19);
        break;
    }
    uint64_t v31 = v54;
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v25);
    sub_10001B948(&qword_1001C0BC0, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1Digest);
    uint64_t v32 = Digest.data.getter();
    unint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v10);
    Class v35 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000035EC(v32, v34);
    [v20 setPublicKeyIdentifier:v35];

    uint64_t v36 = v61;
    uint64_t v37 = sub_10013FDB8(v53, v55);
    if (v36)
    {

      return sub_1000035EC(v21, v19);
    }
    else
    {
      uint64_t v39 = v37;
      unint64_t v40 = v38;
      uint64_t v41 = v20;
      Class v42 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000035EC(v39, v40);
      [v41 setCasdAttestation:v42];

      sub_10000354C(v21, v19);
      uint64_t v43 = (uint64_t)v52;
      COSEKey.init(ec2CurveIdentifier:publicKey:)();
      type metadata accessor for CBOREncoder();
      swift_allocObject();
      CBOREncoder.init()();
      sub_10001B8A4();
      uint64_t v44 = dispatch thunk of CBOREncoder.encode<A>(_:)();
      unint64_t v46 = v45;
      sub_10001B61C(v43);
      swift_release();
      Class v47 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000035EC(v44, v46);
      [v41 setPublicKeyCOSEKey:v47];

      [v41 setKeyType:2];
      [v41 setKeyUsage:0];
      sub_1000035EC(v21, v19);
      return (uint64_t)v41;
    }
  }
  return result;
}

uint64_t sub_100017E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for COSEKey();
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[23] = v8;
  v5[24] = *(void *)(v8 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  return _swift_task_switch(sub_100018044, 0, 0);
}

uint64_t sub_100018044()
{
  uint64_t v61 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v53 = v0[24];
    uint64_t v55 = v0[23];
    uint64_t v57 = v0[28];
    unint64_t v3 = v0[13];
    uint64_t v4 = v0[12];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v60[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[11] = sub_10004C3A4(v4, v3, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking if the AccountKaK exists for the given accountKeyIdentifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v6(v57, v55);
  }
  else
  {
    uint64_t v7 = v0[28];
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[24];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[29] = v6;
  uint64_t v10 = v0[12];
  unint64_t v11 = v0[13];
  v0[30] = *(void *)(v0[16] + 112);
  unint64_t v12 = sub_10013F6A0(v10, v11);
  uint64_t v14 = v12;
  unint64_t v15 = v13;
  if (v13 >> 60 == 15)
  {
    unint64_t v56 = v13;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = v0[27];
    unint64_t v20 = v0[13];
    if (v18)
    {
      uint64_t v52 = v0[12];
      uint64_t v54 = v0[23];
      uint64_t v58 = v14;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      v0[10] = sub_10004C3A4(v52, v20, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "AccountKaK doesn't exist for the given accountKeyIdentifier %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v14 = v58;
      swift_slowDealloc();

      uint64_t v22 = v19;
      uint64_t v23 = v54;
    }
    else
    {
      uint64_t v31 = v0[23];
      swift_bridgeObjectRelease_n();

      uint64_t v22 = v19;
      uint64_t v23 = v31;
    }
    v6(v22, v23);
    unint64_t v15 = v56;
    uint64_t v32 = sub_10013F298(v0[12], v0[13]);
    unint64_t v34 = v33;
    sub_10000354C(v32, v33);
  }
  else
  {
    unint64_t v59 = v12;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    char v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = v0[26];
    uint64_t v28 = v0[23];
    unint64_t v29 = v0[13];
    if (v26)
    {
      uint64_t v51 = v0[12];
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain();
      v0[9] = sub_10004C3A4(v51, v29, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "AccountKaK exists for the given accountKeyIdentifier %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v6(v27, v28);
    uint64_t v14 = v59;
    uint64_t v32 = v59;
    unint64_t v34 = v15;
  }
  v0[31] = v32;
  v0[32] = v34;
  sub_100009778(v14, v15);
  Class v35 = (void *)sub_100017810(v32, v34);
  v0[33] = v35;
  unint64_t v38 = v35;
  id v39 = [v35 casdAttestation];
  if (v39)
  {
    unint64_t v40 = v39;
    uint64_t v42 = v0[15];
    uint64_t v41 = v0[16];
    uint64_t v43 = v0[14];
    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    v0[34] = v44;
    v0[35] = v46;
    Class v47 = (void *)swift_allocObject();
    v0[36] = v47;
    v47[2] = v41;
    v47[3] = v43;
    v47[4] = v42;
    uint64_t v48 = swift_allocObject();
    v0[37] = v48;
    *(void *)(v48 + 16) = &unk_1001C0BA0;
    *(void *)(v48 + 24) = v47;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v49 = (void *)swift_task_alloc();
    v0[38] = v49;
    uint64_t v50 = sub_100006CC8(&qword_1001C0860);
    *uint64_t v49 = v0;
    v49[1] = sub_1000189B4;
    return AsyncCoreDataContainer.read<A>(_:)(v0 + 7, &unk_1001C0BA8, v48, v50);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.accountKeySigningKeyAttestationDoesntExist(_:), v0[17]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v32, v34);

    sub_1000035EC(v32, v34);
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
}

uint64_t sub_1000189B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = sub_100018F6C;
  }
  else
  {
    swift_release();
    swift_release();
    *(_OWORD *)(v2 + 320) = *(_OWORD *)(v2 + 56);
    unint64_t v3 = sub_100018AE0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100018AE0()
{
  uint64_t v1 = v0[41];
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[42] = v2;
    void *v2 = v0;
    v2[1] = sub_100018E30;
    uint64_t v3 = v0[40];
    return sub_10013FFEC(v3, v1, 0, 0xF000000000000000);
  }
  else
  {
    uint64_t v8 = v0[34];
    unint64_t v9 = v0[35];
    unint64_t v5 = v0[32];
    uint64_t v10 = (void *)v0[33];
    uint64_t v6 = v0[31];
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v0[17]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v6, v5);
    sub_1000035EC(v8, v9);

    sub_1000035EC(v6, v5);
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100018E30(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 344) = a1;
  *(void *)(v3 + 352) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1000197D0;
  }
  else {
    uint64_t v4 = sub_10001916C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100018F6C()
{
  uint64_t v2 = v0[34];
  unint64_t v1 = v0[35];
  unint64_t v3 = v0[32];
  uint64_t v4 = (void *)v0[33];
  uint64_t v5 = v0[31];
  swift_release();
  swift_release();
  sub_100009764(v5, v3);
  sub_1000035EC(v2, v1);

  sub_1000035EC(v5, v3);
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10001916C()
{
  uint64_t v1 = v0[43];
  if (!v1)
  {
    uint64_t v12 = v0[34];
    unint64_t v11 = v0[35];
    unint64_t v13 = v0[32];
    uint64_t v36 = (void *)v0[33];
    uint64_t v14 = v0[31];
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v0[17]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100009764(v14, v13);
    sub_1000035EC(v12, v11);

    sub_1000035EC(v14, v13);
    goto LABEL_6;
  }
  uint64_t v2 = v0[44];
  unint64_t v3 = (void *)v0[33];
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  CBORDecoder.init()();
  id v4 = [v3 publicKeyCOSEKey];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  sub_10001B948(&qword_1001C0BB0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  if (v2)
  {
    uint64_t v8 = v0[34];
    unint64_t v34 = v0[35];
    unint64_t v9 = v0[32];
    Class v35 = (void *)v0[33];
    uint64_t v10 = v0[31];
    sub_100009764(v10, v9);
    sub_1000035EC(v5, v7);
    swift_release();
    swift_release();
    sub_1000035EC(v8, v34);

    sub_1000035EC(v10, v9);
LABEL_6:
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  uint64_t v15 = v0[22];
  sub_1000035EC(v5, v7);
  swift_release();
  v0[5] = &type metadata for KeySigningKeySignatureProvider;
  v0[6] = &off_1001B8D28;
  v0[2] = v1;
  swift_retain_n();
  BOOL v18 = sub_100157630(v15);
  uint64_t v20 = v19;
  unint64_t v21 = v0[32];
  uint64_t v22 = v0[31];
  uint64_t v23 = v0[25];
  unint64_t v29 = (void *)v0[33];
  uint64_t v30 = v0[23];
  uint64_t v31 = (void (*)(uint64_t, uint64_t))v0[29];
  uint64_t v24 = v0[21];
  uint64_t v32 = v0[20];
  uint64_t v33 = v0[22];
  defaultLogger()();
  uint64_t v25 = swift_task_alloc();
  *(void *)(v25 + 16) = v18;
  *(void *)(v25 + 24) = v20;
  Logger.sensitive(_:)();

  sub_1000035EC(v22, v21);
  swift_release_n();
  sub_100009764(v22, v21);
  swift_task_dealloc();
  v31(v23, v30);
  sub_10001B67C((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v33, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v26 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v27 = v0[34];
  uint64_t v28 = v0[35];
  return v26(v18, v20, v27, v28);
}

uint64_t sub_1000197D0()
{
  uint64_t v1 = v0[34];
  unint64_t v2 = v0[35];
  unint64_t v3 = v0[32];
  id v4 = (void *)v0[33];
  uint64_t v5 = v0[31];
  sub_100009764(v5, v3);
  sub_1000035EC(v1, v2);

  sub_1000035EC(v5, v3);
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000199C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_100019A88, 0, 0);
}

uint64_t sub_100019A88()
{
  uint64_t v1 = v0[10];
  uint64_t v15 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[5];
  unint64_t v7 = (void *)swift_allocObject();
  v0[12] = v7;
  v7[2] = v5;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v6;
  uint64_t v8 = swift_allocObject();
  v0[13] = v8;
  *(void *)(v8 + 16) = sub_10001B9A4;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v15, v9, v2);
  swift_retain();
  unint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C0860);
  *unint64_t v11 = v0;
  v11[1] = sub_100019C30;
  uint64_t v13 = v0[11];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v13, sub_10001B9BC, v8, v12);
}

uint64_t sub_100019C30()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v6 = sub_10001B990;
  }
  else
  {
    swift_release();
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v2 + 16);
    uint64_t v6 = sub_10001B994;
  }
  return _swift_task_switch(v6, 0, 0);
}

unint64_t sub_100019DC8()
{
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000001BLL;
}

uint64_t sub_100019E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  sub_100006CC8(&qword_1001C0B68);
  v5[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for COSEKey();
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  return _swift_task_switch(sub_100019FAC, 0, 0);
}

uint64_t sub_100019FAC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = (void *)swift_allocObject();
  v0[21] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  uint64_t v5 = swift_allocObject();
  v0[22] = v5;
  *(void *)(v5 + 16) = &unk_1001C0B78;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[23] = v6;
  uint64_t v7 = sub_100006CC8(&qword_1001C0860);
  *uint64_t v6 = v0;
  v6[1] = sub_10001A108;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 7, &unk_1001C0B88, v5, v7);
}

uint64_t sub_10001A108()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10001A574;
  }
  else
  {
    swift_release();
    swift_release();
    *(_OWORD *)(v2 + 200) = *(_OWORD *)(v2 + 56);
    uint64_t v3 = sub_10001A234;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10001A234()
{
  uint64_t v1 = v0[26];
  if (v1)
  {
    v0[27] = *(void *)(v0[13] + 112);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[28] = v2;
    void *v2 = v0;
    v2[1] = sub_10001A458;
    uint64_t v3 = v0[25];
    return sub_10013FFEC(v3, v1, 0, 0xF000000000000000);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v0[14]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10001A458(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_10001ABD4;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10001A604;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001A574()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001A604()
{
  if (!v0[29])
  {
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v0[14]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  swift_retain();
  sub_100069D68(v3);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[15];
    sub_10001B61C(v0[17]);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, enum case for DIPError.Code.coseInvalidPublicKey(_:), v5);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_7:
    swift_release();
    goto LABEL_8;
  }
  uint64_t v7 = v0[30];
  uint64_t v9 = v0[11];
  unint64_t v8 = v0[12];
  (*(void (**)(void, void, void))(v0[19] + 32))(v0[20], v0[17], v0[18]);
  unint64_t v10 = sub_10013F6A0(v9, v8);
  if (v7)
  {
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    goto LABEL_7;
  }
  if (v11 >> 60 == 15)
  {
    uint64_t v14 = v0[19];
    uint64_t v32 = v0[18];
    uint64_t v33 = v0[20];
    uint64_t v16 = v0[15];
    uint64_t v15 = v0[16];
    uint64_t v17 = v0[14];
    uint64_t v19 = v0[11];
    BOOL v18 = (void *)v0[12];
    _StringGuts.grow(_:)(72);
    v20._uint64_t countAndFlagsBits = 0xD000000000000046;
    v20._object = (void *)0x800000010017A9C0;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = v19;
    v21._object = v18;
    String.append(_:)(v21);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.accountKeySigningKeyDoesntExist(_:), v17);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10001B948((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v33, v32);
    goto LABEL_8;
  }
  uint64_t v22 = v0[27];
  uint64_t v23 = v0[20];
  v0[5] = &type metadata for AccountKeySigningKeySignatureProvider;
  v0[6] = &off_1001B5BB8;
  v0[2] = v22;
  v0[3] = v10;
  v0[4] = v11;
  swift_retain();
  uint64_t v24 = sub_10015766C(v23);
  uint64_t v26 = v0[19];
  uint64_t v25 = v0[20];
  uint64_t v27 = v0[18];
  uint64_t v28 = v24;
  uint64_t v30 = v29;
  swift_release();
  sub_10001B67C((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(char *, uint64_t))v0[1];
  return v31(v28, v30);
}

uint64_t sub_10001ABD4()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001AC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_10001AD24, 0, 0);
}

uint64_t sub_10001AD24()
{
  uint64_t v1 = v0[10];
  uint64_t v15 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = (void *)swift_allocObject();
  v0[12] = v7;
  v7[2] = v5;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v6;
  uint64_t v8 = swift_allocObject();
  v0[13] = v8;
  *(void *)(v8 + 16) = sub_10001B6D4;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v15, v9, v2);
  swift_retain();
  unint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C0860);
  *unint64_t v11 = v0;
  v11[1] = sub_10001AECC;
  uint64_t v13 = v0[11];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v13, sub_10001B72C, v8, v12);
}

uint64_t sub_10001AECC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v6 = sub_10001B0D4;
  }
  else
  {
    swift_release();
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v2 + 16);
    uint64_t v6 = sub_10001B064;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001B064()
{
  *(_OWORD *)*(void *)(v0 + 32) = *(_OWORD *)(v0 + 128);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001B0D4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001B144(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100007458;
  return sub_10001AC5C(a1, a2, v6, v7, v8);
}

void sub_10001B208(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1000075AC(a1, a2);
  if (v3) {
    return;
  }
  uint64_t v6 = v5;
  unint64_t v7 = (unint64_t)sub_1000F5DBC();
  unint64_t v8 = v7;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
LABEL_12:

    swift_bridgeObjectRelease();
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v9 = *(id *)(v8 + 32);
  }
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  id v11 = [v10 identifier];

  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {

    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  *a3 = v12;
  a3[1] = v14;
}

uint64_t sub_10001B358(uint64_t a1, uint64_t *a2, int *a3)
{
  *(void *)(v3 + 32) = a1;
  uint64_t v4 = *a2;
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 40) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10001B444;
  return v7(v3 + 16, v4);
}

uint64_t sub_10001B444()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    *(_OWORD *)*(void *)(v2 + 32) = *(_OWORD *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t sub_10001B554(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C0B80 + dword_1001C0B80);
  return v8(a1, a2, v6);
}

uint64_t sub_10001B61C(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C0B68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001B67C(uint64_t a1)
{
  return a1;
}

void sub_10001B6D4(uint64_t *a1@<X8>)
{
  sub_10001B208(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_10001B6F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

double sub_10001B72C@<D0>(_OWORD *a1@<X8>)
{
  return sub_1001611E0(*(void (**)(long long *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10001B74C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001B78C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *id v9 = v3;
  v9[1] = sub_100016FE0;
  return sub_1000199C0(a1, a2, v6, v7, v8);
}

unint64_t sub_10001B850()
{
  return sub_100019DC8();
}

uint64_t sub_10001B85C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10001B8A4()
{
  unint64_t result = qword_1001C0BC8;
  if (!qword_1001C0BC8)
  {
    sub_100016F64(&qword_1001C0B68);
    sub_10001B948((unint64_t *)&unk_1001C0BD0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C0BC8);
  }
  return result;
}

uint64_t sub_10001B948(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10001B9A4(uint64_t *a1@<X8>)
{
}

double sub_10001B9BC@<D0>(_OWORD *a1@<X8>)
{
  return sub_10001B72C(a1);
}

char *sub_10001B9D4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_allocWithZone((Class)NSXPCListener);
  uint64_t v8 = v1;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v7 initWithMachServiceName:v9];

  *(void *)&v8[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_xpcListener] = v10;
  *(void *)&v8[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_dataContainer] = a1;
  swift_retain();

  uint64_t v11 = (objc_class *)type metadata accessor for BiometricStoreListener();
  v19.receiver = v8;
  v19.super_class = v11;
  uint64_t v12 = (char *)[super init];
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_xpcListener];
  uint64_t v14 = v12;
  [v13 setDelegate:v14];
  [v13 resume];
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Biometric store listener is started", v17, 2u);
    swift_slowDealloc();
  }
  swift_release();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

id sub_10001BBF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Biometric store listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_xpcListener] invalidate];
  NSString v9 = (objc_class *)type metadata accessor for BiometricStoreListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10001BDD8()
{
  return sub_10001BDF0("Biometric store connection invalidated");
}

uint64_t sub_10001BDE4()
{
  return sub_10001BDF0("Biometric store connection interrupted");
}

uint64_t sub_10001BDF0(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for BiometricStoreListener()
{
  return self;
}

id sub_10001BFE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying BiometricStoreSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  NSString v9 = (objc_class *)type metadata accessor for BiometricStoreSessionProxy();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10001C1C0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10001C2EC, 0, 0);
}

uint64_t sub_10001C2EC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy bioBindingUnboundACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v12 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v12)
  {
    sub_100014D14((void *)(v12 + 24), *(void *)(v12 + 48));
    swift_retain();
    uint64_t v13 = dispatch thunk of AppleIDVManaging.prepareBioBindingUnboundACL()();
    uint64_t v15 = v14;
    uint64_t v16 = v0[8];
    uint64_t v17 = v0[6];
    defaultLogger()();
    uint64_t v18 = swift_task_alloc();
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v15;
    Logger.cryptoParam(_:)();
    swift_task_dealloc();
    v7(v16, v17);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    objc_super v19 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v19(v13, v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v7(v8, v9);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10001C828(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002C488;
  return sub_10001C1C0();
}

uint64_t sub_10001C8D0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10001C9FC, 0, 0);
}

uint64_t sub_10001C9FC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy passcodeBindingUnboundACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v12 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v12)
  {
    sub_100014D14((void *)(v12 + 24), *(void *)(v12 + 48));
    swift_retain();
    uint64_t v13 = dispatch thunk of AppleIDVManaging.preparePasscodeBindingUnboundACL()();
    uint64_t v15 = v14;
    uint64_t v16 = v0[8];
    uint64_t v17 = v0[6];
    defaultLogger()();
    uint64_t v18 = swift_task_alloc();
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v15;
    Logger.cryptoParam(_:)();
    swift_task_dealloc();
    v7(v16, v17);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    objc_super v19 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v19(v13, v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v7(v8, v9);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10001CF38(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002C488;
  return sub_10001C8D0();
}

uint64_t sub_10001CFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10001D110, 0, 0);
}

uint64_t sub_10001D110()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  defaultLogger()();
  sub_10000354C(v1, v2);
  sub_10000354C(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v25 = v0[11];
    uint64_t v26 = v0[10];
    uint64_t v27 = v0[13];
    uint64_t v6 = v0[3];
    unint64_t v5 = v0[4];
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 136315138;
    Swift::String v8 = Data.base64EncodedString(options:)(0);
    v0[2] = sub_10004C3A4(v8._countAndFlagsBits, (unint64_t)v8._object, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    sub_1000035EC(v6, v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy setGlobalAuthACL, authACL = %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v9(v27, v26);
  }
  else
  {
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v14 = v0[3];
    unint64_t v13 = v0[4];
    sub_1000035EC(v14, v13);
    sub_1000035EC(v14, v13);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[14] = v9;
  sub_10002A72C();
  uint64_t v20 = *(void *)(v0[6] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[15] = v20;
  if (v20)
  {
    swift_retain();
    Swift::String v21 = (void *)swift_task_alloc();
    v0[16] = v21;
    *Swift::String v21 = v0;
    v21[1] = sub_10001D598;
    uint64_t v22 = v0[4];
    uint64_t v23 = v0[5];
    uint64_t v24 = v0[3];
    return sub_1000BB488(v24, v22, v23);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.badLogic(_:), v0[7]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[14];
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[10];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v15(v16, v17);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10001D598(uint64_t a1, unint64_t a2)
{
  *(void *)(*(void *)v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_10001D754;
  }
  else
  {
    sub_100009764(a1, a2);
    uint64_t v6 = sub_10001D6C8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001D6C8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001D754()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001DA10(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v8 = a1;
  a4;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v4[4] = v9;
  v4[5] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_10001DAFC;
  return sub_10001CFE0(v9, v11, a2);
}

uint64_t sub_10001DAFC()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 32);
  os_log_type_t v7 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  sub_1000035EC(v6, v5);
  uint64_t v9 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_10001DCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_10001DDFC, 0, 0);
}

uint64_t sub_10001DDFC()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  defaultLogger()();
  sub_10000354C(v1, v2);
  sub_10000354C(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v26 = v0[12];
    uint64_t v27 = v0[11];
    uint64_t v28 = v0[15];
    uint64_t v6 = v0[3];
    unint64_t v5 = v0[4];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    Swift::String v8 = Data.base64EncodedString(options:)(0);
    v0[2] = sub_10004C3A4(v8._countAndFlagsBits, (unint64_t)v8._object, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    sub_1000035EC(v6, v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy setModifiedGlobalAuthACL, modifiedAuthACL = %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v9(v28, v27);
  }
  else
  {
    uint64_t v10 = v0[15];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[12];
    uint64_t v14 = v0[3];
    unint64_t v13 = v0[4];
    sub_1000035EC(v14, v13);
    sub_1000035EC(v14, v13);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[16] = v9;
  sub_10002A72C();
  uint64_t v20 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[17] = v20;
  if (v20)
  {
    swift_retain();
    Swift::String v21 = (void *)swift_task_alloc();
    v0[18] = v21;
    *Swift::String v21 = v0;
    v21[1] = sub_10001E298;
    uint64_t v22 = v0[5];
    uint64_t v23 = v0[6];
    uint64_t v25 = v0[3];
    uint64_t v24 = v0[4];
    return sub_1000BB9CC(v25, v24, v22, v23);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v16 = v0[13];
    uint64_t v17 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v15(v16, v17);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10001E298()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10001E800, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 160) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10001E41C;
    return sub_1000CBB74(0xD000000000000012, 0x8000000100179950);
  }
}

uint64_t sub_10001E41C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[21] = a1;
  v5[22] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_10001E6B0;
  }
  else
  {
    v5[23] = a2;
    uint64_t v6 = sub_10001E544;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001E544()
{
  uint64_t v1 = (void *)v0[21];
  if ((uint64_t)v0[23] < 1)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "no bound credential present skip returning uuids", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v6 = v0[14];
    uint64_t v7 = v0[11];

    v5(v6, v7);
    swift_release();
    uint64_t v1 = &_swiftEmptyArrayStorage;
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(v1);
}

uint64_t sub_10001E6B0()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001E800()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001EAD4(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  a4;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v4[4] = v10;
  v4[5] = v12;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v4[6] = v13;
  v4[7] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v4[8] = v16;
  *uint64_t v16 = v4;
  v16[1] = sub_10001EBE4;
  return sub_10001DCBC(v10, v12, v13, v15);
}

uint64_t sub_10001EBE4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  unint64_t v6 = *(void *)(*v2 + 56);
  uint64_t v7 = *(void *)(*v2 + 48);
  unint64_t v8 = *(void *)(*v2 + 40);
  uint64_t v9 = *(void *)(*v2 + 32);
  uint64_t v10 = *(void **)(*v2 + 16);
  uint64_t v11 = *v2;
  swift_task_dealloc();

  sub_1000035EC(v7, v6);
  sub_1000035EC(v9, v8);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v13 = (void *)a1;
  }
  else if (a1)
  {
    type metadata accessor for UUID();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a1 = 0;
    uint64_t v13 = isa;
  }
  else
  {
    Class isa = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v5 + 24);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, a1);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v11 + 8);
  return v15();
}

uint64_t sub_10001EDFC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10001EF28, 0, 0);
}

uint64_t sub_10001EF28()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy globalAuthACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[10] = v7;
  v0[11] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[12] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10001F294;
    return sub_1000CA7B0(0xD000000000000012, 0x8000000100179950);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v8 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10001F294(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10001F44C;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_10001F3BC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001F3BC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 120);
  return v1(v2);
}

uint64_t sub_10001F44C()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001F6E4(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001F78C;
  return sub_10001EDFC();
}

uint64_t sub_10001F78C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  unint64_t v8 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_10001F92C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10001FA58, 0, 0);
}

uint64_t sub_10001FA58()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy deleteGlobalAuthACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[10] = v7;
  v0[11] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[12] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10001FDA0;
    return sub_1000BBFD8();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v8 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11(0);
  }
}

uint64_t sub_10001FDA0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10001FF5C;
  }
  else
  {
    *(unsigned char *)(v4 + 120) = a1 & 1;
    uint64_t v5 = sub_10001FECC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001FECC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 120);
  return v1(v2);
}

uint64_t sub_10001FF5C()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_1000201F8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000202A0;
  return sub_10001F92C();
}

uint64_t sub_1000202A0(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100020430()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10002055C, 0, 0);
}

uint64_t sub_10002055C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy globalAuthACLTemplateUUIDs", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[10] = v7;
  v0[11] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[12] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000208BC;
    return sub_1000CBB74(0xD000000000000012, 0x8000000100179950);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000208BC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 112) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10002C48C;
  }
  else
  {
    *(void *)(v6 + 120) = a2;
    *(void *)(v6 + 128) = a1;
    uint64_t v7 = sub_1000209F0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000209F0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  return v1(v2, v3);
}

uint64_t sub_100020BE8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100020C90;
  return sub_100020430();
}

uint64_t sub_100020C90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void **)(*v3 + 16);
  uint64_t v7 = *v3;
  swift_task_dealloc();

  uint64_t v8 = *(void (***)(void, void))(v5 + 24);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    v8[2](v8, 0);

    _Block_release(v8);
  }
  else
  {
    type metadata accessor for UUID();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (*)(void (**)(void, void), Class, uint64_t, void))v8[2])(v8, isa, a2, 0);

    _Block_release(v8);
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(uint64_t (**)(void))(v7 + 8);
  return v11();
}

uint64_t sub_100020E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPTrustKey();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  return _swift_task_switch(sub_100020FE8, 0, 0);
}

uint64_t sub_100020FE8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy generatePrearmTrustCertificate", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[14];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[17] = v7;
  v0[18] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[6] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[19] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[20] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100021358;
    uint64_t v15 = v0[12];
    uint64_t v16 = v0[2];
    uint64_t v17 = v0[3];
    return sub_1000BC4A8(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.badLogic(_:), v0[7]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[17];
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[13];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100021358()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100021B18, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 176) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1000214DC;
    return sub_1000CA7B0(0xD000000000000012, 0x8000000100179950);
  }
}

uint64_t sub_1000214DC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000219B4;
  }
  else {
    uint64_t v4 = sub_1000215F0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000215F0()
{
  uint64_t v1 = (void *)v0[23];
  if (v1)
  {
    uint64_t v2 = v0[12];
    uint64_t v25 = v0[11];
    uint64_t v26 = v0[10];
    uint64_t v3 = DIPTrustKey.keyBlob.getter();
    unint64_t v23 = v4;
    uint64_t v24 = v3;
    uint64_t v5 = DIPTrustKey.baaCertificate.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRetain();
    BOOL v22 = [v1 aclType] == (id)2;
    id v8 = objc_allocWithZone((Class)DCCredentialTrust);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [v8 initWithCredentialKeyBlob:isa baaCertificate:v10 pairingID:v11 isAccessibilityEnabled:v22];
    sub_1000035EC(v5, v7);
    sub_1000035EC(v24, v23);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(id))v0[1];
    return v13(v12);
  }
  else
  {
    uint64_t v16 = v0[11];
    uint64_t v15 = v0[12];
    uint64_t v17 = v0[10];
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v0[7]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    uint64_t v18 = (void (*)(uint64_t, uint64_t))v0[17];
    uint64_t v19 = v0[15];
    uint64_t v20 = v0[13];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v18(v19, v20);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_1000219B4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  unint64_t v4 = (void (*)(uint64_t, uint64_t))v0[17];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v4(v5, v6);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100021B18()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100021DE0(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  a4;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v4[4] = v10;
  v4[5] = v12;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v4[6] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v4[7] = v16;
  *uint64_t v16 = v4;
  v16[1] = sub_100021EF0;
  return sub_100020E58(v10, v12, v13, v15);
}

uint64_t sub_100021EF0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)*v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  unint64_t v8 = v5[5];
  uint64_t v9 = v5[4];
  uint64_t v10 = (void (**)(void, void, void))v5[3];
  sub_1000035EC(v9, v8);
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    ((void (**)(void, void *, void))v10)[2](v10, a1, 0);
    _Block_release(v10);
  }
  uint64_t v12 = *(uint64_t (**)(void))(v7 + 8);
  return v12();
}

uint64_t sub_1000220D8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100022208, 0, 0);
}

uint64_t sub_100022208()
{
  Swift::String v21 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[12];
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[10];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[2] = sub_10004C3A4(0xD00000000000001ALL, 0x800000010017B2D0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v3, v4);
  }
  else
  {
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[10];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[13] = v7;
  sub_10002A72C();
  uint64_t v16 = *(void *)(v0[5] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[14] = v16;
  if (v16)
  {
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[15] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100022618;
    uint64_t v19 = v0[3];
    uint64_t v18 = v0[4];
    return sub_1000BD0E4(v19, v18);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.badLogic(_:), v0[6]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v12 = v0[11];
    uint64_t v13 = v0[9];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v11(v12, v13);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100022618(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 128) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1000227DC;
  }
  else
  {
    *(void *)(v6 + 136) = a2;
    *(void *)(v6 + 144) = a1;
    uint64_t v7 = sub_10002274C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10002274C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  return v1(v2, v3);
}

uint64_t sub_1000227DC()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100022A94(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v3[4] = v7;
  v3[5] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v3[6] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_100022B70;
  return sub_1000220D8(v7, v9);
}

uint64_t sub_100022B70(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v8 = *v3;
  uint64_t v7 = *v3;
  uint64_t v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();

  sub_1000035EC(*(void *)(v7 + 32), *(void *)(v7 + 40));
  if (v4)
  {
    uint64_t v11 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v13 = (void *)v11;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000035EC(a1, a2);
    uint64_t v11 = 0;
    uint64_t v13 = isa;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v8 + 24);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v10 + 8);
  return v15();
}

uint64_t sub_100022D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  return _swift_task_switch(sub_100022E70, 0, 0);
}

uint64_t sub_100022E70()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy generatePhoneToken", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[15] = v7;
  v0[16] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[17] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[18] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000231C8;
    uint64_t v15 = v0[3];
    uint64_t v16 = v0[4];
    uint64_t v17 = v0[2];
    return sub_1000BD910(v17, v15, v16);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000231C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 152) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100023424;
  }
  else
  {
    *(void *)(v6 + 160) = a2;
    *(void *)(v6 + 168) = a1;
    uint64_t v7 = sub_1000232FC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000232FC()
{
  unint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  id v3 = objc_allocWithZone((Class)DCCredentialAuthorizationToken);
  swift_bridgeObjectRetain();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithCredentialAuthorizationToken:isa pairingID:v5];
  sub_1000035EC(v1, v2);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(id))v0[1];
  return v7(v6);
}

uint64_t sub_100023424()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000236EC(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  v5[2] = a1;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  id v10 = a1;
  id v11 = a2;
  id v12 = a3;
  a5;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v5[5] = v13;
  v5[6] = v15;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v5[7] = v18;
  uint64_t v19 = (void *)swift_task_alloc();
  v5[8] = v19;
  *uint64_t v19 = v5;
  v19[1] = sub_100023818;
  return sub_100022D3C((uint64_t)v10, v13, v15, v16, v18);
}

uint64_t sub_100023818(void *a1)
{
  uint64_t v3 = v1;
  NSString v5 = (void *)*v2;
  uint64_t v6 = *(void **)(*v2 + 24);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v9 = (void (**)(void, void, void))v5[4];
  sub_1000035EC(v5[5], v5[6]);
  if (v3)
  {
    id v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  id v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100023A20(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100023B4C, 0, 0);
}

uint64_t sub_100023B4C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy establishPrearmTrustV2", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[15] = v7;
  v0[16] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[7] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[17] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[18] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100023E98;
    uint64_t v15 = v0[6];
    return sub_1000BE4D0(v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.badLogic(_:), v0[8]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100023E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v4[19] = a2;
  v4[20] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100024298;
  }
  else {
    uint64_t v5 = sub_100023FB4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100023FB4()
{
  unint64_t v1 = v0[19];
  if (v1 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.idcsMissingProgenitorKeyAttestation(_:), v0[8]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v3 = v0[13];
    uint64_t v4 = v0[11];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v2(v3, v4);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v0[3];
    id v8 = objc_allocWithZone((Class)DCCredentialAttestation);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v10 = [v8 initWithData:isa type:1];
    sub_100009764(v7, v1);

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v11 = (uint64_t (*)(id))v0[1];
    return v11(v10);
  }
}

uint64_t sub_100024298()
{
  swift_release();
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100024544(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100024608;
  return sub_100023A20((uint64_t)v6);
}

uint64_t sub_100024608(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    id v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  id v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_1000247C0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000248EC, 0, 0);
}

uint64_t sub_1000248EC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy nonceForAuthorizationToken", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v12 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v12)
  {
    sub_100014D14((void *)(v12 + 24), *(void *)(v12 + 48));
    swift_retain();
    uint64_t v13 = dispatch thunk of AppleIDVManaging.generateNonceOnWatch()();
    unint64_t v15 = v14;
    id v16 = objc_allocWithZone((Class)DCCredentialNonce);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v18 = [v16 initWithCredentialNonce:isa];
    sub_1000035EC(v13, v15);

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(id))v0[1];
    return v19(v18);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v7(v8, v9);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100024E18(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001F78C;
  return sub_1000247C0();
}

uint64_t sub_100024EC0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100024FEC, 0, 0);
}

uint64_t sub_100024FEC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy revokeCredentialAuthorizationToken", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v12 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v12)
  {
    sub_100014D14((void *)(v12 + 24), *(void *)(v12 + 48));
    swift_retain();
    dispatch thunk of AppleIDVManaging.revokeCredentialAuthorizationToken()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v7(v8, v9);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = (uint64_t (*)(void))v0[1];
  }
  return v10();
}

uint64_t sub_100025480(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002C480;
  return sub_100024EC0();
}

uint64_t sub_100025528(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100025654, 0, 0);
}

uint64_t sub_100025654()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy prearmCredential", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[11] = v7;
  v0[12] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[3] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[13] = v13;
  if (v13)
  {
    swift_retain();
    unint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    *unint64_t v14 = v0;
    v14[1] = sub_1000259A0;
    uint64_t v15 = v0[2];
    return sub_1000BF330(v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[11];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000259A0()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100025B40;
  }
  else {
    os_log_type_t v2 = sub_100025AB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100025AB4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100025B40()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100025DEC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100025EB0;
  return sub_100025528((uint64_t)v6);
}

uint64_t sub_100025EB0()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 24);
  id v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  uint64_t v8 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_10002604C()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100026184, 0, 0);
}

uint64_t sub_100026184()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy credentialAuthenticationTokenStatus", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  sub_10002A72C();
  if (*(void *)(v0[3] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage))
  {
    swift_retain();
    uint64_t v12 = sub_1000BFDA4();
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134217984;
      v0[2] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Credential authentication token status: %lu", v15, 0xCu);
      swift_slowDealloc();
    }
    swift_release();

    v7(v0[10], v0[7]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v12);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v7(v8, v9);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100026704(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000267AC;
  return sub_10002604C();
}

uint64_t sub_1000267AC(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  id v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100026938()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100026A64, 0, 0);
}

uint64_t sub_100026A64()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy casdCertificate", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  sub_10002A72C();
  if (*(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage))
  {
    swift_retain();
    uint64_t v12 = sub_1000C002C();
    uint64_t v14 = v13;
    uint64_t v15 = v0[8];
    uint64_t v16 = v0[6];
    defaultLogger()();
    uint64_t v17 = swift_task_alloc();
    *(void *)(v17 + 16) = v12;
    *(void *)(v17 + 24) = v14;
    Logger.cryptoParam(_:)();
    swift_release();
    swift_task_dealloc();
    v7(v15, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v18 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v18(v12, v14);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v7(v8, v9);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

unint64_t sub_100026E20()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base64EncodedString(options:)(0);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

uint64_t sub_10002701C(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000270C4;
  return sub_100026938();
}

uint64_t sub_1000270C4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000035EC(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t sub_10002725C()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000273A0, 0, 0);
}

uint64_t sub_1000273A0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy globalProgenitorKeyAttestation", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[3] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[15] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[16] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100027708;
    return sub_1000C020C();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100027708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100027B94;
  }
  else {
    uint64_t v5 = sub_100027820;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100027820()
{
  uint64_t v27 = v0;
  unint64_t v1 = v0[18];
  if (v1 >> 60 == 15)
  {
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "no progenitor key attestation available", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[7];

    swift_release();
    v5(v6, v7);
    id v8 = 0;
  }
  else
  {
    uint64_t v9 = v0[17];
    sub_10000354C(v9, v0[18]);
    defaultLogger()();
    sub_10000354C(v9, v1);
    sub_10000354C(v9, v1);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[17];
    unint64_t v13 = v0[18];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[7];
    if (v12)
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)id v18 = 136315138;
      Swift::String v19 = Data.base64EncodedString(options:)(0);
      v0[2] = sub_10004C3A4(v19._countAndFlagsBits, (unint64_t)v19._object, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100009764(v14, v13);
      sub_100009764(v14, v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Progenitor key attestation retrieved : %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v15(v16, v17);
    }
    else
    {
      sub_100009764(v0[17], v0[18]);
      sub_100009764(v14, v13);

      v15(v16, v17);
    }
    uint64_t v21 = v0[17];
    unint64_t v20 = v0[18];
    id v22 = objc_allocWithZone((Class)DCCredentialAttestation);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v8 = [v22 initWithData:isa type:1];
    sub_100009764(v21, v20);

    sub_100009764(v21, v20);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(id))v0[1];
  return v24(v8);
}

uint64_t sub_100027B94()
{
  swift_release();
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100027E48(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002C498;
  return sub_10002725C();
}

uint64_t sub_100027EF0()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_100028034, 0, 0);
}

uint64_t sub_100028034()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy globalThirdPartyProgenitorKeyAttestation", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[3] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[15] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[16] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10002839C;
    return sub_1000C0784();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    id v8 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10002839C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10002C484;
  }
  else {
    uint64_t v5 = sub_1000284B4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000284B4()
{
  uint64_t v27 = v0;
  unint64_t v1 = v0[18];
  if (v1 >> 60 == 15)
  {
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "no third party progenitor key attestation available", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[7];

    swift_release();
    v5(v6, v7);
    id v8 = 0;
  }
  else
  {
    uint64_t v9 = v0[17];
    sub_10000354C(v9, v0[18]);
    defaultLogger()();
    sub_10000354C(v9, v1);
    sub_10000354C(v9, v1);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[17];
    unint64_t v13 = v0[18];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[7];
    if (v12)
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)id v18 = 136315138;
      Swift::String v19 = Data.base64EncodedString(options:)(0);
      v0[2] = sub_10004C3A4(v19._countAndFlagsBits, (unint64_t)v19._object, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100009764(v14, v13);
      sub_100009764(v14, v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Third party progenitor key attestation retrieved : %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v15(v16, v17);
    }
    else
    {
      sub_100009764(v0[17], v0[18]);
      sub_100009764(v14, v13);

      v15(v16, v17);
    }
    uint64_t v21 = v0[17];
    unint64_t v20 = v0[18];
    id v22 = objc_allocWithZone((Class)DCCredentialAttestation);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v8 = [v22 initWithData:isa type:1];
    sub_100009764(v21, v20);

    sub_100009764(v21, v20);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(id))v0[1];
  return v24(v8);
}

uint64_t sub_100028990(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002C498;
  return sub_100027EF0();
}

uint64_t sub_100028A38()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100028B64, 0, 0);
}

uint64_t sub_100028B64()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy boundAppletPresentmentACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[10] = v7;
  v0[11] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[12] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100028EA8;
    return sub_1000C0D00();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    id v8 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100028EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 112) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10001F44C;
  }
  else
  {
    *(void *)(v6 + 120) = a2;
    *(void *)(v6 + 128) = a1;
    uint64_t v7 = sub_1000209F0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100029144(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002C488;
  return sub_100028A38();
}

uint64_t sub_1000291EC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 136) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = *(void *)(v5 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v4 + 64) = v6;
  *(void *)(v4 + 72) = *(void *)(v6 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100029320, 0, 0);
}

uint64_t sub_100029320()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy refreshProgenitorKeyDesignations", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 96) = v7;
  *(void *)(v0 + 104) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(void *)(v0 + 112) = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100029678;
    char v15 = *(unsigned char *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 16);
    uint64_t v16 = *(void *)(v0 + 24);
    return sub_1000C1B94(v17, v16, v15);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 104))(*(void *)(v0 + 56), enum case for DIPError.Code.badLogic(_:), *(void *)(v0 + 40));
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 64);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100029678()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100029818;
  }
  else {
    os_log_type_t v2 = sub_10002978C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002978C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100029818()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[12];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10002AA0C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100029ACC(void *a1, char a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a1)
  {
    id v8 = a1;
    id v9 = a4;
    a1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    id v12 = a4;
    uint64_t v11 = 0xF000000000000000;
  }
  v4[4] = a1;
  v4[5] = v11;
  uint64_t v13 = (void *)swift_task_alloc();
  v4[6] = v13;
  *uint64_t v13 = v4;
  v13[1] = sub_100029BC4;
  return sub_1000291EC((uint64_t)a1, v11, a2 & 1);
}

uint64_t sub_100029BC4()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 32);
  uint64_t v7 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  sub_100009764(v6, v5);
  uint64_t v9 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100029D84()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100029EB0, 0, 0);
}

uint64_t sub_100029EB0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BiometricStoreSessionProxy clearProgenitorKeyDesignations", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[10] = v7;
  v0[11] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10002A72C();
  uint64_t v13 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  v0[12] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10002A1F8;
    return sub_1000C20E8();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10002AA0C();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10002A1F8()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10001F44C;
  }
  else {
    os_log_type_t v2 = sub_10002A30C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002A30C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002A500(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002A5A8;
  return sub_100029D84();
}

uint64_t sub_10002A5A8()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

void sub_10002A72C()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    v6._uint64_t countAndFlagsBits = 0xD000000000000022;
    v6._object = (void *)0x800000010017AFF0;
    if (!NSXPCConnection.isEntitled(_:)(v6))
    {
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v0);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v0);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for BiometricStoreSessionProxy()
{
  return self;
}

unint64_t sub_10002AA0C()
{
  unint64_t result = qword_1001C1900;
  if (!qword_1001C1900)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C1900);
  }
  return result;
}

unint64_t sub_10002AA4C()
{
  return sub_100026E20();
}

uint64_t sub_10002AA54()
{
  return sub_1000CCC90(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10002AA5C()
{
  return sub_1000CCC70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10002AA68()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0E38 + dword_1001C0E38);
  return v5(v2, v3);
}

uint64_t sub_10002AB1C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  Swift::String v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001C3B80 + dword_1001C3B80);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10002ABEC()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(void *, char, void *, void *))((char *)&dword_1001C0E58 + dword_1001C0E58);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10002ACB4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100016FE0;
  Swift::String v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001C3B70 + dword_1001C3B70);
  return v6(v2, v3, v4);
}

uint64_t sub_10002AD7C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0E78 + dword_1001C0E78);
  return v5(v2, v3);
}

uint64_t sub_10002AE34()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0E98 + dword_1001C0E98);
  return v5(v2, v3);
}

uint64_t sub_10002AEEC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0EB8 + dword_1001C0EB8);
  return v5(v2, v3);
}

uint64_t sub_10002AFA4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0ED8 + dword_1001C0ED8);
  return v5(v2, v3);
}

uint64_t sub_10002B05C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0EF8 + dword_1001C0EF8);
  return v5(v2, v3);
}

uint64_t sub_10002B114()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100016FE0;
  Swift::String v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C0F18 + dword_1001C0F18);
  return v6(v2, v3, v4);
}

uint64_t sub_10002B1D4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0F38 + dword_1001C0F38);
  return v5(v2, v3);
}

uint64_t sub_10002B28C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0F58 + dword_1001C0F58);
  return v5(v2, v3);
}

uint64_t sub_10002B344()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100016FE0;
  Swift::String v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C0F78 + dword_1001C0F78);
  return v6(v2, v3, v4);
}

uint64_t sub_10002B400()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002B458()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  Swift::String v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_1001C0F98 + dword_1001C0F98);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_10002B52C()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002B574()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100016FE0;
  Swift::String v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C0FB8 + dword_1001C0FB8);
  return v6(v2, v3, v4);
}

uint64_t sub_10002B634()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1001C0FD8 + dword_1001C0FD8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10002B700()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C0FF8 + dword_1001C0FF8);
  return v5(v2, v3);
}

uint64_t sub_10002B7B8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C1018 + dword_1001C1018);
  return v5(v2, v3);
}

uint64_t sub_10002B870()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100007458;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C1038 + dword_1001C1038);
  return v5(v2, v3);
}

uint64_t sub_10002B928()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002B978()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1001C1058 + dword_1001C1058);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10002BA44()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002BA8C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = sub_100016FE0;
  uint64_t v7 = (uint64_t (*)(void *, uint64_t, void *, void *))((char *)&dword_1001C1078 + dword_1001C1078);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10002BB58()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C1098 + dword_1001C1098);
  return v5(v2, v3);
}

uint64_t sub_10002BC10()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002BC50()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100016FE0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001C10B8 + dword_1001C10B8);
  return v5(v2, v3);
}

uint64_t sub_10002BD04()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_10002BD44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v19[1] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v9 = OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage;
  *(void *)&v3[OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage] = 0;
  uint64_t v10 = v3;
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v19[0] = v3;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Creating BiometricStoreSessionProxy", v13, 2u);
    uint64_t v3 = (char *)v19[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id result = (id)os_transaction_create();
  if (result)
  {
    *(void *)&v10[OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign();
    swift_retain();
    uint64_t v15 = sub_100128178();
    v25[3] = type metadata accessor for FeatureFlagProvider();
    v25[4] = (uint64_t)&protocol witness table for FeatureFlagProvider;
    sub_10002C3A0(v25);
    FeatureFlagProvider.init()();
    type metadata accessor for BiometricsHelper();
    swift_allocObject();
    uint64_t v16 = BiometricsHelper.init()();
    uint64_t v23 = type metadata accessor for DeviceInformationProvider();
    uint64_t v24 = &protocol witness table for DeviceInformationProvider;
    sub_10002C3A0((uint64_t *)&v22);
    DeviceInformationProvider.init()();
    type metadata accessor for BiometricStorage();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = a2;
    sub_10002C404((uint64_t)v25, (uint64_t)(v17 + 8));
    v17[13] = v15;
    type metadata accessor for AppleIDVManager();
    sub_10015A018((uint64_t *)v21);
    sub_10000B9DC((uint64_t)v25);
    sub_10002C468(v21, (uint64_t)(v17 + 3));
    v17[14] = v16;
    sub_10002C468(&v22, (uint64_t)(v17 + 15));
    *(void *)&v3[v9] = v17;

    swift_release();
    uint64_t v18 = (objc_class *)type metadata accessor for BiometricStoreSessionProxy();
    v20.receiver = v10;
    v20.super_class = v18;
    return [super init];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002C018(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  defaultLogger()();
  uint64_t v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109120;
    LODWORD(aBlock) = [v8 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Biometric store listener connection received from %d", v11, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v12 = [self interfaceWithProtocol:&OBJC_PROTOCOL___DCBiometricStoreXPCProtocol];
  [v8 setExportedInterface:v12];

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC7idcredd22BiometricStoreListener_dataContainer);
  id v15 = objc_allocWithZone((Class)type metadata accessor for BiometricStoreSessionProxy());
  swift_retain();
  id v16 = sub_10002BD44((uint64_t)Strong, v14);

  swift_release();
  [v8 setExportedObject:v16];

  uint64_t v25 = sub_10001BDD8;
  uint64_t v26 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_100127238;
  uint64_t v24 = &unk_1001B4C80;
  uint64_t v17 = _Block_copy(&aBlock);
  [v8 setInvalidationHandler:v17];
  _Block_release(v17);
  uint64_t v25 = sub_10001BDE4;
  uint64_t v26 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_100127238;
  uint64_t v24 = &unk_1001B4CA8;
  uint64_t v18 = _Block_copy(&aBlock);
  [v8 setInterruptionHandler:v18];
  _Block_release(v18);
  [v8 resume];
  swift_unknownObjectWeakDestroy();
  return 1;
}

uint64_t sub_10002C388(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002C398()
{
  return swift_release();
}

uint64_t *sub_10002C3A0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10002C404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002C468(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10002C49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_10013C484(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10002C4E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C1310);
  uint64_t v17 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_100129FF0(a1);
  if (v9) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v8)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    os_log_type_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    return v10(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v11 = (uint64_t)v6 + *(int *)(v4 + 48);
    uint64_t v12 = sub_10008F7A4(v11, result, v8, 0, a1);
    *uint64_t v6 = v12;
    v6[1] = v13;
    *a2 = v12;
    a2[1] = v13;
    uint64_t v14 = (char *)a2 + *(int *)(v4 + 48);
    uint64_t v15 = type metadata accessor for ISO18013Package.Document();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v11, v15);
    swift_bridgeObjectRetain();
    sub_100014BBC((uint64_t)v6, &qword_1001C1310);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_10002C6C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  __chkstk_darwin(v3);
  uint64_t v32 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v5 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ISO18013Package();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006CC8(&qword_1001C1368);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v29 = (uint64_t)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v28 = (char *)&v27 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = v2 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
  swift_beginAccess();
  sub_100037898(v19, (uint64_t)v18, &qword_1001C1368);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) == 1)
  {
    sub_100014BBC((uint64_t)v18, &qword_1001C1368);
    type metadata accessor for CBORDecoder();
    swift_allocObject();
    CBORDecoder.init()();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v33);
    CBORDecoder.codingKeyFormat.setter();
    uint64_t v20 = *(void *)(v2 + 112);
    unint64_t v21 = *(void *)(v2 + 120);
    sub_10000354C(v20, v21);
    sub_1000378FC(&qword_1001C1370, (void (*)(uint64_t))&type metadata accessor for ISO18013Package);
    uint64_t v22 = v35;
    dispatch thunk of CBORDecoder.decode<A>(_:from:)();
    if (v22)
    {
      sub_1000035EC(v20, v21);
      swift_release();
      (*(void (**)(char *, void, uint64_t))(v30 + 104))(v32, enum case for DIPError.Code.idcsInvalidPayload(_:), v31);
      swift_errorRetain();
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return swift_errorRelease();
    }
    sub_1000035EC(v20, v21);
    swift_release();
    uint64_t v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v28, v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v24, 0, 1, v8);
    uint64_t v25 = (uint64_t)v24;
    uint64_t v26 = v29;
    sub_100037944(v25, v29, &qword_1001C1368);
    swift_beginAccess();
    sub_1000379A8(v26, v19);
    swift_endAccess();
  }
  else
  {
    uint64_t v11 = v18;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v34, v11, v8);
}

uint64_t sub_10002CC24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v652 = a1;
  v586 = a2;
  uint64_t v4 = sub_100006CC8((uint64_t *)&unk_1001C3B50);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v569 = (uint64_t)&v548 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v573 = (uint64_t)&v548 - v7;
  uint64_t v651 = type metadata accessor for IDCSAnalytics.PayloadValidationReason();
  uint64_t v650 = *(void *)(v651 - 8);
  uint64_t v8 = __chkstk_darwin(v651);
  v648 = (char *)&v548 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v585 = (char *)&v548 - v10;
  uint64_t v11 = sub_100006CC8(&qword_1001C12B0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v581 = (uint64_t)&v548 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v595 = (uint64_t)&v548 - v14;
  uint64_t v15 = type metadata accessor for COSESignatureValidator();
  uint64_t v577 = *(void *)(v15 - 8);
  uint64_t v578 = v15;
  __chkstk_darwin(v15);
  v580 = (char *)&v548 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006CC8(&qword_1001C1318);
  __chkstk_darwin(v17 - 8);
  uint64_t v589 = (uint64_t)&v548 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for PublicKeyAlgorithm();
  uint64_t v587 = *(void *)(v19 - 8);
  uint64_t v588 = v19;
  __chkstk_darwin(v19);
  v582 = (char *)&v548 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v662 = type metadata accessor for DIPError.Code();
  uint64_t v661 = *(void *)(v662 - 8);
  uint64_t v21 = __chkstk_darwin(v662);
  v576 = (char *)&v548 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  v575 = (char *)&v548 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v574 = (char *)&v548 - v26;
  __chkstk_darwin(v25);
  v663 = (char *)&v548 - v27;
  uint64_t v619 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v601 = *(void *)(v619 - 8);
  __chkstk_darwin(v619);
  v632 = (char *)&v548 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v611 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v618 = *(void *)(v611 - 8);
  __chkstk_darwin(v611);
  unint64_t v631 = (unint64_t)&v548 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100006CC8(&qword_1001C1320);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  v630 = (uint64_t *)((char *)&v548 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  v620 = (uint64_t *)((char *)&v548 - v33);
  uint64_t v34 = type metadata accessor for COSEKey();
  uint64_t v609 = *(void *)(v34 - 8);
  uint64_t v610 = v34;
  __chkstk_darwin(v34);
  v608 = (char *)&v548 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (void *)type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo();
  uint64_t v606 = *(v36 - 1);
  v607 = v36;
  __chkstk_darwin(v36);
  v605 = (void (**)(unint64_t, uint64_t))((char *)&v548 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v617 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo();
  uint64_t v625 = *(void *)(v617 - 8);
  uint64_t v38 = __chkstk_darwin(v617);
  v584 = (char *)&v548 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v616 = (char *)&v548 - v40;
  uint64_t v633 = type metadata accessor for Date();
  uint64_t v621 = *(void *)(v633 - 8);
  uint64_t v41 = __chkstk_darwin(v633);
  v593 = (char *)&v548 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  v592 = (char *)&v548 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v600 = (char *)&v548 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v599 = (uint64_t)&v548 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v604 = (uint64_t)&v548 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v603 = (void (**)(char *, uint64_t))((char *)&v548 - v52);
  uint64_t v53 = __chkstk_darwin(v51);
  v622 = (char *)&v548 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v623 = (char *)&v548 - v56;
  __chkstk_darwin(v55);
  v624 = (char *)&v548 - v57;
  uint64_t v58 = sub_100006CC8(&qword_1001C1328);
  __chkstk_darwin(v58 - 8);
  v626 = (char *)&v548 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v627 = type metadata accessor for ISO18013DigestAlgorithm();
  uint64_t v628 = *(void *)(v627 - 8);
  __chkstk_darwin(v627);
  v629 = (char *)&v548 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v639 = sub_100006CC8(&qword_1001C1330);
  v636 = *(void (***)(void, void))(v639 - 8);
  __chkstk_darwin(v639);
  uint64_t v638 = (uint64_t)&v548 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v634 = type metadata accessor for ISO18013MobileSecurityObject();
  uint64_t v635 = *(void *)(v634 - 8);
  __chkstk_darwin(v634);
  v637 = (char *)&v548 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v640 = type metadata accessor for COSE_Sign1();
  uint64_t v641 = *(void *)(v640 - 8);
  __chkstk_darwin(v640);
  v643 = (char *)&v548 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100006CC8(&qword_1001C1300);
  __chkstk_darwin(v64 - 8);
  v655 = (uint64_t *)((char *)&v548 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v645 = type metadata accessor for ISO18013Package.Document();
  uint64_t v642 = *(void *)(v645 - 8);
  __chkstk_darwin(v645);
  v644 = (char *)&v548 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v646 = type metadata accessor for ISO18013Package();
  uint64_t v647 = *(void *)(v646 - 8);
  __chkstk_darwin(v646);
  uint64_t v665 = (uint64_t)&v548 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v654 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v653 = *(void *)(v654 - 8);
  uint64_t v68 = __chkstk_darwin(v654);
  v596 = (char *)&v548 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  int v71 = (char *)&v548 - v70;
  uint64_t v72 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = __chkstk_darwin(v72);
  v579 = (char *)&v548 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __chkstk_darwin(v74);
  v572 = (char *)&v548 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  v590 = (char *)&v548 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v583 = (char *)&v548 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v594 = (char *)&v548 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  v591 = (char *)&v548 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  v597 = (char *)&v548 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  v598 = (char *)&v548 - v89;
  uint64_t v90 = __chkstk_darwin(v88);
  v602 = (char *)&v548 - v91;
  uint64_t v92 = __chkstk_darwin(v90);
  v612 = (char *)&v548 - v93;
  __chkstk_darwin(v92);
  uint64_t v95 = (char *)&v548 - v94;
  uint64_t v96 = type metadata accessor for IDCSAnalytics.PayloadValidationResult();
  uint64_t v97 = __chkstk_darwin(v96);
  v667 = (uint64_t *)((char *)&v548 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v97);
  uint64_t v668 = v99;
  size_t v100 = *(void (**)(void))(v99 + 104);
  v658 = (char *)&v548 - v101;
  unsigned int v649 = enum case for IDCSAnalytics.PayloadValidationResult.valid(_:);
  uint64_t v660 = v102;
  uint64_t v659 = v99 + 104;
  v666 = v100;
  v100();
  defaultLogger()();
  Logger.sensitive(_:)();
  unint64_t v103 = *(void (**)(char *, uint64_t))(v73 + 8);
  v570 = v95;
  uint64_t v614 = v72;
  uint64_t v615 = v73 + 8;
  v613 = v103;
  v103(v95, v72);
  id v571 = self;
  id v104 = [v571 standardUserDefaults];
  v105._uint64_t countAndFlagsBits = 0xD000000000000025;
  v105._object = (void *)0x800000010017B700;
  LOBYTE(v72) = NSUserDefaults.internalBool(forKey:)(v105);

  if (v72)
  {
    uint64_t v106 = *(void *)(v3 + 112);
    uint64_t v107 = *(char **)(v3 + 120);
    sub_10000354C(v106, (unint64_t)v107);
    sub_100064FF4(v106, v107);
    sub_1000035EC(v106, (unint64_t)v107);
  }
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  uint64_t v108 = CBORDecoder.init()();
  uint64_t v109 = v3 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat;
  uint64_t v110 = v653 + 16;
  uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v653 + 16);
  v111(v71, v3 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v654);
  CBORDecoder.codingKeyFormat.setter();
  uint64_t v112 = v664;
  sub_10002C6C8(v665);
  uint64_t v664 = v112;
  if (v112)
  {
    swift_release();
    v655 = 0;
    uint64_t v656 = 0;
    unint64_t v657 = 0;
    uint64_t v113 = v660;
    unint64_t v114 = v658;
    uint64_t v115 = v666;
    goto LABEL_18;
  }
  v564 = v111;
  uint64_t v565 = v109;
  uint64_t v566 = v110;
  uint64_t v567 = v3;
  uint64_t v568 = v108;
  uint64_t v116 = ISO18013Package.version.getter();
  unint64_t v118 = sub_10016ACD8(v116, v117);
  char v120 = v119;
  swift_bridgeObjectRelease();
  if ((v120 & 1) != 0 || v118 != (void *)1)
  {
    unint64_t v114 = v658;
    uint64_t v137 = v660;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    ((void (*)(char *, void, uint64_t))v666)(v114, enum case for IDCSAnalytics.PayloadValidationResult.unknownPackageVersion(_:), v137);
    v669[0] = 0;
    v669[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v669[0] = 0xD00000000000001CLL;
    v669[1] = 0x800000010017B780;
    uint64_t v138 = v665;
    v139._uint64_t countAndFlagsBits = ISO18013Package.version.getter();
    String.append(_:)(v139);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v140 = swift_allocError();
    uint64_t v115 = v666;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v140;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v138, v646);
    v655 = 0;
    uint64_t v656 = 0;
    unint64_t v657 = 0;
    goto LABEL_13;
  }
  uint64_t v121 = v665;
  uint64_t v122 = *(void *)(ISO18013Package.documents.getter() + 16);
  swift_bridgeObjectRelease();
  BOOL v123 = v122 == 1;
  uint64_t v115 = v666;
  if (!v123)
  {
    char v141 = v658;
    uint64_t v142 = v660;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    ((void (*)(char *, void, uint64_t))v115)(v141, enum case for IDCSAnalytics.PayloadValidationResult.invalidDocumentCount(_:), v142);
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v143 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v143;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v121, v646);
    v655 = 0;
    uint64_t v656 = 0;
    unint64_t v657 = 0;
    uint64_t v113 = v142;
    unint64_t v114 = v141;
    goto LABEL_18;
  }
  uint64_t v124 = ISO18013Package.documents.getter();
  unint64_t v125 = v655;
  sub_10002C4E0(v124, v655);
  swift_bridgeObjectRelease();
  uint64_t v126 = sub_100006CC8(&qword_1001C1310);
  LODWORD(v127) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48))(v125, 1, v126);
  if (v127 == 1) {
    goto LABEL_334;
  }
  uint64_t v656 = *v125;
  unint64_t v657 = v125[1];
  uint64_t v128 = v642;
  uint64_t v129 = v644;
  (*(void (**)(char *, char *, uint64_t))(v642 + 32))(v644, (char *)v125 + *(int *)(v126 + 48), v645);
  size_t v130 = v643;
  ISO18013Package.Document.issuerAuth.getter();
  uint64_t v131 = COSE_Sign1.payload.getter();
  if (v132 >> 60 == 15)
  {
    char v133 = v658;
    uint64_t v134 = v660;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    char v135 = v666;
    ((void (*)(char *, void, uint64_t))v666)(v133, enum case for IDCSAnalytics.PayloadValidationResult.missingMSO(_:), v134);
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v115 = v135;
    uint64_t v136 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v136;
    swift_willThrow();
    swift_release();
    (*(void (**)(char *, uint64_t))(v641 + 8))(v130, v640);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v645);
    (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
    v655 = 0;
    uint64_t v113 = v134;
    unint64_t v114 = v658;
    goto LABEL_18;
  }
  unint64_t v144 = v132;
  uint64_t v145 = v131;
  sub_10003783C();
  uint64_t v146 = v638;
  unint64_t v147 = v639;
  uint64_t v148 = v664;
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  uint64_t v149 = v660;
  unint64_t v563 = v144;
  if (v148)
  {
    v150 = v658;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    v151 = v666;
    ((void (*)(char *, void, uint64_t))v666)(v150, enum case for IDCSAnalytics.PayloadValidationResult.invalidMSO(_:), v149);
    uint64_t v113 = v149;
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.internalError(_:), v662);
    swift_errorRetain();
    uint64_t v664 = sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v115 = v151;
    uint64_t v152 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v152;
    swift_willThrow();
    uint64_t v153 = v145;
    unint64_t v114 = v150;
    sub_100009764(v153, v563);
    swift_release();
    swift_errorRelease();
LABEL_16:
    (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
LABEL_17:
    (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
    (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
    v655 = 0;
    goto LABEL_18;
  }
  uint64_t v562 = v145;
  CBOREncodedCBOR.value.getter();
  v636[1](v146, v147);
  uint64_t v163 = ISO18013MobileSecurityObject.version.getter();
  v165 = sub_10016ACD8(v163, v164);
  char v167 = v166;
  swift_bridgeObjectRelease();
  unint64_t v168 = v657;
  if ((v167 & 1) != 0 || v165 != (void *)1)
  {
    unint64_t v114 = v658;
    uint64_t v171 = v660;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    ((void (*)(char *, void, uint64_t))v666)(v114, enum case for IDCSAnalytics.PayloadValidationResult.unknownMSOVersion(_:), v171);
    v669[0] = 0;
    v669[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v669[0] = 0xD000000000000018;
    v669[1] = 0x800000010017B810;
    v172._uint64_t countAndFlagsBits = ISO18013MobileSecurityObject.version.getter();
    String.append(_:)(v172);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v173 = swift_allocError();
    uint64_t v115 = v666;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v173;
    swift_willThrow();
    sub_100009764(v562, v563);
    swift_release();
    (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
    (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
    (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
    (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
    v655 = 0;
    goto LABEL_13;
  }
  if (ISO18013MobileSecurityObject.docType.getter() == v656 && v169 == v168)
  {
    swift_bridgeObjectRelease();
    uint64_t v170 = (uint64_t)v626;
  }
  else
  {
    char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v175 = v643;
    uint64_t v170 = (uint64_t)v626;
    if ((v174 & 1) == 0)
    {
      v206 = v658;
      uint64_t v113 = v660;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
      v207 = v666;
      ((void (*)(char *, void, uint64_t))v666)(v206, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentDocType(_:), v113);
      (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v115 = v207;
      uint64_t v208 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v664 = v208;
      swift_willThrow();
      sub_100009764(v562, v563);
      swift_release();
      (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
      unint64_t v114 = v206;
      (*(void (**)(char *, uint64_t))(v641 + 8))(v175, v640);
      goto LABEL_17;
    }
  }
  v176 = v637;
  ISO18013MobileSecurityObject.digestAlgorithm.getter();
  ISO18013DigestAlgorithm.init(rawValue:)();
  uint64_t v177 = v628;
  uint64_t v178 = v627;
  int v179 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v628 + 48))(v170, 1, v627);
  uint64_t v113 = v660;
  if (v179 == 1)
  {
    unint64_t v114 = v658;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    sub_100014BBC(v170, &qword_1001C1328);
    v180 = v176;
    v181 = v666;
    ((void (*)(char *, void, uint64_t))v666)(v114, enum case for IDCSAnalytics.PayloadValidationResult.unknownDigestAlgorithm(_:), v113);
    v669[0] = 0;
    v669[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v669[0] = 0xD00000000000001DLL;
    v669[1] = 0x800000010017B870;
    v182._uint64_t countAndFlagsBits = ISO18013MobileSecurityObject.digestAlgorithm.getter();
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    uint64_t v664 = v669[0];
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v183 = swift_allocError();
    uint64_t v115 = v181;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v183;
    swift_willThrow();
    sub_100009764(v562, v563);
    swift_release();
    (*(void (**)(char *, uint64_t))(v635 + 8))(v180, v634);
    goto LABEL_16;
  }
  v636 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v177 + 32))(v629, v170, v178);
  Date.init()();
  v184 = v616;
  ISO18013MobileSecurityObject.validityInfo.getter();
  v185 = v623;
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
  uint64_t v187 = v625 + 8;
  v186 = *(void (**)(char *, uint64_t))(v625 + 8);
  uint64_t v188 = v617;
  v186(v184, v617);
  ISO18013MobileSecurityObject.validityInfo.getter();
  v189 = v622;
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter();
  uint64_t v625 = v187;
  v561 = v186;
  v186(v184, v188);
  if (static Date.< infix(_:_:)())
  {
    v190 = v612;
    defaultLogger()();
    uint64_t v191 = v621;
    v192 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v621 + 16);
    v193 = v603;
    v194 = v185;
    uint64_t v195 = v633;
    v192(v603, v194, v633);
    uint64_t v196 = v604;
    v192((void (**)(char *, uint64_t))v604, (char *)v193, v195);
    v197 = *(void (**)(void, uint64_t))(v191 + 8);
    v197(v193, v195);
    v198 = Logger.logObject.getter();
    os_log_type_t v199 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v198, v199))
    {
      uint64_t v200 = swift_slowAlloc();
      uint64_t v664 = swift_slowAlloc();
      v669[0] = v664;
      *(_DWORD *)uint64_t v200 = 136315138;
      v655 = (uint64_t *)(v200 + 4);
      sub_1000378FC(&qword_1001C1358, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v201 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t __s2 = sub_10004C3A4(v201, v202, v669);
      uint64_t v203 = v660;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v197(v196, v633);
      uint64_t v204 = v203;
      _os_log_impl((void *)&_mh_execute_header, v198, v199, "MSO is not yet valid. Valid from = %s", (uint8_t *)v200, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v195 = v633;
      swift_slowDealloc();

      v613(v612, v614);
      v205 = v658;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v203);
    }
    else
    {

      v197(v196, v195);
      v613(v190, v614);
      v205 = v658;
      uint64_t v204 = v660;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    }
    v224 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.notYetValidMSO(_:);
LABEL_45:
    ((void (*)(char *, void, uint64_t))v666)(v205, *v224, v204);
    goto LABEL_46;
  }
  char v209 = static Date.> infix(_:_:)();
  v205 = v658;
  uint64_t v195 = v633;
  if (v209)
  {
    v210 = v189;
    uint64_t v211 = (uint64_t)v602;
    defaultLogger()();
    uint64_t v212 = v621;
    v213 = *(void (**)(uint64_t, char *, uint64_t))(v621 + 16);
    uint64_t v214 = v599;
    v213(v599, v210, v195);
    v215 = v600;
    v213((uint64_t)v600, (char *)v214, v195);
    v216 = *(void (**)(uint64_t, uint64_t))(v212 + 8);
    v216(v214, v195);
    v217 = Logger.logObject.getter();
    os_log_type_t v218 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v217, v218))
    {
      uint64_t v219 = swift_slowAlloc();
      uint64_t v664 = swift_slowAlloc();
      v669[0] = v664;
      *(_DWORD *)uint64_t v219 = 136315138;
      v655 = (uint64_t *)(v219 + 4);
      sub_1000378FC(&qword_1001C1358, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v220 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t __s2 = sub_10004C3A4(v220, v221, v669);
      v222 = v215;
      uint64_t v223 = v660;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v216((uint64_t)v222, v633);
      uint64_t v204 = v223;
      _os_log_impl((void *)&_mh_execute_header, v217, v218, "MSO is expired. Valid until = %s", (uint8_t *)v219, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v195 = v633;
      swift_slowDealloc();

      v613(v602, v614);
      v205 = v658;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v223);
    }
    else
    {

      v216((uint64_t)v215, v195);
      v613((char *)v211, v614);
      v205 = v658;
      uint64_t v204 = v660;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    }
    v224 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.expiredMSO(_:);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v225 = ISO18013Package.Document.namespaces.getter();
  uint64_t v226 = *(void *)(ISO18013MobileSecurityObject.valueDigests.getter() + 16);
  swift_bridgeObjectRelease();
  if (v226 != *(void *)(v225 + 16))
  {
    uint64_t v113 = v660;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v205, v660);
    swift_bridgeObjectRelease();
    v234 = v666;
    ((void (*)(char *, void, uint64_t))v666)(v205, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentNamespaceCount(_:), v113);
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v235 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v235;
    swift_willThrow();
    sub_100009764(v562, v563);
    swift_release();
    v236 = *(void (**)(char *, uint64_t))(v621 + 8);
    v236(v622, v195);
    v236(v623, v195);
    v236(v624, v195);
    unint64_t v114 = v205;
    uint64_t v115 = v234;
    (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
    (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
    goto LABEL_16;
  }
  uint64_t v604 = v225;
  v227 = v605;
  ISO18013MobileSecurityObject.deviceKeyInfo.getter();
  v228 = v608;
  ISO18013MobileSecurityObject.DeviceKeyInfo.deviceKey.getter();
  (*(void (**)(void, void *))(v606 + 8))(v227, v607);
  uint64_t v229 = COSEKey.publicKeyIdentifier.getter();
  unint64_t v231 = v230;
  (*(void (**)(char *, uint64_t))(v609 + 8))(v228, v610);
  uint64_t v113 = v660;
  if (v231 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v668 + 8))(v205, v660);
    swift_bridgeObjectRelease();
    ((void (*)(char *, void, uint64_t))v666)(v205, enum case for IDCSAnalytics.PayloadValidationResult.missingDeviceKeyIdentifier(_:), v113);
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v232 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v232;
    swift_willThrow();
    sub_100009764(v562, v563);
    swift_release();
    v233 = *(void (**)(char *, uint64_t))(v621 + 8);
    v233(v622, v195);
    v233(v623, v195);
    v233(v624, v195);
    uint64_t v115 = v666;
    (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
    (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
    (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
    (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
    (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
    v655 = 0;
    unint64_t v114 = v205;
    goto LABEL_18;
  }
  uint64_t v557 = v229;
  unint64_t v558 = v231;
  uint64_t v127 = (uint64_t *)sub_10003467C(v656, v657, v604);
  v655 = v127;
  if (!v237)
  {
    uint64_t v127 = (uint64_t *)sub_100036D50(v656, v657);
    v655 = v127;
  }
  uint64_t v238 = v237;
  uint64_t v239 = v611;
  uint64_t v240 = v601;
  int64_t v241 = 0;
  uint64_t v242 = *(void *)(v604 + 64);
  uint64_t v556 = v604 + 64;
  uint64_t v243 = 1 << *(unsigned char *)(v604 + 32);
  if (v243 < 64) {
    uint64_t v244 = ~(-1 << v243);
  }
  else {
    uint64_t v244 = -1;
  }
  unint64_t v245 = v244 & v242;
  int64_t v246 = (unint64_t)(v243 + 63) >> 6;
  uint64_t v601 = v618 + 16;
  uint64_t v606 = v618 + 32;
  v603 = (void (**)(char *, uint64_t))(v240 + 8);
  v605 = (void (**)(unint64_t, uint64_t))(v618 + 8);
  uint64_t v560 = v237;
  int64_t v552 = v246;
  if (!v245) {
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v553 = (v245 - 1) & v245;
  int64_t v554 = v241;
  unint64_t v247 = __clz(__rbit64(v245)) | (v241 << 6);
LABEL_69:
  v252 = (uint64_t *)(*(void *)(v604 + 48) + 16 * v247);
  uint64_t v253 = *v252;
  v254 = (void *)v252[1];
  v255 = *(char **)(*(void *)(v604 + 56) + 8 * v247);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v256 = ISO18013MobileSecurityObject.valueDigests.getter();
  swift_bridgeObjectRetain();
  v602 = (char *)v253;
  uint64_t v257 = sub_10002C49C(v253, (uint64_t)v254, v256);
  v607 = v254;
  swift_bridgeObjectRelease();
  LODWORD(v127) = swift_bridgeObjectRelease();
  v258 = v630;
  uint64_t v609 = v257;
  if (!v257)
  {
    unint64_t v114 = v658;
    uint64_t v401 = v660;
    (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
    swift_bridgeObjectRelease();
    ((void (*)(char *, void, uint64_t))v666)(v114, enum case for IDCSAnalytics.PayloadValidationResult.missingNamespaceInMSO(_:), v401);
    v669[0] = 0;
    v669[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v669[0] = 0xD000000000000012;
    v669[1] = 0x800000010017B900;
    v402._uint64_t countAndFlagsBits = (uint64_t)v602;
    v402._object = v607;
    String.append(_:)(v402);
    swift_bridgeObjectRelease();
    v403._uint64_t countAndFlagsBits = 0x6F736D206E6920;
    v403._object = (void *)0xE700000000000000;
    String.append(_:)(v403);
    (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v399 = v195;
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v404 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v664 = v404;
    swift_willThrow();
    sub_100009764(v557, v558);
    sub_100009764(v562, v563);
    swift_release();
    goto LABEL_239;
  }
  uint64_t v259 = 0;
  uint64_t v260 = *((void *)v255 + 8);
  v559 = v255 + 64;
  uint64_t v261 = 1 << v255[32];
  if (v261 < 64) {
    uint64_t v262 = ~(-1 << v261);
  }
  else {
    uint64_t v262 = -1;
  }
  unint64_t v263 = v262 & v260;
  v600 = (char *)((unint64_t)(v261 + 63) >> 6);
  v551 = v600 - 1;
  v608 = v255;
  while (1)
  {
    if (v263)
    {
      uint64_t v664 = (v263 - 1) & v263;
      unint64_t v265 = __clz(__rbit64(v263)) | (v259 << 6);
      goto LABEL_78;
    }
    uint64_t v274 = v259 + 1;
    if (__OFADD__(v259, 1))
    {
      __break(1u);
      goto LABEL_308;
    }
    v273 = v620;
    if (v274 >= (uint64_t)v600) {
      goto LABEL_87;
    }
    unint64_t v275 = *(void *)&v559[8 * v274];
    if (v275) {
      goto LABEL_82;
    }
    if (v259 + 2 >= (uint64_t)v600)
    {
      ++v259;
      goto LABEL_87;
    }
    unint64_t v275 = *(void *)&v559[8 * v259 + 16];
    if (v275)
    {
      uint64_t v274 = v259 + 2;
      goto LABEL_82;
    }
    if (v259 + 3 >= (uint64_t)v600)
    {
      uint64_t v195 = v633;
      uint64_t v238 = v560;
      uint64_t v239 = v611;
      v258 = v630;
      v273 = v620;
      v259 += 2;
      goto LABEL_87;
    }
    unint64_t v275 = *(void *)&v559[8 * v259 + 24];
    if (v275)
    {
      uint64_t v274 = v259 + 3;
LABEL_210:
      uint64_t v238 = v560;
      uint64_t v239 = v611;
      v258 = v630;
      v255 = v608;
LABEL_82:
      uint64_t v664 = (v275 - 1) & v275;
      unint64_t v265 = __clz(__rbit64(v275)) + (v274 << 6);
      uint64_t v259 = v274;
LABEL_78:
      uint64_t v266 = *((void *)v255 + 7);
      v267 = (void *)(*((void *)v255 + 6) + 16 * v265);
      uint64_t v268 = v267[1];
      void *v258 = *v267;
      v258[1] = v268;
      uint64_t v269 = v618;
      uint64_t v270 = v266 + *(void *)(v618 + 72) * v265;
      uint64_t v271 = sub_100006CC8(&qword_1001C1348);
      v272 = *(void (**)(char *, uint64_t, uint64_t))(v269 + 16);
      v258 = v630;
      v272((char *)v630 + *(int *)(v271 + 48), v270, v239);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v271 - 8) + 56))(v258, 0, 1, v271);
      swift_bridgeObjectRetain();
      uint64_t v195 = v633;
      v273 = v620;
      goto LABEL_88;
    }
    v356 = (char *)(v259 + 4);
    if (v259 + 4 >= (uint64_t)v600)
    {
      v259 += 3;
      goto LABEL_220;
    }
    unint64_t v275 = *(void *)&v559[8 * (void)v356];
    if (v275)
    {
      uint64_t v274 = v259 + 4;
      goto LABEL_210;
    }
    while (1)
    {
      uint64_t v274 = (uint64_t)(v356 + 1);
      if (__OFADD__(v356, 1))
      {
        __break(1u);
        goto LABEL_357;
      }
      if (v274 >= (uint64_t)v600) {
        break;
      }
      uint64_t v238 = v560;
      unint64_t v275 = *(void *)&v559[8 * v274];
      ++v356;
      uint64_t v239 = v611;
      v258 = v630;
      v255 = v608;
      if (v275) {
        goto LABEL_82;
      }
    }
    uint64_t v259 = (uint64_t)v551;
LABEL_220:
    uint64_t v195 = v633;
    uint64_t v238 = v560;
    uint64_t v239 = v611;
    v258 = v630;
    v273 = v620;
LABEL_87:
    uint64_t v276 = sub_100006CC8(&qword_1001C1348);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v276 - 8) + 56))(v258, 1, 1, v276);
    uint64_t v664 = 0;
LABEL_88:
    sub_100037944((uint64_t)v258, (uint64_t)v273, &qword_1001C1320);
    uint64_t v277 = sub_100006CC8(&qword_1001C1348);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v277 - 8) + 48))(v273, 1, v277) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LODWORD(v127) = swift_release();
      unint64_t v245 = v553;
      int64_t v241 = v554;
      int64_t v246 = v552;
      if (v553) {
        goto LABEL_56;
      }
LABEL_57:
      BOOL v248 = __OFADD__(v241, 1);
      int64_t v249 = v241 + 1;
      if (v248) {
        goto LABEL_327;
      }
      if (v249 < v246)
      {
        unint64_t v250 = *(void *)(v556 + 8 * v249);
        if (!v250)
        {
          if (v249 + 1 >= v246) {
            goto LABEL_240;
          }
          unint64_t v250 = *(void *)(v556 + 8 * (v249 + 1));
          if (v250)
          {
            ++v249;
          }
          else
          {
            int64_t v251 = v249 + 2;
            if (v249 + 2 >= v246) {
              goto LABEL_240;
            }
            unint64_t v250 = *(void *)(v556 + 8 * v251);
            if (!v250)
            {
              int64_t v251 = v249 + 3;
              if (v249 + 3 >= v552) {
                goto LABEL_240;
              }
              unint64_t v250 = *(void *)(v556 + 8 * v251);
              if (!v250)
              {
                while (1)
                {
                  int64_t v249 = v251 + 1;
                  if (__OFADD__(v251, 1)) {
                    break;
                  }
                  if (v249 >= v552) {
                    goto LABEL_240;
                  }
                  unint64_t v250 = *(void *)(v556 + 8 * v249);
                  ++v251;
                  uint64_t v195 = v633;
                  uint64_t v238 = v560;
                  uint64_t v239 = v611;
                  if (v250) {
                    goto LABEL_68;
                  }
                }
                __break(1u);
LABEL_348:
                __break(1u);
LABEL_349:
                __break(1u);
LABEL_350:
                __break(1u);
LABEL_351:
                __break(1u);
LABEL_352:
                __break(1u);
                goto LABEL_353;
              }
            }
            int64_t v249 = v251;
            uint64_t v195 = v633;
            uint64_t v238 = v560;
            uint64_t v239 = v611;
          }
        }
LABEL_68:
        uint64_t v553 = (v250 - 1) & v250;
        int64_t v554 = v249;
        unint64_t v247 = __clz(__rbit64(v250)) + (v249 << 6);
        goto LABEL_69;
      }
LABEL_240:
      swift_release();
      v406 = (void *)COSE_Sign1.x509Chain.getter();
      if (v406)
      {
        if (v406[2])
        {
          uint64_t v408 = v406[4];
          unint64_t v407 = v406[5];
          sub_10000354C(v408, v407);
          swift_bridgeObjectRelease();
          uint64_t v638 = v408;
          unint64_t v639 = v407;
          v409 = v636;
          v410 = (void *)decodeCertificate(fromDER:)();
          uint64_t v238 = (uint64_t)v409;
          if (v409)
          {
            v411 = v658;
            uint64_t v412 = v660;
            (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
            v413 = v666;
            ((void (*)(char *, void, uint64_t))v666)(v411, enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerCertificate(_:), v412);
            (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:), v662);
            swift_errorRetain();
            sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            uint64_t v414 = swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            uint64_t v664 = v414;
            swift_willThrow();
            sub_100009764(v557, v558);
            sub_100009764(v562, v563);
            swift_release();
            sub_1000035EC(v638, v639);
            uint64_t v415 = v412;
            v416 = v411;
            v417 = v413;
            swift_errorRelease();
            v418 = *(void (**)(char *, uint64_t))(v621 + 8);
            uint64_t v419 = v633;
            v418(v622, v633);
            v418(v623, v419);
            v418(v624, v419);
            uint64_t v115 = v417;
            (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
            (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
            (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
            (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
            (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
            uint64_t v113 = v415;
LABEL_272:
            unint64_t v114 = v416;
            goto LABEL_18;
          }
          v444 = v410;
          uint64_t v445 = v589;
          v632 = v444;
          SecCertificateRef.publicKeyAlgorithm()();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v587 + 48))(v445, 1, v588) == 1)
          {
            v446 = v658;
            uint64_t v447 = v660;
            (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
            v448 = v632;

            sub_100014BBC(v589, &qword_1001C1318);
            v449 = v666;
            ((void (*)(char *, void, uint64_t))v666)(v446, enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerAuthPublicKey(_:), v447);
            (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:), v662);
            sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            v416 = v446;
            uint64_t v450 = swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            uint64_t v664 = v450;
            swift_willThrow();
            sub_100009764(v557, v558);
            sub_100009764(v562, v563);
            swift_release();
            sub_1000035EC(v638, v639);

            v451 = *(void (**)(char *, uint64_t))(v621 + 8);
            uint64_t v452 = v633;
            v451(v622, v633);
            v451(v623, v452);
            v451(v624, v452);
            uint64_t v115 = v449;
            (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
            (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
            (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
            (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
            (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
            uint64_t v113 = v447;
            goto LABEL_272;
          }
          (*(void (**)(char *, uint64_t, uint64_t))(v587 + 32))(v582, v589, v588);
          v454 = v632;
          v630 = (void *)SecCertificateRef.rawECPublicKeyData()();
          unint64_t v456 = v455;

          unint64_t v631 = v456;
          if (v456 >> 60 == 15)
          {
            v457 = v658;
            uint64_t v113 = v660;
            (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
            v458 = v666;
            ((void (*)(char *, void, uint64_t))v666)(v457, enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerAuthPublicKey(_:), v113);
            (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:), v662);
            sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            v416 = v457;
            uint64_t v459 = swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            uint64_t v664 = v459;
            swift_willThrow();
            sub_100009764(v557, v558);
            sub_100009764(v562, v563);

            swift_release();
            sub_1000035EC(v638, v639);
            (*(void (**)(char *, uint64_t))(v587 + 8))(v582, v588);
            v460 = *(void (**)(char *, uint64_t))(v621 + 8);
            uint64_t v461 = v633;
            v460(v622, v633);
            v460(v623, v461);
            v460(v624, v461);
            uint64_t v115 = v458;
            (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
            (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
            (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
            (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
            (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
            goto LABEL_272;
          }
LABEL_308:
          v521 = (char *)(v661 + 104);
          v522 = *(void (**)(char *))(v661 + 104);
          LODWORD(v619) = enum case for DIPError.Code.idcsUnknownIssuerAuthAlgorithm(_:);
          v522(v663);
          LODWORD(v620) = enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:);
          v522(v574);
          LODWORD(v618) = enum case for DIPError.Code.idcsMisformattedIssuerAuthSignature(_:);
          v522(v575);
          LODWORD(v612) = enum case for DIPError.Code.idcsInvalidIssuerAuthSignature(_:);
          uint64_t v664 = (uint64_t)v522;
          v626 = v521;
          v522(v576);
          COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)();
          uint64_t v523 = COSE_Sign1.signature.getter();
          unint64_t v525 = v524;
          COSE_Sign1.algorithmIdentifier.getter();
          COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)();
          v636 = (void (**)(void, void))v238;
          if (!v238)
          {

            sub_1000035EC(v523, v525);
            sub_100009764((uint64_t)v630, v631);
            sub_1000035EC(v638, v639);
            (*(void (**)(char *, uint64_t))(v577 + 8))(v580, v578);
            (*(void (**)(char *, uint64_t))(v587 + 8))(v582, v588);
            goto LABEL_248;
          }
          sub_1000035EC(v523, v525);
          id v526 = [v571 standardUserDefaults];
          v527._uint64_t countAndFlagsBits = static SharedInternalDefaultsKeys.issuerValidationLogOnly.getter();
          Swift::Bool v528 = NSUserDefaults.internalBool(forKey:)(v527);

          swift_bridgeObjectRelease();
          if (v528)
          {
            defaultLogger()();
            v529 = Logger.logObject.getter();
            os_log_type_t v530 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v529, v530))
            {
              v531 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v531 = 0;
              _os_log_impl((void *)&_mh_execute_header, v529, v530, "Treating issuer certificate validation error as non-fatal due to user defaults setting", v531, 2u);
              swift_slowDealloc();
            }

            uint64_t v532 = v614;
            v533 = v613;
            v613(v572, v614);
            v534 = v570;
            defaultLogger()();
            DIPLogError(_:message:log:)();

            sub_100009764((uint64_t)v630, v631);
            sub_1000035EC(v638, v639);
            swift_errorRelease();
            v533(v534, v532);
            (*(void (**)(char *, uint64_t))(v577 + 8))(v580, v578);
            (*(void (**)(char *, uint64_t))(v587 + 8))(v582, v588);
            v636 = 0;
            goto LABEL_248;
          }
          swift_getErrorValue();
          uint64_t v538 = v573;
          Error.dipErrorCode.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v661 + 48))(v538, 1, v662) != 1)
          {
            uint64_t v539 = v569;
            sub_100037898(v573, v569, (uint64_t *)&unk_1001C3B50);
            LODWORD(v127) = (*(uint64_t (**)(uint64_t, uint64_t))(v661 + 88))(v539, v662);
            if (v127 == v620)
            {
              v540 = v658;
              uint64_t v541 = v660;
              (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
              v542 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerCertificate(_:);
              goto LABEL_359;
            }
            goto LABEL_345;
          }
LABEL_360:
          sub_100014BBC(v573, (uint64_t *)&unk_1001C3B50);
          ((void (*)(char *, void, uint64_t))v664)(v663, enum case for DIPError.Code.internalError(_:), v662);
          swift_errorRetain();
          sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v545 = swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          uint64_t v664 = v545;
          swift_willThrow();
          sub_100009764(v557, v558);
          sub_100009764(v562, v563);

          swift_release();
          sub_100009764((uint64_t)v630, v631);
          sub_1000035EC(v638, v639);
          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v577 + 8))(v580, v578);
          (*(void (**)(char *, uint64_t))(v587 + 8))(v582, v588);
          v546 = *(void (**)(char *, uint64_t))(v621 + 8);
          uint64_t v547 = v633;
          v546(v622, v633);
          v546(v623, v547);
          v546(v624, v547);
          (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
          (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
          (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
          (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
          (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
LABEL_291:
          uint64_t v113 = v660;
          unint64_t v114 = v658;
          uint64_t v115 = v666;
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
      }
      defaultLogger()();
      v420 = Logger.logObject.getter();
      os_log_type_t v421 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v420, v421))
      {
        v422 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v422 = 0;
        _os_log_impl((void *)&_mh_execute_header, v420, v421, "Package does not include an issuer certificate; skipping signature validation",
          v422,
          2u);
        swift_slowDealloc();
      }

      v613(v597, v614);
LABEL_248:
      if ((_BYTE)v652) {
        goto LABEL_254;
      }
      swift_bridgeObjectRetain();
      uint64_t v423 = v595;
      ISO18013KnownDocTypes.init(rawValue:)();
      uint64_t v424 = type metadata accessor for ISO18013KnownDocTypes();
      uint64_t v425 = *(void *)(v424 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v425 + 48))(v423, 1, v424) == 1) {
        goto LABEL_253;
      }
      uint64_t v426 = v581;
      sub_100037898(v595, v581, &qword_1001C12B0);
      int v427 = (*(uint64_t (**)(uint64_t, uint64_t))(v425 + 88))(v426, v424);
      if (v427 != enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:)
        && v427 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
      {
        (*(void (**)(uint64_t, uint64_t))(v425 + 8))(v581, v424);
LABEL_253:
        sub_100014BBC(v595, &qword_1001C12B0);
LABEL_254:
        v428 = v596;
        uint64_t v429 = v654;
        v564(v596, v565, v654);
        int v430 = (*(uint64_t (**)(char *, uint64_t))(v653 + 88))(v428, v429);
        if (v430 != enum case for ISO18013CodingKeyFormat.standard(_:))
        {
          if (v430 == enum case for ISO18013CodingKeyFormat.ACWG(_:))
          {
            uint64_t v664 = 4;
            goto LABEL_259;
          }
          (*(void (**)(char *, uint64_t))(v653 + 8))(v596, v654);
        }
        uint64_t v664 = 0;
LABEL_259:
        uint64_t v680 = 0;
        uint64_t v681 = 0;
        uint64_t v678 = 0;
        unint64_t v679 = 0;
        sub_100035DD8((uint64_t)v669);
        if (v670)
        {
          sub_10002C404((uint64_t)&v671, (uint64_t)v673);
          sub_1000377A8((uint64_t)v669);
          sub_10002C468(v673, (uint64_t)&__s2);
          uint64_t v431 = v676;
          uint64_t v432 = v677;
          v433 = sub_100014D14(&__s2, v676);
          v434 = v636;
          uint64_t v435 = sub_100034FDC(v656, v657, (uint64_t)v433, v431, v432);
          v636 = v434;
          if (v434)
          {
            sub_100009764(v557, v558);
            sub_100009764(v562, v563);
            swift_bridgeObjectRelease();
            swift_release();
LABEL_290:
            v481 = *(void (**)(char *, uint64_t))(v621 + 8);
            uint64_t v482 = v633;
            v481(v622, v633);
            v481(v623, v482);
            v481(v624, v482);
            (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
            (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
            (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
            (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
            (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
            sub_10000B9DC((uint64_t)&__s2);
            uint64_t v664 = (uint64_t)v636;
            goto LABEL_291;
          }
          uint64_t countAndFlagsBits = v435;
          if (v436)
          {
            Swift::String v442 = String.uppercased()();
            uint64_t countAndFlagsBits = v442._countAndFlagsBits;
            object = v442._object;
            swift_bridgeObjectRelease();
          }
          else
          {
            object = 0;
          }
          uint64_t v680 = countAndFlagsBits;
          uint64_t v681 = (uint64_t)object;
          swift_bridgeObjectRetain();
          defaultLogger()();
          swift_bridgeObjectRetain();
          v469 = Logger.logObject.getter();
          os_log_type_t v470 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v469, v470))
          {
            v471 = (uint8_t *)swift_slowAlloc();
            uint64_t v472 = swift_slowAlloc();
            *(_DWORD *)v471 = 136315138;
            v669[0] = v472;
            if (object) {
              uint64_t v473 = countAndFlagsBits;
            }
            else {
              uint64_t v473 = 0;
            }
            if (object) {
              unint64_t v474 = (unint64_t)object;
            }
            else {
              unint64_t v474 = 0xE000000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)&v673[0] = sub_10004C3A4(v473, v474, v669);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v469, v470, "ISO18013PackagePayloadProcessor: region: %s", v471, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v613(v591, v614);
          sub_10000B9DC((uint64_t)&__s2);
        }
        else
        {
          sub_100014BBC((uint64_t)v669, &qword_1001C12F0);
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          v437 = Logger.logObject.getter();
          os_log_type_t v438 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v437, v438))
          {
            v439 = (uint8_t *)swift_slowAlloc();
            v669[0] = swift_slowAlloc();
            *(_DWORD *)v439 = 136315138;
            unint64_t v440 = v657;
            swift_bridgeObjectRetain();
            uint64_t __s2 = sub_10004C3A4(v656, v440, v669);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v437, v438, "ISO18013PackagePayloadProcessor: docType: %s doesnt have issuing country element identifier", v439, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v613(v594, v614);
          uint64_t v680 = sub_100036D50(v656, v657);
          uint64_t v681 = v453;
        }
        sub_100035DD8((uint64_t)v669);
        if (v670)
        {
          sub_10002C404((uint64_t)&v672, (uint64_t)v673);
          sub_1000377A8((uint64_t)v669);
          swift_bridgeObjectRelease();
          sub_10002C468(v673, (uint64_t)&__s2);
          uint64_t v475 = v676;
          uint64_t v476 = v677;
          v477 = sub_100014D14(&__s2, v676);
          v478 = v636;
          uint64_t v479 = sub_100034FDC(v656, v657, (uint64_t)v477, v475, v476);
          v636 = v478;
          if (v478)
          {
            sub_100009764(v557, v558);
            sub_100009764(v562, v563);
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_290;
          }
          uint64_t v487 = v479;
          unint64_t v488 = v480;
          uint64_t v678 = v479;
          unint64_t v679 = v480;
          swift_bridgeObjectRetain();
          defaultLogger()();
          swift_bridgeObjectRetain();
          v489 = Logger.logObject.getter();
          os_log_type_t v490 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v489, v490))
          {
            v491 = (uint8_t *)swift_slowAlloc();
            uint64_t v492 = swift_slowAlloc();
            *(_DWORD *)v491 = 136315138;
            v669[0] = v492;
            if (v488) {
              uint64_t v493 = v487;
            }
            else {
              uint64_t v493 = 0;
            }
            if (v488) {
              unint64_t v494 = v488;
            }
            else {
              unint64_t v494 = 0xE000000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)&v673[0] = sub_10004C3A4(v493, v494, v669);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v489, v490, "ISO18013PackagePayloadProcessor: Issuing Jurisdiction %s", v491, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v613(v583, v614);
          sub_10000B9DC((uint64_t)&__s2);
        }
        else
        {
          sub_100014BBC((uint64_t)v669, &qword_1001C12F0);
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          v483 = Logger.logObject.getter();
          os_log_type_t v484 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v483, v484))
          {
            v485 = (uint8_t *)swift_slowAlloc();
            v669[0] = swift_slowAlloc();
            *(_DWORD *)v485 = 136315138;
            unint64_t v486 = v657;
            swift_bridgeObjectRetain();
            uint64_t __s2 = sub_10004C3A4(v656, v486, v669);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v483, v484, "ISO18013PackagePayloadProcessor: docType: %s doesnt have issuing jurisdiction element identifier", v485, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v613(v590, v614);
        }
        uint64_t v495 = v650;
        v496 = v585;
        uint64_t v497 = v651;
        (*(void (**)(char *, void, uint64_t))(v650 + 104))(v585, *(unsigned int *)*(&off_1001B4DA8 + (char)v652), v651);
        swift_beginAccess();
        swift_beginAccess();
        type metadata accessor for IDCSAnalytics();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v498 = v658;
        static IDCSAnalytics.sendPayloadValidationEvent(reason:docType:issuer:result:region:issuingJurisdiction:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v495 + 8))(v496, v497);
        uint64_t v499 = *(void *)(v567 + 112);
        v667 = *(uint64_t **)(v567 + 120);
        sub_10000354C(v499, (unint64_t)v667);
        v500 = v616;
        v501 = v637;
        ISO18013MobileSecurityObject.validityInfo.getter();
        ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
        v502 = v500;
        uint64_t v503 = v617;
        v504 = v561;
        v561(v502, v617);
        v505 = v584;
        ISO18013MobileSecurityObject.validityInfo.getter();
        ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter();
        sub_100009764(v562, v563);
        swift_release();
        v504(v505, v503);
        uint64_t v506 = v621;
        v507 = *(void (**)(char *, uint64_t))(v621 + 8);
        uint64_t v508 = v633;
        v507(v622, v633);
        v507(v623, v508);
        v507(v624, v508);
        (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
        (*(void (**)(char *, uint64_t))(v635 + 8))(v501, v634);
        (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
        (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
        (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
        (*(void (**)(char *, uint64_t))(v668 + 8))(v498, v660);
        uint64_t v509 = v680;
        uint64_t v510 = v681;
        unint64_t v511 = v679;
        uint64_t v668 = v678;
        v512 = (char *)v586;
        unint64_t v513 = v657;
        char *v586 = v656;
        *((void *)v512 + 1) = v513;
        *((void *)v512 + 2) = v664;
        *((void *)v512 + 3) = v499;
        uint64_t v514 = v557;
        *((void *)v512 + 4) = v667;
        *((void *)v512 + 5) = v514;
        *((void *)v512 + 6) = v558;
        v515 = (int *)type metadata accessor for PayloadMetadata(0);
        v516 = *(void (**)(char *, char *, uint64_t))(v506 + 32);
        v516(&v512[v515[8]], v592, v508);
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v516)(&v512[v515[9]], v593, v508);
        v517 = &v512[v515[10]];
        uint64_t v518 = v560;
        char *v517 = v655;
        v517[1] = v518;
        v519 = (uint64_t *)&v512[v515[11]];
        uint64_t *v519 = v509;
        v519[1] = v510;
        v520 = (uint64_t *)&v512[v515[12]];
        uint64_t *v520 = v668;
        v520[1] = v511;
        return result;
      }
      sub_100014BBC(v595, &qword_1001C12B0);
      unint64_t v462 = sub_1000457B0();
      v463 = v636;
      uint64_t v297 = sub_100033B04(v462);
      v636 = v463;
      if (v463)
      {
        swift_bridgeObjectRelease();
        defaultLogger()();
        swift_errorRetain();
        swift_errorRetain();
        v464 = Logger.logObject.getter();
        os_log_type_t v465 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v464, v465))
        {
          v466 = (uint8_t *)swift_slowAlloc();
          v467 = (void *)swift_slowAlloc();
          *(_DWORD *)v466 = 138412290;
          swift_errorRetain();
          uint64_t v468 = _swift_stdlib_bridgeErrorToNSError();
          v669[0] = v468;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v467 = v468;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v464, v465, "Failed to get elements to evaluate age consistency: %@", v466, 0xCu);
          sub_100006CC8(&qword_1001C1350);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        v613(v579, v614);
        v636 = 0;
        goto LABEL_254;
      }
LABEL_317:
      uint64_t v535 = v297;
      swift_bridgeObjectRelease();
      char v536 = sub_100045BF0(v535);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
      if (v536)
      {
        if (v536 == 1) {
          v537 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.inconsistentAgeOver(_:);
        }
        else {
          v537 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.inconsistentAgeBirthDate(_:);
        }
        uint64_t v544 = *v537;
        v543 = v658;
        goto LABEL_331;
      }
LABEL_328:
      v543 = v658;
      uint64_t v544 = v649;
LABEL_331:
      ((void (*)(char *, uint64_t, uint64_t))v666)(v543, v544, v660);
      goto LABEL_254;
    }
    v626 = (char *)v259;
    uint64_t v278 = *v273;
    uint64_t v279 = *(int *)(v277 + 48);
    v280 = (char *)v273[1];
    (*(void (**)(unint64_t, char *, uint64_t))v606)(v631, (char *)v273 + v279, v239);
    CBOREncodedCBOR.value.getter();
    uint64_t v281 = ISO18013IssuerSignedItem.elementIdentifier.getter();
    uint64_t v610 = v278;
    if (v278 == v281 && v280 == v282)
    {
      swift_bridgeObjectRelease();
      goto LABEL_93;
    }
    char v283 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v283 & 1) == 0)
    {
      unint64_t v114 = v658;
      uint64_t v396 = v660;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ((void (*)(char *, void, uint64_t))v666)(v114, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentElementIdentifier(_:), v396);
      v669[0] = 0;
      v669[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v397._uint64_t countAndFlagsBits = 0xD000000000000037;
      v397._object = (void *)0x800000010017B920;
      String.append(_:)(v397);
      v398._uint64_t countAndFlagsBits = v610;
      v398._object = v280;
      String.append(_:)(v398);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v399 = v195;
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v400 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v664 = v400;
      swift_willThrow();
      sub_100009764(v557, v558);
      sub_100009764(v562, v563);
      swift_release();
      (*v603)(v632, v619);
      (*v605)(v631, v611);
      swift_release();
LABEL_239:
      swift_release();
      v405 = *(void (**)(char *, uint64_t))(v621 + 8);
      v405(v622, v399);
      v405(v623, v399);
      v405(v624, v399);
      goto LABEL_236;
    }
LABEL_93:
    uint64_t v284 = ISO18013IssuerSignedItem.digestID.getter();
    if (v284 < 0)
    {
      v382 = v658;
      uint64_t v383 = v660;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ((void (*)(char *, void, uint64_t))v666)(v382, enum case for IDCSAnalytics.PayloadValidationResult.invalidDigestID(_:), v383);
      v669[0] = 0;
      v669[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      strcpy((char *)v669, "digest ID for ");
      HIBYTE(v669[1]) = -18;
      v384._uint64_t countAndFlagsBits = v610;
      v384._object = v280;
      String.append(_:)(v384);
      swift_bridgeObjectRelease();
      v385._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v385._object = (void *)0x800000010017B980;
      String.append(_:)(v385);
      (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v386 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v664 = v386;
      swift_willThrow();
      sub_100009764(v557, v558);
      sub_100009764(v562, v563);
      swift_release();
      (*v603)(v632, v619);
      (*v605)(v631, v611);
      swift_release();
      swift_release();
      v387 = *(void (**)(char *, uint64_t))(v621 + 8);
      v387(v622, v195);
      v387(v623, v195);
      v387(v624, v195);
      unint64_t v114 = v382;
      goto LABEL_236;
    }
    uint64_t v285 = v609;
    if (!*(void *)(v609 + 16) || (unint64_t v286 = sub_10013C4FC(v284), (v287 & 1) == 0))
    {
      v357 = v658;
      uint64_t v358 = v660;
      (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
      swift_bridgeObjectRelease();
      ((void (*)(char *, void, uint64_t))v666)(v357, enum case for IDCSAnalytics.PayloadValidationResult.missingDigestID(_:), v358);
      v669[0] = 0;
      v669[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      v669[0] = 0x20676E697373696DLL;
      v669[1] = 0xEF20747365676964;
      uint64_t __s2 = ISO18013IssuerSignedItem.digestID.getter();
      v359._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v359);
      swift_bridgeObjectRelease();
      v360._uint64_t countAndFlagsBits = 0x656C6520726F6620;
      v360._object = (void *)0xED000020746E656DLL;
      String.append(_:)(v360);
      v361._uint64_t countAndFlagsBits = v610;
      v361._object = v280;
      String.append(_:)(v361);
      swift_bridgeObjectRelease();
      v362._uint64_t countAndFlagsBits = 0x656D616E206E6920;
      v362._object = (void *)0xEE00206563617073;
      String.append(_:)(v362);
      v363._uint64_t countAndFlagsBits = (uint64_t)v602;
      v363._object = v607;
      String.append(_:)(v363);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v364 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v664 = v364;
      swift_willThrow();
      sub_100009764(v557, v558);
      sub_100009764(v562, v563);
      swift_release();
      (*v603)(v632, v619);
      uint64_t v365 = v239;
      unint64_t v114 = v658;
      (*v605)(v631, v365);
      goto LABEL_235;
    }
    v288 = (uint64_t *)(*(void *)(v285 + 56) + 16 * v286);
    uint64_t v289 = *v288;
    unint64_t v290 = v288[1];
    sub_10000354C(*v288, v290);
    uint64_t v291 = CBOREncodedCBOR.dataValue.getter();
    unint64_t v293 = v292;
    v294 = v636;
    uint64_t v295 = computeISO18013Digest(algorithm:data:)();
    v636 = v294;
    if (v294)
    {
      sub_1000035EC(v291, v293);
      swift_bridgeObjectRelease();
      sub_100009764(v557, v558);
      sub_100009764(v562, v563);
      swift_release();
      sub_1000035EC(v289, v290);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v603)(v632, v619);
      (*v605)(v631, v239);
      swift_release();
      swift_release();
      v388 = *(void (**)(char *, uint64_t))(v621 + 8);
      uint64_t v389 = v633;
      v388(v622, v633);
      v388(v623, v389);
      v388(v624, v389);
      (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
      (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
      (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
      (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
      (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
      uint64_t v664 = (uint64_t)v636;
      unint64_t v114 = v658;
      uint64_t v115 = v666;
      uint64_t v113 = v660;
      goto LABEL_18;
    }
    uint64_t v638 = v295;
    unint64_t v639 = v296;
    v612 = v280;
    uint64_t v297 = sub_1000035EC(v291, v293);
    v255 = v608;
    uint64_t v298 = 0;
    switch(v290 >> 62)
    {
      case 1uLL:
        LODWORD(v298) = HIDWORD(v289) - v289;
        if (__OFSUB__(HIDWORD(v289), v289))
        {
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
          goto LABEL_317;
        }
        uint64_t v298 = (int)v298;
LABEL_102:
        unint64_t v301 = v639 >> 62;
        switch(v639 >> 62)
        {
          case 1uLL:
            LODWORD(v302) = HIDWORD(v638) - v638;
            if (__OFSUB__(HIDWORD(v638), v638)) {
              goto LABEL_315;
            }
            uint64_t v302 = (int)v302;
LABEL_107:
            if (v298 != v302) {
              goto LABEL_229;
            }
            if (v298 < 1) {
              goto LABEL_75;
            }
            break;
          case 2uLL:
            uint64_t v304 = *(void *)(v638 + 16);
            uint64_t v303 = *(void *)(v638 + 24);
            BOOL v248 = __OFSUB__(v303, v304);
            uint64_t v302 = v303 - v304;
            if (!v248) {
              goto LABEL_107;
            }
            goto LABEL_316;
          case 3uLL:
            if (!v298) {
              goto LABEL_75;
            }
            goto LABEL_229;
          default:
            uint64_t v302 = BYTE6(v639);
            goto LABEL_107;
        }
        break;
      case 2uLL:
        uint64_t v300 = *(void *)(v289 + 16);
        uint64_t v299 = *(void *)(v289 + 24);
        BOOL v248 = __OFSUB__(v299, v300);
        uint64_t v298 = v299 - v300;
        if (!v248) {
          goto LABEL_102;
        }
        goto LABEL_314;
      case 3uLL:
        goto LABEL_102;
      default:
        uint64_t v298 = BYTE6(v290);
        goto LABEL_102;
    }
    switch(v290 >> 62)
    {
      case 1uLL:
        if ((int)v289 > v289 >> 32)
        {
          __break(1u);
LABEL_327:
          __break(1u);
          goto LABEL_328;
        }
        uint64_t v599 = v289;
        sub_10000354C(v289, v290);
        v311 = (char *)__DataStorage._bytes.getter();
        if (!v311) {
          goto LABEL_121;
        }
        uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
        if (__OFSUB__((int)v289, v127)) {
          goto LABEL_333;
        }
        v311 += (int)v289 - (void)v127;
LABEL_121:
        uint64_t v289 = v599;
        __DataStorage._length.getter();
        if (!v301)
        {
          v669[0] = v638;
          LODWORD(v669[1]) = v639;
          WORD2(v669[1]) = WORD2(v639);
          if (!v311) {
            goto LABEL_373;
          }
          int v317 = memcmp(v311, v669, BYTE6(v639));
LABEL_194:
          sub_1000035EC(v289, v290);
          if (v317) {
            goto LABEL_229;
          }
          goto LABEL_75;
        }
        LODWORD(v127) = v638;
        if (v301 == 1)
        {
          uint64_t v312 = (int)v638;
          uint64_t v313 = (v638 >> 32) - (int)v638;
          if (v638 >> 32 >= (int)v638)
          {
            swift_retain();
            v314 = (char *)__DataStorage._bytes.getter();
            if (!v314) {
              goto LABEL_127;
            }
            uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
            if (!__OFSUB__(v312, v127))
            {
              v314 += v312 - (void)v127;
LABEL_127:
              uint64_t v238 = v560;
              uint64_t v239 = v611;
              uint64_t v315 = __DataStorage._length.getter();
              if (v315 >= v313) {
                size_t v316 = v313;
              }
              else {
                size_t v316 = v315;
              }
              if (v311)
              {
                uint64_t v289 = v599;
                if (v314)
                {
                  int v317 = memcmp(v311, v314, v316);
                  sub_1000035EC(v638, v639);
                  goto LABEL_194;
                }
LABEL_364:
                __break(1u);
LABEL_365:
                __DataStorage._length.getter();
                __break(1u);
LABEL_366:
                __break(1u);
                goto LABEL_367;
              }
LABEL_363:
              __break(1u);
              goto LABEL_364;
            }
LABEL_353:
            __break(1u);
LABEL_354:
            if (v127 == v618)
            {
              v540 = v658;
              uint64_t v541 = v660;
              (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
              v542 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerSignature(_:);
              goto LABEL_359;
            }
LABEL_357:
            if (v127 != v612)
            {
              (*(void (**)(uint64_t, uint64_t))(v661 + 8))(v569, v662);
              goto LABEL_360;
            }
            v540 = v658;
            uint64_t v541 = v660;
            (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
            v542 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.invalidIssuerSignature(_:);
LABEL_359:
            ((void (*)(char *, void, uint64_t))v666)(v540, *v542, v541);
            goto LABEL_360;
          }
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          if (v127 != v619) {
            goto LABEL_354;
          }
          v540 = v658;
          uint64_t v541 = v660;
          (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
          v542 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.unknownIssuerAuthAlgorithm(_:);
          goto LABEL_359;
        }
        uint64_t v349 = *(void *)(v638 + 16);
        uint64_t v350 = *(void *)(v638 + 24);
        swift_retain();
        swift_retain();
        uint64_t v127 = (uint64_t *)__DataStorage._bytes.getter();
        v351 = v127;
        if (v127)
        {
          uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
          if (__OFSUB__(v349, v127)) {
            goto LABEL_352;
          }
          v351 = (uint64_t *)((char *)v351 + v349 - (void)v127);
        }
        BOOL v248 = __OFSUB__(v350, v349);
        int64_t v352 = v350 - v349;
        if (v248) {
          goto LABEL_344;
        }
        uint64_t v353 = __DataStorage._length.getter();
        if (v353 >= v352) {
          size_t v354 = v352;
        }
        else {
          size_t v354 = v353;
        }
        uint64_t v238 = v560;
        uint64_t v239 = v611;
        if (!v311) {
          goto LABEL_374;
        }
        uint64_t v289 = v599;
        if (!v351) {
          goto LABEL_375;
        }
        int v355 = memcmp(v311, v351, v354);
        swift_release();
        swift_release();
        sub_1000035EC(v289, v290);
        if (!v355) {
          goto LABEL_75;
        }
LABEL_229:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v366 = v598;
        defaultLogger()();
        sub_10000354C(v289, v290);
        uint64_t v367 = v638;
        unint64_t v368 = v639;
        sub_10000354C(v638, v639);
        v369 = v612;
        swift_bridgeObjectRetain();
        sub_10000354C(v289, v290);
        sub_10000354C(v367, v368);
        swift_bridgeObjectRetain();
        v370 = Logger.logObject.getter();
        os_log_type_t v371 = static os_log_type_t.debug.getter();
        uint64_t v664 = (uint64_t)v370;
        LODWORD(v654) = v371;
        BOOL v372 = os_log_type_enabled(v370, v371);
        uint64_t v599 = v289;
        unint64_t v549 = v290;
        if (v372)
        {
          uint64_t v373 = swift_slowAlloc();
          uint64_t v374 = v289;
          uint64_t v653 = swift_slowAlloc();
          v669[0] = v653;
          *(_DWORD *)uint64_t v373 = 136315650;
          swift_bridgeObjectRetain();
          uint64_t __s2 = sub_10004C3A4(v610, (unint64_t)v369, v669);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v373 + 12) = 2080;
          uint64_t v375 = v638;
          unint64_t v376 = v639;
          Swift::String v377 = Data.base16EncodedString()();
          uint64_t __s2 = sub_10004C3A4(v377._countAndFlagsBits, (unint64_t)v377._object, v669);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000035EC(v375, v376);
          sub_1000035EC(v375, v376);
          *(_WORD *)(v373 + 22) = 2080;
          Swift::String v378 = Data.base16EncodedString()();
          uint64_t __s2 = sub_10004C3A4(v378._countAndFlagsBits, (unint64_t)v378._object, v669);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v369 = v612;
          uint64_t v379 = v660;
          swift_bridgeObjectRelease();
          sub_1000035EC(v374, v290);
          sub_1000035EC(v374, v290);
          id v380 = (id)v664;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v664, (os_log_type_t)v654, "Digests for element %s are inconsistent; computed %s, mso contains %s",
            (uint8_t *)v373,
            0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v613(v598, v614);
          v381 = v658;
          (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v379);
        }
        else
        {

          sub_1000035EC(v289, v290);
          sub_1000035EC(v289, v290);
          uint64_t v390 = v638;
          unint64_t v391 = v639;
          sub_1000035EC(v638, v639);
          sub_1000035EC(v390, v391);
          swift_bridgeObjectRelease_n();
          v613(v366, v614);
          v381 = v658;
          uint64_t v379 = v660;
          (*(void (**)(char *, uint64_t))(v668 + 8))(v658, v660);
        }
        ((void (*)(char *, void, uint64_t))v666)(v381, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentDigest(_:), v379);
        v669[0] = 0;
        v669[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        v669[0] = 0xD000000000000018;
        v669[1] = 0x800000010017B960;
        v392._uint64_t countAndFlagsBits = v610;
        v392._object = v369;
        String.append(_:)(v392);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.idcsInvalidPayload(_:), v662);
        sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v393 = swift_allocError();
        unint64_t v114 = v658;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        uint64_t v664 = v393;
        swift_willThrow();
        sub_100009764(v557, v558);
        sub_100009764(v562, v563);
        swift_release();
        sub_1000035EC(v599, v549);
        sub_1000035EC(v638, v639);
        (*v603)(v632, v619);
        (*v605)(v631, v611);
LABEL_235:
        swift_release();
        swift_release();
        v394 = *(void (**)(char *, uint64_t))(v621 + 8);
        uint64_t v395 = v633;
        v394(v622, v633);
        v394(v623, v395);
        v394(v624, v395);
LABEL_236:
        uint64_t v115 = v666;
        (*(void (**)(char *, uint64_t))(v628 + 8))(v629, v627);
        (*(void (**)(char *, uint64_t))(v635 + 8))(v637, v634);
        (*(void (**)(char *, uint64_t))(v641 + 8))(v643, v640);
        (*(void (**)(char *, uint64_t))(v642 + 8))(v644, v645);
        (*(void (**)(uint64_t, uint64_t))(v647 + 8))(v665, v646);
LABEL_13:
        uint64_t v113 = v660;
LABEL_18:
        ((void (*)(uint64_t *, void, uint64_t))v115)(v667, v649, v113);
        sub_1000378FC(&qword_1001C1338, (void (*)(uint64_t))&type metadata accessor for IDCSAnalytics.PayloadValidationResult);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v669[0] == __s2 && v669[1] == v675) {
          char v154 = 1;
        }
        else {
          char v154 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v155 = v668 + 8;
        v156 = *(void (**)(uint64_t *, uint64_t))(v668 + 8);
        v156(v667, v113);
        if (v154)
        {
          v156((uint64_t *)v114, v113);
          ((void (*)(char *, void, uint64_t))v666)(v114, enum case for IDCSAnalytics.PayloadValidationResult.invalid(_:), v113);
        }
        uint64_t v157 = *(unsigned int *)*(&off_1001B4DA8 + (char)v652);
        uint64_t v158 = v650;
        v159 = *(void (**)(char *, uint64_t, uint64_t))(v650 + 104);
        v160 = v648;
        v667 = (uint64_t *)v156;
        uint64_t v161 = v651;
        v159(v648, v157, v651);
        type metadata accessor for IDCSAnalytics();
        uint64_t v668 = v155;
        static IDCSAnalytics.sendPayloadValidationEvent(reason:docType:issuer:result:region:issuingJurisdiction:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v158 + 8))(v160, v161);
        (*(void (**)(char *, void, uint64_t))(v661 + 104))(v663, enum case for DIPError.Code.internalError(_:), v662);
        swift_errorRetain();
        sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        return ((uint64_t (*)(char *, uint64_t))v667)(v114, v113);
      case 2uLL:
        uint64_t v318 = *(void *)(v289 + 16);
        uint64_t v319 = v289;
        swift_retain();
        swift_retain();
        uint64_t v320 = __DataStorage._bytes.getter();
        uint64_t v555 = v290 & 0x3FFFFFFFFFFFFFFFLL;
        if (v320)
        {
          uint64_t v321 = v320;
          uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
          if (__OFSUB__(v318, v127))
          {
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
            goto LABEL_343;
          }
          v550 = (const void *)(v321 + v318 - (void)v127);
        }
        else
        {
          v550 = 0;
        }
        uint64_t v238 = v560;
        uint64_t v239 = v611;
        __DataStorage._length.getter();
        uint64_t v289 = v319;
        if (!v301)
        {
          v669[0] = v638;
          LODWORD(v669[1]) = v639;
          WORD2(v669[1]) = WORD2(v639);
          if (!v550) {
            goto LABEL_370;
          }
          int v332 = memcmp(v550, v669, BYTE6(v639));
LABEL_179:
          swift_release();
          swift_release();
          if (v332) {
            goto LABEL_229;
          }
          goto LABEL_75;
        }
        LODWORD(v127) = v638;
        if (v301 == 1)
        {
          uint64_t v327 = (int)v638;
          uint64_t v328 = (v638 >> 32) - (int)v638;
          if (v638 >> 32 < (int)v638) {
            goto LABEL_337;
          }
          swift_retain();
          v329 = (char *)__DataStorage._bytes.getter();
          if (v329)
          {
            uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
            if (__OFSUB__(v327, v127)) {
              goto LABEL_351;
            }
            v329 += v327 - (void)v127;
          }
          uint64_t v330 = __DataStorage._length.getter();
          if (v330 >= v328) {
            size_t v331 = v328;
          }
          else {
            size_t v331 = v330;
          }
          if (!v550) {
            goto LABEL_366;
          }
          uint64_t v238 = v560;
          uint64_t v239 = v611;
          if (!v329)
          {
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
LABEL_370:
            __break(1u);
LABEL_371:
            __break(1u);
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
            JUMPOUT(0x100033A20);
          }
          int v332 = memcmp(v550, v329, v331);
          sub_1000035EC(v638, v639);
          goto LABEL_179;
        }
        uint64_t v343 = *(void *)(v638 + 16);
        uint64_t v342 = *(void *)(v638 + 24);
        swift_retain();
        swift_retain();
        uint64_t v127 = (uint64_t *)__DataStorage._bytes.getter();
        v344 = v127;
        if (v127)
        {
          uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
          if (__OFSUB__(v343, v127)) {
            goto LABEL_350;
          }
          v344 = (uint64_t *)((char *)v344 + v343 - (void)v127);
        }
        BOOL v248 = __OFSUB__(v342, v343);
        int64_t v345 = v342 - v343;
        if (v248) {
          goto LABEL_342;
        }
        uint64_t v346 = __DataStorage._length.getter();
        if (v346 >= v345) {
          size_t v347 = v345;
        }
        else {
          size_t v347 = v346;
        }
        if (!v550) {
          goto LABEL_371;
        }
        uint64_t v238 = v560;
        uint64_t v239 = v611;
        if (!v344) {
          goto LABEL_372;
        }
        int v348 = memcmp(v550, v344, v347);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (v348) {
          goto LABEL_229;
        }
LABEL_75:
        swift_bridgeObjectRelease();
        v264 = v632;
        sub_10003707C((uint64_t)v632, v656, v657, (uint64_t)v602, (uint64_t)v607, (uint64_t)v655, v238);
        sub_1000035EC(v289, v290);
        sub_1000035EC(v638, v639);
        (*v603)(v264, v619);
        LODWORD(v127) = ((uint64_t (*)(unint64_t, uint64_t))*v605)(v631, v239);
        uint64_t v195 = v633;
        uint64_t v259 = (uint64_t)v626;
        v258 = v630;
        unint64_t v263 = v664;
        break;
      case 3uLL:
        *(uint64_t *)((char *)v669 + 6) = 0;
        v669[0] = 0;
        unint64_t v305 = v639;
        if (!v301) {
          goto LABEL_146;
        }
        uint64_t v599 = v289;
        LODWORD(v127) = v638;
        if (v301 == 1)
        {
          uint64_t v322 = (int)v638;
          uint64_t v307 = (v638 >> 32) - (int)v638;
          if (v638 >> 32 < (int)v638) {
            goto LABEL_336;
          }
          sub_10000354C(v638, v639);
          uint64_t v323 = __DataStorage._bytes.getter();
          if (!v323) {
            goto LABEL_365;
          }
          uint64_t v309 = v323;
          uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
          BOOL v248 = __OFSUB__(v322, v127);
          uint64_t v310 = v322 - (void)v127;
          if (v248) {
            goto LABEL_341;
          }
LABEL_141:
          uint64_t v324 = __DataStorage._length.getter();
          if (v324 >= v307) {
            size_t v325 = v307;
          }
          else {
            size_t v325 = v324;
          }
          int v326 = memcmp(v669, (const void *)(v309 + v310), v325);
          sub_1000035EC(v638, v639);
          uint64_t v289 = v599;
          if (v326) {
            goto LABEL_229;
          }
        }
        else
        {
          uint64_t v338 = *(void *)(v638 + 16);
          uint64_t v339 = *(void *)(v638 + 24);
          swift_retain();
          swift_retain();
          uint64_t v127 = (uint64_t *)__DataStorage._bytes.getter();
          v335 = v127;
          if (v127)
          {
            uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
            if (__OFSUB__(v338, v127)) {
              goto LABEL_349;
            }
            v335 = (uint64_t *)((char *)v335 + v338 - (void)v127);
          }
          BOOL v248 = __OFSUB__(v339, v338);
          int64_t v336 = v339 - v338;
          if (v248) {
            goto LABEL_339;
          }
          uint64_t v337 = __DataStorage._length.getter();
          uint64_t v289 = v599;
          if (!v335) {
            goto LABEL_369;
          }
LABEL_172:
          if (v337 >= v336) {
            size_t v340 = v336;
          }
          else {
            size_t v340 = v337;
          }
          int v341 = memcmp(v669, v335, v340);
          swift_release();
          swift_release();
          if (v341) {
            goto LABEL_229;
          }
        }
        goto LABEL_75;
      default:
        v669[0] = v289;
        LOWORD(v669[1]) = v290;
        BYTE2(v669[1]) = BYTE2(v290);
        BYTE3(v669[1]) = BYTE3(v290);
        BYTE4(v669[1]) = BYTE4(v290);
        BYTE5(v669[1]) = BYTE5(v290);
        unint64_t v305 = v639;
        if (!v301)
        {
LABEL_146:
          uint64_t __s2 = v638;
          LOWORD(v675) = v305;
          BYTE2(v675) = BYTE2(v305);
          BYTE3(v675) = BYTE3(v305);
          BYTE4(v675) = BYTE4(v305);
          BYTE5(v675) = BYTE5(v305);
          if (memcmp(v669, &__s2, BYTE6(v305))) {
            goto LABEL_229;
          }
          goto LABEL_75;
        }
        uint64_t v599 = v289;
        LODWORD(v127) = v638;
        if (v301 == 1)
        {
          uint64_t v306 = (int)v638;
          uint64_t v307 = (v638 >> 32) - (int)v638;
          if (v638 >> 32 < (int)v638) {
            goto LABEL_335;
          }
          sub_10000354C(v638, v639);
          uint64_t v308 = __DataStorage._bytes.getter();
          if (!v308)
          {
            __DataStorage._length.getter();
            __break(1u);
            goto LABEL_363;
          }
          uint64_t v309 = v308;
          uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
          BOOL v248 = __OFSUB__(v306, v127);
          uint64_t v310 = v306 - (void)v127;
          if (v248) {
            goto LABEL_340;
          }
          goto LABEL_141;
        }
        uint64_t v333 = *(void *)(v638 + 16);
        uint64_t v334 = *(void *)(v638 + 24);
        swift_retain();
        swift_retain();
        uint64_t v127 = (uint64_t *)__DataStorage._bytes.getter();
        v335 = v127;
        if (v127)
        {
          uint64_t v127 = (uint64_t *)__DataStorage._offset.getter();
          if (__OFSUB__(v333, v127)) {
            goto LABEL_348;
          }
          v335 = (uint64_t *)((char *)v335 + v333 - (void)v127);
        }
        BOOL v248 = __OFSUB__(v334, v333);
        int64_t v336 = v334 - v333;
        if (v248) {
          goto LABEL_338;
        }
        uint64_t v337 = __DataStorage._length.getter();
        uint64_t v289 = v599;
        if (!v335) {
          goto LABEL_368;
        }
        goto LABEL_172;
    }
  }
}

unint64_t sub_100033A50(uint64_t a1)
{
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(a1 + 112);
  unint64_t v2 = *(void *)(a1 + 120);
  sub_10000354C(v3, v2);
  Swift::String v4 = Data.base16EncodedString()();
  sub_1000035EC(v3, v2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t sub_100033B04(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000341B8();
  uint64_t v8 = v1;
  if (v1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v8 = sub_10008DB44(a1, v7);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_100033D1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v28 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C1300);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for ISO18013Package.Document();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ISO18013Package();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v29;
  uint64_t result = sub_10002C6C8((uint64_t)v13);
  if (!v14)
  {
    v24[0] = v9;
    v24[1] = 0;
    uint64_t v25 = v11;
    uint64_t v29 = v10;
    uint64_t v16 = *(void *)(ISO18013Package.documents.getter() + 16);
    swift_bridgeObjectRelease();
    if (v16 == 1)
    {
      uint64_t v17 = ISO18013Package.documents.getter();
      sub_10002C4E0(v17, v6);
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_100006CC8(&qword_1001C1310);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v6, 1, v18);
      if (result == 1)
      {
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = (char *)v6 + *(int *)(v18 + 48);
        uint64_t v20 = v26;
        uint64_t v21 = v24[0];
        (*(void (**)(void, char *, uint64_t))(v26 + 32))(v24[0], v19, v7);
        uint64_t v22 = v27;
        ISO18013Package.Document.issuerAuth.getter();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v7);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v29);
        uint64_t v23 = type metadata accessor for COSE_Sign1();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v28 + 104))(v3, enum case for DIPError.Code.idcsInvalidPayload(_:), v1);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v13, v29);
    }
  }
  return result;
}

uint64_t sub_1000341B8()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v34 = v1;
  uint64_t v35 = v2;
  __chkstk_darwin(v1);
  uint64_t v36 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C1300);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100006CC8(&qword_1001C1308);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ISO18013Package.Document();
  uint64_t v33 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ISO18013Package();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v37;
  sub_10002C6C8((uint64_t)v16);
  if (!v17)
  {
    uint64_t v30 = v12;
    uint64_t v31 = 0;
    uint64_t v32 = v14;
    uint64_t v18 = v36;
    uint64_t v37 = v13;
    uint64_t v19 = ISO18013Package.documents.getter();
    sub_10002C4E0(v19, v6);
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_100006CC8(&qword_1001C1310);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v6, 1, v20) == 1)
    {
      sub_100014BBC((uint64_t)v6, &qword_1001C1300);
      (*(void (**)(char *, void, uint64_t))(v35 + 104))(v18, enum case for DIPError.Code.invalidStoredData(_:), v34);
      sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v0 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v37);
    }
    else
    {
      uint64_t v21 = v6[1];
      uint64_t v22 = (char *)v6 + *(int *)(v20 + 48);
      uint64_t v23 = (char *)v9 + *(int *)(v7 + 48);
      *uint64_t v9 = *v6;
      v9[1] = v21;
      uint64_t v24 = v33;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v25(v23, v22, v10);
      swift_bridgeObjectRelease();
      uint64_t v26 = (char *)v9 + *(int *)(v7 + 48);
      uint64_t v27 = v30;
      v25(v30, v26, v10);
      uint64_t v0 = ISO18013Package.Document.namespaces.getter();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v10);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v37);
    }
  }
  return v0;
}

unint64_t sub_10003467C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for AnyCodable();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v61 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006CC8(&qword_1001C12E0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v57 = (char *)&v53 - v19;
  sub_100035DD8((uint64_t)&v73);
  if (!*((void *)&v74 + 1))
  {
    uint64_t v37 = (uint64_t *)&unk_1001C12F0;
    uint64_t v38 = &v73;
    goto LABEL_17;
  }
  uint64_t v63 = v12;
  uint64_t v64 = v15;
  uint64_t v54 = v5;
  uint64_t v55 = v4;
  long long v85 = v77;
  long long v86 = v78;
  long long v87 = v79;
  uint64_t v88 = v80;
  long long v81 = v73;
  long long v82 = v74;
  long long v83 = v75;
  long long v84 = v76;
  sub_10002C404((uint64_t)&v86, (uint64_t)&v73);
  sub_100014D14(&v73, *((uint64_t *)&v74 + 1));
  swift_getDynamicType();
  sub_10000B9DC((uint64_t)&v73);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_10002C3A0(&v69);
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v62 = a3;
  if (v20 && (unint64_t v21 = sub_10013C484(v67, v68), (v22 & 1) != 0))
  {
    uint64_t v23 = *(void *)(*(void *)(a3 + 56) + 8 * v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100014D14(&v86, *((uint64_t *)&v87 + 1));
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v23 + 16))
    {
      unint64_t v24 = sub_10013C484(v65, v66);
      uint64_t v25 = v16;
      uint64_t v27 = (long long *)v63;
      uint64_t v26 = v64;
      if (v28)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v14, *(void *)(v23 + 56) + *(void *)(v25 + 72) * v24, v64);
        uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
        v29(v14, 0, 1, v26);
      }
      else
      {
        uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
        v29(v14, 1, 1, v64);
      }
    }
    else
    {
      uint64_t v25 = v16;
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      uint64_t v26 = v64;
      v29(v14, 1, 1, v64);
      uint64_t v27 = (long long *)v63;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000B9DC((uint64_t)&v69);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v14, 1, v26) != 1)
    {
      uint64_t v47 = v57;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v57, v14, v26);
      uint64_t v48 = v58;
      CBOREncodedCBOR.value.getter();
      uint64_t v49 = v61;
      ISO18013IssuerSignedItem.elementValue.getter();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v60);
      uint64_t v50 = AnyCodable.stringValue.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v49, v55);
      if (v52)
      {
        uint64_t v69 = v50;
        uint64_t v70 = v52;
        sub_1000377E0();
        Collection.nilIfEmpty.getter();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v47, v26);
        if (*((void *)&v73 + 1))
        {
          unint64_t v39 = v73;
LABEL_31:
          sub_1000377A8((uint64_t)&v81);
          return v39;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v47, v26);
      }
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000B9DC((uint64_t)&v69);
    uint64_t v25 = v16;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v26 = v64;
    v29(v14, 1, 1, v64);
    uint64_t v27 = (long long *)v63;
  }
  sub_100014BBC((uint64_t)v14, &qword_1001C12E0);
LABEL_9:
  sub_10002C404((uint64_t)&v81, (uint64_t)&v73);
  sub_100014D14(&v73, *((uint64_t *)&v74 + 1));
  swift_getDynamicType();
  sub_10000B9DC((uint64_t)&v73);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_10002C3A0(&v69);
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v30 = v62;
  if (*(void *)(v62 + 16) && (unint64_t v31 = sub_10013C484(v67, v68), (v32 & 1) != 0))
  {
    uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100014D14(&v81, *((uint64_t *)&v82 + 1));
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v33 + 16) && (unint64_t v34 = sub_10013C484(v65, v66), (v35 & 1) != 0))
    {
      (*(void (**)(long long *, unint64_t, uint64_t))(v25 + 16))(v27, *(void *)(v33 + 56) + *(void *)(v25 + 72) * v34, v26);
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = 1;
    }
    v29((char *)v27, v36, 1, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000B9DC((uint64_t)&v69);
    if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) != 1)
    {
      uint64_t v41 = v56;
      (*(void (**)(char *, long long *, uint64_t))(v25 + 32))(v56, v27, v26);
      uint64_t v42 = v58;
      CBOREncodedCBOR.value.getter();
      uint64_t v43 = v61;
      ISO18013IssuerSignedItem.elementValue.getter();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v60);
      uint64_t v44 = AnyCodable.stringValue.getter();
      uint64_t v46 = v45;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v55);
      if (v46
        && (uint64_t v69 = v44,
            uint64_t v70 = v46,
            sub_1000377E0(),
            Collection.nilIfEmpty.getter(),
            swift_bridgeObjectRelease(),
            *((void *)&v73 + 1)))
      {
        unint64_t v39 = v73;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v41, v26);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v41, v26);
        swift_bridgeObjectRelease();
        unint64_t v39 = 0xD00000000000001CLL;
      }
      goto LABEL_31;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000B9DC((uint64_t)&v69);
    v29((char *)v27, 1, 1, v26);
  }
  sub_1000377A8((uint64_t)&v81);
  uint64_t v37 = &qword_1001C12E0;
  uint64_t v38 = v27;
LABEL_17:
  sub_100014BBC((uint64_t)v38, v37);
  return 0;
}

uint64_t sub_100034FDC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v88 = a2;
  uint64_t v87 = a1;
  uint64_t v90 = *(void *)(a4 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  long long v86 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  long long v83 = (char *)&v80 - v10;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v92 = *(void *)(v11 - 8);
  uint64_t v93 = v11;
  __chkstk_darwin(v11);
  os_log_t v94 = (os_log_t)((char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100006CC8(&qword_1001C12C0);
  __chkstk_darwin(v13 - 8);
  uint64_t v85 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v15 - 8);
  uint64_t v84 = (uint64_t)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for Logger();
  uint64_t v99 = *(void *)(v95 - 8);
  uint64_t v17 = __chkstk_darwin(v95);
  uint64_t v91 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  long long v82 = (char *)&v80 - v20;
  __chkstk_darwin(v19);
  uint64_t v89 = (char *)&v80 - v21;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v25 = (char *)&v80 - v24;
  swift_getDynamicType();
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, AssociatedTypeWitness);
  uint64_t v26 = v100;
  uint64_t v27 = v101;
  sub_100006CC8(&qword_1001C12D0);
  uint64_t inited = swift_initStackObject();
  long long v96 = xmmword_1001768E0;
  *(_OWORD *)(inited + 16) = xmmword_1001768E0;
  *(void *)(inited + 32) = v26;
  *(void *)(inited + 40) = v27;
  sub_100006CC8(&qword_1001C12D8);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v96;
  uint64_t v30 = *(void *)(a5 + 16);
  swift_bridgeObjectRetain();
  dispatch thunk of RawRepresentable.rawValue.getter();
  *(void *)(inited + 48) = v29;
  unint64_t v31 = sub_10004AA18(inited);
  uint64_t v32 = v98;
  sub_1000341B8();
  if (v32)
  {
    (*(void (**)(os_log_t, void, uint64_t))(v92 + 104))(v94, enum case for DIPError.Code.internalError(_:), v93);
    swift_errorRetain();
    uint64_t v33 = sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v33;
  }
  uint64_t v93 = v30;
  os_log_t v94 = v26;
  uint64_t v97 = a3;
  uint64_t v98 = v27;
  uint64_t v81 = a4;
  unint64_t v34 = v89;
  uint64_t v35 = defaultLogger()();
  __chkstk_darwin(v35);
  Logger.sensitive(_:)();
  uint64_t v37 = v99 + 8;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v99 + 8);
  uint64_t v38 = v95;
  v36(v34, v95);
  sub_10004AA24((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v39 = defaultLogger()();
  __chkstk_darwin(v39);
  Logger.sensitive(_:)();
  *(void *)&long long v96 = v36;
  v36(v34, v38);
  swift_bridgeObjectRetain();
  uint64_t v40 = swift_bridgeObjectRetain();
  uint64_t v41 = sub_10008FFA4(v40, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v42 = sub_100090808(&_swiftEmptyDictionarySingleton, v41, v31);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v43 = *(void *)(v42 + 16);
  uint64_t v99 = v37;
  if (!v43 || (unint64_t v44 = sub_10013C484((uint64_t)v94, v98), (v45 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v56 = v81;
    uint64_t v50 = v90;
    uint64_t v55 = v91;
    unint64_t v51 = v88;
    uint64_t v52 = v87;
LABEL_8:
    uint64_t v57 = v97;
LABEL_9:
    defaultLogger()();
    uint64_t v58 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v86, v57, v56);
    swift_bridgeObjectRetain_n();
    uint64_t v59 = v55;
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      uint64_t v98 = 0;
      uint64_t v63 = v62;
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315394;
      swift_bridgeObjectRetain();
      size_t v100 = sub_10004C3A4(v52, v51, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 2080;
      uint64_t v64 = v81;
      dispatch thunk of RawRepresentable.rawValue.getter();
      size_t v100 = sub_10004C3A4((uint64_t)v100, v101, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v58, v64);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Element not found for doc Type %s and element Identifier %s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v65 = v91;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v58, v56);

      uint64_t v65 = v59;
    }
    ((void (*)(char *, uint64_t))v96)(v65, v95);
    return 0;
  }
  uint64_t v46 = *(void *)(*(void *)(v42 + 56) + 8 * v44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v46 + 16);
  uint64_t v48 = type metadata accessor for CredentialElement(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v90;
  unint64_t v51 = v88;
  uint64_t v52 = v87;
  if (v47)
  {
    uint64_t v53 = v85;
    sub_1000376E8(v46+ ((*(unsigned __int8 *)(*(void *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v48 - 8) + 80)), v85);
    uint64_t v54 = 0;
    uint64_t v55 = v91;
  }
  else
  {
    uint64_t v54 = 1;
    uint64_t v55 = v91;
    uint64_t v53 = v85;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v53, v54, 1, v48);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v53, 1, v48) == 1)
  {
    sub_100014BBC(v53, &qword_1001C12C0);
    uint64_t v56 = v81;
    goto LABEL_8;
  }
  uint64_t v67 = v84;
  sub_100037898(v53 + *(int *)(v48 + 20), v84, &qword_1001C12C8);
  sub_10003774C(v53);
  uint64_t v68 = type metadata accessor for AnyCodable();
  uint64_t v69 = *(void *)(v68 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
  {
    sub_100014BBC(v67, &qword_1001C12C8);
    uint64_t v56 = v81;
    uint64_t v55 = v91;
    goto LABEL_8;
  }
  uint64_t v70 = v67;
  uint64_t v33 = AnyCodable.stringValue.getter();
  unint64_t v72 = v71;
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v68);
  uint64_t v56 = v81;
  uint64_t v55 = v91;
  uint64_t v57 = v97;
  if (!v72) {
    goto LABEL_9;
  }
  defaultLogger()();
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v83, v57, v56);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  long long v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.debug.getter();
  int v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v76 = swift_slowAlloc();
    uint64_t v98 = 0;
    uint64_t v77 = v76;
    uint64_t v97 = swift_slowAlloc();
    uint64_t v102 = v97;
    *(_DWORD *)uint64_t v77 = 136315650;
    os_log_t v94 = v73;
    swift_bridgeObjectRetain();
    size_t v100 = sub_10004C3A4(v52, v51, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v77 + 12) = 2080;
    LODWORD(v92) = v75;
    long long v78 = v83;
    dispatch thunk of RawRepresentable.rawValue.getter();
    size_t v100 = sub_10004C3A4((uint64_t)v100, v101, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v78, v56);
    *(_WORD *)(v77 + 22) = 2080;
    swift_bridgeObjectRetain();
    size_t v100 = sub_10004C3A4(v33, v72, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v79 = v94;
    _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v92, "Element found for doc Type %s and element Identifier %s : %s", (uint8_t *)v77, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v83, v56);

    swift_bridgeObjectRelease_n();
  }
  ((void (*)(char *, uint64_t))v96)(v82, v95);
  return v33;
}

double sub_100035DD8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C12B0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - v6;
  swift_bridgeObjectRetain();
  ISO18013KnownDocTypes.init(rawValue:)();
  uint64_t v8 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    sub_100037898((uint64_t)v7, (uint64_t)v5, &qword_1001C12B0);
    int v10 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v5, v8);
    if (v10 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
    {
      uint64_t v11 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
      *(void *)(a1 + 24) = v11;
      uint64_t v12 = sub_1000378FC(&qword_1001C12B8, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
      *(void *)(a1 + 32) = v12;
      uint64_t v13 = sub_10002C3A0((uint64_t *)a1);
      uint64_t v14 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104);
      v14(v13, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v11);
      *(void *)(a1 + 64) = v11;
      *(void *)(a1 + 72) = v12;
      uint64_t v15 = sub_10002C3A0((uint64_t *)(a1 + 40));
      v14(v15, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v11);
      *(void *)(a1 + 104) = v11;
      *(void *)(a1 + 112) = v12;
      uint64_t v16 = sub_10002C3A0((uint64_t *)(a1 + 80));
      v14(v16, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v11);
LABEL_6:
      sub_100014BBC((uint64_t)v7, &qword_1001C12B0);
      return result;
    }
    if (v10 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      *(void *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  }
  sub_100014BBC((uint64_t)v7, &qword_1001C12B0);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_100036098()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000341B8();
  uint64_t v6 = v0;
  if (v0)
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.internalError(_:), v1);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = sub_100090B78(v5);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1000362A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000341B8();
  if (v2)
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.internalError(_:), v5);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000378FC((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v11 = sub_1000D4DA4(a1, v9, a2);
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
}

uint64_t sub_1000364A4()
{
  sub_1000035EC(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_100014BBC(v0 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload, &qword_1001C1368);
  sub_10000B9DC(v0 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat;
  uint64_t v2 = type metadata accessor for ISO18013CodingKeyFormat();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100036550()
{
  return type metadata accessor for ISO18013PackagePayloadProcessor();
}

uint64_t type metadata accessor for ISO18013PackagePayloadProcessor()
{
  uint64_t result = qword_1001C1120;
  if (!qword_1001C1120) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000365A4()
{
  sub_10003668C();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ISO18013CodingKeyFormat();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10003668C()
{
  if (!qword_1001C1130)
  {
    type metadata accessor for ISO18013Package();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001C1130);
    }
  }
}

uint64_t sub_1000366E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100036AC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003670C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 32) = a2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v4;
  return _swift_task_switch(sub_100036730, v4, 0);
}

uint64_t sub_100036730()
{
  sub_10002CC24(*(unsigned __int8 *)(v0 + 32), *(void **)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000367B0(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1000367D0, v3, 0);
}

uint64_t sub_1000367D0()
{
  uint64_t v1 = sub_100033B04(*(void *)(v0 + 16));
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10003684C(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = *v2;
  v3[4] = *v2;
  return _swift_task_switch(sub_100036870, v4, 0);
}

uint64_t sub_100036870()
{
  uint64_t v1 = sub_1000362A4(v0[2], v0[3]);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_1000368F0(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_100036910, v3, 0);
}

uint64_t sub_100036910()
{
  sub_100033D1C(*(void *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003698C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_1000369AC, v2, 0);
}

uint64_t sub_1000369AC()
{
  uint64_t v1 = sub_100036098();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100036A28()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_100036A48, v2, 0);
}

uint64_t sub_100036A48()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 112);
  unint64_t v2 = *(void *)(v1 + 120);
  sub_10000354C(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v4(v3, v2);
}

uint64_t sub_100036AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ISO18013CodingKeyFormat.standard(_:), v4);
  uint64_t v18 = &type metadata for PayloadProcessorAnalyticsRecorder;
  uint64_t v19 = &off_1001B8360;
  type metadata accessor for ISO18013PackagePayloadProcessor();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_100036D00((uint64_t)v17, (uint64_t)&type metadata for PayloadProcessorAnalyticsRecorder);
  __chkstk_darwin(v9);
  (*(void (**)(void))(v10 + 16))();
  uint64_t v15 = &type metadata for PayloadProcessorAnalyticsRecorder;
  uint64_t v16 = &off_1001B8360;
  swift_defaultActor_initialize();
  uint64_t v11 = v8 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
  uint64_t v12 = type metadata accessor for ISO18013Package();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)(v8 + 112) = a1;
  *(void *)(v8 + 120) = a2;
  sub_10002C468(&v14, v8 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v8 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v7, v4);
  sub_10000B9DC((uint64_t)v17);
  return v8;
}

uint64_t sub_100036D00(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100036D50(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v8);
  uint64_t v12 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v12 == a1 && v14 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      return 0;
    }
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v22 = v4;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_10004C3A4(a1, a2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "ISO18013PackagePayloadProcessor: issuerForDocTypeWithoutCorrespondingElementIdentifier docType: %s returning JP", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return 20554;
}

uint64_t sub_10003707C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v49[0] = a6;
  v49[1] = a7;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v60 = a2;
  uint64_t v61 = a3;
  uint64_t v59 = a1;
  uint64_t v7 = type metadata accessor for AnyCodable();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  uint64_t v50 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v11 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v18);
  uint64_t v22 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (v22 == v60 && v24 == v61)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      uint64_t v27 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v59, v58);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    }
  }
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v14);
  uint64_t v28 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (v28 == v56 && v30 == v57)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v59, v58);
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v59, v58);
    if ((v31 & 1) == 0) {
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    }
  }
  uint64_t v32 = ISO18013IssuerSignedItem.elementIdentifier.getter();
  uint64_t v34 = v33;
  uint64_t v35 = v53;
  uint64_t v36 = v54;
  uint64_t v37 = v55;
  (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, enum case for ISO18013_5_1_ElementIdentifier.portrait(_:), v55);
  uint64_t v38 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  uint64_t v40 = v39;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
  if (v32 == v38 && v34 == v40)
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
  }
  else
  {
    uint64_t v42 = v27;
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v42);
    if ((v43 & 1) == 0) {
      return result;
    }
  }
  unint64_t v44 = v50;
  ISO18013IssuerSignedItem.elementValue.getter();
  AnyCodable.value.getter();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v52);
  if (!v65) {
    return sub_100014BBC((uint64_t)v64, &qword_1001C1360);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v46 = v62;
    unint64_t v45 = v63;
    switch(v63 >> 62)
    {
      case 1uLL:
        sub_1000035EC(v62, v63);
        if (__OFSUB__(HIDWORD(v46), v46))
        {
          __break(1u);
          JUMPOUT(0x1000376C8);
        }
        return result;
      case 2uLL:
        uint64_t v48 = *(void *)(v62 + 16);
        uint64_t v47 = *(void *)(v62 + 24);
        sub_1000035EC(v62, v63);
        unint64_t v45 = v47 - v48;
        if (__OFSUB__(v47, v48))
        {
          __break(1u);
          goto LABEL_27;
        }
        break;
      case 3uLL:
LABEL_27:
        sub_1000035EC(v46, v45);
        break;
      default:
        sub_1000035EC(v62, v63);
        break;
    }
    type metadata accessor for IDCSAnalytics();
    return static IDCSAnalytics.sendPayloadPortraitSizeEvent(docType:issuer:portraitSizeBytes:)();
  }
  return result;
}

uint64_t sub_1000376D8()
{
  return sub_10008E748(*(void *)(v0 + 16));
}

unint64_t sub_1000376E0()
{
  return sub_10008EEC0();
}

uint64_t sub_1000376E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CredentialElement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003774C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CredentialElement(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000377A8(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000377E0()
{
  unint64_t result = qword_1001C12F8;
  if (!qword_1001C12F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C12F8);
  }
  return result;
}

unint64_t sub_100037834()
{
  return sub_100033A50(v0);
}

unint64_t sub_10003783C()
{
  unint64_t result = qword_1001C1340;
  if (!qword_1001C1340)
  {
    sub_100016F64(&qword_1001C1330);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C1340);
  }
  return result;
}

uint64_t sub_100037898(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006CC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000378FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100037944(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006CC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000379A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C1368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1)
{
  sub_10000B9DC(a1);
  sub_10000B9DC(a1 + 40);

  return sub_10000B9DC(a1 + 80);
}

_OWORD *initializeWithCopy for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *assignWithCopy for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1, uint64_t a2)
{
  sub_10000B9DC(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_10000B9DC(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_10000B9DC(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers()
{
  return &type metadata for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers;
}

uint64_t sub_100037CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for ISO18013CodingKeyFormat.ACWG(_:), v5);
  uint64_t v19 = &type metadata for PayloadProcessorAnalyticsRecorder;
  uint64_t v20 = &off_1001B8360;
  type metadata accessor for ISO18013PackagePayloadProcessor();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = sub_100036D00((uint64_t)v18, (uint64_t)&type metadata for PayloadProcessorAnalyticsRecorder);
  __chkstk_darwin(v10);
  (*(void (**)(void))(v11 + 16))();
  uint64_t v16 = &type metadata for PayloadProcessorAnalyticsRecorder;
  uint64_t v17 = &off_1001B8360;
  swift_defaultActor_initialize();
  uint64_t v12 = v9 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
  uint64_t v13 = type metadata accessor for ISO18013Package();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)(v9 + 112) = a1;
  *(void *)(v9 + 120) = a2;
  sub_10002C468(&v15, v9 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v9 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v8, v5);
  sub_10000B9DC((uint64_t)v18);
  *(void *)(v2 + 112) = v9;
  return v2;
}

uint64_t sub_100037F38(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 72) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = *(void *)(v4 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100037FFC, v2, 0);
}

uint64_t sub_100037FFC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 56) = v1;
  return _swift_task_switch(sub_100038020, v1, 0);
}

uint64_t sub_100038020()
{
  sub_10002CC24(*(unsigned __int8 *)(v0 + 72), *(void **)(v0 + 16));
  *(void *)(v0 + 64) = 0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000380E4()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10003822C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000382EC, v1, 0);
}

uint64_t sub_1000382EC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 56) = v1;
  return _swift_task_switch(sub_100038310, v1, 0);
}

uint64_t sub_100038310()
{
  uint64_t v1 = sub_1000341B8();
  uint64_t v2 = sub_10008DB44(*(void *)(v0 + 16), v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100038500()
{
  (*(void (**)(void, void, void))(v0 + 64))(*(void *)(v0 + 48), *(unsigned int *)(v0 + 104), *(void *)(v0 + 32));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100038630(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000386F4, v2, 0);
}

uint64_t sub_1000386F4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_100038718, v1, 0);
}

uint64_t sub_100038718()
{
  uint64_t v1 = sub_1000341B8();
  uint64_t v2 = sub_1000D4DA4(v0[2], v1, v0[3]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void *))v0[1];
  return v3(v2);
}

uint64_t sub_1000388F0()
{
  (*(void (**)(void, void, void))(v0 + 72))(*(void *)(v0 + 56), *(unsigned int *)(v0 + 112), *(void *)(v0 + 40));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100038A1C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100038ADC, v1, 0);
}

uint64_t sub_100038ADC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 56) = v1;
  return _swift_task_switch(sub_100038B00, v1, 0);
}

uint64_t sub_100038B00()
{
  sub_100033D1C(v0[2]);
  v0[8] = 0;
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100038BC0()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100038D14()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_100038DD4, v0, 0);
}

uint64_t sub_100038DD4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112);
  *(void *)(v0 + 48) = v1;
  return _swift_task_switch(sub_100038DF8, v1, 0);
}

uint64_t sub_100038DF8()
{
  uint64_t v1 = sub_1000341B8();
  uint64_t v2 = sub_100090B78(v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100038FE0()
{
  (*(void (**)(void, void, void))(v0 + 56))(*(void *)(v0 + 40), *(unsigned int *)(v0 + 96), *(void *)(v0 + 24));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003910C()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ACWGPackagePayloadProcessor()
{
  return self;
}

uint64_t sub_100039168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for ACWGPackagePayloadProcessor();
  uint64_t v6 = swift_allocObject();
  uint64_t result = sub_100037CE4(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t sub_1000391C0(uint64_t a1, char a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100007458;
  return sub_100037F38(a1, a2);
}

uint64_t sub_10003926C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016B68;
  return sub_10003822C(a1);
}

uint64_t sub_100039304(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100016FDC;
  return sub_100038630(a1, a2);
}

uint64_t sub_1000393AC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016FE0;
  return sub_100038A1C(a1);
}

uint64_t sub_100039448()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016FDC;
  return sub_100038D14();
}

uint64_t sub_1000394D8()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_1000394F8, v2, 0);
}

uint64_t sub_1000394F8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112);
  *(void *)(v0 + 24) = v1;
  return _swift_task_switch(sub_10003951C, v1, 0);
}

uint64_t sub_10003951C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v1 + 112);
  unint64_t v2 = *(void *)(v1 + 120);
  sub_10000354C(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v4(v3, v2);
}

void *sub_100039594(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100068310(0, v1, 0);
  uint64_t result = (void *)sub_100129FF0(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v4;
  uint64_t v23 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
    uint64_t v12 = v11[1];
    uint64_t v24 = *v11;
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      uint64_t result = (void *)sub_100068310(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    long long v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v24;
    v15[5] = v12;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v10);
    if ((v16 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2 << (v5 & 0x3F));
    if (v17)
    {
      int64_t v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v21;
    }
    else
    {
      unint64_t v18 = v10 + 1;
      unint64_t v19 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v21;
      if (v10 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v10)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              unint64_t v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000397A0()
{
  qword_1001C14A8 = (uint64_t)&off_1001B3728;
}

void sub_1000397B4()
{
  externalTestRoots._rawValue = &off_1001B3758;
}

Swift::OpaquePointer *externalTestRoots.unsafeMutableAddressor()
{
  if (qword_1001C03D0 != -1) {
    swift_once();
  }
  return &externalTestRoots;
}

void sub_100039814()
{
  qword_1001C14B0 = (uint64_t)&off_1001B3788;
}

uint64_t sub_100039828()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v64[1] = *(void *)(v2 - 8);
  v64[2] = v2;
  __chkstk_darwin(v2);
  v64[3] = (char *)v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v65 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  int64_t v9 = (char *)v64 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v64 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)v64 - v13;
  uint64_t v15 = type metadata accessor for CoreIDVAssetBundle.CertificateType();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001C03D8 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_1001C14B0;
  uint64_t v70 = qword_1001C14B0;
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for CoreIDVAssetBundle.CertificateType.terminalAuthRoots(_:), v15);
  swift_bridgeObjectRetain_n();
  unint64_t v20 = sub_10003A258((unint64_t)v18, v19);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (uint64_t)v21;
    int v22 = self;
    id v23 = [v22 standardUserDefaults];
    v24._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v24._object = (void *)0x800000010017BD10;
    Swift::Bool v25 = NSUserDefaults.internalBool(forKey:)(v24);

    if (v25)
    {
      defaultLogger()();
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Allowing internal reader authentication test roots", v28, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v66 + 8))(v14, v67);
      if (qword_1001C03C8 != -1) {
        swift_once();
      }
      uint64_t v29 = swift_bridgeObjectRetain();
      sub_1000DADBC(v29);
    }
    id v30 = [v22 standardUserDefaults];
    v31._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v31._object = (void *)0x800000010017BD10;
    Swift::Bool v32 = NSUserDefaults.internalBool(forKey:)(v31);

    if (v32
      || (id v33 = [v22 standardUserDefaults],
          NSString v34 = String._bridgeToObjectiveC()(),
          unsigned int v35 = [v33 BOOLForKey:v34],
          v33,
          v34,
          v35))
    {
      defaultLogger()();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Allowing external reader authentication test roots", v38, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v67);
      if (qword_1001C03D0 != -1) {
        swift_once();
      }
      uint64_t v39 = swift_bridgeObjectRetain();
      sub_1000DADBC(v39);
    }
    id v40 = [v22 standardUserDefaults];
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [v40 stringForKey:v41];

    if (v42)
    {
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      defaultLogger()();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Reader auth root cert injected through user defaults", v48, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v67);
      uint64_t v49 = (char *)v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v49 = sub_1000D0D48(0, *((void *)v49 + 2) + 1, 1, v49);
      }
      unint64_t v51 = *((void *)v49 + 2);
      unint64_t v50 = *((void *)v49 + 3);
      if (v51 >= v50 >> 1) {
        uint64_t v49 = sub_1000D0D48((char *)(v50 > 1), v51 + 1, 1, v49);
      }
      *((void *)v49 + 2) = v51 + 1;
      uint64_t v52 = &v49[16 * v51];
      *((void *)v52 + 4) = v43;
      *((void *)v52 + 5) = v45;
      uint64_t v70 = (uint64_t)v49;
    }
    id v53 = [v22 standardUserDefaults];
    v54._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v54._object = (void *)0x800000010017BBB0;
    Swift::Bool v55 = NSUserDefaults.internalBool(forKey:)(v54);

    if (v55)
    {
      uint64_t v56 = v65;
      defaultLogger()();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        v69[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136315138;
        v64[0] = v59 + 4;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v60 = Array.description.getter();
        unint64_t v62 = v61;
        swift_bridgeObjectRelease();
        uint64_t v68 = sub_10004C3A4(v60, v62, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "All trusted reader roots: %s", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v66 + 8))(v56, v67);
      }
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v1 = decodeCertificateChain(fromBase64DER:)();
    swift_bridgeObjectRelease_n();
  }
  return v1;
}

void *sub_10003A258(unint64_t a1, void *a2)
{
  unint64_t v73 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  __chkstk_darwin(v3);
  unint64_t v71 = (char *)v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for CoreIDVAssetBundle.CertificateType();
  uint64_t v5 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v7 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v8 - 8);
  uint64_t v79 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v74 = (char *)v64 - v12;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v64 - v13;
  uint64_t v15 = sub_100006CC8(&qword_1001C14B8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  int v22 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  int v75 = (char *)v64 - v23;
  uint64_t v84 = a2;
  Swift::String v24 = self;
  uint64_t v76 = a2;
  swift_bridgeObjectRetain();
  id v25 = [v24 defaultManager];
  id v26 = [v25 URLsForDirectory:5 inDomains:1];

  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v27 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, v27 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100014BBC((uint64_t)v17, &qword_1001C14B8);
LABEL_10:
    uint64_t v36 = 0;
    unint64_t v37 = 0xF000000000000000;
    uint64_t v38 = v80;
    uint64_t v39 = v76;
    id v40 = v77;
    goto LABEL_11;
  }
  uint64_t v28 = v75;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v75, v17, v18);
  URL.appendingPathComponent(_:)();
  if ((URL.isFileOnDisk.getter() & 1) == 0)
  {
    unsigned int v35 = *(void (**)(char *, uint64_t))(v19 + 8);
    v35(v22, v18);
    v35(v28, v18);
    goto LABEL_10;
  }
  defaultLogger()();
  uint64_t v29 = v72;
  (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, v73, v72);
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  int v68 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    os_log_t v67 = v30;
    Swift::Bool v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v83[0] = v66;
    uint64_t v65 = v32;
    *(_DWORD *)Swift::Bool v32 = 136315138;
    v64[1] = v32 + 4;
    uint64_t v33 = CoreIDVAssetBundle.CertificateType.rawValue.getter();
    uint64_t v82 = sub_10004C3A4(v33, v34, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v29);
    id v30 = v67;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "Looking at mobile asset loaded certificates for type : %s", v65, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v29);
  }

  (*(void (**)(char *, uint64_t))(v78 + 8))(v14, v79);
  uint64_t v56 = v80;
  uint64_t v57 = Data.init(contentsOf:options:)();
  if (v56)
  {
    (*(void (**)(char *, void, uint64_t))(v69 + 104))(v71, enum case for DIPError.Code.internalError(_:), v70);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_100009764(0, 0xF000000000000000);
    unint64_t v61 = *(void (**)(char *, uint64_t))(v19 + 8);
    v61(v22, v18);
    v61(v75, v18);
    return (void *)swift_bridgeObjectRelease();
  }
  uint64_t v36 = v57;
  unint64_t v59 = v58;
  sub_10000354C(v57, v58);
  uint64_t v60 = (uint64_t)v76;
  uint64_t v38 = 0;
  unint64_t v62 = sub_10003B414(v73, (uint64_t)v76, v36, v59);
  sub_1000035EC(v36, v59);
  unint64_t v73 = v59;
  unint64_t v63 = *(void (**)(char *, uint64_t))(v19 + 8);
  v63(v22, v18);
  v63(v75, v18);
  swift_bridgeObjectRelease();
  uint64_t v84 = v62;
  id v40 = v77;
  unint64_t v37 = v73;
  uint64_t v39 = (void *)v60;
LABEL_11:
  if (sub_10003C124(v84, v39))
  {
    NSString v41 = v74;
    defaultLogger()();
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "No new rootCertificates from cached", v44, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v41, v79);
  }
  id v45 = [self standardUserDefaults];
  v46._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v46._object = (void *)0x800000010017BBB0;
  Swift::Bool v47 = NSUserDefaults.internalBool(forKey:)(v46);

  if (v47)
  {
    defaultLogger()();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v80 = v38;
      v83[0] = v51;
      *(_DWORD *)unint64_t v50 = 136315138;
      uint64_t v76 = (void *)v36;
      swift_beginAccess();
      unint64_t v73 = v37;
      swift_bridgeObjectRetain();
      uint64_t v52 = Array.description.getter();
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      uint64_t v81 = sub_10004C3A4(v52, v54, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "logging root Certs = %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100009764((uint64_t)v76, v73);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
    }
    else
    {
      sub_100009764(v36, v37);

      (*(void (**)(char *, uint64_t))(v78 + 8))(v40, v79);
    }
  }
  else
  {
    sub_100009764(v36, v37);
  }
  swift_beginAccess();
  return v84;
}

char *sub_10003AD48()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v45 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v38 - v8;
  uint64_t v10 = type metadata accessor for CoreIDVAssetBundle.CertificateType();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = _swiftEmptyArrayStorage;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for CoreIDVAssetBundle.CertificateType.appleIssuerRoots(_:), v10);
  unint64_t v14 = sub_10003A258((unint64_t)v13, _swiftEmptyArrayStorage);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = v14;
    id v40 = v9;
    NSString v41 = v7;
    id v42 = v3;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_bridgeObjectRelease();
    uint64_t v48 = v15;
    uint64_t v16 = self;
    id v17 = [v16 standardUserDefaults];
    v18._uint64_t countAndFlagsBits = 0xD000000000000023;
    v18._object = (void *)0x800000010017BB80;
    Swift::Bool v19 = NSUserDefaults.internalBool(forKey:)(v18);

    uint64_t v21 = v43;
    uint64_t v20 = v44;
    if (v19)
    {
      int v22 = v40;
      defaultLogger()();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        id v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Adding internal reader authentication test roots as Apple issuer roots", v25, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
      if (qword_1001C03C8 != -1) {
        swift_once();
      }
      uint64_t v26 = swift_bridgeObjectRetain();
      sub_1000DADBC(v26);
    }
    id v27 = [v16 standardUserDefaults];
    v28._object = (void *)0x800000010017BBB0;
    v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    Swift::Bool v29 = NSUserDefaults.internalBool(forKey:)(v28);

    if (v29)
    {
      id v30 = v41;
      defaultLogger()();
      os_log_type_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      LODWORD(v40) = v32;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        v47[0] = v39;
        *(_DWORD *)uint64_t v33 = 136315138;
        v38[1] = v33 + 4;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v34 = Array.description.getter();
        unint64_t v36 = v35;
        swift_bridgeObjectRelease();
        uint64_t v46 = sub_10004C3A4(v34, v36, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v40, "All trusted apple issued reader roots: %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v21 + 8))(v41, v44);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
      }
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v3 = (char *)decodeCertificateChain(fromBase64DER:)();
    swift_bridgeObjectRelease_n();
  }
  return v3;
}

id sub_10003B414(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v79 = a1;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v87 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006CC8(&qword_1001C14C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v78 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for CoreIDVAssetBundle.CertificateType();
  uint64_t v82 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v81 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100006CC8(&qword_1001C14C8);
  uint64_t v77 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  long long v83 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v85 = *(void *)(v15 - 8);
  uint64_t v86 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  Swift::String v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v65 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v65 - v22;
  uint64_t v24 = type metadata accessor for CoreIDVAssetBundle();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v93 = (char *)&v65 - v29;
  if (a4 >> 60 == 15)
  {
    swift_bridgeObjectRetain();
    return (id)a2;
  }
  uint64_t v69 = v28;
  uint64_t v71 = v27;
  uint64_t v72 = v26;
  uint64_t v70 = a2;
  uint64_t v73 = v8;
  os_log_type_t v74 = v10;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10000354C(a3, a4);
  JSONDecoder.init()();
  type metadata accessor for CoreIDVAsset();
  sub_10003E0C0(&qword_1001C14D0, (void (*)(uint64_t))&type metadata accessor for CoreIDVAsset);
  unint64_t v76 = a4;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v75 = a3;
  if (v4)
  {
    swift_release();
    uint64_t v30 = enum case for DIPError.Code.internalError(_:);
    os_log_type_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 104);
    unint64_t v32 = v76;
LABEL_5:
    a2 = (uint64_t)v74;
    v31(v74, v30, v73);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_100009764(v75, v32);
    return (id)a2;
  }
  swift_release();
  uint64_t v68 = v92[0];
  CoreIDVAsset.base.getter();
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v34 = result;
    id v35 = (id)MobileGestalt_copy_buildVersion_obj();

    if (v35)
    {
      uint64_t v66 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      defaultLogger()();
      os_log_t v67 = v37;
      swift_bridgeObjectRetain_n();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        id v40 = (uint8_t *)swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        NSString v41 = v40;
        *(_DWORD *)id v40 = 136315138;
        uint64_t v65 = v40 + 4;
        unint64_t v42 = (unint64_t)v67;
        swift_bridgeObjectRetain();
        uint64_t v90 = sub_10004C3A4((uint64_t)v66, v42, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "build version = %s", v41, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v50 = *(void (**)(char *, uint64_t))(v85 + 8);
      v50(v23, v86);
      Regex.init(_regexString:version:)();
      uint64_t v90 = (uint64_t)v66;
      uint64_t v91 = v67;
      uint64_t v88 = 0;
      unint64_t v89 = 0xE000000000000000;
      sub_10003E108();
      sub_1000377E0();
      sub_10003E15C();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = v92[0];
      unint64_t v51 = v92[1];
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        Swift::Bool v55 = (uint8_t *)swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        os_log_t v67 = v50;
        *(_DWORD *)Swift::Bool v55 = 136315138;
        uint64_t v66 = v55 + 4;
        swift_bridgeObjectRetain();
        uint64_t v90 = sub_10004C3A4(v52, v51, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "prefix = %s", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v67(v21, v86);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v50(v21, v86);
      }
      unint64_t v32 = v76;
      uint64_t v56 = v69;
      sub_10003C1EC(v68, v52, v51, v69);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v83, v84);
      uint64_t v57 = v71;
      unint64_t v58 = v93;
      uint64_t v59 = v72;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v93, v72);
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v58, v56, v59);
      uint64_t v49 = v79;
      uint64_t v47 = v80;
      uint64_t v46 = v70;
    }
    else
    {
      defaultLogger()();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v70;
      uint64_t v47 = v80;
      if (v45)
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "build prefix not available, using default", v48, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v85 + 8))(v18, v86);
      unint64_t v32 = v76;
      uint64_t v49 = v79;
    }
    unint64_t v61 = v81;
    uint64_t v60 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v49, v47);
    int v62 = (*(uint64_t (**)(char *, uint64_t))(v60 + 88))(v61, v47);
    if (v62 == enum case for CoreIDVAssetBundle.CertificateType.terminalAuthRoots(_:))
    {
      uint64_t v63 = (uint64_t)v78;
      uint64_t v64 = v93;
      CoreIDVAssetBundle.terminalAuthRoots.getter();
    }
    else if (v62 == enum case for CoreIDVAssetBundle.CertificateType.issuerRoots(_:))
    {
      uint64_t v63 = (uint64_t)v78;
      uint64_t v64 = v93;
      CoreIDVAssetBundle.issuerRoots.getter();
    }
    else
    {
      if (v62 != enum case for CoreIDVAssetBundle.CertificateType.appleIssuerRoots(_:))
      {
        uint64_t v30 = enum case for DIPError.Code.internalError(_:);
        os_log_type_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 104);
        v31(v74, enum case for DIPError.Code.internalError(_:), v73);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v93, v72);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v47);
        goto LABEL_5;
      }
      uint64_t v63 = (uint64_t)v78;
      uint64_t v64 = v93;
      CoreIDVAssetBundle.appleIssuerRoots.getter();
    }
    a2 = sub_10003D014(v46, v63);
    swift_release();
    sub_100009764(v75, v32);
    sub_100014BBC(v63, &qword_1001C14C0);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v64, v72);
    return (id)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003C124(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10003C1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v133 = a4;
  uint64_t v7 = sub_100006CC8(&qword_1001C14E8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v127 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v122 = (char *)&v119 - v11;
  __chkstk_darwin(v10);
  size_t v130 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v119 - v12);
  uint64_t v13 = type metadata accessor for CoreIDVAssetBundle();
  uint64_t v134 = *(void *)(v13 - 8);
  uint64_t v135 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v131 = (char *)&v119 - v18;
  __chkstk_darwin(v17);
  uint64_t v126 = (char *)&v119 - v19;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v128 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v119 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  BOOL v123 = (char *)&v119 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v125 = (char *)&v119 - v30;
  __chkstk_darwin(v29);
  unint64_t v32 = (char *)&v119 - v31;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v136 = v21;
  uint64_t v129 = v26;
  uint64_t v124 = v16;
  if (v35)
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    unint64_t v37 = (char *)swift_slowAlloc();
    uint64_t v121 = a1;
    uint64_t v138 = v37;
    *(_DWORD *)unint64_t v36 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v137 = sub_10004C3A4(a2, a3, (uint64_t *)&v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "MobileAsset trying to find asset for %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v21 = v136;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v132 = *(void (**)(char *, uint64_t))(v21 + 8);
  v132(v32, v20);
  uint64_t v38 = CoreIDVAsset.iOS.getter();
  uint64_t v39 = v134;
  uint64_t v40 = v135;
  if (!v38)
  {
    uint64_t v46 = v20;
    swift_arrayDestroy();
    uint64_t v47 = v128;
    defaultLogger()();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "MobileAsset, No deviceType mapped, returning default", v50, 2u);
      swift_slowDealloc();
    }

    v132(v47, v46);
    return CoreIDVAsset.base.getter();
  }
  uint64_t v41 = v38;
  if (*(void *)(v38 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v42 = sub_10013C484(a2, a3);
    if (v43)
    {
      os_log_type_t v44 = v130;
      (*(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), unint64_t, uint64_t))(v39 + 16))(v130, *(void *)(v41 + 56) + *(void *)(v39 + 72) * v42, v40);
      uint64_t v45 = 0;
    }
    else
    {
      uint64_t v45 = 1;
      os_log_type_t v44 = v130;
    }
    (*(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v39 + 56))(v44, v45, 1, v40);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v39 + 48))(v44, 1, v40) != 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v79 = *(void (**)(char *, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))(v39 + 32);
      uint64_t v80 = v126;
      v79(v126, v44, v40);
      uint64_t v81 = v125;
      defaultLogger()();
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "MobileAsset, found an exact match", v84, 2u);
        swift_slowDealloc();
      }

      v132(v81, v20);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v79)(v133, v80, v40);
    }
  }
  else
  {
    os_log_type_t v44 = v130;
    (*(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v134 + 56))(v130, 1, 1, v135);
  }
  sub_100014BBC((uint64_t)v44, &qword_1001C14E8);
  uint64_t v52 = *(void *)(v41 + 16);
  uint64_t v120 = v20;
  if (v52 && (unint64_t v53 = sub_10013C484(0x746C7561666564, 0xE700000000000000), (v54 & 1) != 0))
  {
    Swift::Bool v55 = v124;
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v124, *(void *)(v41 + 56) + *(void *)(v39 + 72) * v53, v40);
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v131, v55, v40);
  }
  else
  {
    CoreIDVAsset.base.getter();
  }
  swift_bridgeObjectRetain();
  uint64_t v56 = a2;
  sub_10003EA20(1);
  swift_bridgeObjectRelease();
  uint64_t v57 = static String._fromSubstring(_:)();
  unint64_t v59 = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000) == 0) {
    uint64_t v60 = v57 & 0xFFFFFFFFFFFFLL;
  }
  if (!v60
    || (swift_bridgeObjectRetain(), uint64_t v61 = sub_10003D4BC(v57, v59), (v62 & 1) != 0)
    || (uint64_t v63 = (char *)v61, v61 < 2)
    || (swift_bridgeObjectRetain(), uint64_t v64 = sub_10003D70C(v56, a3), v66 = v65, swift_bridgeObjectRelease(), !v66))
  {
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = (uint64_t)v129;
    defaultLogger()();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "MobileAsset, system gave inconsistent buildVersion, using default", v88, 2u);
      swift_slowDealloc();
    }

    v132((char *)v85, v120);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v133, v131, v40);
  }
  if ((Character.isUppercase.getter() & 1) == 0 || (sub_10010EE78(v64, (uint64_t)v66, &off_1001B37B8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  uint64_t v129 = (char *)v64;
  size_t v130 = v66;
  uint64_t v67 = v57;
  uint64_t v68 = swift_bridgeObjectRetain();
  uint64_t v69 = sub_10003D78C(v68);
  int64_t v70 = *(void *)(v69 + 16);
  if (v70)
  {
    uint64_t v128 = v63;
    uint64_t v138 = (char *)_swiftEmptyArrayStorage;
    sub_100068310(0, v70, 0);
    uint64_t v71 = v138;
    uint64_t v126 = (char *)v69;
    uint64_t v72 = v69 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_10003EA20(1);
      uint64_t v73 = static String._fromSubstring(_:)();
      uint64_t v75 = v74;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v138 = v71;
      unint64_t v77 = *((void *)v71 + 2);
      unint64_t v76 = *((void *)v71 + 3);
      if (v77 >= v76 >> 1)
      {
        sub_100068310(v76 > 1, v77 + 1, 1);
        uint64_t v71 = v138;
      }
      v72 += 16;
      *((void *)v71 + 2) = v77 + 1;
      uint64_t v78 = &v71[16 * v77];
      *((void *)v78 + 4) = v73;
      *((void *)v78 + 5) = v75;
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease();
    uint64_t v39 = v134;
    uint64_t v40 = v135;
    uint64_t v63 = v128;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v71 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v89 = sub_100096844((uint64_t)v71);
  swift_bridgeObjectRelease();
  if ((sub_100007A0C(v67, v59, v89) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v90 = sub_10003D9B4((uint64_t)v129, (uint64_t)v130, &off_1001B37B8);
  char v92 = v91;
  swift_bridgeObjectRelease();
  if (v92)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  uint64_t v93 = v122;
  sub_10003DA9C(v90, v67, v59, (uint8_t *)&off_1001B37B8, v41, v122);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v93, 1, v40) != 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v131, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v133, v93, v40);
  }
  sub_100014BBC((uint64_t)v93, &qword_1001C14E8);
LABEL_46:
  char v94 = 0;
  uint64_t v95 = v63 - 1;
  uint64_t v96 = v89 + 56;
  size_t v130 = (unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
  uint64_t v97 = (uint64_t)(v63 - 2);
  if ((uint64_t)(v63 - 1) >= 1)
  {
    while (1)
    {
LABEL_51:
      uint64_t v138 = v95;
      uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v101 = v100;
      if (!*(void *)(v89 + 16)) {
        goto LABEL_49;
      }
      uint64_t v102 = v99;
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v103 = Hasher._finalize()();
      uint64_t v104 = -1 << *(unsigned char *)(v89 + 32);
      unint64_t v105 = v103 & ~v104;
      if (((*(void *)(v96 + ((v105 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v105) & 1) == 0) {
        goto LABEL_49;
      }
      uint64_t v106 = *(void *)(v89 + 48);
      uint64_t v107 = (void *)(v106 + 16 * v105);
      BOOL v108 = *v107 == v102 && v107[1] == v101;
      if (!v108 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_58:
      uint64_t v109 = v127;
      sub_10003DA9C(7, v102, v101, (uint8_t *)&off_1001B37B8, v41, v127);
      swift_bridgeObjectRelease();
      if ((*v130)(v109, 1, v135) != 1)
      {
        uint64_t v117 = v134;
        uint64_t v118 = v135;
        (*(void (**)(char *, uint64_t))(v134 + 8))(v131, v135);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v117 + 32))(v133, v109, v118);
      }
      sub_100014BBC((uint64_t)v109, &qword_1001C14E8);
LABEL_50:
      uint64_t v95 = (char *)v97;
      BOOL v98 = __OFSUB__(v97--, 1);
      if (v97 < 0 != v98) {
        goto LABEL_47;
      }
    }
    uint64_t v110 = ~v104;
    while (1)
    {
      unint64_t v105 = (v105 + 1) & v110;
      if (((*(void *)(v96 + ((v105 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v105) & 1) == 0) {
        break;
      }
      uint64_t v111 = (void *)(v106 + 16 * v105);
      BOOL v112 = *v111 == v102 && v111[1] == v101;
      if (v112 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_58;
      }
    }
LABEL_49:
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
LABEL_47:
  if ((v94 & 1) == 0)
  {
    uint64_t v97 = 0;
    char v94 = 1;
    goto LABEL_51;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v113 = v123;
  defaultLogger()();
  unint64_t v114 = Logger.logObject.getter();
  os_log_type_t v115 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v114, v115))
  {
    uint64_t v116 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v116 = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "MobileAsset, exhausted trying to find a compatible version, returning default", v116, 2u);
    swift_slowDealloc();
  }

  v132(v113, v120);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v134 + 32))(v133, v131, v135);
}

uint64_t sub_10003D014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006CC8(&qword_1001C14C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CoreIDVAssetCertificates();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v34 - v16;
  sub_10003EAF0(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100014BBC((uint64_t)v10, &qword_1001C14C0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    id v18 = [self standardUserDefaults];
    v19._object = (void *)0x800000010017BBB0;
    v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    Swift::Bool v20 = NSUserDefaults.internalBool(forKey:)(v19);

    if (v20)
    {
      defaultLogger()();
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      int v23 = v22;
      if (os_log_type_enabled(v21, v22))
      {
        os_log_t v39 = v21;
        uint64_t v24 = swift_slowAlloc();
        int v36 = v23;
        uint64_t v25 = (uint8_t *)v24;
        uint64_t v37 = swift_slowAlloc();
        unint64_t v42 = (void *)v37;
        uint64_t v40 = v5;
        *(_DWORD *)uint64_t v25 = 136315138;
        v34[1] = v25 + 4;
        BOOL v35 = v25;
        CoreIDVAssetCertificates.certificates.getter();
        uint64_t v26 = Dictionary.Keys.description.getter();
        uint64_t v38 = v4;
        unint64_t v28 = v27;
        swift_bridgeObjectRelease();
        uint64_t v41 = sub_10004C3A4(v26, v28, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        os_log_t v29 = v39;
        _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v36, "MobileAsset has certificates of keys: %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v38);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
    }
    uint64_t v30 = CoreIDVAssetCertificates.certificates.getter();
    uint64_t v31 = sub_100039594(v30);
    swift_bridgeObjectRelease();
    unint64_t v42 = v31;
    if ((CoreIDVAssetCertificates.overrideDefault.getter() & 1) == 0)
    {
      uint64_t v32 = swift_bridgeObjectRetain();
      sub_1000DADBC(v32);
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    return (uint64_t)v42;
  }
  return a1;
}

uint64_t sub_10003D4BC(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_10003E2B8(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        Swift::String v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)sub_10003E1D0(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_10003D70C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t sub_10003D78C(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v2 << 6);
LABEL_22:
    uint64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 != 0x746C7561666564 || v15 != 0xE700000000000000)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = sub_100068310(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v18 = _swiftEmptyArrayStorage[2];
        unint64_t v17 = _swiftEmptyArrayStorage[3];
        unint64_t v19 = v18 + 1;
        if (v18 >= v17 >> 1)
        {
          unint64_t v21 = _swiftEmptyArrayStorage[2];
          unint64_t v22 = v18 + 1;
          uint64_t result = sub_100068310(v17 > 1, v18 + 1, 1);
          unint64_t v18 = v21;
          unint64_t v19 = v22;
        }
        _swiftEmptyArrayStorage[2] = v19;
        unsigned int v20 = &_swiftEmptyArrayStorage[2 * v18];
        v20[4] = v14;
        v20[5] = v15;
      }
    }
  }
  int64_t v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v10 >= v7) {
    goto LABEL_32;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v10);
  ++v2;
  if (v11) {
    goto LABEL_21;
  }
  int64_t v2 = v10 + 1;
  if (v10 + 1 >= v7) {
    goto LABEL_32;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v2 = v10 + 2;
  if (v10 + 2 >= v7) {
    goto LABEL_32;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v2 = v10 + 3;
  if (v10 + 3 >= v7) {
    goto LABEL_32;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_21:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_22;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_32:
    swift_release();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10003D9B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  int64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t sub_10003DA9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint8_t *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v49 = a2;
  char v43 = a6;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  unint64_t v42 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006CC8(&qword_1001C14E8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CoreIDVAssetBundle();
  uint64_t result = __chkstk_darwin(v15);
  os_log_type_t v44 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v47 = 0;
  uint64_t v48 = a4 + 32;
  unint64_t v50 = a4;
  unint64_t v51 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v45 = v18 + 16;
  uint64_t v46 = v18;
  unint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  while (1)
  {
    if (a1 <= 0)
    {
      if ((a1 != 0) | v47 & 1) {
        return (*v51)((uint64_t)v43, 1, 1, v15);
      }
      uint64_t v20 = 0;
      int v47 = 1;
    }
    else
    {
      uint64_t v20 = a1 - 1;
    }
    if ((unint64_t)a1 >= *((void *)v50 + 2))
    {
      __break(1u);
      return result;
    }
    unint64_t v21 = (uint64_t *)&v48[16 * a1];
    uint64_t v22 = *v21;
    int v23 = (void *)v21[1];
    v53[0] = v49;
    v53[1] = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v22;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v25 = String.init<A>(_:)();
    unint64_t v27 = v26;
    if (!*(void *)(a5 + 16))
    {
      (*v51)((uint64_t)v14, 1, 1, v15);
      goto LABEL_3;
    }
    uint64_t v28 = v25;
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_10013C484(v28, v27);
    if (v30)
    {
      uint64_t v31 = v46;
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v14, *(void *)(a5 + 56) + *(void *)(v46 + 72) * v29, v15);
      uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
      v32((uint64_t)v14, 0, 1, v15);
    }
    else
    {
      uint64_t v32 = *v51;
      (*v51)((uint64_t)v14, 1, 1, v15);
    }
    swift_bridgeObjectRelease();
    if ((*v19)(v14, 1, v15) != 1) {
      break;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    uint64_t result = sub_100014BBC((uint64_t)v14, &qword_1001C14E8);
    a1 = v20;
  }
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v46 += 32;
  v33(v44, v14, v15);
  os_log_type_t v34 = v42;
  defaultLogger()();
  swift_bridgeObjectRetain();
  BOOL v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    unint64_t v50 = v37 + 4;
    swift_bridgeObjectRetain();
    uint64_t v52 = sub_10004C3A4(v28, v27, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "MobileAsset, choosing asset from %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v41);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v41);
  }
  uint64_t v38 = v43;
  v33(v43, v44, v15);
  return v32((uint64_t)v38, 0, 1, v15);
}

void *sub_10003DFDC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100006CC8(&qword_1001C14F0);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10003E044(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_10003E0C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003E108()
{
  unint64_t result = qword_1001C14D8;
  if (!qword_1001C14D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C14D8);
  }
  return result;
}

unint64_t sub_10003E15C()
{
  unint64_t result = qword_1001C14E0;
  if (!qword_1001C14E0)
  {
    sub_100016F64(&qword_1001C14C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C14E0);
  }
  return result;
}

unsigned __int8 *sub_10003E1B8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10003E2B8(a1, a2, a3);
}

unsigned __int8 *sub_10003E1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10003E534();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_10003E2B8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_10003E2B8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10003E534()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10003E5B4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10003E5B4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10003E70C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_10003DFDC(v9, 0),
          unint64_t v12 = sub_10003E80C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10003E70C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    unint64_t result = sub_10003E044(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_10003E044(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_10003E80C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_10003E044(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_10003E044(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10003EA20(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = result;
  unint64_t result = String.count.getter();
  if (__OFSUB__(result, v1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  String.index(_:offsetBy:limitedBy:)();

  return String.subscript.getter();
}

uint64_t sub_10003EAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C14C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EB58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (void *)AsyncCoreDataStore.container.getter();
  if (v1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v9 = v7;
    id v10 = [v7 newBackgroundContext];

    type metadata accessor for IDCSAsyncDataContext();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v10;
    *a1 = result;
  }
  return result;
}

uint64_t sub_10003ED38()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IDCSAsyncDataContainer()
{
  return self;
}

uint64_t sub_10003ED9C(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_10003EE60, 0, 0);
}

uint64_t sub_10003EE60()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)swift_allocObject();
  v0[9] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = swift_allocObject();
  v0[10] = v5;
  *(void *)(v5 + 16) = sub_100044E24;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  uint64_t v7 = sub_100006CC8(&qword_1001C15E8);
  *uint64_t v6 = v0;
  v6[1] = sub_10003EFBC;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v5, v7);
}

uint64_t sub_10003EFBC()
{
  uint64_t v2 = (void *)*v1;
  v2[12] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10003F124, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_10003F124()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10003F284@<X0>(uint64_t a1@<X2>, void *a2@<X3>, unint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)sub_1000075AC(a1, a2);
  if (v3) {
    return result;
  }
  uint64_t v24 = v7;
  uint64_t v25 = v10;
  unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
  id v20 = (id)result;
  unint64_t v12 = (unint64_t)sub_1000F58F8();
  unint64_t v14 = v12;
  if (!(v12 >> 62))
  {
    uint64_t result = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_4;
    }
LABEL_15:

    uint64_t result = swift_bridgeObjectRelease();
    *a3 = (unint64_t)_swiftEmptyArrayStorage;
    return result;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_15;
  }
LABEL_4:
  if (result < 1)
  {
    __break(1u);
  }
  else
  {
    char v19 = a3;
    uint64_t v15 = 0;
    unint64_t v28 = v14 & 0xC000000000000001;
    uint64_t v26 = v8 + 8;
    unint64_t v23 = &v30;
    *(void *)&long long v13 = 136315138;
    long long v22 = v13;
    uint64_t v21 = (char *)&type metadata for Any + 8;
    unint64_t v27 = v14;
    uint64_t v29 = result;
    do
    {
      if (v28) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(v14 + 8 * v15 + 32);
      }
      unint64_t v17 = v16;
      sub_1000F5DDC();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      ++v15;
    }
    while (v29 != v15);

    uint64_t result = swift_bridgeObjectRelease();
    *char v19 = v31;
  }
  return result;
}

uint64_t sub_10003F684()
{
  v1[14] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[18] = v3;
  v1[19] = *(void *)(v3 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_10003F7BC, 0, 0);
}

uint64_t sub_10003F7BC()
{
  if (byte_1001C4BB0)
  {
    sub_1000065F8(0);
    v0[23] = v1;
    uint64_t v10 = v1;
    uint64_t v11 = swift_allocObject();
    v0[24] = v11;
    *(void *)(v11 + 16) = v10;
    uint64_t v12 = swift_allocObject();
    v0[25] = v12;
    *(void *)(v12 + 16) = sub_100044D74;
    *(void *)(v12 + 24) = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    long long v13 = (void *)swift_task_alloc();
    v0[26] = v13;
    uint64_t v14 = sub_100006CC8(&qword_1001C15D8);
    *long long v13 = v0;
    v13[1] = sub_10003FC4C;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 8, sub_100044D90, v12, v14);
  }
  else
  {
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "getLegacySESlots requires an internal build", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[22];
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void *))v0[1];
    return v8(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10003FC4C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = sub_10003FD78;
  }
  else
  {
    swift_release();
    swift_release();
    *(_OWORD *)(v2 + 224) = *(_OWORD *)(v2 + 64);
    os_log_type_t v3 = sub_10003FF0C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003FD78()
{
  uint64_t v1 = v0[16];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v1 + 104))(v0[17], enum case for DIPError.Code.internalError(_:), v0[15]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void sub_10003FF0C()
{
  uint64_t v47 = v0;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 224);
  uint64_t v1 = (void *)(v0 + 80);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  uint64_t v45 = v0;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v43 = *(void *)(v0 + 144);
    uint64_t v44 = *(void *)(v0 + 168);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = (unsigned char *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 104) = sub_10004C3A4(v5, v7, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Occupied slots: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v8(v44, v43);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 152);
    swift_bridgeObjectRelease_n();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 144);
  if (v14)
  {
    uint64_t v42 = *(void *)(v0 + 160);
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = (unsigned char *)swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v18 = Set.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 96) = sub_10004C3A4(v18, v20, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Credential slots: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v8(v42, v16);
  }
  else
  {

    v8(v15, v16);
  }
  uint64_t v21 = *(void *)(v0 + 184);
  swift_beginAccess();
  unint64_t v22 = *(void *)(v21 + 16);
  uint64_t v23 = *(void *)(v0 + 184);
  if (*(void *)(*(void *)(v0 + 88) + 16) <= v22 >> 3)
  {
    uint64_t v46 = *(unsigned char **)(v0 + 184);
    uint64_t v26 = swift_bridgeObjectRetain();
    sub_100043888(v26);
    swift_bridgeObjectRelease();
    uint64_t v25 = v46;
  }
  else
  {
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = sub_1000439FC(v24, v23);
    swift_bridgeObjectRelease();
  }
  int64_t v27 = 0;
  unint64_t v28 = v25 + 56;
  uint64_t v29 = -1;
  uint64_t v30 = -1 << v25[32];
  if (-v30 < 64) {
    uint64_t v29 = ~(-1 << -(char)v30);
  }
  unint64_t v31 = v29 & *((void *)v25 + 7);
  int64_t v32 = (unint64_t)(63 - v30) >> 6;
  if (!v31) {
    goto LABEL_14;
  }
LABEL_13:
  unint64_t v33 = __clz(__rbit64(v31));
  v31 &= v31 - 1;
  for (unint64_t i = v33 | (v27 << 6); ; unint64_t i = __clz(__rbit64(v36)) + (v27 << 6))
  {
    id v38 = [objc_allocWithZone((Class)DCLegacySESlotInfo) initWithSESlot:*(void *)(*((void *)v25 + 6) + 8 * i) isMissing:0];
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (v31) {
      goto LABEL_13;
    }
LABEL_14:
    int64_t v35 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    if (v35 >= v32) {
      goto LABEL_32;
    }
    unint64_t v36 = *(void *)&v28[8 * v35];
    ++v27;
    if (!v36)
    {
      int64_t v27 = v35 + 1;
      if (v35 + 1 >= v32) {
        goto LABEL_32;
      }
      unint64_t v36 = *(void *)&v28[8 * v27];
      if (!v36)
      {
        int64_t v27 = v35 + 2;
        if (v35 + 2 >= v32) {
          goto LABEL_32;
        }
        unint64_t v36 = *(void *)&v28[8 * v27];
        if (!v36) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v31 = (v36 - 1) & v36;
  }
  int64_t v37 = v35 + 3;
  if (v37 < v32)
  {
    unint64_t v36 = *(void *)&v28[8 * v37];
    if (!v36)
    {
      while (1)
      {
        int64_t v27 = v37 + 1;
        if (__OFADD__(v37, 1)) {
          goto LABEL_36;
        }
        if (v27 >= v32) {
          goto LABEL_32;
        }
        unint64_t v36 = *(void *)&v28[8 * v27];
        ++v37;
        if (v36) {
          goto LABEL_27;
        }
      }
    }
    int64_t v27 = v37;
    goto LABEL_27;
  }
LABEL_32:
  swift_release();
  uint64_t v39 = *(void *)(v45 + 80);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(void (**)(uint64_t))(v45 + 8);
  v40(v39);
}

uint64_t sub_100040538@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CredentialKeyUsage();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v81 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v80 = &_swiftEmptySetSingleton;
  unint64_t v9 = sub_100163D84();
  uint64_t v70 = v2;
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v65 = v9;
  if (v9 >> 62) {
    goto LABEL_51;
  }
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_52:
    uint64_t result = swift_bridgeObjectRelease();
    char v54 = _swiftEmptyArrayStorage;
    Swift::Bool v55 = &_swiftEmptySetSingleton;
    goto LABEL_53;
  }
LABEL_5:
  unint64_t v12 = 0;
  unint64_t v69 = v65 & 0xC000000000000001;
  uint64_t v58 = v65 & 0xFFFFFFFFFFFFFF8;
  unint64_t v57 = v65 + 32;
  unsigned int v63 = enum case for CredentialKeyUsage.presentment(_:);
  uint64_t v61 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  char v62 = (void (**)(uint64_t, void, uint64_t))(v6 + 104);
  long long v60 = xmmword_1001767E0;
  unint64_t v59 = 0x800000010017BF90;
  uint64_t v67 = v5;
  uint64_t v68 = a2;
  uint64_t v72 = a1;
  uint64_t v64 = v8;
  uint64_t v66 = v11;
  do
  {
    if (v69)
    {
      unint64_t v13 = v12;
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v12 >= *(void *)(v58 + 16)) {
        goto LABEL_50;
      }
      unint64_t v13 = v12;
      id v14 = *(id *)(v57 + 8 * v12);
    }
    id v15 = v14;
    BOOL v16 = __OFADD__(v13, 1);
    uint64_t v6 = v13 + 1;
    if (v16)
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_52;
      }
      goto LABEL_5;
    }
    uint64_t v71 = v6;
    id v17 = [v14 credentialIdentifier];
    id v76 = v15;
    if (!v17) {
      goto LABEL_17;
    }
    uint64_t v18 = v17;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = [v15 managedObjectContext];
    if (!v21)
    {
      swift_bridgeObjectRelease();
LABEL_17:
      unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    unint64_t v22 = v21;
    a2 = (void *)type metadata accessor for StoredCryptoKey();
    uint64_t v23 = (void *)static StoredCryptoKey.fetchRequest()();
    id v78 = (id)sub_100044DE0();
    sub_100006CC8(&qword_1001C0878);
    uint64_t v24 = v5;
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = v60;
    *(void *)(v5 + 56) = &type metadata for String;
    unint64_t v25 = sub_10000DB88();
    *(void *)(v5 + 64) = v25;
    *(void *)(v5 + 32) = v8;
    *(void *)(v5 + 40) = v20;
    uint64_t v8 = v64;
    (*v62)(v64, v63, v24);
    uint64_t v26 = CredentialKeyUsage.rawValue.getter();
    uint64_t v28 = v27;
    (*v61)(v8, v24);
    *(void *)(v5 + 96) = &type metadata for String;
    *(void *)(v5 + 104) = v25;
    *(void *)(v5 + 72) = v26;
    *(void *)(v5 + 80) = v28;
    uint64_t v29 = NSPredicate.init(format:_:)();
    [v23 setPredicate:v29];

    uint64_t v30 = v70;
    uint64_t v31 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v70 = v30;
    if (v30)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    unint64_t v32 = v31;

    a1 = v72;
    id v15 = v76;
LABEL_18:
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_6;
      }
LABEL_20:
      if (v6 >= 1)
      {
        uint64_t v33 = 0;
        unint64_t v73 = v32 & 0xC000000000000001;
        uint64_t v74 = v6;
        uint64_t v75 = (void *)v32;
        while (1)
        {
          if (v73) {
            id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v34 = *(id *)(v32 + 8 * v33 + 32);
          }
          int64_t v35 = v34;
          id v36 = [v34 keySlot];
          sub_100003884(&v79, (uint64_t)v36);
          BOOL v37 = sub_100007B44((uint64_t)v36, a1);
          id v38 = [v15 partition];
          if (v38)
          {
            uint64_t v39 = v38;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;
          }
          else
          {
            uint64_t v41 = 0;
          }
          BOOL v77 = v37;
          id v42 = [v15 credentialIdentifier];
          if (v42)
          {
            uint64_t v43 = v42;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v45 = v44;
          }
          else
          {
            uint64_t v45 = 0;
          }
          id v78 = v35;
          id v46 = [v35 identifier];
          if (v46)
          {
            uint64_t v47 = v46;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v49 = v48;

            a1 = v72;
            if (v41) {
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v49 = 0;
            a1 = v72;
            if (v41)
            {
LABEL_33:
              NSString v50 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              if (v45) {
                goto LABEL_34;
              }
              goto LABEL_38;
            }
          }
          NSString v50 = 0;
          if (v45)
          {
LABEL_34:
            NSString v51 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v8 = v77;
            if (!v49) {
              goto LABEL_39;
            }
            goto LABEL_35;
          }
LABEL_38:
          NSString v51 = 0;
          uint64_t v8 = v77;
          if (!v49)
          {
LABEL_39:
            NSString v52 = 0;
            goto LABEL_40;
          }
LABEL_35:
          NSString v52 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
LABEL_40:
          id v53 = [objc_allocWithZone((Class)DCLegacySESlotInfo) initWithSESlot:v36 isMissing:(v8 ^ 1) & 1 partition:v50 credentialIdentifier:v51 presentmentKeyIdentifier:v52];

          uint64_t v6 = (uint64_t)v53;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v33;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          unint64_t v32 = (unint64_t)v75;
          id v15 = v76;
          if (v74 == v33) {
            goto LABEL_6;
          }
        }
      }
      goto LABEL_49;
    }
    uint64_t v6 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_20;
    }
LABEL_6:

    swift_bridgeObjectRelease();
    uint64_t v5 = v67;
    unint64_t v12 = v71;
    a2 = v68;
  }
  while (v71 != v66);
  uint64_t result = swift_bridgeObjectRelease();
  char v54 = (void *)v81;
  Swift::Bool v55 = v80;
LABEL_53:
  *a2 = v54;
  a2[1] = v55;
  return result;
}

uint64_t sub_100040C18(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100040D48, 0, 0);
}

uint64_t sub_100040D48()
{
  uint64_t v27 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v23 = v0[10];
    uint64_t v24 = v0[9];
    uint64_t v25 = v0[12];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v4, v3, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStorage clearPresentmentKeyUsage for credential %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v6(v25, v24);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  if (byte_1001C4BB0)
  {
    uint64_t v10 = v0[4];
    uint64_t v11 = v0[5];
    uint64_t v12 = v0[3];
    unint64_t v13 = (void *)swift_allocObject();
    v0[13] = v13;
    v13[2] = v11;
    v13[3] = v12;
    v13[4] = v10;
    uint64_t v14 = swift_allocObject();
    v0[14] = v14;
    *(void *)(v14 + 16) = sub_100044C50;
    *(void *)(v14 + 24) = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v15 = (void *)swift_task_alloc();
    v0[15] = v15;
    *id v15 = v0;
    v15[1] = sub_100041124;
    return AsyncCoreDataContainer.performWrite<A>(_:)();
  }
  else
  {
    defaultLogger()();
    BOOL v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "clearPresentmentKeyUsage requires an internal build", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = v0[11];
    uint64_t v20 = v0[9];

    v6(v19, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_100041124()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000412C0;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_100041248;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100041248()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000412C0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_100041438(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000075AC(a3, a4);
  if (v4) {
    return;
  }
  unint64_t v13 = v12;
  uint64_t v45 = v11;
  unint64_t v14 = (unint64_t)sub_1000F6A84();
  unint64_t v16 = v14;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_4;
    }
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    sub_100007290();

    return;
  }
  uint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17) {
    goto LABEL_27;
  }
LABEL_4:
  BOOL v37 = v13;
  uint64_t v38 = 0;
  uint64_t v39 = a1;
  if (v17 >= 1)
  {
    uint64_t v18 = v17;
    uint64_t v19 = 0;
    unint64_t v50 = v16 & 0xC000000000000001;
    id v46 = (void (**)(char *, uint64_t))(v9 + 8);
    *(void *)&long long v15 = 136315138;
    long long v41 = v15;
    uint64_t v40 = (char *)&type metadata for Any + 8;
    uint64_t v20 = v45;
    unint64_t v43 = v16;
    uint64_t v44 = v8;
    uint64_t v42 = v17;
    while (1)
    {
      if (v50) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v16 + 8 * v19 + 32);
      }
      uint64_t v23 = v22;
      defaultLogger()();
      id v24 = v23;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        *(void *)&long long v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = v41;
        id v28 = [v24 identifier];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v32 = v31;
        }
        else
        {
          unint64_t v32 = 0xE500000000000000;
          uint64_t v30 = 0x3E6C696E3CLL;
        }
        *(void *)(v27 + 4) = sub_10004C3A4(v30, v32, (uint64_t *)&v48);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Clearing presentment key usage for key %s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v20 = v45;
        uint64_t v8 = v44;
        (*v46)(v45, v44);
        uint64_t v18 = v42;
        unint64_t v16 = v43;
      }
      else
      {

        (*v46)(v20, v8);
      }
      [v24 setTimesUsed:0 v37 v38];
      id v33 = [v24 relyingParties];
      if (v33)
      {
        id v34 = v33;
        id v35 = [v33 anyObject];

        if (v35)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v47, 0, sizeof(v47));
        }
        sub_100044CD4((uint64_t)v47, (uint64_t)&v48);
        if (*((void *)&v49 + 1))
        {
          type metadata accessor for StoredRelyingParty();
          if (swift_dynamicCast())
          {
            id v36 = *(void **)&v47[0];
            [*(id *)(v39 + 16) deleteObject:*(void *)&v47[0]];
          }
          goto LABEL_8;
        }
      }
      else
      {
        long long v48 = 0u;
        long long v49 = 0u;
      }
      sub_100014BBC((uint64_t)&v48, &qword_1001C15C8);
LABEL_8:
      ++v19;
      id v21 = [objc_allocWithZone((Class)NSSet) init];
      [v24 setRelyingParties:v21];

      if (v18 == v19)
      {
        swift_bridgeObjectRelease();
        unint64_t v13 = v37;
        goto LABEL_28;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1000418E4(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_100041A14, 0, 0);
}

uint64_t sub_100041A14()
{
  id v28 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v24 = v0[11];
    uint64_t v25 = v0[10];
    uint64_t v26 = v0[13];
    unint64_t v3 = v0[5];
    uint64_t v4 = v0[4];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[3] = sub_10004C3A4(v4, v3, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStorage keyInfo for credential %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v6(v26, v25);
  }
  else
  {
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  if (byte_1001C4BB0)
  {
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = v0[4];
    unint64_t v13 = (void *)swift_allocObject();
    v0[14] = v13;
    v13[2] = v10;
    v13[3] = v12;
    v13[4] = v11;
    uint64_t v14 = swift_allocObject();
    v0[15] = v14;
    *(void *)(v14 + 16) = sub_100043868;
    *(void *)(v14 + 24) = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    long long v15 = (void *)swift_task_alloc();
    v0[16] = v15;
    uint64_t v16 = sub_100006CC8(&qword_1001C15A8);
    *long long v15 = v0;
    v15[1] = sub_100041E08;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v14, v16);
  }
  else
  {
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "keyInfo requires an internal build", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[12];
    uint64_t v21 = v0[10];

    v6(v20, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v22 = (uint64_t (*)(void *))v0[1];
    return v22(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100041E08()
{
  os_log_type_t v2 = (void *)*v1;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100041F80, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_100041F80()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_100042104(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v208 = a2;
  uint64_t v196 = a5;
  uint64_t v197 = type metadata accessor for DIPError.Code();
  uint64_t v188 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  v189 = (char *)v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = type metadata accessor for Logger();
  v194 = *(uint8_t **)(v190 - 8);
  __chkstk_darwin(v190);
  uint64_t v195 = (char *)v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006CC8(&qword_1001C15B0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v202 = (char *)v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v201 = (char *)v143 - v13;
  uint64_t v209 = type metadata accessor for Date();
  unint64_t v193 = *(void *)(v209 - 8);
  uint64_t v14 = __chkstk_darwin(v209);
  os_log_type_t v199 = (char *)v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v206 = (char *)v143 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v204 = (uint64_t)v143 - v19;
  __chkstk_darwin(v18);
  v205 = (char *)v143 - v20;
  uint64_t v21 = sub_100006CC8(&qword_1001C0840);
  __chkstk_darwin(v21 - 8);
  v198 = (char *)v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for CredentialKeyUsage();
  uint64_t v192 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  uint64_t v24 = (char *)v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100006CC8(&qword_1001C15B8);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  id v28 = (char *)v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v143 - v29;
  uint64_t v31 = type metadata accessor for CredentialKeyType();
  unint64_t v191 = *(void *)(v31 - 8);
  uint64_t v32 = __chkstk_darwin(v31);
  id v34 = (char *)v143 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  id v36 = (char *)v143 - v35;
  uint64_t v200 = a3;
  BOOL v37 = v207;
  uint64_t v38 = sub_1000075AC(a3, a4);
  if (!v37)
  {
    uint64_t v184 = a1;
    uint64_t v187 = v36;
    v185 = v34;
    v207 = (void *)v31;
    char v167 = v30;
    unint64_t v168 = v28;
    v186 = v24;
    uint64_t v183 = (uint64_t)a4;
    unint64_t v213 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v39 = v38;
    uint64_t v40 = sub_1000F6D18();
    id v156 = v39;
    unint64_t v212 = (unint64_t)v40;
    long long v41 = (void *)sub_10016D500(0xD000000000000012, (void *)0x8000000100179950);
    uint64_t v42 = 0;
    unint64_t v43 = v41;
    uint64_t v44 = v203;
    uint64_t v45 = v204;
    if (v41)
    {
      id v46 = [v41 progenitorKey];

      if (v46)
      {
        id v47 = v46;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          goto LABEL_73;
        }
        goto LABEL_5;
      }
    }
LABEL_6:
    long long v48 = (void *)sub_10016D500(0xD00000000000001ELL, (void *)0x8000000100179970);
    uint64_t v151 = v42;
    if (v42)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    long long v49 = v48;
    if (v48)
    {
      id v50 = [v48 progenitorKey];

      if (v50)
      {
        id v51 = v50;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    unint64_t v52 = v212;
    if (v212 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v53 = *(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    Swift::Bool v55 = v196;
    id v47 = v207;
    uint64_t v56 = v187;
    if (v53)
    {
      unint64_t v162 = v52 & 0xC000000000000001;
      uint64_t v164 = (unsigned int (**)(uint64_t, uint64_t, id))(v191 + 48);
      uint64_t v153 = (void (**)(char *, uint64_t, id))(v191 + 32);
      unsigned int v166 = enum case for CredentialKeyType.invalid(_:);
      v165 = (void (**)(char *, void, id))(v191 + 104);
      uint64_t v169 = (void (**)(char *, id))(v191 + 8);
      uint64_t v152 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48);
      v150 = (void (**)(char *, uint64_t, uint64_t))(v192 + 32);
      unsigned int v155 = enum case for CredentialKeyUsage.invalid(_:);
      char v154 = (void (**)(char *, void, uint64_t))(v192 + 104);
      uint64_t v161 = (void (**)(char *, uint64_t))(v192 + 8);
      char v174 = (void (**)(char *, uint64_t, uint64_t))(v193 + 32);
      v181 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v193 + 56);
      uint64_t v163 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48);
      uint64_t v149 = (uint64_t (**)(char *, void *))(v191 + 88);
      int v148 = enum case for CredentialKeyType.ses(_:);
      uint64_t v146 = (void (**)(char *, uint64_t))(v194 + 8);
      v159 = (void (**)(char *, uint64_t))(v193 + 8);
      uint64_t v145 = &v211;
      uint64_t v157 = (void (**)(uint64_t, char *, uint64_t))(v193 + 16);
      uint64_t v57 = 4;
      *(void *)&long long v54 = 136315138;
      long long v144 = v54;
      v143[1] = (char *)&type metadata for Any + 8;
      unint64_t v160 = v52;
      uint64_t v158 = v53;
      while (1)
      {
        uint64_t v58 = v57 - 4;
        uint64_t v176 = v57;
        if (v162) {
          id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v59 = *(id *)(v52 + 8 * v57);
        }
        long long v60 = v59;
        uint64_t v61 = v186;
        uint64_t v42 = v58 + 1;
        if (__OFADD__(v58, 1))
        {
          __break(1u);
LABEL_73:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_5:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          goto LABEL_6;
        }
        id v62 = [v59 identifier];
        if (v62)
        {
          unsigned int v63 = v62;
          uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v192 = v64;
        }
        else
        {
          uint64_t v182 = 0;
          uint64_t v192 = 0xE000000000000000;
        }
        uint64_t v175 = v42;
        id v65 = [v60 publicKey];
        if (v65)
        {
          uint64_t v66 = v65;
          uint64_t v177 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v68 = v67;
        }
        else
        {
          uint64_t v177 = 0;
          unint64_t v68 = 0xC000000000000000;
        }
        id v69 = [v60 publicKeyIdentifier];
        if (v69)
        {
          uint64_t v70 = v69;
          uint64_t v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v191 = v71;
        }
        else
        {
          uint64_t v184 = 0;
          unint64_t v191 = 0xC000000000000000;
        }
        id v72 = [v60 keyType];
        unint64_t v178 = v68;
        if (!v72) {
          goto LABEL_33;
        }
        unint64_t v73 = v72;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v74 = (uint64_t)v167;
        id v47 = v207;
        CredentialKeyType.init(rawValue:)();
        if ((*v164)(v74, 1, v47) == 1) {
          break;
        }
        (*v153)(v56, v74, v47);
LABEL_35:
        uint64_t v172 = CredentialKeyType.rawValue.getter();
        uint64_t v180 = v75;
        id v76 = v56;
        BOOL v77 = *v169;
        (*v169)(v76, v47);
        id v78 = [v60 usage];
        uint64_t v79 = v45;
        if (!v78) {
          goto LABEL_38;
        }
        uint64_t v80 = v78;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v81 = v44;
        uint64_t v82 = (uint64_t)v198;
        CredentialKeyUsage.init(rawValue:)();
        if ((*v152)(v82, 1, v81) == 1)
        {
          sub_100014BBC(v82, &qword_1001C0840);
          uint64_t v44 = v81;
LABEL_38:
          (*v154)(v61, v155, v44);
          goto LABEL_40;
        }
        (*v150)(v61, v82, v81);
        uint64_t v44 = v81;
LABEL_40:
        uint64_t v171 = CredentialKeyUsage.rawValue.getter();
        uint64_t v179 = v83;
        uint64_t v84 = v44;
        (*v161)(v61, v44);
        id v85 = [v60 createdAt];
        uint64_t v86 = v174;
        if (v85)
        {
          os_log_type_t v87 = v85;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v88 = *v86;
          uint64_t v89 = (uint64_t)v201;
          uint64_t v90 = v209;
          (*v86)(v201, v79, v209);
          char v91 = *v181;
          (*v181)(v89, 0, 1, v90);
          if ((*v163)(v89, 1, v90) != 1)
          {
            v88(v205, v89, v90);
            goto LABEL_45;
          }
        }
        else
        {
          char v91 = *v181;
          uint64_t v89 = (uint64_t)v201;
          (*v181)((uint64_t)v201, 1, 1, v209);
        }
        static Date.distantPast.getter();
        sub_100014BBC(v89, &qword_1001C15B0);
LABEL_45:
        char v92 = v185;
        uint64_t v44 = v84;
        id v93 = [v60 updatedAt];
        uint64_t v45 = v79;
        if (v93)
        {
          char v94 = v93;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v95 = *v174;
          uint64_t v96 = (uint64_t)v202;
          uint64_t v97 = v209;
          (*v174)(v202, v45, v209);
          v91(v96, 0, 1, v97);
          if ((*v163)(v96, 1, v97) != 1)
          {
            v95(v206, v96, v209);
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v96 = (uint64_t)v202;
          v91((uint64_t)v202, 1, 1, v209);
        }
        static Date.distantPast.getter();
        sub_100014BBC(v96, &qword_1001C15B0);
LABEL_50:
        BOOL v98 = v207;
        id v170 = [v60 timesUsed];
        id v99 = [v60 keyType];
        id v173 = v60;
        if (!v99) {
          goto LABEL_53;
        }
        uint64_t v100 = v99;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v101 = (uint64_t)v168;
        CredentialKeyType.init(rawValue:)();
        if ((*v164)(v101, 1, v98) == 1)
        {
          sub_100014BBC(v101, &qword_1001C15B8);
LABEL_53:
          (*v165)(v92, v166, v98);
LABEL_54:
          v77(v92, v98);
          unint64_t v193 = 0xC000000000000000;
          v194 = 0;
          uint64_t v102 = v206;
          goto LABEL_55;
        }
        (*v153)(v92, v101, v98);
        int v117 = (*v149)(v92, v98);
        if (v117 != v148) {
          goto LABEL_54;
        }
        id v118 = [v60 keyBlob];
        if (!v118)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          size_t v130 = v195;
          defaultLogger()();
          unint64_t v131 = v192;
          swift_bridgeObjectRetain();
          unint64_t v132 = Logger.logObject.getter();
          os_log_type_t v133 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v132, v133))
          {
            uint64_t v134 = (uint8_t *)swift_slowAlloc();
            uint64_t v211 = swift_slowAlloc();
            *(_DWORD *)uint64_t v134 = v144;
            v194 = v134 + 4;
            swift_bridgeObjectRetain();
            uint64_t v210 = sub_10004C3A4(v182, v131, &v211);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v132, v133, "Cannot report SES presentment key %s because it has no key blob", v134, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_1000035EC(v184, v191);
            sub_1000035EC(v177, v178);
            (*v146)(v195, v190);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            sub_1000035EC(v184, v191);
            sub_1000035EC(v177, v178);
            (*v146)(v130, v190);
          }
          uint64_t v135 = *v159;
          uint64_t v136 = v209;
          (*v159)(v206, v209);
          v135(v205, v136);
          goto LABEL_58;
        }
        uint64_t v119 = v118;
        uint64_t v120 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v122 = v121;

        uint64_t v147 = v120;
        uint64_t v123 = v151;
        sub_100140DA0(v182, v192, v120, v122, 0, 0xF000000000000000);
        uint64_t v102 = v206;
        unint64_t v124 = v191;
        uint64_t v125 = v184;
        if (v123)
        {
          unint64_t v138 = v122;
          Swift::String v139 = v206;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          sub_1000035EC(v147, v138);
          sub_1000035EC(v125, v124);
          sub_1000035EC(v177, v178);
          swift_bridgeObjectRelease();
          uint64_t v140 = *v159;
          char v141 = v139;
          uint64_t v142 = v209;
          (*v159)(v141, v209);
          v140(v205, v142);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v126 = sub_100146334();
        uint64_t v151 = 0;
        uint64_t v127 = (void *)v126;
        uint64_t v128 = SecAccessControlRef.data.getter();
        unint64_t v193 = v129;
        v194 = (uint8_t *)v128;
        swift_release();

        sub_1000035EC(v147, v122);
LABEL_55:
        Swift::Int v103 = *v157;
        uint64_t v104 = v209;
        (*v157)(v45, v205, v209);
        uint64_t v105 = (uint64_t)v199;
        v103((uint64_t)v199, v102, v104);
        id v106 = objc_allocWithZone((Class)DCCredentialCryptoKeyInfo);
        uint64_t v107 = v183;
        swift_bridgeObjectRetain();
        uint64_t v108 = v177;
        unint64_t v109 = v178;
        sub_10000354C(v177, v178);
        uint64_t v110 = v184;
        unint64_t v111 = v191;
        sub_10000354C(v184, v191);
        unint64_t v112 = v193;
        uint64_t v113 = (uint64_t)v194;
        sub_10000354C((uint64_t)v194, v193);
        sub_100044A60(v182, v192, v200, v107, v108, v109, v110, v111, v172, v180, v171, v179, v204, v105, (uint64_t)v170);
        sub_1000035EC(v113, v112);
        sub_1000035EC(v110, v111);
        sub_1000035EC(v108, v109);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v114 = v205;
        uint64_t v115 = v209;
        if (*(void *)((v213 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v213 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        sub_1000035EC(v110, v111);
        sub_1000035EC(v108, v109);
        sub_1000035EC((uint64_t)v194, v193);
        uint64_t v116 = *v159;
        (*v159)(v206, v115);
        v116(v114, v115);
        uint64_t v44 = v203;
        uint64_t v45 = v204;
LABEL_58:
        uint64_t v56 = v187;
        uint64_t v57 = v176 + 1;
        id v47 = v207;
        unint64_t v52 = v160;
        if (v175 == v158)
        {
          swift_bridgeObjectRelease();

          uint64_t v137 = (void *)v213;
          Swift::Bool v55 = v196;
          goto LABEL_69;
        }
      }
      sub_100014BBC(v74, &qword_1001C15B8);
LABEL_33:
      (*v165)(v56, v166, v47);
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();

    uint64_t v137 = _swiftEmptyArrayStorage;
LABEL_69:
    swift_bridgeObjectRelease();
    *Swift::Bool v55 = v137;
  }
}

void sub_100043868(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100042104(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t sub_100043888(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = sub_100043DA0(*(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

void *sub_1000439FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    v32[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    sub_100044DD8();
                    return (void *)v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_36:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = static Hasher._hash(seed:_:)();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    v33[2] = v32[0];
    v33[3] = v4;
    v33[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      uint64_t v27 = (char *)v32 - v26;
      memcpy((char *)v32 - v26, (const void *)(v2 + 56), v24);
      uint64_t v28 = sub_100043EAC((uint64_t)v27, v23, v2, v21, v33);
      swift_release();
      sub_100044DD8();
      return (void *)v28;
    }
    else
    {
      uint64_t v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      uint64_t v30 = sub_100043EAC((uint64_t)v29, v23, v2, v21, v33);
      swift_release();
      sub_100044DD8();
      swift_slowDealloc();
      return (void *)v30;
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_100043DA0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100004354();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1000445D0(v7);
  uint64_t *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100043EAC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = (unint64_t *)result;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a3 + 56;
  while (1)
  {
    int64_t v16 = a5[3];
    unint64_t v17 = a5[4];
    if (!v17) {
      break;
    }
    uint64_t v18 = (v17 - 1) & v17;
    unint64_t v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(*(void *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v27 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v28 = result & ~v27;
    uint64_t v12 = v28 >> 6;
    uint64_t v13 = 1 << v28;
    if (((1 << v28) & *(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v29 = *(void *)(a3 + 48);
      if (*(void *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        uint64_t v14 = v12;
        unint64_t v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1)) {
            goto LABEL_33;
          }
          if (!v10) {
            return (uint64_t)&_swiftEmptySetSingleton;
          }
        }
      }
      else
      {
        for (unint64_t i = v28 + 1; ; unint64_t i = v31 + 1)
        {
          unint64_t v31 = i & ~v27;
          if (((*(void *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            break;
          }
          if (*(void *)(v29 + 8 * v31) == v26)
          {
            uint64_t v12 = v31 >> 6;
            uint64_t v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    int64_t v21 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v22 = a5[3];
    if (v20 >= v21) {
      goto LABEL_31;
    }
    uint64_t v23 = a5[1];
    unint64_t v24 = *(void *)(v23 + 8 * v20);
    if (!v24)
    {
      int64_t v22 = v16 + 1;
      if (v16 + 2 >= v21) {
        goto LABEL_31;
      }
      unint64_t v24 = *(void *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        int64_t v20 = v16 + 2;
      }
      else
      {
        int64_t v22 = v16 + 2;
        if (v16 + 3 >= v21) {
          goto LABEL_31;
        }
        unint64_t v24 = *(void *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          int64_t v20 = v16 + 3;
        }
        else
        {
          int64_t v20 = v16 + 4;
          int64_t v22 = v16 + 3;
          if (v16 + 4 >= v21) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v23 + 8 * v20);
          if (!v24)
          {
            int64_t v22 = v21 - 1;
            int64_t v25 = v16 + 5;
            while (v21 != v25)
            {
              unint64_t v24 = *(void *)(v23 + 8 * v25++);
              if (v24)
              {
                int64_t v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain();
            return sub_1000440F0(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_21:
    uint64_t v18 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v20 << 6);
    int64_t v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1000440F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100006CC8(&qword_1001C0768);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100044338(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100006CC8(&qword_1001C0770);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1000445D0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            unint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *unint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100044758(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

void *sub_100044784@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100044E44(a1, a2);
}

void sub_10004479C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (byte_1001C4BB0)
  {
    sub_100147B98(a1);
    if (v1)
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "deleteLegacySESlot requires an internal build", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

id sub_100044A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v17 = Data._bridgeToObjectiveC()().super.isa;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v20 = Date._bridgeToObjectiveC()().super.isa;
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  Class v22 = Data._bridgeToObjectiveC()().super.isa;
  id v28 = [v27 initWithIdentifier:v26 credentialIdentifier:v15 publicKey:isa publicKeyIdentifier:v17 keyType:v18 keyUsage:v19 createdAt:v20 updatedAt:v21 presentmentKeyTimesUsed:a15 acl:v22];

  uint64_t v23 = type metadata accessor for Date();
  char v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
  v24(a14, v23);
  v24(a13, v23);
  return v28;
}

void sub_100044C50(uint64_t a1)
{
  sub_100041438(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100044C70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100044CA8(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100044CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C15C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044D3C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044D74@<X0>(void *a1@<X8>)
{
  return sub_100040538(*(void *)(v1 + 16), a1);
}

double sub_100044D90@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr, void))(v2 + 16))(&v6, *a1);
  if (!v3)
  {
    double result = *(double *)&v6;
    *a2 = v6;
  }
  return result;
}

uint64_t sub_100044DD8()
{
  return swift_release();
}

unint64_t sub_100044DE0()
{
  unint64_t result = qword_1001C4930;
  if (!qword_1001C4930)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C4930);
  }
  return result;
}

uint64_t sub_100044E24@<X0>(unint64_t *a1@<X8>)
{
  return sub_10003F284(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void *sub_100044E44@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(v2 + 16))(&v6, *a1);
  if (!v3) {
    *a2 = v6;
  }
  return result;
}

unint64_t sub_100044E98(uint64_t a1, void *a2)
{
  uint64_t v25 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  NSString v26 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StoredRelyingParty();
  uint64_t v7 = (void *)static StoredRelyingParty.fetchRequest()();
  [v7 setFetchLimit:1];
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  uint64_t v8 = swift_allocObject();
  long long v24 = xmmword_1001768E0;
  *(_OWORD *)(v8 + 16) = xmmword_1001768E0;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000DB88();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v11._object = (void *)0x800000010017C010;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 8250;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    uint64_t v29 = v2;
    sub_100006CC8(&qword_1001C0890);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v26, enum case for DIPError.Code.coreDataError(_:), v25);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    uint64_t v14 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = v24;
    Class v17 = (uint64_t *)(v16 + v15 + v14[14]);
    uint64_t v18 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v19 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v16 + v15, v18, v19);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v20 = dispatch thunk of Error._code.getter();
    v17[3] = (uint64_t)&type metadata for Int;
    *Class v17 = v20;
    sub_10004A5E8(v16);
    uint64_t v21 = type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v21;
  }
  unint64_t v22 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v21)
    {
LABEL_9:

      swift_bridgeObjectRelease();
      return v21;
    }
  }
  if ((v22 & 0xC000000000000001) != 0)
  {
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v23 = *(id *)(v22 + 32);
LABEL_8:
    uint64_t v21 = (uint64_t)v23;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100045348()
{
  uint64_t v0 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v0);
  uint64_t v4 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1001C4BE0 = v4;
  qword_1001C4BE8 = v6;
  return result;
}

uint64_t sub_100045448()
{
  uint64_t v0 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - v5;
  sub_100006CC8(&qword_1001C12D8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001767E0;
  uint64_t v8 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v8(v6, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v0);
  uint64_t v9 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  uint64_t v11 = v10;
  Swift::String v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v6, v0);
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  v8(v4, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v0);
  uint64_t v13 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  uint64_t v15 = v14;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v12)(v4, v0);
  *(void *)(v7 + 48) = v13;
  *(void *)(v7 + 56) = v15;
  qword_1001C4BF0 = v7;
  return result;
}

uint64_t sub_1000455E8()
{
  uint64_t v0 = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)();
  uint64_t v2 = v1;
  uint64_t v3 = &_swiftEmptyDictionarySingleton;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v23 = &_swiftEmptyDictionarySingleton;
  unint64_t v6 = sub_10013C4FC(1);
  uint64_t v7 = *(&_swiftEmptyDictionarySingleton + 2);
  BOOL v8 = (v5 & 1) == 0;
  uint64_t result = v7 + v8;
  if (__OFADD__(v7, v8))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    qword_1001C4BF8 = (uint64_t)v3;
    return result;
  }
  char v10 = v5;
  uint64_t v11 = 2;
  while (v3[3] >= result)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v3 = v23;
      if ((v10 & 1) == 0) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_10009A420();
      uint64_t v3 = v23;
      if ((v10 & 1) == 0) {
        goto LABEL_11;
      }
    }
LABEL_9:
    uint64_t v14 = (uint64_t *)(v3[7] + 16 * v6);
    swift_bridgeObjectRelease();
    *uint64_t v14 = v0;
    v14[1] = v2;
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    if (v11 == 101) {
      goto LABEL_17;
    }
    uint64_t v0 = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)();
    uint64_t v2 = v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v23 = v3;
    unint64_t v6 = sub_10013C4FC(v11);
    char v10 = v20;
    uint64_t v21 = v3[2];
    BOOL v22 = (v20 & 1) == 0;
    ++v11;
    uint64_t result = v21 + v22;
    if (__OFADD__(v21, v22)) {
      goto LABEL_16;
    }
  }
  sub_100098140(result, isUniquelyReferenced_nonNull_native & 1);
  unint64_t v12 = sub_10013C4FC(v11 - 1);
  if ((v10 & 1) != (v13 & 1)) {
    goto LABEL_19;
  }
  unint64_t v6 = v12;
  uint64_t v3 = v23;
  if (v10) {
    goto LABEL_9;
  }
LABEL_11:
  v3[(v6 >> 6) + 8] |= 1 << v6;
  *(void *)(v3[6] + 8 * v6) = v11 - 1;
  uint64_t v15 = (uint64_t *)(v3[7] + 16 * v6);
  *uint64_t v15 = v0;
  v15[1] = v2;
  uint64_t v16 = v3[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    v3[2] = v18;
    goto LABEL_13;
  }
  __break(1u);
LABEL_19:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1000457B0()
{
  sub_100006CC8(&qword_1001C12D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001768E0;
  if (qword_1001C03E0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1001C4BE8;
  *(void *)(inited + 32) = qword_1001C4BE0;
  *(void *)(inited + 40) = v1;
  uint64_t v2 = qword_1001C03E8;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1001C4BF0;
  uint64_t v4 = qword_1001C03F0;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1001C4BF8;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1000DA9C8(v5);
  *(void *)(inited + 48) = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10004AA18(inited);
}

void *sub_100045900(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  BOOL v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100006CC8(&qword_1001C1600);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    unint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10004750C(&qword_1001C1608);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10004750C(&qword_1001C1610);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          long long v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100045BF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v193 = *(void *)(v2 - 8);
  uint64_t v194 = v2;
  __chkstk_darwin(v2);
  uint64_t v192 = (char *)v168 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = type metadata accessor for DateComponents();
  int64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v171 = (char *)v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (unint64_t)v168 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (void *)((char *)v168 - v11);
  uint64_t v183 = type metadata accessor for Calendar.Component();
  uint64_t v178 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v177 = (char *)v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for Calendar();
  uint64_t v187 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v182 = (char *)v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006CC8(&qword_1001C15B0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  unint64_t v18 = (char *)v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  id v173 = (char *)v168 - v20;
  __chkstk_darwin(v19);
  v189 = (char *)v168 - v21;
  uint64_t v191 = type metadata accessor for Date();
  uint64_t v190 = *(void *)(v191 - 8);
  uint64_t v22 = __chkstk_darwin(v191);
  char v174 = (char *)v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v176 = (char *)v168 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v172 = (char *)v168 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v180 = (char *)v168 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v185 = (char *)v168 - v31;
  __chkstk_darwin(v30);
  v186 = (char *)v168 - v32;
  uint64_t v33 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v196 = v33;
  uint64_t v197 = v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v188 = (char *)v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  *(void *)&long long v195 = (char *)v168 - v37;
  uint64_t v38 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v38 - 8);
  uint64_t v201 = (char *)v168 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = type metadata accessor for CredentialElement(0);
  int64_t v40 = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v168 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001C03E0 != -1) {
    goto LABEL_110;
  }
LABEL_2:
  uint64_t v43 = *(void *)(a1 + 16);
  uint64_t v179 = v12;
  unint64_t v181 = v10;
  uint64_t v175 = v18;
  if (v43)
  {
    os_log_type_t v199 = (uint64_t *)isUniquelyReferenced_nonNull_native;
    uint64_t v44 = qword_1001C4BE8;
    uint64_t v45 = qword_1001C4BE0;
    swift_bridgeObjectRetain();
    unint64_t v46 = sub_10013C484(v45, v44);
    if (v47)
    {
      int64_t v169 = v5;
      unint64_t v170 = v4;
      uint64_t v48 = *(void *)(*(void *)(a1 + 56) + 8 * v46);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      int64_t v5 = *(void *)(v48 + 16);
      if (v5)
      {
        uint64_t v49 = v48 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
        v198 = *(void (**)(char *, void, uint64_t))(v40 + 72);
        v168[1] = v48;
        swift_bridgeObjectRetain();
        unint64_t v12 = _swiftEmptyDictionarySingleton;
        id v50 = &qword_1001C12C8;
        a1 = (uint64_t)v201;
        id v51 = v199;
        while (1)
        {
          unint64_t v4 = (unint64_t)v12;
          sub_1000376E8(v49, (uint64_t)v51);
          uint64_t v52 = *v51;
          unint64_t v18 = (char *)v51[1];
          sub_100037898((uint64_t)v51 + *(int *)(v200 + 20), a1, v50);
          int64_t v40 = type metadata accessor for AnyCodable();
          unint64_t v12 = v50;
          uint64_t v53 = *(void *)(v40 - 8);
          int v54 = (*(uint64_t (**)(uint64_t, uint64_t, int64_t))(v53 + 48))(a1, 1, v40);
          swift_bridgeObjectRetain();
          if (v54 == 1)
          {
            Swift::Bool v55 = (uint64_t *)a1;
            uint64_t v56 = v12;
          }
          else
          {
            AnyCodable.value.getter();
            (*(void (**)(char *, int64_t))(v53 + 8))(v201, v40);
            if (v203)
            {
              AnyHashable.base.getter();
              sub_100047450((uint64_t)v202);
              sub_100044CD4((uint64_t)&v205, (uint64_t)v202);
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v204 = (uint64_t *)v4;
              a1 = v4;
              unint64_t v10 = sub_10013C484(v52, (uint64_t)v18);
              uint64_t v58 = *(void *)(v4 + 16);
              BOOL v59 = (v57 & 1) == 0;
              uint64_t v60 = v58 + v59;
              if (__OFADD__(v58, v59)) {
                goto LABEL_109;
              }
              char v61 = v57;
              if (*(void *)(v4 + 24) >= v60)
              {
                a1 = (uint64_t)v201;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_10009A5DC();
                  goto LABEL_16;
                }
              }
              else
              {
                sub_100098404(v60, isUniquelyReferenced_nonNull_native);
                unint64_t v62 = sub_10013C484(v52, (uint64_t)v18);
                if ((v61 & 1) != (v63 & 1))
                {
                  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
                unint64_t v10 = v62;
LABEL_16:
                a1 = (uint64_t)v201;
              }
              unint64_t v68 = v204;
              if (v61)
              {
                id v69 = v204;
                sub_1000474A4((uint64_t)v202, v204[7] + 32 * v10);
              }
              else
              {
                v204[(v10 >> 6) + 8] |= 1 << v10;
                uint64_t v70 = (uint64_t *)(v68[6] + 16 * v10);
                uint64_t *v70 = v52;
                v70[1] = (uint64_t)v18;
                sub_100044CD4((uint64_t)v202, v68[7] + 32 * v10);
                uint64_t v71 = v68[2];
                BOOL v72 = __OFADD__(v71, 1);
                uint64_t v73 = v71 + 1;
                if (v72)
                {
                  __break(1u);
                  goto LABEL_112;
                }
                id v69 = v68;
                v68[2] = v73;
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v50 = v12;
              unint64_t v12 = v69;
              id v51 = v199;
              goto LABEL_8;
            }
            Swift::Bool v55 = v202;
            uint64_t v56 = &qword_1001C1360;
          }
          sub_100014BBC((uint64_t)v55, v56);
          id v50 = v12;
          unint64_t v12 = (uint64_t *)v4;
          swift_bridgeObjectRetain();
          unint64_t v64 = sub_10013C484(v52, (uint64_t)v18);
          char v66 = v65;
          swift_bridgeObjectRelease();
          if (v66)
          {
            char v67 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v205 = v4;
            a1 = (uint64_t)v201;
            if ((v67 & 1) == 0)
            {
              sub_10009A5DC();
              a1 = (uint64_t)v201;
              unint64_t v12 = (uint64_t *)v205;
            }
            swift_bridgeObjectRelease();
            sub_100044CD4(v12[7] + 32 * v64, (uint64_t)v202);
            sub_100169348(v64, (uint64_t)v12);
            swift_bridgeObjectRelease();
          }
          else
          {
            memset(v202, 0, sizeof(v202));
            uint64_t v203 = 1;
            a1 = (uint64_t)v201;
          }
          id v51 = v199;
          swift_bridgeObjectRelease();
          sub_100014BBC((uint64_t)v202, &qword_1001C15F0);
LABEL_8:
          sub_10003774C((uint64_t)v51);
          v49 += (uint64_t)v198;
          if (!--v5)
          {
            swift_bridgeObjectRelease();
            goto LABEL_33;
          }
        }
      }
      unint64_t v12 = _swiftEmptyDictionarySingleton;
LABEL_33:
      swift_bridgeObjectRelease();
      unint64_t v4 = v170;
      int64_t v5 = v169;
      goto LABEL_34;
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v12 = (uint64_t *)sub_10004AA30((uint64_t)&_swiftEmptyArrayStorage);
LABEL_34:
  uint64_t v74 = v196;
  uint64_t v75 = v197;
  unint64_t v18 = (char *)(v197 + 104);
  id v76 = *(void (**)(char *, void, uint64_t))(v197 + 104);
  unint64_t v10 = v195;
  v76((char *)v195, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v196);
  a1 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  uint64_t v78 = v77;
  uint64_t v80 = *(void (**)(unint64_t, uint64_t))(v75 + 8);
  uint64_t v79 = v75 + 8;
  uint64_t v200 = (uint64_t)v80;
  v80(v10, v74);
  if (v12[2] && (uint64_t v81 = a1, a1 = (uint64_t)v12, v82 = sub_10013C484(v81, v78), (v83 & 1) != 0))
  {
    sub_100037898(v12[7] + 32 * v82, (uint64_t)&v205, &qword_1001C15C8);
  }
  else
  {
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    uint64_t v207 = 0;
    uint64_t v208 = 1;
  }
  swift_bridgeObjectRelease();
  if (v208 == 1)
  {
    uint64_t v84 = &qword_1001C15F0;
    id v85 = &v205;
LABEL_75:
    sub_100014BBC((uint64_t)v85, v84);
LABEL_76:
    uint64_t v100 = v192;
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v101, v102))
    {
      Swift::Int v103 = (uint8_t *)swift_slowAlloc();
      v202[0] = swift_slowAlloc();
      *(_DWORD *)Swift::Int v103 = 136315138;
      swift_bridgeObjectRetain();
      sub_100006CC8(&qword_1001C15C8);
      uint64_t v104 = Dictionary.description.getter();
      unint64_t v106 = v105;
      swift_bridgeObjectRelease();
      uint64_t v205 = sub_10004C3A4(v104, v106, v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Elements were not present to evaluate age data consistency: %s", v103, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v193 + 8))(v100, v194);
    return 0;
  }
  sub_100044CD4((uint64_t)&v205, (uint64_t)v202);
  if (!v203)
  {
    uint64_t v84 = &qword_1001C15C8;
    id v85 = v202;
    goto LABEL_75;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_76;
  }
  uint64_t v197 = v79;
  v198 = v76;
  int64_t v169 = v5;
  unint64_t v170 = v4;
  os_log_type_t v199 = v204;
  if (qword_1001C03F0 != -1) {
    goto LABEL_113;
  }
  while (2)
  {
    uint64_t isUniquelyReferenced_nonNull_native = qword_1001C4BF8;
    uint64_t v86 = qword_1001C4BF8 + 64;
    uint64_t v87 = 1 << *(unsigned char *)(qword_1001C4BF8 + 32);
    uint64_t v88 = -1;
    if (v87 < 64) {
      uint64_t v88 = ~(-1 << v87);
    }
    unint64_t v4 = v88 & *(void *)(qword_1001C4BF8 + 64);
    int64_t v40 = (unint64_t)(v87 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
    uint64_t v201 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if (v4)
      {
        unint64_t v89 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
        unint64_t v90 = v89 | (v5 << 6);
        if (!v12[2]) {
          goto LABEL_46;
        }
        goto LABEL_65;
      }
      int64_t v91 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        swift_once();
        goto LABEL_2;
      }
      if (v91 >= v40) {
        goto LABEL_82;
      }
      unint64_t v92 = *(void *)(v86 + 8 * v91);
      ++v5;
      if (!v92)
      {
        int64_t v5 = v91 + 1;
        if (v91 + 1 >= v40) {
          goto LABEL_82;
        }
        unint64_t v92 = *(void *)(v86 + 8 * v5);
        if (!v92)
        {
          int64_t v5 = v91 + 2;
          if (v91 + 2 >= v40) {
            goto LABEL_82;
          }
          unint64_t v92 = *(void *)(v86 + 8 * v5);
          if (!v92) {
            break;
          }
        }
      }
LABEL_64:
      unint64_t v4 = (v92 - 1) & v92;
      unint64_t v90 = __clz(__rbit64(v92)) + (v5 << 6);
      if (!v12[2])
      {
LABEL_46:
        uint64_t v205 = 0;
        uint64_t v206 = 0;
        uint64_t v207 = 0;
        uint64_t v208 = 1;
        goto LABEL_47;
      }
LABEL_65:
      uint64_t v94 = *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 8 * v90);
      uint64_t v95 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v90);
      uint64_t v96 = *v95;
      unint64_t v10 = v95[1];
      swift_bridgeObjectRetain();
      uint64_t v97 = v96;
      a1 = (uint64_t)v12;
      unint64_t v98 = sub_10013C484(v97, v10);
      if (v99)
      {
        sub_100037898(v12[7] + 32 * v98, (uint64_t)&v205, &qword_1001C15C8);
      }
      else
      {
        uint64_t v205 = 0;
        uint64_t v206 = 0;
        uint64_t v207 = 0;
        uint64_t v208 = 1;
      }
      swift_bridgeObjectRelease();
      if (v208 == 1)
      {
LABEL_47:
        sub_100014BBC((uint64_t)&v205, &qword_1001C15F0);
      }
      else
      {
        sub_100044CD4((uint64_t)&v205, (uint64_t)v202);
        if (v203)
        {
          if ((swift_dynamicCast() & 1) != 0 && ((((uint64_t)v199 < v94) ^ v204) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            return 1;
          }
        }
        else
        {
          sub_100014BBC((uint64_t)v202, &qword_1001C15C8);
        }
      }
    }
    int64_t v93 = v91 + 3;
    if (v93 < v40)
    {
      unint64_t v92 = *(void *)(v86 + 8 * v93);
      if (!v92)
      {
        while (1)
        {
          int64_t v5 = v93 + 1;
          if (__OFADD__(v93, 1)) {
            break;
          }
          if (v5 >= v40) {
            goto LABEL_82;
          }
          unint64_t v92 = *(void *)(v86 + 8 * v5);
          ++v93;
          if (v92) {
            goto LABEL_64;
          }
        }
LABEL_112:
        __break(1u);
LABEL_113:
        swift_once();
        continue;
      }
      int64_t v5 = v93;
      goto LABEL_64;
    }
    break;
  }
LABEL_82:
  swift_release();
  uint64_t v107 = v188;
  uint64_t v108 = v196;
  v198(v188, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v196);
  uint64_t v109 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  uint64_t v111 = v110;
  ((void (*)(char *, uint64_t))v200)(v107, v108);
  if (v12[2])
  {
    unint64_t v112 = sub_10013C484(v109, v111);
    uint64_t v113 = v190;
    uint64_t v114 = (uint64_t)v189;
    if (v115)
    {
      sub_100037898(v12[7] + 32 * v112, (uint64_t)&v205, &qword_1001C15C8);
    }
    else
    {
      uint64_t v205 = 0;
      uint64_t v206 = 0;
      uint64_t v207 = 0;
      uint64_t v208 = 1;
    }
    uint64_t v116 = v191;
  }
  else
  {
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    uint64_t v207 = 0;
    uint64_t v208 = 1;
    uint64_t v116 = v191;
    uint64_t v113 = v190;
    uint64_t v114 = (uint64_t)v189;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v208 == 1)
  {
    int v117 = &qword_1001C15F0;
    id v118 = &v205;
    goto LABEL_95;
  }
  sub_100044CD4((uint64_t)&v205, (uint64_t)v202);
  if (!v203)
  {
    int v117 = &qword_1001C15C8;
    id v118 = v202;
LABEL_95:
    sub_100014BBC((uint64_t)v118, v117);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56))(v114, 1, 1, v116);
LABEL_96:
    sub_100014BBC(v114, &qword_1001C15B0);
    return 0;
  }
  int v119 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v114, v119 ^ 1u, 1, v116);
  uint64_t v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  if (v120(v114, 1, v116) == 1) {
    goto LABEL_96;
  }
  *(void *)&long long v195 = *(void *)(v113 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v195)(v186, v114, v116);
  uint64_t v197 = (uint64_t)v120;
  unint64_t v121 = v185;
  Date.init()();
  unint64_t v122 = v182;
  static Calendar.current.getter();
  uint64_t v123 = v178;
  unint64_t v124 = *(void (**)(void))(v178 + 104);
  uint64_t v125 = v177;
  LODWORD(v194) = enum case for Calendar.Component.day(_:);
  uint64_t v126 = v183;
  uint64_t v201 = (char *)(v178 + 104);
  v198 = (void (*)(char *, void, uint64_t))v124;
  v124(v177);
  uint64_t v127 = (uint64_t)v173;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v128 = v191;
  uint64_t v193 = *(void *)(v123 + 8);
  ((void (*)(char *, uint64_t))v193)(v125, v126);
  unint64_t v129 = *(void (**)(char *, uint64_t))(v187 + 8);
  v187 += 8;
  uint64_t v200 = (uint64_t)v129;
  v129(v122, v184);
  size_t v130 = v172;
  uint64_t v192 = *(char **)(v113 + 16);
  ((void (*)(char *, char *, uint64_t))v192)(v172, v121, v128);
  int v131 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v197)(v127, 1, v128);
  uint64_t v196 = v113 + 32;
  if (v131 == 1)
  {
    unint64_t v132 = (void (*)(char *, char *, uint64_t))v195;
    ((void (*)(char *, char *, uint64_t))v195)(v180, v130, v128);
    sub_100014BBC(v127, &qword_1001C15B0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v113 + 8))(v130, v128);
    unint64_t v132 = (void (*)(char *, char *, uint64_t))v195;
    ((void (*)(char *, uint64_t, uint64_t))v195)(v180, v127, v128);
  }
  uint64_t v134 = v128;
  uint64_t v135 = v132;
  uint64_t v136 = v182;
  static Calendar.current.getter();
  uint64_t v137 = v177;
  uint64_t v138 = v183;
  v198(v177, v194, v183);
  uint64_t v139 = (uint64_t)v175;
  uint64_t v140 = v185;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  ((void (*)(char *, uint64_t))v193)(v137, v138);
  ((void (*)(char *, uint64_t))v200)(v136, v184);
  char v141 = v174;
  ((void (*)(char *, char *, uint64_t))v192)(v174, v140, v134);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v197)(v139, 1, v134) == 1)
  {
    v135(v176, v141, v134);
    sub_100014BBC(v139, &qword_1001C15B0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v190 + 8))(v141, v134);
    v135(v176, (char *)v139, v134);
  }
  uint64_t v142 = v182;
  static Calendar.current.getter();
  uint64_t v197 = sub_100006CC8(&qword_1001C15F8);
  unint64_t v143 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
  uint64_t v196 = v143 + *(void *)(v178 + 72);
  uint64_t v144 = swift_allocObject();
  long long v195 = xmmword_1001768E0;
  *(_OWORD *)(v144 + 16) = xmmword_1001768E0;
  LODWORD(v194) = enum case for Calendar.Component.year(_:);
  uint64_t v145 = v183;
  uint64_t v146 = (void (*)(unint64_t, void, uint64_t))v198;
  ((void (*)(unint64_t))v198)(v144 + v143);
  sub_100045900(v144);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  uint64_t v147 = v184;
  int v148 = (void (*)(char *, uint64_t))v200;
  ((void (*)(char *, uint64_t))v200)(v142, v184);
  static Calendar.current.getter();
  uint64_t v149 = swift_allocObject();
  *(_OWORD *)(v149 + 16) = v195;
  v146(v149 + v143, v194, v145);
  sub_100045900(v149);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v150 = v176;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  v148(v142, v147);
  uint64_t v151 = v179;
  uint64_t v152 = DateComponents.year.getter();
  if (v153)
  {
    int64_t v155 = v169;
    id v156 = v171;
    unint64_t v157 = v170;
    (*(void (**)(char *, unint64_t, unint64_t))(v169 + 16))(v171, v181, v170);
    uint64_t v158 = v190;
  }
  else
  {
    uint64_t v154 = v152;
    int64_t v155 = v169;
    id v156 = v171;
    unint64_t v157 = v170;
    (*(void (**)(char *, unint64_t, unint64_t))(v169 + 16))(v171, v181, v170);
    uint64_t v158 = v190;
    if ((uint64_t *)v154 == v199)
    {
      v159 = *(void (**)(char *, unint64_t))(v155 + 8);
      v159(v156, v157);
      v159((char *)v181, v157);
      v159((char *)v151, v157);
      unint64_t v160 = *(void (**)(char *, uint64_t))(v158 + 8);
      uint64_t v161 = v191;
      v160(v150, v191);
      v160(v180, v161);
      v160(v185, v161);
      v160(v186, v161);
      return 0;
    }
  }
  uint64_t v162 = DateComponents.year.getter();
  char v164 = v163;
  v165 = *(void (**)(char *, unint64_t))(v155 + 8);
  v165(v156, v157);
  v165((char *)v181, v157);
  v165((char *)v151, v157);
  unsigned int v166 = *(void (**)(char *, uint64_t))(v158 + 8);
  uint64_t v167 = v191;
  v166(v150, v191);
  v166(v180, v167);
  v166(v185, v167);
  v166(v186, v167);
  uint64_t result = 2;
  if ((v164 & 1) == 0 && (uint64_t *)v162 == v199) {
    return 0;
  }
  return result;
}

uint64_t sub_100047450(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000474A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C15C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004750C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Calendar.Component();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDesignationProvider()
{
  return &type metadata for KeyDesignationProvider;
}

uint64_t sub_100047560(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SESKeystore.KeyDesignation();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[11] = v5;
  v2[12] = *(void *)(v5 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_100047704, 0, 0);
}

uint64_t sub_100047704()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Clearing key designations in database", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v7;
  v0[17] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[18] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10004784C;
  uint64_t v9 = v0[2];
  return sub_100049968(0, (uint64_t)&off_1001B3858, v9);
}

uint64_t sub_10004784C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100047D14;
  }
  else {
    os_log_type_t v2 = sub_100047960;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100047960()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Clearing key designations in SE", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v22 = v0[19];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v5 = v0[14];
  uint64_t v7 = v0[10];
  uint64_t v6 = v0[11];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];

  v4(v5, v6);
  unint64_t v10 = *(void (**)(uint64_t, void, uint64_t))(v9 + 104);
  v10(v7, enum case for SESKeystore.KeyDesignation.progenitor(_:), v8);
  dispatch thunk of SESKeystore.clearKeyDesignation(_:)();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v11(v7, v8);
  if (v22)
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v12 = v0[9];
    uint64_t v13 = v0[7];
    v10(v12, enum case for SESKeystore.KeyDesignation.progenitorThirdParty(_:), v13);
    dispatch thunk of SESKeystore.clearKeyDesignation(_:)();
    v11(v12, v13);
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Done clearing key designations", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v20 = v0[13];
    uint64_t v21 = v0[11];

    v19(v20, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
  }
  return v14();
}

uint64_t sub_100047D14()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100047EA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 272) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a5;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v5 + 48) = v7;
  *(void *)(v5 + 56) = *(void *)(v7 - 8);
  *(void *)(v5 + 64) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SESKeystore.KeyDesignation();
  *(void *)(v5 + 72) = v8;
  *(void *)(v5 + 80) = *(void *)(v8 - 8);
  *(void *)(v5 + 88) = swift_task_alloc();
  *(void *)(v5 + 96) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v5 + 104) = v9;
  *(void *)(v5 + 112) = *(void *)(v9 - 8);
  *(void *)(v5 + 120) = swift_task_alloc();
  *(void *)(v5 + 128) = swift_task_alloc();
  *(void *)(v5 + 136) = swift_task_alloc();
  *(void *)(v5 + 144) = swift_task_alloc();
  *(void *)(v5 + 152) = swift_task_alloc();
  *(void *)(v5 + 160) = swift_task_alloc();
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 168) = v10;
  *unint64_t v10 = v5;
  v10[1] = sub_1000480BC;
  return sub_100049E30(0xD000000000000012, 0x8000000100179950, a1);
}

uint64_t sub_1000480BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 176) = a1;
  *(void *)(v5 + 184) = a2;
  *(unsigned char *)(v5 + 273) = a3;
  *(void *)(v5 + 192) = v3;
  swift_task_dealloc();
  if (v3)
  {
    return _swift_task_switch(sub_100048364, 0, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v5 + 200) = v6;
    *uint64_t v6 = v5;
    v6[1] = sub_100048248;
    uint64_t v7 = *(void *)(v5 + 16);
    return sub_100049E30(0xD00000000000001ELL, 0x8000000100179970, v7);
  }
}

uint64_t sub_100048248(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 208) = a1;
  *(void *)(v5 + 216) = a2;
  *(unsigned char *)(v5 + 274) = a3;
  *(void *)(v5 + 224) = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_100048E44;
  }
  else {
    uint64_t v6 = sub_100048518;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100048364()
{
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100048518()
{
  int v1 = *(unsigned __int8 *)(v0 + 273);
  if (v1 == 2)
  {
LABEL_12:
    uint64_t v29 = *(void *)(v0 + 224);
    uint64_t v30 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  int v2 = *(unsigned __int8 *)(v0 + 272);
  sub_10000354C(*(void *)(v0 + 176), *(void *)(v0 + 184));
  if ((v1 & 1) != 0 && v2)
  {
    defaultLogger()();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    char v6 = *(unsigned char *)(v0 + 273);
    uint64_t v8 = *(void *)(v0 + 176);
    unint64_t v7 = *(void *)(v0 + 184);
    if (v5)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Progenitor key is already designated", v9, 2u);
      swift_slowDealloc();

      sub_10004A31C(v8, v7, v6);
    }
    else
    {
      sub_10004A31C(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 273));
    }
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 104));
    goto LABEL_12;
  }
  defaultLogger()();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Designating progenitor key in SE", v12, 2u);
    swift_slowDealloc();
  }
  uint64_t v14 = *(void *)(v0 + 176);
  unint64_t v13 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v87 = *(void *)(v0 + 224);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for SESKeystore.KeyDesignation.progenitor(_:), v20);
  sub_10000354C(v14, v13);
  dispatch thunk of SESKeystore.designateKey(_:designation:sessionHandoffToken:)();
  if (v87)
  {
    uint64_t v22 = *(void *)(v0 + 208);
    unint64_t v21 = *(void *)(v0 + 216);
    uint64_t v24 = *(void *)(v0 + 176);
    unint64_t v23 = *(void *)(v0 + 184);
    uint64_t v88 = *(void *)(v0 + 96);
    uint64_t v26 = *(void *)(v0 + 72);
    uint64_t v25 = *(void *)(v0 + 80);
    char v27 = *(unsigned char *)(v0 + 273);
    char v28 = *(unsigned char *)(v0 + 274);
    sub_10004A31C(v24, v23, v27);
    sub_10004A31C(v24, v23, v27);
    sub_10004A31C(v22, v21, v28);
    sub_10004A31C(v24, v23, v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v88, v26);
    goto LABEL_22;
  }
  uint64_t v61 = *(void *)(v0 + 176);
  unint64_t v62 = *(void *)(v0 + 184);
  char v63 = *(unsigned char *)(v0 + 273);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  sub_10004A31C(v61, v62, v63);
  uint64_t v30 = sub_1000D0D48(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v65 = *((void *)v30 + 2);
  unint64_t v64 = *((void *)v30 + 3);
  if (v65 >= v64 >> 1) {
    uint64_t v30 = sub_1000D0D48((char *)(v64 > 1), v65 + 1, 1, v30);
  }
  uint64_t v66 = *(void *)(v0 + 176);
  unint64_t v67 = *(void *)(v0 + 184);
  char v68 = *(unsigned char *)(v0 + 273);
  *((void *)v30 + 2) = v65 + 1;
  id v69 = &v30[16 * v65];
  *((void *)v69 + 4) = 0xD000000000000012;
  *((void *)v69 + 5) = 0x8000000100179950;
  sub_10004A31C(v66, v67, v68);
  uint64_t v29 = 0;
LABEL_13:
  int v31 = *(unsigned __int8 *)(v0 + 274);
  if (v31 == 2)
  {
LABEL_35:
    *(void *)(v0 + 232) = v30;
    defaultLogger()();
    id v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Setting key designations in the database", v78, 2u);
      swift_slowDealloc();
    }
    uint64_t v79 = *(void *)(v0 + 128);
    uint64_t v80 = *(void *)(v0 + 104);
    uint64_t v81 = *(void *)(v0 + 112);

    unint64_t v82 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    *(void *)(v0 + 240) = v82;
    *(void *)(v0 + 248) = (v81 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v82(v79, v80);
    char v83 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v83;
    *char v83 = v0;
    v83[1] = sub_100049004;
    uint64_t v84 = *(void *)(v0 + 16);
    return sub_100049968(1, (uint64_t)v30, v84);
  }
  int v32 = *(unsigned __int8 *)(v0 + 272);
  sub_10000354C(*(void *)(v0 + 208), *(void *)(v0 + 216));
  if ((v31 & 1) != 0 && v32)
  {
    defaultLogger()();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    char v36 = *(unsigned char *)(v0 + 274);
    uint64_t v38 = *(void *)(v0 + 208);
    unint64_t v37 = *(void *)(v0 + 216);
    if (v35)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Progenitor third party key is already designated", v39, 2u);
      swift_slowDealloc();

      sub_10004A31C(v38, v37, v36);
    }
    else
    {
      sub_10004A31C(*(void *)(v0 + 208), *(void *)(v0 + 216), *(unsigned char *)(v0 + 274));
    }
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 104));
    goto LABEL_35;
  }
  uint64_t v85 = v29;
  unint64_t v89 = v30;
  defaultLogger()();
  int64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Designating progenitor third party key in SE", v42, 2u);
    swift_slowDealloc();
  }
  uint64_t v44 = *(void *)(v0 + 208);
  unint64_t v43 = *(void *)(v0 + 216);
  uint64_t v45 = *(void *)(v0 + 136);
  uint64_t v47 = *(void *)(v0 + 104);
  uint64_t v46 = *(void *)(v0 + 112);
  uint64_t v48 = *(void *)(v0 + 80);
  uint64_t v49 = *(void *)(v0 + 88);
  uint64_t v50 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
  (*(void (**)(uint64_t, void, uint64_t))(v48 + 104))(v49, enum case for SESKeystore.KeyDesignation.progenitorThirdParty(_:), v50);
  sub_10000354C(v44, v43);
  dispatch thunk of SESKeystore.designateKey(_:designation:sessionHandoffToken:)();
  char v51 = *(unsigned char *)(v0 + 274);
  uint64_t v53 = *(void *)(v0 + 208);
  unint64_t v52 = *(void *)(v0 + 216);
  if (!v85)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    sub_10004A31C(v53, v52, v51);
    uint64_t v30 = v89;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v30 = sub_1000D0D48(0, *((void *)v89 + 2) + 1, 1, v89);
    }
    unint64_t v71 = *((void *)v30 + 2);
    unint64_t v70 = *((void *)v30 + 3);
    if (v71 >= v70 >> 1) {
      uint64_t v30 = sub_1000D0D48((char *)(v70 > 1), v71 + 1, 1, v30);
    }
    uint64_t v72 = *(void *)(v0 + 208);
    unint64_t v73 = *(void *)(v0 + 216);
    char v74 = *(unsigned char *)(v0 + 274);
    *((void *)v30 + 2) = v71 + 1;
    uint64_t v75 = &v30[16 * v71];
    *((void *)v75 + 4) = 0xD00000000000001ELL;
    *((void *)v75 + 5) = 0x8000000100179970;
    sub_10004A31C(v72, v73, v74);
    goto LABEL_35;
  }
  uint64_t v55 = *(void *)(v0 + 176);
  unint64_t v54 = *(void *)(v0 + 184);
  uint64_t v56 = *(void *)(v0 + 80);
  uint64_t v86 = *(void *)(v0 + 88);
  uint64_t v57 = *(void *)(v0 + 72);
  char v58 = *(unsigned char *)(v0 + 273);
  sub_10004A31C(v53, v52, v51);
  sub_10004A31C(v53, v52, v51);
  sub_1000035EC(v53, v52);
  sub_10004A31C(v55, v54, v58);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v86, v57);
  swift_bridgeObjectRelease();
LABEL_22:
  (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 48));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v59 = *(uint64_t (**)(void))(v0 + 8);
  return v59();
}

uint64_t sub_100048E44()
{
  sub_10004A31C(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 273));
  (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 48));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100049004()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = sub_1000492D8;
  }
  else
  {
    swift_bridgeObjectRelease();
    int v2 = sub_100049120;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100049120()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  char v4 = *(unsigned char *)(v0 + 274);
  uint64_t v6 = *(void *)(v0 + 208);
  unint64_t v5 = *(void *)(v0 + 216);
  char v7 = *(unsigned char *)(v0 + 273);
  uint64_t v9 = *(void *)(v0 + 176);
  unint64_t v8 = *(void *)(v0 + 184);
  if (v3)
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done setting key designations", v10, 2u);
    swift_slowDealloc();

    sub_10004A31C(v6, v5, v4);
    sub_10004A31C(v9, v8, v7);
  }
  else
  {
    sub_10004A31C(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 273));
    sub_10004A31C(v6, v5, v4);
  }
  (*(void (**)(void, void))(v0 + 240))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1000492D8()
{
  uint64_t v2 = *(void *)(v0 + 208);
  unint64_t v1 = *(void *)(v0 + 216);
  char v3 = *(unsigned char *)(v0 + 274);
  sub_10004A31C(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 273));
  sub_10004A31C(v2, v1, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 48));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1000494BC(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = (void *)sub_10016D500(a1, a2);
  if (!v3)
  {
    uint64_t v15 = v14;
    uint64_t v37 = v8;
    if (v14)
    {
      if ([v14 version] == 1)
      {
        uint64_t v16 = v15;
        defaultLogger()();
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "v1 auth acls are not supported for key designation", v19, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v7);
      }
      else
      {
        id v36 = v15;
        id v20 = [v15 progenitorKey];
        uint64_t v21 = v7;
        if (v20)
        {
          uint64_t v22 = v20;
          id v23 = [v20 keyBlob];

          if (v23)
          {
            uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;

            id v27 = v36;
            unsigned int v28 = [v36 designationStatus];

            char v29 = v28 == 1;
            *(void *)a3 = v24;
            *(void *)(a3 + 8) = v26;
LABEL_14:
            *(unsigned char *)(a3 + 16) = v29;
            return;
          }
        }
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          int v32 = (uint8_t *)swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          uint64_t v39 = v34;
          *(_DWORD *)int v32 = 136315138;
          uint64_t v33 = v32 + 4;
          uint64_t v35 = v21;
          swift_bridgeObjectRetain();
          uint64_t v38 = sub_10004C3A4(a1, (unint64_t)a2, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Key with identifier %s doesn't have a key blob", v32, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v35);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v21);
        }
      }
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    char v29 = 2;
    goto LABEL_14;
  }
}

id sub_100049888(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return sub_100007290();
  }
  uint64_t v6 = a3 & 1;
  for (unint64_t i = (void **)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    uint64_t v8 = (uint64_t)*(i - 1);
    uint64_t v9 = *i;
    swift_bridgeObjectRetain();
    uint64_t v10 = (void *)sub_10016D500(v8, v9);
    swift_bridgeObjectRelease();
    if (v4) {
      break;
    }
    if (v10)
    {
      [v10 setDesignationStatus:v6];
    }
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return sub_100007290();
    }
  }
  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_100049968(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  *(unsigned char *)(v3 + 88) = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = *(void *)(v4 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100049A2C, 0, 0);
}

uint64_t sub_100049A2C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(unsigned char *)(v0 + 88) & 1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 56) = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  *(unsigned char *)(v6 + 32) = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 64) = v7;
  *(void *)(v7 + 16) = sub_10004A370;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v13, v8, v2);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100049BB8;
  uint64_t v11 = *(void *)(v0 + 48);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_10004A390, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100049BB8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    char v5 = sub_100049DC4;
  }
  else
  {
    swift_release();
    char v5 = sub_100049D60;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100049D60()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100049DC4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100049E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100049EF4, 0, 0);
}

uint64_t sub_100049EF4()
{
  uint64_t v1 = v0[9];
  uint64_t v14 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = (void *)swift_allocObject();
  v0[11] = v6;
  v6[2] = v3;
  v6[3] = v4;
  v6[4] = v5;
  uint64_t v7 = swift_allocObject();
  v0[12] = v7;
  *(void *)(v7 + 16) = sub_10004A3EC;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v14, v8, v2);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[13] = v10;
  uint64_t v11 = sub_100006CC8(&qword_1001C1630);
  *uint64_t v10 = v0;
  v10[1] = sub_10004A088;
  uint64_t v12 = v0[10];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v12, sub_10004A390, v7, v11);
}

uint64_t sub_10004A088()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 72);
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    uint64_t v5 = sub_10004A2B0;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10004A230;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004A230()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 32);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v1, v3);
}

uint64_t sub_10004A2B0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004A31C(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 != 2) {
    return sub_1000035EC(a1, a2);
  }
  return a1;
}

uint64_t sub_10004A330()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

id sub_10004A370()
{
  return sub_100049888(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_10004A390()
{
  return sub_1000AB83C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10004A3AC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004A3EC(uint64_t a1@<X8>)
{
  sub_1000494BC(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_10004A40C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for KeyDesignationProvider.ACLKeyInfo(uint64_t a1)
{
  return sub_1000035EC(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t _s7idcredd22KeyDesignationProviderV10ACLKeyInfoVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10000354C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for KeyDesignationProvider.ACLKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10000354C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_1000035EC(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for KeyDesignationProvider.ACLKeyInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KeyDesignationProvider.ACLKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000035EC(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDesignationProvider.ACLKeyInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDesignationProvider.ACLKeyInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDesignationProvider.ACLKeyInfo()
{
  return &type metadata for KeyDesignationProvider.ACLKeyInfo;
}

unint64_t sub_10004A5E8(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C0898);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    unint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8((uint64_t *)&unk_1001C17E0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100037898(v12, (uint64_t)v5, &qword_1001C0898);
    unint64_t result = sub_10013C204((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_10004DCD8(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004A7E8(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C17A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    unint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C17A8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100037898(v12, (uint64_t)v5, &qword_1001C17A0);
    unint64_t result = sub_10013C3B0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for SESKeystore.KeyDesignation();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
    unint64_t result = sub_10004DCE8(v9, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004AA18(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1718);
}

unint64_t sub_10004AA24(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1750);
}

unint64_t sub_10004AA30(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1788);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100037898(v6, (uint64_t)&v15, &qword_1001C1790);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10013C484(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100044CD4((uint64_t)&v17, v3[7] + 32 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004AB68(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C17C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100037898(v6, (uint64_t)&v15, &qword_1001C17C8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10013C484(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10004DCD8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004ACA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1740);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10013C484(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004ADB4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1708);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_10000354C(v7, v8);
    unint64_t result = sub_10013C484(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (uint64_t *)(v2[7] + 16 * result);
    *BOOL v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004AEDC(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1798);
}

unint64_t sub_10004AEE8(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1748);
}

unint64_t sub_10004AEF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1710);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10013C484(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004B018(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C1758);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1760);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100037898(v12, (uint64_t)v5, &qword_1001C1758);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_10013C484(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for PresentmentProposal();
    unint64_t result = sub_10004DCE8(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004B214(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1780);
}

unint64_t sub_10004B220(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C1768);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1770);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100037898(v12, (uint64_t)v5, &qword_1001C1768);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_10013C484(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for AnyCodable();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004B420(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1778);
}

unint64_t sub_10004B42C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(&qword_1001C1730);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100037898(v6, (uint64_t)v15, &qword_1001C1738);
    unint64_t result = sub_10013C540((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10004DCD8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004B570(uint64_t a1)
{
  return sub_10004B57C(a1, &qword_1001C1700);
}

unint64_t sub_10004B57C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006CC8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10013C484(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t KeyProtectionOptions.aclData.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t GenericPasswordKeychainWrapper.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t GenericPasswordKeychainWrapper.deinit()
{
  return v0;
}

void GenericPasswordStore.storeKey<A>(_:label:keyProtectionOptions:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v55 = a4;
  uint64_t v56 = a7;
  unint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v52 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  long long v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a3;
  sub_10004CE78(a2, a3);
  if (!v7)
  {
    uint64_t v47 = v15;
    uint64_t v48 = v14;
    uint64_t v49 = a1;
    uint64_t v50 = v12;
    uint64_t v51 = v11;
    defaultLogger()();
    uint64_t v18 = v57;
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v46 = v21 + 4;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_10004C3A4(a2, v57, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Storing keychain key with label %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v48);
      uint64_t v22 = a2;
      uint64_t v23 = v56;
      uint64_t v18 = v57;
      uint64_t v24 = v50;
      uint64_t v25 = v51;
      unint64_t v26 = v53;
      uint64_t v27 = v54;
      uint64_t v28 = v55;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v48);
      uint64_t v24 = v50;
      uint64_t v25 = v51;
      uint64_t v28 = v55;
      uint64_t v23 = v56;
      unint64_t v26 = v53;
      uint64_t v27 = v54;
      uint64_t v22 = a2;
    }
    sub_10004D4C8(v49, v22, v18, v28, v26, v27, v23);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    OSStatus v30 = SecItemAdd(isa, 0);

    if (v30)
    {
      os_log_type_t v31 = v52;
      uint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v58 = 0xD00000000000002BLL;
      unint64_t v59 = 0x800000010017C180;
      CFStringRef v32 = SecCopyErrorMessageString(v30, 0);
      if (v32)
      {
        uint64_t v33 = (__CFString *)v32;
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v36 = v35;
      }
      else
      {
        LODWORD(v60) = v30;
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
        id v36 = v37;
      }
      v38._uint64_t countAndFlagsBits = v34;
      v38._object = v36;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v31, enum case for DIPError.Code.failedToGeneratePayloadProtectionKey(_:), v25);
      sub_100006CC8((uint64_t *)&unk_1001C4950);
      uint64_t v39 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
      unint64_t v40 = (*(unsigned __int8 *)(*(void *)v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v39 + 80);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1001768E0;
      unint64_t v42 = v41 + v40;
      unint64_t v43 = v42 + v39[14];
      uint64_t v44 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v45 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104))(v42, v44, v45);
      *(void *)(v43 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v43 = v30;
      sub_10004A5E8(v41);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t GenericPasswordStore.readKey<A>(label:laContext:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v46 = a5;
  uint64_t v51 = a1;
  uint64_t v49 = a6;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v47 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v48 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v42 = a3;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v43 = v11;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v45 = v6;
    uint64_t v53 = v20;
    uint64_t v44 = a4;
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    CFTypeRef result = (CFTypeRef)sub_10004C3A4(v51, a2, &v53);
    a3 = v42;
    a4 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching keychain key with label %s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v45;
    swift_slowDealloc();
    uint64_t v11 = v43;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v50);
  _s7idcredd20GenericPasswordStoreC14createKeyQuery5label9laContextSDySSypGSS_So9LAContextCSgtF_0(v51, a2, a3);
  CFTypeRef result = 0;
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v22 = SecItemCopyMatching(isa, &result);

  if (v22 == -25300) {
    goto LABEL_10;
  }
  if (!v22)
  {
    if (result)
    {
      CFTypeRef v52 = result;
      swift_unknownObjectRetain();
      if (swift_dynamicCast())
      {
        uint64_t v23 = v49;
        (*(void (**)(uint64_t *, void *, void *, uint64_t))(v46 + 16))(&v53, &type metadata for Data, &protocol witness table for Data, a4);
        if (!v7) {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v23, 0, 1, a4);
        }
        return swift_unknownObjectRelease();
      }
    }
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v49, 1, 1, a4);
    return swift_unknownObjectRelease();
  }
  uint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  uint64_t v53 = 0xD000000000000028;
  unint64_t v54 = 0x800000010017C240;
  CFStringRef v24 = SecCopyErrorMessageString(v22, 0);
  if (v24)
  {
    uint64_t v25 = (__CFString *)v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    LODWORD(v52) = v22;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = v29;
  }
  uint64_t v30 = v47;
  os_log_type_t v31 = v48;
  v32._uint64_t countAndFlagsBits = v26;
  v32._object = v28;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v31, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v11);
  sub_100006CC8((uint64_t *)&unk_1001C4950);
  uint64_t v33 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
  unint64_t v34 = (*(unsigned __int8 *)(*(void *)v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v33 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1001768E0;
  unint64_t v36 = v35 + v34;
  unint64_t v37 = v36 + v33[14];
  uint64_t v38 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v39 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v36, v38, v39);
  *(void *)(v37 + 24) = &type metadata for Int32;
  *(_DWORD *)unint64_t v37 = v22;
  sub_10004A5E8(v35);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GenericPasswordStore.deleteKey(label:)(Swift::String label)
{
}

unint64_t GenericPasswordStore.createKeyQuery<A>(key:label:keyProtectionOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10004D4C8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10004C3A4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10004C478(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10004DD90((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10004DD90((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000B9DC((uint64_t)v12);
  return v7;
}

uint64_t sub_10004C478(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10004C634(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10004C634(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10004C6CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10004C844(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10004C844(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10004C6CC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10003DFDC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10004C844(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006CC8(&qword_1001C14F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10004C994(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100006CC8(&qword_1001C1720);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_10013C2D8(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  int64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10013C2D8(v5);
    int64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10004CA94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100006CC8(&qword_1001C17B8);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_10013C344(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  int64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    swift_errorRetain();
    if (!--v1) {
      return (unint64_t)v3;
    }
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v5 = *v8;
    unint64_t result = sub_10013C344(v4);
    v8 += 2;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10004CB88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100006CC8(&qword_1001C17B0);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      unsigned __int8 v5 = *((unsigned char *)i - 8);
      uint64_t v6 = *i;
      unint64_t result = sub_10013C344(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10004CC60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100006CC8(&qword_1001C1728);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_10013C4FC(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_10004CD38()
{
  if (qword_1001C03C0 != -1) {
    swift_once();
  }
  uint64_t v0 = *(os_unfair_lock_s **)(qword_1001C4BD0 + 16);
  uint64_t v1 = (uint64_t *)&v0[4];
  uint64_t v2 = v0 + 18;
  os_unfair_lock_lock(v0 + 18);
  sub_100006E24(v1, v9);
  os_unfair_lock_unlock(v2);
  uint64_t v3 = v9[1];
  uint64_t v4 = v9[3];
  uint64_t v5 = v10;
  sub_100017800((uint64_t)v10);
  swift_release();
  sub_100006E40(v3);
  sub_100006E40(v4);
  uint64_t v6 = sub_100006E40((uint64_t)v5);
  if (v5)
  {
    uint64_t v7 = v5(v6);
    sub_100006E40((uint64_t)v5);
    return v7;
  }
  else
  {
    type metadata accessor for GenericPasswordStore();
    return swift_allocObject();
  }
}

void sub_10004CE78(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v40 = v5;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    v38[1] = v2;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v39 = v7;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_10004C3A4(a1, a2, &v44);
    uint64_t v7 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Deleting keychain key with label %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v43);
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100176D20;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v16;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v18;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(unsigned char *)(inited + 96) = 1;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v19;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = a1;
  *(void *)(inited + 152) = a2;
  swift_bridgeObjectRetain();
  CFStringRef v20 = (id)kSecClassGenericPassword;
  sub_10004AB68(inited);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v22 = SecItemDelete(isa);

  if (v22 != -25300 && v22)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v44 = 0xD000000000000029;
    unint64_t v45 = 0x800000010017C540;
    CFStringRef v23 = SecCopyErrorMessageString(v22, 0);
    if (v23)
    {
      CFStringRef v24 = (__CFString *)v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
    }
    else
    {
      LODWORD(v46) = v22;
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = v28;
    }
    uint64_t v29 = v40;
    v30._uint64_t countAndFlagsBits = v25;
    v30._object = v27;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v7, enum case for DIPError.Code.failedToDeletePayloadProtectionKey(_:), v29);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    os_log_type_t v31 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v32 = (*(unsigned __int8 *)(*(void *)v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v31 + 80);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1001768E0;
    unint64_t v34 = v33 + v32;
    unint64_t v35 = v34 + v31[14];
    uint64_t v36 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v37 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v34, v36, v37);
    *(void *)(v35 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v35 = v22;
    sub_10004A5E8(v33);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

unint64_t sub_10004D4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v46 = a6;
  unint64_t v47 = a5;
  uint64_t v44 = a4;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  __chkstk_darwin(v10);
  BOOL v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100176D30;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v14;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v15;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v16;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v17;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v18;
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 24);
  CFStringRef v20 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain();
  uint64_t v21 = v19(v46, a7);
  unint64_t v22 = v47;
  *(void *)(inited + 216) = &type metadata for Data;
  *(void *)(inited + 192) = v21;
  *(void *)(inited + 200) = v23;
  unint64_t v24 = sub_10004AB68(inited);
  if (v22 >> 60 != 11)
  {
    uint64_t v25 = v42;
    uint64_t v26 = v43;
    uint64_t v27 = v12;
    uint64_t v28 = v44;
    if (v22 >> 60 == 15)
    {
      sub_10004DDEC(v44, v22);
    }
    else
    {
      type metadata accessor for SecAccessControl(0);
      uint64_t v30 = v29;
      sub_100009778(v28, v22);
      sub_100009778(v28, v22);
      uint64_t v31 = v45;
      uint64_t v32 = static SecAccessControlRef.fromData(_:)();
      if (v31)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v25 + 104))(v27, enum case for DIPError.Code.internalError(_:), v26);
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000507C();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        uint64_t v33 = v44;
        sub_10004DDEC(v44, v22);
      }
      else
      {
        unint64_t v34 = (void *)v32;
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;
        uint64_t v50 = v30;
        *(void *)&long long v49 = v34;
        sub_10004DCD8(&v49, v48);
        id v38 = v34;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v51 = v24;
        sub_100169938(v48, v35, v37, isUniquelyReferenced_nonNull_native);
        unint64_t v24 = v51;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = v44;
        sub_10004DDEC(v44, v22);
      }
      sub_10004DDEC(v33, v22);
    }
  }
  return v24;
}

unint64_t _s7idcredd20GenericPasswordStoreC14createKeyQuery5label9laContextSDySSypGSS_So9LAContextCSgtF_0(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100006CC8(&qword_1001C17D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100176D30;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v9;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = a1;
  *(void *)(inited + 104) = a2;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v10;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v11;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = 1;
  CFStringRef v12 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10004AB68(inited);
  if (a3)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    unint64_t v22 = sub_10004DD50();
    *(void *)&long long v21 = a3;
    sub_10004DCD8(&v21, v20);
    id v17 = a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100169938(v20, v14, v16, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t *destroy for KeyProtectionOptions(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)sub_1000035EC(*result, v1);
  }
  return result;
}

uint64_t _s7idcredd20KeyProtectionOptionsVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_10000354C(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for KeyProtectionOptions(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      sub_10000354C(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_1000035EC(v7, v8);
      return a1;
    }
    sub_100014414((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v5 = *(void *)a2;
  sub_10000354C(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

__n128 initializeWithTake for KeyProtectionOptions(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for KeyProtectionOptions(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_1000035EC(v6, v4);
      return a1;
    }
    sub_100014414((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyProtectionOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyProtectionOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)__n128 result = a2 - 12;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyProtectionOptions()
{
  return &type metadata for KeyProtectionOptions;
}

uint64_t type metadata accessor for GenericPasswordStore()
{
  return self;
}

_OWORD *sub_10004DCD8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10004DCE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004DD50()
{
  unint64_t result = qword_1001C17D8;
  if (!qword_1001C17D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C17D8);
  }
  return result;
}

uint64_t sub_10004DD90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10004DDEC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_100009764(a1, a2);
  }
  return a1;
}

char *sub_10004DE00(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_allocWithZone((Class)NSXPCListener);
  unint64_t v8 = v1;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v7 initWithMachServiceName:v9];

  *(void *)&v8[OBJC_IVAR____TtC7idcredd19PresentmentListener_xpcListener] = v10;
  *(void *)&v8[OBJC_IVAR____TtC7idcredd19PresentmentListener_dataContainer] = a1;
  swift_retain();

  uint64_t v11 = (objc_class *)type metadata accessor for PresentmentListener();
  v19.receiver = v8;
  v19.super_class = v11;
  CFStringRef v12 = (char *)[super init];
  unint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC7idcredd19PresentmentListener_xpcListener];
  uint64_t v14 = v12;
  [v13 setDelegate:v14];
  [v13 resume];
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Presentment listener is started", v17, 2u);
    swift_slowDealloc();
  }
  swift_release();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

id sub_10004E01C()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Presentment listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC7idcredd19PresentmentListener_xpcListener] invalidate];
  NSString v9 = (objc_class *)type metadata accessor for PresentmentListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10004E204()
{
  return sub_10004E21C("Presentment connection invalidated");
}

uint64_t sub_10004E210()
{
  return sub_10004E21C("Presentment connection interrupted");
}

uint64_t sub_10004E21C(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for PresentmentListener()
{
  return self;
}

id sub_10004E40C()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying PresentmentSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  NSString v9 = (objc_class *)type metadata accessor for PresentmentSessionProxy();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10004E83C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  os_log_type_t v7 = (uint64_t (*)(void))((char *)&dword_1001C19B8 + dword_1001C19B8);
  a3;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[4] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000270C4;
  return v7();
}

uint64_t sub_10004E900(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10004EA2C, 0, 0);
}

uint64_t sub_10004EA2C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentSessionProxy interpretRequest", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[11] = v7;
  v0[12] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_100050E90();
  uint64_t v13 = *(void *)(v0[3] + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  v0[13] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10004ED88;
    uint64_t v15 = v0[2];
    return sub_100128328(v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[11];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    objc_super v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10004ED88(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10004EF40;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_10004EEB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004EEB0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

uint64_t sub_10004EF40()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10004F1FC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10004F2C0;
  return sub_10004E900((uint64_t)v6);
}

uint64_t sub_10004F2C0()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 24);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v7 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v9 = (void *)v7;
  }
  else
  {
    sub_10000C854(0, &qword_1001C1990);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v9 = isa;
  }
  uint64_t v10 = *(void (***)(void, void, void))(v3 + 32);
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, v7);

  _Block_release(v10);
  objc_super v11 = *(uint64_t (**)(void))(v6 + 8);
  return v11();
}

uint64_t sub_10004F480(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_10004F540, 0, 0);
}

uint64_t sub_10004F540()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentSessionProxy buildResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10004F674;
  uint64_t v8 = v0[2];
  return sub_10004FC6C(v8);
}

uint64_t sub_10004F674(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    return _swift_task_switch(sub_10004F7C8, 0, 0);
  }
}

uint64_t sub_10004F7C8()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = [v1 responseData];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v6(v3, v5);
}

uint64_t sub_10004F9F8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10004FABC;
  return sub_10004F480((uint64_t)v6);
}

uint64_t sub_10004FABC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 24);
  uint64_t v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v11 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v13 = (void *)v11;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000035EC(a1, a2);
    uint64_t v11 = 0;
    uint64_t v13 = isa;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v7 + 32);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v10 + 8);
  return v15();
}

uint64_t sub_10004FC6C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10004FD98, 0, 0);
}

uint64_t sub_10004FD98()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentSessionProxy buildCredentialResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[11] = v7;
  v0[12] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_100050E90();
  uint64_t v13 = *(void *)(v0[3] + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  v0[13] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000500F4;
    uint64_t v15 = v0[2];
    return sub_100128E24(v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[11];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000500F4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000527D8;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_1000527DC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100050398(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100024608;
  return sub_10004FC6C((uint64_t)v6);
}

uint64_t sub_10005045C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100050588, 0, 0);
}

uint64_t sub_100050588()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentSessionProxy buildResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[11] = v7;
  v0[12] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_100050E90();
  uint64_t v13 = *(void *)(v0[3] + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  v0[13] = v13;
  if (v13)
  {
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000508E4;
    uint64_t v15 = v0[2];
    return sub_100129734(v15);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.badLogic(_:), v0[4]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[11];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[7];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000508E4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10004EF40;
  }
  else
  {
    *(void *)(v6 + 128) = a2;
    *(void *)(v6 + 136) = a1;
    uint64_t v7 = sub_100050A18;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100050A18()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  return v1(v2, v3);
}

uint64_t sub_100050C20(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[4] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100050CDC;
  return sub_10005045C(a1);
}

uint64_t sub_100050CDC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    CFStringRef v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v10 = 0;
    Class isa = 0;
    CFStringRef v12 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009764(a1, a2);
    uint64_t v10 = 0;
    CFStringRef v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

void sub_100050E90()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5._rawValue = *(void **)(v0 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions);
  if (*((void *)v5._rawValue + 2)
    && ((sub_10010EE78(42, 0xE100000000000000, *(void **)(v0 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions)) & 1) == 0|| (byte_1001C4BB0 & 1) != 0)&& (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) != 0)
  {
    uint64_t v7 = (void *)Strong;
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = 0xD000000000000023;
    v8._object = (void *)0x800000010017C7F0;
    Swift::Bool v9 = NSXPCConnection.hasArrayEntitlement(name:values:)(v8, v5);
    swift_bridgeObjectRelease();
    if (!v9)
    {
      unint64_t v11 = 0;
      unint64_t v12 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD00000000000001FLL;
      unint64_t v12 = 0x800000010017C820;
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for PresentmentSessionProxy()
{
  return self;
}

uint64_t sub_100051374()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::OpaquePointer v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1001C1910 + dword_1001C1910);
  return v6(v2, v3, v4);
}

uint64_t sub_100051434()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::OpaquePointer v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C1930 + dword_1001C1930);
  return v6(v2, v3, v4);
}

uint64_t sub_1000514F4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::OpaquePointer v5 = v1;
  v5[1] = sub_100007458;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C1950 + dword_1001C1950);
  return v6(v2, v3, v4);
}

uint64_t sub_1000515B4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::OpaquePointer v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1001C1970 + dword_1001C1970);
  return v6(v2, v3, v4);
}

uint64_t sub_100051674()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000516B4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  Swift::OpaquePointer v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::OpaquePointer v5 = v1;
  v5[1] = sub_100016FE0;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001C1998 + dword_1001C1998);
  return v6(v2, v3, v4);
}

id sub_100051770(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v9 = OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow;
  *(void *)&v3[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow] = 0;
  Swift::String v10 = v3;
  defaultLogger()();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v16[0] = a2;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Creating PresentmentSessionProxy", v13, 2u);
    a2 = v16[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id result = (id)os_transaction_create();
  if (result)
  {
    *(void *)&v10[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign();
    *(void *)&v10[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions] = _swiftEmptyArrayStorage;
    *(void *)&v3[v9] = 0;
    swift_release();
    *(void *)&v10[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_dataContainer] = a2;
    swift_retain();

    uint64_t v15 = (objc_class *)type metadata accessor for PresentmentSessionProxy();
    v17.receiver = v10;
    v17.super_class = v15;
    return [super init];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100051974(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  defaultLogger()();
  uint64_t v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 67109120;
    LODWORD(aBlock) = [v8 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Presentment listener connection received from %d", v11, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v12 = [self interfaceWithProtocol:&OBJC_PROTOCOL___DCPresentmentXPCProtocol];
  [v8 setExportedInterface:v12];

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC7idcredd19PresentmentListener_dataContainer);
  id v15 = objc_allocWithZone((Class)type metadata accessor for PresentmentSessionProxy());
  swift_retain();
  id v16 = sub_100051770((uint64_t)Strong, v14);

  swift_release();
  [v8 setExportedObject:v16];

  uint64_t v25 = sub_10004E204;
  uint64_t v26 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_100127238;
  unint64_t v24 = &unk_1001B5370;
  objc_super v17 = _Block_copy(&aBlock);
  [v8 setInvalidationHandler:v17];
  _Block_release(v17);
  uint64_t v25 = sub_10004E210;
  uint64_t v26 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_100127238;
  unint64_t v24 = &unk_1001B5398;
  uint64_t v18 = _Block_copy(&aBlock);
  [v8 setInterruptionHandler:v18];
  _Block_release(v18);
  [v8 resume];
  swift_unknownObjectWeakDestroy();
  return 1;
}

uint64_t sub_100051CE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    id v38 = a3;
    uint64_t v17 = v16;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v42 = v36;
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v37 = v10;
    swift_bridgeObjectRetain();
    uint64_t v18 = Array.description.getter();
    uint64_t v39 = a4;
    uint64_t v40 = a5;
    uint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_10004C3A4(v19, v21, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    v34[1] = v17 + 14;
    id v22 = (id)DCPresentmentTypeToString();
    os_log_type_t v23 = v15;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = a2;
    unint64_t v26 = v25;

    a4 = v39;
    uint64_t v41 = sub_10004C3A4(v24, v26, &v42);
    a5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v23, "PresentmentSessionProxy configure with partitions %{public}s, presentment type %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();

    uint64_t v27 = v35;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v37);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v27 = a2;
  }
  *(void *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void **)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_dataContainer);
  type metadata accessor for PayloadProcessorBuilder();
  uint64_t v29 = swift_allocObject();
  type metadata accessor for SESKeystore();
  swift_allocObject();
  id v30 = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = SESKeystore.init()();
  type metadata accessor for PresentmentFlow();
  swift_allocObject();
  uint64_t v32 = sub_10012A28C(a1, v27, (void **)a3, v28, 0, v29, v31);

  swift_release();
  *(void *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow) = v32;
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(a5 + 16))(a5, 0);
}

uint64_t sub_1000520A8()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000521D4, 0, 0);
}

uint64_t sub_1000521D4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentSessionProxy generateTransportKey", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[10] = v7;
  v0[11] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_100050E90();
  uint64_t v13 = *(void *)(v0[2] + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  v0[12] = v13;
  if (v13)
  {
    os_log_type_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001C4208 + dword_1001C4208);
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100052544;
    return v15(0, 0xF000000000000000);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.badLogic(_:), v0[3]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v8(v9, v10);
    sub_10000C854(0, (unint64_t *)&qword_1001C1900);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NSError.mapFromError(_:domain:mapper:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100052544(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 112) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100052678;
  }
  else
  {
    *(void *)(v6 + 120) = a2;
    *(void *)(v6 + 128) = a1;
    uint64_t v7 = sub_1000209F0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100052678()
{
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  sub_10000C854(0, (unint64_t *)&qword_1001C1900);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000527B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000527C8()
{
  return swift_release();
}

unint64_t sub_1000527E0(uint64_t a1, void *a2)
{
  uint64_t v35 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchPrearmTrustKey.getter();
  uint64_t v37 = v10;
  DIPSignpost.init(_:)();
  type metadata accessor for StoredTrustKey();
  uint64_t v11 = (void *)static StoredTrustKey.fetchRequest()();
  [v11 setFetchLimit:1];
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  uint64_t v12 = swift_allocObject();
  long long v34 = xmmword_1001768E0;
  *(_OWORD *)(v12 + 16) = xmmword_1001768E0;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10000DB88();
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v13 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v13];

  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v15._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v15._object = (void *)0x800000010017C990;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = a1;
    v16._object = a2;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 8250;
    v17._object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    uint64_t v42 = v2;
    sub_100006CC8(&qword_1001C0890);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v36, enum case for DIPError.Code.coreDataError(_:), v35);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    uint64_t v18 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v19 = (*(unsigned __int8 *)(*(void *)v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v18 + 80);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = v34;
    unint64_t v21 = v20 + v19;
    id v22 = (uint64_t *)(v20 + v19 + v18[14]);
    uint64_t v23 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v24 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v21, v23, v24);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v25 = dispatch thunk of Error._code.getter();
    v22[3] = (uint64_t)&type metadata for Int;
    *id v22 = v25;
    sub_10004A5E8(v20);
    uint64_t v26 = type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v27 = v37;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
    return v26;
  }
  unint64_t v28 = result;
  id v30 = v37;
  uint64_t v29 = v38;
  uint64_t v31 = v39;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_10:
    swift_bridgeObjectRelease();

    uint64_t v26 = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v33) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v28 & 0xC000000000000001) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v32 = *(id *)(v28 + 32);
LABEL_8:
    uint64_t v26 = (uint64_t)v32;
    swift_bridgeObjectRelease();

LABEL_11:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    return v26;
  }
  __break(1u);
  return result;
}

uint64_t sub_100052DD4(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v27 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v9 - 8);
  uint64_t v28 = type metadata accessor for DIPSignpost();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseDeletePrearmTrustKey.getter();
  DIPSignpost.init(_:)();
  unint64_t v13 = sub_1000527E0(a1, a2);
  if (v3)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v14._object = (void *)0x800000010017CA60;
    v14._uint64_t countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v14);
    uint64_t v31 = v3;
    sub_100006CC8(&qword_1001C0890);
    _print_unlocked<A, B>(_:_:)();
    v26[0] = v30;
    v26[1] = v29;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v27, enum case for DIPError.Code.coreDataError(_:), v6);
    sub_100006CC8((uint64_t *)&unk_1001C4950);
    Swift::String v15 = (int *)(sub_100006CC8(&qword_1001C0898) - 8);
    unint64_t v16 = (*(unsigned __int8 *)(*(void *)v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v15 + 80);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1001768E0;
    unint64_t v18 = v17 + v16;
    unint64_t v19 = (uint64_t *)(v17 + v16 + v15[14]);
    uint64_t v20 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v21 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v18, v20, v21);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v22 = dispatch thunk of Error._code.getter();
    v19[3] = (uint64_t)&type metadata for Int;
    *unint64_t v19 = v22;
    sub_10004A5E8(v17);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v28);
  }
  else
  {
    uint64_t v24 = (void *)v13;
    uint64_t v25 = v28;
    if (v13)
    {
      [*(id *)(v2 + 16) deleteObject:v13];
    }
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v25);
  }
}

uint64_t sub_10005326C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  Swift::String v14 = (char *)&v31 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v31 - v15;
  if ((*(unsigned char *)(v0 + 160) & 1) == 0)
  {
    uint64_t v21 = *(void *)(v0 + 120);
    if (v21 == 3)
    {
      defaultLogger()();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v17, v26))
      {
        uint64_t v20 = 3;
        unint64_t v16 = v11;
        goto LABEL_19;
      }
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v26, "Presentment session is using ACWG session encryption", v27, 2u);
      uint64_t v20 = 3;
      unint64_t v16 = v11;
    }
    else if (v21 == 2)
    {
      defaultLogger()();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      uint64_t v20 = 2;
      if (!os_log_type_enabled(v17, v28))
      {
        unint64_t v16 = v14;
        goto LABEL_19;
      }
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v28, "Presentment session is using UA session encryption", v29, 2u);
      unint64_t v16 = v14;
    }
    else if (v21 == 1 && ((byte_1001C4BB0 & 1) != 0 || *(void *)(v0 + 112) == 1))
    {
      defaultLogger()();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v17, v22))
      {
        uint64_t v20 = 1;
        goto LABEL_19;
      }
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v22, "Presentment session has disabled session encryption", v23, 2u);
      uint64_t v20 = 1;
    }
    else
    {
      defaultLogger()();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v17, v24))
      {
        uint64_t v20 = 0;
        unint64_t v16 = v8;
        goto LABEL_19;
      }
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v24, "Presentment session is using default session encryption", v25, 2u);
      uint64_t v20 = 0;
      unint64_t v16 = v8;
    }
    goto LABEL_18;
  }
  defaultLogger()();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "No presentment options set; using default session encryption",
      v19,
      2u);
    uint64_t v20 = 0;
    unint64_t v16 = v5;
LABEL_18:
    swift_slowDealloc();
    goto LABEL_19;
  }
  uint64_t v20 = 0;
  unint64_t v16 = v5;
LABEL_19:

  (*(void (**)(char *, uint64_t))(v2 + 8))(v16, v1);
  return v20;
}

BOOL sub_10005366C(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 4) {
    return (a1 & 0xF) == 0;
  }
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    v10[1] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unknown session encryption mode %lu", v9, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 1;
}

uint64_t sub_1000537F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v89 = a5;
  uint64_t v88 = a4;
  uint64_t v93 = a3;
  uint64_t v92 = a2;
  uint64_t v95 = a1;
  uint64_t v96 = type metadata accessor for DIPError.Code();
  uint64_t v97 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  unint64_t v98 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006CC8(&qword_1001C1A78);
  __chkstk_darwin(v6 - 8);
  uint64_t v80 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for COSEKey();
  uint64_t v78 = *(void *)(v79 - 8);
  uint64_t v8 = __chkstk_darwin(v79);
  id v76 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_type_t v77 = (char *)&v74 - v10;
  uint64_t v11 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v11 - 8);
  uint64_t v94 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPSignpost();
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v100 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  int64_t v91 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v75 = (char *)&v74 - v17;
  __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v74 - v18;
  uint64_t v86 = type metadata accessor for ISO18013SessionCryptarch.Curve();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v87 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for ISO18013SessionCryptarch.Variant();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v84 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for ISO18013SessionCryptarch.Role();
  uint64_t v21 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  os_log_type_t v28 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v74 - v29;
  defaultLogger()();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "PresentmentSessionCryptor decryptReaderRequest", v33, 2u);
    swift_slowDealloc();
  }

  long long v34 = *(void (**)(char *, uint64_t))(v25 + 8);
  v34(v30, v24);
  uint64_t v35 = v102;
  uint64_t v36 = sub_10005326C();
  uint64_t v37 = v36;
  if ((unint64_t)(v36 - 2) < 2)
  {
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for ISO18013SessionCryptarch.Role.device(_:), v81);
    uint64_t v38 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.UA(_:);
    uint64_t v39 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.ACWG(_:);
    if (v37 != 3) {
      uint64_t v39 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.standard(_:);
    }
    if (v37 != 2) {
      uint64_t v38 = v39;
    }
    (*(void (**)(char *, void, uint64_t))(v82 + 104))(v84, *v38, v83);
    (*(void (**)(char *, void, uint64_t))(v85 + 104))(v87, enum case for ISO18013SessionCryptarch.Curve.P256(_:), v86);
    type metadata accessor for ISO18013SessionCryptarch();
    swift_allocObject();
    *(void *)(v35 + 168) = ISO18013SessionCryptarch.init(role:variant:curve:)();
    swift_retain_n();
    swift_release();
    static IDCSSignposts.presentmentDeriveSessionKey.getter();
    uint64_t v40 = v90;
    DIPSignpost.init(_:)();
    uint64_t v41 = v101;
    ISO18013SessionCryptarch.deriveSessionKeys(sessionTranscript:ikm:)();
    uint64_t v42 = v91;
    if (v41)
    {
      swift_release();
      (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v96);
      swift_errorRetain();
      unint64_t v43 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_release();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v40, v100);
      return v43;
    }
    swift_release();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v50 = *(void (**)(char *, uint64_t))(v99 + 8);
    v50(v40, v100);
LABEL_18:
    static IDCSSignposts.presentmentDecryptReaderRequest.getter();
    DIPSignpost.init(_:)();
    uint64_t v51 = ISO18013SessionEstablishment.data.getter();
    unint64_t v53 = v52;
    unint64_t v43 = ISO18013SessionCryptarch.decrypt(data:)();
    sub_1000035EC(v51, v53);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    swift_release();
    v50(v42, v100);
    return v43;
  }
  if (v36 == 1)
  {
    defaultLogger()();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Session encryption is disabled; no need to decrypt reader request",
        v46,
        2u);
      swift_slowDealloc();
    }

    v34(v28, v24);
    return ISO18013SessionEstablishment.data.getter();
  }
  else
  {
    if (!*(void *)(v35 + 168))
    {
      (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v96);
      unint64_t v43 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return v43;
    }
    swift_retain_n();
    uint64_t v47 = (uint64_t)v80;
    ISO18013SessionEstablishment.readerKey.getter();
    uint64_t v48 = sub_100006CC8(&qword_1001C1A80);
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
    {
      sub_100014BBC(v47, &qword_1001C1A78);
      (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v96);
      unint64_t v43 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_release_n();
      return v43;
    }
    unint64_t v54 = v76;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    uint64_t v55 = v78;
    uint64_t v56 = v77;
    uint64_t v57 = v79;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v54, v79);
    if (COSEKey.type.getter() == 2)
    {
      COSEKey.ec2.getter();
      sub_100055578((uint64_t)v105, (uint64_t)v106);
      unint64_t v58 = v107;
      if (v107 >> 60 != 15)
      {
        uint64_t v60 = v106[0];
        uint64_t v59 = v106[1];
        uint64_t v61 = v108;
        unint64_t v62 = v109;
        sub_1000035EC(v110, v111);
        sub_1000035EC(v61, v62);
        sub_1000035EC(v59, v58);
        if (v60 == 1)
        {
          uint64_t v63 = COSEKey.publicKeyData.getter();
          if (v64 >> 60 == 15)
          {
            (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v96);
            unint64_t v43 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
            return v43;
          }
          uint64_t v70 = v63;
          unint64_t v43 = v64;
          uint64_t v71 = v101;
          ISO18013SessionCryptarch.setRemoteKey(_:)();
          if (v71)
          {
            (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v96);
            swift_errorRetain();
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            sub_100009764(v70, v43);
            swift_release();
            swift_errorRelease();
            swift_release();
            (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v79);
            return v43;
          }
          static IDCSSignposts.presentmentDeriveSessionKey.getter();
          DIPSignpost.init(_:)();
          ISO18013SessionCryptarch.deriveSessionKeys(sessionTranscript:ikm:)();
          uint64_t v72 = v75;
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          sub_100009764(v70, v43);
          swift_release();
          uint64_t v73 = v55;
          uint64_t v50 = *(void (**)(char *, uint64_t))(v99 + 8);
          v50(v72, v100);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v57);
          uint64_t v42 = v91;
          goto LABEL_18;
        }
      }
      unint64_t v103 = 0;
      unint64_t v104 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v68._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v68._object = (void *)0x800000010017CC30;
      String.append(_:)(v68);
      uint64_t v112 = COSEKey.algorithm.getter();
      type metadata accessor for COSEAlgorithm(0);
      _print_unlocked<A, B>(_:_:)();
      unint64_t v43 = v103;
      uint64_t v66 = v57;
      (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v96);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      unint64_t v67 = v56;
      swift_allocError();
    }
    else
    {
      unint64_t v103 = 0;
      unint64_t v104 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      v65._uint64_t countAndFlagsBits = 0xD000000000000018;
      v65._object = (void *)0x800000010017CC10;
      String.append(_:)(v65);
      uint64_t v112 = COSEKey.type.getter();
      type metadata accessor for COSEKeyKTYType(0);
      _print_unlocked<A, B>(_:_:)();
      unint64_t v43 = v103;
      uint64_t v66 = v57;
      (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v96);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      unint64_t v67 = v56;
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v67, v66);
  }
  return v43;
}

uint64_t sub_100054EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  uint64_t v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DIPSignpost();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v35 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v35 - v15;
  defaultLogger()();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "PresentmentSessionCryptor encryptResponsePayload", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v16, v7);
  uint64_t v21 = v43;
  if (sub_10005326C() == 1)
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    unint64_t v25 = (unint64_t)v44;
    if (v24)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Session encryption is disabled; no need to encrypt response payload",
        v26,
        2u);
      swift_slowDealloc();
    }

    v20(v14, v7);
    uint64_t v27 = v45;
    sub_10000354C(v45, v25);
  }
  else
  {
    static IDCSSignposts.presentmentEncryptResponse.getter();
    os_log_type_t v28 = v41;
    DIPSignpost.init(_:)();
    if (*(void *)(v21 + 168))
    {
      swift_retain();
      uint64_t v29 = v42;
      uint64_t v30 = ISO18013SessionCryptarch.encrypt(data:)();
      if (!v29)
      {
        uint64_t v32 = v30;
        uint64_t v33 = defaultLogger()();
        uint64_t v44 = &v35;
        __chkstk_darwin(v33);
        uint64_t v45 = v32;
        Logger.sensitive(_:)();
        swift_release();
        v20(v11, v7);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        uint64_t v27 = v45;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
        return v27;
      }
      swift_release();
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v36 + 104))(v38, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v37);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    uint64_t v31 = v39;
    uint64_t v27 = v40;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v27);
  }
  return v27;
}

unint64_t sub_10005547C()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000014;
}

uint64_t sub_10005551C()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PresentmentSessionCryptor()
{
  return self;
}

uint64_t sub_100055578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C1A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000555E0()
{
  return sub_10005547C();
}

uint64_t sub_1000555E8(uint64_t a1, unint64_t a2)
{
  unint64_t v82 = a2;
  uint64_t v74 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  __chkstk_darwin(v2);
  uint64_t v87 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006CC8(&qword_1001C1A90);
  __chkstk_darwin(v4 - 8);
  unint64_t v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006CC8(&qword_1001C0B68);
  __chkstk_darwin(v6 - 8);
  uint64_t v66 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for COSEKey();
  uint64_t v67 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  Swift::String v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for ISO18013SessionCryptarch.Curve();
  uint64_t v79 = *(void *)(v81 - 8);
  uint64_t v9 = __chkstk_darwin(v81);
  uint64_t v73 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v72 = (char *)&v63 - v11;
  uint64_t v80 = type metadata accessor for ISO18013SessionCryptarch.Variant();
  uint64_t v78 = *(void *)(v80 - 8);
  uint64_t v12 = __chkstk_darwin(v80);
  uint64_t v70 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v71 = (char *)&v63 - v14;
  uint64_t v15 = type metadata accessor for ISO18013SessionCryptarch.Role();
  uint64_t v76 = *(void *)(v15 - 8);
  uint64_t v77 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  id v69 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  Swift::String v68 = (char *)&v63 - v18;
  uint64_t v19 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v19 - 8);
  uint64_t v20 = type metadata accessor for DIPSignpost();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  os_log_type_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  os_log_type_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v84 = v23;
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "PresentmentSessionCryptor generateTransportKey", v30, 2u);
    os_log_type_t v23 = v84;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  static IDCSSignposts.presentmentGenerateTransportKey.getter();
  DIPSignpost.init(_:)();
  uint64_t v31 = v88;
  unint64_t v32 = sub_10005326C();
  if (sub_10005366C(v32) && (uint64_t v33 = v31, !*(void *)(v31 + 168)))
  {
    uint64_t v63 = v20;
    uint64_t v37 = *(void (**)(char *, void, uint64_t))(v76 + 104);
    uint64_t v38 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.standard(_:);
    if (v32 == 3) {
      uint64_t v38 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.ACWG(_:);
    }
    if (v32 == 2) {
      uint64_t v39 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.UA(_:);
    }
    else {
      uint64_t v39 = v38;
    }
    uint64_t v40 = (void (**)(char *, void, uint64_t))(v78 + 104);
    uint64_t v41 = (void (**)(char *, void, uint64_t))(v79 + 104);
    unint64_t v42 = v82;
    if (v82 >> 60 == 15)
    {
      uint64_t v84 = v23;
      v37(v69, enum case for ISO18013SessionCryptarch.Role.device(_:), v77);
      (*v40)(v70, *v39, v80);
      (*v41)(v73, enum case for ISO18013SessionCryptarch.Curve.P256(_:), v81);
      type metadata accessor for ISO18013SessionCryptarch();
      swift_allocObject();
      uint64_t v43 = ISO18013SessionCryptarch.init(role:variant:curve:)();
      uint64_t v44 = v83;
    }
    else
    {
      v37(v68, enum case for ISO18013SessionCryptarch.Role.device(_:), v77);
      (*v40)(v71, *v39, v80);
      (*v41)(v72, enum case for ISO18013SessionCryptarch.Curve.P256(_:), v81);
      type metadata accessor for ISO18013SessionCryptarch();
      swift_allocObject();
      sub_10000354C(v74, v42);
      uint64_t v45 = v83;
      uint64_t v46 = ISO18013SessionCryptarch.init(role:curve:variant:localKey:)();
      uint64_t v44 = v45;
      if (v45)
      {
        uint64_t v20 = v63;
        goto LABEL_6;
      }
      uint64_t v43 = v46;
      uint64_t v84 = v23;
    }
    uint64_t v47 = ISO18013SessionCryptarch.publicKey.getter();
    uint64_t v20 = v63;
    if (v48 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v85 + 104))(v87, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v86);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_release();
    }
    else
    {
      uint64_t v49 = v47;
      unint64_t v50 = v48;
      uint64_t v83 = v21;
      *(void *)(v33 + 168) = v43;
      swift_retain();
      swift_release();
      sub_10000354C(v49, v50);
      uint64_t v51 = (uint64_t)v66;
      COSEKey.init(ec2CurveIdentifier:publicKey:)();
      uint64_t v52 = v67;
      uint64_t v53 = v75;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v51, 1, v75) == 1)
      {
        sub_100014BBC(v51, &qword_1001C0B68);
        (*(void (**)(char *, void, uint64_t))(v85 + 104))(v87, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v86);
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_release();
        sub_100009764(v49, v50);
      }
      else
      {
        uint64_t v87 = (char *)v43;
        unint64_t v54 = v65;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v65, v51, v53);
        type metadata accessor for CBOREncoder();
        swift_allocObject();
        CBOREncoder.init()();
        uint64_t v55 = *(void *)(v33 + 112);
        uint64_t v56 = type metadata accessor for ISO18013PresentmentType();
        uint64_t v57 = *(void *)(v56 - 8);
        unint64_t v58 = (unsigned int *)&enum case for ISO18013PresentmentType.digital(_:);
        if (v55 != 1) {
          unint64_t v58 = (unsigned int *)&enum case for ISO18013PresentmentType.physical(_:);
        }
        uint64_t v59 = v64;
        (*(void (**)(char *, void, uint64_t))(*(void *)(v56 - 8) + 104))(v64, *v58, v56);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v56);
        uint64_t v60 = v75;
        CBOREncoder.presentmentType.setter();
        sub_100056460((unint64_t *)&unk_1001C0BD0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
        uint64_t v61 = dispatch thunk of CBOREncoder.encode<A>(_:)();
        if (!v44)
        {
          uint64_t v34 = v61;
          (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v60);
          swift_release();
          sub_100009764(v49, v50);
          swift_release();
          unint64_t v62 = v84;
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v62, v63);
          return v34;
        }
        (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v60);
        swift_release();
        sub_100009764(v49, v50);
        swift_release();
        uint64_t v20 = v63;
      }
      uint64_t v21 = v83;
    }
    os_log_type_t v23 = v84;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v85 + 104))(v87, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v86);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
LABEL_6:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v34 = v21 + 8;
  v35(v23, v20);
  return v34;
}

uint64_t sub_100056460(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000564A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000565CC, 0, 0);
}

uint64_t sub_1000565CC()
{
  defaultLogger()();
  Swift::String v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore replacePayload", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[7];
  uint64_t v17 = v0[6];
  uint64_t v9 = v0[4];
  unint64_t v8 = v0[5];
  uint64_t v11 = v0[2];
  uint64_t v10 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v12._object = (void *)0x800000010017CE70;
  v12._uint64_t countAndFlagsBits = 0xD000000000000014;
  debugLogFootprint(_:)(v12);
  uint64_t v13 = (void *)swift_allocObject();
  v0[14] = v13;
  v13[2] = v7;
  v13[3] = v11;
  v13[4] = v10;
  v13[5] = v9;
  v13[6] = v8;
  v13[7] = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000354C(v9, v8);
  uint64_t v14 = swift_allocObject();
  v0[15] = v14;
  *(void *)(v14 + 16) = &unk_1001C1AA8;
  *(void *)(v14 + 24) = v13;
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[16] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000567F0;
  return AsyncCoreDataContainer.write<A>(_:)(v15, &unk_1001C1AB0, v14, (char *)&type metadata for () + 8);
}

uint64_t sub_1000567F0()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000569A4;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_100056914;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100056914()
{
  v1._object = (void *)0x800000010017CF20;
  v1._uint64_t countAndFlagsBits = 0xD000000000000012;
  debugLogFootprint(_:)(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000569A4()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  v4._object = (void *)0x800000010017CF20;
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  debugLogFootprint(_:)(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100056B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[30] = a7;
  v8[31] = a8;
  v8[29] = a6;
  v8[27] = a4;
  v8[28] = a5;
  v8[25] = a2;
  v8[26] = a3;
  uint64_t v15 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v8[32] = v15;
  v8[33] = *(void *)(v15 - 8);
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for PayloadMetadata(0);
  v8[36] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[37] = v17;
  v8[38] = *(void *)(v17 + 64);
  v8[39] = swift_task_alloc();
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  v8[42] = swift_task_alloc();
  v8[43] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Logger();
  v8[44] = v18;
  v8[45] = *(void *)(v18 - 8);
  v8[46] = swift_task_alloc();
  v8[47] = swift_task_alloc();
  v8[48] = swift_task_alloc();
  sub_100006CC8(&qword_1001C1AB8);
  v8[49] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for ISO18013JumboPackage();
  v8[50] = v19;
  v8[51] = *(void *)(v19 - 8);
  v8[52] = swift_task_alloc();
  uint64_t v20 = (void *)swift_task_alloc();
  v8[53] = v20;
  *uint64_t v20 = v8;
  v20[1] = sub_100056E74;
  return sub_10005AAC0((uint64_t)(v8 + 14), a4, a5, a6, a7, a8, a2);
}

uint64_t sub_100056E74()
{
  uint64_t v2 = (_OWORD *)*v1;
  uint64_t v3 = (_OWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v4 = (uint64_t (*)(void))*((void *)v3 + 1);
    return v4();
  }
  else
  {
    long long v6 = v2[9];
    v2[27] = v2[8];
    v2[28] = v6;
    return _swift_task_switch(sub_10005705C, 0, 0);
  }
}

uint64_t sub_10005705C()
{
  sub_100037944(v0 + 112, v0 + 64, &qword_1001C1AC8);
  if (*(void *)(v0 + 88) == 1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    long long v3 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v3;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    uint64_t v4 = swift_allocObject();
    *(void *)(v0 + 464) = v4;
    *(_OWORD *)(v4 + 16) = xmmword_100176E40;
    sub_100037944(v0 + 16, v0 + 176, &qword_1001C1AD0);
    sub_100037944(v0 + 176, v0 + 160, &qword_1001C1AD0);
    if (*(unsigned char *)(v0 + 168))
    {
      unint64_t v5 = *(void *)(v0 + 240);
      switch(v5 >> 62)
      {
        case 1uLL:
          int v10 = *(_DWORD *)(v0 + 232);
          int v11 = *(_DWORD *)(v0 + 236);
          BOOL v12 = __OFSUB__(v11, v10);
          LODWORD(v6) = v11 - v10;
          if (v12)
          {
            __break(1u);
LABEL_31:
            __break(1u);
            JUMPOUT(0x100057744);
          }
          uint64_t v6 = (int)v6;
LABEL_14:
          if (*(unsigned char *)(v0 + 25)) {
            goto LABEL_27;
          }
LABEL_17:
          defaultLogger()();
          uint64_t v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v15, v16))
          {
            uint64_t v17 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v17 = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, v16, "Inserting biometric encrypted payload (legacy flow)", v17, 2u);
            swift_slowDealloc();
          }
          uint64_t v18 = *(void *)(v0 + 376);
          uint64_t v19 = *(void *)(v0 + 352);
          uint64_t v20 = *(void *)(v0 + 360);
          uint64_t v21 = *(void *)(v0 + 288);
          uint64_t v22 = *(void *)(v0 + 296);

          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
          sub_100006CC8(&qword_1001C1AD8);
          *(void *)(v0 + 776) = swift_allocBox();
          *(void *)(v0 + 784) = v23;
          uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
          *(void *)(v0 + 792) = v24;
          *(void *)(v0 + 800) = (v22 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          v24(v23, 1, 1, v21);
          if (*(unsigned char *)(v0 + 25))
          {
            uint64_t v38 = *(void *)(v0 + 208) + 72;
            uint64_t v39 = *(void *)(v0 + 32);
            uint64_t v40 = *(void *)(v0 + 40);
            uint64_t v41 = *(void *)(v0 + 48);
            sub_100063724(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456));
            unint64_t v42 = (void *)swift_task_alloc();
            *(void *)(v0 + 808) = v42;
            *unint64_t v42 = v0;
            v42[1] = sub_100059654;
            uint64_t v43 = *(void *)(v0 + 312);
            uint64_t v44 = *(void *)(v0 + 240);
            uint64_t v45 = *(void *)(v0 + 248);
            uint64_t v46 = *(void *)(v0 + 232);
            uint64_t result = sub_10005C148(v43, v38, v46, v44, v45, v39, v40, v41);
          }
          else
          {
            uint64_t v25 = *(void *)(v0 + 776);
            uint64_t v62 = *(void *)(v0 + 464);
            uint64_t v66 = *(void *)(v0 + 272);
            uint64_t v63 = *(void *)(v0 + 264);
            uint64_t v64 = *(void *)(v0 + 256);
            unint64_t v26 = *(void *)(v0 + 240);
            uint64_t v27 = *(void *)(v0 + 232);
            uint64_t v60 = *(void *)(v0 + 224);
            uint64_t v61 = *(void *)(v0 + 248);
            uint64_t v29 = *(void *)(v0 + 208);
            uint64_t v28 = *(void *)(v0 + 216);
            uint64_t v30 = *(void *)(v0 + 200);
            uint64_t v31 = swift_allocObject();
            *(void *)(v0 + 832) = v31;
            *(void *)(v31 + 16) = v29;
            *(void *)(v31 + 24) = v30;
            *(void *)(v31 + 32) = v27;
            *(void *)(v31 + 40) = v26;
            *(void *)(v31 + 48) = v25;
            *(void *)(v31 + 56) = 0;
            *(void *)(v31 + 64) = v28;
            *(void *)(v31 + 72) = v60;
            long long v32 = *(_OWORD *)(v0 + 32);
            *(_OWORD *)(v31 + 80) = *(_OWORD *)(v0 + 16);
            *(_OWORD *)(v31 + 96) = v32;
            *(_OWORD *)(v31 + 112) = *(_OWORD *)(v0 + 48);
            *(void *)(v31 + 128) = v61;
            *(void *)(v31 + 136) = v62;
            sub_1000637A8((void *)(v0 + 112), sub_100063704);
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            sub_10000354C(v27, v26);
            uint64_t v33 = swift_allocObject();
            *(void *)(v0 + 840) = v33;
            *(void *)(v33 + 16) = sub_1000636C4;
            *(void *)(v33 + 24) = v31;
            uint64_t v34 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
            uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 104);
            swift_retain();
            swift_retain();
            v35(v66, v34, v64);
            swift_retain();
            uint64_t v36 = (void *)swift_task_alloc();
            *(void *)(v0 + 848) = v36;
            *uint64_t v36 = v0;
            v36[1] = sub_1000599F4;
            uint64_t v37 = *(void *)(v0 + 272);
            uint64_t result = NSManagedObjectContext.perform<A>(schedule:_:)(v36, v37, sub_10004A390, v33, (char *)&type metadata for () + 8);
          }
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(*(void *)(v0 + 232) + 16);
          uint64_t v14 = *(void *)(*(void *)(v0 + 232) + 24);
          BOOL v12 = __OFSUB__(v14, v13);
          uint64_t v6 = v14 - v13;
          if (!v12) {
            goto LABEL_14;
          }
          goto LABEL_31;
        case 3uLL:
          if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
            goto LABEL_17;
          }
          uint64_t v6 = 0;
LABEL_27:
          *(void *)(v0 + 512) = v6;
          uint64_t v47 = *(void *)(v0 + 448);
          unint64_t v48 = *(void *)(v0 + 456);
          uint64_t v49 = *(void *)(v0 + 432);
          uint64_t v50 = *(void *)(v0 + 440);
          uint64_t v52 = *(void *)(v0 + 32);
          uint64_t v51 = *(void *)(v0 + 40);
          *(void *)(v0 + 520) = v52;
          *(void *)(v0 + 528) = v51;
          uint64_t v53 = *(void *)(v0 + 48);
          uint64_t v54 = *(void *)(v0 + 56);
          *(void *)(v0 + 536) = v53;
          *(void *)(v0 + 544) = v54;
          sub_100063724(v49, v50, v47, v48);
          uint64_t v55 = (void *)swift_task_alloc();
          *(void *)(v0 + 552) = v55;
          *uint64_t v55 = v0;
          v55[1] = sub_100057DA0;
          uint64_t v56 = *(void *)(v0 + 392);
          uint64_t v57 = *(void *)(v0 + 240);
          uint64_t v58 = *(void *)(v0 + 248);
          uint64_t v59 = *(void *)(v0 + 232);
          uint64_t result = sub_10005B360(v56, v59, v57, v52, v51, v53, v54, v58);
          break;
        default:
          uint64_t v6 = BYTE6(v5);
          goto LABEL_14;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v0 + 160);
      *(void *)(v0 + 472) = v7;
      unint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v8;
      *unint64_t v8 = v0;
      v8[1] = sub_100057754;
      uint64_t v9 = *(void *)(v0 + 208);
      v8[10] = v7;
      v8[11] = v9;
      return _swift_task_switch(sub_10005B004, 0, 0);
    }
  }
  return result;
}

uint64_t sub_100057754(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 488) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100059DE0;
  }
  else
  {
    *(void *)(v6 + 496) = a2;
    *(void *)(v6 + 504) = a1;
    uint64_t v7 = sub_100057888;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100057888()
{
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  *(int8x16_t *)(v1 + 16) = vextq_s8(*(int8x16_t *)(v0 + 496), *(int8x16_t *)(v0 + 496), 8uLL);
  sub_100009764(v2, v3);
  unint64_t v4 = *(void *)(v0 + 240);
  switch(v4 >> 62)
  {
    case 1uLL:
      int v6 = *(_DWORD *)(v0 + 232);
      int v7 = *(_DWORD *)(v0 + 236);
      BOOL v8 = __OFSUB__(v7, v6);
      LODWORD(v5) = v7 - v6;
      if (v8)
      {
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x100057D90);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (*(unsigned char *)(v0 + 25)) {
        goto LABEL_19;
      }
LABEL_9:
      defaultLogger()();
      int v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Inserting biometric encrypted payload (legacy flow)", v13, 2u);
        swift_slowDealloc();
      }
      uint64_t v14 = *(void *)(v0 + 376);
      uint64_t v15 = *(void *)(v0 + 352);
      uint64_t v16 = *(void *)(v0 + 360);
      uint64_t v17 = *(void *)(v0 + 288);
      uint64_t v18 = *(void *)(v0 + 296);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      sub_100006CC8(&qword_1001C1AD8);
      *(void *)(v0 + 776) = swift_allocBox();
      *(void *)(v0 + 784) = v19;
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
      *(void *)(v0 + 792) = v20;
      *(void *)(v0 + 800) = (v18 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v20(v19, 1, 1, v17);
      if (*(unsigned char *)(v0 + 25))
      {
        uint64_t v36 = *(void *)(v0 + 208) + 72;
        uint64_t v37 = *(void *)(v0 + 32);
        uint64_t v38 = *(void *)(v0 + 40);
        uint64_t v39 = *(void *)(v0 + 48);
        sub_100063724(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456));
        uint64_t v40 = (void *)swift_task_alloc();
        *(void *)(v0 + 808) = v40;
        *uint64_t v40 = v0;
        v40[1] = sub_100059654;
        uint64_t v41 = *(void *)(v0 + 312);
        uint64_t v42 = *(void *)(v0 + 240);
        uint64_t v43 = *(void *)(v0 + 248);
        uint64_t v44 = *(void *)(v0 + 232);
        uint64_t result = sub_10005C148(v41, v36, v44, v42, v43, v37, v38, v39);
      }
      else
      {
        uint64_t v21 = *(void *)(v0 + 776);
        uint64_t v22 = *(void *)(v0 + 464);
        uint64_t v63 = *(void *)(v0 + 272);
        uint64_t v60 = *(void *)(v0 + 264);
        uint64_t v61 = *(void *)(v0 + 256);
        unint64_t v23 = *(void *)(v0 + 240);
        uint64_t v59 = *(void *)(v0 + 248);
        uint64_t v25 = *(void *)(v0 + 224);
        uint64_t v24 = *(void *)(v0 + 232);
        uint64_t v26 = *(void *)(v0 + 208);
        uint64_t v27 = *(void *)(v0 + 216);
        uint64_t v28 = *(void *)(v0 + 200);
        uint64_t v29 = swift_allocObject();
        *(void *)(v0 + 832) = v29;
        *(void *)(v29 + 16) = v26;
        *(void *)(v29 + 24) = v28;
        *(void *)(v29 + 32) = v24;
        *(void *)(v29 + 40) = v23;
        *(void *)(v29 + 48) = v21;
        *(void *)(v29 + 56) = 0;
        *(void *)(v29 + 64) = v27;
        *(void *)(v29 + 72) = v25;
        long long v30 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v29 + 80) = *(_OWORD *)(v0 + 16);
        *(_OWORD *)(v29 + 96) = v30;
        *(_OWORD *)(v29 + 112) = *(_OWORD *)(v0 + 48);
        *(void *)(v29 + 128) = v59;
        *(void *)(v29 + 136) = v22;
        sub_1000637A8((void *)(v0 + 112), sub_100063704);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_10000354C(v24, v23);
        uint64_t v31 = swift_allocObject();
        *(void *)(v0 + 840) = v31;
        *(void *)(v31 + 16) = sub_1000636C4;
        *(void *)(v31 + 24) = v29;
        uint64_t v32 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
        uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 104);
        swift_retain();
        swift_retain();
        v33(v63, v32, v61);
        swift_retain();
        uint64_t v34 = (void *)swift_task_alloc();
        *(void *)(v0 + 848) = v34;
        void *v34 = v0;
        v34[1] = sub_1000599F4;
        uint64_t v35 = *(void *)(v0 + 272);
        uint64_t result = NSManagedObjectContext.perform<A>(schedule:_:)(v34, v35, sub_10004A390, v31, (char *)&type metadata for () + 8);
      }
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(*(void *)(v0 + 232) + 16);
      uint64_t v10 = *(void *)(*(void *)(v0 + 232) + 24);
      BOOL v8 = __OFSUB__(v10, v9);
      uint64_t v5 = v10 - v9;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_23;
    case 3uLL:
      if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v5 = 0;
LABEL_19:
      *(void *)(v0 + 512) = v5;
      uint64_t v45 = *(void *)(v0 + 448);
      unint64_t v46 = *(void *)(v0 + 456);
      uint64_t v47 = *(void *)(v0 + 432);
      uint64_t v48 = *(void *)(v0 + 440);
      uint64_t v50 = *(void *)(v0 + 32);
      uint64_t v49 = *(void *)(v0 + 40);
      *(void *)(v0 + 520) = v50;
      *(void *)(v0 + 528) = v49;
      uint64_t v51 = *(void *)(v0 + 48);
      uint64_t v52 = *(void *)(v0 + 56);
      *(void *)(v0 + 536) = v51;
      *(void *)(v0 + 544) = v52;
      sub_100063724(v47, v48, v45, v46);
      uint64_t v53 = (void *)swift_task_alloc();
      *(void *)(v0 + 552) = v53;
      *uint64_t v53 = v0;
      v53[1] = sub_100057DA0;
      uint64_t v54 = *(void *)(v0 + 392);
      uint64_t v55 = *(void *)(v0 + 240);
      uint64_t v56 = *(void *)(v0 + 248);
      uint64_t v57 = *(void *)(v0 + 232);
      uint64_t result = sub_10005B360(v54, v57, v55, v50, v49, v51, v52, v56);
      break;
    default:
      uint64_t v5 = BYTE6(v4);
      goto LABEL_6;
  }
  return result;
}

uint64_t sub_100057DA0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = sub_10005A468;
  }
  else
  {
    sub_1000637A8((void *)(v2 + 112), sub_1000637E8);
    unint64_t v3 = sub_100057ED0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100057ED0()
{
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 392);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100014BBC(v3, &qword_1001C1AB8);
    defaultLogger()();
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Inserting biometric encrypted payload (legacy flow)", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 376);
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 296);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_100006CC8(&qword_1001C1AD8);
    *(void *)(v0 + 776) = swift_allocBox();
    *(void *)(v0 + 784) = v12;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    *(void *)(v0 + 792) = v13;
    *(void *)(v0 + 800) = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v13(v12, 1, 1, v10);
    if ((*(unsigned char *)(v0 + 25) & 1) == 0)
    {
      uint64_t v14 = *(void *)(v0 + 776);
      uint64_t v72 = *(void *)(v0 + 464);
      uint64_t v73 = *(void *)(v0 + 264);
      uint64_t v74 = *(void *)(v0 + 256);
      uint64_t v75 = *(void *)(v0 + 272);
      unint64_t v15 = *(void *)(v0 + 240);
      uint64_t v71 = *(void *)(v0 + 248);
      uint64_t v17 = *(void *)(v0 + 224);
      uint64_t v16 = *(void *)(v0 + 232);
      uint64_t v18 = *(void *)(v0 + 208);
      uint64_t v19 = *(void *)(v0 + 216);
      uint64_t v20 = *(void *)(v0 + 200);
      uint64_t v21 = swift_allocObject();
      *(void *)(v0 + 832) = v21;
      *(void *)(v21 + 16) = v18;
      *(void *)(v21 + 24) = v20;
      *(void *)(v21 + 32) = v16;
      *(void *)(v21 + 40) = v15;
      *(void *)(v21 + 48) = v14;
      *(void *)(v21 + 56) = 0;
      *(void *)(v21 + 64) = v19;
      *(void *)(v21 + 72) = v17;
      long long v22 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v21 + 80) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v21 + 96) = v22;
      *(_OWORD *)(v21 + 112) = *(_OWORD *)(v0 + 48);
      *(void *)(v21 + 128) = v71;
      *(void *)(v21 + 136) = v72;
      sub_1000637A8((void *)(v0 + 112), sub_100063704);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10000354C(v16, v15);
      uint64_t v23 = swift_allocObject();
      *(void *)(v0 + 840) = v23;
      *(void *)(v23 + 16) = sub_1000636C4;
      *(void *)(v23 + 24) = v21;
      uint64_t v24 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 104);
      swift_retain();
      swift_retain();
      v25(v75, v24, v74);
      swift_retain();
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 848) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_1000599F4;
      uint64_t v27 = *(void *)(v0 + 272);
      return NSManagedObjectContext.perform<A>(schedule:_:)(v26, v27, sub_10004A390, v23, (char *)&type metadata for () + 8);
    }
    uint64_t v46 = *(void *)(v0 + 208) + 72;
    uint64_t v47 = *(void *)(v0 + 32);
    uint64_t v48 = *(void *)(v0 + 40);
    uint64_t v49 = *(void *)(v0 + 48);
    sub_100063724(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456));
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v50;
    *uint64_t v50 = v0;
    v50[1] = sub_100059654;
    uint64_t v51 = *(void *)(v0 + 312);
    uint64_t v52 = *(void *)(v0 + 240);
    uint64_t v53 = *(void *)(v0 + 248);
    uint64_t v54 = *(void *)(v0 + 232);
    uint64_t v55 = v46;
    uint64_t v56 = v47;
    uint64_t v57 = v48;
    uint64_t v58 = v49;
    goto LABEL_19;
  }
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v0 + 416), v3, v2);
  defaultLogger()();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    long long v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Inserting standard payload", v30, 2u);
    swift_slowDealloc();
  }
  uint64_t v31 = *(void *)(v0 + 384);
  uint64_t v32 = *(void *)(v0 + 352);
  uint64_t v33 = *(void *)(v0 + 360);

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  *(void *)(v0 + 568) = *(void *)(ISO18013JumboPackage.packages.getter() + 16);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 0xD000000000000021;
  v34._object = (void *)0x800000010017CF40;
  debugLogFootprint(_:)(v34);
  uint64_t v35 = (void *)ISO18013JumboPackage.packages.getter();
  *(void *)(v0 + 576) = v35;
  uint64_t v36 = v35[2];
  *(void *)(v0 + 584) = v36;
  if (v36)
  {
    *(_DWORD *)(v0 + 172) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    uint64_t v37 = *(void *)(v0 + 560);
    *(_OWORD *)(v0 + 592) = 0u;
    *(_OWORD *)(v0 + 608) = 0u;
    *(_OWORD *)(v0 + 624) = 0u;
    unint64_t v38 = *(void *)(v0 + 248);
    uint64_t v39 = v35[4];
    *(void *)(v0 + 640) = v39;
    unint64_t v40 = v35[5];
    *(void *)(v0 + 648) = v40;
    sub_10000354C(v39, v40);
    uint64_t v41 = sub_100163544(v38);
    *(void *)(v0 + 656) = v41;
    if (!v37)
    {
      uint64_t v62 = v41;
      uint64_t v63 = *(void *)(v0 + 208);
      sub_1000637A8((void *)(v0 + 112), sub_100063704);
      uint64_t v64 = (void *)swift_task_alloc();
      *(void *)(v0 + 664) = v64;
      *uint64_t v64 = v0;
      v64[1] = sub_1000586CC;
      uint64_t v55 = v63 + 72;
      uint64_t v58 = *(void *)(v0 + 536);
      uint64_t v57 = *(void *)(v0 + 528);
      uint64_t v56 = *(void *)(v0 + 520);
      uint64_t v51 = *(void *)(v0 + 336);
      uint64_t v54 = v39;
      uint64_t v52 = v40;
      uint64_t v53 = v62;
LABEL_19:
      return sub_10005C148(v51, v55, v54, v52, v53, v56, v57, v58);
    }
    uint64_t v42 = *(void *)(v0 + 408);
    uint64_t v43 = *(void *)(v0 + 416);
    uint64_t v44 = *(void *)(v0 + 400);
    sub_1000638FC(0, 0, 0);
    sub_1000035EC(v39, v40);
    sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
    return v45();
  }
  else
  {
    *(void *)(v0 + 712) = 0;
    *(_OWORD *)(v0 + 680) = 0u;
    *(_OWORD *)(v0 + 696) = 0u;
    uint64_t v59 = *(void *)(v0 + 528);
    swift_bridgeObjectRelease();
    v60._object = (void *)0x800000010017CF70;
    v60._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    debugLogFootprint(_:)(v60);
    if (v59)
    {
      uint64_t v61 = *(void *)(v0 + 520);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v61 = 0;
    }
    uint64_t v65 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v65;
    void *v65 = v0;
    v65[1] = sub_100059338;
    uint64_t v66 = *(void *)(v0 + 528);
    uint64_t v68 = *(void *)(v0 + 216);
    uint64_t v67 = *(void *)(v0 + 224);
    uint64_t v69 = *(void *)(v0 + 200);
    return sub_10005F46C(v68, v67, v69, v61, v66);
  }
}

uint64_t sub_1000586CC(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  os_log_type_t v5 = (void *)(*(void *)v2 + 112);
  *(void *)(*(void *)v2 + 672) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[76];
    uint64_t v7 = v4[75];
    uint64_t v8 = v4[74];
    swift_bridgeObjectRelease();
    sub_1000638FC(v8, v7, v6);
    sub_1000637A8(v5, sub_1000637E8);
    uint64_t v9 = sub_10005A5A8;
  }
  else
  {
    v4[90] = a1;
    sub_1000637A8(v5, sub_1000637E8);
    uint64_t v9 = sub_100058870;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100058870()
{
  uint64_t v30 = *(void *)(v0 + 720);
  uint64_t v32 = *(void *)(v0 + 656);
  uint64_t v26 = *(void *)(v0 + 640);
  unint64_t v27 = *(void *)(v0 + 648);
  unsigned int v36 = *(_DWORD *)(v0 + 172);
  uint64_t v31 = *(void *)(v0 + 464);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v23 = v2;
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v35 = *(void *)(v0 + 280);
  uint64_t v33 = *(void *)(v0 + 264);
  uint64_t v34 = *(void *)(v0 + 256);
  uint64_t v28 = *(void *)(v0 + 232);
  unint64_t v29 = *(void *)(v0 + 240);
  uint64_t v24 = *(void *)(v0 + 216);
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v37 = *(void *)(v0 + 208);
  sub_100063854(*(void *)(v0 + 336), v1);
  sub_100063940(v1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = (v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (void *)swift_allocObject();
  *(void *)(v0 + 728) = v12;
  v12[2] = v37;
  uint64_t v12[3] = v5;
  v12[4] = v26;
  v12[5] = v27;
  sub_100063854(v23, (uint64_t)v12 + v6);
  *(void *)((char *)v12 + v7) = v30;
  uint64_t v13 = (void *)((char *)v12 + v8);
  *uint64_t v13 = v24;
  v13[1] = v25;
  uint64_t v14 = (_OWORD *)((char *)v12 + v9);
  long long v15 = *(_OWORD *)(v0 + 48);
  long long v16 = *(_OWORD *)(v0 + 16);
  v14[1] = *(_OWORD *)(v0 + 32);
  v14[2] = v15;
  *uint64_t v14 = v16;
  *(void *)((char *)v12 + v10) = v32;
  uint64_t v17 = (void *)((char *)v12 + v11);
  *uint64_t v17 = v28;
  v17[1] = v29;
  *(void *)((char *)v12 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)) = v31;
  sub_1000637A8((void *)(v0 + 112), sub_100063704);
  sub_10000354C(v26, v27);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000354C(v28, v29);
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 736) = v18;
  *(void *)(v18 + 16) = sub_100063BA0;
  *(void *)(v18 + 24) = v12;
  uint64_t v19 = *(void (**)(uint64_t, void, uint64_t))(v33 + 104);
  swift_retain();
  v19(v35, v36, v34);
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100058B44;
  uint64_t v21 = *(void *)(v0 + 280);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v20, v21, sub_100064FB8, v18, (char *)&type metadata for () + 8);
}

uint64_t sub_100058B44()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 752) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[33] + 8))(v2[35], v2[32]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100059180;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_100058CC0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100058CC0()
{
  uint64_t v1 = v0[76];
  sub_100063940(v0[43], v0[40]);
  unint64_t v2 = v0[81];
  if (v1)
  {
    uint64_t v3 = v0[76];
    uint64_t v4 = v0[43];
    uint64_t v5 = v0[40];
    sub_1000035EC(v0[80], v0[81]);
    sub_100063C98(v5);
    sub_100063C98(v4);
    uint64_t v6 = v0[78];
    uint64_t v7 = v0[77];
    uint64_t v8 = v0[75];
    unint64_t v2 = v0[74];
  }
  else
  {
    switch(v2 >> 62)
    {
      case 1uLL:
        uint64_t v9 = v0[80];
        sub_1000035EC(v9, v0[81]);
        if (__OFSUB__(HIDWORD(v9), v9))
        {
          __break(1u);
          JUMPOUT(0x100059170);
        }
        unint64_t v2 = HIDWORD(v9) - (int)v9;
        break;
      case 2uLL:
        uint64_t v10 = v0[80];
        uint64_t v12 = *(void *)(v10 + 16);
        uint64_t v11 = *(void *)(v10 + 24);
        sub_1000035EC(v10, v0[81]);
        unint64_t v2 = v11 - v12;
        if (__OFSUB__(v11, v12))
        {
          __break(1u);
          goto LABEL_10;
        }
        break;
      case 3uLL:
LABEL_10:
        sub_1000035EC(v0[80], v2);
        unint64_t v2 = 0;
        break;
      default:
        sub_1000035EC(v0[80], v0[81]);
        unint64_t v2 = BYTE6(v2);
        break;
    }
    uint64_t v13 = (uint64_t *)v0[40];
    uint64_t v14 = v0[36];
    sub_100063C98(v0[43]);
    uint64_t v8 = *v13;
    uint64_t v3 = v13[1];
    long long v15 = (uint64_t *)((char *)v13 + *(int *)(v14 + 40));
    uint64_t v7 = *v15;
    uint64_t v6 = v15[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100063C98((uint64_t)v13);
  }
  uint64_t v16 = v0[79] + 1;
  if (v16 == v0[73])
  {
    v0[89] = v6;
    v0[88] = v7;
    v0[87] = v3;
    v0[86] = v8;
    v0[85] = v2;
    uint64_t v17 = v0[66];
    swift_bridgeObjectRelease();
    v18._object = (void *)0x800000010017CF70;
    v18._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    debugLogFootprint(_:)(v18);
    if (v17)
    {
      uint64_t v19 = v0[65];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v19 = 0;
    }
    unint64_t v29 = (void *)swift_task_alloc();
    v0[95] = v29;
    *unint64_t v29 = v0;
    v29[1] = sub_100059338;
    uint64_t v30 = v0[66];
    uint64_t v32 = v0[27];
    uint64_t v31 = v0[28];
    uint64_t v33 = v0[25];
    return sub_10005F46C(v32, v31, v33, v19, v30);
  }
  else
  {
    uint64_t v43 = v0 + 14;
    uint64_t v20 = v0[94];
    v0[79] = v16;
    v0[78] = v6;
    v0[77] = v7;
    v0[76] = v3;
    v0[75] = v8;
    v0[74] = v2;
    unint64_t v21 = v0[31];
    uint64_t v22 = v0[72] + 16 * v16;
    uint64_t v23 = *(void *)(v22 + 32);
    v0[80] = v23;
    unint64_t v24 = *(void *)(v22 + 40);
    v0[81] = v24;
    sub_10000354C(v23, v24);
    uint64_t v25 = sub_100163544(v21);
    v0[82] = v25;
    if (v20)
    {
      uint64_t v42 = v0[52];
      uint64_t v26 = v0[51];
      uint64_t v41 = v0[50];
      sub_1000638FC(v2, v8, v3);
      sub_1000035EC(v23, v24);
      sub_1000637A8(v43, sub_1000637E8);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v42, v41);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
    else
    {
      uint64_t v34 = v25;
      uint64_t v35 = v0[26];
      sub_1000637A8(v43, sub_100063704);
      unsigned int v36 = (void *)swift_task_alloc();
      v0[83] = v36;
      *unsigned int v36 = v0;
      v36[1] = sub_1000586CC;
      uint64_t v37 = v0[67];
      uint64_t v38 = v0[66];
      uint64_t v39 = v0[65];
      uint64_t v40 = v0[42];
      return sub_10005C148(v40, v35 + 72, v23, v24, v34, v39, v38, v37);
    }
  }
}

uint64_t sub_100059180()
{
  unint64_t v9 = v0[81];
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[76];
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[74];
  uint64_t v5 = v0[51];
  uint64_t v11 = v0[52];
  uint64_t v10 = v0[50];
  uint64_t v6 = v0[43];
  swift_bridgeObjectRelease();
  sub_1000638FC(v4, v3, v2);
  swift_release();
  sub_1000035EC(v1, v9);
  sub_1000637A8(v0 + 14, sub_1000637E8);
  sub_100063C98(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v10);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100059338()
{
  uint64_t v2 = *v1;
  (*v1)[96] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000638FC(v2[85], v2[86], v2[87]);
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10005A704;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100059478;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100059478()
{
  if (v0[87])
  {
    uint64_t v1 = v0[51];
    uint64_t v4 = v0[50];
    uint64_t v5 = v0[52];
    type metadata accessor for IDCSAnalytics();
    static IDCSAnalytics.sendPayloadIngestionSizeEvent(docType:issuer:overallSizeBytes:numberOfPackages:packageSizeBytes:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000637A8(v0 + 14, sub_1000637E8);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v5, v4);
  }
  else
  {
    (*(void (**)(void, void))(v0[51] + 8))(v0[52], v0[50]);
    sub_1000637A8(v0 + 14, sub_1000637E8);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100059654(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 816) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10005A850;
  }
  else
  {
    *(void *)(v4 + 824) = a1;
    sub_1000637A8((void *)(v4 + 112), sub_1000637E8);
    uint64_t v5 = sub_100059794;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100059794()
{
  uint64_t v22 = *(void *)(v0 + 824);
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
  uint64_t v2 = *(void *)(v0 + 784);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 288);
  sub_100014BBC(v2, &qword_1001C1AD8);
  sub_100063854(v3, v2);
  v1(v2, 0, 1, v4);
  uint64_t v5 = *(void *)(v0 + 776);
  uint64_t v6 = *(void *)(v0 + 464);
  uint64_t v23 = *(void *)(v0 + 264);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v25 = *(void *)(v0 + 272);
  unint64_t v7 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 248);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 832) = v13;
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = v12;
  *(void *)(v13 + 32) = v8;
  *(void *)(v13 + 40) = v7;
  *(void *)(v13 + 48) = v5;
  *(void *)(v13 + 56) = v22;
  *(void *)(v13 + 64) = v11;
  *(void *)(v13 + 72) = v9;
  long long v14 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v13 + 96) = v14;
  *(_OWORD *)(v13 + 112) = *(_OWORD *)(v0 + 48);
  *(void *)(v13 + 128) = v21;
  *(void *)(v13 + 136) = v6;
  sub_1000637A8((void *)(v0 + 112), sub_100063704);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000354C(v8, v7);
  uint64_t v15 = swift_allocObject();
  *(void *)(v0 + 840) = v15;
  *(void *)(v15 + 16) = sub_1000636C4;
  *(void *)(v15 + 24) = v13;
  uint64_t v16 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104);
  swift_retain();
  swift_retain();
  v17(v25, v16, v24);
  swift_retain();
  Swift::String v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 848) = v18;
  void *v18 = v0;
  v18[1] = sub_1000599F4;
  uint64_t v19 = *(void *)(v0 + 272);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v18, v19, sub_10004A390, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_1000599F4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 856) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[33] + 8))(v2[34], v2[32]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100059C9C;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_100059B70;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100059B70()
{
  sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100059C9C()
{
  sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100059DE0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v67 = *(void *)(v0 + 360);
    uint64_t v69 = *(void *)(v0 + 352);
    uint64_t v71 = *(void *)(v0 + 368);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    id v4 = (id)DCCredentialPayloadProtectionPolicyToString();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    *(void *)(v0 + 192) = sub_10004C3A4(v5, v7, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "replacePayload unable to fetch acl for payload protection policy %s. This may not be required for dekar payloads.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v71, v69);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 352);
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  unint64_t v11 = *(void *)(v0 + 240);
  switch(v11 >> 62)
  {
    case 1uLL:
      int v13 = *(_DWORD *)(v0 + 232);
      int v14 = *(_DWORD *)(v0 + 236);
      BOOL v15 = __OFSUB__(v14, v13);
      LODWORD(v12) = v14 - v13;
      if (v15)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x10005A458);
      }
      uint64_t v12 = (int)v12;
LABEL_9:
      if (*(unsigned char *)(v0 + 25)) {
        goto LABEL_22;
      }
LABEL_12:
      defaultLogger()();
      Swift::String v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Inserting biometric encrypted payload (legacy flow)", v20, 2u);
        swift_slowDealloc();
      }
      uint64_t v21 = *(void *)(v0 + 376);
      uint64_t v22 = *(void *)(v0 + 352);
      uint64_t v23 = *(void *)(v0 + 360);
      uint64_t v24 = *(void *)(v0 + 288);
      uint64_t v25 = *(void *)(v0 + 296);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
      sub_100006CC8(&qword_1001C1AD8);
      *(void *)(v0 + 776) = swift_allocBox();
      *(void *)(v0 + 784) = v26;
      unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
      *(void *)(v0 + 792) = v27;
      *(void *)(v0 + 800) = (v25 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v27(v26, 1, 1, v24);
      if (*(unsigned char *)(v0 + 25))
      {
        uint64_t v43 = *(void *)(v0 + 208) + 72;
        uint64_t v44 = *(void *)(v0 + 32);
        uint64_t v45 = *(void *)(v0 + 40);
        uint64_t v46 = *(void *)(v0 + 48);
        sub_100063724(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456));
        uint64_t v47 = (void *)swift_task_alloc();
        *(void *)(v0 + 808) = v47;
        void *v47 = v0;
        v47[1] = sub_100059654;
        uint64_t v48 = *(void *)(v0 + 312);
        uint64_t v49 = *(void *)(v0 + 240);
        uint64_t v50 = *(void *)(v0 + 248);
        uint64_t v51 = *(void *)(v0 + 232);
        uint64_t result = sub_10005C148(v48, v43, v51, v49, v50, v44, v45, v46);
      }
      else
      {
        uint64_t v28 = *(void *)(v0 + 776);
        uint64_t v29 = *(void *)(v0 + 464);
        uint64_t v68 = *(void *)(v0 + 264);
        uint64_t v70 = *(void *)(v0 + 256);
        uint64_t v72 = *(void *)(v0 + 272);
        unint64_t v30 = *(void *)(v0 + 240);
        uint64_t v66 = *(void *)(v0 + 248);
        uint64_t v32 = *(void *)(v0 + 224);
        uint64_t v31 = *(void *)(v0 + 232);
        uint64_t v33 = *(void *)(v0 + 208);
        uint64_t v34 = *(void *)(v0 + 216);
        uint64_t v35 = *(void *)(v0 + 200);
        uint64_t v36 = swift_allocObject();
        *(void *)(v0 + 832) = v36;
        *(void *)(v36 + 16) = v33;
        *(void *)(v36 + 24) = v35;
        *(void *)(v36 + 32) = v31;
        *(void *)(v36 + 40) = v30;
        *(void *)(v36 + 48) = v28;
        *(void *)(v36 + 56) = 0;
        *(void *)(v36 + 64) = v34;
        *(void *)(v36 + 72) = v32;
        long long v37 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v36 + 80) = *(_OWORD *)(v0 + 16);
        *(_OWORD *)(v36 + 96) = v37;
        *(_OWORD *)(v36 + 112) = *(_OWORD *)(v0 + 48);
        *(void *)(v36 + 128) = v66;
        *(void *)(v36 + 136) = v29;
        sub_1000637A8((void *)(v0 + 112), sub_100063704);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_10000354C(v31, v30);
        uint64_t v38 = swift_allocObject();
        *(void *)(v0 + 840) = v38;
        *(void *)(v38 + 16) = sub_1000636C4;
        *(void *)(v38 + 24) = v36;
        uint64_t v39 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
        uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 104);
        swift_retain();
        swift_retain();
        v40(v72, v39, v70);
        swift_retain();
        uint64_t v41 = (void *)swift_task_alloc();
        *(void *)(v0 + 848) = v41;
        void *v41 = v0;
        v41[1] = sub_1000599F4;
        uint64_t v42 = *(void *)(v0 + 272);
        uint64_t result = NSManagedObjectContext.perform<A>(schedule:_:)(v41, v42, sub_10004A390, v38, (char *)&type metadata for () + 8);
      }
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(*(void *)(v0 + 232) + 16);
      uint64_t v17 = *(void *)(*(void *)(v0 + 232) + 24);
      BOOL v15 = __OFSUB__(v17, v16);
      uint64_t v12 = v17 - v16;
      if (!v15) {
        goto LABEL_9;
      }
      goto LABEL_26;
    case 3uLL:
      if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
        goto LABEL_12;
      }
      uint64_t v12 = 0;
LABEL_22:
      *(void *)(v0 + 512) = v12;
      uint64_t v52 = *(void *)(v0 + 448);
      unint64_t v53 = *(void *)(v0 + 456);
      uint64_t v54 = *(void *)(v0 + 432);
      uint64_t v55 = *(void *)(v0 + 440);
      uint64_t v57 = *(void *)(v0 + 32);
      uint64_t v56 = *(void *)(v0 + 40);
      *(void *)(v0 + 520) = v57;
      *(void *)(v0 + 528) = v56;
      uint64_t v58 = *(void *)(v0 + 48);
      uint64_t v59 = *(void *)(v0 + 56);
      *(void *)(v0 + 536) = v58;
      *(void *)(v0 + 544) = v59;
      sub_100063724(v54, v55, v52, v53);
      Swift::String v60 = (void *)swift_task_alloc();
      *(void *)(v0 + 552) = v60;
      *Swift::String v60 = v0;
      v60[1] = sub_100057DA0;
      uint64_t v61 = *(void *)(v0 + 392);
      uint64_t v62 = *(void *)(v0 + 240);
      uint64_t v63 = *(void *)(v0 + 248);
      uint64_t v64 = *(void *)(v0 + 232);
      uint64_t result = sub_10005B360(v61, v64, v62, v57, v56, v58, v59, v63);
      break;
    default:
      uint64_t v12 = BYTE6(v11);
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_10005A468()
{
  sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
  sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005A5A8()
{
  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = v0[50];
  sub_1000035EC(v0[80], v0[81]);
  sub_1000637A8(v0 + 14, sub_1000637E8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10005A704()
{
  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = v0[50];
  sub_1000637A8(v0 + 14, sub_1000637E8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10005A850()
{
  sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
  sub_1000637A8((void *)(v0 + 112), sub_1000637E8);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005A99C()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000035EC(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10005A9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v11 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100007458;
  return sub_100056B68(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_10005AAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[14] = a7;
  v8[15] = v7;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a3;
  v8[11] = a4;
  v8[8] = a1;
  v8[9] = a2;
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v8[16] = v9;
  v8[17] = *(void *)(v9 - 8);
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_10005AB8C, 0, 0);
}

uint64_t sub_10005AB8C()
{
  uint64_t v1 = v0[17];
  uint64_t v16 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v15 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[11];
  unint64_t v5 = v0[12];
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[10];
  uint64_t v9 = (void *)swift_allocObject();
  v0[19] = v9;
  v9[2] = v2;
  v9[3] = v7;
  uint64_t v9[4] = v8;
  v9[5] = v4;
  uint64_t v9[6] = v6;
  v9[7] = v5;
  v9[8] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000354C(v6, v5);
  uint64_t v10 = swift_allocObject();
  v0[20] = v10;
  *(void *)(v10 + 16) = sub_100064C04;
  *(void *)(v10 + 24) = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v16, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v15);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[21] = v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C1AC8);
  *uint64_t v11 = v0;
  v11[1] = sub_10005AD40;
  uint64_t v13 = v0[18];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v13, sub_10004A390, v10, v12);
}

uint64_t sub_10005AD40()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  uint64_t v3 = *(void *)(*(void *)v1 + 136);
  uint64_t v4 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    unint64_t v5 = sub_10005AF78;
  }
  else
  {
    swift_release();
    unint64_t v5 = sub_10005AEE8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10005AEE8()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_task_dealloc();
  *(_OWORD *)uint64_t v1 = v7;
  *(_OWORD *)(v1 + 16) = v6;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v2;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10005AF78()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005AFE4(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return _swift_task_switch(sub_10005B004, 0, 0);
}

uint64_t sub_10005B004()
{
  if (v0[10] == 1)
  {
    uint64_t v1 = *(void *)(v0[11] + 24);
    type metadata accessor for ACLFetcher();
    uint64_t inited = swift_initStackObject();
    v0[12] = inited;
    *(void *)(inited + 16) = v1;
    type metadata accessor for AppleIDVManager();
    swift_retain();
    sub_10015A018((uint64_t *)(inited + 24));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[13] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10005B130;
    return sub_1000A41A4();
  }
  else
  {
    unint64_t v5 = (uint64_t (*)(void, unint64_t))v0[1];
    return v5(0, 0xF000000000000000);
  }
}

uint64_t sub_10005B130(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 112) = v2;
  swift_task_dealloc();
  if (v2)
  {
    long long v7 = sub_10005B2E4;
  }
  else
  {
    *(void *)(v6 + 120) = a2;
    *(void *)(v6 + 128) = a1;
    long long v7 = sub_10005B264;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10005B264()
{
  uint64_t v1 = v0[12];
  swift_setDeallocating();
  swift_release();
  sub_10000B9DC(v1 + 24);
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v4(v2, v3);
}

uint64_t sub_10005B2E4()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_setDeallocating();
  swift_release();
  sub_10000B9DC(v1 + 24);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10005B360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[16] = a8;
  v9[17] = v8;
  v9[14] = a6;
  v9[15] = a7;
  v9[12] = a4;
  v9[13] = a5;
  v9[10] = a2;
  v9[11] = a3;
  v9[9] = a1;
  uint64_t v10 = type metadata accessor for ISO18013JumboPackage();
  v9[18] = v10;
  v9[19] = *(void *)(v10 - 8);
  v9[20] = swift_task_alloc();
  v9[21] = swift_task_alloc();
  v9[22] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v9[23] = v11;
  v9[24] = *(void *)(v11 - 8);
  v9[25] = swift_task_alloc();
  v9[26] = swift_task_alloc();
  v9[27] = swift_task_alloc();
  v9[28] = swift_task_alloc();
  return _swift_task_switch(sub_10005B4D0, 0, 0);
}

uint64_t sub_10005B4D0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetching the ISO18013JumboPackage", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[23];
  uint64_t v5 = v0[24];
  uint64_t v7 = v0[17];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[29] = v8;
  v0[30] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v6);
  sub_100014D14((void *)(v7 + 72), *(void *)(v7 + 96));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[31] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10005B64C;
  uint64_t v11 = v0[15];
  uint64_t v10 = v0[16];
  uint64_t v12 = v0[13];
  uint64_t v13 = v0[14];
  uint64_t v14 = v0[11];
  uint64_t v15 = v0[12];
  uint64_t v16 = v0[10];
  return sub_1001615C0((uint64_t)(v0 + 2), v16, v14, v10, v15, v12, v13, v11);
}

uint64_t sub_10005B64C()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10005B978;
  }
  else {
    os_log_type_t v2 = sub_10005B760;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005B760()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100014D14(v0 + 2, v1);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 48) + **(int **)(v2 + 48));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10005B860;
  return v5(v1, v2);
}

uint64_t sub_10005B860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[34] = a1;
  v4[35] = a2;
  v4[36] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10005C088;
  }
  else {
    uint64_t v5 = sub_10005BA30;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10005B978()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005BA30()
{
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x800000010017B700;
  v2._uint64_t countAndFlagsBits = 0xD000000000000025;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3) {
    sub_100064FF4(*(void *)(v0 + 272), *(char **)(v0 + 280));
  }
  uint64_t v4 = *(void *)(v0 + 288);
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  CBORDecoder.init()();
  sub_100064B6C(&qword_1001C1B10, (void (*)(uint64_t))&type metadata accessor for ISO18013JumboPackage);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  if (!v4)
  {
    swift_release();
    uint64_t v14 = *(void *)(ISO18013JumboPackage.packages.getter() + 16);
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v15 = (void *)(v0 + 216);
      uint64_t v17 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 176);
      uint64_t v19 = *(void *)(v0 + 152);
      uint64_t v18 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 144);
      defaultLogger()();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
      v21(v17, v16, v20);
      v21(v18, v16, v20);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        os_log_type_t v58 = v23;
        uint64_t v24 = *(void *)(v0 + 168);
        uint64_t v26 = *(void *)(v0 + 144);
        uint64_t v25 = *(void *)(v0 + 152);
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134349312;
        uint64_t v28 = *(void *)(ISO18013JumboPackage.packages.getter() + 16);
        swift_bridgeObjectRelease();
        uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v57(v24, v26);
        *(void *)(v0 + 56) = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2050;
        uint64_t v29 = (void *)ISO18013JumboPackage.packages.getter();
        if (v29[2])
        {
          uint64_t v31 = v29[4];
          unint64_t v30 = v29[5];
          sub_10000354C(v31, v30);
          swift_bridgeObjectRelease();
          switch(v30 >> 62)
          {
            case 1uLL:
              goto LABEL_19;
            case 2uLL:
              uint64_t v47 = *(void *)(v31 + 16);
              uint64_t v46 = *(void *)(v31 + 24);
              sub_1000035EC(v31, v30);
              BOOL v48 = __OFSUB__(v46, v47);
              uint64_t v32 = v46 - v47;
              if (!v48) {
                goto LABEL_22;
              }
              __break(1u);
LABEL_19:
              sub_1000035EC(v31, v30);
              if (!__OFSUB__(HIDWORD(v31), v31))
              {
                uint64_t v32 = HIDWORD(v31) - (int)v31;
LABEL_22:
                uint64_t v50 = *(void *)(v0 + 272);
                unint64_t v49 = *(void *)(v0 + 280);
                v57(*(void *)(v0 + 160), *(void *)(v0 + 144));
                *(void *)(v0 + 64) = v32;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v22, v58, "Jumbo package contains %{public}ld payloads of size %{public}ld bytes", (uint8_t *)v27, 0x16u);
                swift_slowDealloc();

                uint64_t v39 = v50;
                unint64_t v40 = v49;
                goto LABEL_23;
              }
              __break(1u);
              break;
            case 3uLL:
              sub_1000035EC(v31, v30);
              uint64_t v32 = 0;
              goto LABEL_22;
            default:
              sub_1000035EC(v31, v30);
              uint64_t v32 = BYTE6(v30);
              goto LABEL_22;
          }
        }
        swift_bridgeObjectRelease();
        __break(1u);
        JUMPOUT(0x10005C078);
      }
      uint64_t v42 = *(void *)(v0 + 272);
      unint64_t v41 = *(void *)(v0 + 280);
      uint64_t v43 = *(void *)(v0 + 168);
      uint64_t v44 = *(void *)(v0 + 144);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 152) + 8);
      v45(*(void *)(v0 + 160), v44);
      v45(v43, v44);
      sub_1000035EC(v42, v41);
    }
    else
    {
      uint64_t v15 = (void *)(v0 + 208);
      defaultLogger()();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v37 = *(void *)(v0 + 272);
      unint64_t v36 = *(void *)(v0 + 280);
      if (v35)
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Jumbo package contains no payloads", v38, 2u);
        swift_slowDealloc();

        uint64_t v39 = v37;
        unint64_t v40 = v36;
LABEL_23:
        sub_1000035EC(v39, v40);
        goto LABEL_24;
      }
      sub_1000035EC(*(void *)(v0 + 272), *(void *)(v0 + 280));
    }
LABEL_24:
    uint64_t v51 = *(void *)(v0 + 176);
    uint64_t v52 = *(void *)(v0 + 144);
    uint64_t v53 = *(void *)(v0 + 152);
    uint64_t v54 = *(void *)(v0 + 72);
    (*(void (**)(void, void))(v0 + 232))(*v15, *(void *)(v0 + 184));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v54, v51, v52);
    goto LABEL_25;
  }
  swift_release();
  defaultLogger()();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Replace payload called with a non ISO18013JumboPackage. Will attempt to transform the package into ISO18013JumboPackage", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = *(void *)(v0 + 272);
  unint64_t v8 = *(void *)(v0 + 280);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 184);

  v10(v11, v12);
  sub_100006CC8(&qword_1001C1B18);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1001768E0;
  *(void *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v8;
  sub_10000354C(v9, v8);
  static ISO18013JumboPackage.supportedJumboPackageVersion.getter();
  ISO18013JumboPackage.init(version:packages:)();
  sub_1000035EC(v9, v8);
  swift_errorRelease();
LABEL_25:
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 152) + 56))(*(void *)(v0 + 72), 0, 1, *(void *)(v0 + 144));
  sub_10000B9DC(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  return v55();
}

uint64_t sub_10005C088()
{
  sub_10000B9DC(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005C148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[20] = a8;
  v8[21] = v13;
  v8[18] = a6;
  v8[19] = a7;
  v8[16] = a4;
  v8[17] = a5;
  v8[14] = a2;
  v8[15] = a3;
  v8[13] = a1;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v8[22] = v9;
  v8[23] = *(void *)(v9 - 8);
  v8[24] = swift_task_alloc();
  v8[25] = type metadata accessor for PayloadMetadata(0);
  v8[26] = swift_task_alloc();
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v8[33] = v10;
  v8[34] = *(void *)(v10 - 8);
  v8[35] = swift_task_alloc();
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  return _swift_task_switch(sub_10005C314, 0, 0);
}

uint64_t sub_10005C314()
{
  defaultLogger()();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Validating credential payload", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[37];
  uint64_t v6 = v0[33];
  uint64_t v5 = v0[34];
  uint64_t v7 = (void *)v0[14];

  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[38] = v8;
  v0[39] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v6);
  sub_100014D14(v7, v7[3]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[40] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10005C490;
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[21];
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[19];
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[17];
  uint64_t v16 = v0[15];
  return sub_1001615C0((uint64_t)(v0 + 2), v16, v14, v15, v12, v13, v10, v11);
}

uint64_t sub_10005C490()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10005C7C4;
  }
  else {
    os_log_type_t v2 = sub_10005C5A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005C5A4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100014D14(v0 + 2, v1);
  uint64_t v6 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10005C6B0;
  uint64_t v4 = v0[32];
  return v6(v4, 0, v1, v2);
}

uint64_t sub_10005C6B0()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10005D250;
  }
  else {
    uint64_t v2 = sub_10005C9C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005C7C4()
{
  (*(void (**)(void, void, void))(v0[23] + 104))(v0[24], enum case for DIPError.Code.internalError(_:), v0[22]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10005C9C4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100014D14(v0 + 2, v1);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 40) + **(int **)(v2 + 40));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[44] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10005CAC4;
  return v5(v1, v2);
}

uint64_t sub_10005CAC4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 360) = a1;
  *(void *)(v3 + 368) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10005D458;
  }
  else {
    uint64_t v4 = sub_10005CBD8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005CBD8()
{
  uint64_t v63 = v0;
  uint64_t v1 = v0[45];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[38];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[31];
  uint64_t v53 = v0[30];
  os_log_t loga = (os_log_t)v0[29];
  uint64_t v57 = v0[28];
  uint64_t v58 = v0[27];
  uint64_t v60 = v0[26];
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v1;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v2(v3, v5);
  defaultLogger()();
  sub_100063940(v4, v6);
  sub_100063940(v4, v53);
  sub_100063940(v4, (uint64_t)loga);
  sub_100063940(v4, v57);
  sub_100063940(v4, v58);
  sub_100063940(v4, v60);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = (uint64_t *)v0[30];
  uint64_t v11 = v0[31];
  uint64_t v12 = v0[29];
  uint64_t v59 = v0[28];
  uint64_t v61 = v0[27];
  if (v9)
  {
    os_log_type_t v54 = v8;
    log = v7;
    uint64_t v52 = v0[25];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136447490;
    id v14 = (id)DCCredentialPayloadFormatToString();
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    v0[7] = sub_10004C3A4(v15, v17, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100063C98(v11);
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v18 = *v10;
    unint64_t v19 = v10[1];
    swift_bridgeObjectRetain();
    v0[8] = sub_10004C3A4(v18, v19, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100063C98((uint64_t)v10);
    *(_WORD *)(v13 + 22) = 2080;
    type metadata accessor for Date();
    sub_100064B6C(&qword_1001C1358, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_10004C3A4(v20, v21, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100063C98(v12);
    *(_WORD *)(v13 + 32) = 2080;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_10004C3A4(v22, v23, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100063C98(v59);
    *(_WORD *)(v13 + 42) = 2080;
    uint64_t v24 = (uint64_t *)(v61 + *(int *)(v52 + 44));
    if (v24[1])
    {
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
    }
    uint64_t v32 = v0[26];
    uint64_t v31 = v0[27];
    uint64_t v33 = v0[25];
    swift_bridgeObjectRetain();
    v0[11] = sub_10004C3A4(v25, v26, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100063C98(v31);
    *(_WORD *)(v13 + 52) = 2080;
    os_log_type_t v34 = (uint64_t *)(v32 + *(int *)(v33 + 48));
    if (v34[1])
    {
      uint64_t v35 = *v34;
      unint64_t v36 = v34[1];
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
    }
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[38];
    uint64_t v38 = v0[35];
    uint64_t v39 = v0[33];
    uint64_t v40 = v0[26];
    swift_bridgeObjectRetain();
    v0[12] = sub_10004C3A4(v35, v36, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100063C98(v40);
    _os_log_impl((void *)&_mh_execute_header, log, v54, "Saving validated payload with format %{public}s, doc type %{public}s, valid from %s, valid until %s, region %s, issuing jurisdiction %s ", (uint8_t *)v13, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v38, v39);
  }
  else
  {
    uint64_t v27 = (void (*)(uint64_t, uint64_t))v0[38];
    uint64_t v28 = v0[35];
    uint64_t v29 = v0[33];
    uint64_t v30 = v0[26];
    sub_100063C98(v11);
    sub_100063C98((uint64_t)v10);
    sub_100063C98(v12);
    sub_100063C98(v59);
    sub_100063C98(v61);
    sub_100063C98(v30);

    v27(v28, v29);
  }
  uint64_t v41 = v0[45];
  uint64_t v42 = (void (*)(uint64_t, uint64_t))v0[38];
  uint64_t v43 = v0[36];
  uint64_t v45 = (uint64_t *)v0[32];
  uint64_t v44 = v0[33];
  uint64_t v46 = v0[13];
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v45;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v42(v43, v44);
  uint64_t v47 = sub_10016EFE0();
  sub_10016E608(v45, v41, (uint64_t)v47, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063854((uint64_t)v45, v46);
  sub_10000B9DC((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v49 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v50 = v0[45];
  return v49(v50);
}

uint64_t sub_10005D250()
{
  sub_10000B9DC((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[23] + 104))(v0[24], enum case for DIPError.Code.internalError(_:), v0[22]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10005D458()
{
  sub_100063C98(v0[32]);
  sub_10000B9DC((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[23] + 104))(v0[24], enum case for DIPError.Code.internalError(_:), v0[22]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10005D66C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13)
{
  sub_10005D738(a1, a2, a3, a4, a5, a6, a7, a8, a9, __PAIR128__(a11, a10), a12, (uint64_t *)(a13 + 16));
}

id sub_10005D738(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, long long a10, unint64_t a11, uint64_t *a12)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v29 = a1;
  uint64_t v30 = a6;
  uint64_t v27 = a3;
  unint64_t v28 = a4;
  long long v26 = a10;
  uint64_t v14 = sub_100006CC8(&qword_1001C1AD8);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PayloadMetadata(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063940(a5, (uint64_t)v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  int v21 = *(unsigned __int8 *)(a9 + 9);
  swift_beginAccess();
  uint64_t v22 = *a12;
  unint64_t v23 = a12[1];
  sub_100009778(*a12, v23);
  uint64_t v24 = v33;
  sub_10005D958(a2, v27, v28, (uint64_t)v16, v30, v31, v32, v21, (uint64_t)v20, v26, *((uint64_t *)&v26 + 1), a11, v22, v23);
  if (v24)
  {
    sub_100014BBC((uint64_t)v16, &qword_1001C1AD8);
    return (id)sub_100009764(v22, v23);
  }
  else
  {
    sub_100009764(v22, v23);
    sub_100014BBC((uint64_t)v16, &qword_1001C1AD8);
    sub_100063C98((uint64_t)v20);
    return sub_100007290();
  }
}

void sub_10005D958(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14)
{
  LODWORD(v205) = a8;
  uint64_t v210 = (char *)a6;
  uint64_t v190 = a5;
  uint64_t v199 = a4;
  unint64_t v203 = a3;
  uint64_t v204 = a2;
  uint64_t v202 = a9;
  uint64_t v192 = type metadata accessor for SHA256();
  uint64_t v187 = *(void *)(v192 - 8);
  uint64_t v16 = __chkstk_darwin(v192);
  v186 = (char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v184 = (char *)&v175 - v18;
  uint64_t v189 = type metadata accessor for SHA256Digest();
  uint64_t v188 = *(void *)(v189 - 8);
  uint64_t v19 = __chkstk_darwin(v189);
  v185 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v183 = (char *)&v175 - v21;
  uint64_t v22 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v200 = *(void *)(v22 - 8);
  uint64_t v201 = (void *)v22;
  __chkstk_darwin(v22);
  uint64_t v196 = (char *)&v175 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for DIPError.Code();
  uint64_t v193 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  long long v195 = (char *)&v175 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100006CC8(&qword_1001C1AD8);
  __chkstk_darwin(v25 - 8);
  uint64_t v198 = (uint64_t)&v175 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = type metadata accessor for PayloadMetadata(0);
  uint64_t v197 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  uint64_t v191 = (uint64_t *)((char *)&v175 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v209 = type metadata accessor for Logger();
  unint64_t v213 = *(void *)(v209 - 8);
  uint64_t v28 = __chkstk_darwin(v209);
  uint64_t v30 = (char *)&v175 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v175 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  unint64_t v36 = (char *)&v175 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v175 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v42 = (char *)&v175 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v175 - v43;
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v207 = v45;
  uint64_t v208 = v46;
  __chkstk_darwin(v45);
  uint64_t v48 = (char *)&v175 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v49 = v212;
  uint64_t v50 = sub_1000075AC((uint64_t)v210, a7);
  if (v49) {
    return;
  }
  uint64_t v179 = v44;
  uint64_t v180 = v42;
  unint64_t v181 = v39;
  uint64_t v178 = v36;
  uint64_t v182 = v33;
  uint64_t v210 = v30;
  uint64_t v211 = 0;
  unint64_t v212 = v50;
  type metadata accessor for StoredPayload();
  uint64_t v51 = *(void *)(a1 + 16);
  id v52 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:v51];
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v54 = v207;
  uint64_t v55 = v208 + 8;
  uint64_t v56 = *(void (**)(char *, uint64_t))(v208 + 8);
  v56(v48, v207);
  [v52 setCreatedAt:isa];

  Date.init()();
  Class v57 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v177 = v56;
  v56(v48, v54);
  uint64_t v58 = v52;
  [v52 setUpdatedAt:v57];

  uint64_t v59 = v55;
  if ((v205 & 1) == 0)
  {
    uint64_t v176 = v48;
    uint64_t v208 = v55;
    uint64_t v198 = a10;
    uint64_t v66 = v180;
    defaultLogger()();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    BOOL v69 = os_log_type_enabled(v67, v68);
    unint64_t v70 = v203;
    unint64_t v71 = v213;
    if (v69)
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Credential has biometric protection policy; not attempting to validate payload",
        v72,
        2u);
      swift_slowDealloc();
    }

    uint64_t v73 = *(void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v74 = v209;
    v73(v66, v209);
    uint64_t v75 = v181;
    uint64_t v76 = defaultLogger()();
    __chkstk_darwin(v76);
    uint64_t v77 = v204;
    Logger.sensitive(_:)();
    unint64_t v213 = v71 + 8;
    uint64_t v205 = v73;
    v73(v75, v74);
    uint64_t v79 = v200;
    uint64_t v78 = v201;
    if ((v198 & 0x8000000000000000) == 0)
    {
      [v58 setFormat:];
      Class v80 = Data._bridgeToObjectiveC()().super.isa;
      [v58 setPayloadData:v80];

      [v58 setProtectionType:1];
      uint64_t v81 = v196;
      (*(void (**)(char *, void, void *))(v79 + 104))(v196, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v78);
      uint64_t v199 = ISO18013KnownDocTypes.rawValue.getter();
      unint64_t v83 = v82;
      (*(void (**)(char *, void *))(v79 + 8))(v81, v78);
      uint64_t v84 = v178;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.debug.getter();
      BOOL v87 = os_log_type_enabled(v85, v86);
      uint64_t v88 = v212;
      if (v87)
      {
        uint64_t v201 = v58;
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        v215[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v89 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v214 = sub_10004C3A4(v199, v83, v215);
        uint64_t v88 = v212;
        uint64_t v58 = v201;
        uint64_t v77 = v204;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "ISO18013PackageUndecryptablePayloadProcessor assuming doctype %s", v89, 0xCu);
        swift_arrayDestroy();
        unint64_t v70 = v203;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v93 = v209;
      v205(v84, v209);
      NSString v94 = String._bridgeToObjectiveC()();
      [v58 setDocType:v94];

      defaultLogger()();
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v97 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "ISO18013PackageUndecryptablePayloadProcessor assuming region US", v97, 2u);
        uint64_t v93 = v209;
        swift_slowDealloc();
      }

      v205(v182, v93);
      NSString v98 = String._bridgeToObjectiveC()();
      [v58 setRegion:v98];

      defaultLogger()();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v101 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "ISO18013PackageUndecryptablePayloadProcessor assuming issuing jurisdiction nil", v101, 2u);
        uint64_t v93 = v209;
        swift_slowDealloc();
      }

      v205(v210, v93);
      uint64_t v102 = (int *)v206;
      uint64_t v103 = v202;
      sub_10000354C(v77, v70);
      uint64_t v104 = v103;
      static Date.distantPast.getter();
      static Date.distantFuture.getter();
      uint64_t v105 = 0;
      *(void *)uint64_t v103 = v199;
      *(void *)(v103 + 8) = v83;
      *(void *)(v103 + 16) = v198;
      *(void *)(v103 + 24) = v77;
      *(void *)(v103 + 32) = v70;
      *(_OWORD *)(v103 + 40) = xmmword_100176900;
      unint64_t v106 = (void *)(v103 + v102[10]);
      *unint64_t v106 = 0;
      v106[1] = 0;
      *(_OWORD *)(v103 + v102[11]) = xmmword_100176E50;
      unint64_t v107 = (void *)(v103 + v102[12]);
      *unint64_t v107 = 0;
      v107[1] = 0;
      unint64_t v108 = 0xF000000000000000;
      uint64_t v109 = v211;
      goto LABEL_21;
    }
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v60 = v179;
  defaultLogger()();
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "insertPayload payload is accessible", v63, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v213 + 8))(v60, v209);
  uint64_t v64 = v198;
  sub_100064AEC(v199, v198);
  uint64_t v65 = v206;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48))(v64, 1, v206) == 1)
  {
    sub_100014BBC(v64, &qword_1001C1AD8);
LABEL_32:
    (*(void (**)(char *, void, uint64_t))(v193 + 104))(v195, enum case for DIPError.Code.internalError(_:), v194);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return;
  }
  uint64_t v90 = v51;
  int64_t v91 = v191;
  sub_100063854(v64, (uint64_t)v191);
  if (!v190)
  {
    sub_100063C98((uint64_t)v91);
    goto LABEL_32;
  }
  uint64_t v92 = v211;
  sub_1000F6E90(v190);
  if (v92)
  {
    sub_100063C98((uint64_t)v91);

    return;
  }
  char v120 = sub_100063E64(v212);
  if (v120)
  {
    if (a14 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v193 + 104))(v195, enum case for DIPError.Code.idcsInvalidACL(_:), v194);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      sub_100063C98((uint64_t)v91);
      return;
    }
    uint64_t v176 = v48;
    uint64_t v208 = v59;
    uint64_t v158 = v58;
    v159 = v212;
    uint64_t v160 = v91[3];
    unint64_t v161 = v91[4];
    sub_100009778(a13, a14);
    sub_10000354C(v160, v161);
    uint64_t v162 = sub_100064178(a13, a14, v160, v161);
    uint64_t v211 = 0;
    uint64_t v167 = v166;
    unint64_t v213 = (unint64_t)v162;
    uint64_t v210 = (char *)v168;
    sub_1000035EC(v160, v161);
    type metadata accessor for StoredCryptoKey();
    id v169 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:v90];
    sub_1000F70F0();
    unint64_t v170 = v159;
    [v159 addCryptoKeysObject:v169];
    uint64_t v58 = v158;
    [v158 setPayloadProtectionKey:v169];
    [v158 setFormat:3];
    uint64_t v171 = v213;
    unint64_t v172 = (unint64_t)v210;
    v173.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v209 = v167;
    Class v174 = v173.super.isa;
    [v58 setPayloadData:v173.super.isa];

    uint64_t v88 = v170;
    [v58 setProtectionType:2];
    sub_100009764(a13, a14);

    sub_1000035EC(v171, v172);
    swift_release();
    uint64_t v48 = v176;
    uint64_t v65 = v206;
    goto LABEL_55;
  }
  uint64_t v208 = v59;
  uint64_t v211 = 0;
  if ((v91[2] & 0x8000000000000000) != 0) {
LABEL_66:
  }
    __break(1u);
  [v58 setFormat:];
  uint64_t v151 = v91[3];
  unint64_t v152 = v91[4];
  sub_10000354C(v151, v152);
  Class v153 = Data._bridgeToObjectiveC()().super.isa;
  sub_1000035EC(v151, v152);
  [v58 setPayloadData:v153];

  [v58 setProtectionType:0];
  uint64_t v88 = v212;
LABEL_55:
  swift_bridgeObjectRetain();
  NSString v154 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v58 setDocType:v154];

  Class v155 = Date._bridgeToObjectiveC()().super.isa;
  [v58 setValidFrom:v155];

  Class v156 = Date._bridgeToObjectiveC()().super.isa;
  [v58 setValidUntil:v156];

  if (*(void *)((char *)v91 + *(int *)(v65 + 44) + 8))
  {
    swift_bridgeObjectRetain();
    NSString v157 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v157 = 0;
  }
  [v58 setRegion:v157];

  uint64_t v163 = *(void *)((char *)v91 + *(int *)(v65 + 48) + 8);
  uint64_t v176 = v48;
  if (v163)
  {
    swift_bridgeObjectRetain();
    NSString v164 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v164 = 0;
  }
  uint64_t v109 = v211;
  [v58 setIssuingJurisdiction:v164];

  uint64_t v165 = (uint64_t)v91;
  uint64_t v105 = v91[5];
  unint64_t v108 = v91[6];
  uint64_t v104 = v202;
  sub_100063854(v165, v202);
  sub_10000354C(v105, v108);
LABEL_21:
  unint64_t v110 = (unint64_t)[v88 state];
  if ((v110 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_68:
    swift_release();
    swift_release();
    __break(1u);
LABEL_69:
    swift_release();
    swift_release();
    __break(1u);
    JUMPOUT(0x10005F44CLL);
  }
  if (v110 == 1) {
    [v88 setState:2];
  }
  sub_1000644DC(v88, v58, v105, v108);
  if (v109)
  {
    sub_100063C98(v104);

    sub_100009764(v105, v108);
  }
  else
  {
    uint64_t v211 = 0;
    if (a12 >> 60 == 15)
    {
      unint64_t v213 = v108;
      sub_100064B6C(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
      unint64_t v111 = v186;
      uint64_t v112 = v192;
      dispatch thunk of HashFunction.init()();
      unint64_t v113 = v203;
      uint64_t v114 = v185;
      switch(v203 >> 62)
      {
        case 1uLL:
          uint64_t v135 = v204;
          if (v135 >> 32 < (int)v135) {
            goto LABEL_64;
          }
          sub_10000354C(v204, v203);
          unint64_t v111 = v186;
          uint64_t v136 = v211;
          sub_100063458((int)v135, v135 >> 32);
          uint64_t v211 = v136;
          sub_1000035EC(v135, v113);
          uint64_t v128 = v188;
          uint64_t v114 = v185;
          goto LABEL_44;
        case 2uLL:
          uint64_t v121 = v105;
          uint64_t v122 = v204;
          unint64_t v123 = v203;
          uint64_t v124 = *(void *)(v204 + 16);
          uint64_t v125 = *(void *)(v204 + 24);
          sub_10000354C(v204, v203);
          swift_retain();
          swift_retain();
          uint64_t v126 = v124;
          unint64_t v111 = v186;
          uint64_t v127 = v211;
          sub_100063458(v126, v125);
          uint64_t v211 = v127;
          if (v127) {
            goto LABEL_68;
          }
          swift_release();
          swift_release();
          sub_1000035EC(v122, v123);
          uint64_t v128 = v188;
          uint64_t v114 = v185;
          uint64_t v105 = v121;
LABEL_44:
          uint64_t v134 = v187;
          break;
        case 3uLL:
          memset(v215, 0, 14);
          dispatch thunk of HashFunction.update(bufferPointer:)();
          uint64_t v117 = v204;
          unint64_t v118 = v113;
          goto LABEL_39;
        default:
          unint64_t v115 = v203;
          uint64_t v116 = v204;
          v215[0] = v204;
          LODWORD(v215[1]) = v203;
          WORD2(v215[1]) = WORD2(v203);
          dispatch thunk of HashFunction.update(bufferPointer:)();
          uint64_t v117 = v116;
          unint64_t v118 = v115;
LABEL_39:
          sub_1000035EC(v117, v118);
          uint64_t v134 = v187;
          uint64_t v128 = v188;
          break;
      }
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v111, v112);
      sub_100064B6C(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v137 = v189;
      uint64_t v138 = Digest.data.getter();
      unint64_t v140 = v139;
      (*(void (**)(char *, uint64_t))(v128 + 8))(v114, v137);
      Class v141 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000035EC(v138, v140);
      [v58 setIngestionHash:v141];

      uint64_t v142 = v212;
      unint64_t v108 = v213;
    }
    else
    {
      unint64_t v213 = v105;
      sub_10000354C(a11, a12);
      sub_100064B6C(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
      int v119 = v184;
      dispatch thunk of HashFunction.init()();
      switch(a12 >> 62)
      {
        case 1uLL:
          uint64_t v201 = v58;
          if (a11 >> 32 < (int)a11) {
            goto LABEL_65;
          }
          sub_10000354C(a11, a12);
          uint64_t v143 = v211;
          sub_100063458((int)a11, a11 >> 32);
          uint64_t v211 = v143;
          sub_100009764(a11, a12);
          uint64_t v58 = v201;
          uint64_t v132 = v189;
          uint64_t v133 = v192;
          break;
        case 2uLL:
          uint64_t v201 = v58;
          uint64_t v129 = *(void *)(a11 + 16);
          uint64_t v130 = *(void *)(a11 + 24);
          sub_100009778(a11, a12);
          swift_retain();
          swift_retain();
          uint64_t v131 = v211;
          sub_100063458(v129, v130);
          uint64_t v211 = v131;
          if (v131) {
            goto LABEL_69;
          }
          swift_release();
          swift_release();
          sub_100009764(a11, a12);
          uint64_t v58 = v201;
          uint64_t v132 = v189;
          uint64_t v133 = v192;
          int v119 = v184;
          break;
        case 3uLL:
          memset(v215, 0, 14);
          goto LABEL_41;
        default:
          v215[0] = a11;
          LODWORD(v215[1]) = a12;
          WORD2(v215[1]) = WORD2(a12);
LABEL_41:
          uint64_t v133 = v192;
          dispatch thunk of HashFunction.update(bufferPointer:)();
          sub_100009764(a11, a12);
          uint64_t v132 = v189;
          break;
      }
      uint64_t v144 = v183;
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v187 + 8))(v119, v133);
      sub_100064B6C(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v145 = Digest.data.getter();
      unint64_t v147 = v146;
      (*(void (**)(char *, uint64_t))(v188 + 8))(v144, v132);
      Class v148 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000035EC(v145, v147);
      [v58 setIngestionHash:v148];

      sub_100009764(a11, a12);
      uint64_t v142 = v212;
      uint64_t v105 = v213;
    }
    [v142 addPayloadsObject:v58];
    uint64_t v149 = v176;
    Date.init()();
    Class v150 = Date._bridgeToObjectiveC()().super.isa;
    v177(v149, v207);
    [v142 setUpdatedAt:v150];
    sub_100009764(v105, v108);
  }
}

uint64_t sub_10005F46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v6[14] = v9;
  v6[15] = *(void *)(v9 - 8);
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_10005F5FC, 0, 0);
}

uint64_t sub_10005F5FC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Deleting device encryption keys", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[6];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[18] = v8;
  v0[19] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  if (v7)
  {
    uint64_t v9 = v0[6];
    uint64_t v10 = (void *)swift_task_alloc();
    v0[20] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10005F7C0;
    uint64_t v12 = v0[4];
    uint64_t v11 = v0[5];
    uint64_t v13 = v0[2];
    uint64_t v14 = v0[3];
    return sub_100060154(v12, v13, v14, v11, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_10005F7C0()
{
  os_log_type_t v2 = (void *)*v1;
  v2[21] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10005FAA4, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[22] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10005F938;
    uint64_t v4 = v2[3];
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[4];
    return sub_100060F98(v6, v5, v4);
  }
}

uint64_t sub_10005F938()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10005FCC0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10005FAA4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10005FCC0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

id sub_10005FEDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v27 = a1;
  uint64_t v28 = a6;
  unint64_t v26 = a4;
  uint64_t v13 = sub_100006CC8(&qword_1001C1AD8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PayloadMetadata(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_projectBox();
  swift_beginAccess();
  sub_100064AEC(v19, (uint64_t)v15);
  int v20 = *(unsigned __int8 *)(a9 + 9);
  swift_beginAccess();
  uint64_t v21 = *(void *)(a11 + 16);
  unint64_t v22 = *(void *)(a11 + 24);
  sub_100009778(v21, v22);
  uint64_t v23 = v31;
  sub_10005D958(a2, a3, v26, (uint64_t)v15, v28, v29, v30, v20, (uint64_t)v18, a10, 0, 0xF000000000000000, v21, v22);
  if (v23)
  {
    sub_100014BBC((uint64_t)v15, &qword_1001C1AD8);
    return (id)sub_100009764(v21, v22);
  }
  else
  {
    sub_100009764(v21, v22);
    sub_100014BBC((uint64_t)v15, &qword_1001C1AD8);
    sub_100063C98((uint64_t)v18);
    return sub_100007290();
  }
}

unint64_t sub_1000600C4()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

uint64_t sub_100060154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[13] = a5;
  v6[14] = v5;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  v6[18] = v8;
  v6[19] = *(void *)(v8 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v6[21] = v9;
  v6[22] = *(void *)(v9 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v6[24] = v10;
  v6[25] = *(void *)(v10 - 8);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_100060330, 0, 0);
}

uint64_t sub_100060330()
{
  uint64_t v1 = v0[25];
  uint64_t v16 = v0[24];
  uint64_t v17 = v0[26];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = (void *)swift_allocObject();
  v0[27] = v8;
  v8[2] = v2;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v7;
  v8[6] = v4;
  v8[7] = v3;
  uint64_t v9 = swift_allocObject();
  v0[28] = v9;
  *(void *)(v9 + 16) = sub_100063DFC;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11(v17, v10, v16);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[29] = v12;
  uint64_t v13 = sub_100006CC8(&qword_1001C3C70);
  *uint64_t v12 = v0;
  v12[1] = sub_1000604E4;
  uint64_t v14 = v0[26];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 8, v14, sub_100063D5C, v9, v13);
}

uint64_t sub_1000604E4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[25] + 8))(v2[26], v2[24]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000607DC;
  }
  else
  {
    swift_release();
    v2[31] = v2[8];
    uint64_t v3 = sub_100060658;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100060658()
{
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 256) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 112) + 112);
    *(_DWORD *)(v0 + 320) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 264) = v3;
    *(void *)(v0 + 272) = 0;
    uint64_t v4 = v1[4];
    *(void *)(v0 + 280) = v4;
    uint64_t v5 = (void *)v1[5];
    *(void *)(v0 + 288) = v5;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = 778790244;
    *(void *)(v0 + 24) = 0xE400000000000000;
    v6._uint64_t countAndFlagsBits = v4;
    v6._object = v5;
    String.append(_:)(v6);
    uint64_t v7 = *(void *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 24);
    *(void *)(v0 + 296) = v8;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100060874;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v7, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_1000607DC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100060874()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100060B30;
  }
  else {
    uint64_t v2 = sub_1000609A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000609A8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[34] + 1;
  if (v1 == v0[32])
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[34] = v1;
    uint64_t v4 = v0[31] + 16 * v1;
    uint64_t v5 = *(void *)(v4 + 32);
    v0[35] = v5;
    Swift::String v6 = *(void **)(v4 + 40);
    v0[36] = v6;
    swift_bridgeObjectRetain();
    v0[2] = 778790244;
    v0[3] = 0xE400000000000000;
    v7._uint64_t countAndFlagsBits = v5;
    v7._object = v6;
    String.append(_:)(v7);
    uint64_t v8 = v0[2];
    uint64_t v9 = v0[3];
    v0[37] = v9;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[38] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100060874;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v8, v9);
  }
}

uint64_t sub_100060B30()
{
  Swift::String v21 = *(Swift::String *)(v0 + 280);
  uint64_t v1 = *(unsigned int *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 160);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v18 = *(void *)(v0 + 144);
  uint64_t v22 = *(void *)(v0 + 136);
  uint64_t v23 = *(void *)(v0 + 128);
  uint64_t v24 = *(void *)(v0 + 120);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 176) + 104);
  v4(v2, v1, v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  v4(v2, v1, v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v5, v19, v18);
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  uint64_t v6 = *(void *)(v0 + 56);
  *(void *)(v0 + 32) = *(void *)(v0 + 48);
  *(void *)(v0 + 40) = v6;
  v7._uint64_t countAndFlagsBits = 0xD000000000000038;
  v7._object = (void *)0x800000010017D0B0;
  String.append(_:)(v7);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v18);
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 272) + 1;
  if (v8 == *(void *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    *(void *)(v0 + 272) = v8;
    uint64_t v11 = *(void *)(v0 + 248) + 16 * v8;
    uint64_t v12 = *(void *)(v11 + 32);
    *(void *)(v0 + 280) = v12;
    uint64_t v13 = *(void **)(v11 + 40);
    *(void *)(v0 + 288) = v13;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = 778790244;
    *(void *)(v0 + 24) = 0xE400000000000000;
    v14._uint64_t countAndFlagsBits = v12;
    v14._object = v13;
    String.append(_:)(v14);
    uint64_t v15 = *(void *)(v0 + 16);
    uint64_t v16 = *(void *)(v0 + 24);
    *(void *)(v0 + 296) = v16;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100060874;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v15, v16);
  }
}

uint64_t sub_100060F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v4[19] = v7;
  v4[20] = *(void *)(v7 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[22] = v8;
  v4[23] = *(void *)(v8 - 8);
  v4[24] = swift_task_alloc();
  return _swift_task_switch(sub_100061170, 0, 0);
}

uint64_t sub_100061170()
{
  uint64_t v1 = v0[23];
  uint64_t v15 = v0[24];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  uint64_t v7 = (void *)swift_allocObject();
  v0[25] = v7;
  v7[2] = v3;
  v7[3] = v5;
  v7[4] = v4;
  v7[5] = v6;
  uint64_t v8 = swift_allocObject();
  v0[26] = v8;
  *(void *)(v8 + 16) = sub_100063D3C;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v15, v9, v2);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[27] = v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C3C70);
  *uint64_t v11 = v0;
  v11[1] = sub_100061318;
  uint64_t v13 = v0[24];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 8, v13, sub_100063D5C, v8, v12);
}

uint64_t sub_100061318()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[23] + 8))(v2[24], v2[22]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100061610;
  }
  else
  {
    swift_release();
    v2[29] = v2[8];
    uint64_t v3 = sub_10006148C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006148C()
{
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 240) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 96) + 112);
    *(_DWORD *)(v0 + 304) = enum case for DIPError.Code.internalError(_:);
    *(void *)(v0 + 248) = v3;
    *(void *)(v0 + 256) = 0;
    uint64_t v4 = v1[4];
    *(void *)(v0 + 264) = v4;
    uint64_t v5 = (void *)v1[5];
    *(void *)(v0 + 272) = v5;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = 778790244;
    *(void *)(v0 + 24) = 0xE400000000000000;
    v6._uint64_t countAndFlagsBits = v4;
    v6._object = v5;
    String.append(_:)(v6);
    uint64_t v7 = *(void *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 24);
    *(void *)(v0 + 280) = v8;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000616A8;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v7, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_100061610()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000616A8()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100061964;
  }
  else {
    uint64_t v2 = sub_1000617DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000617DC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[32] + 1;
  if (v1 == v0[30])
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[32] = v1;
    uint64_t v4 = v0[29] + 16 * v1;
    uint64_t v5 = *(void *)(v4 + 32);
    v0[33] = v5;
    Swift::String v6 = *(void **)(v4 + 40);
    v0[34] = v6;
    swift_bridgeObjectRetain();
    v0[2] = 778790244;
    v0[3] = 0xE400000000000000;
    v7._uint64_t countAndFlagsBits = v5;
    v7._object = v6;
    String.append(_:)(v7);
    uint64_t v8 = v0[2];
    uint64_t v9 = v0[3];
    v0[35] = v9;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[36] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1000616A8;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v8, v9);
  }
}

uint64_t sub_100061964()
{
  Swift::String v21 = *(Swift::String *)(v0 + 264);
  uint64_t v1 = *(unsigned int *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v22 = *(void *)(v0 + 120);
  uint64_t v23 = *(void *)(v0 + 112);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 160) + 104);
  v4(v2, v1, v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  v4(v2, v1, v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v5, v19, v18);
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  uint64_t v6 = *(void *)(v0 + 56);
  *(void *)(v0 + 32) = *(void *)(v0 + 48);
  *(void *)(v0 + 40) = v6;
  v7._uint64_t countAndFlagsBits = 0xD000000000000038;
  v7._object = (void *)0x800000010017D0B0;
  String.append(_:)(v7);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v18);
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 256) + 1;
  if (v8 == *(void *)(v0 + 240))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    *(void *)(v0 + 256) = v8;
    uint64_t v11 = *(void *)(v0 + 232) + 16 * v8;
    uint64_t v12 = *(void *)(v11 + 32);
    *(void *)(v0 + 264) = v12;
    uint64_t v13 = *(void **)(v11 + 40);
    *(void *)(v0 + 272) = v13;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = 778790244;
    *(void *)(v0 + 24) = 0xE400000000000000;
    v14._uint64_t countAndFlagsBits = v12;
    v14._object = v13;
    String.append(_:)(v14);
    uint64_t v15 = *(void *)(v0 + 16);
    uint64_t v16 = *(void *)(v0 + 24);
    *(void *)(v0 + 280) = v16;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000616A8;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v15, v16);
  }
}

uint64_t sub_100061DCC(uint64_t a1, unint64_t a2)
{
  object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v4._object = (void *)0x800000010017D3E0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000048;
  String.append(_:)(v4);
  if (a2 >> 60 == 15)
  {
    uint64_t countAndFlagsBits = 0;
  }
  else
  {
    Swift::String v6 = Data.base16EncodedString()();
    uint64_t countAndFlagsBits = v6._countAndFlagsBits;
    object = v6._object;
  }
  Swift::String v7 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_100061E78()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_100006CC8(&qword_1001C3C70);
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000028;
}

unint64_t sub_100061F18()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000001ELL;
}

void sub_100061F98(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char **a6@<X8>)
{
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v60 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v51 - v16;
  uint64_t v18 = v65;
  uint64_t v19 = sub_1000075AC(a1, a2);
  if (!v18)
  {
    uint64_t v20 = v19;
    uint64_t v59 = v17;
    uint64_t v55 = a3;
    uint64_t v56 = v9;
    Swift::String v21 = v63;
    uint64_t v22 = v64;
    uint64_t v65 = v12;
    Class v57 = v11;
    if (sub_100063E64(v19))
    {
      uint64_t v23 = v59;
      uint64_t v24 = defaultLogger()();
      __chkstk_darwin(v24);
      Logger.cryptoParam(_:)();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v25(v23, v65);
      unint64_t v26 = (unint64_t)sub_1000F5AC0();
      unint64_t v27 = v26;
      uint64_t v28 = v21;
      uint64_t v64 = v22 + 8;
      uint64_t v52 = 0;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        id v54 = v20;
        if (v29) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v29 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v54 = v20;
        if (v29)
        {
LABEL_5:
          uint64_t v53 = v25;
          if (v29 < 1)
          {
            __break(1u);
            return;
          }
          uint64_t v30 = 0;
          unint64_t v58 = v27 & 0xC000000000000001;
          uint64_t v31 = (char *)_swiftEmptyArrayStorage;
          do
          {
            if (v58) {
              id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v32 = *(id *)(v27 + 8 * v30 + 32);
            }
            uint64_t v33 = v32;
            id v34 = [v32 identifier];
            if (v34)
            {
              uint64_t v35 = v34;
              unint64_t v36 = v27;
              uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v39 = v38;

              BOOL v40 = v37 == v61 && v39 == v62;
              if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                uint64_t v41 = v59;
                uint64_t v42 = defaultLogger()();
                __chkstk_darwin(v42);
                Logger.cryptoParam(_:)();
                v53(v41, v65);
                [v54 removeCryptoKeysObject:v33];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v31 = sub_1000D0D48(0, *((void *)v31 + 2) + 1, 1, v31);
                }
                unint64_t v44 = *((void *)v31 + 2);
                unint64_t v43 = *((void *)v31 + 3);
                if (v44 >= v43 >> 1) {
                  uint64_t v31 = sub_1000D0D48((char *)(v43 > 1), v44 + 1, 1, v31);
                }
                *((void *)v31 + 2) = v44 + 1;
                uint64_t v45 = &v31[16 * v44];
                *((void *)v45 + 4) = v37;
                *((void *)v45 + 5) = v39;
                uint64_t v28 = v63;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              unint64_t v27 = v36;
            }
            ++v30;
          }
          while (v29 != v30);
          goto LABEL_29;
        }
      }
      uint64_t v31 = (char *)_swiftEmptyArrayStorage;
LABEL_29:
      swift_bridgeObjectRelease();
      uint64_t v49 = v52;
      sub_100007290();
      if (v49)
      {
        swift_bridgeObjectRelease();
        id v50 = v54;
        (*(void (**)(char *, void, uint64_t))(v60 + 104))(v57, enum case for DIPError.Code.internalError(_:), v56);
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
      }
      else
      {

        *uint64_t v28 = v31;
      }
      return;
    }
    defaultLogger()();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Credential payload protection policy does not use biometric auth, skipping deletion of device encryption key", v48, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v65);
    *Swift::String v21 = (char *)_swiftEmptyArrayStorage;
  }
}

unint64_t sub_1000625E4(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000030;
}

void sub_100062664(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v69 = a4;
  uint64_t v78 = a2;
  uint64_t v79 = a3;
  uint64_t v59 = a5;
  uint64_t v61 = type metadata accessor for DIPError.Code();
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v62 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006CC8(&qword_1001C0840);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CredentialKeyUsage();
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v71 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v84 = (char *)&v57 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v70 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  Swift::String v21 = (char *)&v57 - v20;
  defaultLogger()();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    unint64_t v76 = a1;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Deleting all device encryption auth required keys", v24, 2u);
    uint64_t v6 = v5;
    swift_slowDealloc();
  }

  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v21, v16);
  unint64_t v26 = sub_1000075AC(v78, v79);
  if (!v6)
  {
    uint64_t v27 = v16;
    uint64_t v28 = v26;
    uint64_t v65 = v17 + 8;
    uint64_t v66 = v27;
    unint64_t v29 = (unint64_t)sub_1000F5AC0();
    uint64_t v30 = v29;
    uint64_t v57 = 0;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v32 = v84;
    id v64 = v28;
    if (v31)
    {
      uint64_t v63 = v25;
      if (v31 >= 1)
      {
        uint64_t v33 = 0;
        unint64_t v76 = v30 & 0xC000000000000001;
        uint64_t v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
        unint64_t v58 = (void (**)(char *, char *, uint64_t))(v77 + 32);
        unsigned int v68 = enum case for CredentialKeyUsage.invalid(_:);
        uint64_t v74 = (void (**)(char *, uint64_t))(v77 + 8);
        uint64_t v78 = v30;
        uint64_t v79 = (char *)_swiftEmptyArrayStorage;
        unsigned int v73 = enum case for CredentialKeyUsage.deviceEncryptionAuthRequired(_:);
        uint64_t v75 = (void (**)(char *, void, uint64_t))(v77 + 104);
        unint64_t v72 = (v77 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
        id v34 = v71;
        uint64_t v77 = v31;
        while (1)
        {
          if (v76) {
            id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v35 = *(id *)(v30 + 8 * v33 + 32);
          }
          unint64_t v36 = v35;
          id v37 = [v35 usage:v57];
          if (v37)
          {
            uint64_t v38 = v37;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            CredentialKeyUsage.init(rawValue:)();
            if ((*v67)(v11, 1, v12) != 1)
            {
              id v32 = v84;
              (*v58)(v84, v11, v12);
              uint64_t v39 = *v75;
              goto LABEL_19;
            }
            sub_100014BBC((uint64_t)v11, &qword_1001C0840);
            id v32 = v84;
          }
          uint64_t v39 = *v75;
          (*v75)(v32, v68, v12);
LABEL_19:
          BOOL v40 = v11;
          v39(v34, v73, v12);
          sub_100064B6C(&qword_1001C0848, (void (*)(uint64_t))&type metadata accessor for CredentialKeyUsage);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          if (v82 == v80 && v83 == v81)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v41 = *v74;
            (*v74)(v34, v12);
            v41(v32, v12);
          }
          else
          {
            char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v43 = *v74;
            (*v74)(v34, v12);
            v43(v32, v12);
            if ((v42 & 1) == 0) {
              goto LABEL_9;
            }
          }
          id v44 = [v36 identifier];
          if (v44)
          {
            uint64_t v45 = v44;
            uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v48 = v47;

            uint64_t v49 = v70;
            uint64_t v50 = defaultLogger()();
            __chkstk_darwin(v50);
            Logger.cryptoParam(_:)();
            v63(v49, v66);
            [v64 removeCryptoKeysObject:v36];
            uint64_t v51 = v79;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v51 = sub_1000D0D48(0, *((void *)v51 + 2) + 1, 1, v51);
            }
            unint64_t v53 = *((void *)v51 + 2);
            unint64_t v52 = *((void *)v51 + 3);
            if (v53 >= v52 >> 1) {
              uint64_t v51 = sub_1000D0D48((char *)(v52 > 1), v53 + 1, 1, v51);
            }
            *((void *)v51 + 2) = v53 + 1;
            uint64_t v79 = v51;
            id v54 = &v51[16 * v53];
            *((void *)v54 + 4) = v46;
            *((void *)v54 + 5) = v48;
            uint64_t v11 = v40;
            id v34 = v71;
            goto LABEL_10;
          }
LABEL_9:
          uint64_t v11 = v40;
LABEL_10:
          ++v33;

          uint64_t v30 = v78;
          id v32 = v84;
          if (v77 == v33) {
            goto LABEL_30;
          }
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v79 = (char *)_swiftEmptyArrayStorage;
LABEL_30:
      swift_bridgeObjectRelease();
      uint64_t v55 = v57;
      sub_100007290();
      if (v55)
      {
        swift_bridgeObjectRelease();
        id v56 = v64;
        (*(void (**)(char *, void, uint64_t))(v60 + 104))(v62, enum case for DIPError.Code.internalError(_:), v61);
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
      }
      else
      {

        char *v59 = v79;
      }
    }
  }
}

uint64_t sub_100062F68(uint64_t a1, void *a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  v9._uint64_t countAndFlagsBits = a4;
  v9._object = a5;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  return 0;
}

void sub_100062FEC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint8_t *a7@<X6>, void *a8@<X8>)
{
  uint64_t v60 = a8;
  uint64_t v61 = a7;
  unint64_t v62 = a6;
  uint64_t v14 = (uint8_t *)type metadata accessor for Logger();
  uint64_t v15 = *((void *)v14 - 1);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000075AC(a2, a3);
  if (v8) {
    return;
  }
  uint64_t v19 = v18;
  uint64_t v20 = v17;
  uint64_t v57 = v15;
  unint64_t v58 = v14;
  uint64_t v59 = 0;
  uint64_t v21 = a1;
  uint64_t v22 = v61;
  uint64_t v23 = v62;
  if (sub_100008C00((uint64_t)v18, a5, v62))
  {
    uint64_t v24 = v20;
    defaultLogger()();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Skipping payload ingestion because new payload data matches existing ingestion hash", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint8_t *))(v57 + 8))(v24, v58);
    uint64_t v28 = v60;
    *uint64_t v60 = 0;
    v28[1] = 0;
    void v28[2] = 0;
    v28[3] = 1;
    v28[4] = 0;
    v28[5] = 0;
    return;
  }
  id v29 = [v19 options];
  if (v29)
  {
    uint64_t v30 = v29;
    unint64_t v31 = (unint64_t)[v29 payloadProtectionPolicy];
    if ((v31 & 0x8000000000000000) != 0)
    {
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    unint64_t v32 = v31;
  }
  else
  {
    unint64_t v32 = 0;
  }
  sub_100014D14((void *)(v21 + 32), *(void *)(v21 + 56));
  uint64_t v33 = (uint8_t *)sub_10000978C((uint64_t)v19, a5, v23, (uint64_t)v22);
  uint64_t v34 = v59;
  int v35 = sub_100008148(v21 + 72, v22, v33);
  if (v34)
  {

    return;
  }
  int v36 = v35;
  unint64_t v37 = (unint64_t)sub_1000F58F8();
  unint64_t v38 = v37;
  id v56 = v19;
  uint64_t v61 = (uint8_t *)v32;
  LODWORD(v62) = v36;
  unint64_t v58 = v33;
  if (v37 >> 62)
  {
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    if (!v39) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v39 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v39) {
      goto LABEL_21;
    }
  }
  if (v39 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v40 = 0;
  uint64_t v41 = *(void **)(a4 + 16);
  do
  {
    if ((v38 & 0xC000000000000001) != 0) {
      id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v42 = *(id *)(v38 + 8 * v40 + 32);
    }
    unint64_t v43 = v42;
    ++v40;
    [v41 deleteObject:v42, v56];
  }
  while (v39 != v40);
LABEL_21:
  swift_bridgeObjectRelease();
  id v44 = v58;
  if (!v58)
  {

    uint64_t v48 = 0;
    uint64_t v50 = 0;
    id v45 = 0;
    id v54 = 0;
    uint64_t v46 = (uint8_t **)v60;
    goto LABEL_29;
  }
  id v45 = [(uint8_t *)v58 identifier];
  uint64_t v46 = (uint8_t **)v60;
  id v47 = v56;
  if (!v45)
  {

    uint64_t v48 = 0;
    uint64_t v50 = 0;
LABEL_28:
    id v54 = 0;
    goto LABEL_29;
  }
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;

  id v51 = [(uint8_t *)v44 publicKeyIdentifier];
  if (!v51)
  {

    swift_bridgeObjectRelease();
    uint64_t v48 = 0;
    uint64_t v50 = 0;
    id v45 = 0;
    goto LABEL_28;
  }
  unint64_t v52 = v51;
  id v45 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  id v54 = v53;

LABEL_29:
  uint64_t v55 = 256;
  if ((v62 & 1) == 0) {
    uint64_t v55 = 0;
  }
  *uint64_t v46 = v61;
  v46[1] = (uint8_t *)v55;
  v46[2] = (uint8_t *)v48;
  v46[3] = v50;
  v46[4] = (uint8_t *)v45;
  v46[5] = v54;
}

uint64_t sub_100063458(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100064B6C(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100063538(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  Swift::String v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *Swift::String v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C3090 + dword_1001C3090);
  return v8(a1, a2, v6);
}

uint64_t sub_100063600()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 16), v1);
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100063648()
{
  swift_release();
  swift_release();
  sub_1000035EC(v0[4], v0[5]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[13])
  {
    swift_bridgeObjectRelease();
    sub_1000035EC(v0[14], v0[15]);
  }
  swift_release();

  return _swift_deallocObject(v0, 144, 7);
}

id sub_1000636C4()
{
  return sub_10005FEDC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void **)(v0 + 72), v0 + 80, *(void *)(v0 + 128), *(void *)(v0 + 136));
}

void sub_100063704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 != 1) {
    sub_100063724(a3, a4, a5, a6);
  }
}

void sub_100063724(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_10000354C(a3, a4);
  }
}

uint64_t sub_100063770()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_1000637A8(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

void sub_1000637E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 != 1) {
    sub_100063808(a3, a4, a5, a6);
  }
}

void sub_100063808(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_1000035EC(a3, a4);
  }
}

uint64_t sub_100063854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1000638B8@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X0>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1000638FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100063940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000639A4()
{
  unint64_t v1 = (int *)(type metadata accessor for PayloadMetadata(0) - 8);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v2 = (v11 + 48) & ~v11;
  unint64_t v3 = (((((*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  sub_1000035EC(*(void *)(v0 + 32), *(void *)(v0 + 40));
  uint64_t v4 = v0 + v2;
  swift_bridgeObjectRelease();
  sub_1000035EC(*(void *)(v4 + 24), *(void *)(v4 + 32));
  sub_1000035EC(*(void *)(v4 + 40), *(void *)(v4 + 48));
  uint64_t v5 = v0 + v2 + v1[10];
  uint64_t v6 = type metadata accessor for Date();
  Swift::String v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v4 + v1[11], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 24))
  {
    swift_bridgeObjectRelease();
    sub_1000035EC(*(void *)(v0 + v3 + 32), *(void *)(v0 + v3 + 40));
  }
  unint64_t v8 = (((v3 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_1000035EC(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  swift_release();

  return _swift_deallocObject(v0, v9 + 8, v11 | 7);
}

void sub_100063BA0()
{
  uint64_t v1 = *(void *)(type metadata accessor for PayloadMetadata(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 55) & 0xFFFFFFFFFFFFFFF8;
  sub_10005D66C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + v4), *(void **)(v0 + v4 + 8), v0 + v5, *(void *)(v0 + v6), *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v0 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100063C98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100063CF4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100063D3C(char **a1@<X8>)
{
  sub_100062664(*(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(void *)(v1 + 40), a1);
}

void *sub_100063D5C@<X0>(void *a1@<X8>)
{
  return sub_100063E20(a1);
}

uint64_t sub_100063D74()
{
  return sub_100062F68(*(void *)(v0 + 16), *(void **)(v0 + 24), 64, 0xD00000000000003ELL, (void *)0x800000010017D0F0);
}

uint64_t sub_100063DAC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100063DFC(char **a1@<X8>)
{
  sub_100061F98(*(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

void *sub_100063E20@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100063E64(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 options];
  if (v7)
  {
    unint64_t v8 = v7;
    unint64_t v9 = (unint64_t)[v7 payloadProtectionPolicy];
    if ((v9 & 0x8000000000000000) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0;
  }
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v25 = v1;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = v4;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v27 = v22;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v21 = v14 + 4;
    id v15 = (id)DCCredentialPayloadProtectionPolicyToString();
    uint64_t v23 = v3;
    id v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v26 = sub_10004C3A4(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Credential payload protection policy: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v23);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v10 != 0;
}

uint64_t sub_100064130()
{
  return sub_100062F68(*(void *)(v0 + 16), *(void **)(v0 + 24), 58, 0xD000000000000038, (void *)0x800000010017D1D0);
}

unint64_t sub_100064168()
{
  return sub_1000625E4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100064170()
{
  return sub_1000600C4();
}

NSObject *sub_100064178(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v8 = type metadata accessor for Logger();
  unint64_t v9 = *(char **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v30 - v13;
  defaultLogger()();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = v9;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "encryptPayloadWithNewProtectionKey called", v17, 2u);
    uint64_t v5 = v4;
    unint64_t v9 = v33;
    swift_slowDealloc();
  }

  unint64_t v18 = (void (*)(char *, uint64_t))*((void *)v9 + 1);
  v18(v14, v8);
  unint64_t v19 = sub_100148B44(a1, a2);
  if (!v5)
  {
    uint64_t v20 = v19;
    defaultLogger()();
    swift_retain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v37 = v32;
      uint64_t v33 = v12;
      *(_DWORD *)uint64_t v23 = 136315138;
      v30[1] = v23 + 4;
      unint64_t v31 = v23;
      uint64_t v25 = *((void *)v20 + 2);
      unint64_t v24 = *((void *)v20 + 3);
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_10004C3A4(v25, v24, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Created new payload protection key %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v26 = v33;
    }
    else
    {

      swift_release();
      uint64_t v26 = v12;
    }
    v18(v26, v8);
    uint64_t v27 = v34;
    uint64_t v28 = v35;
    swift_retain();
    id v15 = sub_10013CB0C(v27, v28);
    swift_release();
  }
  return v15;
}

void sub_1000644DC(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v52 = a2;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8);
  id v45 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v46 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v42 - v17;
  defaultLogger()();
  uint64_t v48 = a3;
  unint64_t v49 = a4;
  Logger.cryptoParam(_:)();
  id v47 = *(void (**)(char *, uint64_t))(v11 + 8);
  v47(v18, v10);
  if (a4 >> 60 == 15)
  {
    unint64_t v19 = sub_1000F77B0();
    if (v4) {
      return;
    }
    uint64_t v20 = v19;
LABEL_4:
    if (!v20) {
      goto LABEL_16;
    }
LABEL_10:
    [v52 setPresentmentKey:v20];

    return;
  }
  sub_10000354C(a3, a4);
  unint64_t v21 = sub_1000F7454(a3, a4);
  if (v4)
  {
    sub_100009764(a3, a4);
    return;
  }
  uint64_t v20 = (char *)v21;
  if (v21)
  {
    sub_100009764(a3, a4);
    goto LABEL_10;
  }
  id v22 = [self standardUserDefaults];
  v23._object = (void *)0x800000010017D3B0;
  v23._uint64_t countAndFlagsBits = 0xD000000000000027;
  LODWORD(v42) = NSUserDefaults.internalBool(forKey:)(v23);

  if (v42)
  {
    defaultLogger()();
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    id v42 = v24;
    uint64_t v26 = v24;
    os_log_type_t v27 = v25;
    if (os_log_type_enabled(v26, v25))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v27, "Allowing payload without matching presentment key due to user defaults setting", v28, 2u);
      swift_slowDealloc();
    }

    v47(v16, v10);
    uint64_t v20 = sub_1000F77B0();
    sub_100009764(a3, a4);
    goto LABEL_4;
  }
  sub_100009764(a3, a4);
LABEL_16:
  id v29 = [a1 options];
  if (!v29) {
    goto LABEL_21;
  }
  uint64_t v30 = v29;
  unint64_t v31 = (unint64_t)[v29 presentmentAuthPolicy];
  if ((v31 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  unint64_t v32 = v31;

  if (v32)
  {
    object = (void *)0xE000000000000000;
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v34._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
    v34._object = (void *)0x800000010017D320;
    String.append(_:)(v34);
    if (a4 >> 60 == 15)
    {
      uint64_t countAndFlagsBits = 0;
    }
    else
    {
      Swift::String v40 = Data.base16EncodedString()();
      uint64_t countAndFlagsBits = v40._countAndFlagsBits;
      object = v40._object;
    }
    uint64_t v41 = object;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v45, enum case for DIPError.Code.idcsPayloadPresentmentKeyMismatch(_:), v44);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100064B6C((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
LABEL_21:
    uint64_t v36 = v46;
    defaultLogger()();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping presentment key associated because credential auth policy is notRequired", v39, 2u);
      swift_slowDealloc();
    }

    v47(v36, v10);
  }
}

uint64_t sub_100064AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C1AD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064B54()
{
  return sub_100061DCC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_100064B5C()
{
  return sub_100061E78();
}

unint64_t sub_100064B64()
{
  return sub_100061F18();
}

uint64_t sub_100064B6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100064BB4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000035EC(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 72, 7);
}

void sub_100064C04(void *a1@<X8>)
{
  sub_100062FEC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(uint8_t **)(v1 + 64), a1);
}

uint64_t _s8DBResultVwxx(void *a1)
{
  uint64_t result = a1[3];
  if (result)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1[4];
    unint64_t v4 = a1[5];
    return sub_1000035EC(v3, v4);
  }
  return result;
}

uint64_t _s8DBResultVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    unint64_t v5 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    sub_10000354C(v4, v5);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t _s8DBResultVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  unint64_t v5 = (_OWORD *)(a1 + 16);
  long long v6 = a2 + 2;
  uint64_t v7 = a2[3];
  if (*(void *)(a1 + 24))
  {
    if (v7)
    {
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v9 = a2[4];
      unint64_t v8 = a2[5];
      sub_10000354C(v9, v8);
      uint64_t v10 = *(void *)(a1 + 32);
      unint64_t v11 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v8;
      sub_1000035EC(v10, v11);
    }
    else
    {
      sub_100064DE0(a1 + 16);
      long long v14 = v6[1];
      *unint64_t v5 = *v6;
      v5[1] = v14;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = a2[3];
    uint64_t v13 = a2[4];
    unint64_t v12 = a2[5];
    swift_bridgeObjectRetain();
    sub_10000354C(v13, v12);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v12;
  }
  else
  {
    long long v15 = *((_OWORD *)a2 + 2);
    *unint64_t v5 = *v6;
    *(_OWORD *)(a1 + 32) = v15;
  }
  return a1;
}

uint64_t sub_100064DE0(uint64_t a1)
{
  return a1;
}

__n128 _s8DBResultVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s8DBResultVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  long long v3 = (_OWORD *)(a1 + 16);
  uint64_t v4 = (_OWORD *)(a2 + 16);
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6)
  {
    sub_100064DE0((uint64_t)v3);
LABEL_5:
    long long v9 = v4[1];
    *long long v3 = *v4;
    v3[1] = v9;
    return a1;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1000035EC(v7, v8);
  return a1;
}

uint64_t _s8DBResultVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s8DBResultVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *_s8DBResultVMa()
{
  return &_s8DBResultVN;
}

uint64_t sub_100064FB8()
{
  return sub_10004A390();
}

uint64_t type metadata accessor for DebugWritePayloadToDiskHelper()
{
  return self;
}

uint64_t sub_100064FF4(uint64_t a1, char *a2)
{
  uint64_t v71 = a1;
  unint64_t v72 = a2;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v74 = (void (*)(char *, uint64_t))((char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v62 - v6;
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v70 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v69 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v75 = *(char **)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unsigned int v68 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  unsigned int v73 = (char *)&v62 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v62 - v20;
  __chkstk_darwin(v19);
  Swift::String v23 = (char *)&v62 - v22;
  uint64_t result = isInternalBuild()();
  if (result)
  {
    uint64_t v63 = v7;
    uint64_t v66 = v3;
    uint64_t v67 = v2;
    id v25 = [self defaultManager];
    v77._uint64_t countAndFlagsBits = 0;
    id v26 = [v25 URLForDirectory:5 inDomain:1 appropriateForURL:0 create:0 error:&v77];

    uint64_t countAndFlagsBits = (void *)v77._countAndFlagsBits;
    if (v26)
    {
      uint64_t v64 = v9;
      uint64_t v65 = v8;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      id v28 = countAndFlagsBits;

      uint64_t v29 = v14;
      uint64_t v30 = v23;
      URL.appendingPathComponent(_:isDirectory:)();
      unint64_t v32 = v75 + 8;
      unint64_t v31 = (void (*)(char *, uint64_t))*((void *)v75 + 1);
      v31(v21, v29);
      v77._uint64_t countAndFlagsBits = 0x2D64616F6C796170;
      v77._object = (void *)0xE800000000000000;
      UUID.init()();
      uint64_t v33 = UUID.uuidString.getter();
      uint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v13, v11);
      v36._uint64_t countAndFlagsBits = v33;
      uint64_t v37 = v30;
      uint64_t v38 = v29;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      URL.appendingPathComponent(_:)();
      uint64_t v39 = v31;
      swift_bridgeObjectRelease();
      Swift::String v40 = v73;
      URL.appendingPathExtension(_:)();
      v31(v21, v29);
      Swift::String v77 = Data.base16EncodedString()();
      uint64_t v41 = v70;
      static String.Encoding.utf8.getter();
      sub_1000658BC();
      StringProtocol.write(to:atomically:encoding:)();
      uint64_t v74 = v39;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v41, v65);
      swift_bridgeObjectRelease();
      uint64_t v50 = v63;
      defaultLogger()();
      unint64_t v51 = v68;
      (*((void (**)(char *, char *, uint64_t))v75 + 2))(v68, v40, v38);
      id v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v55 = swift_slowAlloc();
        unint64_t v72 = v32;
        id v56 = v51;
        uint64_t v57 = (uint8_t *)v55;
        v77._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v75 = v37;
        uint64_t v58 = URL.absoluteString.getter();
        uint64_t v76 = sub_10004C3A4(v58, v59, &v77._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v60 = v74;
        v74(v56, v38);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Saved ISO 18013 payload to %s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v67);
        v60(v73, v38);
        return ((uint64_t (*)(char *, uint64_t))v60)(v75, v38);
      }
      else
      {

        uint64_t v61 = v74;
        v74(v51, v38);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v67);
        v61(v40, v38);
        return ((uint64_t (*)(char *, uint64_t))v61)(v37, v38);
      }
    }
    else
    {
      id v42 = (id)v77._countAndFlagsBits;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v43 = v66;
      uint64_t v44 = (char *)v74;
      defaultLogger()();
      swift_errorRetain();
      swift_errorRetain();
      id v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        id v47 = (uint8_t *)swift_slowAlloc();
        v77._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)id v47 = 136315138;
        swift_getErrorValue();
        uint64_t v48 = Error.localizedDescription.getter();
        uint64_t v76 = sub_10004C3A4(v48, v49, &v77._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to write ISO 18013 payload to disk: %s", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v67);
    }
  }
  return result;
}

unint64_t sub_1000658BC()
{
  unint64_t result = qword_1001C1BB8;
  if (!qword_1001C1BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C1BB8);
  }
  return result;
}

uint64_t GenericPasswordKeychainWrapper.secItemAdd(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100065940(a1, a2, (uint64_t (*)(Class, uint64_t))&_SecItemAdd);
}

uint64_t GenericPasswordKeychainWrapper.secItemCopyMatching(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100065940(a1, a2, (uint64_t (*)(Class, uint64_t))&_SecItemCopyMatching);
}

uint64_t sub_100065940(uint64_t a1, uint64_t a2, uint64_t (*a3)(Class, uint64_t))
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v6 = a3(isa, a2);

  return v6;
}

Swift::Int32 __swiftcall GenericPasswordKeychainWrapper.secItemDelete(_:)(Swift::OpaquePointer a1)
{
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::Int32 v2 = SecItemDelete(isa);

  return v2;
}

uint64_t sub_1000659F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100065A28(a1, a2, a3, a4, (uint64_t (*)(Class, uint64_t))&_SecItemAdd);
}

uint64_t sub_100065A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100065A28(a1, a2, a3, a4, (uint64_t (*)(Class, uint64_t))&_SecItemCopyMatching);
}

uint64_t sub_100065A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(Class, uint64_t))
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = a5(isa, a2);

  return v8;
}

uint64_t type metadata accessor for GenericPasswordKeychainWrapper()
{
  return self;
}

id sub_100065AB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v98 = a2;
  uint64_t v99 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v92 = v4;
  __chkstk_darwin(v4);
  uint64_t v93 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006CC8(&qword_1001C1C58);
  __chkstk_darwin(v6 - 8);
  uint64_t v97 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for AnyCodableDictionary();
  uint64_t v94 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006CC8(&qword_1001C1C60);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AnyCodableArray();
  uint64_t v95 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = a3;
  AnyCodable.stringValue.getter();
  if (v23)
  {
    id v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = [v24 initWithElementIdentifier:v25 stringValue:v26];

    uint64_t v28 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v100, v28);
    return v27;
  }
  uint64_t v89 = v15;
  uint64_t v90 = v22;
  uint64_t v88 = v9;
  uint64_t v29 = v96;
  uint64_t v30 = (uint64_t)v97;
  uint64_t v31 = v100;
  uint64_t v32 = AnyCodable.dataValue.getter();
  if (v33 >> 60 != 15)
  {
    uint64_t v43 = v32;
    unint64_t v44 = v33;
    id v45 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v27 = [v45 initWithElementIdentifier:v46 dataValue:isa];
    sub_100009764(v43, v44);

    uint64_t v48 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v31, v48);
    return v27;
  }
  AnyCodable.dateValue.getter();
  uint64_t v34 = v19;
  int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  uint64_t v36 = v31;
  if (v35 == 1)
  {
    sub_100014BBC((uint64_t)v18, &qword_1001C15B0);
    uint64_t v37 = AnyCodable.intValue.getter();
    if (v38)
    {
      uint64_t v57 = AnyCodable.doubleValue.getter();
      if (v58)
      {
        char v61 = AnyCodable.BOOLValue.getter();
        if (v61 == 2)
        {
          AnyCodable.arrayValue.getter();
          uint64_t v62 = v95;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v12, 1, v13) != 1)
          {
            uint64_t v75 = v89;
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v89, v12, v13);
            id v76 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
            NSString v77 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unint64_t v78 = AnyCodableArray.asNSArray()();
            sub_100066604(v78);
            swift_bridgeObjectRelease();
            Class v79 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v55 = [v76 initWithElementIdentifier:v77 arrayValue:v79];

            uint64_t v80 = type metadata accessor for AnyCodable();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v36, v80);
            (*(void (**)(char *, uint64_t))(v62 + 8))(v75, v13);
            return v55;
          }
          sub_100014BBC((uint64_t)v12, &qword_1001C1C60);
          uint64_t v63 = v30;
          AnyCodable.dictValue.getter();
          uint64_t v64 = v94;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v30, 1, v29) != 1)
          {
            uint64_t v81 = v88;
            (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v88, v63, v29);
            id v82 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
            NSString v83 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v84 = AnyCodableDictionary.asNSDictionary()();
            sub_100066838(v84);
            swift_bridgeObjectRelease();
            Class v85 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v55 = [v82 initWithElementIdentifier:v83 dictionaryValue:v85];

            uint64_t v86 = type metadata accessor for AnyCodable();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v36, v86);
            (*(void (**)(char *, uint64_t))(v64 + 8))(v81, v29);
            return v55;
          }
          sub_100014BBC(v30, &qword_1001C1C58);
          uint64_t v65 = v93;
          defaultLogger()();
          unint64_t v66 = v98;
          swift_bridgeObjectRetain_n();
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.error.getter();
          BOOL v69 = os_log_type_enabled(v67, v68);
          uint64_t v70 = v99;
          if (v69)
          {
            uint64_t v71 = (uint8_t *)swift_slowAlloc();
            uint64_t v102 = swift_slowAlloc();
            *(_DWORD *)uint64_t v71 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v101 = sub_10004C3A4(v70, v66, &v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "Creating DCCredentialElement from unknown value type for element identifier %s", v71, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v91 + 8))(v65, v92);
          }
          id v87 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
          NSString v41 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v42 = [v87 initWithElementIdentifier:v41];
        }
        else
        {
          char v72 = v61;
          id v73 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
          NSString v41 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v42 = [v73 initWithElementIdentifier:v41 BOOLValue:v72 & 1];
        }
      }
      else
      {
        double v59 = *(double *)&v57;
        id v60 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        NSString v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v42 = [v60 initWithElementIdentifier:v41 doubleValue:v59];
      }
    }
    else
    {
      uint64_t v39 = v37;
      id v40 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      NSString v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v42 = [v40 initWithElementIdentifier:v41 intValue:v39];
    }
    id v55 = v42;

    uint64_t v74 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v36, v74);
  }
  else
  {
    uint64_t v50 = v90;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v90, v18, v34);
    id v51 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v53 = v34;
    Class v54 = Date._bridgeToObjectiveC()().super.isa;
    id v55 = [v51 initWithElementIdentifier:v52 dateValue:v54];

    uint64_t v56 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v36, v56);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v50, v53);
  }
  return v55;
}

uint64_t sub_100066604(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100068350(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100068370();
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100068350(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_100068350(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_10004DCD8(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_100068370();
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100068350(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_100068350(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_10004DCD8(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_100066838(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100006CC8(&qword_1001C1730);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v37[0] = *v17;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    v19;
    swift_dynamicCast();
    sub_100068370();
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10004DCD8(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10004DCD8(v36, v37);
    sub_10004DCD8(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_10004DCD8(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_100044DD8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100066BEC(uint64_t a1@<X8>)
{
  uint64_t v178 = a1;
  uint64_t v2 = type metadata accessor for AnyCodableDictionary();
  __chkstk_darwin(v2 - 8);
  uint64_t v168 = (char *)&v153 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AnyCodableArray();
  __chkstk_darwin(v4 - 8);
  unint64_t v170 = (void (**)(char *, uint64_t))((char *)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v175 = type metadata accessor for Logger();
  *(void *)&long long v169 = *(void *)(v175 - 8);
  uint64_t v6 = __chkstk_darwin(v175);
  unint64_t v172 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  Class v174 = (char *)&v153 - v9;
  __chkstk_darwin(v8);
  uint64_t v171 = (uint64_t *)((char *)&v153 - v10);
  uint64_t v11 = sub_100006CC8(&qword_1001C12C8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  NSData v173 = (uint64_t *)((char *)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v176 = (uint64_t)&v153 - v14;
  uint64_t v15 = type metadata accessor for AnyCodable();
  uint64_t v179 = *(void *)(v15 - 8);
  uint64_t v180 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v167 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v177 = (char *)&v153 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v153 - v21;
  __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v153 - v23;
  uint64_t v25 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v25 - 8);
  int64_t v27 = (char *)&v153 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  long long v32 = (char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  long long v34 = (char *)&v153 - v33;
  id v35 = [v1 stringValue];
  if (v35)
  {
    uint64_t v36 = v35;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v37 = v178;
    AnyCodable.init(value:)();
    uint64_t v38 = v180;
    uint64_t v39 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56);
    uint64_t v40 = v37;
LABEL_5:
    v39(v40, 0, 1, v38);
    return;
  }
  v159 = v34;
  uint64_t v160 = v32;
  *(void *)&long long v161 = v27;
  *(void *)&long long v162 = v29;
  uint64_t v163 = (unsigned int (**)(void *, uint64_t, void))v28;
  NSString v164 = v24;
  uint64_t v165 = v22;
  uint64_t v41 = v180;
  id v42 = [v1 dataValue];
  if (v42)
  {
    uint64_t v43 = v42;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v44 = v178;
    AnyCodable.init(value:)();
    uint64_t v39 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56);
    uint64_t v40 = v44;
    uint64_t v38 = v41;
    goto LABEL_5;
  }
  id v166 = v1;
  id v45 = [v1 dateValue];
  if (v45)
  {
    NSString v46 = v45;
    id v47 = v160;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v48 = v162;
    unint64_t v49 = *(void (**)(void, char *, unsigned int (**)(void *, uint64_t, void)))(v162 + 32);
    uint64_t v50 = v161;
    id v51 = v163;
    v49(v161, v47, v163);
    (*(void (**)(uint64_t, void, uint64_t, unsigned int (**)(void *, uint64_t, void)))(v48 + 56))(v50, 0, 1, v51);
    int v52 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v48 + 48))(v50, 1, v51);
    uint64_t v53 = v178;
    if (v52 != 1)
    {
      Class v54 = v159;
      v49(v159, (char *)v50, v51);
      (*(void (**)(char *, char *, unsigned int (**)(void *, uint64_t, void)))(v48 + 16))(v47, v54, v51);
      AnyCodable.init(value:)();
      (*(void (**)(char *, unsigned int (**)(void *, uint64_t, void)))(v48 + 8))(v54, v51);
      goto LABEL_93;
    }
  }
  else
  {
    uint64_t v50 = v161;
    (*(void (**)(void, uint64_t, uint64_t, unsigned int (**)(void *, uint64_t, void)))(v162 + 56))(v161, 1, 1, v163);
    uint64_t v53 = v178;
  }
  sub_100014BBC(v50, &qword_1001C15B0);
  id v55 = v166;
  id v56 = [v166 numberValue];
  if (v56)
  {
    uint64_t v57 = v56;
    id v58 = [v55 numericTypeHint];
    if (v58 == (id)3)
    {
      [v57 BOOLValue];
      AnyCodable.init(value:)();
    }
    else if (v58 == (id)2)
    {
      [v57 doubleValue];
      AnyCodable.init(value:)();
    }
    else
    {
      if (v58 != (id)1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v53, 1, 1, v41);

        return;
      }
      [v57 integerValue];
      AnyCodable.init(value:)();
    }

LABEL_93:
    Class v150 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56);
    uint64_t v151 = v53;
    goto LABEL_94;
  }
  id v59 = [v55 arrayValue];
  if (v59)
  {
    id v60 = v59;
    Class v174 = (char *)&type metadata for Any + 8;
    uint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v63 = *(char **)(v61 + 16);
    uint64_t v64 = v175;
    if (!v63)
    {
LABEL_92:
      swift_bridgeObjectRelease();
      AnyCodableArray.init(value:)();
      AnyCodable.init(value:)();
      goto LABEL_93;
    }
    *(void *)&long long v161 = v61;
    uint64_t v65 = v61 + 32;
    uint64_t v167 = (char *)(v179 + 48);
    uint64_t v168 = (char *)(v179 + 32);
    uint64_t v163 = (unsigned int (**)(void *, uint64_t, void))(v179 + 16);
    *(void *)&long long v162 = v179 + 8;
    unint64_t v172 = (char *)(v169 + 8);
    NSData v173 = _swiftEmptyArrayStorage;
    *(void *)&long long v62 = 136315138;
    long long v169 = v62;
    unint64_t v66 = v171;
    uint64_t v67 = (long long *)v176;
    while (1)
    {
      sub_10004DD90(v65, (uint64_t)v185);
      char v68 = swift_dynamicCast();
      uint64_t v177 = v63;
      if (v68)
      {
        long long v192 = v188;
        long long v193 = v189;
        uint64_t v194 = *(void *)&v190[0];
        sub_10006995C((uint64_t)&v192, (uint64_t)&v188);
        AnyCodable.init(value:)();
        if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))v167)(v67, 1, v41) != 1)
        {
          uint64_t v81 = *(void (**)(char *, char *, uint64_t))v168;
          uint64_t v82 = (uint64_t)v164;
          (*(void (**)(char *, long long *, uint64_t))v168)(v164, v67, v41);
          (*v163)(v165, v82, v41);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            NSData v173 = (void *)sub_1000D1284(0, v173[2] + 1, 1, (unint64_t)v173);
          }
          uint64_t v83 = v179;
          uint64_t v84 = v173;
          unint64_t v86 = v173[2];
          unint64_t v85 = v173[3];
          if (v86 >= v85 >> 1)
          {
            uint64_t v88 = sub_1000D1284(v85 > 1, v86 + 1, 1, (unint64_t)v173);
            uint64_t v83 = v179;
            uint64_t v84 = (void *)v88;
          }
          v84[2] = v86 + 1;
          unint64_t v87 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
          NSData v173 = v84;
          v81((char *)v84 + v87 + *(void *)(v83 + 72) * v86, v165, v41);
          (*(void (**)(char *, uint64_t))(v179 + 8))(v164, v41);
          sub_100047450((uint64_t)&v192);
          id v55 = v166;
          goto LABEL_22;
        }
        sub_100047450((uint64_t)&v192);
        BOOL v69 = v67;
        uint64_t v70 = &qword_1001C12C8;
      }
      else
      {
        *(void *)&v190[0] = 0;
        long long v188 = 0u;
        long long v189 = 0u;
        BOOL v69 = &v188;
        uint64_t v70 = &qword_1001C1360;
      }
      sub_100014BBC((uint64_t)v69, v70);
      defaultLogger()();
      id v71 = v55;
      char v72 = v66;
      id v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc();
        *(void *)&long long v192 = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = v169;
        id v76 = [v71 elementIdentifier];
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v79 = v78;

        uint64_t v53 = v178;
        uint64_t v80 = v77;
        id v55 = v166;
        *(void *)(v75 + 4) = sub_10004C3A4(v80, v79, (uint64_t *)&v192);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Cannot convert value in array %s to hashable", (uint8_t *)v75, 0xCu);
        swift_arrayDestroy();
        uint64_t v41 = v180;
        swift_slowDealloc();
        uint64_t v64 = v175;
        swift_slowDealloc();

        unint64_t v66 = v171;
        (*(void (**)(uint64_t *, uint64_t))v172)(v171, v64);
      }
      else
      {

        (*(void (**)(uint64_t *, uint64_t))v172)(v72, v64);
        unint64_t v66 = v72;
      }
      uint64_t v67 = (long long *)v176;
LABEL_22:
      v65 += 32;
      uint64_t v63 = v177 - 1;
      if (v177 == (char *)1) {
        goto LABEL_92;
      }
    }
  }
  id v89 = [v55 dictionaryValue];
  uint64_t v90 = v175;
  uint64_t v91 = v169;
  if (!v89)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v53, 1, 1, v41);
    return;
  }
  uint64_t v92 = v89;
  uint64_t v93 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v94 = sub_10004B220((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v176 = 0;
  uint64_t v96 = *(void *)(v93 + 64);
  v159 = (char *)v94;
  uint64_t v160 = (char *)(v93 + 64);
  uint64_t v97 = 1 << *(unsigned char *)(v93 + 32);
  uint64_t v98 = -1;
  if (v97 < 64) {
    uint64_t v98 = ~(-1 << v97);
  }
  unint64_t v99 = v98 & v96;
  NSString v164 = (char *)v190 + 8;
  uint64_t v165 = (char *)v93;
  unint64_t v170 = (void (**)(char *, uint64_t))(v91 + 8);
  uint64_t v171 = &v195;
  uint64_t v163 = (unsigned int (**)(void *, uint64_t, void))(v179 + 48);
  NSString v157 = (void (**)(char *, char *, uint64_t))(v179 + 16);
  uint64_t v158 = (void (**)(char *, long long *, uint64_t))(v179 + 32);
  uint64_t v155 = v179 + 40;
  Class v156 = (void (**)(char *, uint64_t))(v179 + 8);
  *(void *)&long long v169 = (unint64_t)(v97 + 63) >> 6;
  uint64_t v154 = v169 - 1;
  *(void *)&long long v95 = 136315138;
  long long v161 = v95;
  *(void *)&long long v95 = 136315394;
  long long v162 = v95;
  uint64_t v100 = v172;
LABEL_45:
  uint64_t v102 = (long long *)v173;
  uint64_t v101 = v174;
  uint64_t v103 = v177;
  if (v99)
  {
LABEL_46:
    unint64_t v104 = __clz(__rbit64(v99));
    v99 &= v99 - 1;
    unint64_t v105 = v104 | (v176 << 6);
LABEL_47:
    unint64_t v106 = v165;
    sub_10006995C(*((void *)v165 + 6) + 40 * v105, (uint64_t)&v188);
    sub_10004DD90(*((void *)v106 + 7) + 32 * v105, (uint64_t)v164);
    uint64_t v103 = v177;
    goto LABEL_66;
  }
  while (1)
  {
    uint64_t v107 = v176 + 1;
    if (__OFADD__(v176, 1))
    {
      __break(1u);
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    if (v107 < (uint64_t)v169)
    {
      unint64_t v108 = *(void *)&v160[8 * v107];
      if (v108) {
        goto LABEL_51;
      }
      uint64_t v109 = v176 + 2;
      ++v176;
      if (v107 + 1 < (uint64_t)v169)
      {
        unint64_t v108 = *(void *)&v160[8 * v109];
        if (v108) {
          goto LABEL_54;
        }
        uint64_t v176 = v107 + 1;
        if (v107 + 2 < (uint64_t)v169)
        {
          unint64_t v108 = *(void *)&v160[8 * v107 + 16];
          if (v108)
          {
            v107 += 2;
            goto LABEL_51;
          }
          uint64_t v109 = v107 + 3;
          uint64_t v176 = v107 + 2;
          if (v107 + 3 < (uint64_t)v169)
          {
            unint64_t v108 = *(void *)&v160[8 * v109];
            if (v108)
            {
LABEL_54:
              uint64_t v107 = v109;
LABEL_51:
              unint64_t v99 = (v108 - 1) & v108;
              unint64_t v105 = __clz(__rbit64(v108)) + (v107 << 6);
              uint64_t v176 = v107;
              goto LABEL_47;
            }
            while (1)
            {
              uint64_t v107 = v109 + 1;
              if (__OFADD__(v109, 1)) {
                break;
              }
              if (v107 >= (uint64_t)v169)
              {
                uint64_t v176 = v154;
                goto LABEL_65;
              }
              unint64_t v108 = *(void *)&v160[8 * v107];
              ++v109;
              if (v108) {
                goto LABEL_51;
              }
            }
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
        }
      }
    }
LABEL_65:
    unint64_t v99 = 0;
    uint64_t v191 = 0;
    memset(v190, 0, sizeof(v190));
    long long v188 = 0u;
    long long v189 = 0u;
LABEL_66:
    sub_1000699B8((uint64_t)&v188, (uint64_t)&v192);
    if (!*((void *)&v193 + 1)) {
      break;
    }
    long long v188 = v192;
    long long v189 = v193;
    *(void *)&v190[0] = v194;
    sub_10004DCD8(v171, v187);
    sub_10006995C((uint64_t)&v188, (uint64_t)v185);
    if (!swift_dynamicCast())
    {
      defaultLogger()();
      sub_10006995C((uint64_t)&v188, (uint64_t)v185);
      id v139 = v55;
      unint64_t v140 = Logger.logObject.getter();
      os_log_type_t v141 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v140, v141))
      {
        uint64_t v142 = swift_slowAlloc();
        *(void *)&long long v181 = swift_slowAlloc();
        *(_DWORD *)uint64_t v142 = v162;
        uint64_t v143 = AnyHashable.description.getter();
        *(void *)(v142 + 4) = sub_10004C3A4(v143, v144, (uint64_t *)&v181);
        swift_bridgeObjectRelease();
        sub_100047450((uint64_t)v185);
        *(_WORD *)(v142 + 12) = 2080;
        id v145 = [v139 elementIdentifier];
        uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v148 = v147;

        uint64_t v149 = v146;
        uint64_t v90 = v175;
        *(void *)(v142 + 14) = sub_10004C3A4(v149, v148, (uint64_t *)&v181);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "Key %s in dictionary %s is not a string", (uint8_t *)v142, 0x16u);
        swift_arrayDestroy();
        uint64_t v41 = v180;
        swift_slowDealloc();
        uint64_t v100 = v172;
        swift_slowDealloc();
      }
      else
      {

        sub_100047450((uint64_t)v185);
      }
      (*v170)(v100, v90);
      sub_10000B9DC((uint64_t)v187);
      sub_100047450((uint64_t)&v188);
      id v55 = v166;
      goto LABEL_45;
    }
    long long v110 = v181;
    sub_10004DD90((uint64_t)v187, (uint64_t)&v184);
    if (swift_dynamicCast())
    {
      v185[0] = v181;
      v185[1] = v182;
      uint64_t v186 = v183;
      sub_10006995C((uint64_t)v185, (uint64_t)&v181);
      AnyCodable.init(value:)();
      if ((*v163)(v102, 1, v41) == 1)
      {
        sub_100047450((uint64_t)v185);
        swift_bridgeObjectRelease();
        uint64_t v128 = v102;
        uint64_t v129 = &qword_1001C12C8;
        goto LABEL_85;
      }
      unint64_t v111 = *v158;
      (*v158)(v103, v102, v41);
      (*v157)(v167, v103, v41);
      uint64_t v112 = v159;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v181 = v112;
      unint64_t v115 = sub_10013C484(v110, *((uint64_t *)&v110 + 1));
      uint64_t v116 = *((void *)v112 + 2);
      BOOL v117 = (v114 & 1) == 0;
      uint64_t v118 = v116 + v117;
      if (__OFADD__(v116, v117)) {
        goto LABEL_98;
      }
      char v119 = v114;
      if (*((void *)v112 + 3) >= v118)
      {
        uint64_t v122 = v179;
        unint64_t v123 = v167;
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v41 = v180;
          uint64_t v124 = (void *)v181;
          if ((v119 & 1) == 0) {
            goto LABEL_77;
          }
        }
        else
        {
          sub_10009AF40();
          unint64_t v123 = v167;
          uint64_t v122 = v179;
          uint64_t v41 = v180;
          uint64_t v124 = (void *)v181;
          if ((v119 & 1) == 0) {
            goto LABEL_77;
          }
        }
      }
      else
      {
        sub_10009921C(v118, isUniquelyReferenced_nonNull_native);
        unint64_t v120 = sub_10013C484(v110, *((uint64_t *)&v110 + 1));
        if ((v119 & 1) != (v121 & 1)) {
          goto LABEL_101;
        }
        unint64_t v115 = v120;
        uint64_t v122 = v179;
        uint64_t v41 = v180;
        unint64_t v123 = v167;
        uint64_t v124 = (void *)v181;
        if ((v119 & 1) == 0)
        {
LABEL_77:
          v124[(v115 >> 6) + 8] |= 1 << v115;
          *(_OWORD *)(v124[6] + 16 * v115) = v110;
          v111((char *)(v124[7] + *(void *)(v122 + 72) * v115), (long long *)v123, v41);
          uint64_t v125 = v124[2];
          BOOL v126 = __OFADD__(v125, 1);
          uint64_t v127 = v125 + 1;
          if (v126) {
            goto LABEL_100;
          }
          v124[2] = v127;
          swift_bridgeObjectRetain();
          goto LABEL_79;
        }
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v122 + 40))(v124[7] + *(void *)(v122 + 72) * v115, v123, v41);
LABEL_79:
      uint64_t v101 = v174;
      uint64_t v90 = v175;
      uint64_t v100 = v172;
      uint64_t v102 = (long long *)v173;
      v159 = (char *)v181;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v103 = v177;
      (*v156)(v177, v41);
      sub_100047450((uint64_t)v185);
      sub_10000B9DC((uint64_t)v187);
      sub_100047450((uint64_t)&v188);
      id v55 = v166;
      if (v99) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v183 = 0;
      long long v181 = 0u;
      long long v182 = 0u;
      swift_bridgeObjectRelease();
      uint64_t v128 = &v181;
      uint64_t v129 = &qword_1001C1360;
LABEL_85:
      sub_100014BBC((uint64_t)v128, v129);
      defaultLogger()();
      id v130 = v166;
      uint64_t v131 = Logger.logObject.getter();
      os_log_type_t v132 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v131, v132))
      {
        uint64_t v133 = swift_slowAlloc();
        *(void *)&v185[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v133 = v161;
        id v134 = [v130 elementIdentifier];
        uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v137 = v136;

        uint64_t v41 = v180;
        uint64_t v138 = v135;
        uint64_t v90 = v175;
        *(void *)(v133 + 4) = sub_10004C3A4(v138, v137, (uint64_t *)v185);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v131, v132, "Cannot convert value in dictionary %s to hashable", (uint8_t *)v133, 0xCu);
        swift_arrayDestroy();
        uint64_t v102 = (long long *)v173;
        swift_slowDealloc();
        uint64_t v101 = v174;
        swift_slowDealloc();
      }
      else
      {
      }
      (*v170)(v101, v90);
      sub_10000B9DC((uint64_t)v187);
      sub_100047450((uint64_t)&v188);
      id v55 = v166;
      uint64_t v100 = v172;
      uint64_t v103 = v177;
      if (v99) {
        goto LABEL_46;
      }
    }
  }
  swift_release();
  AnyCodableDictionary.init(value:)();
  uint64_t v152 = v178;
  AnyCodable.init(value:)();
  Class v150 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56);
  uint64_t v151 = v152;
LABEL_94:
  v150(v151, 0, 1, v41);
}

uint64_t DCCredentialReaderAuthenticationPolicy.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&_DCCredentialReaderAuthenticationPolicyToString);
}

uint64_t sub_10006802C(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&_DCCredentialReaderAuthenticationPolicyToString);
}

uint64_t DCCredentialPresentmentAuthPolicy.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&_DCCredentialPresentmentAuthPolicyToString);
}

uint64_t sub_10006805C(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&_DCCredentialPresentmentAuthPolicyToString);
}

uint64_t DCCredentialPayloadProtectionPolicy.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&_DCCredentialPayloadProtectionPolicyToString);
}

uint64_t sub_10006808C(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&_DCCredentialPayloadProtectionPolicyToString);
}

uint64_t DCCredentialCryptoKeyUsage.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&DCCredentialCryptoKeyUsageToString);
}

uint64_t sub_1000680BC(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&DCCredentialCryptoKeyUsageToString);
}

uint64_t DCCredentialCryptoKeyType.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&DCCredentialCryptoKeyTypeToString);
}

uint64_t sub_1000680EC(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&DCCredentialCryptoKeyTypeToString);
}

uint64_t DCCredentialPayloadProtectionType.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&_DCCredentialPayloadProtectionTypeToString);
}

uint64_t sub_10006811C(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&_DCCredentialPayloadProtectionTypeToString);
}

uint64_t DCCredentialPayloadFormat.description.getter(uint64_t a1)
{
  return sub_10006814C(a1, (uint64_t (*)(void))&_DCCredentialPayloadFormatToString);
}

uint64_t sub_10006814C(uint64_t a1, uint64_t (*a2)(void))
{
  id v2 = (id)a2();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10006819C(uint64_t a1, uint64_t a2)
{
  return sub_1000681B4(a1, a2, (uint64_t (*)(void))&_DCCredentialPayloadFormatToString);
}

uint64_t sub_1000681B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = (id)a3(*v3);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

unint64_t sub_100068208()
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000024;
}

uint64_t sub_100068298(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000683F0(a1, a2, a3, (void *)*v3, &qword_1001C1C90, (uint64_t (*)(void))&type metadata accessor for SESKeystore.DesignatedKey);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000682D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000683F0(a1, a2, a3, (void *)*v3, &qword_1001C1C78, type metadata accessor for CredentialElement);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100068310(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100068638(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100068330(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000687A4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100068350(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000689EC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

unint64_t sub_100068370()
{
  unint64_t result = qword_1001C1C68;
  if (!qword_1001C1C68)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C1C68);
  }
  return result;
}

uint64_t sub_1000683B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100068B5C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000683D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100068CE8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000683F0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006CC8(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100068638(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006CC8(&qword_1001C12D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000687A4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006CC8(&qword_1001C1C88);
  uint64_t v10 = *(void *)(sub_100006CC8(&qword_1001C12E8) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100006CC8(&qword_1001C12E8) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000689EC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006CC8(&qword_1001C08A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100068B5C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006CC8(&qword_1001C1C70);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_100006CC8((uint64_t *)&unk_1001C4980);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100068CE8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006CC8(&qword_1001C1C98);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100068E48(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = (void *)type metadata accessor for Logger();
  uint64_t v39 = (void (**)(void, id))*(v7 - 1);
  id v40 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006CC8(&qword_1001C0B68);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for COSEKey();
  uint64_t v44 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v43 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  id v45 = sub_1000698C8;
  uint64_t v46 = a1;
  unint64_t v15 = v14 + 4;
  os_unfair_lock_lock(v14 + 4);
  sub_1000698E4(v16);
  if (v1)
  {
    os_unfair_lock_unlock(v15);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v15);
    if (v48 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    uint64_t v38 = v6;
    uint64_t v41 = v47;
    unint64_t v42 = v48;
    __chkstk_darwin(v17);
    os_unfair_lock_lock(v15);
    sub_100069A20(v18);
    os_unfair_lock_unlock(v15);
    if (v48 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v38, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
LABEL_8:
      sub_100009764(v41, v42);
      return;
    }
    uint64_t v36 = v47;
    unint64_t v37 = v48;
    sub_100069D68((uint64_t)v12);
    uint64_t v19 = v44;
    uint64_t v20 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v12, 1, v49) == 1)
    {
      uint64_t v21 = v38;
      sub_100014BBC((uint64_t)v12, &qword_1001C0B68);
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v21, enum case for DIPError.Code.idcsCOSEKeyCreationFailed(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_100009764(v36, v37);
      goto LABEL_8;
    }
    id v35 = v9;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v43, v12, v20);
    type metadata accessor for CBOREncoder();
    swift_allocObject();
    CBOREncoder.init()();
    sub_100056460((unint64_t *)&unk_1001C0BD0, (void (*)(uint64_t))&type metadata accessor for COSEKey);
    uint64_t v33 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    unint64_t v34 = v22;
    uint64_t v23 = swift_release();
    __chkstk_darwin(v23);
    os_unfair_lock_lock(v15);
    sub_100069938(&v47);
    os_unfair_lock_unlock(v15);
    unint64_t v24 = v35;
    if (v47)
    {
      uint64_t v25 = defaultLogger()();
      __chkstk_darwin(v25);
      Logger.sensitive(_:)();
      ((void (**)(char *, id))v39)[1](v24, v40);
      id v40 = objc_allocWithZone((Class)DCCredentialCryptoKey);
      swift_bridgeObjectRetain();
      uint64_t v39 = (void (**)(void, id))String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v28 = v36;
      unint64_t v27 = v37;
      Class v29 = Data._bridgeToObjectiveC()().super.isa;
      Class v30 = Data._bridgeToObjectiveC()().super.isa;
      Class v31 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      long long v32 = v39;
      [v40 initWithIdentifier:v39 publicKey:isa publicKeyIdentifier:v29 publicKeyCOSEKey:v30 keyType:0 keyUsage:0 attestation:v31];
      sub_1000035EC(v33, v34);
      sub_100009764(v28, v27);
      sub_100009764(v41, v42);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v38, enum case for DIPError.Code.idcsInvalidAttestation(_:), v3);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100056460((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_1000035EC(v33, v34);
      sub_100009764(v41, v42);
      sub_100009764(v36, v37);
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v49);
  }
}

void sub_1000698C8(uint64_t *a1@<X8>)
{
}

uint64_t sub_1000698E4(uint64_t a1)
{
  return sub_100147748(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_100069900(uint64_t *a1@<X8>)
{
}

uint64_t sub_10006991C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100069D00(a1);
}

void *sub_100069938@<X0>(void *a1@<X8>)
{
  return sub_10010CB24(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

unint64_t sub_100069954()
{
  return sub_100068208();
}

uint64_t sub_10006995C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000699B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C1C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100069A20(uint64_t a1)
{
  return sub_1000698E4(a1);
}

uint64_t sub_100069A38()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v2 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v4 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100069B34()
{
  return type metadata accessor for CredentialKey(0);
}

uint64_t type metadata accessor for CredentialKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C1CC8);
}

uint64_t sub_100069B5C()
{
  uint64_t result = type metadata accessor for CredentialKeyType();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CredentialKeyUsage();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

void sub_100069C40(uint64_t *a1@<X8>)
{
}

void sub_100069C6C(uint64_t *a1@<X8>)
{
}

void sub_100069C98(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)DeviceIdentityKey.key.getter();
  uint64_t v5 = a1();
  uint64_t v7 = v6;

  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_100069D00@<X0>(uint64_t *a1@<X8>)
{
  DeviceIdentityKey.certificates.getter();
  type metadata accessor for SecCertificate(0);
  uint64_t v2 = Array<A>.base64EncodedStrings()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100069D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100006CC8(&qword_1001C0B68);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  unint64_t v14 = sub_10006BE78;
  uint64_t v15 = v1;
  uint64_t v7 = v6 + 4;
  os_unfair_lock_lock(v6 + 4);
  sub_1000698E4(v8);
  os_unfair_lock_unlock(v7);
  if (v16 >> 60 == 15)
  {
    uint64_t v9 = type metadata accessor for COSEKey();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    COSEKey.init(ec2CurveIdentifier:publicKey:)();
    uint64_t v11 = type metadata accessor for COSEKey();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v11) == 1)
    {
      sub_10001B61C((uint64_t)v5);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
    }
    else
    {
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a1, v5, v11);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
  }
}

uint64_t sub_100069F48()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey;
  uint64_t v2 = type metadata accessor for DeviceIdentityKey();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t sub_100069FB4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v2 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v4 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  uint64_t v5 = v0 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey;
  uint64_t v6 = type metadata accessor for DeviceIdentityKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_10006A0F4()
{
  return type metadata accessor for DeviceIdentityKeyBackedCredentialKey(0);
}

uint64_t type metadata accessor for DeviceIdentityKeyBackedCredentialKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C1D90);
}

uint64_t sub_10006A11C()
{
  uint64_t result = type metadata accessor for DeviceIdentityKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006A1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for CredentialKeyUsage();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CredentialKeyType();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for CredentialKeyType.sep(_:), v10);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for CredentialKeyUsage.keySigning(_:), v6);
  uint64_t v14 = v3 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey;
  uint64_t v15 = type metadata accessor for DeviceIdentityKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a3, v15);
  uint64_t v16 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)(v3 + v16) = v17;
  uint64_t v18 = v21;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v13, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage, v9, v6);
  return v3;
}

uint64_t sub_10006A400(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  uint64_t v18 = v2;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v15 = sub_10006BE58;
  uint64_t v16 = &v17;
  uint64_t v11 = v10 + 4;
  os_unfair_lock_lock(v10 + 4);
  sub_1000698E4(v12);
  os_unfair_lock_unlock(v11);
  if (!v3) {
    return v21;
  }
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10006BE10((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_errorRelease();
}

void sub_10006A654(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)DeviceIdentityKey.key.getter();
  uint64_t v4 = (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
  uint64_t v5 = SecKeyRef.signSHA256Digest(_:algorithm:)();
  uint64_t v7 = v6;

  if (!v1)
  {
    *a1 = v5;
    a1[1] = v7;
  }
}

uint64_t sub_10006A6FC()
{
  return type metadata accessor for KeySigningKey(0);
}

uint64_t type metadata accessor for KeySigningKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C1E88);
}

uint64_t sub_10006A728()
{
  return type metadata accessor for DeviceEncryptionKey(0);
}

uint64_t type metadata accessor for DeviceEncryptionKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C1F90);
}

uint64_t sub_10006A750()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10006A788()
{
  return sub_10006B0C0(&OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier, &OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
}

uint64_t sub_10006A79C()
{
  return sub_10006B120(&OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier, &OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
}

uint64_t sub_10006A7B0()
{
  return type metadata accessor for LegacySEPresentmentKey(0);
}

uint64_t type metadata accessor for LegacySEPresentmentKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2090);
}

uint64_t sub_10006A7D8()
{
  return sub_10006B064();
}

uint64_t sub_10006A7E4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
  sub_10000354C(v1, *(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey + 8));
  return v1;
}

uint64_t sub_10006A824()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier);
  sub_10000354C(v1, *(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier + 8));
  return v1;
}

uint64_t sub_10006A864()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 8);
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 16);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 24);
  unint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  unint64_t v7 = *(void *)(v1 + 48);
  sub_1000035EC(v2, v3);
  sub_1000035EC(v4, v5);

  return sub_1000035EC(v6, v7);
}

uint64_t sub_10006A8C8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v2 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v4 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  sub_1000035EC(*(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier), *(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier + 8));
  sub_1000035EC(*(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey), *(void *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey + 8));
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 24);
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 32);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 40);
  unint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 48);
  sub_1000035EC(*(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 8), *(void *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 16));
  sub_1000035EC(v5, v6);
  sub_1000035EC(v7, v8);

  return swift_deallocClassInstance();
}

uint64_t sub_10006AA30()
{
  return type metadata accessor for NewlyCreatedLegacySEPresentmentKey(0);
}

uint64_t type metadata accessor for NewlyCreatedLegacySEPresentmentKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2178);
}

uint64_t sub_10006AA58()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10006AA9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006CC8(&qword_1001C0B68);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000354C(*(void *)(v1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey), *(void *)(v1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey + 8));
  COSEKey.init(ec2CurveIdentifier:publicKey:)();
  uint64_t v10 = type metadata accessor for COSEKey();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v9, v10);
  }
  sub_10001B61C((uint64_t)v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v3);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10006BE10((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

uint64_t sub_10006AD68()
{
  return sub_10006AE70(&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_10006AD84()
{
  return sub_10006AEF4(&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_10006ADA0()
{
  return type metadata accessor for SESPresentmentKey(0);
}

uint64_t type metadata accessor for SESPresentmentKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2290);
}

uint64_t sub_10006ADC8()
{
  return sub_10006B064();
}

uint64_t sub_10006ADD4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
  sub_10000354C(v1, *(void *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey + 8));
  return v1;
}

uint64_t sub_10006AE14()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
  sub_10000354C(v1, *(void *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier + 8));
  return v1;
}

uint64_t sub_10006AE54()
{
  return sub_10006AE70(&OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
}

uint64_t sub_10006AE70(void *a1, void *a2, void *a3)
{
  sub_1000035EC(*(void *)(v3 + *a1), *(void *)(v3 + *a1 + 8));
  sub_1000035EC(*(void *)(v3 + *a2), *(void *)(v3 + *a2 + 8));
  unint64_t v6 = (uint64_t *)(v3 + *a3);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_1000035EC(v7, v8);
}

uint64_t sub_10006AED8()
{
  return sub_10006AEF4(&OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
}

uint64_t sub_10006AEF4(void *a1, void *a2, void *a3)
{
  swift_bridgeObjectRelease();
  uint64_t v7 = v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v8 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v10 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  sub_1000035EC(*(void *)(v3 + *a1), *(void *)(v3 + *a1 + 8));
  sub_1000035EC(*(void *)(v3 + *a2), *(void *)(v3 + *a2 + 8));
  sub_1000035EC(*(void *)(v3 + *a3), *(void *)(v3 + *a3 + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_10006B03C()
{
  return type metadata accessor for ProgenitorKey(0);
}

uint64_t type metadata accessor for ProgenitorKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2380);
}

uint64_t sub_10006B064()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10006B0AC()
{
  return sub_10006B0C0(&OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_10006B0C0(void *a1, void *a2)
{
  sub_1000035EC(*(void *)(v2 + *a1), *(void *)(v2 + *a1 + 8));
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];

  return sub_1000035EC(v5, v6);
}

uint64_t sub_10006B10C()
{
  return sub_10006B120(&OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_10006B120(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v5 = v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v6 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v8 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  sub_1000035EC(*(void *)(v2 + *a1), *(void *)(v2 + *a1 + 8));
  sub_1000035EC(*(void *)(v2 + *a2), *(void *)(v2 + *a2 + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_10006B24C()
{
  return type metadata accessor for ExternalSEPresentmentKey(0);
}

uint64_t type metadata accessor for ExternalSEPresentmentKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2468);
}

uint64_t sub_10006B274()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10006B2B8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey);
  sub_10000354C(v1, *(void *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey + 8));
  return v1;
}

uint64_t sub_10006B2F8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
  sub_10000354C(v1, *(void *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier + 8));
  return v1;
}

uint64_t sub_10006B338()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key;
  uint64_t v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier);
  unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier + 8);

  return sub_1000035EC(v3, v4);
}

uint64_t sub_10006B3B8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v2 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v4 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  uint64_t v5 = v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_1000035EC(*(void *)(v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier), *(void *)(v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_10006B50C()
{
  return type metadata accessor for PayloadProtectionKey(0);
}

uint64_t type metadata accessor for PayloadProtectionKey(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2548);
}

uint64_t sub_10006B534()
{
  uint64_t result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006B5CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for Insecure.SHA1();
      sub_10006BE10(&qword_1001C0BB8, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B6AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  return sub_10006B910(a1, a2, a3, a4, a5, a6, a7, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier, (unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
}

uint64_t sub_10006B720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  type metadata accessor for LegacySEPresentmentKey(0);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v17 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_keySlot;
  *(void *)uint64_t v18 = a8;
  *(unsigned char *)(v18 + 8) = a9 & 1;
  uint64_t v19 = (void *)(v17 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier);
  *uint64_t v19 = a3;
  v19[1] = a4;
  uint64_t v20 = (void *)(v17 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
  *uint64_t v20 = a5;
  v20[1] = a6;
  uint64_t v21 = v17 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v22 = enum case for CredentialKeyUsage.presentment(_:);
  uint64_t v23 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
  uint64_t v24 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v25 = swift_allocObject();
  *(void *)(v17 + v24) = v25;
  *(_DWORD *)(v25 + 16) = 0;
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v26 = v17 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v27 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, a7, v27);
  return v17;
}

uint64_t sub_10006B89C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  return sub_10006B910(a1, a2, a3, a4, a5, a6, a7, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier, &enum case for CredentialKeyUsage.progenitor(_:));
}

uint64_t sub_10006B910(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, unsigned int *a11)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v46 = a10;
  uint64_t v47 = a11;
  uint64_t v17 = type metadata accessor for Insecure.SHA1();
  uint64_t v43 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Insecure.SHA1Digest();
  uint64_t v44 = *(void *)(v20 - 8);
  uint64_t v45 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (uint64_t *)(a7 + *a8);
  *uint64_t v23 = a3;
  v23[1] = a4;
  uint64_t v24 = (uint64_t *)(a7 + *a9);
  *uint64_t v24 = a5;
  v24[1] = a6;
  swift_retain();
  sub_10000354C(a3, a4);
  sub_10000354C(a5, a6);
  sub_10006BE10(&qword_1001C0BB8, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1);
  dispatch thunk of HashFunction.init()();
  switch(a6 >> 62)
  {
    case 1uLL:
      if (a5 >> 32 < (int)a5) {
        __break(1u);
      }
      sub_10000354C(a5, a6);
      sub_10006B5CC((int)a5, a5 >> 32);
      break;
    case 2uLL:
      uint64_t v25 = *(void *)(a5 + 16);
      uint64_t v26 = *(void *)(a5 + 24);
      sub_10000354C(a5, a6);
      swift_retain();
      swift_retain();
      sub_10006B5CC(v25, v26);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v50, 0, 14);
      goto LABEL_7;
    default:
      v50[0] = a5;
      LOWORD(v50[1]) = a6;
      BYTE2(v50[1]) = BYTE2(a6);
      BYTE3(v50[1]) = BYTE3(a6);
      BYTE4(v50[1]) = BYTE4(a6);
      BYTE5(v50[1]) = BYTE5(a6);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_1000035EC(a5, a6);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v17);
  sub_10006BE10(&qword_1001C0BC0, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1Digest);
  uint64_t v27 = v45;
  uint64_t v28 = Digest.data.getter();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v27);
  Class v31 = (uint64_t *)(a7 + *v46);
  *Class v31 = v28;
  v31[1] = v30;
  uint64_t v32 = a7 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  uint64_t v33 = enum case for CredentialKeyType.ses(_:);
  uint64_t v34 = type metadata accessor for CredentialKeyType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(v32, v33, v34);
  uint64_t v35 = a7 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  uint64_t v36 = *v47;
  uint64_t v37 = type metadata accessor for CredentialKeyUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v35, v36, v37);
  uint64_t v38 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  sub_100006CC8(&qword_1001C2600);
  uint64_t v39 = swift_allocObject();
  *(void *)(a7 + v38) = v39;
  *(_DWORD *)(v39 + 16) = 0;
  uint64_t v40 = v49;
  *(void *)(a7 + 16) = v48;
  *(void *)(a7 + 24) = v40;
  return a7;
}

uint64_t sub_10006BE10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10006BE58(uint64_t *a1@<X8>)
{
}

void sub_10006BE78(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)DeviceIdentityKey.key.getter();
  uint64_t v3 = SecKeyRef.publicKeyData.getter();
  uint64_t v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t getEnumTagSinglePayload for PresentmentSessionOptions(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PresentmentSessionOptions(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PresentmentSessionOptions()
{
  return &type metadata for PresentmentSessionOptions;
}

uint64_t sub_10006BF3C()
{
  _StringGuts.grow(_:)(169);
  v0._uint64_t countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x800000010017D970;
  String.append(_:)(v0);
  id v1 = (id)DCPresentmentSessionEncryptionModeToString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v6._object = (void *)0x800000010017D9B0;
  String.append(_:)(v6);
  id v7 = (id)DCPresentmentSessionResponseEncryptionModeToString();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v12._object = (void *)0x800000010017D9D0;
  String.append(_:)(v12);
  id v13 = (id)DCCredentialReaderAuthenticationPolicyToString();
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x800000010017D9F0;
  v18._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v18);
  id v19 = (id)DCPresentmentElementFallbackModeToString();
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v24._object = (void *)0x800000010017DA10;
  String.append(_:)(v24);
  id v25 = (id)DCPresentmentMessageEncodingFormatToString();
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10006C15C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_10006C220, 0, 0);
}

uint64_t sub_10006C220()
{
  id v1 = *(void ***)(v0 + 24);
  id v2 = [*(id *)(v0 + 16) credentialIdentifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = *(uint64_t *)((char *)v1 + *(int *)(type metadata accessor for PresentmentProposal() + 28));
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v9 = *v1;
  swift_bridgeObjectRetain();
  id v10 = [v9 readerMetadata];
  Swift::String v11 = v10;
  if (v10)
  {
    id v12 = [v10 identifier];

    Swift::String v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (void *)swift_allocObject();
  *(void *)(v0 + 64) = v15;
  _OWORD v15[2] = v3;
  v15[3] = v5;
  v15[4] = v8;
  v15[5] = v7;
  v15[6] = v11;
  v15[7] = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v0 + 72) = v16;
  *(void *)(v16 + 16) = sub_100086264;
  *(void *)(v16 + 24) = v15;
  swift_retain();
  Swift::String v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v17;
  *Swift::String v17 = v0;
  v17[1] = sub_10006C404;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_10006C404()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_10006C588;
  }
  else
  {
    swift_release();
    swift_release();
    id v2 = sub_10006C528;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10006C528()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006C588()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  swift_release();
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10006C660(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  sub_10015A230(a1, a2, a3, a4, a5, a6, a7);
  if (!v7) {
    sub_100007290();
  }
}

uint64_t sub_10006C68C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v3[14] = v6;
  v3[15] = *(void *)(v6 - 8);
  v3[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ISO18013SessionTranscript();
  v3[17] = v7;
  v3[18] = *(void *)(v7 - 8);
  v3[19] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2840);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = *(void *)(type metadata accessor for CredentialElement(0) - 8);
  v3[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013KnownDocTypes();
  v3[25] = v8;
  v3[26] = *(void *)(v8 - 8);
  v3[27] = swift_task_alloc();
  sub_100006CC8(&qword_1001C28F0);
  v3[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PresentmentProposal();
  v3[29] = v9;
  v3[30] = *(void *)(v9 - 8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome();
  v3[33] = v10;
  v3[34] = *(void *)(v10 - 8);
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[38] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPSignpost();
  v3[39] = v11;
  v3[40] = *(void *)(v11 - 8);
  v3[41] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v3[42] = v12;
  v3[43] = *(void *)(v12 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  return _swift_task_switch(sub_10006CB88, 0, 0);
}

uint64_t sub_10006CB88()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder buildCredentialResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void **)(v0 + 32);
  uint64_t v8 = *(uint64_t **)(v0 + 40);

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 376) = v9;
  *(void *)(v0 + 384) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v4, v5);
  static IDCSSignposts.presentmentBuildResponse.getter();
  DIPSignpost.init(_:)();
  *(_WORD *)(v0 + 544) = 2;
  *(_OWORD *)(v0 + 16) = xmmword_100176E40;
  *(unsigned char *)(v0 + 546) = 2;
  uint64_t v10 = *v8;
  id v11 = [v7 credentialIdentifier];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (*(void *)(v10 + 16) && (unint64_t v15 = sub_10013C484(v12, v14), (v16 & 1) != 0))
  {
    sub_100084CE4(*(void *)(v10 + 56) + *(void *)(*(void *)(v0 + 240) + 72) * v15, *(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, v17, 1, v18);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18) == 1)
  {
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v22 = *(void *)(v0 + 56);
    uint64_t v23 = *(void *)(v0 + 64);
    Swift::String v24 = *(void **)(v0 + 32);
    sub_100014BBC(*(void *)(v0 + 224), &qword_1001C28F0);
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v25 = [v24 credentialIdentifier];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    v29._uint64_t countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 0xD000000000000011;
    v30._object = (void *)0x800000010017E470;
    String.append(_:)(v30);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v21, enum case for DIPError.Code.idcsInvalidPresentmentSelection(_:), v22);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v32 = *(void *)(v0 + 272);
    Class v31 = *(uint64_t **)(v0 + 280);
    uint64_t v57 = *(void *)(v0 + 264);
    uint64_t v33 = *(void *)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 96);
    uint64_t v35 = *(void *)(v0 + 80);
    (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v36 = swift_allocError();
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v37(v38, v34, v35);
    *Class v31 = v36;
    (*(void (**)(uint64_t *, void, uint64_t))(v32 + 104))(v31, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v57);
    uint64_t v39 = *(void *)(v0 + 320);
    uint64_t v55 = *(void *)(v0 + 328);
    uint64_t v56 = *(void *)(v0 + 312);
    uint64_t v40 = *(void *)(v0 + 296);
    uint64_t v41 = *(void *)(v0 + 272);
    uint64_t v54 = *(void *)(v0 + 264);
    uint64_t v42 = *(void *)(v0 + 96);
    uint64_t v44 = *(void *)(v0 + 80);
    uint64_t v43 = *(void *)(v0 + 88);
    uint64_t v45 = *(void *)(v0 + 48);
    uint64_t v53 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t))(v41 + 32))(v40);
    swift_allocError();
    v37(v46, v42, v44);
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    sub_1000711A8(v45, (unsigned char *)(v0 + 545), v53, v40, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v55);
    sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v54);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v55, v56);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  else
  {
    sub_100085F0C(*(void *)(v0 + 224), *(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v49;
    *uint64_t v49 = v0;
    v49[1] = sub_10006D308;
    uint64_t v50 = *(void *)(v0 + 248);
    uint64_t v51 = *(void *)(v0 + 256);
    uint64_t v52 = *(void *)(v0 + 32);
    return sub_10007251C(v50, v51, v52);
  }
}

uint64_t sub_10006D308(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 400) = a1;
  *(void *)(v3 + 408) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100070588;
  }
  else {
    uint64_t v4 = sub_10006D41C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10006D41C()
{
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void ***)(v0 + 256);
  sub_100085F74((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  sub_100085F0C(v2, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  uint64_t v4 = *v3;
  id v5 = v1;
  id v6 = [v4 readerMetadata];
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 identifier];
  }
  *(unsigned char *)(v0 + 544) = v7 != 0;
  id v9 = [v4 authACL];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  uint64_t v14 = *(void *)(v0 + 256);
  sub_100009764(0, 0xF000000000000000);
  *(void *)(v0 + 16) = v11;
  *(void *)(v0 + 24) = v13;
  uint64_t v15 = *(void *)(v14 + 8);
  char v16 = *(void **)(v0 + 400);
  if (v15)
  {
    swift_bridgeObjectRetain();
    id v17 = [v16 elementsToPresent];
    if (v17)
    {
      uint64_t v18 = v17;
      sub_100006CC8(&qword_1001C3C70);
      uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v41 = *(void *)(v0 + 408);
    *(void *)(v0 + 416) = sub_10008328C(v15, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = swift_bridgeObjectRetain();
    uint64_t v43 = sub_100071574(v42);
    *(void *)(v0 + 424) = v41;
    swift_bridgeObjectRelease();
    uint64_t v44 = v43[2];
    if (v44)
    {
      uint64_t v45 = *(void *)(v0 + 184);
      uint64_t v46 = *(void *)(v0 + 192);
      uint64_t v47 = (uint64_t)v43 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
      uint64_t v48 = *(void *)(v45 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v49 = *(uint64_t **)(v0 + 192);
        sub_100084CE4(v47, (uint64_t)v49, type metadata accessor for CredentialElement);
        uint64_t v50 = *v49;
        uint64_t v51 = *(void *)(v0 + 192);
        if (v50 == 0x7469617274726F70 && *(void *)(v46 + 8) == 0xE800000000000000) {
          break;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_100085F74(v51, type metadata accessor for CredentialElement);
        if (v53) {
          goto LABEL_25;
        }
        v47 += v48;
        if (!--v44)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
      }
      sub_100085F74(*(void *)(v0 + 192), type metadata accessor for CredentialElement);
LABEL_25:
      swift_bridgeObjectRelease_n();
      char v54 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_23:
      char v54 = 0;
    }
    uint64_t v55 = *(id **)(v0 + 256);
    uint64_t v57 = *(void *)(v0 + 208);
    uint64_t v56 = *(void *)(v0 + 216);
    uint64_t v58 = *(void *)(v0 + 200);
    *(unsigned char *)(v0 + 546) = v54;
    id v59 = [*v55 docType];
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v61;

    (*(void (**)(uint64_t, void, uint64_t))(v57 + 104))(v56, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v58);
    uint64_t v63 = ISO18013KnownDocTypes.rawValue.getter();
    uint64_t v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    if (v60 == v63 && v62 == v65) {
      char v67 = 1;
    }
    else {
      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v68 = *(void *)(v0 + 40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v0 + 545) = v67 & 1;
    uint64_t v69 = type metadata accessor for PresentmentRequestInterpretation(0);
    *(void *)(v0 + 432) = v69;
    uint64_t v70 = v68 + *(int *)(v69 + 28);
    unint64_t v78 = (uint64_t (*)(uint64_t))((char *)&dword_1001C28F8 + dword_1001C28F8);
    id v71 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v71;
    void *v71 = v0;
    v71[1] = sub_10006DCFC;
    return v78(v70);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v22 = *(void *)(v0 + 56);
    uint64_t v23 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v21, enum case for DIPError.Code.idcsMissingProposalElements(_:), v22);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_100085F74(v20, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t v25 = *(void *)(v0 + 272);
    Swift::String v24 = *(uint64_t **)(v0 + 280);
    uint64_t v77 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 88);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 80);
    (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v29 = swift_allocError();
    os_log_type_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v74(v30, v27, v28);
    *Swift::String v24 = v29;
    (*(void (**)(uint64_t *, void, uint64_t))(v25 + 104))(v24, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v77);
    uint64_t v31 = *(void *)(v0 + 320);
    uint64_t v75 = *(void *)(v0 + 328);
    uint64_t v76 = *(void *)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 296);
    uint64_t v33 = *(void *)(v0 + 272);
    uint64_t v73 = *(void *)(v0 + 264);
    uint64_t v34 = *(void *)(v0 + 96);
    uint64_t v36 = *(void *)(v0 + 80);
    uint64_t v35 = *(void *)(v0 + 88);
    uint64_t v37 = *(void *)(v0 + 48);
    uint64_t v72 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t))(v33 + 32))(v32);
    swift_allocError();
    v74(v38, v34, v36);
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    sub_1000711A8(v37, (unsigned char *)(v0 + 545), v72, v32, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v75);
    sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v73);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v75, v76);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
}

uint64_t sub_10006DCFC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 547) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006DDFC, 0, 0);
}

uint64_t sub_10006DDFC()
{
  if (*(unsigned char *)(v0 + 547) != 1)
  {
    uint64_t v11 = *(void **)(v0 + 400);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 72);
    uint64_t v14 = *(void *)(v0 + 56);
    uint64_t v15 = *(void *)(v0 + 64);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v13, enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:), v14);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_7;
  }
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  sub_100037898(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 432) + 24), v1, &qword_1001C2840);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void **)(v0 + 400);
    sub_100014BBC(*(void *)(v0 + 168), &qword_1001C2840);
    id v5 = [v4 sessionTranscript];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)(v0 + 424);
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      sub_100082360();
      sub_100085EC4(&qword_1001C2908, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionTranscript);
      dispatch thunk of CBORDecoder.decode<A>(_:from:)();
      if (v7)
      {
        uint64_t v11 = *(void **)(v0 + 400);
        uint64_t v12 = *(void *)(v0 + 256);
        swift_release();
        sub_1000035EC(v8, v10);
        swift_bridgeObjectRelease();

LABEL_7:
        sub_100085F74(v12, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
        uint64_t v17 = *(void *)(v0 + 272);
        char v16 = *(uint64_t **)(v0 + 280);
        uint64_t v51 = *(void *)(v0 + 264);
        uint64_t v18 = *(void *)(v0 + 96);
        uint64_t v52 = *(void *)(v0 + 88);
        uint64_t v19 = *(void *)(v0 + 80);
        (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v20 = swift_allocError();
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
        v21(v22, v18, v19);
        *char v16 = v20;
        (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v16, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v51);
        uint64_t v23 = *(void *)(v0 + 320);
        uint64_t v49 = *(void *)(v0 + 328);
        uint64_t v50 = *(void *)(v0 + 312);
        uint64_t v24 = *(void *)(v0 + 296);
        uint64_t v25 = *(void *)(v0 + 272);
        uint64_t v48 = *(void *)(v0 + 264);
        uint64_t v26 = *(void *)(v0 + 96);
        uint64_t v27 = *(void *)(v0 + 80);
        uint64_t v28 = *(void *)(v0 + 88);
        uint64_t v29 = *(void *)(v0 + 48);
        uint64_t v47 = *(void *)(v0 + 40);
        (*(void (**)(uint64_t))(v25 + 32))(v24);
        swift_allocError();
        v21(v30, v26, v27);
        swift_willThrow();
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
        sub_1000711A8(v29, (unsigned char *)(v0 + 545), v47, v24, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v49);
        sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v48);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v49, v50);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
        return v31();
      }
      uint64_t v38 = *(void *)(v0 + 176);
      uint64_t v39 = *(void *)(v0 + 160);
      uint64_t v40 = *(void *)(v0 + 136);
      uint64_t v41 = *(void *)(v0 + 144);
      swift_release();
      sub_1000035EC(v8, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v39, 0, 1, v40);
      sub_100037944(v39, v38, &qword_1001C2840);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 144) + 56))(*(void *)(v0 + 176), 1, 1, *(void *)(v0 + 136));
    }
  }
  else
  {
    uint64_t v33 = *(void *)(v0 + 176);
    uint64_t v35 = *(void *)(v0 + 144);
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v36 = *(void *)(v0 + 136);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
    v37(v34, *(void *)(v0 + 168), v36);
    v37(v33, v34, v36);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v36);
  }
  uint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_10006E5CC;
  uint64_t v43 = *(void *)(v0 + 416);
  uint64_t v44 = *(void *)(v0 + 400);
  uint64_t v45 = *(void *)(v0 + 256);
  uint64_t v46 = *(void *)(v0 + 176);
  return sub_100077860(v44, v45, v43, v46);
}

uint64_t sub_10006E5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[57] = a1;
  v4[58] = a2;
  v4[59] = v2;
  swift_task_dealloc();
  if (v2)
  {
    id v5 = (void *)v4[50];
    swift_bridgeObjectRelease();

    return _swift_task_switch(sub_100070978, 0, 0);
  }
  else
  {
    id v6 = (void *)swift_task_alloc();
    v4[60] = v6;
    *id v6 = v4;
    v6[1] = sub_10006E758;
    uint64_t v7 = v4[32];
    uint64_t v8 = v4[50];
    return sub_10006C15C(v8, v7);
  }
}

uint64_t sub_10006E758()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 400);
  swift_task_dealloc();

  return _swift_task_switch(sub_10006E86C, 0, 0);
}

uint64_t sub_10006E86C()
{
  v1._object = (void *)0x800000010017E550;
  v2._uint64_t countAndFlagsBits = 0x6661363535363661;
  v2._object = (void *)0xE800000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000058;
  logMilestone(tag:description:)(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[61] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10006E934;
  uint64_t v5 = v0[57];
  uint64_t v4 = v0[58];
  return sub_10008163C(v5, v4);
}

uint64_t sub_10006E934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[62] = a1;
  v4[63] = a2;
  v4[64] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100070D88;
  }
  else
  {
    uint64_t v5 = sub_10006EA54;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10006EA54()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000054;
  v1._object = (void *)0x800000010017E5B0;
  v2._uint64_t countAndFlagsBits = 0x3466373032303261;
  v2._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v2, v1);
  uint64_t v3 = self;
  *(void *)(v0 + 520) = v3;
  id v4 = [v3 standardUserDefaults];
  v5._uint64_t countAndFlagsBits = 0xD000000000000026;
  v5._object = (void *)0x800000010017E610;
  Swift::Bool v6 = NSUserDefaults.internalBool(forKey:)(v5);

  if (v6)
  {
    defaultLogger()();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sleeping for 10 seconds before returning presentment response due to user defaults setting", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 336);

    v10(v11, v12);
    ContinuousClock.init()();
    uint64_t v91 = (char *)&dword_1001C2900 + dword_1001C2900;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10006F608;
    return ((uint64_t (*)(unint64_t, void, void, void, uint64_t))v91)(0x8AC7230489E80000, 0, 0, 0, 1);
  }
  else
  {
    id v15 = [*(id *)(v0 + 520) standardUserDefaults];
    v16._uint64_t countAndFlagsBits = 0xD000000000000028;
    v16._object = (void *)0x800000010017E640;
    Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

    uint64_t v90 = (unsigned __int8 *)(v0 + 546);
    uint64_t v92 = (uint64_t *)(v0 + 16);
    id v89 = (unsigned char *)(v0 + 545);
    if (v17)
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Throwing error at end of presentment due to internal defaults setting", v20, 2u);
        swift_slowDealloc();
      }
      unint64_t v83 = *(void *)(v0 + 504);
      uint64_t v82 = *(void *)(v0 + 496);
      unint64_t v86 = *(void *)(v0 + 464);
      uint64_t v84 = *(void *)(v0 + 456);
      uint64_t v81 = *(void **)(v0 + 400);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      uint64_t v22 = *(void *)(v0 + 352);
      uint64_t v23 = *(void *)(v0 + 336);
      uint64_t v77 = *(uint64_t **)(v0 + 288);
      uint64_t v24 = *(void *)(v0 + 272);
      uint64_t v78 = *(void *)(v0 + 264);
      uint64_t v79 = *(void *)(v0 + 296);
      uint64_t v88 = *(void *)(v0 + 256);
      uint64_t v85 = *(void *)(v0 + 176);
      uint64_t v76 = *(void *)(v0 + 88);
      uint64_t v25 = *(void *)(v0 + 72);
      uint64_t v71 = *(void *)(v0 + 104);
      uint64_t v73 = *(void *)(v0 + 80);
      uint64_t v26 = *(void *)(v0 + 64);

      v21(v22, v23);
      unsigned int v87 = enum case for DIPError.Code.internalError(_:);
      (*(void (**)(uint64_t))(v26 + 104))(v25);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v27 = swift_allocError();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16);
      v28(v29, v71, v73);
      *uint64_t v77 = v27;
      unsigned int v80 = enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:);
      (*(void (**)(uint64_t *))(v24 + 104))(v77);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v24 + 32))(v79, v77, v78);
      swift_allocError();
      v28(v30, v71, v73);
      swift_willThrow();

      sub_1000035EC(v82, v83);
      sub_1000035EC(v84, v86);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v71, v73);
      sub_100014BBC(v85, &qword_1001C2840);
      sub_100085F74(v88, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      uint64_t v32 = *(void *)(v0 + 272);
      uint64_t v31 = *(uint64_t **)(v0 + 280);
      uint64_t v33 = *(void *)(v0 + 264);
      uint64_t v34 = *(void *)(v0 + 88);
      uint64_t v35 = *(void *)(v0 + 96);
      uint64_t v36 = *(void *)(v0 + 80);
      (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), v87, *(void *)(v0 + 56));
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v37 = swift_allocError();
      uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
      v64(v38, v35, v36);
      *uint64_t v31 = v37;
      (*(void (**)(uint64_t *, void, uint64_t))(v32 + 104))(v31, v80, v33);
      (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 296), *(void *)(v0 + 264));
      uint64_t v39 = *(void *)(v0 + 320);
      uint64_t v66 = *(void *)(v0 + 328);
      uint64_t v69 = *(void *)(v0 + 312);
      uint64_t v40 = *(void *)(v0 + 296);
      uint64_t v41 = *(void *)(v0 + 272);
      uint64_t v61 = *(void *)(v0 + 264);
      uint64_t v42 = *(void *)(v0 + 96);
      uint64_t v43 = *(void *)(v0 + 80);
      uint64_t v44 = *(void *)(v0 + 88);
      uint64_t v45 = *(void *)(v0 + 48);
      uint64_t v59 = *(void *)(v0 + 40);
      (*(void (**)(uint64_t))(v41 + 32))(v40);
      swift_allocError();
      v64(v46, v42, v43);
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
      sub_1000711A8(v45, v89, v59, v40, (unsigned __int8 *)(v0 + 544), v92, v90, v66);
      sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v61);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v66, v69);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
      return v47();
    }
    else
    {
      uint64_t v49 = *(void *)(v0 + 496);
      unint64_t v48 = *(void *)(v0 + 504);
      uint64_t v67 = *(void *)(v0 + 456);
      uint64_t v50 = *(void *)(v0 + 416);
      uint64_t v63 = *(void **)(v0 + 400);
      unint64_t v70 = *(void *)(v0 + 464);
      uint64_t v72 = *(void *)(v0 + 328);
      uint64_t v74 = *(void *)(v0 + 320);
      uint64_t v75 = *(void *)(v0 + 312);
      uint64_t v51 = *(void *)(v0 + 296);
      uint64_t v52 = *(void *)(v0 + 272);
      uint64_t v68 = *(void *)(v0 + 264);
      uint64_t v65 = *(void *)(v0 + 256);
      uint64_t v58 = *(void *)(v0 + 176);
      uint64_t v60 = *(void *)(v0 + 48);
      uint64_t v62 = *(void *)(v0 + 40);
      (*(void (**)(uint64_t, void))(v52 + 104))(v51, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.success(_:));
      sub_100096FA4(v50);
      swift_bridgeObjectRelease();
      id v53 = objc_allocWithZone((Class)DCCredentialResponse);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100006CC8(&qword_1001C3C00);
      Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v56 = [v53 initWithResponseData:isa elementsByNamespace:v55];
      sub_1000035EC(v49, v48);

      sub_1000035EC(v67, v70);
      sub_100014BBC(v58, &qword_1001C2840);
      sub_100085F74(v65, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      sub_1000711A8(v60, v89, v62, v51, (unsigned __int8 *)(v0 + 544), v92, v90, v72);
      sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v68);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v75);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v57 = *(uint64_t (**)(id))(v0 + 8);
      return v57(v56);
    }
  }
}

uint64_t sub_10006F608()
{
  Swift::String v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 536) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100070158;
  }
  else
  {
    uint64_t v3 = sub_10006F758;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006F758()
{
  id v1 = [*(id *)(v0 + 520) standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000028;
  v2._object = (void *)0x800000010017E640;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  uint64_t v77 = (unsigned __int8 *)(v0 + 544);
  uint64_t v78 = (uint64_t *)(v0 + 16);
  uint64_t v76 = (unsigned char *)(v0 + 545);
  if (v3)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      Swift::Bool v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Bool v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Throwing error at end of presentment due to internal defaults setting", v6, 2u);
      swift_slowDealloc();
    }
    unint64_t v70 = *(void *)(v0 + 504);
    uint64_t v69 = *(void *)(v0 + 496);
    unint64_t v73 = *(void *)(v0 + 464);
    uint64_t v71 = *(void *)(v0 + 456);
    uint64_t v68 = *(void **)(v0 + 400);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 352);
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v64 = *(uint64_t **)(v0 + 288);
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v65 = *(void *)(v0 + 264);
    uint64_t v66 = *(void *)(v0 + 296);
    uint64_t v75 = *(void *)(v0 + 256);
    uint64_t v72 = *(void *)(v0 + 176);
    uint64_t v63 = *(void *)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v58 = *(void *)(v0 + 104);
    uint64_t v60 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 64);

    v7(v8, v9);
    unsigned int v74 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(v12 + 104))(v11);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v13 = swift_allocError();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
    v14(v15, v58, v60);
    *uint64_t v64 = v13;
    unsigned int v67 = enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:);
    (*(void (**)(uint64_t *))(v10 + 104))(v64);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v10 + 32))(v66, v64, v65);
    swift_allocError();
    v14(v16, v58, v60);
    swift_willThrow();

    sub_1000035EC(v69, v70);
    sub_1000035EC(v71, v73);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v58, v60);
    sub_100014BBC(v72, &qword_1001C2840);
    sub_100085F74(v75, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t v18 = *(void *)(v0 + 272);
    Swift::Bool v17 = *(uint64_t **)(v0 + 280);
    uint64_t v19 = *(void *)(v0 + 264);
    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v22 = *(void *)(v0 + 80);
    (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), v74, *(void *)(v0 + 56));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v23 = swift_allocError();
    uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v51(v24, v21, v22);
    *Swift::Bool v17 = v23;
    (*(void (**)(uint64_t *, void, uint64_t))(v18 + 104))(v17, v67, v19);
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 296), *(void *)(v0 + 264));
    uint64_t v25 = *(void *)(v0 + 320);
    uint64_t v53 = *(void *)(v0 + 328);
    uint64_t v56 = *(void *)(v0 + 312);
    uint64_t v26 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v48 = *(void *)(v0 + 264);
    uint64_t v28 = *(void *)(v0 + 96);
    uint64_t v29 = *(void *)(v0 + 80);
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v31 = *(void *)(v0 + 48);
    uint64_t v46 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t))(v27 + 32))(v26);
    swift_allocError();
    v51(v32, v28, v29);
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    sub_1000711A8(v31, v76, v46, v26, v77, v78, (unsigned __int8 *)(v0 + 546), v53);
    sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v48);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v53, v56);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 496);
    unint64_t v35 = *(void *)(v0 + 504);
    uint64_t v54 = *(void *)(v0 + 456);
    uint64_t v37 = *(void *)(v0 + 416);
    uint64_t v50 = *(void **)(v0 + 400);
    unint64_t v57 = *(void *)(v0 + 464);
    uint64_t v59 = *(void *)(v0 + 328);
    uint64_t v61 = *(void *)(v0 + 320);
    uint64_t v62 = *(void *)(v0 + 312);
    uint64_t v38 = *(void *)(v0 + 296);
    uint64_t v39 = *(void *)(v0 + 272);
    uint64_t v55 = *(void *)(v0 + 264);
    uint64_t v52 = *(void *)(v0 + 256);
    uint64_t v45 = *(void *)(v0 + 176);
    uint64_t v47 = *(void *)(v0 + 48);
    uint64_t v49 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t, void))(v39 + 104))(v38, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.success(_:));
    sub_100096FA4(v37);
    swift_bridgeObjectRelease();
    id v40 = objc_allocWithZone((Class)DCCredentialResponse);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100006CC8(&qword_1001C3C00);
    Class v42 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v43 = [v40 initWithResponseData:isa elementsByNamespace:v42];
    sub_1000035EC(v36, v35);

    sub_1000035EC(v54, v57);
    sub_100014BBC(v45, &qword_1001C2840);
    sub_100085F74(v52, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    sub_1000711A8(v47, v76, v49, v38, v77, v78, (unsigned __int8 *)(v0 + 546), v59);
    sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v55);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v62);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(id))(v0 + 8);
    return v44(v43);
  }
}

uint64_t sub_100070158()
{
  uint64_t v1 = *(void *)(v0 + 496);
  unint64_t v2 = *(void *)(v0 + 504);
  uint64_t v4 = *(void *)(v0 + 456);
  unint64_t v3 = *(void *)(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 176);

  sub_1000035EC(v1, v2);
  sub_1000035EC(v4, v3);
  sub_100014BBC(v6, &qword_1001C2840);
  sub_100085F74(v5, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v7 = *(uint64_t **)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v13 = swift_allocError();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v14(v15, v11, v12);
  *uint64_t v7 = v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v7, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v9);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v28 = *(void *)(v0 + 328);
  uint64_t v29 = *(void *)(v0 + 312);
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 272);
  uint64_t v27 = *(void *)(v0 + 264);
  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 48);
  uint64_t v26 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v18 + 32))(v17);
  swift_allocError();
  v14(v23, v19, v20);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  sub_1000711A8(v22, (unsigned char *)(v0 + 545), v26, v17, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v28);
  sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v27);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100070588()
{
  sub_100085F74(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(uint64_t **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v7 = swift_allocError();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v9, v5, v6);
  *uint64_t v1 = v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v3);
  uint64_t v10 = *(void *)(v0 + 320);
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v23 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 272);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 48);
  uint64_t v20 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v12 + 32))(v11);
  swift_allocError();
  v8(v17, v13, v14);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  sub_1000711A8(v16, (unsigned char *)(v0 + 545), v20, v11, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v22);
  sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v21);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100070978()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 176);

  sub_100014BBC(v2, &qword_1001C2840);
  sub_100085F74(v1, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(uint64_t **)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v9 = swift_allocError();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v10(v11, v7, v8);
  *uint64_t v3 = v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v3, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v5);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 296);
  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 48);
  uint64_t v22 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v14 + 32))(v13);
  swift_allocError();
  v10(v19, v15, v16);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  sub_1000711A8(v18, (unsigned char *)(v0 + 545), v22, v13, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v24);
  sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v23);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100070D88()
{
  uint64_t v1 = *(void *)(v0 + 456);
  unint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 176);

  sub_1000035EC(v1, v2);
  sub_100014BBC(v4, &qword_1001C2840);
  sub_100085F74(v3, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v5 = *(uint64_t **)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v11 = swift_allocError();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v12(v13, v9, v10);
  *uint64_t v5 = v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v5, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v7);
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 328);
  uint64_t v27 = *(void *)(v0 + 312);
  uint64_t v15 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 272);
  uint64_t v25 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v19 = *(void *)(v0 + 88);
  uint64_t v20 = *(void *)(v0 + 48);
  uint64_t v24 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v16 + 32))(v15);
  swift_allocError();
  v12(v21, v17, v18);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  sub_1000711A8(v20, (unsigned char *)(v0 + 545), v24, v15, (unsigned __int8 *)(v0 + 544), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 546), v26);
  sub_100009764(*(void *)(v0 + 16), *(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v25);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v26, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

void sub_1000711A8(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t *a6, unsigned __int8 *a7, uint64_t a8)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v39 = a5;
  id v40 = a6;
  uint64_t v38 = a4;
  uint64_t v11 = sub_100006CC8(&qword_1001C0E30);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  uint64_t v20 = &v36[-v19];
  uint64_t v21 = sub_100006CC8(&qword_1001C2920);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(void *)(a1 + 16) && *a2 == 1)
  {
    uint64_t v24 = type metadata accessor for PresentmentRequestInterpretation(0);
    sub_100037898(a3 + *(int *)(v24 + 28), (uint64_t)v23, &qword_1001C2920);
    uint64_t v25 = type metadata accessor for IdentityReaderAuthenticator();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v23, 1, v25) == 1)
    {
      sub_100014BBC((uint64_t)v23, &qword_1001C2920);
      BOOL v37 = 0;
    }
    else
    {
      int v26 = v23[*(int *)(v25 + 36)];
      sub_100085F74((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
      BOOL v27 = v26 != 2 && (v26 & 1) == 0;
      BOOL v37 = v27;
    }
    uint64_t v28 = v15;
    uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16);
    v29(v20, v38, v14);
    LODWORD(v39) = *v39;
    uint64_t v30 = *v40;
    unint64_t v31 = v40[1];
    LODWORD(v41) = *v41;
    uint64_t v32 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
    v29(v18, (uint64_t)v20, v14);
    unint64_t v33 = (*(unsigned __int8 *)(v28 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v34 = (char *)swift_allocObject();
    *((void *)v34 + 2) = 0;
    *((void *)v34 + 3) = 0;
    *((void *)v34 + 4) = v30;
    *((void *)v34 + 5) = v31;
    (*(void (**)(char *, unsigned char *, uint64_t))(v28 + 32))(&v34[v33], v18, v14);
    unint64_t v35 = &v34[v33 + v16];
    *unint64_t v35 = (char)v39;
    v35[1] = (char)v41;
    v35[2] = v37;
    sub_100009778(v30, v31);
    sub_100009778(v30, v31);
    sub_10012C408((uint64_t)v13, (uint64_t)&unk_1001C2938, (uint64_t)v34);
    swift_release();
    sub_100009764(v30, v31);
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v20, v14);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
}

void *sub_100071574(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v4 = (v10 - 1) & v10;
LABEL_5:
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_1000DAF10(v8);
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000716E4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ISO18013Response.Status();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ISO18013Response();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v2[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v2[14] = v6;
  v2[15] = *(void *)(v6 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[17] = v7;
  v2[18] = *(void *)(v7 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_100071950, 0, 0);
}

uint64_t sub_100071950()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder buildErrorResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[3];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[21] = v8;
  v0[22] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  static IDCSSignposts.presentmentBuildErrorResponse.getter();
  DIPSignpost.init(_:)();
  uint64_t v9 = *(void *)(v7 + 80);
  v0[23] = v9;
  return _swift_task_switch(sub_100071A90, v9, 0);
}

uint64_t sub_100071A90()
{
  if (*(void *)(*(void *)(v0 + 184) + 168))
  {
    swift_retain();
    *(unsigned char *)(v0 + 248) = ISO18013SessionCryptarch.isReadyForEncryption.getter() & 1;
    swift_release();
    uint64_t v1 = sub_100071B28;
  }
  else
  {
    uint64_t v1 = sub_100071FA4;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100071B28()
{
  if (*(unsigned char *)(v0 + 248))
  {
    uint64_t v1 = (unsigned int *)&enum case for ISO18013Response.Status.cborDecodingError(_:);
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = (unsigned int *)&enum case for ISO18013Response.Status.cborValidationError(_:);
    if (v2 != 2) {
      uint64_t v3 = (unsigned int *)&enum case for ISO18013Response.Status.generalError(_:);
    }
    if (v2 != 1) {
      uint64_t v1 = v3;
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), *v1, *(void *)(v0 + 56));
    static ISO18013Response.supportedVersion.getter();
    ISO18013Response.init(version:documents:documentErrors:status:)();
    *(void *)(v0 + 192) = sub_1000825EC();
    sub_100085EC4(&qword_1001C28B8, (void (*)(uint64_t))&type metadata accessor for ISO18013Response);
    uint64_t v4 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    *(void *)(v0 + 200) = 0;
    *(void *)(v0 + 208) = v4;
    *(void *)(v0 + 216) = v5;
    uint64_t v14 = *(void *)(v0 + 184);
    return _swift_task_switch(sub_100072124, v14, 0);
  }
  else
  {
    defaultLogger()();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Session cryptor is not ready for encryption; skipping error response",
        v8,
        2u);
      swift_slowDealloc();
    }

    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 152), *(void *)(v0 + 136));
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
    return v12(0, 0xF000000000000000);
  }
}

uint64_t sub_100071FA4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Session cryptor is not ready for encryption; skipping error response",
      v3,
      2u);
    swift_slowDealloc();
  }

  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 152), *(void *)(v0 + 136));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
  return v7(0, 0xF000000000000000);
}

uint64_t sub_100072124()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = sub_100054EAC(*(void *)(v0 + 208), *(uint64_t **)(v0 + 216));
  *(void *)(v0 + 224) = v1;
  if (v1)
  {
    uint64_t v4 = sub_1000722EC;
  }
  else
  {
    *(void *)(v0 + 232) = v3;
    *(void *)(v0 + 240) = v2;
    uint64_t v4 = sub_1000721B8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000721B8()
{
  uint64_t v1 = v0[11];
  sub_1000035EC(v0[26], v0[27]);
  swift_release();
  uint64_t v7 = v0[29];
  uint64_t v8 = v0[30];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[14];
  (*(void (**)(void, void))(v1 + 8))(v0[12], v0[10]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v5(v8, v7);
}

uint64_t sub_1000722EC()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  sub_1000035EC(v0[26], v0[27]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[14];
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10007251C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = type metadata accessor for PresentmentResponseBuilder.DBResults();
  v4[22] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2838);
  v4[23] = swift_task_alloc();
  v4[24] = type metadata accessor for PresentmentProposal();
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  return _swift_task_switch(sub_100072704, 0, 0);
}

uint64_t sub_100072704()
{
  uint64_t v85 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder loadPayloadDetailsIfNeeded", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 120);

  uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v82(v4, v5);
  uint64_t v9 = *(void *)(v8 + 8);
  sub_100084CE4(v8, v7, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  uint64_t v10 = *(void *)(v0 + 208);
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 184);
    sub_100037898(v10 + *(int *)(*(void *)(v0 + 192) + 24), v11, &qword_1001C2838);
    sub_100085F74(v10, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t v12 = type metadata accessor for COSE_Sign1();
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
    sub_100014BBC(v11, &qword_1001C2838);
    if (v13 != 1)
    {
      defaultLogger()();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Proposal already contains payload details, no need to load them now", v16, 2u);
        swift_slowDealloc();
      }
      uint64_t v17 = *(void *)(v0 + 248);
      uint64_t v18 = *(void *)(v0 + 216);
      uint64_t v19 = *(void *)(v0 + 120);
      uint64_t v20 = *(void **)(v0 + 128);
      uint64_t v21 = *(void *)(v0 + 112);

      v82(v17, v18);
      sub_100084CE4(v19, v21, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      uint64_t v83 = *(void *)(v0 + 128);
      id v22 = v20;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v23(v83);
    }
  }
  else
  {
    sub_100085F74(*(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  }
  uint64_t v81 = v0 + 16;
  id v25 = [**(id **)(v0 + 120) credentialIdentifier];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = *(void *)(v0 + 240);
  uint64_t v33 = *(void *)(v0 + 216);
  unint64_t v79 = v28;
  uint64_t v80 = v26;
  if (v31)
  {
    uint64_t v76 = *(void *)(v0 + 240);
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 104) = sub_10004C3A4(v26, v28, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Loading payload details for credential %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v82(v76, v33);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v82(v32, v33);
  }
  uint64_t v35 = *(void *)(v0 + 120);
  uint64_t v36 = *(int *)(*(void *)(v0 + 192) + 28);
  *(_DWORD *)(v0 + 344) = v36;
  uint64_t v37 = v35 + v36;
  uint64_t v38 = (*(uint64_t (**)(void))(*(void *)(v35 + v36 + 8) + 16))(**(void **)(v35 + v36));
  unint64_t v40 = v39;
  *(void *)(v0 + 264) = v38;
  *(void *)(v0 + 272) = v39;
  defaultLogger()();
  sub_10000354C(v38, v40);
  sub_10000354C(v38, v40);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v44 = *(void *)(v0 + 232);
  uint64_t v45 = *(void *)(v0 + 216);
  if (v43)
  {
    uint64_t v74 = *(void *)(v0 + 216);
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v84 = v73;
    *(_DWORD *)uint64_t v46 = 136315138;
    Swift::String v47 = Data.base16EncodedString()();
    *(void *)(v0 + 96) = sub_10004C3A4(v47._countAndFlagsBits, (unint64_t)v47._object, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000035EC(v38, v40);
    sub_1000035EC(v38, v40);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Using presentment key %s", v46, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v82(v44, v74);
  }
  else
  {
    sub_1000035EC(v38, v40);
    sub_1000035EC(v38, v40);

    v82(v44, v45);
  }
  uint64_t v49 = *(void **)(v0 + 128);
  uint64_t v48 = *(void *)(v0 + 136);
  uint64_t v50 = *(void *)(v0 + 120);
  uint64_t v51 = *(int *)(*(void *)(v0 + 192) + 36);
  *(_DWORD *)(v0 + 348) = v51;
  uint64_t v52 = sub_1000B9854(*(void *)(v50 + v51));
  sub_10002C404(v48 + 96, v81);
  id v53 = [v49 authData];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v57 = v56;
  }
  else
  {
    uint64_t v55 = 0;
    unint64_t v57 = 0xF000000000000000;
  }
  *(void *)(v0 + 280) = v55;
  *(void *)(v0 + 288) = v57;
  id v58 = [*(id *)(v0 + 128) elementsToPresent:v73];
  if (v58)
  {
    uint64_t v59 = v58;
    sub_100006CC8(&qword_1001C3C70);
    uint64_t v77 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v77 = 0;
  }
  uint64_t v60 = *(void *)(v0 + 136);
  char v61 = *(unsigned char *)(v60 + 64);
  unint64_t v78 = v57;
  unint64_t v62 = v40;
  if (v61)
  {
    uint64_t v75 = 0;
  }
  else
  {
    uint64_t v63 = *(void *)(v60 + 48);
    if (v63 == 1) {
      uint64_t v64 = 1;
    }
    else {
      uint64_t v64 = 2 * (v63 == 2);
    }
    uint64_t v75 = v64;
  }
  uint64_t v65 = (*(uint64_t (**)(void))(*(void *)(v37 + 8) + 16))(**(void **)v37);
  unint64_t v67 = v66;
  *(void *)(v0 + 296) = v65;
  *(void *)(v0 + 304) = v66;
  sub_10002C404(v81, v0 + 56);
  uint64_t v68 = swift_allocObject();
  *(void *)(v0 + 312) = v68;
  *(void *)(v68 + 16) = v80;
  *(void *)(v68 + 24) = v79;
  *(void *)(v68 + 32) = v38;
  *(void *)(v68 + 40) = v62;
  sub_10002C468((long long *)(v0 + 56), v68 + 48);
  *(void *)(v68 + 88) = v55;
  *(void *)(v68 + 96) = v78;
  *(void *)(v68 + 104) = v65;
  *(void *)(v68 + 112) = v67;
  *(void *)(v68 + 120) = v52;
  *(void *)(v68 + 128) = v77;
  *(void *)(v68 + 136) = v75;
  *(unsigned char *)(v68 + 144) = v61;
  sub_10000354C(v38, v62);
  sub_100009778(v55, v78);
  sub_10000354C(v65, v67);
  uint64_t v69 = swift_allocObject();
  *(void *)(v0 + 320) = v69;
  *(void *)(v69 + 16) = &unk_1001C28D0;
  *(void *)(v69 + 24) = v68;
  swift_retain();
  unint64_t v70 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v70;
  void *v70 = v0;
  v70[1] = sub_100073098;
  uint64_t v72 = *(void *)(v0 + 168);
  uint64_t v71 = *(void *)(v0 + 176);
  return AsyncCoreDataContainer.read<A>(_:)(v71, &unk_1001C28E0, v69, v72);
}

uint64_t sub_100073098()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_100073430;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000731BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000731BC()
{
  uint64_t v1 = *(int *)(v0 + 348);
  uint64_t v2 = *(int *)(v0 + 344);
  uint64_t v4 = *(int **)(v0 + 192);
  uint64_t v3 = *(void **)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void ***)(v0 + 120);
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(v5 + *(int *)(v6 + 20));
  sub_100037898(v5, (uint64_t)v3 + v4[6], &qword_1001C2838);
  uint64_t v10 = *(uint64_t *)((char *)v7 + v4[8]);
  uint64_t v11 = *(uint64_t *)((char *)v7 + v1);
  long long v12 = *(_OWORD *)((char *)v7 + v2);
  *uint64_t v3 = v8;
  v3[1] = v9;
  *(_OWORD *)((char *)v3 + v4[7]) = v12;
  *(void *)((char *)v3 + v4[8]) = v10;
  *(void *)((char *)v3 + v4[9]) = v11;
  if (*(void *)(v5 + *(int *)(v6 + 24)))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v13 = v8;
    sub_100006CC8(&qword_1001C3C70);
    v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v15 = v8;
    v14.super.Class isa = 0;
  }
  uint64_t v17 = *(void *)(v0 + 296);
  unint64_t v16 = *(void *)(v0 + 304);
  uint64_t v19 = *(void *)(v0 + 280);
  unint64_t v18 = *(void *)(v0 + 288);
  uint64_t v21 = *(void *)(v0 + 264);
  unint64_t v20 = *(void *)(v0 + 272);
  uint64_t v22 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 112);
  id v27 = [[*(id *)(v0 + 128) copyWithElementsToPresent:v14.super.isa *(void *)(v0 + 200)];

  sub_1000035EC(v17, v16);
  sub_100009764(v19, v18);
  sub_1000035EC(v21, v20);
  sub_100085F74(v22, (uint64_t (*)(void))type metadata accessor for PresentmentResponseBuilder.DBResults);
  sub_10000B9DC(v0 + 16);
  sub_100085F0C(v26, v23, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(id))(v0 + 8);
  return v24(v27);
}

uint64_t sub_100073430()
{
  uint64_t v2 = v0[37];
  unint64_t v1 = v0[38];
  uint64_t v3 = v0[35];
  unint64_t v4 = v0[36];
  uint64_t v6 = v0[33];
  unint64_t v5 = v0[34];
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v11 = v0[18];
  swift_release();
  swift_release();
  sub_1000035EC(v2, v1);
  sub_100009764(v3, v4);
  sub_1000035EC(v6, v5);
  sub_10000B9DC((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v8, enum case for DIPError.Code.internalError(_:), v11);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100073684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 824) = v18;
  *(void *)(v8 + 464) = v16;
  *(void *)(v8 + 472) = v17;
  *(_OWORD *)(v8 + 432) = v14;
  *(_OWORD *)(v8 + 448) = v15;
  *(void *)(v8 + 416) = a7;
  *(void *)(v8 + 424) = a8;
  *(void *)(v8 + 400) = a5;
  *(void *)(v8 + 408) = a6;
  *(void *)(v8 + 384) = a3;
  *(void *)(v8 + 392) = a4;
  *(void *)(v8 + 368) = a1;
  *(void *)(v8 + 376) = a2;
  sub_100006CC8(&qword_1001C2838);
  *(void *)(v8 + 480) = swift_task_alloc();
  type metadata accessor for PayloadMetadata(0);
  *(void *)(v8 + 488) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 496) = v9;
  *(void *)(v8 + 504) = *(void *)(v9 - 8);
  *(void *)(v8 + 512) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 520) = v10;
  *(void *)(v8 + 528) = *(void *)(v10 - 8);
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  *(void *)(v8 + 552) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v8 + 560) = v11;
  *(void *)(v8 + 568) = *(void *)(v11 - 8);
  *(void *)(v8 + 576) = swift_task_alloc();
  return _swift_task_switch(sub_10007389C, 0, 0);
}

uint64_t sub_10007389C()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  uint64_t v5 = v0[50];
  unint64_t v4 = v0[51];
  uint64_t v6 = v0[48];
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[47];
  uint64_t v9 = (void *)swift_allocObject();
  v0[73] = v9;
  v9[2] = v8;
  v9[3] = v6;
  uint64_t v9[4] = v7;
  v9[5] = v5;
  uint64_t v9[6] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000354C(v5, v4);
  uint64_t v10 = swift_allocObject();
  v0[74] = v10;
  *(void *)(v10 + 16) = sub_100085DE8;
  *(void *)(v10 + 24) = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[75] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100073A40;
  uint64_t v12 = v0[72];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v12, sub_10004A390, v10, &type metadata for PresentmentResponseBuilder.DBResult);
}

uint64_t sub_100073A40()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 608) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[71] + 8))(v2[72], v2[70]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000743C8;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_100073BC4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100073BC4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  *(void *)(v0 + 616) = *(void *)(v0 + 32);
  *(void *)(v0 + 624) = v2;
  unint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  *(void *)(v0 + 632) = v4;
  *(void *)(v0 + 640) = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 96);
  *(void *)(v0 + 648) = *(void *)(v0 + 88);
  *(void *)(v0 + 656) = v5;
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  *(void *)(v0 + 664) = v7;
  *(_OWORD *)(v0 + 128) = 0u;
  *(void *)(v0 + 672) = v6;
  unint64_t v8 = *(void *)(v0 + 120);
  *(void *)(v0 + 680) = v8;
  *(void *)(v0 + 160) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  switch(v3)
  {
    case 2:
      uint64_t v47 = v1;
      unint64_t v49 = v8;
      uint64_t v51 = v5;
      uint64_t v53 = v6;
      swift_bridgeObjectRetain();
      uint64_t v44 = v2;
      unint64_t v45 = v4;
      sub_10000354C(v2, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      defaultLogger()();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Payload protection type is payload encryption key", v28, 2u);
        swift_slowDealloc();
      }
      uint64_t v29 = *(void *)(v0 + 536);
      uint64_t v30 = *(void *)(v0 + 528);
      uint64_t v31 = *(void *)(v0 + 520);

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      if (v7)
      {
        sub_100014D14(*(void **)(v0 + 416), *(void *)(*(void *)(v0 + 416) + 24));
        swift_bridgeObjectRetain();
        sub_10000354C(v53, v49);
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 720) = v32;
        *uint64_t v32 = v0;
        v32[1] = sub_1000750F8;
        uint64_t v18 = v0 + 168;
        uint64_t v19 = v44;
        uint64_t v20 = v45;
        uint64_t v21 = v47;
        uint64_t v22 = v51;
        uint64_t v23 = v7;
        uint64_t v24 = v53;
        uint64_t v25 = v49;
LABEL_14:
        return sub_1001615C0(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      (*(void (**)(void, void, void))(*(void *)(v0 + 504) + 104))(*(void *)(v0 + 512), enum case for DIPError.Code.idcsMissingPayloadProtectionKey(_:), *(void *)(v0 + 496));
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v2 = v44;
      unint64_t v4 = v45;
      break;
    case 1:
      uint64_t v48 = v1;
      uint64_t v50 = v8;
      uint64_t v52 = v5;
      uint64_t v54 = v6;
      swift_bridgeObjectRetain();
      sub_10000354C(v2, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      defaultLogger()();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      uint64_t v35 = v2;
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Payload protection type is device encryption key", v36, 2u);
        swift_slowDealloc();
      }
      uint64_t v37 = *(void *)(v0 + 544);
      uint64_t v38 = *(void *)(v0 + 528);
      uint64_t v39 = *(void *)(v0 + 520);
      unint64_t v40 = *(void **)(v0 + 416);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      sub_100014D14(v40, v40[3]);
      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 704) = v41;
      void *v41 = v0;
      v41[1] = sub_100074AC4;
      uint64_t v18 = v0 + 288;
      uint64_t v19 = v35;
      uint64_t v20 = v4;
      uint64_t v21 = v48;
      uint64_t v25 = v50;
      uint64_t v22 = v52;
      uint64_t v24 = v54;
      uint64_t v23 = v7;
      goto LABEL_14;
    case 0:
      uint64_t v46 = v1;
      swift_bridgeObjectRetain();
      sub_10000354C(v2, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      defaultLogger()();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      uint64_t v11 = v2;
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Payload protection type is standard, extracting elements from credential payload", v12, 2u);
        swift_slowDealloc();
      }
      uint64_t v13 = *(void *)(v0 + 552);
      uint64_t v14 = *(void *)(v0 + 528);
      uint64_t v15 = *(void *)(v0 + 520);
      uint64_t v16 = *(void **)(v0 + 416);

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      sub_100014D14(v16, v16[3]);
      uint64_t v17 = (void *)swift_task_alloc();
      *(void *)(v0 + 688) = v17;
      *uint64_t v17 = v0;
      v17[1] = sub_100074490;
      uint64_t v18 = v0 + 328;
      uint64_t v19 = v11;
      uint64_t v20 = v4;
      uint64_t v21 = v46;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      goto LABEL_14;
    default:
      unint64_t v49 = v8;
      uint64_t v51 = v5;
      uint64_t v53 = v6;
      (*(void (**)(void, void, void))(*(void *)(v0 + 504) + 104))(*(void *)(v0 + 512), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 496));
      swift_bridgeObjectRetain();
      sub_10000354C(v2, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      break;
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v51, v7, v53, v49);
  sub_100014BBC(v0 + 128, &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

uint64_t sub_1000743C8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100074490()
{
  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100074964;
  }
  else {
    uint64_t v2 = sub_1000745A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000745A4()
{
  sub_100014BBC(v0 + 128, &qword_1001C28E8);
  sub_100037944(v0 + 328, v0 + 128, &qword_1001C28E8);
  sub_100037898(v0 + 128, v0 + 248, &qword_1001C28E8);
  if (*(void *)(v0 + 272))
  {
    sub_10002C468((long long *)(v0 + 248), v0 + 208);
    uint64_t v1 = *(void *)(v0 + 232);
    uint64_t v2 = *(void *)(v0 + 240);
    sub_100014D14((void *)(v0 + 208), v1);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100075754;
    uint64_t v4 = *(void *)(v0 + 488);
    return v14(v4, 1, v1, v2);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 672);
    unint64_t v16 = *(void *)(v0 + 680);
    uint64_t v12 = *(void *)(v0 + 656);
    uint64_t v13 = *(void *)(v0 + 664);
    unint64_t v6 = *(void *)(v0 + 632);
    uint64_t v7 = *(void *)(v0 + 624);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 512);
    uint64_t v10 = *(void *)(v0 + 496);
    sub_100014BBC(v0 + 248, &qword_1001C28E8);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v10);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v12, v13, v15, v16);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100074964()
{
  unint64_t v1 = v0[85];
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[82];
  unint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100074AC4()
{
  *(void *)(*(void *)v1 + 712) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100074F98;
  }
  else {
    uint64_t v2 = sub_100074BD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100074BD8()
{
  sub_100014BBC(v0 + 128, &qword_1001C28E8);
  sub_100037944(v0 + 288, v0 + 128, &qword_1001C28E8);
  sub_100037898(v0 + 128, v0 + 248, &qword_1001C28E8);
  if (*(void *)(v0 + 272))
  {
    sub_10002C468((long long *)(v0 + 248), v0 + 208);
    uint64_t v1 = *(void *)(v0 + 232);
    uint64_t v2 = *(void *)(v0 + 240);
    sub_100014D14((void *)(v0 + 208), v1);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100075754;
    uint64_t v4 = *(void *)(v0 + 488);
    return v14(v4, 1, v1, v2);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 672);
    unint64_t v16 = *(void *)(v0 + 680);
    uint64_t v12 = *(void *)(v0 + 656);
    uint64_t v13 = *(void *)(v0 + 664);
    unint64_t v6 = *(void *)(v0 + 632);
    uint64_t v7 = *(void *)(v0 + 624);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 512);
    uint64_t v10 = *(void *)(v0 + 496);
    sub_100014BBC(v0 + 248, &qword_1001C28E8);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v10);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v12, v13, v15, v16);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100074F98()
{
  unint64_t v1 = v0[85];
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[82];
  unint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000750F8()
{
  *(void *)(*(void *)v1 + 728) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000755E0;
  }
  else {
    uint64_t v2 = sub_10007520C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007520C()
{
  sub_100063808(*(void *)(v0 + 656), *(void *)(v0 + 664), *(void *)(v0 + 672), *(void *)(v0 + 680));
  sub_100014BBC(v0 + 128, &qword_1001C28E8);
  sub_100037944(v0 + 168, v0 + 128, &qword_1001C28E8);
  sub_100037898(v0 + 128, v0 + 248, &qword_1001C28E8);
  if (*(void *)(v0 + 272))
  {
    sub_10002C468((long long *)(v0 + 248), v0 + 208);
    uint64_t v1 = *(void *)(v0 + 232);
    uint64_t v2 = *(void *)(v0 + 240);
    sub_100014D14((void *)(v0 + 208), v1);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100075754;
    uint64_t v4 = *(void *)(v0 + 488);
    return v14(v4, 1, v1, v2);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 672);
    unint64_t v16 = *(void *)(v0 + 680);
    uint64_t v12 = *(void *)(v0 + 656);
    uint64_t v13 = *(void *)(v0 + 664);
    unint64_t v6 = *(void *)(v0 + 632);
    uint64_t v7 = *(void *)(v0 + 624);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 512);
    uint64_t v10 = *(void *)(v0 + 496);
    sub_100014BBC(v0 + 248, &qword_1001C28E8);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v10);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v12, v13, v15, v16);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_1000755E0()
{
  unint64_t v1 = v0[85];
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[82];
  unint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  sub_100063808(v4, v3, v2, v1);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100075754()
{
  *(void *)(*(void *)v1 + 744) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100076724;
  }
  else {
    uint64_t v2 = sub_100075868;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100075868()
{
  uint64_t v1 = self;
  v0[94] = v1;
  id v2 = [v1 standardUserDefaults];
  v3._object = (void *)0x800000010017D3B0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000027;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
LABEL_4:
    uint64_t v10 = v0[29];
    uint64_t v11 = v0[30];
    sub_100014D14(v0 + 26, v10);
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 32) + **(int **)(v11 + 32));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[95] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100075C88;
    uint64_t v13 = v0[60];
    return v22(v13, v10, v11);
  }
  uint64_t v5 = v0[61];
  uint64_t v7 = v0[55];
  unint64_t v6 = v0[56];
  uint64_t v8 = *(void *)(v5 + 40);
  unint64_t v9 = *(void *)(v5 + 48);
  sub_10000354C(v8, v9);
  if (sub_100147900(v7, v6, v8, v9))
  {
    sub_1000035EC(v8, v9);
    goto LABEL_4;
  }
  unint64_t v23 = v0[85];
  uint64_t v20 = v0[83];
  uint64_t v21 = v0[84];
  unint64_t v17 = v0[79];
  uint64_t v15 = v0[78];
  uint64_t v18 = v0[61];
  uint64_t v19 = v0[82];
  (*(void (**)(void, void, void))(v0[63] + 104))(v0[64], enum case for DIPError.Code.idcsPayloadPresentmentKeyMismatch(_:), v0[62]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_1000035EC(v8, v9);
  swift_bridgeObjectRelease();
  sub_1000035EC(v15, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v15, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v19, v20, v21, v23);
  sub_100085F74(v18, type metadata accessor for PayloadMetadata);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  sub_10000B9DC((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100075C88()
{
  *(void *)(*(void *)v1 + 768) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_100076890;
  }
  else {
    id v2 = sub_100075D9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100075D9C()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  sub_100014D14(v0 + 26, v2);
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[97] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100075EB0;
  return v6(v1, v2, v3);
}

uint64_t sub_100075EB0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 784) = a1;
  *(void *)(v3 + 792) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100076A20;
  }
  else {
    uint64_t v4 = sub_100075FC8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100075FC8()
{
  if (*(unsigned char *)(v0 + 824))
  {
    uint64_t v24 = *(void *)(v0 + 784);
    unint64_t v22 = *(void *)(v0 + 680);
    uint64_t v11 = *(void *)(v0 + 672);
    uint64_t v12 = *(void *)(v0 + 664);
    uint64_t v13 = *(void *)(v0 + 656);
    unint64_t v14 = *(void *)(v0 + 632);
    uint64_t v15 = *(void *)(v0 + 624);
    uint64_t v16 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    sub_1000035EC(v15, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v15, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v13, v12, v11, v22);
    sub_100085F74(v16, type metadata accessor for PayloadMetadata);
    sub_100014BBC(v0 + 128, &qword_1001C28E8);
    uint64_t v17 = *(void *)(v0 + 464);
    uint64_t v18 = *(void *)(v0 + 480);
    uint64_t v19 = *(void *)(v0 + 368);
    swift_bridgeObjectRetain();
    sub_100037944(v18, v19, &qword_1001C2838);
    uint64_t v20 = type metadata accessor for PresentmentResponseBuilder.DBResults();
    *(void *)(v19 + *(int *)(v20 + 20)) = v24;
    *(void *)(v19 + *(int *)(v20 + 24)) = v17;
    sub_10000B9DC(v0 + 208);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 472);
    id v2 = [*(id *)(v0 + 752) standardUserDefaults];
    v3._object = (void *)0x800000010017E380;
    v3._uint64_t countAndFlagsBits = 0xD000000000000016;
    Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

    if (v4) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = v1;
    }
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 240);
    sub_100014D14((void *)(v0 + 208), v6);
    unint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 24) + **(int **)(v7 + 24));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 800) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000762F0;
    uint64_t v9 = *(void *)(v0 + 456);
    return v23(v9, v5, v6, v7);
  }
}

uint64_t sub_1000762F0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 808) = a1;
  *(void *)(v3 + 816) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    Swift::Bool v4 = sub_100076BC0;
  }
  else
  {
    Swift::Bool v4 = sub_100076410;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100076410()
{
  uint64_t v1 = v0[102];
  uint64_t v2 = sub_100137DF0(v0[101], v0[98], v0[58]);
  uint64_t v15 = v0[84];
  unint64_t v16 = v0[85];
  uint64_t v14 = v0[83];
  uint64_t v4 = v0[82];
  unint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  uint64_t v17 = v0[61];
  if (v1)
  {
    uint64_t v7 = v0[60];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v4, v14, v15, v16);
    swift_bridgeObjectRelease();
    sub_100014BBC(v7, &qword_1001C2838);
    sub_100085F74(v17, type metadata accessor for PayloadMetadata);
    sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  }
  else
  {
    uint64_t v12 = v2;
    uint64_t v13 = v3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000035EC(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063808(v4, v14, v15, v16);
    swift_bridgeObjectRelease();
    sub_100085F74(v17, type metadata accessor for PayloadMetadata);
    sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
    uint64_t v9 = v0[46];
    sub_100037944(v0[60], v9, &qword_1001C2838);
    uint64_t v10 = type metadata accessor for PresentmentResponseBuilder.DBResults();
    *(void *)(v9 + *(int *)(v10 + 20)) = v12;
    *(void *)(v9 + *(int *)(v10 + 24)) = v13;
  }
  sub_10000B9DC((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100076724()
{
  unint64_t v1 = v0[85];
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[82];
  unint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v4, v3, v2, v1);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  sub_10000B9DC((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100076890()
{
  unint64_t v9 = v0[85];
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[83];
  uint64_t v3 = v0[82];
  unint64_t v4 = v0[79];
  uint64_t v5 = v0[78];
  uint64_t v6 = v0[61];
  swift_bridgeObjectRelease();
  sub_1000035EC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v3, v2, v1, v9);
  sub_100085F74(v6, type metadata accessor for PayloadMetadata);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  sub_10000B9DC((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100076A20()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[83];
  uint64_t v3 = v0[82];
  unint64_t v4 = v0[79];
  uint64_t v5 = v0[78];
  uint64_t v6 = v0[60];
  unint64_t v9 = v0[85];
  uint64_t v10 = v0[61];
  swift_bridgeObjectRelease();
  sub_1000035EC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v3, v2, v1, v9);
  sub_100014BBC(v6, &qword_1001C2838);
  sub_100085F74(v10, type metadata accessor for PayloadMetadata);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  sub_10000B9DC((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100076BC0()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[83];
  uint64_t v3 = v0[82];
  unint64_t v4 = v0[79];
  uint64_t v5 = v0[78];
  uint64_t v6 = v0[60];
  unint64_t v9 = v0[85];
  uint64_t v10 = v0[61];
  swift_bridgeObjectRelease();
  sub_1000035EC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000035EC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100063808(v3, v2, v1, v9);
  sub_100014BBC(v6, &qword_1001C2838);
  sub_100085F74(v10, type metadata accessor for PayloadMetadata);
  sub_100014BBC((uint64_t)(v0 + 16), &qword_1001C28E8);
  sub_10000B9DC((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void sub_100076D60(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v66 = a4;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_100163764(a1, a2);
  if (!v5)
  {
    uint64_t v15 = (void *)v14;
    uint64_t v54 = a5;
    if (!v14)
    {
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.idcsUnknownCredential(_:), v10);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    unint64_t v16 = (void *)sub_1000F7454(a3, v66);
    uint64_t v17 = v16;
    if (!v16)
    {
      unint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      unint64_t v55 = 0xD00000000000002CLL;
      unint64_t v56 = 0x800000010017E3D0;
      Swift::String v21 = Data.base16EncodedString()();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.idcsMissingPresentmentKey(_:), v10);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      return;
    }
    uint64_t v18 = v15;
    id v19 = [v16 payload];
    if (!v19)
    {
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.idcsMissingPayload(_:), v10);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      return;
    }
    uint64_t v20 = v19;
    sub_1000F7CF0(v59.n128_u64);
    uint64_t v22 = v60;
    if ((void)v63 != 2)
    {
      if ((void)v63 != 1)
      {
        if ((void)v63)
        {
          (*(void (**)(char *, void, uint64_t, __n128))(v11 + 104))(v13, enum case for DIPError.Code.internalError(_:), v10, v59);
          sub_100102620((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();

          sub_100085E0C((uint64_t)&v59);
          return;
        }
        long long v52 = v63;
        __n128 v53 = v59;
        long long v51 = v64;
        uint64_t v23 = v61;
        uint64_t v24 = v62;
        uint64_t v25 = v65;

        uint64_t v26 = v25;
        uint64_t v27 = v24;
        uint64_t v28 = v23;
        long long v29 = v51;
        long long v31 = v52;
        __n128 v30 = v53;
        uint64_t v32 = 0;
        uint64_t v66 = 0;
        id v33 = 0;
        id v34 = 0;
        uint64_t v35 = v54;
        goto LABEL_35;
      }
      uint64_t v48 = v65;
      uint64_t v47 = v60;
      long long v51 = v64;
      long long v52 = v63;
      unint64_t v57 = &type metadata for CredentialDecryptionKeyIdentifierProvider;
      id v58 = &off_1001B3EC8;
      __n128 v53 = v59;
      uint64_t v50 = v61;
      uint64_t v49 = v62;
      id v42 = sub_10000978C((uint64_t)v18, v61, v62, v59.n128_i64[0]);
      sub_100085E70((uint64_t)&v55);
      if (v42)
      {
        id v34 = [v42 identifier];
        if (!v34)
        {

          uint64_t v32 = 0;
          uint64_t v66 = 0;
          id v33 = 0;
          goto LABEL_33;
        }
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v66 = v43;

        id v44 = [v42 publicKeyIdentifier];
        if (v44)
        {
          unint64_t v45 = v44;
          id v33 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
          id v34 = v46;

LABEL_33:
          uint64_t v35 = v54;
          long long v31 = v52;
          __n128 v30 = v53;
          long long v29 = v51;
          uint64_t v22 = v47;
          goto LABEL_34;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      uint64_t v32 = 0;
      uint64_t v66 = 0;
      id v33 = 0;
      id v34 = 0;
      goto LABEL_33;
    }
    uint64_t v48 = v65;
    uint64_t v49 = v62;
    uint64_t v50 = v61;
    long long v51 = v64;
    long long v52 = v63;
    __n128 v53 = v59;
    id v36 = [v20 payloadProtectionKey];
    id v34 = v36;
    if (v36)
    {
      id v33 = [v36 identifier];

      if (!v33)
      {

        uint64_t v32 = 0;
        uint64_t v66 = 0;
        id v34 = 0;
LABEL_30:
        uint64_t v35 = v54;
        long long v31 = v52;
        __n128 v30 = v53;
        long long v29 = v51;
LABEL_34:
        uint64_t v28 = v50;
        uint64_t v27 = v49;
        uint64_t v26 = v48;
LABEL_35:
        *(__n128 *)uint64_t v35 = v30;
        *(void *)(v35 + 16) = v22;
        *(void *)(v35 + 24) = v28;
        *(void *)(v35 + 32) = v27;
        *(_OWORD *)(v35 + 40) = v31;
        *(_OWORD *)(v35 + 56) = v29;
        *(void *)(v35 + 72) = v26;
        *(void *)(v35 + 80) = v32;
        *(void *)(v35 + 88) = v66;
        *(void *)(v35 + 96) = v33;
        *(void *)(v35 + 104) = v34;
        return;
      }
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v37;

      id v38 = [v20 payloadProtectionKey];
      id v34 = v38;
      if (v38)
      {
        uint64_t v39 = v22;
        id v40 = [v38 publicKeyIdentifier];

        if (v40)
        {
          id v33 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
          id v34 = v41;
        }
        else
        {

          swift_bridgeObjectRelease();
          uint64_t v32 = 0;
          uint64_t v66 = 0;
          id v33 = 0;
          id v34 = 0;
        }
        uint64_t v35 = v54;
        long long v31 = v52;
        __n128 v30 = v53;
        long long v29 = v51;
        uint64_t v22 = v39;
        goto LABEL_34;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
    uint64_t v32 = 0;
    uint64_t v66 = 0;
    id v33 = 0;
    goto LABEL_30;
  }
}

unint64_t sub_100077704(uint64_t a1)
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  if (a1)
  {
    sub_100006CC8(&qword_1001C3C70);
    uint64_t v2 = Dictionary.debugDescription.getter();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v2 = 0x3E6C696E3CLL;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0xD00000000000001ELL;
}

unint64_t sub_1000777C0()
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  sub_100006CC8(&qword_1001C2928);
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000025;
}

uint64_t sub_100077860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ISO18013Response.Status();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013Response();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ISO18013Response.Document();
  v5[16] = v9;
  v5[17] = *(void *)(v9 - 8);
  v5[18] = swift_task_alloc();
  sub_100006CC8(&qword_1001C28A8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ISO18013Response.IssuerSigned();
  v5[21] = v10;
  v5[22] = *(void *)(v10 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v5[25] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPSignpost();
  v5[26] = v11;
  v5[27] = *(void *)(v11 - 8);
  v5[28] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v5[29] = v12;
  v5[30] = *(void *)(v12 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  return _swift_task_switch(sub_100077BDC, 0, 0);
}

uint64_t sub_100077BDC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder buildResponsePayload", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[29];
  uint64_t v6 = v0[30];
  uint64_t v7 = v0[24];
  uint64_t v9 = v0[3];
  uint64_t v8 = v0[4];

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[33] = v10;
  v0[34] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v4, v5);
  static IDCSSignposts.presentmentBuildResponsePayload.getter();
  DIPSignpost.init(_:)();
  sub_100078A74(v9, v8, v7);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[35] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100077F88;
  uint64_t v12 = v0[20];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[2];
  uint64_t v15 = v0[3];
  return sub_10007A35C(v12, v14, v15, v13);
}

uint64_t sub_100077F88()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10007877C;
  }
  else {
    os_log_type_t v2 = sub_10007809C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007809C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v47 = *(void *)(v0 + 192);
  uint64_t v48 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v49 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v50 = *(void *)(v0 + 128);
  uint64_t v51 = *(void *)(v0 + 96);
  uint64_t v52 = *(void *)(v0 + 80);
  uint64_t v53 = *(void *)(v0 + 48);
  id v7 = [**(id **)(v0 + 24) docType];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v47, v3);
  sub_100037898(v48, v4, &qword_1001C28A8);
  ISO18013Response.Document.init(docType:issuerSigned:deviceSigned:errors:)();
  sub_100006CC8(&qword_1001C28B0);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001768E0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(v9 + v8, v49, v50);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v51, enum case for ISO18013Response.Status.ok(_:), v52);
  static ISO18013Response.supportedVersion.getter();
  ISO18013Response.init(version:documents:documentErrors:status:)();
  if ((*(unsigned char *)(v53 + 64) & 1) != 0 || *(void *)(*(void *)(v0 + 48) + 32) != 1)
  {
    uint64_t v13 = *(void *)(v0 + 288);
    sub_1000825EC();
    sub_100085EC4(&qword_1001C28B8, (void (*)(uint64_t))&type metadata accessor for ISO18013Response);
    uint64_t v14 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    uint64_t v16 = v15;
    swift_release();
    if (v13)
    {
LABEL_6:
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v18 = *(void *)(v0 + 144);
      uint64_t v20 = *(void *)(v0 + 128);
      (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      sub_100014BBC(v17, &qword_1001C28A8);
      (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 168));
      uint64_t v21 = *(void *)(v0 + 216);
      uint64_t v22 = *(void *)(v0 + 224);
      uint64_t v23 = *(void *)(v0 + 208);
      (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 56));
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }
    uint64_t v54 = v16;
    uint64_t v26 = v14;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v11 = sub_100084D54(*(void *)(v0 + 120), *(void **)(v0 + 16), *(void *)(v0 + 40));
    if (v10) {
      goto LABEL_6;
    }
    uint64_t v54 = v12;
    uint64_t v26 = v11;
  }
  id v42 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v28 = *(void *)(v0 + 224);
  uint64_t v39 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 216);
  uint64_t v46 = *(void *)(v0 + 208);
  uint64_t v45 = *(void *)(v0 + 192);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v43 = *(void *)(v0 + 160);
  uint64_t v44 = *(void *)(v0 + 168);
  uint64_t v31 = *(void *)(v0 + 136);
  uint64_t v40 = *(void *)(v0 + 128);
  uint64_t v41 = *(void *)(v0 + 144);
  uint64_t v32 = *(void *)(v0 + 112);
  uint64_t v38 = *(void *)(v0 + 120);
  uint64_t v33 = *(void *)(v0 + 104);
  v34._uint64_t countAndFlagsBits = 0xD00000000000005BLL;
  v34._object = (void *)0x800000010017E060;
  v35._uint64_t countAndFlagsBits = 0x3334646133663763;
  v35._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v35, v34);
  defaultLogger()();
  uint64_t v36 = swift_task_alloc();
  *(void *)(v36 + 16) = v26;
  *(void *)(v36 + 24) = v54;
  Logger.sensitive(_:)();
  swift_task_dealloc();
  v42(v27, v39);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v33);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v41, v40);
  sub_100014BBC(v43, &qword_1001C28A8);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v45, v44);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v37(v26, v54);
}

uint64_t sub_10007877C()
{
  (*(void (**)(void, void))(v0[22] + 8))(v0[24], v0[21]);
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_1000789D4()
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000016;
}

uint64_t sub_100078A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v177 = a2;
  uint64_t v147 = a1;
  uint64_t v146 = a3;
  uint64_t v154 = type metadata accessor for DIPError.Code();
  uint64_t v153 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  v159 = (char *)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006CC8(&qword_1001C2890);
  __chkstk_darwin(v6 - 8);
  uint64_t v194 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v199 = *(_DWORD **)(v193 - 8);
  uint64_t v8 = __chkstk_darwin(v193);
  uint64_t v184 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v183 = (char *)&v144 - v10;
  uint64_t v11 = sub_100006CC8(&qword_1001C1A90);
  __chkstk_darwin(v11 - 8);
  long long v192 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = type metadata accessor for CredentialElement(0);
  uint64_t v158 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  uint64_t v201 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v198 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  os_log_t v200 = (os_log_t)((char *)&v144 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_100006CC8(&qword_1001C2838);
  __chkstk_darwin(v15 - 8);
  NSString v164 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for COSE_Sign1();
  uint64_t v166 = *(void *)(v165 - 8);
  uint64_t v17 = __chkstk_darwin(v165);
  id v145 = (char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v144 - v20;
  __chkstk_darwin(v19);
  unint64_t v148 = (char *)&v144 - v22;
  uint64_t v23 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v23 - 8);
  uint64_t v156 = type metadata accessor for DIPSignpost();
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v25 = (char *)&v144 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v176 - 8);
  uint64_t v27 = __chkstk_darwin(v176);
  uint64_t v167 = (char *)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v171 = (char *)&v144 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v144 - v32;
  __chkstk_darwin(v31);
  Swift::String v35 = (char *)&v144 - v34;
  defaultLogger()();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v196 = v21;
  if (v38)
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "PresentmentResponseBuilder buildResponsePayloadIssuerSigned", v39, 2u);
    uint64_t v21 = v196;
    swift_slowDealloc();
  }

  uint64_t v40 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v173 = v26 + 8;
  unint64_t v172 = v40;
  v40(v35, v176);
  static IDCSSignposts.presentmentBuildResponsePayloadIssuerSigned.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Building response payload issuer signed", v43, 2u);
    swift_slowDealloc();
  }

  v172(v33, v176);
  Class v174 = (void *)sub_10004B214((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = *(void *)(v177 + 64);
  uint64_t v160 = v177 + 64;
  uint64_t v45 = 1 << *(unsigned char *)(v177 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v44;
  int64_t v161 = (unint64_t)(v45 + 63) >> 6;
  unsigned int v191 = enum case for ISO18013PresentmentType.physical(_:);
  unsigned int v190 = enum case for ISO18013PresentmentType.digital(_:);
  unsigned int v185 = enum case for ISO18013CodingKeyFormat.standard(_:);
  long long v182 = (void (**)(char *, uint64_t, uint64_t))(v199 + 26);
  long long v189 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v199 + 14);
  unsigned int v178 = enum case for ISO18013CodingKeyFormat.ACWG(_:);
  long long v181 = (void (**)(char *, char *, uint64_t))(v199 + 8);
  uint64_t v180 = (void (**)(char *, char *, uint64_t))(v199 + 4);
  uint64_t v179 = (void (**)(char *, uint64_t))(v199 + 2);
  uint64_t v186 = v198 + 32;
  swift_bridgeObjectRetain();
  int64_t v48 = 0;
  *(void *)&long long v49 = 136315138;
  long long v152 = v49;
  uint64_t v151 = (char *)&type metadata for Any + 8;
  NSString v157 = v25;
  uint64_t v50 = v165;
  uint64_t v51 = v166;
  uint64_t v52 = v167;
  uint64_t v53 = (uint64_t)v164;
  if (!v47) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v54 = __clz(__rbit64(v47));
  uint64_t v55 = (v47 - 1) & v47;
  for (unint64_t i = v54 | (v48 << 6); ; unint64_t i = __clz(__rbit64(v58)) + (v48 << 6))
  {
    unint64_t v168 = v55;
    int64_t v169 = v48;
    uint64_t v60 = *(void *)(v177 + 56);
    uint64_t v61 = (uint64_t *)(*(void *)(v177 + 48) + 16 * i);
    uint64_t v62 = v61[1];
    uint64_t v175 = *v61;
    uint64_t v63 = *(void *)(v60 + 8 * i);
    int64_t v64 = *(void *)(v63 + 16);
    if (v64)
    {
      unint64_t v203 = _swiftEmptyArrayStorage;
      uint64_t v163 = v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100068330(0, v64, 0);
      unint64_t v65 = (*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
      uint64_t v162 = v63;
      uint64_t v66 = v63 + v65;
      uint64_t v188 = *(void *)(v158 + 72);
      while (1)
      {
        unint64_t v67 = v201;
        sub_100084CE4(v66, (uint64_t)v201, type metadata accessor for CredentialElement);
        uint64_t v68 = (uint64_t *)&v67[*(int *)(v197 + 24)];
        unint64_t v69 = v68[1];
        if (v69 >> 60 == 15)
        {
          uint64_t v114 = v153;
          uint64_t v115 = v154;
          (*(void (**)(char *, void, uint64_t))(v153 + 104))(v159, enum case for DIPError.Code.idcsMissingProposalCredentialIssuerData(_:), v154);
          sub_100102620((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          uint64_t v116 = v157;
          goto LABEL_62;
        }
        uint64_t v70 = v4;
        uint64_t v71 = *v68;
        type metadata accessor for CBORDecoder();
        swift_allocObject();
        uint64_t v199 = (_DWORD *)v71;
        sub_10000354C(v71, v69);
        CBORDecoder.init()();
        uint64_t v72 = v195;
        uint64_t v73 = *(void *)(v195 + 16);
        uint64_t v74 = type metadata accessor for ISO18013PresentmentType();
        uint64_t v75 = *(void *)(v74 - 8);
        uint64_t v76 = v73 == 1 ? v190 : v191;
        uint64_t v77 = v192;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 104))(v192, v76, v74);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v77, 0, 1, v74);
        CBORDecoder.presentmentType.setter();
        if (*(unsigned char *)(v72 + 64) == 1)
        {
          uint64_t v78 = (uint64_t)v194;
          (*v189)(v194, 1, 1, v193);
          sub_100014BBC(v78, &qword_1001C2890);
        }
        else
        {
          uint64_t v79 = *(void *)(v72 + 56);
          uint64_t v80 = v185;
          if (v79 != 2)
          {
            uint64_t v80 = v178;
            if (v79 != 1)
            {
              uint64_t v80 = v185;
              if (v79)
              {
                uint64_t v170 = v70;
                uint64_t v81 = v171;
                defaultLogger()();
                uint64_t v82 = Logger.logObject.getter();
                os_log_type_t v83 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v82, v83))
                {
                  uint64_t v84 = swift_slowAlloc();
                  Class v150 = (void *)swift_slowAlloc();
                  uint64_t v202 = v150;
                  *(_DWORD *)uint64_t v84 = v152;
                  id v85 = (id)DCPresentmentMessageEncodingFormatToString();
                  uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  os_log_t v149 = v82;
                  uint64_t v87 = v86;
                  unint64_t v89 = v88;

                  *(void *)(v84 + 4) = sub_10004C3A4(v87, v89, (uint64_t *)&v202);
                  swift_bridgeObjectRelease();
                  os_log_t v90 = v149;
                  _os_log_impl((void *)&_mh_execute_header, v149, v83, "Unknown message encoding format: %s", (uint8_t *)v84, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v91 = v171;
                }
                else
                {

                  uint64_t v91 = v81;
                }
                v172(v91, v176);
                uint64_t v80 = v185;
                uint64_t v70 = v170;
              }
            }
          }
          uint64_t v93 = v193;
          uint64_t v92 = v194;
          (*v182)(v194, v80, v193);
          (*v189)(v92, 0, 1, v93);
          unint64_t v94 = v183;
          (*v181)(v183, v92, v93);
          (*v180)(v184, v94, v93);
          CBORDecoder.codingKeyFormat.setter();
          (*v179)(v94, v93);
        }
        type metadata accessor for ISO18013IssuerSignedItem();
        sub_100085EC4(&qword_1001C2898, (void (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem);
        sub_100085EC4(&qword_1001C28A0, (void (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem);
        CBOREncodedCBOR.init(_:dataValue:decoder:)();
        uint64_t v4 = v70;
        if (v70) {
          break;
        }
        sub_100085F74((uint64_t)v201, type metadata accessor for CredentialElement);
        long long v95 = v203;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100068330(0, v95[2] + 1, 1);
          long long v95 = v203;
        }
        uint64_t v21 = v196;
        unint64_t v97 = v95[2];
        unint64_t v96 = v95[3];
        if (v97 >= v96 >> 1)
        {
          sub_100068330(v96 > 1, v97 + 1, 1);
          long long v95 = v203;
        }
        v95[2] = v97 + 1;
        (*(void (**)(unint64_t, os_log_t, uint64_t))(v198 + 32))((unint64_t)v95+ ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80))+ *(void *)(v198 + 72) * v97, v200, v187);
        v66 += v188;
        if (!--v64)
        {
          swift_bridgeObjectRelease();
          uint64_t v62 = v163;
          goto LABEL_44;
        }
      }
      uint64_t v116 = v157;
      uint64_t v115 = v154;
      uint64_t v114 = v153;
LABEL_62:
      sub_100085F74((uint64_t)v201, type metadata accessor for CredentialElement);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v117 = *(void (**)(char *, void, uint64_t))(v114 + 104);
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    long long v95 = _swiftEmptyArrayStorage;
LABEL_44:
    uint64_t v98 = (uint64_t)v174;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v203 = (void *)v98;
    uint64_t v100 = v62;
    unint64_t v102 = sub_10013C484(v175, v62);
    uint64_t v103 = *(void *)(v98 + 16);
    BOOL v104 = (v101 & 1) == 0;
    uint64_t v105 = v103 + v104;
    uint64_t v51 = v166;
    if (__OFADD__(v103, v104)) {
      break;
    }
    char v106 = v101;
    if (*(void *)(v98 + 24) >= v105)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10009AF34();
      }
    }
    else
    {
      sub_100099210(v105, isUniquelyReferenced_nonNull_native);
      unint64_t v107 = sub_10013C484(v175, v100);
      if ((v106 & 1) != (v108 & 1)) {
        goto LABEL_82;
      }
      unint64_t v102 = v107;
    }
    uint64_t v109 = v203;
    Class v174 = v203;
    if (v106)
    {
      uint64_t v110 = v203[7];
      swift_bridgeObjectRelease();
      *(void *)(v110 + 8 * v102) = v95;
    }
    else
    {
      v203[(v102 >> 6) + 8] |= 1 << v102;
      unint64_t v111 = (void *)(v109[6] + 16 * v102);
      *unint64_t v111 = v175;
      v111[1] = v100;
      *(void *)(v109[7] + 8 * v102) = v95;
      uint64_t v112 = v109[2];
      BOOL v57 = __OFADD__(v112, 1);
      uint64_t v113 = v112 + 1;
      if (v57) {
        goto LABEL_80;
      }
      v109[2] = v113;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = v165;
    uint64_t v52 = v167;
    uint64_t v53 = (uint64_t)v164;
    int64_t v48 = v169;
    unint64_t v47 = v168;
    if (v168) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v57 = __OFADD__(v48++, 1);
    if (v57) {
      goto LABEL_79;
    }
    if (v48 >= v161) {
      goto LABEL_64;
    }
    unint64_t v58 = *(void *)(v160 + 8 * v48);
    if (!v58)
    {
      int64_t v59 = v48 + 1;
      if (v48 + 1 >= v161) {
        goto LABEL_64;
      }
      unint64_t v58 = *(void *)(v160 + 8 * v59);
      if (!v58)
      {
        int64_t v59 = v48 + 2;
        if (v48 + 2 >= v161) {
          goto LABEL_64;
        }
        unint64_t v58 = *(void *)(v160 + 8 * v59);
        if (!v58)
        {
          int64_t v59 = v48 + 3;
          if (v48 + 3 >= v161)
          {
LABEL_64:
            swift_release();
            uint64_t v119 = type metadata accessor for PresentmentProposal();
            sub_100037898(v147 + *(int *)(v119 + 24), v53, &qword_1001C2838);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v53, 1, v50) != 1)
            {
              unint64_t v120 = v148;
              (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v148, v53, v50);
              defaultLogger()();
              char v121 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
              v121(v21, v120, v50);
              uint64_t v122 = Logger.logObject.getter();
              int v123 = static os_log_type_t.debug.getter();
              BOOL v124 = os_log_type_enabled(v122, (os_log_type_t)v123);
              uint64_t v201 = (char *)v121;
              if (v124)
              {
                LODWORD(v197) = v123;
                uint64_t v198 = v51 + 16;
                uint64_t v125 = (_DWORD *)swift_slowAlloc();
                uint64_t v195 = swift_slowAlloc();
                unint64_t v203 = (void *)v195;
                uint64_t v199 = v125;
                *uint64_t v125 = 136446210;
                uint64_t v126 = COSE_Sign1.x509Chain.getter();
                os_log_t v200 = v122;
                if (v126)
                {
                  uint64_t v127 = v126;
                  uint64_t v170 = v4;
                  int64_t v128 = *(void *)(v126 + 16);
                  if (v128)
                  {
                    uint64_t v202 = _swiftEmptyArrayStorage;
                    sub_100068310(0, v128, 0);
                    uint64_t v129 = v202;
                    id v130 = (unint64_t *)(v127 + 40);
                    do
                    {
                      uint64_t v132 = *(v130 - 1);
                      unint64_t v131 = *v130;
                      sub_10000354C(v132, *v130);
                      Swift::String v133 = Data.base64EncodedString(options:)(0);
                      sub_1000035EC(v132, v131);
                      uint64_t v202 = v129;
                      unint64_t v135 = v129[2];
                      unint64_t v134 = v129[3];
                      if (v135 >= v134 >> 1)
                      {
                        sub_100068310(v134 > 1, v135 + 1, 1);
                        uint64_t v129 = v202;
                      }
                      v130 += 2;
                      v129[2] = v135 + 1;
                      *(Swift::String *)&v129[2 * v135 + 4] = v133;
                      --v128;
                    }
                    while (v128);
                    swift_bridgeObjectRelease();
                    uint64_t v50 = v165;
                    uint64_t v51 = v166;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                }
                unint64_t v137 = (uint8_t *)v199;
                uint64_t v138 = Array.description.getter();
                unint64_t v140 = v139;
                swift_bridgeObjectRelease();
                uint64_t v202 = (void *)sub_10004C3A4(v138, v140, (uint64_t *)&v203);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                unint64_t v136 = *(void (**)(char *, uint64_t))(v51 + 8);
                v136(v196, v50);
                os_log_t v141 = v200;
                _os_log_impl((void *)&_mh_execute_header, v200, (os_log_type_t)v197, "PresentmentResponseBuilder built issuer auth with document signer chain: %{public}s", v137, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                v172(v167, v176);
              }
              else
              {
                unint64_t v136 = *(void (**)(char *, uint64_t))(v51 + 8);
                v136(v21, v50);

                v172(v52, v176);
              }
              uint64_t v142 = v148;
              ((void (*)(char *, char *, uint64_t))v201)(v145, v148, v50);
              ISO18013Response.IssuerSigned.init(namespaces:issuerAuth:)();
              v136(v142, v50);
              uint64_t v143 = v157;
              DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
              return (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v143, v156);
            }
            uint64_t v116 = v157;
            swift_bridgeObjectRelease();
            sub_100014BBC(v53, &qword_1001C2838);
            BOOL v117 = *(void (**)(char *, void, uint64_t))(v153 + 104);
            uint64_t v115 = v154;
            v117(v159, enum case for DIPError.Code.idcsMissingProposalIssuerAuth(_:), v154);
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
LABEL_63:
            v117(v159, enum case for DIPError.Code.internalError(_:), v115);
            swift_errorRetain();
            sub_100102620((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            swift_errorRelease();
            DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
            return (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v116, v156);
          }
          unint64_t v58 = *(void *)(v160 + 8 * v59);
          if (!v58)
          {
            while (1)
            {
              int64_t v48 = v59 + 1;
              if (__OFADD__(v59, 1)) {
                goto LABEL_81;
              }
              if (v48 >= v161) {
                goto LABEL_64;
              }
              unint64_t v58 = *(void *)(v160 + 8 * v48);
              ++v59;
              if (v58) {
                goto LABEL_19;
              }
            }
          }
        }
      }
      int64_t v48 = v59;
    }
LABEL_19:
    uint64_t v55 = (v58 - 1) & v58;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10007A35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2848);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ISO18013Response.DeviceAuth();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2838);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for COSE_Sign1();
  v5[18] = v8;
  v5[19] = *(void *)(v8 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v9 = sub_100006CC8(&qword_1001C2808);
  v5[21] = v9;
  v5[22] = *(void *)(v9 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v5[25] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  v5[26] = v10;
  v5[27] = *(void *)(v10 - 8);
  v5[28] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v5[29] = v11;
  v5[30] = *(void *)(v11 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  return _swift_task_switch(sub_10007A6C0, 0, 0);
}

uint64_t sub_10007A6C0()
{
  defaultLogger()();
  Swift::String v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder buildResponsePayloadDeviceSigned", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[29];
  uint64_t v6 = v0[30];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  static IDCSSignposts.presentmentBuildResponsePayloadDeviceSigned.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Building response payload device signed", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[31];
  uint64_t v12 = v0[29];
  uint64_t v13 = (void *)v0[4];

  v7(v11, v12);
  v0[2] = sub_100083F2C(v13);
  sub_1000825EC();
  sub_100006CC8(&qword_1001C2850);
  sub_100084BAC(&qword_1001C2858, (void (*)(void))sub_100084B00);
  sub_100084BAC(&qword_1001C2878, (void (*)(void))sub_100084C28);
  CBOREncodedCBOR.init(value:tag:encoder:)();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[33] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10007ABB4;
  uint64_t v15 = v0[24];
  uint64_t v16 = v0[17];
  uint64_t v17 = v0[6];
  uint64_t v18 = v0[4];
  uint64_t v19 = v0[5];
  return sub_10007B408(v16, v18, v19, v17, v15);
}

uint64_t sub_10007ABB4()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10007B048;
  }
  else {
    os_log_type_t v2 = sub_10007ACC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007ACC8()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v5 = v0[24];
  if (v4 == 1)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[24], v0[21]);
    sub_100014BBC(v3, &qword_1001C2838);
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[20];
    uint64_t v21 = v0[23];
    uint64_t v22 = v0[21];
    uint64_t v9 = v0[16];
    uint64_t v20 = v0[15];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[11];
    uint64_t v23 = v0[14];
    uint64_t v24 = v0[12];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v8, v1);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v9, 0, 1, v1);
    uint64_t v12 = type metadata accessor for COSE_Mac0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    ISO18013Response.DeviceAuth.init(deviceSignature:deviceMac:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v21, v5, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v23, v20, v24);
    ISO18013Response.DeviceSigned.init(namespaces:deviceAuth:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v20, v24);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v1);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v22);
    uint64_t v6 = 0;
  }
  uint64_t v14 = v0[27];
  uint64_t v13 = v0[28];
  uint64_t v15 = v0[26];
  uint64_t v16 = v0[3];
  uint64_t v17 = type metadata accessor for ISO18013Response.DeviceSigned();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, v6, 1, v17);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10007B048()
{
  (*(void (**)(void, void))(v0[22] + 8))(v0[24], v0[21]);
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_10007B2AC()
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  sub_100006CC8(&qword_1001C3C00);
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000025;
}

unint64_t sub_10007B34C()
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100006CC8(&qword_1001C2868);
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

uint64_t sub_10007B408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CredentialKeyType();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  return _swift_task_switch(sub_10007B598, 0, 0);
}

uint64_t sub_10007B598()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder signDeviceSignedData", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v8 = v0[14];
  uint64_t v7 = v0[15];
  uint64_t v9 = v0[13];
  uint64_t v10 = v0[6];

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11(v4, v5);
  uint64_t v12 = type metadata accessor for PresentmentProposal();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, *(void *)(v10 + *(int *)(v12 + 28)) + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v9);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v7, v9);
  if (v13 == enum case for CredentialKeyType.legacySE(_:))
  {
    uint64_t v14 = (void *)swift_task_alloc();
    v0[20] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10007BB0C;
    uint64_t v15 = v0[8];
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    uint64_t v18 = v0[4];
    uint64_t v19 = v0[5];
    return sub_10007E0BC(v18, v19, v16, v17, v15);
  }
  else if (v13 == enum case for CredentialKeyType.ses(_:))
  {
    uint64_t v21 = (void *)swift_task_alloc();
    v0[22] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10007BCFC;
    uint64_t v22 = v0[8];
    uint64_t v23 = v0[6];
    uint64_t v24 = v0[7];
    uint64_t v25 = v0[4];
    uint64_t v26 = v0[5];
    return sub_10007BF28(v25, v26, v23, v24, v22);
  }
  else
  {
    if (v13 == enum case for CredentialKeyType.externalSE(_:))
    {
      defaultLogger()();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Device signature with external SE key is not supported; skipping signature",
          v29,
          2u);
        swift_slowDealloc();
      }
      uint64_t v30 = v0[18];
      uint64_t v31 = v0[16];

      v11(v30, v31);
      uint64_t v32 = v0[4];
      uint64_t v33 = type metadata accessor for COSE_Sign1();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = (uint64_t (*)(void))v0[1];
    }
    else
    {
      uint64_t v35 = v0[14];
      uint64_t v41 = v0[15];
      uint64_t v36 = v0[12];
      uint64_t v37 = v0[13];
      uint64_t v39 = v0[10];
      uint64_t v38 = v0[11];
      _StringGuts.grow(_:)(39);
      v0[2] = 0;
      v0[3] = 0xE000000000000000;
      v40._object = (void *)0x800000010017DE50;
      v40._uint64_t countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v40);
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v36, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v39);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v41, v37);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = (uint64_t (*)(void))v0[1];
    }
    return v34();
  }
}

uint64_t sub_10007BB0C()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10007BE10;
  }
  else {
    os_log_type_t v2 = sub_10007BC20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007BC20()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for COSE_Sign1();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10007BCFC()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10007BE9C;
  }
  else {
    uint64_t v2 = sub_1000871AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007BE10()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007BE9C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007BF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2838);
  v6[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v6[14] = v8;
  v6[15] = *(void *)(v8 - 8);
  v6[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SESKeystore.SignatureOutputFormat();
  v6[17] = v9;
  v6[18] = *(void *)(v9 - 8);
  v6[19] = swift_task_alloc();
  v6[20] = type metadata accessor for PresentmentProposal();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2840);
  v6[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ISO18013SessionTranscript();
  v6[24] = v10;
  v6[25] = *(void *)(v10 - 8);
  v6[26] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v6[27] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPSignpost();
  v6[28] = v11;
  v6[29] = *(void *)(v11 - 8);
  v6[30] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v6[31] = v12;
  v6[32] = *(void *)(v12 - 8);
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  return _swift_task_switch(sub_10007C2BC, 0, 0);
}

uint64_t sub_10007C2BC()
{
  os_log_t v141 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder signDeviceSignedDataSES", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[38] = v7;
  v0[39] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  static IDCSSignposts.presentmentBuildResponseSignDeviceDataSES.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Signing device signed data with SES key", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[31];
  uint64_t v13 = v0[24];
  uint64_t v14 = v0[25];
  uint64_t v15 = v0[23];
  uint64_t v16 = v0[7];

  v7(v11, v12);
  sub_100037898(v16, v15, &qword_1001C2840);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    uint64_t v18 = v0[15];
    uint64_t v17 = v0[16];
    uint64_t v19 = v0[14];
    sub_100014BBC(v0[23], &qword_1001C2840);
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v19);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v20 = (void *)v0[5];
  (*(void (**)(void, void, void))(v0[25] + 32))(v0[26], v0[23], v0[24]);
  id v21 = [v20 authData];
  if (!v21)
  {
    uint64_t v43 = v0[25];
    uint64_t v42 = v0[26];
    uint64_t v44 = v0[24];
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.idcsMissingAuthDataInPresentmentSelection(_:), v0[14]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    goto LABEL_12;
  }
  uint64_t v22 = v21;
  Swift::String v133 = v7;
  uint64_t v23 = v0[20];
  uint64_t v24 = v0[6];
  uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  v0[40] = v25;
  v0[41] = v27;
  unint64_t v136 = v27;
  v0[42] = *(void *)(v24 + *(int *)(v23 + 28));
  type metadata accessor for SESPresentmentKey(0);
  uint64_t v28 = swift_dynamicCastClass();
  unint64_t v29 = v0[26];
  if (!v28)
  {
    uint64_t v45 = v0[24];
    uint64_t v46 = v0[25];
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.badLogic(_:), v0[14]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v25, v27);
    (*(void (**)(unint64_t, uint64_t))(v46 + 8))(v29, v45);
    goto LABEL_12;
  }
  uint64_t v131 = v25;
  uint64_t v30 = v0[8];
  uint64_t v31 = (void **)v0[6];
  uint64_t v32 = v28 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob;
  uint64_t v33 = *(void *)(v28 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob);
  v0[43] = v33;
  unint64_t v34 = *(void *)(v32 + 8);
  v0[44] = v34;
  uint64_t v35 = *v31;
  swift_retain();
  sub_10000354C(v33, v34);
  id v36 = [v35 docType];
  uint64_t v37 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v39 = v38;

  uint64_t v40 = sub_100080794(v29, v37, v39, v30);
  v0[45] = v40;
  v0[46] = v41;
  unint64_t v52 = v41;
  uint64_t v125 = v40;
  unint64_t v128 = v34;
  uint64_t v54 = v0[21];
  uint64_t v53 = v0[22];
  uint64_t v55 = v0[6];
  swift_bridgeObjectRelease();
  defaultLogger()();
  sub_100084CE4(v55, v53, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  sub_100084CE4(v55, v54, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  unint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  uint64_t v59 = v0[35];
  uint64_t v60 = v0[31];
  uint64_t v62 = v0[21];
  uint64_t v61 = v0[22];
  unint64_t v127 = v52;
  if (v58)
  {
    uint64_t v63 = swift_slowAlloc();
    uint64_t v139 = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 136315394;
    uint64_t v124 = v60;
    uint64_t v64 = *(void *)(v61 + *(int *)(v23 + 28));
    os_log_type_t type = v57;
    uint64_t v66 = *(void *)(v64 + 16);
    unint64_t v65 = *(void *)(v64 + 24);
    swift_bridgeObjectRetain();
    v0[2] = sub_10004C3A4(v66, v65, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100085F74(v61, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    *(_WORD *)(v63 + 12) = 2080;
    uint64_t v67 = (*(uint64_t (**)(void))(*(void *)(v62 + *(int *)(v23 + 28) + 8) + 16))(**(void **)(v62 + *(int *)(v23 + 28)));
    uint64_t v68 = v62;
    unint64_t v70 = v69;
    Swift::String v71 = Data.base16EncodedString()();
    sub_1000035EC(v67, v70);
    v0[3] = sub_10004C3A4(v71._countAndFlagsBits, (unint64_t)v71._object, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100085F74(v68, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    _os_log_impl((void *)&_mh_execute_header, v56, type, "Signing device authentication with SES key %s, public key identifier %s", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v72 = v59;
    uint64_t v73 = v124;
  }
  else
  {
    sub_100085F74(v61, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    sub_100085F74(v62, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);

    uint64_t v72 = v59;
    uint64_t v73 = v60;
  }
  v133(v72, v73);
  uint64_t v74 = *(void *)(v0[6] + *(int *)(v0[20] + 32));
  if ((unint64_t)(v74 - 1) >= 2)
  {
    if (v74)
    {
      uint64_t v109 = v0[25];
      uint64_t v110 = v0[26];
      uint64_t v111 = v0[24];
      (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.internalError(_:), v0[14]);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_1000035EC(v125, v127);
      sub_1000035EC(v33, v128);
      sub_1000035EC(v131, v136);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v110, v111);
    }
    else
    {
      defaultLogger()();
      id v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v87 = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Auth policy is not required; using empty signature",
          v87,
          2u);
        swift_slowDealloc();
      }
      uint64_t v88 = v0[34];
      uint64_t v89 = v0[31];

      v133(v88, v89);
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v90 = __DataStorage.init(length:)();
      uint64_t v139 = 0x2000000000;
      uint64_t v140 = v90;
      sub_100083084((int *)&v139, 0);
      uint64_t v91 = v139;
      unint64_t v92 = v140 | 0x4000000000000000;
      uint64_t v93 = (void (*)(uint64_t, uint64_t))v0[38];
      uint64_t v94 = v0[33];
      uint64_t v95 = v0[31];
      uint64_t v96 = v0[12];
      uint64_t v97 = v0[11];
      uint64_t v134 = v0[10];
      uint64_t v137 = v0[13];
      defaultLogger()();
      uint64_t v98 = swift_task_alloc();
      *(void *)(v98 + 16) = v91;
      *(void *)(v98 + 24) = v92;
      Logger.cryptoParam(_:)();
      swift_task_dealloc();
      v93(v94, v95);
      (*(void (**)(uint64_t, void, uint64_t))(v97 + 104))(v96, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v134);
      sub_10000354C(v91, v92);
      uint64_t v135 = v91;
      COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
      uint64_t v99 = type metadata accessor for COSE_Sign1();
      uint64_t v100 = *(void *)(v99 - 8);
      int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v137, 1, v99);
      uint64_t v102 = v0[45];
      unint64_t v103 = v0[44];
      if (v101 != 1)
      {
        uint64_t v121 = v0[30];
        uint64_t v112 = v0[29];
        uint64_t v122 = v0[28];
        uint64_t v113 = v0[25];
        uint64_t v119 = v0[26];
        uint64_t v118 = v0[24];
        uint64_t v120 = v0[13];
        uint64_t v117 = v0[4];
        unint64_t v114 = v0[41];
        uint64_t v115 = v0[40];
        uint64_t v116 = v0[43];
        sub_1000035EC(v0[45], v0[46]);
        sub_1000035EC(v116, v103);
        sub_1000035EC(v115, v114);
        swift_release();
        sub_1000035EC(v135, v92);
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v119, v118);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32))(v117, v120, v99);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v121, v122);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v50 = (uint64_t (*)(void))v0[1];
        goto LABEL_13;
      }
      uint64_t v104 = v0[25];
      uint64_t v138 = v0[26];
      uint64_t v132 = v0[24];
      uint64_t v105 = v0[15];
      uint64_t v106 = v0[16];
      uint64_t v107 = v0[14];
      uint64_t v129 = v0[40];
      unint64_t v130 = v0[41];
      uint64_t v126 = v0[43];
      unint64_t v108 = v0[46];
      sub_100014BBC(v0[13], &qword_1001C2838);
      (*(void (**)(uint64_t, void, uint64_t))(v105 + 104))(v106, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v107);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_1000035EC(v102, v108);
      sub_1000035EC(v126, v103);
      sub_1000035EC(v129, v130);
      swift_release();
      sub_1000035EC(v135, v92);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v138, v132);
    }
LABEL_12:
    uint64_t v48 = v0[29];
    uint64_t v47 = v0[30];
    uint64_t v49 = v0[28];
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.internalError(_:), v0[14]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = (uint64_t (*)(void))v0[1];
LABEL_13:
    return v50();
  }
  uint64_t v75 = v0[18];
  uint64_t v76 = v0[19];
  uint64_t v77 = v0[17];
  uint64_t v78 = v0[9];
  uint64_t v79 = (void *)v0[5];
  uint64_t v80 = *(void *)(v78 + 144);
  v0[47] = v80;
  uint64_t v81 = *(void *)(v78 + 136);
  v0[48] = v81;
  swift_retain();
  swift_retain();
  id v82 = [v79 seAccessEndpoint];
  v0[49] = v82;
  (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v76, enum case for SESKeystore.SignatureOutputFormat.raw(_:), v77);
  os_log_type_t v83 = (void *)swift_task_alloc();
  v0[50] = v83;
  *os_log_type_t v83 = v0;
  v83[1] = sub_10007D5C8;
  uint64_t v84 = v0[19];
  uint64_t v143 = v80;
  uint64_t v144 = v81;
  return sub_1000FCB24(v125, v127, v33, v128, v131, v136, v84, (uint64_t)v82);
}

uint64_t sub_10007D5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[51] = v2;
  swift_task_dealloc();
  uint64_t v7 = (void *)v6[49];
  uint64_t v8 = v6[19];
  uint64_t v9 = v6[18];
  uint64_t v10 = v6[17];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);

    uint64_t v11 = sub_10007DDE0;
  }
  else
  {
    v6[52] = a2;
    v6[53] = a1;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);

    uint64_t v11 = sub_10007D778;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_10007D778()
{
  swift_release();
  swift_release();
  unint64_t v2 = v0[52];
  uint64_t v1 = v0[53];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[38];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[11];
  uint64_t v38 = v0[13];
  uint64_t v39 = v0[10];
  defaultLogger()();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v1;
  *(void *)(v8 + 24) = v2;
  Logger.cryptoParam(_:)();
  swift_task_dealloc();
  v3(v4, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v39);
  uint64_t v9 = v1;
  sub_10000354C(v1, v2);
  unint64_t v40 = v2;
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
  uint64_t v10 = type metadata accessor for COSE_Sign1();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v38, 1, v10);
  unint64_t v36 = v0[44];
  uint64_t v34 = v0[43];
  unint64_t v37 = v0[41];
  uint64_t v35 = v0[40];
  if (v12 == 1)
  {
    uint64_t v13 = v0[25];
    uint64_t v32 = v0[24];
    uint64_t v33 = v0[26];
    uint64_t v14 = v0[15];
    uint64_t v15 = v0[16];
    uint64_t v16 = v0[14];
    unint64_t v17 = v0[46];
    uint64_t v18 = v0[45];
    sub_100014BBC(v0[13], &qword_1001C2838);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v15, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v16);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v18, v17);
    sub_1000035EC(v34, v36);
    sub_1000035EC(v35, v37);
    swift_release();
    sub_1000035EC(v9, v40);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v33, v32);
    uint64_t v20 = v0[29];
    uint64_t v19 = v0[30];
    uint64_t v21 = v0[28];
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.internalError(_:), v0[14]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  else
  {
    uint64_t v24 = v0[29];
    uint64_t v23 = v0[30];
    uint64_t v25 = v0[26];
    uint64_t v27 = v0[24];
    uint64_t v26 = v0[25];
    uint64_t v30 = v0[13];
    uint64_t v31 = v0[28];
    uint64_t v28 = v0[4];
    sub_1000035EC(v0[45], v0[46]);
    sub_1000035EC(v34, v36);
    sub_1000035EC(v35, v37);
    swift_release();
    sub_1000035EC(v9, v40);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v28, v30, v10);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v31);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10007DDE0()
{
  uint64_t v2 = v0[45];
  unint64_t v1 = v0[46];
  uint64_t v4 = v0[43];
  unint64_t v3 = v0[44];
  unint64_t v5 = v0[41];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[25];
  uint64_t v14 = v0[26];
  uint64_t v13 = v0[24];
  swift_release();
  swift_release();
  sub_1000035EC(v2, v1);
  sub_1000035EC(v4, v3);
  sub_1000035EC(v6, v5);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v13);
  uint64_t v9 = v0[29];
  uint64_t v8 = v0[30];
  uint64_t v10 = v0[28];
  (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.internalError(_:), v0[14]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10007E0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[13] = a5;
  v6[14] = v5;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  uint64_t v7 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2838);
  v6[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v6[19] = v8;
  v6[20] = *(void *)(v8 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = type metadata accessor for PresentmentProposal();
  v6[23] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2840);
  v6[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ISO18013SessionTranscript();
  v6[25] = v9;
  v6[26] = *(void *)(v9 - 8);
  v6[27] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v6[28] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  v6[29] = v10;
  v6[30] = *(void *)(v10 - 8);
  v6[31] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v6[32] = v11;
  v6[33] = *(void *)(v11 - 8);
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  return _swift_task_switch(sub_10007E3FC, 0, 0);
}

uint64_t sub_10007E3FC()
{
  uint64_t v138 = v0;
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PresentmentResponseBuilder signDeviceSignedDataLegacySE", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[33];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[41] = v7;
  v0[42] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v134 = v7;
  v7(v4, v5);
  static IDCSSignposts.presentmentBuildResponseSignDeviceDataLegacySE.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Signing device signed data with legacy SE key", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[39];
  uint64_t v12 = v0[32];
  uint64_t v13 = v0[25];
  uint64_t v14 = v0[26];
  uint64_t v15 = v0[24];
  uint64_t v16 = v0[12];

  v134(v11, v12);
  sub_100037898(v16, v15, &qword_1001C2840);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    uint64_t v18 = v0[20];
    uint64_t v17 = v0[21];
    uint64_t v19 = v0[19];
    sub_100014BBC(v0[24], &qword_1001C2840);
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v19);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_14;
  }
  uint64_t v20 = (void *)v0[10];
  (*(void (**)(void, void, void))(v0[26] + 32))(v0[27], v0[24], v0[25]);
  id v21 = [v20 authData];
  if (!v21)
  {
    uint64_t v35 = v0[26];
    uint64_t v34 = v0[27];
    uint64_t v36 = v0[25];
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.idcsMissingAuthDataInPresentmentSelection(_:), v0[19]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_14;
  }
  uint64_t v22 = v21;
  uint64_t v23 = v0[22];
  uint64_t v24 = v0[11];
  uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  v0[43] = v25;
  v0[44] = v27;
  v0[45] = *(void *)(v24 + *(int *)(v23 + 28));
  type metadata accessor for LegacySEPresentmentKey(0);
  uint64_t v28 = swift_dynamicCastClass();
  if (!v28)
  {
    uint64_t v37 = v0[26];
    uint64_t v38 = v0[27];
    uint64_t v39 = v0[25];
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.badLogic(_:), v0[19]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    goto LABEL_14;
  }
  uint64_t v132 = v25;
  uint64_t v29 = v28 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_keySlot;
  uint64_t v30 = *(uint8_t **)(v28 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_keySlot);
  v0[46] = v30;
  unint64_t v31 = v0[27];
  if (*(unsigned char *)(v29 + 8))
  {
    uint64_t v33 = v0[25];
    uint64_t v32 = v0[26];
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v0[19]);
    swift_retain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000035EC(v25, v27);
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v31, v33);
    goto LABEL_14;
  }
  uint64_t v126 = v30;
  unint64_t v129 = v27;
  uint64_t v40 = v0[13];
  uint64_t v41 = *(void **)v0[11];
  swift_retain();
  id v42 = [v41 docType];
  uint64_t v43 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v45 = v44;

  uint64_t v46 = sub_100080794(v31, v43, v45, v40);
  v0[47] = v46;
  v0[48] = v47;
  uint64_t v53 = v46;
  unint64_t v54 = v47;
  uint64_t v55 = v0[23];
  uint64_t v56 = v0[11];
  swift_bridgeObjectRelease();
  defaultLogger()();
  sub_100084CE4(v56, v55, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
  os_log_type_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  uint64_t v60 = v0[38];
  uint64_t v61 = v0[32];
  uint64_t v62 = v0[23];
  unint64_t v124 = v54;
  if (v59)
  {
    uint64_t v123 = v0[38];
    os_log_type_t type = v58;
    uint64_t v63 = swift_slowAlloc();
    uint64_t v136 = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 134349314;
    v0[7] = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v63 + 12) = 2080;
    uint64_t v64 = (*(uint64_t (**)(void))(*(void *)(v62 + *(int *)(v23 + 28) + 8) + 16))(**(void **)(v62 + *(int *)(v23 + 28)));
    unint64_t v66 = v65;
    Swift::String v67 = Data.base16EncodedString()();
    sub_1000035EC(v64, v66);
    v0[8] = sub_10004C3A4(v67._countAndFlagsBits, (unint64_t)v67._object, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100085F74(v62, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    _os_log_impl((void *)&_mh_execute_header, v57, type, "Signing device authentication with legacy SE key slot %{public}ld, public key identifier %s", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v68 = v123;
  }
  else
  {
    sub_100085F74(v62, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);

    uint64_t v68 = v60;
  }
  v134(v68, v61);
  uint64_t v69 = v0[22];
  uint64_t v70 = v0[11];
  v0[49] = sub_100006D0C();
  uint64_t v71 = *(void *)(v70 + *(int *)(v69 + 32));
  if (!v71)
  {
    defaultLogger()();
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      id v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Auth policy is not required; using empty signature", v82, 2u);
      swift_slowDealloc();
    }
    uint64_t v83 = v0[35];
    uint64_t v84 = v0[32];

    v134(v83, v84);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v85 = __DataStorage.init(length:)();
    uint64_t v136 = 0x2000000000;
    uint64_t v137 = v85;
    sub_100083084((int *)&v136, 0);
    unint64_t v133 = v137 | 0x4000000000000000;
    uint64_t v135 = v136;
LABEL_36:
    uint64_t v96 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v97 = v0[34];
    uint64_t v98 = v0[32];
    uint64_t v99 = v0[17];
    uint64_t v100 = v0[16];
    uint64_t v127 = v0[15];
    uint64_t v130 = v0[18];
    defaultLogger()();
    uint64_t v101 = swift_task_alloc();
    *(void *)(v101 + 16) = v135;
    *(void *)(v101 + 24) = v133;
    Logger.cryptoParam(_:)();
    swift_task_dealloc();
    v96(v97, v98);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v99, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v127);
    sub_10000354C(v135, v133);
    COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
    uint64_t v102 = type metadata accessor for COSE_Sign1();
    uint64_t v103 = *(void *)(v102 - 8);
    int v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v130, 1, v102);
    unint64_t v105 = v0[48];
    uint64_t v106 = v0[47];
    if (v104 != 1)
    {
      uint64_t v112 = v0[30];
      uint64_t v120 = v0[31];
      uint64_t v121 = v0[29];
      uint64_t v118 = v0[27];
      uint64_t v113 = v0[26];
      uint64_t v117 = v0[25];
      uint64_t v119 = v0[18];
      uint64_t v116 = v0[9];
      unint64_t v114 = v0[44];
      uint64_t v115 = v0[43];
      swift_release();
      sub_1000035EC(v115, v114);
      sub_1000035EC(v106, v105);
      swift_release();
      sub_1000035EC(v135, v133);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v118, v117);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 32))(v116, v119, v102);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v120, v121);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v51 = (uint64_t (*)(void))v0[1];
      goto LABEL_15;
    }
    uint64_t v107 = v0[26];
    uint64_t v131 = v0[27];
    uint64_t v128 = v0[25];
    uint64_t v109 = v0[20];
    uint64_t v108 = v0[21];
    uint64_t v110 = v0[19];
    unint64_t v125 = v0[44];
    uint64_t v111 = v0[43];
    sub_100014BBC(v0[18], &qword_1001C2838);
    (*(void (**)(uint64_t, void, uint64_t))(v109 + 104))(v108, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v110);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_1000035EC(v111, v125);
    sub_1000035EC(v106, v105);
    swift_release();
    sub_1000035EC(v135, v133);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v131, v128);
LABEL_14:
    uint64_t v49 = v0[30];
    uint64_t v48 = v0[31];
    uint64_t v50 = v0[29];
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v51 = (uint64_t (*)(void))v0[1];
LABEL_15:
    return v51();
  }
  if (v71 != 2)
  {
    if (v71 != 1)
    {
      uint64_t v92 = v0[26];
      uint64_t v93 = v0[27];
      uint64_t v94 = v0[25];
      (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_release();
      sub_1000035EC(v132, v129);
      sub_1000035EC(v53, v124);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v94);
      goto LABEL_14;
    }
    defaultLogger()();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Auth policy is biometric or passcode, performing non-bound signature", v74, 2u);
      swift_slowDealloc();
    }
    uint64_t v75 = v0[37];
    uint64_t v76 = v0[32];
    uint64_t v77 = (void *)v0[10];

    v134(v75, v76);
    id v78 = [v77 seAccessEndpoint];
    uint64_t v79 = sub_1000050D4(v53, v124, v126, v132, v129, v78);
    unint64_t v133 = v95;
    uint64_t v135 = v79;

    goto LABEL_36;
  }
  defaultLogger()();
  os_log_type_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "Auth policy is global binding, performing bound signature", v88, 2u);
    swift_slowDealloc();
  }
  uint64_t v89 = v0[36];
  uint64_t v90 = v0[32];

  v134(v89, v90);
  uint64_t v91 = (void *)swift_task_alloc();
  v0[50] = v91;
  *uint64_t v91 = v0;
  v91[1] = sub_10007F948;
  return sub_1000A4A60(2);
}

uint64_t sub_10007F948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[51] = a1;
  v4[52] = a2;
  v4[53] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100080448;
  }
  else {
    uint64_t v5 = sub_10007FA60;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007FA60()
{
  if (*(void *)(v0 + 416) >> 60 == 15)
  {
    uint64_t v53 = *(void *)(v0 + 376);
    unint64_t v55 = *(void *)(v0 + 384);
    uint64_t v1 = *(void *)(v0 + 344);
    unint64_t v51 = *(void *)(v0 + 352);
    uint64_t v2 = *(void *)(v0 + 208);
    uint64_t v59 = *(void *)(v0 + 200);
    uint64_t v62 = *(void *)(v0 + 216);
    (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 104))(*(void *)(v0 + 168), enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(void *)(v0 + 152));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_1000035EC(v1, v51);
    sub_1000035EC(v53, v55);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v62, v59);
LABEL_6:
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 232);
    (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 104))(*(void *)(v0 + 168), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 152));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  uint64_t v63 = *(void *)(v0 + 424);
  type metadata accessor for AppleIDVManager();
  sub_10015A018((uint64_t *)(v0 + 16));
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v56 = v0 + 16;
  sub_100014D14((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v46 = v3;
  dispatch thunk of AppleIDVManaging.authorizePresentmentForSignature(aclBlob:externalizedLAContext:seSlot:payloadDigest:)();
  if (v63)
  {
    uint64_t v5 = *(void *)(v0 + 408);
    unint64_t v4 = *(void *)(v0 + 416);
    unint64_t v6 = *(void *)(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 376);
    unint64_t v8 = *(void *)(v0 + 352);
    uint64_t v9 = *(void *)(v0 + 344);
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
    sub_100009764(v5, v4);
    swift_release();
    sub_1000035EC(v9, v8);
    sub_1000035EC(v7, v6);
    swift_release();
    sub_10000B9DC(v56);
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v0 + 376);
  unint64_t v10 = *(void *)(v0 + 384);
  uint64_t v12 = *(void **)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 344);
  unint64_t v13 = *(void *)(v0 + 352);
  id v15 = [*(id *)(v0 + 80) seAccessEndpoint:v46];
  uint64_t v16 = sub_100005BA4(v11, v10, v12, v14, v13, v15);
  uint64_t v19 = *(void *)(v0 + 408);
  unint64_t v18 = *(void *)(v0 + 416);
  unint64_t v25 = v17;
  uint64_t v26 = v16;

  type metadata accessor for IDCSAnalytics();
  static IDCSAnalytics.sendLegacyACLUsageEvent(presentmentType:)();
  sub_100009764(v19, v18);
  sub_10000B9DC(v56);
  unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v28 = *(void *)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 136);
  uint64_t v31 = *(void *)(v0 + 128);
  uint64_t v60 = *(void *)(v0 + 144);
  uint64_t v64 = *(void *)(v0 + 120);
  defaultLogger()();
  uint64_t v32 = swift_task_alloc();
  *(void *)(v32 + 16) = v26;
  *(void *)(v32 + 24) = v25;
  Logger.cryptoParam(_:)();
  swift_task_dealloc();
  v27(v28, v29);
  (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v30, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v64);
  sub_10000354C(v26, v25);
  uint64_t v65 = v26;
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
  uint64_t v33 = type metadata accessor for COSE_Sign1();
  uint64_t v34 = *(void *)(v33 - 8);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v60, 1, v33);
  unint64_t v36 = *(void *)(v0 + 384);
  unint64_t v58 = *(void *)(v0 + 352);
  uint64_t v61 = *(void *)(v0 + 376);
  uint64_t v57 = *(void *)(v0 + 344);
  if (v35 == 1)
  {
    uint64_t v37 = *(void *)(v0 + 208);
    uint64_t v54 = *(void *)(v0 + 216);
    uint64_t v52 = *(void *)(v0 + 200);
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v40 = *(void *)(v0 + 152);
    sub_100014BBC(*(void *)(v0 + 144), &qword_1001C2838);
    (*(void (**)(uint64_t, void, uint64_t))(v39 + 104))(v38, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v40);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_1000035EC(v57, v58);
    sub_1000035EC(v61, v36);
    swift_release();
    sub_1000035EC(v26, v25);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v54, v52);
    goto LABEL_6;
  }
  unint64_t v41 = *(void *)(v0 + 384);
  uint64_t v42 = *(void *)(v0 + 240);
  uint64_t v49 = *(void *)(v0 + 248);
  uint64_t v50 = *(void *)(v0 + 232);
  uint64_t v43 = *(void *)(v0 + 216);
  uint64_t v45 = *(void *)(v0 + 200);
  uint64_t v44 = *(void *)(v0 + 208);
  uint64_t v48 = *(void *)(v0 + 144);
  uint64_t v47 = *(void *)(v0 + 72);
  swift_release();
  sub_1000035EC(v57, v58);
  sub_1000035EC(v61, v41);
  swift_release();
  sub_1000035EC(v65, v25);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v47, v48, v33);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v49, v50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
  return v23();
}

uint64_t sub_100080448()
{
  unint64_t v1 = v0[48];
  uint64_t v2 = v0[47];
  unint64_t v3 = v0[44];
  uint64_t v4 = v0[43];
  uint64_t v6 = v0[26];
  uint64_t v5 = v0[27];
  uint64_t v7 = v0[25];
  swift_release();
  sub_1000035EC(v4, v3);
  sub_1000035EC(v2, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v9 = v0[30];
  uint64_t v8 = v0[31];
  uint64_t v10 = v0[29];
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

unint64_t sub_100080704()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

uint64_t sub_100080794(unint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v84 = a4;
  unint64_t v85 = a3;
  os_log_type_t v86 = a2;
  unint64_t v83 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v80 = *(char ***)(v4 - 8);
  uint64_t v81 = v4;
  __chkstk_darwin(v4);
  unint64_t v82 = (unint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v66 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for SHA256();
  uint64_t v64 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v69 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for SHA256Digest();
  uint64_t v65 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v63 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  uint64_t v73 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v74 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for RFC8152SigStructure();
  uint64_t v72 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v76 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006CC8(&qword_1001C2800);
  uint64_t v78 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006CC8(&qword_1001C2808);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ISO18013SessionTranscript();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ISO18013DeviceAuthentication();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = v17;
  unint64_t v25 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v20, v83, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v84, v13);
  swift_bridgeObjectRetain();
  uint64_t v26 = v21;
  ISO18013DeviceAuthentication.init(sessionTranscript:docType:deviceNamespaceBytes:)();
  sub_1000825EC();
  sub_100085EC4(&qword_1001C2810, (void (*)(uint64_t))&type metadata accessor for ISO18013DeviceAuthentication);
  uint64_t v27 = v88;
  uint64_t v28 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  uint64_t v30 = v27;
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v26);
    swift_release();
    ((void (*)(unint64_t, void, uint64_t))v80[13])(v82, enum case for DIPError.Code.internalError(_:), v81);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v31 = v28;
    uint64_t v32 = v78;
    uint64_t v88 = v22;
    *(void *)&long long v89 = v28;
    *((void *)&v89 + 1) = v29;
    unint64_t v33 = v29;
    sub_10000354C(v28, v29);
    sub_100082FDC();
    sub_100083030();
    swift_retain();
    CBOREncodedCBOR.init(value:tag:encoder:)();
    uint64_t v84 = v31;
    unint64_t v85 = v33;
    os_log_type_t v86 = v25;
    uint64_t v87 = v26;
    uint64_t v35 = v11;
    unint64_t v36 = v79;
    uint64_t v37 = CBOREncodedCBOR.dataValue.getter();
    unint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v35);
    sub_100006CC8(&qword_1001C2828);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001768E0;
    *(void *)(inited + 32) = static RFC8152SigStructure.protectedHeaderAlg.getter();
    uint64_t v41 = v73;
    uint64_t v42 = v74;
    uint64_t v43 = v75;
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v74, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v75);
    uint64_t v44 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    *(void *)(inited + 40) = v44;
    sub_10004CC60(inited);
    swift_setDeallocating();
    sub_10000354C(v37, v39);
    RFC8152SigStructure.init(protected:payload:)();
    sub_100085EC4(&qword_1001C2830, (void (*)(uint64_t))&type metadata accessor for RFC8152SigStructure);
    uint64_t v45 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    uint64_t v81 = v37;
    unint64_t v82 = v39;
    unint64_t v47 = v46;
    uint64_t v48 = sub_100085EC4(&qword_1001C0850, (void (*)(uint64_t))&type metadata accessor for SHA256);
    uint64_t v49 = v69;
    uint64_t v50 = v70;
    dispatch thunk of HashFunction.init()();
    unint64_t v51 = v47;
    uint64_t v52 = v68;
    unint64_t v83 = v47;
    uint64_t v79 = (char *)v45;
    switch(v47 >> 62)
    {
      case 1uLL:
        uint64_t v80 = (char **)v48;
        if (v45 >> 32 < (int)v45) {
          __break(1u);
        }
        sub_10000354C(v45, v47);
        sub_100063458((int)v45, v45 >> 32);
        sub_1000035EC(v45, v47);
        unint64_t v55 = v66;
        uint64_t v50 = v70;
        uint64_t v56 = v49;
        break;
      case 2uLL:
        uint64_t v54 = *(void *)(v45 + 16);
        uint64_t v53 = *(void *)(v45 + 24);
        sub_10000354C(v45, v51);
        swift_retain();
        swift_retain();
        sub_100063458(v54, v53);
        swift_release();
        swift_release();
        sub_1000035EC(v45, v83);
        unint64_t v55 = v66;
        uint64_t v50 = v70;
        uint64_t v56 = v69;
        break;
      case 3uLL:
        *(void *)((char *)&v89 + 6) = 0;
        *(void *)&long long v89 = 0;
        goto LABEL_9;
      default:
        *(void *)&long long v89 = v45;
        WORD4(v89) = v47;
        BYTE10(v89) = BYTE2(v47);
        BYTE11(v89) = BYTE3(v47);
        BYTE12(v89) = BYTE4(v47);
        BYTE13(v89) = BYTE5(v47);
LABEL_9:
        uint64_t v56 = v49;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        sub_1000035EC(v45, v47);
        unint64_t v55 = v66;
        break;
    }
    uint64_t v57 = v63;
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v56, v50);
    sub_100085EC4(&qword_1001C0858, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    uint64_t v30 = Digest.data.getter();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v57, v52);
    uint64_t v58 = defaultLogger()();
    __chkstk_darwin(v58);
    uint64_t v59 = (uint64_t)v79;
    unint64_t v60 = v83;
    Logger.cryptoParam(_:)();
    uint64_t v61 = *(void (**)(char *, uint64_t))(v67 + 8);
    v61(v55, v71);
    uint64_t v62 = defaultLogger()();
    uint64_t v80 = &v63;
    __chkstk_darwin(v62);
    Logger.cryptoParam(_:)();
    sub_1000035EC(v59, v60);
    sub_1000035EC(v81, v82);
    swift_release();
    sub_1000035EC(v84, v85);
    v61(v55, v71);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v76, v77);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v87);
  }
  return v30;
}

uint64_t sub_1000815B4(int a1, int a2, Swift::Int a3, uint64_t a4)
{
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease();
  Swift::String v5 = Data.base16EncodedString()();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_10008163C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_100006CC8(&qword_1001C27F0);
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ISO18013SessionData();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100081730, 0, 0);
}

uint64_t sub_100081730()
{
  uint64_t v1 = v0[4];
  if ((*(unsigned char *)(v1 + 64) & 1) == 0
    && (*(void *)(v1 + 32) == 1 ? (BOOL v2 = *(void *)(v1 + 24) == 1) : (BOOL v2 = 0), v2))
  {
    sub_10000354C(v0[2], v0[3]);
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v6(v4, v5);
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 80);
    v0[9] = v3;
    return _swift_task_switch(sub_100081818, v3, 0);
  }
}

uint64_t sub_100081818()
{
  uint64_t v1 = sub_100054EAC(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v2;
  return _swift_task_switch(sub_1000818E8, 0, 0);
}

uint64_t sub_1000818E8()
{
  uint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for ISO18013SessionData.Status();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  sub_10000354C(v1, v2);
  ISO18013SessionData.init(data:status:)();
  sub_1000825EC();
  sub_100085EC4(&qword_1001C27F8, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionData);
  uint64_t v6 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  uint64_t v8 = v7;
  uint64_t v10 = v0[11];
  unint64_t v9 = v0[12];
  uint64_t v12 = v0[7];
  uint64_t v11 = v0[8];
  uint64_t v13 = v0[6];
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    sub_1000035EC(v10, v9);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    sub_1000035EC(v10, v9);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v16(v6, v8);
  }
}

uint64_t sub_100081AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(unsigned char *)(v8 + 154) = v14;
  *(unsigned char *)(v8 + 153) = a8;
  *(unsigned char *)(v8 + 152) = a7;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = type metadata accessor for NWInterface.InterfaceType();
  *(void *)(v8 + 40) = v9;
  *(void *)(v8 + 48) = *(void *)(v9 - 8);
  *(void *)(v8 + 56) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for NWPath.Status();
  *(void *)(v8 + 64) = v10;
  *(void *)(v8 + 72) = *(void *)(v10 - 8);
  *(void *)(v8 + 80) = swift_task_alloc();
  *(void *)(v8 + 88) = swift_task_alloc();
  sub_100006CC8(&qword_1001C2940);
  *(void *)(v8 + 96) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NWPath();
  *(void *)(v8 + 104) = v11;
  *(void *)(v8 + 112) = *(void *)(v11 - 8);
  *(void *)(v8 + 120) = swift_task_alloc();
  sub_100006CC8(&qword_1001C2948);
  *(void *)(v8 + 128) = swift_task_alloc();
  sub_100006CC8(&qword_1001C2950);
  *(void *)(v8 + 136) = swift_task_alloc();
  *(void *)(v8 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_100081D2C, 0, 0);
}

uint64_t sub_100081D2C()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[12];
  uint64_t v6 = type metadata accessor for IDCSAnalytics.NetworkStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v42(v1, 1, 1, v6);
  uint64_t v8 = type metadata accessor for IDCSAnalytics.ConnectionType();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v44(v2, 1, 1, v8);
  type metadata accessor for NetworkMonitor();
  static NetworkMonitor.shared.getter();
  dispatch thunk of NetworkMonitor.currentPath.getter();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_100014BBC(v0[12], &qword_1001C2940);
  }
  else
  {
    uint64_t v41 = v8;
    uint64_t v36 = v0[18];
    uint64_t v37 = v6;
    uint64_t v38 = v0[17];
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[9];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[8];
    uint64_t v13 = v7;
    uint64_t v14 = v0[6];
    uint64_t v39 = v0[5];
    uint64_t v40 = v0[7];
    (*(void (**)(void, void, void))(v0[14] + 32))(v0[15], v0[12], v0[13]);
    NWPath.status.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v11, enum case for NWPath.Status.satisfied(_:), v12);
    char v15 = static NWPath.Status.== infix(_:_:)();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v16(v11, v12);
    v16(v9, v12);
    sub_100014BBC(v36, &qword_1001C2950);
    uint64_t v17 = (unsigned int *)&enum case for IDCSAnalytics.NetworkStatus.online(_:);
    if ((v15 & 1) == 0) {
      uint64_t v17 = (unsigned int *)&enum case for IDCSAnalytics.NetworkStatus.offline(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v38, *v17, v37);
    v42(v38, 0, 1, v37);
    sub_100037944(v38, v36, &qword_1001C2950);
    uint64_t v18 = *(void (**)(uint64_t, void, uint64_t))(v14 + 104);
    v18(v40, enum case for NWInterface.InterfaceType.cellular(_:), v39);
    char v19 = NWPath.usesInterfaceType(_:)();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v20(v40, v39);
    uint64_t v21 = v0[15];
    uint64_t v22 = v0[16];
    uint64_t v23 = v0[13];
    uint64_t v24 = v0[14];
    if (v19)
    {
      (*(void (**)(void, void))(v24 + 8))(v0[15], v0[13]);
      sub_100014BBC(v22, &qword_1001C2948);
      uint64_t v25 = v41;
      (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))(v22, enum case for IDCSAnalytics.ConnectionType.cellular(_:), v41);
    }
    else
    {
      uint64_t v26 = v0[7];
      uint64_t v27 = v0[5];
      v18(v26, enum case for NWInterface.InterfaceType.wifi(_:), v27);
      char v28 = NWPath.usesInterfaceType(_:)();
      v20(v26, v27);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v23);
      sub_100014BBC(v22, &qword_1001C2948);
      if (v28) {
        unint64_t v29 = (unsigned int *)&enum case for IDCSAnalytics.ConnectionType.wifi(_:);
      }
      else {
        unint64_t v29 = (unsigned int *)&enum case for IDCSAnalytics.ConnectionType.other(_:);
      }
      uint64_t v25 = v41;
      (*(void (**)(void, void, uint64_t))(v43 + 104))(v0[16], *v29, v41);
    }
    v44(v0[16], 0, 1, v25);
  }
  unint64_t v30 = v0[3];
  if (v30 >> 60 != 15)
  {
    uint64_t v31 = v0[2];
    type metadata accessor for SecAccessControl(0);
    sub_10000354C(v31, v30);
    uint64_t v32 = (void *)static SecAccessControlRef.fromData(_:)();
    unint64_t v46 = v0[3];
    uint64_t v45 = v0[2];
    SecAccessControlRef.isBiometricAuth.getter();
    type metadata accessor for IDCSAnalytics();
    IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.description.getter();
    static IDCSAnalytics.sendPhysicalPresentmentEvent(networkStatus:connectionType:presentmentResult:biometricAuthMethod:terminalAuthPerformed:portraitWasRequested:isAppleReader:)();
    swift_bridgeObjectRelease();

    sub_100009764(v45, v46);
  }
  uint64_t v33 = v0[18];
  sub_100014BBC(v0[16], &qword_1001C2948);
  sub_100014BBC(v33, &qword_1001C2950);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

uint64_t sub_100082360()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ISO18013CodingKeyFormat();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v21 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = sub_100006CC8(&qword_1001C1A90);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  uint64_t v14 = CBORDecoder.init()();
  uint64_t v15 = *(void *)(v1 + 16);
  uint64_t v16 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = (unsigned int *)&enum case for ISO18013PresentmentType.digital(_:);
  if (v15 != 1) {
    uint64_t v18 = (unsigned int *)&enum case for ISO18013PresentmentType.physical(_:);
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v13, *v18, v16);
  type metadata accessor for ISO18013PresentmentType();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  CBORDecoder.presentmentType.setter();
  if ((*(unsigned char *)(v1 + 64) & 1) == 0)
  {
    DCPresentmentMessageEncodingFormat.codingKeyFormat.getter(*(void *)(v1 + 56), (uint64_t)v8);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v8, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v21, v10, v2);
    CBORDecoder.codingKeyFormat.setter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }
  return v14;
}

uint64_t sub_1000825EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CBOREncoder.DictionaryEncodingStrategy();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ISO18013DictionaryEncodingStrategy();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ISO18013CodingKeyFormat();
  __chkstk_darwin(v8 - 8);
  uint64_t v41 = (uint64_t)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006CC8(&qword_1001C1A90);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v16 = CBOREncoder.init()();
  uint64_t v17 = *(void *)(v0 + 16);
  uint64_t v18 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = (unsigned int *)&enum case for ISO18013PresentmentType.digital(_:);
  if (v17 != 1) {
    uint64_t v20 = (unsigned int *)&enum case for ISO18013PresentmentType.physical(_:);
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v15, *v20, v18);
  type metadata accessor for ISO18013PresentmentType();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  CBOREncoder.presentmentType.setter();
  if ((*(unsigned char *)(v1 + 64) & 1) == 0)
  {
    unint64_t v21 = *(void *)(v1 + 56);
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v38 = v4;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v44 = v36;
      uint64_t v37 = v5;
      *(_DWORD *)uint64_t v25 = 136315138;
      v34[1] = v25 + 4;
      uint64_t v35 = v25;
      id v26 = (id)DCPresentmentMessageEncodingFormatToString();
      uint64_t v27 = v7;
      unint64_t v28 = v21;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;

      uint64_t v32 = v29;
      unint64_t v21 = v28;
      uint64_t v7 = v27;
      uint64_t v43 = sub_10004C3A4(v32, v31, &v44);
      uint64_t v5 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Configuring CBOREncoder for message encoding format %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v40);
    DCPresentmentMessageEncodingFormat.codingKeyFormat.getter(v21, v41);
    CBOREncoder.codingKeyFormat.setter();
    DCPresentmentMessageEncodingFormat.dictionaryEncodingStrategy.getter(v21, (uint64_t)v7);
    ISO18013DictionaryEncodingStrategy.cborEncoderStrategy.getter();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v5);
    dispatch thunk of CBOREncoder.dictionaryEncodingStrategy.setter();
  }
  return v16;
}

uint64_t sub_100082A8C()
{
  swift_release();
  swift_release();
  swift_release();
  sub_10000B9DC(v0 + 96);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PresentmentResponseBuilder()
{
  return self;
}

uint64_t sub_100082B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_100082C14, 0, 0);
}

uint64_t sub_100082C14()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_100085EC4(&qword_1001C2910, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100085EC4(&qword_1001C2918, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100082DB4;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_100082DB4()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100082F70, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100082F70()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100082FDC()
{
  unint64_t result = qword_1001C2818;
  if (!qword_1001C2818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C2818);
  }
  return result;
}

unint64_t sub_100083030()
{
  unint64_t result = qword_1001C2820;
  if (!qword_1001C2820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C2820);
  }
  return result;
}

void sub_100083084(int *a1, int a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }

  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_100083118(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100007458;
  return v8(a1, v5);
}

uint64_t sub_100083200()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 37, 0xD000000000000023);
}

uint64_t sub_100083238()
{
  return sub_1000815B4(*(void *)(v0 + 16), *(void *)(v0 + 24), 31, 0xD00000000000001DLL);
}

unint64_t sub_100083270()
{
  return sub_100080704();
}

uint64_t sub_10008328C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v10 = (char *)&v18 - v9;
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "PresentmentResponseBuilder determineElementstoPresent", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  uint64_t v15 = defaultLogger()();
  __chkstk_darwin(v15);
  *(&v18 - 2) = a2;
  Logger.sensitive(_:)();
  v14(v8, v4);
  if (a2) {
    a1 = sub_100097664(a2, a1);
  }
  else {
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = defaultLogger()();
  __chkstk_darwin(v16);
  *(&v18 - 2) = a1;
  Logger.sensitive(_:)();
  v14(v8, v4);
  return a1;
}

uint64_t sub_1000834E4(uint64_t a1)
{
  v1[3] = a1;
  sub_100006CC8(&qword_1001C2920);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for IdentityReaderAuthenticator();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100083664, 0, 0);
}

uint64_t sub_100083664()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking if the credential is valid after network check", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v10 = v0[3];
  uint64_t v9 = v0[4];

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[15] = v11;
  v0[16] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v4, v5);
  sub_100037898(v10, v9, &qword_1001C2920);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    sub_100014BBC(v0[4], &qword_1001C2920);
LABEL_10:
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No server promise, meaning this passed using the cache, so success", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[8];

    v11(v20, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(uint64_t))v0[1];
    return v22(1);
  }
  uint64_t v12 = v0[7];
  uint64_t v13 = v0[5];
  sub_100085F0C(v0[4], v12, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
  uint64_t v14 = *(void *)(v12 + *(int *)(v13 + 32));
  v0[17] = v14;
  if (!v14)
  {
    sub_100085F74(v0[7], (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
    goto LABEL_10;
  }
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[18] = v15;
  uint64_t v16 = sub_100006CC8(&qword_1001C0890);
  *uint64_t v15 = v0;
  v15[1] = sub_1000839B8;
  return Task.value.getter(v0 + 20, v14, &type metadata for ServerRevocationResponse, v16, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000839B8()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100083CDC;
  }
  else {
    os_log_type_t v2 = sub_100083ACC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100083ACC()
{
  if (*(unsigned char *)(v0 + 160) == 1)
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "After online revocation checking, the certificate might still be revoked", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 64);

    v4(v5, v6);
  }
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "No errors were thrown during revocation checking, there is a valid credential", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);

  swift_release();
  v10(v11, v12);
  sub_100085F74(v13, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(1);
}

uint64_t sub_100083CDC()
{
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = _convertErrorToNSError(_:)();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Validating server promise failed with reason %@", v3, 0xCu);
    sub_100006CC8(&qword_1001C1350);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v7 = v0[10];
  uint64_t v9 = v0[7];
  uint64_t v8 = v0[8];
  swift_errorRelease();
  v6(v7, v8);
  sub_100085F74(v9, (uint64_t (*)(void))type metadata accessor for IdentityReaderAuthenticator);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10(0);
}

unint64_t sub_100083F2C(void *a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v119 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v118 = (char *)&v96 - v9;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v96 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v96 - v18;
  id v20 = [a1 deviceNamespaces];
  uint64_t v110 = v10;
  if (!v20)
  {
    defaultLogger()();
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "No device namespaces were provided", v93, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v110);
    return sub_10004B420((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v21 = v20;
  sub_100006CC8(&qword_1001C3C00);
  uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = defaultLogger()();
  __chkstk_darwin(v23);
  *(&v96 - 2) = v22;
  Logger.sensitive(_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v24 = v11 + 8;
  uint64_t v109 = v25;
  v25(v19, v10);
  unint64_t v26 = sub_10004B420((uint64_t)_swiftEmptyArrayStorage);
  int64_t v28 = 0;
  uint64_t v126 = v26;
  uint64_t v29 = *(void *)(v22 + 64);
  uint64_t v96 = v22 + 64;
  uint64_t v99 = v22;
  uint64_t v30 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & v29;
  int64_t v97 = (unint64_t)(v30 + 63) >> 6;
  uint64_t v117 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v115 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v108 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v102 = v6 + 40;
  uint64_t v106 = (void (**)(char *, uint64_t))(v6 + 8);
  *(void *)&long long v27 = 136315394;
  long long v104 = v27;
  uint64_t v103 = (char *)&type metadata for Any + 8;
  uint64_t v113 = v24;
  unint64_t v114 = v4;
  uint64_t v116 = v5;
  uint64_t v98 = v19;
  uint64_t v107 = v6;
  while (1)
  {
    if (v32)
    {
      uint64_t v100 = (v32 - 1) & v32;
      int64_t v101 = v28;
      unint64_t v34 = __clz(__rbit64(v32)) | (v28 << 6);
    }
    else
    {
      int64_t v35 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_70;
      }
      if (v35 >= v97) {
        goto LABEL_64;
      }
      unint64_t v36 = *(void *)(v96 + 8 * v35);
      int64_t v37 = v28 + 1;
      if (!v36)
      {
        int64_t v37 = v28 + 2;
        if (v28 + 2 >= v97) {
          goto LABEL_64;
        }
        unint64_t v36 = *(void *)(v96 + 8 * v37);
        if (!v36)
        {
          int64_t v37 = v28 + 3;
          if (v28 + 3 >= v97) {
            goto LABEL_64;
          }
          unint64_t v36 = *(void *)(v96 + 8 * v37);
          if (!v36)
          {
            uint64_t v38 = v28 + 4;
            if (v28 + 4 >= v97) {
              goto LABEL_64;
            }
            unint64_t v36 = *(void *)(v96 + 8 * v38);
            if (!v36)
            {
              while (1)
              {
                int64_t v37 = v38 + 1;
                if (__OFADD__(v38, 1)) {
                  goto LABEL_71;
                }
                if (v37 >= v97) {
                  break;
                }
                unint64_t v36 = *(void *)(v96 + 8 * v37);
                ++v38;
                if (v36) {
                  goto LABEL_22;
                }
              }
LABEL_64:
              swift_release();
              uint64_t v95 = defaultLogger()();
              __chkstk_darwin(v95);
              *(&v96 - 2) = (uint64_t)&v126;
              Logger.sensitive(_:)();
              v109(v19, v110);
              return v126;
            }
            int64_t v37 = v28 + 4;
          }
        }
      }
LABEL_22:
      uint64_t v100 = (v36 - 1) & v36;
      int64_t v101 = v37;
      unint64_t v34 = __clz(__rbit64(v36)) + (v37 << 6);
    }
    uint64_t v39 = *(void *)(v99 + 56);
    uint64_t v40 = (uint64_t *)(*(void *)(v99 + 48) + 16 * v34);
    unint64_t v41 = v40[1];
    uint64_t v105 = *v40;
    unint64_t v42 = *(void *)(v39 + 8 * v34);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v122 = sub_10004B220((uint64_t)_swiftEmptyArrayStorage);
    if (v42 >> 62) {
      break;
    }
    uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v43) {
      goto LABEL_25;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v78 = v126;
    unint64_t v125 = (void *)v126;
    unint64_t v80 = sub_10013C484(v105, v41);
    uint64_t v81 = *(void *)(v78 + 16);
    BOOL v82 = (v79 & 1) == 0;
    uint64_t v83 = v81 + v82;
    if (__OFADD__(v81, v82)) {
      goto LABEL_68;
    }
    char v84 = v79;
    if (*(void *)(v78 + 24) >= v83)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v87 = v125;
        if (v79) {
          goto LABEL_5;
        }
      }
      else
      {
        sub_10009B204();
        uint64_t v87 = v125;
        if (v84) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      sub_100099604(v83, isUniquelyReferenced_nonNull_native);
      unint64_t v85 = sub_10013C484(v105, v41);
      if ((v84 & 1) != (v86 & 1)) {
        goto LABEL_72;
      }
      unint64_t v80 = v85;
      uint64_t v87 = v125;
      if (v84)
      {
LABEL_5:
        uint64_t v33 = v87[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v80) = v122;
        goto LABEL_6;
      }
    }
    v87[(v80 >> 6) + 8] |= 1 << v80;
    uint64_t v88 = (void *)(v87[6] + 16 * v80);
    *uint64_t v88 = v105;
    v88[1] = v41;
    *(void *)(v87[7] + 8 * v80) = v122;
    uint64_t v89 = v87[2];
    BOOL v75 = __OFADD__(v89, 1);
    uint64_t v90 = v89 + 1;
    if (v75) {
      goto LABEL_69;
    }
    v87[2] = v90;
    swift_bridgeObjectRetain();
LABEL_6:
    uint64_t v126 = (uint64_t)v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v116;
    uint64_t v19 = v98;
    int64_t v28 = v101;
    unint64_t v32 = v100;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v114;
  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v43) {
    goto LABEL_50;
  }
LABEL_25:
  uint64_t v120 = v43;
  unint64_t v121 = v42 & 0xC000000000000001;
  uint64_t v44 = 4;
  unint64_t v111 = v41;
  unint64_t v112 = v42;
  while (1)
  {
    uint64_t v45 = v44 - 4;
    if (!v121) {
      break;
    }
    id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v47 = v44 - 3;
    if (__OFADD__(v45, 1)) {
      goto LABEL_65;
    }
LABEL_34:
    uint64_t v124 = v47;
    uint64_t v48 = v46;
    id v49 = [v46 elementIdentifier:v96];
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v52 = v51;

    id v123 = v48;
    sub_100066BEC((uint64_t)v4);
    if ((*v117)(v4, 1, v5) == 1)
    {
      sub_100014BBC((uint64_t)v4, &qword_1001C12C8);
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v53 = Logger.logObject.getter();
      uint64_t v54 = v17;
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        unint64_t v125 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = v104;
        swift_bridgeObjectRetain();
        *(void *)(v56 + 4) = sub_10004C3A4(v50, v52, (uint64_t *)&v125);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v56 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v56 + 14) = sub_10004C3A4(v105, v41, (uint64_t *)&v125);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v53, v55, "Could not convert element %s in namespace %s to codable value", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        uint64_t v4 = v114;
        swift_slowDealloc();
        uint64_t v5 = v116;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      v109(v54, v110);
      uint64_t v17 = v54;
    }
    else
    {
      uint64_t v57 = v17;
      uint64_t v58 = *v115;
      uint64_t v59 = v118;
      (*v115)(v118, v4, v5);
      (*v108)(v119, v59, v5);
      uint64_t v60 = v122;
      int v61 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v125 = (void *)v60;
      unint64_t v63 = sub_10013C484(v50, v52);
      uint64_t v64 = *(void *)(v60 + 16);
      BOOL v65 = (v62 & 1) == 0;
      uint64_t v66 = v64 + v65;
      if (__OFADD__(v64, v65)) {
        goto LABEL_66;
      }
      char v67 = v62;
      if (*(void *)(v60 + 24) >= v66)
      {
        if ((v61 & 1) == 0) {
          sub_10009AF40();
        }
      }
      else
      {
        sub_10009921C(v66, v61);
        unint64_t v68 = sub_10013C484(v50, v52);
        if ((v67 & 1) != (v69 & 1)) {
          goto LABEL_72;
        }
        unint64_t v63 = v68;
      }
      uint64_t v4 = v114;
      uint64_t v70 = v125;
      if (v67)
      {
        unint64_t v71 = v125[7] + *(void *)(v107 + 72) * v63;
        uint64_t v5 = v116;
        (*(void (**)(unint64_t, char *, uint64_t))(v107 + 40))(v71, v119, v116);
      }
      else
      {
        v125[(v63 >> 6) + 8] |= 1 << v63;
        uint64_t v72 = (uint64_t *)(v70[6] + 16 * v63);
        uint64_t *v72 = v50;
        v72[1] = v52;
        unint64_t v73 = v70[7] + *(void *)(v107 + 72) * v63;
        uint64_t v5 = v116;
        v58((char *)v73, v119, v116);
        uint64_t v74 = v70[2];
        BOOL v75 = __OFADD__(v74, 1);
        uint64_t v76 = v74 + 1;
        if (v75) {
          goto LABEL_67;
        }
        v70[2] = v76;
        swift_bridgeObjectRetain();
      }
      unint64_t v122 = (unint64_t)v125;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v106)(v118, v5);
      uint64_t v17 = v57;
      unint64_t v41 = v111;
      unint64_t v42 = v112;
    }
    ++v44;
    if (v124 == v120) {
      goto LABEL_50;
    }
  }
  id v46 = *(id *)(v42 + 8 * v44);
  uint64_t v47 = v44 - 3;
  if (!__OFADD__(v45, 1)) {
    goto LABEL_34;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100084B00()
{
  unint64_t result = qword_1001C2860;
  if (!qword_1001C2860)
  {
    sub_100016F64(&qword_1001C2868);
    sub_100085EC4(&qword_1001C2870, (void (*)(uint64_t))&type metadata accessor for AnyCodable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C2860);
  }
  return result;
}

uint64_t sub_100084BAC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100016F64(&qword_1001C2850);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100084C28()
{
  unint64_t result = qword_1001C2880;
  if (!qword_1001C2880)
  {
    sub_100016F64(&qword_1001C2868);
    sub_100085EC4(&qword_1001C2888, (void (*)(uint64_t))&type metadata accessor for AnyCodable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C2880);
  }
  return result;
}

unint64_t sub_100084CD4()
{
  return sub_10007B2AC();
}

unint64_t sub_100084CDC()
{
  return sub_10007B34C();
}

uint64_t sub_100084CE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100084D4C()
{
  return sub_1000789D4();
}

uint64_t sub_100084D54(uint64_t a1, void *a2, uint64_t a3)
{
  id v61 = a2;
  uint64_t v58 = a1;
  uint64_t v64 = type metadata accessor for DIPError.Code();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DigitalPresentmentResponseCryptor();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006CC8(&qword_1001C28C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)type metadata accessor for ISO18013AppleSessionTranscript();
  uint64_t v12 = *(v11 - 1);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v57 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v62 = (char *)&v50 - v15;
  uint64_t v16 = sub_100006CC8(&qword_1001C2840);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ISO18013SessionTranscript();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a3;
  uint64_t v24 = v23;
  sub_100037898(v22, (uint64_t)v18, &qword_1001C2840);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v18, 1, v19) == 1)
  {
    sub_100014BBC((uint64_t)v18, &qword_1001C2840);
    uint64_t v25 = v63;
    uint64_t v26 = v64;
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v5, enum case for DIPError.Code.idcsInvalidAppleSessionTranscript(_:), v64);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v27 = v26;
    uint64_t v28 = v25;
LABEL_9:
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v5, enum case for DIPError.Code.internalError(_:), v27);
    swift_errorRetain();
    unint64_t v38 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v38;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v18, v19);
  uint64_t v29 = v24;
  ISO18013SessionTranscript.appleSessionTranscript.getter();
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100014BBC((uint64_t)v10, &qword_1001C28C0);
    uint64_t v28 = v63;
    uint64_t v30 = v64;
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v5, enum case for DIPError.Code.idcsInvalidAppleSessionTranscript(_:), v64);
    char v62 = (char *)sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v31 = v21;
    uint64_t v27 = v30;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v19);
    goto LABEL_9;
  }
  uint64_t v53 = v24;
  uint64_t v54 = v21;
  uint64_t v52 = v19;
  unint64_t v32 = v62;
  (*(void (**)(char *, char *, void *))(v12 + 32))(v62, v10, v11);
  id v33 = [v61 responseEncryptionCertificateChain];
  unint64_t v34 = v11;
  if (!v33)
  {
    uint64_t v28 = v63;
    uint64_t v40 = v64;
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v5, enum case for DIPError.Code.idcsMissingResponseEncryptionCertificate(_:), v64);
    id v61 = (id)sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v41 = v32;
    uint64_t v27 = v40;
    (*(void (**)(char *, void *))(v12 + 8))(v41, v34);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    goto LABEL_9;
  }
  int64_t v35 = v33;
  id v61 = v11;
  uint64_t v51 = v12;
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v36 = v60;
  uint64_t v37 = decodeCertificateChain(fromDER:)();
  uint64_t v27 = v64;
  if (v36)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = v63;
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v5, enum case for DIPError.Code.idcsMisformattedResponseEncryptionCertificate(_:), v27);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
LABEL_8:
    (*(void (**)(char *, id))(v51 + 8))(v62, v61);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    goto LABEL_9;
  }
  unint64_t v42 = v37;
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v42 >> 62))
  {
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_14;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v28 = v63;
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v5, enum case for DIPError.Code.idcsMissingResponseEncryptionCertificate(_:), v27);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100085EC4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_19;
  }
LABEL_14:
  if ((v42 & 0xC000000000000001) != 0)
  {
    id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v43 = v59;
    goto LABEL_17;
  }
  uint64_t v43 = v59;
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v44 = *(id *)(v42 + 32);
LABEL_17:
    swift_bridgeObjectRelease();
    type metadata accessor for SecTrust(0);
    uint64_t v45 = (void *)static SecTrustRef.newFromUnverifiedCertificate(_:)();
    uint64_t v46 = v51;
    uint64_t v47 = v62;
    (*(void (**)(char *, char *, id))(v51 + 16))(v57, v62, v61);
    DigitalPresentmentResponseCryptor.init(sessionTranscript:)();
    uint64_t v48 = v43;
    unint64_t v38 = DigitalPresentmentResponseCryptor.encrypt(_:to:)();

    (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v56);
    (*(void (**)(char *, id))(v46 + 8))(v47, v61);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    return v38;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PresentmentResponseBuilder.DBResults()
{
  uint64_t result = qword_1001C29B0;
  if (!qword_1001C29B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100085B0C()
{
  swift_bridgeObjectRelease();
  sub_1000035EC(v0[4], v0[5]);
  sub_10000B9DC((uint64_t)(v0 + 6));
  unint64_t v1 = v0[12];
  if (v1 >> 60 != 15) {
    sub_1000035EC(v0[11], v1);
  }
  sub_1000035EC(v0[13], v0[14]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 145, 7);
}

uint64_t sub_100085B84(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v11 = v2[2];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[11];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100016FE0;
  return sub_100073684(a1, a2, v11, v5, v6, v7, (uint64_t)(v2 + 6), v8);
}

uint64_t sub_100085CA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100085CD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100007458;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C28D8 + dword_1001C28D8);
  return v8(a1, a2, v6);
}

uint64_t sub_100085DA0()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000035EC(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100085DE8(uint64_t a1@<X8>)
{
  sub_100076D60(*(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_100085E0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRelease();
  sub_1000035EC(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100085E70(uint64_t a1)
{
  return a1;
}

uint64_t sub_100085EC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100085F0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100085F74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100085FD4()
{
  return sub_100077704(*(void *)(v0 + 16));
}

unint64_t sub_100085FDC()
{
  return sub_1000777C0();
}

uint64_t sub_100085FE4()
{
  uint64_t v1 = type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_unknownObjectRelease();
  unint64_t v5 = *(void *)(v0 + 40);
  if (v5 >> 60 != 15) {
    sub_1000035EC(*(void *)(v0 + 32), v5);
  }
  uint64_t v6 = (v3 + 48) & ~v3;
  uint64_t v7 = v4 + v6 + 3;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);

  return _swift_deallocObject(v0, v7, v3 | 7);
}

uint64_t sub_1000860CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = (char *)v1 + *(void *)(v4 + 64) + v5;
  char v12 = v11[1];
  char v13 = *v11;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100016FE0;
  return sub_100081AEC(a1, v6, v7, v8, v9, v10, v13, v12);
}

uint64_t sub_10008621C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100086264(uint64_t a1)
{
  sub_10006C660(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_100086288(void *a1)
{
  return sub_100044758(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t destroy for PresentmentResponseBuilder.DBResult(void *a1)
{
  swift_bridgeObjectRelease();
  sub_1000035EC(a1[3], a1[4]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = a1[11];
  if (result)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1[12];
    unint64_t v4 = a1[13];
    return sub_1000035EC(v3, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PresentmentResponseBuilder.DBResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_10000354C(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v7;
    uint64_t v9 = *(void *)(a2 + 96);
    unint64_t v8 = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    sub_10000354C(v9, v8);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = v8;
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
  }
  return a1;
}

void *assignWithCopy for PresentmentResponseBuilder.DBResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  unint64_t v5 = a2[4];
  sub_10000354C(v4, v5);
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  a1[3] = v4;
  a1[4] = v5;
  sub_1000035EC(v6, v7);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v8 = a1 + 10;
  uint64_t v9 = a2 + 10;
  uint64_t v10 = a2[11];
  if (a1[11])
  {
    if (v10)
    {
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = a2[12];
      unint64_t v11 = a2[13];
      sub_10000354C(v12, v11);
      uint64_t v13 = a1[12];
      unint64_t v14 = a1[13];
      a1[12] = v12;
      a1[13] = v11;
      sub_1000035EC(v13, v14);
    }
    else
    {
      sub_100064DE0((uint64_t)(a1 + 10));
      long long v17 = *((_OWORD *)a2 + 6);
      *unint64_t v8 = *v9;
      *((_OWORD *)a1 + 6) = v17;
    }
  }
  else if (v10)
  {
    a1[10] = a2[10];
    a1[11] = a2[11];
    uint64_t v16 = a2[12];
    unint64_t v15 = a2[13];
    swift_bridgeObjectRetain();
    sub_10000354C(v16, v15);
    a1[12] = v16;
    a1[13] = v15;
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 6);
    *unint64_t v8 = *v9;
    *((_OWORD *)a1 + 6) = v18;
  }
  return a1;
}

__n128 initializeWithTake for PresentmentResponseBuilder.DBResult(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for PresentmentResponseBuilder.DBResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1000035EC(v4, v5);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 88)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 88);
  if (!v7)
  {
    sub_100064DE0(a1 + 80);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
    return a1;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 96);
  unint64_t v9 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_1000035EC(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentResponseBuilder.DBResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentResponseBuilder.DBResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentResponseBuilder.DBResult()
{
  return &type metadata for PresentmentResponseBuilder.DBResult;
}

uint64_t *sub_1000866D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for COSE_Sign1();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100006CC8(&qword_1001C2838);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10008685C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for COSE_Sign1();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_100086934(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100086A70(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100086C28(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  return a1;
}

char *sub_100086D58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100006CC8(&qword_1001C2838);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100086F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100086F14);
}

uint64_t sub_100086F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006CC8(&qword_1001C2838);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100086FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100086FF8);
}

uint64_t sub_100086FF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100006CC8(&qword_1001C2838);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

void sub_1000870B8()
{
  sub_100087150();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100087150()
{
  if (!qword_1001C29C0)
  {
    type metadata accessor for COSE_Sign1();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001C29C0);
    }
  }
}

uint64_t sub_1000871B8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPSignpost();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100087304, 0, 0);
}

uint64_t sub_100087304()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  static IDCSSignposts.consistencyCheckTotal.getter();
  DIPSignpost.init(_:)();
  uint64_t v4 = (void *)swift_allocObject();
  v0[13] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = swift_allocObject();
  v0[14] = v5;
  *(void *)(v5 + 16) = &unk_1001C2A08;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  type metadata accessor for DCCredentialCompletenessResult(0);
  *uint64_t v6 = v0;
  v6[1] = sub_100087478;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 2, &unk_1001C2A18, v5, v7);
}

uint64_t sub_100087478()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100087660;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 136) = *(void *)(v2 + 16);
    uint64_t v3 = sub_1000875A4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000875A4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v5 = v0[17];
  return v4(v5);
}

uint64_t sub_100087660()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10008DAE8((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10008783C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[16] = v6;
  v5[17] = *(void *)(v6 - 8);
  v5[18] = swift_task_alloc();
  return _swift_task_switch(sub_100087904, 0, 0);
}

uint64_t sub_100087904()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[18];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];
  uint64_t v6 = swift_allocObject();
  v0[19] = v6;
  *(void *)(v6 + 16) = 0;
  uint64_t v7 = (void *)swift_allocObject();
  v0[20] = v7;
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v2;
  v7[5] = v5;
  v7[6] = v6;
  uint64_t v8 = swift_allocObject();
  v0[21] = v8;
  *(void *)(v8 + 16) = sub_100088EEC;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v10(v15, v9, v14);
  swift_retain();
  int v11 = (void *)swift_task_alloc();
  v0[22] = v11;
  *int v11 = v0;
  v11[1] = sub_100087AC4;
  uint64_t v12 = v0[18];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v11, v12, sub_10004A390, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_100087AC4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  uint64_t v3 = *(void *)(*(void *)v1 + 136);
  uint64_t v4 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    uint64_t v5 = sub_100087F74;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_100087C6C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100087C6C()
{
  uint64_t v1 = *(void *)(v0[13] + 112);
  v0[24] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[25] = v2;
  void *v2 = v0;
  v2[1] = sub_100087D14;
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[12];
  return sub_100088F8C(v4, v3, v1, v5);
}

uint64_t sub_100087D14(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100087F08;
  }
  else
  {
    *(unsigned char *)(v4 + 232) = a1 & 1;
    uint64_t v5 = sub_100087E40;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100087E40()
{
  if ((*(unsigned char *)(v0 + 232) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + 152);
    swift_beginAccess();
    *(void *)(v1 + 16) |= 4uLL;
  }
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v2;
  void *v2 = v0;
  v2[1] = sub_100087FE8;
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  return sub_10008A358(v5, v4, v3, v6);
}

uint64_t sub_100087F08()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100087F74()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100087FE8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000881EC;
  }
  else
  {
    *(unsigned char *)(v4 + 233) = a1 & 1;
    uint64_t v5 = sub_100088114;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100088114()
{
  if ((*(unsigned char *)(v0 + 233) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + 152);
    swift_beginAccess();
    *(void *)(v1 + 16) |= 8uLL;
  }
  uint64_t v2 = *(void *)(v0 + 152);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    uint64_t v3 = 1;
    *(void *)(*(void *)(v0 + 152) + 16) = 1;
  }
  uint64_t v4 = *(uint64_t **)(v0 + 88);
  swift_release();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000881EC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100088258()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100088298(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100007458;
  return sub_10008783C(a1, a2, v6, v7, v8);
}

void sub_10008835C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1000075AC(a2, a3);
  if (!v5)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (id *)sub_1000F6A84();
    char v13 = sub_10008B654(v12, a2, (unint64_t)a3, *(void *)(a1 + 112));
    uint64_t v14 = (void *)(a5 + 16);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      swift_beginAccess();
      *v14 |= 0x10uLL;
    }
    unint64_t v15 = (unint64_t)[v11 state];
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (v15 == 2)
      {
LABEL_12:
        long long v17 = sub_1000F58F8();
        char v18 = sub_10008D360((unint64_t)v17, a2, (unint64_t)a3);
        swift_bridgeObjectRelease();

        if ((v18 & 1) == 0)
        {
          swift_beginAccess();
          *v14 |= 2uLL;
        }
        return;
      }
      unint64_t v16 = (unint64_t)[v11 state];
      if ((v16 & 0x8000000000000000) == 0)
      {
        if (v16 != 3)
        {

          return;
        }
        goto LABEL_12;
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_100088518(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(void)@<X4>, const char *a5@<X5>, const char *a6@<X6>, unint64_t a7@<X8>)
{
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v13 - 8);
  uint64_t v68 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v65 = a1;
  uint64_t v66 = (char *)v56 - v17;
  unint64_t v18 = sub_100163764(a1, (void *)a2);
  if (!v7)
  {
    uint64_t v19 = (void *)v18;
    if (v18)
    {
      unint64_t v20 = a4();

      v56[1] = 0;
      if (v20 >> 62) {
        goto LABEL_36;
      }
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v21)
      {
        unint64_t v71 = (uint64_t *)(a3 + 16);
        id v61 = v16;
        unint64_t v62 = v20 & 0xC000000000000001;
        uint64_t v22 = 4;
        unint64_t v59 = a2;
        unint64_t v60 = a7;
        uint64_t v57 = v21;
        unint64_t v58 = v20;
        while (1)
        {
          id v24 = v62 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v20 + 8 * v22);
          uint64_t v25 = v24;
          a3 = v22 - 3;
          if (__OFADD__(v22 - 4, 1)) {
            break;
          }
          id v26 = [v24 identifier];
          if (!v26)
          {
            swift_bridgeObjectRelease();
            uint64_t v49 = v66;
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            uint64_t v50 = Logger.logObject.getter();
            os_log_type_t v51 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v50, v51))
            {
              uint64_t v52 = (uint8_t *)swift_slowAlloc();
              v72[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v52 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v73 = sub_10004C3A4(v65, a2, v72);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v50, v51, v64, v52, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v68);
            }
            goto LABEL_32;
          }
          uint64_t v27 = v26;
          uint64_t v70 = v22 - 3;
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          a3 = v29;

          id v30 = [v25 publicKeyIdentifier];
          if (!v30)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            uint64_t v53 = Logger.logObject.getter();
            os_log_type_t v54 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v53, v54))
            {
              uint64_t v55 = (uint8_t *)swift_slowAlloc();
              v72[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v55 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v73 = sub_10004C3A4(v65, a2, v72);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v53, v54, v63, v55, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v67 + 8))(v61, v68);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*(void (**)(char *, uint64_t))(v67 + 8))(v16, v68);
            }
LABEL_32:
            char v48 = 0;
            goto LABEL_38;
          }
          uint64_t v31 = v30;
          id v69 = v25;
          unint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v16 = v32;

          id v33 = v71;
          swift_beginAccess();
          sub_10000354C(v20, (unint64_t)v16);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v73 = *v33;
          uint64_t v35 = v73;
          *id v33 = 0x8000000000000000;
          a7 = sub_10013C484(v28, a3);
          uint64_t v37 = *(void *)(v35 + 16);
          BOOL v38 = (v36 & 1) == 0;
          uint64_t v39 = v37 + v38;
          if (__OFADD__(v37, v38)) {
            goto LABEL_34;
          }
          a2 = v36;
          if (*(void *)(v35 + 24) >= v39)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              unint64_t v42 = (void *)v73;
              if (v36) {
                goto LABEL_6;
              }
            }
            else
            {
              sub_10009B250();
              unint64_t v42 = (void *)v73;
              if (a2) {
                goto LABEL_6;
              }
            }
          }
          else
          {
            sub_100099610(v39, isUniquelyReferenced_nonNull_native);
            unint64_t v40 = sub_10013C484(v28, a3);
            if ((a2 & 1) != (v41 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            a7 = v40;
            unint64_t v42 = (void *)v73;
            if (a2)
            {
LABEL_6:
              uint64_t v23 = v42[7] + 16 * a7;
              sub_100009764(*(void *)v23, *(void *)(v23 + 8));
              *(void *)uint64_t v23 = v20;
              *(void *)(v23 + 8) = v16;
              goto LABEL_7;
            }
          }
          v42[(a7 >> 6) + 8] |= 1 << a7;
          uint64_t v43 = (uint64_t *)(v42[6] + 16 * a7);
          *uint64_t v43 = v28;
          v43[1] = a3;
          id v44 = (unint64_t *)(v42[7] + 16 * a7);
          *id v44 = v20;
          v44[1] = (unint64_t)v16;
          uint64_t v45 = v42[2];
          BOOL v46 = __OFADD__(v45, 1);
          uint64_t v47 = v45 + 1;
          if (v46) {
            goto LABEL_35;
          }
          v42[2] = v47;
          swift_bridgeObjectRetain();
LABEL_7:
          uint64_t *v71 = (uint64_t)v42;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          sub_1000035EC(v20, (unint64_t)v16);

          ++v22;
          unint64_t v20 = v58;
          a2 = v59;
          a7 = v60;
          unint64_t v16 = v61;
          if (v70 == v57) {
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_37:
      swift_bridgeObjectRelease();
      char v48 = 1;
    }
    else
    {
      char v48 = 1;
    }
LABEL_38:
    *(unsigned char *)a7 = v48;
  }
}

uint64_t sub_100088BCC(uint64_t a1, uint64_t *a2, int *a3)
{
  *(void *)(v3 + 24) = a1;
  uint64_t v4 = *a2;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 32) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100088CB8;
  return v7(v3 + 16, v4);
}

uint64_t sub_100088CB8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v2 + 24) = *(void *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t sub_100088DC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100016FE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001C2A10 + dword_1001C2A10);
  return v8(a1, a2, v6);
}

uint64_t sub_100088E8C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100088E9C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100088EEC()
{
  sub_10008835C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100088F10()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_100088F48@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100088F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_100089144, 0, 0);
}

uint64_t sub_100089144()
{
  uint64_t v14 = v0[18];
  uint64_t v1 = v0[17];
  uint64_t v13 = v0[16];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  static IDCSSignposts.consistencyCheckKeySigningKeys.getter();
  DIPSignpost.init(_:)();
  uint64_t v5 = swift_allocObject();
  v0[23] = v5;
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v6 = (void *)swift_allocObject();
  v0[24] = v6;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v6[5] = v5;
  uint64_t v7 = swift_allocObject();
  v0[25] = v7;
  *(void *)(v7 + 16) = sub_10008B5CC;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v14, v8, v13);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[26] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10008931C;
  uint64_t v11 = v0[18];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 38, v11, sub_10008B5B0, v7, &type metadata for Bool);
}

uint64_t sub_10008931C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  uint64_t v4 = *(void *)(*v1 + 136);
  uint64_t v5 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v6 = sub_100089928;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v2 + 305) = *(unsigned char *)(v2 + 304);
    uint64_t v6 = sub_1000894B4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000894B4()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    swift_beginAccess();
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 224) = v3;
    char v4 = *(unsigned char *)(v3 + 32);
    *(unsigned char *)(v0 + 306) = v4;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << v4;
    if (-(-1 << v4) < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v3 + 64);
    uint64_t v8 = (void *)swift_bridgeObjectRetain();
    if (v7)
    {
      uint64_t v9 = 0;
      unint64_t v10 = __clz(__rbit64(v7));
      uint64_t v11 = (v7 - 1) & v7;
LABEL_6:
      *(void *)(v0 + 232) = v9;
      *(void *)(v0 + 240) = v11;
      uint64_t v12 = 16 * v10;
      uint64_t v13 = (uint64_t *)(v8[6] + v12);
      uint64_t v14 = *v13;
      *(void *)(v0 + 248) = *v13;
      uint64_t v15 = v13[1];
      *(void *)(v0 + 256) = v15;
      unint64_t v16 = (uint64_t *)(v8[7] + v12);
      uint64_t v17 = *v16;
      *(void *)(v0 + 264) = *v16;
      unint64_t v18 = v16[1];
      *(void *)(v0 + 272) = v18;
      swift_bridgeObjectRetain();
      sub_100009778(v17, v18);
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v19;
      *uint64_t v19 = v0;
      v19[1] = sub_100089A14;
      return sub_10013FFEC(v14, v15, v17, v18);
    }
    unint64_t v25 = 63 - v6;
    if ((unint64_t)(63 - v6) > 0x7F)
    {
      unint64_t v26 = v8[9];
      if (v26)
      {
        uint64_t v9 = 1;
LABEL_15:
        uint64_t v11 = (v26 - 1) & v26;
        unint64_t v10 = __clz(__rbit64(v26)) + (v9 << 6);
        goto LABEL_6;
      }
      if (v25 >= 0xC0)
      {
        unint64_t v26 = v8[10];
        if (v26)
        {
          uint64_t v9 = 2;
          goto LABEL_15;
        }
        if (v25 >= 0x100)
        {
          unint64_t v26 = v8[11];
          if (v26)
          {
            uint64_t v9 = 3;
            goto LABEL_15;
          }
          if (v25 >= 0x140)
          {
            unint64_t v26 = v8[12];
            if (v26)
            {
              uint64_t v9 = 4;
              goto LABEL_15;
            }
            uint64_t v27 = 0;
            uint64_t v28 = v25 >> 6;
            if (v28 <= 5) {
              uint64_t v28 = 5;
            }
            uint64_t v29 = v28 - 5;
            while (v29 != v27)
            {
              unint64_t v26 = v8[v27++ + 13];
              if (v26)
              {
                uint64_t v9 = v27 + 4;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
    swift_release();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 104);
    uint64_t v34 = *(void *)(v0 + 112);
    uint64_t v35 = *(void *)(v0 + 96);
    unint64_t v36 = *(void *)(v0 + 72);
    if (v32)
    {
      uint64_t v38 = *(void *)(v0 + 64);
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10004C3A4(v38, v36, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Key signing keys for credential %s passed completeness check", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    }
  }
  swift_release();
  uint64_t v22 = *(void *)(v0 + 168);
  uint64_t v21 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 160);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v24 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v24(v1);
}

uint64_t sub_100089928()
{
  swift_release();
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  swift_release();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_100089A14(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008A250;
  }
  else
  {
    *(void *)(v4 + 296) = a1;
    uint64_t v5 = sub_100089B3C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100089B3C()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void *)(v0 + 296);
  swift_release();
  uint64_t v3 = *(void *)(v0 + 264);
  unint64_t v2 = *(void *)(v0 + 272);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_100009764(v3, v2);
    int64_t v5 = *(void *)(v0 + 232);
    unint64_t v6 = *(void *)(v0 + 240);
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      uint64_t v8 = (v6 - 1) & v6;
      unint64_t v9 = v7 | (v5 << 6);
      uint64_t result = *(void *)(v0 + 224);
LABEL_4:
      *(void *)(v0 + 232) = v5;
      *(void *)(v0 + 240) = v8;
      unint64_t v10 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
      uint64_t v11 = *v10;
      *(void *)(v0 + 248) = *v10;
      uint64_t v12 = v10[1];
      *(void *)(v0 + 256) = v12;
      uint64_t v13 = (uint64_t *)(*(void *)(result + 56) + 16 * v9);
      uint64_t v14 = *v13;
      *(void *)(v0 + 264) = *v13;
      unint64_t v15 = v13[1];
      *(void *)(v0 + 272) = v15;
      swift_bridgeObjectRetain();
      sub_100009778(v14, v15);
      unint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v16;
      *unint64_t v16 = v0;
      v16[1] = sub_100089A14;
      return sub_10013FFEC(v11, v12, v14, v15);
    }
    int64_t v25 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    int64_t v26 = (unint64_t)((1 << *(unsigned char *)(v0 + 306)) + 63) >> 6;
    uint64_t result = *(void *)(v0 + 224);
    if (v25 < v26)
    {
      uint64_t v27 = result + 64;
      unint64_t v28 = *(void *)(result + 64 + 8 * v25);
      ++v5;
      if (v28)
      {
LABEL_12:
        uint64_t v8 = (v28 - 1) & v28;
        unint64_t v9 = __clz(__rbit64(v28)) + (v5 << 6);
        goto LABEL_4;
      }
      int64_t v5 = v25 + 1;
      if (v25 + 1 < v26)
      {
        unint64_t v28 = *(void *)(v27 + 8 * v5);
        if (v28) {
          goto LABEL_12;
        }
        int64_t v5 = v25 + 2;
        if (v25 + 2 < v26)
        {
          unint64_t v28 = *(void *)(v27 + 8 * v5);
          if (v28) {
            goto LABEL_12;
          }
          int64_t v32 = v25 + 3;
          if (v32 < v26)
          {
            unint64_t v28 = *(void *)(v27 + 8 * v32);
            if (v28)
            {
              int64_t v5 = v32;
              goto LABEL_12;
            }
            while (1)
            {
              int64_t v5 = v32 + 1;
              if (__OFADD__(v32, 1)) {
                break;
              }
              if (v5 >= v26) {
                goto LABEL_25;
              }
              unint64_t v28 = *(void *)(v27 + 8 * v5);
              ++v32;
              if (v28) {
                goto LABEL_12;
              }
            }
LABEL_33:
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_25:
    swift_release();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v37 = *(void *)(v0 + 104);
    uint64_t v36 = *(void *)(v0 + 112);
    uint64_t v38 = *(void *)(v0 + 96);
    unint64_t v39 = *(void *)(v0 + 72);
    if (v35)
    {
      uint64_t v51 = *(void *)(v0 + 96);
      uint64_t v49 = *(void *)(v0 + 64);
      uint64_t v52 = v1;
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10004C3A4(v49, v39, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Key signing keys for credential %s passed completeness check", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v52;
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v51);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    }
    swift_release();
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100009778(v3, v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100009778(v3, v2);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v21 = *(void *)(v0 + 264);
    unint64_t v20 = *(void *)(v0 + 272);
    unint64_t v22 = *(void *)(v0 + 256);
    if (v19)
    {
      uint64_t v45 = *(void *)(v0 + 248);
      uint64_t v47 = *(void *)(v0 + 104);
      uint64_t v48 = *(void *)(v0 + 96);
      uint64_t v50 = *(void *)(v0 + 120);
      unint64_t v23 = *(void *)(v0 + 72);
      uint64_t v46 = *(void *)(v0 + 64);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_10004C3A4(v45, v22, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_100009764(v21, v20);
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 48) = sub_10004C3A4(v46, v23, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Key signing key %s for credential %s does not exist in keychain", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v50, v48);
      swift_release();
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 120);
      uint64_t v31 = *(void *)(v0 + 96);
      uint64_t v30 = *(void *)(v0 + 104);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      swift_release();
    }
    swift_release();
    uint64_t v1 = 0;
  }
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v41 = *(void *)(v0 + 176);
  uint64_t v43 = *(void *)(v0 + 160);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v44 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v44(v1 != 0);
}

uint64_t sub_10008A250()
{
  uint64_t v1 = v0[33];
  unint64_t v2 = v0[34];
  swift_bridgeObjectRelease();
  sub_100009764(v1, v2);
  swift_release();
  uint64_t v4 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v5 = v0[20];
  swift_release();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

uint64_t sub_10008A358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_10008A510, 0, 0);
}

uint64_t sub_10008A510()
{
  uint64_t v14 = v0[18];
  uint64_t v1 = v0[17];
  uint64_t v13 = v0[16];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  static IDCSSignposts.consistencyCheckDeviceEncryptionKeys.getter();
  DIPSignpost.init(_:)();
  uint64_t v5 = swift_allocObject();
  v0[23] = v5;
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v6 = (void *)swift_allocObject();
  v0[24] = v6;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v6[5] = v5;
  uint64_t v7 = swift_allocObject();
  v0[25] = v7;
  *(void *)(v7 + 16) = sub_10008B56C;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v14, v8, v13);
  swift_retain();
  unint64_t v10 = (void *)swift_task_alloc();
  v0[26] = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_10008A6E8;
  uint64_t v11 = v0[18];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 38, v11, sub_10008B5B0, v7, &type metadata for Bool);
}

uint64_t sub_10008A6E8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  uint64_t v4 = *(void *)(*v1 + 136);
  uint64_t v5 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v6 = sub_10008DB3C;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v2 + 305) = *(unsigned char *)(v2 + 304);
    uint64_t v6 = sub_10008A880;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10008A880()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    swift_beginAccess();
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 224) = v3;
    char v4 = *(unsigned char *)(v3 + 32);
    *(unsigned char *)(v0 + 306) = v4;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << v4;
    if (-(-1 << v4) < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v3 + 64);
    uint64_t v8 = (void *)swift_bridgeObjectRetain();
    if (v7)
    {
      uint64_t v9 = 0;
      unint64_t v10 = __clz(__rbit64(v7));
      uint64_t v11 = (v7 - 1) & v7;
LABEL_6:
      *(void *)(v0 + 232) = v9;
      *(void *)(v0 + 240) = v11;
      uint64_t v12 = 16 * v10;
      uint64_t v13 = (uint64_t *)(v8[6] + v12);
      uint64_t v14 = *v13;
      *(void *)(v0 + 248) = *v13;
      uint64_t v15 = v13[1];
      *(void *)(v0 + 256) = v15;
      unint64_t v16 = (uint64_t *)(v8[7] + v12);
      uint64_t v17 = *v16;
      *(void *)(v0 + 264) = *v16;
      unint64_t v18 = v16[1];
      *(void *)(v0 + 272) = v18;
      swift_bridgeObjectRetain();
      sub_100009778(v17, v18);
      BOOL v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v19;
      *BOOL v19 = v0;
      v19[1] = sub_10008ACF4;
      return sub_100141B0C(v14, v15, v17, v18);
    }
    unint64_t v25 = 63 - v6;
    if ((unint64_t)(63 - v6) > 0x7F)
    {
      unint64_t v26 = v8[9];
      if (v26)
      {
        uint64_t v9 = 1;
LABEL_15:
        uint64_t v11 = (v26 - 1) & v26;
        unint64_t v10 = __clz(__rbit64(v26)) + (v9 << 6);
        goto LABEL_6;
      }
      if (v25 >= 0xC0)
      {
        unint64_t v26 = v8[10];
        if (v26)
        {
          uint64_t v9 = 2;
          goto LABEL_15;
        }
        if (v25 >= 0x100)
        {
          unint64_t v26 = v8[11];
          if (v26)
          {
            uint64_t v9 = 3;
            goto LABEL_15;
          }
          if (v25 >= 0x140)
          {
            unint64_t v26 = v8[12];
            if (v26)
            {
              uint64_t v9 = 4;
              goto LABEL_15;
            }
            uint64_t v27 = 0;
            uint64_t v28 = v25 >> 6;
            if (v28 <= 5) {
              uint64_t v28 = 5;
            }
            uint64_t v29 = v28 - 5;
            while (v29 != v27)
            {
              unint64_t v26 = v8[v27++ + 13];
              if (v26)
              {
                uint64_t v9 = v27 + 4;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
    swift_release();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 104);
    uint64_t v34 = *(void *)(v0 + 112);
    uint64_t v35 = *(void *)(v0 + 96);
    unint64_t v36 = *(void *)(v0 + 72);
    if (v32)
    {
      uint64_t v38 = *(void *)(v0 + 64);
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10004C3A4(v38, v36, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Device encryption keys for credential %s passed completeness check", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    }
  }
  swift_release();
  uint64_t v22 = *(void *)(v0 + 168);
  uint64_t v21 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 160);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v24(v1);
}

uint64_t sub_10008ACF4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008DB40;
  }
  else
  {
    *(void *)(v4 + 296) = a1;
    uint64_t v5 = sub_10008AE1C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008AE1C()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void *)(v0 + 296);
  swift_release();
  uint64_t v3 = *(void *)(v0 + 264);
  unint64_t v2 = *(void *)(v0 + 272);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_100009764(v3, v2);
    int64_t v5 = *(void *)(v0 + 232);
    unint64_t v6 = *(void *)(v0 + 240);
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      uint64_t v8 = (v6 - 1) & v6;
      unint64_t v9 = v7 | (v5 << 6);
      uint64_t result = *(void *)(v0 + 224);
LABEL_4:
      *(void *)(v0 + 232) = v5;
      *(void *)(v0 + 240) = v8;
      unint64_t v10 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
      uint64_t v11 = *v10;
      *(void *)(v0 + 248) = *v10;
      uint64_t v12 = v10[1];
      *(void *)(v0 + 256) = v12;
      uint64_t v13 = (uint64_t *)(*(void *)(result + 56) + 16 * v9);
      uint64_t v14 = *v13;
      *(void *)(v0 + 264) = *v13;
      unint64_t v15 = v13[1];
      *(void *)(v0 + 272) = v15;
      swift_bridgeObjectRetain();
      sub_100009778(v14, v15);
      unint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v16;
      *unint64_t v16 = v0;
      v16[1] = sub_10008ACF4;
      return sub_100141B0C(v11, v12, v14, v15);
    }
    int64_t v25 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    int64_t v26 = (unint64_t)((1 << *(unsigned char *)(v0 + 306)) + 63) >> 6;
    uint64_t result = *(void *)(v0 + 224);
    if (v25 < v26)
    {
      uint64_t v27 = result + 64;
      unint64_t v28 = *(void *)(result + 64 + 8 * v25);
      ++v5;
      if (v28)
      {
LABEL_12:
        uint64_t v8 = (v28 - 1) & v28;
        unint64_t v9 = __clz(__rbit64(v28)) + (v5 << 6);
        goto LABEL_4;
      }
      int64_t v5 = v25 + 1;
      if (v25 + 1 < v26)
      {
        unint64_t v28 = *(void *)(v27 + 8 * v5);
        if (v28) {
          goto LABEL_12;
        }
        int64_t v5 = v25 + 2;
        if (v25 + 2 < v26)
        {
          unint64_t v28 = *(void *)(v27 + 8 * v5);
          if (v28) {
            goto LABEL_12;
          }
          int64_t v32 = v25 + 3;
          if (v32 < v26)
          {
            unint64_t v28 = *(void *)(v27 + 8 * v32);
            if (v28)
            {
              int64_t v5 = v32;
              goto LABEL_12;
            }
            while (1)
            {
              int64_t v5 = v32 + 1;
              if (__OFADD__(v32, 1)) {
                break;
              }
              if (v5 >= v26) {
                goto LABEL_25;
              }
              unint64_t v28 = *(void *)(v27 + 8 * v5);
              ++v32;
              if (v28) {
                goto LABEL_12;
              }
            }
LABEL_33:
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_25:
    swift_release();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v37 = *(void *)(v0 + 104);
    uint64_t v36 = *(void *)(v0 + 112);
    uint64_t v38 = *(void *)(v0 + 96);
    unint64_t v39 = *(void *)(v0 + 72);
    if (v35)
    {
      uint64_t v51 = *(void *)(v0 + 96);
      uint64_t v49 = *(void *)(v0 + 64);
      uint64_t v52 = v1;
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10004C3A4(v49, v39, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device encryption keys for credential %s passed completeness check", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v52;
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v51);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    }
    swift_release();
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100009778(v3, v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100009778(v3, v2);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v21 = *(void *)(v0 + 264);
    unint64_t v20 = *(void *)(v0 + 272);
    unint64_t v22 = *(void *)(v0 + 256);
    if (v19)
    {
      uint64_t v45 = *(void *)(v0 + 248);
      uint64_t v47 = *(void *)(v0 + 104);
      uint64_t v48 = *(void *)(v0 + 96);
      uint64_t v50 = *(void *)(v0 + 120);
      unint64_t v23 = *(void *)(v0 + 72);
      uint64_t v46 = *(void *)(v0 + 64);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_10004C3A4(v45, v22, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_100009764(v21, v20);
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 48) = sub_10004C3A4(v46, v23, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Device encryption key %s for credential %s does not exist in keychain", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v50, v48);
      swift_release();
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 120);
      uint64_t v31 = *(void *)(v0 + 96);
      uint64_t v30 = *(void *)(v0 + 104);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      swift_bridgeObjectRelease();
      sub_100009764(v21, v20);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      swift_release();
    }
    swift_release();
    uint64_t v1 = 0;
  }
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v41 = *(void *)(v0 + 176);
  uint64_t v43 = *(void *)(v0 + 160);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v44 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v44(v1 != 0);
}

uint64_t sub_10008B530()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008B56C(unint64_t a1@<X8>)
{
  sub_100088518(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), (uint64_t (*)(void))sub_1000F5AC0, "Device encryption key for credential %s does not have a public key identifier", "Device encryption key for credential %s does not have an identifier", a1);
}

void *sub_10008B5B0@<X0>(unsigned char *a1@<X8>)
{
  return sub_10008B610(a1);
}

void sub_10008B5CC(unint64_t a1@<X8>)
{
  sub_100088518(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), (uint64_t (*)(void))sub_1000F5DBC, "Key signing key for credential %s does not have a public key identifier", "Key signing key for credential %s does not have an identifier", a1);
}

void *sub_10008B610@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_10008B654(id *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v172 = a4;
  unint64_t v158 = a3;
  uint64_t v154 = a2;
  uint64_t v156 = type metadata accessor for Logger();
  uint64_t v157 = *(void *)(v156 - 8);
  uint64_t v7 = __chkstk_darwin(v156);
  unint64_t v9 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v148 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v153 = (char *)&v148 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  Class v150 = (char *)&v148 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  long long v152 = (char *)&v148 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v151 = (char *)&v148 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_t v149 = (char *)&v148 - v22;
  __chkstk_darwin(v21);
  unint64_t v148 = (char *)&v148 - v23;
  uint64_t v24 = sub_100006CC8(&qword_1001C15B8);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v167 = (char *)&v148 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v170 = (char *)&v148 - v27;
  uint64_t v196 = type metadata accessor for CredentialKeyType();
  uint64_t v28 = *(void *)(v196 - 8);
  uint64_t v29 = __chkstk_darwin(v196);
  uint64_t v195 = (char *)&v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v184 = (char *)&v148 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v162 = (char *)&v148 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  unsigned int v185 = (char *)&v148 - v36;
  __chkstk_darwin(v35);
  uint64_t v197 = (char *)&v148 - v37;
  uint64_t v38 = sub_100006CC8(&qword_1001C0840);
  __chkstk_darwin(v38 - 8);
  uint64_t v171 = (char *)&v148 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for CredentialKeyUsage();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v199 = (char *)&v148 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  uint64_t v198 = (char *)&v148 - v44;
  uint64_t v45 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v45 - 8);
  uint64_t v160 = type metadata accessor for DIPSignpost();
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v47 = (char *)&v148 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.consistencyCheckPresentmentKeys.getter();
  int64_t v161 = v47;
  DIPSignpost.init(_:)();
  if ((unint64_t)a1 >> 62)
  {
LABEL_80:
    swift_bridgeObjectRetain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
    if (v48) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v48)
    {
LABEL_3:
      unint64_t v183 = (unint64_t)a1 & 0xC000000000000001;
      NSString v164 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
      uint64_t v155 = (void (**)(char *, uint64_t, uint64_t))(v41 + 32);
      unsigned int v165 = enum case for CredentialKeyUsage.invalid(_:);
      uint64_t v179 = (void (**)(char *, void, uint64_t))(v41 + 104);
      uint64_t v180 = (void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v186 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
      uint64_t v163 = (void (**)(char *, uint64_t, uint64_t))(v28 + 32);
      uint64_t v194 = (id **)(v28 + 104);
      long long v192 = (void (**)(char *, uint64_t))(v28 + 8);
      unsigned int v182 = enum case for CredentialKeyUsage.presentment(_:);
      unsigned int v187 = enum case for CredentialKeyType.invalid(_:);
      unsigned int v188 = enum case for CredentialKeyType.legacySE(_:);
      uint64_t v49 = 4;
      unsigned int v176 = enum case for CredentialKeyType.ses(_:);
      uint64_t v175 = v12;
      unsigned int v178 = a1;
      Class v174 = v9;
      uint64_t v177 = v40;
      uint64_t v173 = v48;
      do
      {
        if (v183) {
          uint64_t v50 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v50 = (char *)a1[v49];
        }
        unint64_t v9 = v50;
        uint64_t v28 = v49 - 3;
        if (__OFADD__(v49 - 4, 1))
        {
          __break(1u);
          goto LABEL_80;
        }
        id v51 = [v50 identifier];
        if (!v51)
        {
          swift_bridgeObjectRelease();
          defaultLogger()();
          unint64_t v110 = v158;
          swift_bridgeObjectRetain_n();
          unint64_t v111 = Logger.logObject.getter();
          os_log_type_t v112 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v111, v112))
          {
            uint64_t v113 = (uint8_t *)swift_slowAlloc();
            uint64_t v205 = swift_slowAlloc();
            *(_DWORD *)uint64_t v113 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v203 = sub_10004C3A4(v154, v110, &v205);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v111, v112, "Presentment key for credential %s does not have an identifier", v113, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
            uint64_t v115 = (unint64_t *)&v207;
            goto LABEL_65;
          }

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v157 + 8))(v12, v156);
          goto LABEL_74;
        }
        uint64_t v52 = v51;
        uint64_t v190 = v49 - 3;
        uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v54 = v53;

        id v55 = [v9 publicKeyIdentifier];
        if (!v55)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v116 = v153;
          defaultLogger()();
          unint64_t v117 = v158;
          swift_bridgeObjectRetain_n();
          uint64_t v118 = Logger.logObject.getter();
          os_log_type_t v119 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v118, v119))
          {
            uint64_t v120 = (uint8_t *)swift_slowAlloc();
            uint64_t v205 = swift_slowAlloc();
            *(_DWORD *)uint64_t v120 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v203 = sub_10004C3A4(v154, v117, &v205);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v118, v119, "Presentment key for credential %s does not have a public key identifier", v120, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
            uint64_t v115 = (unint64_t *)&v186;
            goto LABEL_65;
          }
          goto LABEL_67;
        }
        uint64_t v56 = v55;
        uint64_t v189 = v49;
        uint64_t v202 = v54;
        uint64_t v200 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v201 = v57;

        id v58 = [v9 usage];
        unint64_t v59 = v197;
        if (v58)
        {
          unint64_t v60 = v58;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v61 = (uint64_t)v171;
          CredentialKeyUsage.init(rawValue:)();
          if ((*v164)(v61, 1, v40) != 1)
          {
            uint64_t v62 = v5;
            (*v155)(v198, v61, v40);
            uint64_t v63 = *v179;
            goto LABEL_15;
          }
          sub_100014BBC(v61, &qword_1001C0840);
        }
        uint64_t v62 = v5;
        uint64_t v63 = *v179;
        (*v179)(v198, v165, v40);
LABEL_15:
        v63(v199, v182, v40);
        sub_10008DAE8(&qword_1001C0848, (void (*)(uint64_t))&type metadata accessor for CredentialKeyUsage);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v205 == v203 && v206 == v204)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v64 = *v180;
          (*v180)(v199, v40);
          v64(v198, v40);
          uint64_t v65 = v62;
        }
        else
        {
          char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v67 = *v180;
          (*v180)(v199, v40);
          v67(v198, v40);
          uint64_t v65 = v62;
          if ((v66 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v116 = v150;
            defaultLogger()();
            unint64_t v130 = v158;
            swift_bridgeObjectRetain_n();
            uint64_t v118 = Logger.logObject.getter();
            os_log_type_t v131 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v118, v131))
            {
              uint64_t v132 = (uint8_t *)swift_slowAlloc();
              uint64_t v205 = swift_slowAlloc();
              *(_DWORD *)uint64_t v132 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v203 = sub_10004C3A4(v154, v130, &v205);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v118, v131, "Presentment key for credential %s does not have presentment usage", v132, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_1000035EC(v200, v201);

              unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
              uint64_t v115 = &v183;
LABEL_65:
              uint64_t v136 = (char *)*(v115 - 32);
              goto LABEL_73;
            }
LABEL_66:
            sub_1000035EC(v200, v201);
LABEL_67:

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v157 + 8))(v116, v156);
            goto LABEL_74;
          }
        }
        id v68 = [v9 keyType];
        uint64_t v69 = v196;
        if (v68)
        {
          uint64_t v70 = v68;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v71 = (uint64_t)v170;
          CredentialKeyType.init(rawValue:)();
          if ((*v186)(v71, 1, v69) != 1)
          {
            (*v163)(v59, v71, v69);
            uint64_t v72 = *v194;
            goto LABEL_24;
          }
          sub_100014BBC(v71, &qword_1001C15B8);
        }
        uint64_t v72 = *v194;
        ((void (*)(char *, void, uint64_t))*v194)(v59, v187, v69);
LABEL_24:
        uint64_t v207 = v9;
        uint64_t v73 = v185;
        ((void (*)(char *, void, uint64_t))v72)(v185, v188, v69);
        sub_10008DAE8(&qword_1001C2A30, (void (*)(uint64_t))&type metadata accessor for CredentialKeyType);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v205 == v203 && v206 == v204) {
          char v74 = 1;
        }
        else {
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v75 = *v192;
        (*v192)(v73, v69);
        v75(v197, v69);
        unsigned int v191 = v72;
        if (v74)
        {
          unint64_t v9 = v207;
          id v76 = [v207 publicKey];
          if (!v76)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v116 = v149;
            defaultLogger()();
            unint64_t v133 = v158;
            swift_bridgeObjectRetain_n();
            uint64_t v118 = Logger.logObject.getter();
            os_log_type_t v134 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v118, v134))
            {
              uint64_t v135 = (uint8_t *)swift_slowAlloc();
              uint64_t v205 = swift_slowAlloc();
              *(_DWORD *)uint64_t v135 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v203 = sub_10004C3A4(v154, v133, &v205);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v118, v134, "Presentment key for credential %s does not have a public key", v135, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_1000035EC(v200, v201);

              unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
              uint64_t v115 = (unint64_t *)&v181;
              goto LABEL_65;
            }
            goto LABEL_66;
          }
          uint64_t v77 = v76;
          uint64_t v78 = v9;
          uint64_t v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v80 = v79;

          id v81 = [v78 keySlot];
          sub_1000065F8(0);
          if (v65)
          {
            swift_bridgeObjectRelease();
            sub_1000035EC(v169, v80);
            unint64_t v9 = v207;
            goto LABEL_69;
          }
          unint64_t v166 = v80;
          uint64_t v168 = 0;
          BOOL v83 = sub_100007B44((uint64_t)v81, v82);
          swift_bridgeObjectRelease();
          if (!v83)
          {
            swift_bridgeObjectRelease();
            uint64_t v138 = v148;
            defaultLogger()();
            unint64_t v139 = v158;
            swift_bridgeObjectRetain_n();
            unint64_t v140 = v202;
            swift_bridgeObjectRetain();
            os_log_t v141 = Logger.logObject.getter();
            os_log_type_t v142 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v141, v142))
            {
              uint64_t v143 = swift_slowAlloc();
              uint64_t v205 = swift_slowAlloc();
              *(_DWORD *)uint64_t v143 = 136315394;
              swift_bridgeObjectRetain();
              uint64_t v203 = sub_10004C3A4(v193, v140, &v205);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v143 + 12) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v203 = sub_10004C3A4(v154, v139, &v205);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v141, v142, "Presentment key %s for credential %s does not exist", (uint8_t *)v143, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_1000035EC(v169, v166);
            }
            else
            {
              sub_1000035EC(v169, v166);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            sub_1000035EC(v200, v201);

            (*(void (**)(char *, uint64_t))(v157 + 8))(v138, v156);
            LOBYTE(v72) = 0;
            goto LABEL_75;
          }
          uint64_t v84 = (uint64_t)v162;
          ((void (*)(char *, void, uint64_t))v72)(v162, v188, v69);
          unint64_t v85 = v201;
          uint64_t v86 = v200;
          sub_10006B720(v193, v202, v200, v201, v169, v166, v84, (uint64_t)v81, 0);
          swift_bridgeObjectRetain();
          sub_10000354C(v86, v85);
          swift_release();
          uint64_t v65 = v168;
        }
        id v87 = [v207 keyType];
        if (v87)
        {
          uint64_t v88 = v87;
          uint64_t v89 = v65;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v90 = (uint64_t)v167;
          CredentialKeyType.init(rawValue:)();
          if ((*v186)(v90, 1, v69) != 1)
          {
            uint64_t v91 = v184;
            (*v163)(v184, v90, v69);
            os_log_type_t v92 = v191;
            goto LABEL_38;
          }
          sub_100014BBC(v90, &qword_1001C15B8);
        }
        uint64_t v89 = v65;
        uint64_t v91 = v184;
        os_log_type_t v92 = v191;
        ((void (*)(char *, void, uint64_t))v191)(v184, v187, v69);
LABEL_38:
        ((void (*)(char *, void, uint64_t))v92)(v195, v176, v69);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v205 == v203 && v206 == v204)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v93 = v196;
          v75(v195, v196);
          v75(v91, v93);
          a1 = v178;
          uint64_t v5 = v89;
          uint64_t v40 = v177;
        }
        else
        {
          char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v41 = v196;
          v75(v195, v196);
          v75(v91, v41);
          a1 = v178;
          uint64_t v5 = v89;
          uint64_t v40 = v177;
          if ((v94 & 1) == 0)
          {
            sub_1000035EC(v200, v201);
            swift_bridgeObjectRelease();

            uint64_t v12 = v175;
            goto LABEL_47;
          }
        }
        unint64_t v9 = v207;
        id v95 = [v207 publicKey];
        uint64_t v96 = v202;
        if (!v95)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v116 = v152;
          defaultLogger()();
          unint64_t v121 = v158;
          swift_bridgeObjectRetain_n();
          uint64_t v118 = Logger.logObject.getter();
          os_log_type_t v122 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v118, v122))
          {
            id v123 = (uint8_t *)swift_slowAlloc();
            uint64_t v205 = swift_slowAlloc();
            *(_DWORD *)id v123 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v203 = sub_10004C3A4(v154, v121, &v205);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v118, v122, "Presentment key for credential %s does not have a public key", v123, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            sub_1000035EC(v200, v201);

            unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
            uint64_t v115 = (unint64_t *)&v185;
            goto LABEL_65;
          }
          goto LABEL_66;
        }
        int64_t v97 = v95;
        uint64_t v72 = a1;
        uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v100 = v99;

        sub_1000035EC(v98, v100);
        id v101 = [v9 keyBlob];
        if (!v101)
        {
          swift_bridgeObjectRelease();
          unint64_t v124 = v96;
          unint64_t v125 = v151;
          defaultLogger()();
          unint64_t v126 = v158;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v127 = Logger.logObject.getter();
          os_log_type_t v128 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v127, v128))
          {
            uint64_t v129 = swift_slowAlloc();
            uint64_t v205 = swift_slowAlloc();
            *(_DWORD *)uint64_t v129 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v203 = sub_10004C3A4(v193, v124, &v205);
            uint64_t v168 = v5;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v129 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v203 = sub_10004C3A4(v154, v126, &v205);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v127, v128, "Presentment key %s for credential %s does not exist", (uint8_t *)v129, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            sub_1000035EC(v200, v201);

            unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
            uint64_t v115 = (unint64_t *)&v184;
            goto LABEL_65;
          }
          sub_1000035EC(v200, v201);

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

          unint64_t v114 = *(void (**)(char *, uint64_t))(v157 + 8);
          uint64_t v136 = v125;
LABEL_73:
          v114(v136, v156);
LABEL_74:
          LOBYTE(v72) = 0;
          goto LABEL_75;
        }
        uint64_t v102 = v101;
        uint64_t v103 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v105 = v104;

        sub_10000354C(v103, v105);
        uint64_t v41 = v172;
        sub_100140DA0(v193, v96, v103, v105, 0, 0xF000000000000000);
        if (v5)
        {
          swift_bridgeObjectRelease();
          sub_1000035EC(v103, v105);
          sub_1000035EC(v103, v105);
LABEL_69:
          sub_1000035EC(v200, v201);

          swift_bridgeObjectRelease();
          uint64_t v137 = v161;
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          (*(void (**)(char *, uint64_t))(v159 + 8))(v137, v160);
          return v72 & 1;
        }
        swift_release();
        sub_1000035EC(v200, v201);
        swift_bridgeObjectRelease();

        sub_1000035EC(v103, v105);
        sub_1000035EC(v103, v105);
        uint64_t v12 = v175;
        a1 = v72;
LABEL_47:
        uint64_t v49 = v189 + 1;
        unint64_t v9 = v174;
      }
      while (v190 != v173);
    }
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  unint64_t v106 = v158;
  swift_bridgeObjectRetain_n();
  uint64_t v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = (uint8_t *)swift_slowAlloc();
    uint64_t v205 = swift_slowAlloc();
    *(_DWORD *)uint64_t v109 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v203 = sub_10004C3A4(v154, v106, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Presentment keys for credential %s passed completeness check", v109, 0xCu);
    LOBYTE(v72) = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v157 + 8))(v9, v156);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v157 + 8))(v9, v156);
    LOBYTE(v72) = 1;
  }
LABEL_75:
  uint64_t v144 = v160;
  uint64_t v145 = v159;
  uint64_t v146 = v161;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v144);
  return v72 & 1;
}

uint64_t sub_10008D360(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v54 = a3;
  uint64_t v50 = a2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  uint64_t v53 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v49 = (char *)&v46 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for DIPSignpost();
  uint64_t v56 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.consistencyCheckPayloads.getter();
  id v55 = v18;
  DIPSignpost.init(_:)();
  if (!(a1 >> 62))
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
      uint64_t v47 = v10;
      uint64_t v48 = v16;
      uint64_t v51 = v3;
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }
LABEL_26:
    defaultLogger()();
    unint64_t v39 = v54;
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      uint64_t v51 = v4;
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_10004C3A4(v50, v39, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Credential %s does not have any payloads", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v52);
    uint64_t v37 = 0;
    goto LABEL_30;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v38) {
    goto LABEL_26;
  }
  uint64_t v47 = v10;
  uint64_t v48 = v16;
  uint64_t v51 = v4;
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  if (v19)
  {
LABEL_4:
    uint64_t v16 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v20 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v20 = (char *)*(id *)(a1 + 8 * v16);
      }
      uint64_t v14 = v20;
      uint64_t v4 = v16 - 3;
      if (__OFADD__(v16 - 4, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
      id v21 = [v20 payloadData];
      if (!v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = v49;
        defaultLogger()();
        unint64_t v27 = v54;
        swift_bridgeObjectRetain_n();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v57 = sub_10004C3A4(v50, v27, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Credential %s has a payload with empty payload data", v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v52);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v52);
        }
        uint64_t v37 = 0;
        goto LABEL_21;
      }
      uint64_t v22 = v21;
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      sub_1000035EC(v23, v25);
      uint64_t v10 = (char *)[v14 presentmentKey];

      if (!v10) {
        break;
      }

      ++v16;
      if (v4 == v19) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v31 = v47;
    defaultLogger()();
    unint64_t v32 = v54;
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v47 = v31;
      uint64_t v58 = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_10004C3A4(v50, v32, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Credential %s has a payload without a presentment key", v35, 0xCu);
      uint64_t v37 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v53 + 8))(v47, v52);
      goto LABEL_21;
    }

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v52);
    goto LABEL_20;
  }
LABEL_12:
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v37 = 1;
LABEL_21:
  uint64_t v16 = v48;
LABEL_30:
  uint64_t v44 = v55;
  uint64_t v43 = v56;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v16);
  return v37;
}

uint64_t sub_10008DAE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008DB44(uint64_t a1, uint64_t a2)
{
  uint64_t v118 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v132 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v120 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v5 - 8);
  unint64_t v121 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100006CC8(&qword_1001C1348);
  uint64_t v7 = __chkstk_darwin(v134);
  uint64_t v9 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v104 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v104 - v13;
  uint64_t v119 = type metadata accessor for CredentialElement(0);
  uint64_t v122 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  unint64_t v133 = (uint64_t *)((char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v135 = a2;
  Logger.sensitive(_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v17 + 8);
  v20(v19, v16);
  sub_10004AA24((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (a1)
  {
    uint64_t v21 = defaultLogger()();
    __chkstk_darwin(v21);
    *(&v104 - 2) = a1;
    Logger.sensitive(_:)();
    v20(v19, v16);
    swift_bridgeObjectRetain();
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = sub_10008FFA4(v22, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100090808(&_swiftEmptyDictionarySingleton, v23, a1);
    swift_release();
    swift_bridgeObjectRelease();
    return v24;
  }
  unint64_t v117 = v14;
  uint64_t v115 = v12;
  uint64_t v116 = (uint64_t *)v9;
  uint64_t v26 = *(void *)(a2 + 64);
  uint64_t v105 = a2 + 64;
  uint64_t v27 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v106 = (unint64_t)(v27 + 63) >> 6;
  unint64_t v114 = (void (**)(char *, uint64_t))(v132 + 8);
  uint64_t v30 = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  unint64_t v110 = &_swiftEmptyDictionarySingleton;
  uint64_t v32 = v134;
  uint64_t v33 = &_swiftEmptyArrayStorage;
  uint64_t v107 = v30;
  while (1)
  {
    if (v29)
    {
      unint64_t v35 = __clz(__rbit64(v29));
      uint64_t v36 = (v29 - 1) & v29;
      unint64_t v37 = v35 | (v31 << 6);
    }
    else
    {
      int64_t v38 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        goto LABEL_73;
      }
      if (v38 >= v106) {
        goto LABEL_64;
      }
      unint64_t v39 = *(void *)(v105 + 8 * v38);
      ++v31;
      if (!v39)
      {
        int64_t v31 = v38 + 1;
        if (v38 + 1 >= v106) {
          goto LABEL_64;
        }
        unint64_t v39 = *(void *)(v105 + 8 * v31);
        if (!v39)
        {
          int64_t v31 = v38 + 2;
          if (v38 + 2 >= v106) {
            goto LABEL_64;
          }
          unint64_t v39 = *(void *)(v105 + 8 * v31);
          if (!v39)
          {
            int64_t v31 = v38 + 3;
            if (v38 + 3 >= v106) {
              goto LABEL_64;
            }
            unint64_t v39 = *(void *)(v105 + 8 * v31);
            if (!v39)
            {
              int64_t v31 = v38 + 4;
              if (v38 + 4 >= v106) {
                goto LABEL_64;
              }
              unint64_t v39 = *(void *)(v105 + 8 * v31);
              if (!v39)
              {
                int64_t v40 = v38 + 5;
                if (v40 >= v106) {
                  goto LABEL_64;
                }
                unint64_t v39 = *(void *)(v105 + 8 * v40);
                if (!v39)
                {
                  while (1)
                  {
                    int64_t v31 = v40 + 1;
                    if (__OFADD__(v40, 1)) {
                      goto LABEL_74;
                    }
                    if (v31 >= v106) {
                      break;
                    }
                    unint64_t v39 = *(void *)(v105 + 8 * v31);
                    ++v40;
                    if (v39) {
                      goto LABEL_28;
                    }
                  }
LABEL_64:
                  swift_release();
                  return (uint64_t)v110;
                }
                int64_t v31 = v40;
              }
            }
          }
        }
      }
LABEL_28:
      uint64_t v36 = (v39 - 1) & v39;
      unint64_t v37 = __clz(__rbit64(v39)) + (v31 << 6);
    }
    unint64_t v108 = v36;
    int64_t v109 = v31;
    uint64_t v41 = *(void *)(v30 + 56);
    uint64_t v42 = (uint64_t *)(*(void *)(v30 + 48) + 16 * v37);
    uint64_t v43 = v42[1];
    uint64_t v111 = *v42;
    uint64_t v44 = *(void *)(v41 + 8 * v37);
    int64_t v45 = *(void *)(v44 + 16);
    uint64_t v126 = v44;
    uint64_t v112 = v43;
    if (v45) {
      break;
    }
    uint64_t v87 = v43;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
LABEL_55:
    uint64_t v88 = v110;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v136 = v88;
    unint64_t v91 = sub_10013C484(v111, v87);
    uint64_t v92 = v88[2];
    BOOL v93 = (v90 & 1) == 0;
    uint64_t v94 = v92 + v93;
    if (__OFADD__(v92, v93)) {
      goto LABEL_71;
    }
    char v95 = v90;
    if (v88[3] >= v94)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10009A5D0();
      }
    }
    else
    {
      sub_1000983F8(v94, isUniquelyReferenced_nonNull_native);
      unint64_t v96 = sub_10013C484(v111, v112);
      if ((v95 & 1) != (v97 & 1)) {
        goto LABEL_75;
      }
      unint64_t v91 = v96;
    }
    uint64_t v98 = v136;
    unint64_t v110 = v136;
    if (v95)
    {
      uint64_t v34 = v136[7];
      swift_bridgeObjectRelease();
      *(void *)(v34 + 8 * v91) = v33;
    }
    else
    {
      v136[(v91 >> 6) + 8] |= 1 << v91;
      unint64_t v99 = (void *)(v98[6] + 16 * v91);
      uint64_t v100 = v112;
      *unint64_t v99 = v111;
      v99[1] = v100;
      *(void *)(v98[7] + 8 * v91) = v33;
      uint64_t v101 = v98[2];
      BOOL v102 = __OFADD__(v101, 1);
      uint64_t v103 = v101 + 1;
      if (v102) {
        goto LABEL_72;
      }
      v98[2] = v103;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v30 = v107;
    uint64_t v32 = v134;
    uint64_t v33 = &_swiftEmptyArrayStorage;
    int64_t v31 = v109;
    unint64_t v29 = v108;
  }
  uint64_t v136 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1000682D4(0, v45, 0);
  unint64_t v47 = sub_100129FF0(v44);
  uint64_t v48 = 0;
  uint64_t v49 = v44 + 64;
  char v50 = *(unsigned char *)(v44 + 32);
  uint64_t v123 = v46;
  uint64_t v113 = v44 + 88;
  int64_t v124 = v45;
  uint64_t v125 = v44 + 64;
  while (1)
  {
    uint64_t v53 = v117;
    if ((v47 & 0x8000000000000000) != 0 || (uint64_t)v47 >= 1 << v50) {
      break;
    }
    if ((*(void *)(v49 + 8 * (v47 >> 6)) & (1 << v47)) == 0) {
      goto LABEL_66;
    }
    if (*(_DWORD *)(v44 + 36) != v46) {
      goto LABEL_67;
    }
    uint64_t v128 = v46;
    uint64_t v129 = 1 << v47;
    unint64_t v130 = v47 >> 6;
    uint64_t v127 = v48;
    unint64_t v54 = (char *)v117 + *(int *)(v32 + 48);
    uint64_t v55 = *(void *)(v44 + 56);
    uint64_t v56 = (uint64_t *)(*(void *)(v44 + 48) + 16 * v47);
    uint64_t v57 = *v56;
    uint64_t v58 = v56[1];
    uint64_t v59 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v60 = *(void *)(v59 - 8);
    uint64_t v61 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
    uint64_t v62 = *(void *)(v60 + 72);
    uint64_t v132 = v47;
    v61(v54, v55 + v62 * v47, v59);
    *uint64_t v53 = v57;
    v53[1] = v58;
    uint64_t v63 = (uint64_t)v115;
    *uint64_t v115 = v57;
    *(void *)(v63 + 8) = v58;
    v61((char *)(v63 + *(int *)(v134 + 48)), (unint64_t)v54, v59);
    uint64_t v64 = v118;
    uint64_t v65 = v120;
    char v66 = v116;
    sub_10009126C(v63, (uint64_t)v116);
    swift_bridgeObjectRetain_n();
    sub_100014BBC((uint64_t)v53, &qword_1001C1348);
    uint64_t v67 = v66[1];
    uint64_t v131 = *v66;
    CBOREncodedCBOR.value.getter();
    id v68 = v121;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*v114)(v65, v64);
    uint64_t v69 = type metadata accessor for AnyCodable();
    uint64_t v70 = (uint64_t)v68;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 0, 1, v69);
    uint64_t v71 = CBOREncodedCBOR.dataValue.getter();
    uint64_t v73 = v72;
    uint64_t v74 = v119;
    uint64_t v75 = v70;
    sub_100091370(v70, (uint64_t)v133 + *(int *)(v119 + 20));
    *unint64_t v133 = v131;
    uint64_t v76 = (uint64_t)v133;
    v133[1] = v67;
    uint64_t v77 = (uint64_t *)(v76 + *(int *)(v74 + 24));
    *uint64_t v77 = v71;
    v77[1] = v73;
    swift_bridgeObjectRetain();
    sub_100014BBC(v75, &qword_1001C12C8);
    sub_100014BBC((uint64_t)v66, &qword_1001C1348);
    uint64_t v33 = v136;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000682D4(0, v33[2] + 1, 1);
      uint64_t v33 = v136;
    }
    uint64_t v78 = v122;
    unint64_t v80 = v33[2];
    unint64_t v79 = v33[3];
    uint64_t v44 = v126;
    if (v80 >= v79 >> 1)
    {
      sub_1000682D4(v79 > 1, v80 + 1, 1);
      uint64_t v78 = v122;
      uint64_t v33 = v136;
    }
    v33[2] = v80 + 1;
    sub_1000913D8(v76, (uint64_t)v33+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v80);
    char v50 = *(unsigned char *)(v44 + 32);
    unint64_t v47 = 1 << v50;
    if (v132 >= 1 << v50) {
      goto LABEL_68;
    }
    uint64_t v49 = v125;
    unint64_t v81 = v130;
    uint64_t v82 = *(void *)(v125 + 8 * v130);
    if ((v82 & v129) == 0) {
      goto LABEL_69;
    }
    if (*(_DWORD *)(v44 + 36) != v128) {
      goto LABEL_70;
    }
    unint64_t v83 = v82 & (-2 << (v132 & 0x3F));
    if (v83)
    {
      unint64_t v47 = __clz(__rbit64(v83)) | v132 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v32 = v134;
      int64_t v51 = v124;
      uint64_t v52 = v127;
    }
    else
    {
      unint64_t v84 = v130 + 1;
      unint64_t v85 = (v47 + 63) >> 6;
      uint64_t v32 = v134;
      int64_t v51 = v124;
      uint64_t v52 = v127;
      if (v130 + 1 < v85)
      {
        unint64_t v86 = *(void *)(v125 + 8 * v84);
        if (!v86)
        {
          unint64_t v84 = v130 + 2;
          if (v130 + 2 >= v85) {
            goto LABEL_32;
          }
          unint64_t v86 = *(void *)(v125 + 8 * v84);
          if (!v86)
          {
            while (v85 - 3 != v81)
            {
              unint64_t v86 = *(void *)(v113 + 8 * v81++);
              if (v86)
              {
                unint64_t v84 = v81 + 2;
                goto LABEL_47;
              }
            }
            goto LABEL_32;
          }
        }
LABEL_47:
        unint64_t v47 = __clz(__rbit64(v86)) + (v84 << 6);
      }
    }
LABEL_32:
    uint64_t v48 = v52 + 1;
    uint64_t v46 = v123;
    if (v48 == v51)
    {
      uint64_t v87 = v112;
      goto LABEL_55;
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10008E6F4()
{
  uint64_t v0 = type metadata accessor for AnyCodable();
  sub_1000912D4(v0, qword_1001C4C90);
  sub_100091338(v0, (uint64_t)qword_1001C4C90);
  return AnyCodable.init(value:)();
}

uint64_t sub_10008E748(uint64_t a1)
{
  uint64_t v85 = sub_100006CC8(&qword_1001C1348);
  uint64_t v2 = __chkstk_darwin(v85);
  unint64_t v84 = (uint64_t *)((char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v83 = (uint64_t *)((char *)&v73 - v5);
  __chkstk_darwin(v4);
  uint64_t v82 = (char *)&v73 - v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v73 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v74 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v76 = a1;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v12 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    unint64_t v80 = v12;
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      uint64_t v15 = (v10 - 1) & v10;
      unint64_t v16 = v14 | (v11 << 6);
    }
    else
    {
      int64_t v17 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_72;
      }
      if (v17 >= v74) {
        goto LABEL_63;
      }
      unint64_t v18 = *(void *)(v73 + 8 * v17);
      ++v11;
      if (!v18)
      {
        int64_t v11 = v17 + 1;
        if (v17 + 1 >= v74) {
          goto LABEL_63;
        }
        unint64_t v18 = *(void *)(v73 + 8 * v11);
        if (!v18)
        {
          int64_t v11 = v17 + 2;
          if (v17 + 2 >= v74) {
            goto LABEL_63;
          }
          unint64_t v18 = *(void *)(v73 + 8 * v11);
          if (!v18)
          {
            int64_t v11 = v17 + 3;
            if (v17 + 3 >= v74) {
              goto LABEL_63;
            }
            unint64_t v18 = *(void *)(v73 + 8 * v11);
            if (!v18)
            {
              int64_t v11 = v17 + 4;
              if (v17 + 4 >= v74) {
                goto LABEL_63;
              }
              unint64_t v18 = *(void *)(v73 + 8 * v11);
              if (!v18)
              {
                int64_t v19 = v17 + 5;
                if (v19 >= v74) {
                  goto LABEL_63;
                }
                unint64_t v18 = *(void *)(v73 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v11 = v19 + 1;
                    if (__OFADD__(v19, 1)) {
                      goto LABEL_73;
                    }
                    if (v11 >= v74) {
                      break;
                    }
                    unint64_t v18 = *(void *)(v73 + 8 * v11);
                    ++v19;
                    if (v18) {
                      goto LABEL_25;
                    }
                  }
LABEL_63:
                  swift_release();
                  uint64_t v94 = 0;
                  unint64_t v95 = 0xE000000000000000;
                  _StringGuts.grow(_:)(52);
                  v70._object = (void *)0x800000010017E800;
                  v70._uint64_t countAndFlagsBits = 0xD000000000000032;
                  String.append(_:)(v70);
                  sub_100006CC8(&qword_1001C3C70);
                  v71._uint64_t countAndFlagsBits = Dictionary.description.getter();
                  String.append(_:)(v71);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return (uint64_t)v94;
                }
                int64_t v11 = v19;
              }
            }
          }
        }
      }
LABEL_25:
      uint64_t v15 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v11 << 6);
    }
    unint64_t v78 = v15;
    int64_t v79 = v11;
    uint64_t v20 = *(void *)(v76 + 56);
    uint64_t v21 = (uint64_t *)(*(void *)(v76 + 48) + 16 * v16);
    uint64_t v22 = v21[1];
    uint64_t v81 = *v21;
    uint64_t v23 = *(void *)(v20 + 8 * v16);
    int64_t v24 = *(void *)(v23 + 16);
    if (v24) {
      break;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v46 = &_swiftEmptyArrayStorage;
LABEL_52:
    uint64_t v56 = v80;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v94 = v56;
    unint64_t v59 = sub_10013C484(v81, v22);
    uint64_t v60 = v56[2];
    BOOL v61 = (v58 & 1) == 0;
    uint64_t v62 = v60 + v61;
    if (__OFADD__(v60, v61)) {
      goto LABEL_70;
    }
    char v63 = v58;
    if (v56[3] >= v62)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v12 = v94;
        if (v58) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10009AAA0();
        uint64_t v12 = v94;
        if (v63) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100098B18(v62, isUniquelyReferenced_nonNull_native);
      unint64_t v64 = sub_10013C484(v81, v22);
      if ((v63 & 1) != (v65 & 1)) {
        goto LABEL_74;
      }
      unint64_t v59 = v64;
      uint64_t v12 = v94;
      if (v63)
      {
LABEL_4:
        uint64_t v13 = v12[7];
        swift_bridgeObjectRelease();
        *(void *)(v13 + 8 * v59) = v46;
        goto LABEL_5;
      }
    }
    v12[(v59 >> 6) + 8] |= 1 << v59;
    char v66 = (void *)(v12[6] + 16 * v59);
    *char v66 = v81;
    v66[1] = v22;
    *(void *)(v12[7] + 8 * v59) = v46;
    uint64_t v67 = v12[2];
    BOOL v68 = __OFADD__(v67, 1);
    uint64_t v69 = v67 + 1;
    if (v68) {
      goto LABEL_71;
    }
    _OWORD v12[2] = v69;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v10 = v78;
    int64_t v11 = v79;
  }
  uint64_t v94 = &_swiftEmptyArrayStorage;
  uint64_t v77 = v22;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_100068310(0, v24, 0);
  uint64_t v26 = sub_100129FF0(v23);
  uint64_t v27 = 0;
  uint64_t v28 = v23 + 64;
  char v29 = *(unsigned char *)(v23 + 32);
  int64_t v86 = v24;
  uint64_t v87 = v25;
  uint64_t v75 = v23 + 88;
  uint64_t v88 = v23 + 64;
  uint64_t v89 = v23;
  while ((v26 & 0x8000000000000000) == 0 && v26 < 1 << v29)
  {
    if ((*(void *)(v28 + 8 * ((unint64_t)v26 >> 6)) & (1 << v26)) == 0) {
      goto LABEL_65;
    }
    if (*(_DWORD *)(v23 + 36) != v25) {
      goto LABEL_66;
    }
    uint64_t v91 = v25;
    uint64_t v92 = 1 << v26;
    unint64_t v93 = (unint64_t)v26 >> 6;
    uint64_t v90 = v27;
    uint64_t v32 = v85;
    uint64_t v33 = v82;
    uint64_t v34 = &v82[*(int *)(v85 + 48)];
    uint64_t v35 = *(void *)(v23 + 56);
    uint64_t v36 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v26);
    uint64_t v38 = *v36;
    uint64_t v37 = v36[1];
    uint64_t v39 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v41(v34, v35 + *(void *)(v40 + 72) * v26, v39);
    *uint64_t v33 = v38;
    v33[1] = v37;
    uint64_t v42 = (uint64_t)v83;
    *unint64_t v83 = v38;
    *(void *)(v42 + 8) = v37;
    v41((char *)(v42 + *(int *)(v32 + 48)), (uint64_t)v34, v39);
    uint64_t v43 = v84;
    sub_10009126C(v42, (uint64_t)v84);
    swift_bridgeObjectRetain_n();
    sub_100014BBC((uint64_t)v33, &qword_1001C1348);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    swift_bridgeObjectRetain();
    sub_100014BBC((uint64_t)v43, &qword_1001C1348);
    uint64_t v46 = v94;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100068310(0, v46[2] + 1, 1);
      uint64_t v46 = v94;
    }
    unint64_t v48 = v46[2];
    unint64_t v47 = v46[3];
    if (v48 >= v47 >> 1)
    {
      sub_100068310(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v94;
    }
    v46[2] = v48 + 1;
    uint64_t v49 = (char *)&v46[2 * v48];
    *((void *)v49 + 4) = v44;
    *((void *)v49 + 5) = v45;
    uint64_t v23 = v89;
    char v29 = *(unsigned char *)(v89 + 32);
    unint64_t v30 = 1 << v29;
    if (v26 >= 1 << v29) {
      goto LABEL_67;
    }
    uint64_t v28 = v88;
    unint64_t v50 = v93;
    uint64_t v51 = *(void *)(v88 + 8 * v93);
    if ((v51 & v92) == 0) {
      goto LABEL_68;
    }
    if (*(_DWORD *)(v89 + 36) != v91) {
      goto LABEL_69;
    }
    unint64_t v52 = v51 & (-2 << (v26 & 0x3F));
    if (v52)
    {
      unint64_t v30 = __clz(__rbit64(v52)) | v26 & 0xFFFFFFFFFFFFFFC0;
      int64_t v31 = v86;
    }
    else
    {
      unint64_t v53 = v93 + 1;
      unint64_t v54 = (v30 + 63) >> 6;
      int64_t v31 = v86;
      if (v93 + 1 < v54)
      {
        unint64_t v55 = *(void *)(v88 + 8 * v53);
        if (!v55)
        {
          unint64_t v53 = v93 + 2;
          if (v93 + 2 >= v54) {
            goto LABEL_29;
          }
          unint64_t v55 = *(void *)(v88 + 8 * v53);
          if (!v55)
          {
            while (v54 - 3 != v50)
            {
              unint64_t v55 = *(void *)(v75 + 8 * v50++);
              if (v55)
              {
                unint64_t v53 = v50 + 2;
                goto LABEL_44;
              }
            }
            goto LABEL_29;
          }
        }
LABEL_44:
        unint64_t v30 = __clz(__rbit64(v55)) + (v53 << 6);
      }
    }
LABEL_29:
    uint64_t v27 = v90 + 1;
    uint64_t v25 = v87;
    uint64_t v26 = v30;
    if (v90 + 1 == v31)
    {
      uint64_t v22 = v77;
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_10008EEC0()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  sub_100006CC8(&qword_1001C3C70);
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

uint64_t sub_10008EF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C12E8);
  CBOREncodedCBOR.value.getter();
  ISO18013IssuerSignedItem.elementValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = type metadata accessor for AnyCodable();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
  uint64_t v14 = CBOREncodedCBOR.dataValue.getter();
  uint64_t v16 = v15;
  uint64_t v17 = type metadata accessor for CredentialElement(0);
  sub_100091370((uint64_t)v12, (uint64_t)a3 + *(int *)(v17 + 20));
  *a3 = a1;
  a3[1] = a2;
  unint64_t v18 = (void *)((char *)a3 + *(int *)(v17 + 24));
  uint64_t *v18 = v14;
  v18[1] = v16;
  swift_bridgeObjectRetain();
  return sub_100014BBC((uint64_t)v12, &qword_1001C12C8);
}

uint64_t sub_10008F148(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100006CC8(&qword_1001C2A40);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    unint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    void *v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10008F3E4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v52 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v49 = (char *)&v43 - v12;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  uint64_t v48 = v11;
  sub_100006CC8(&qword_1001C2A38);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v14 = result;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0;
  uint64_t v46 = v50 + 32;
  uint64_t v47 = v50 + 16;
  uint64_t v17 = result + 64;
  uint64_t v18 = v48;
  uint64_t v45 = a4;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v51 = v16;
      unint64_t v20 = v19 | (v16 << 6);
    }
    else
    {
      uint64_t v21 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_40;
      }
      if (v21 >= v44) {
        return v14;
      }
      unint64_t v22 = v43[v21];
      uint64_t v23 = v16 + 1;
      if (!v22)
      {
        uint64_t v23 = v16 + 2;
        if (v16 + 2 >= v44) {
          return v14;
        }
        unint64_t v22 = v43[v23];
        if (!v22)
        {
          uint64_t v23 = v16 + 3;
          if (v16 + 3 >= v44) {
            return v14;
          }
          unint64_t v22 = v43[v23];
          if (!v22)
          {
            uint64_t v24 = v16 + 4;
            if (v16 + 4 >= v44) {
              return v14;
            }
            unint64_t v22 = v43[v24];
            if (!v22)
            {
              while (1)
              {
                uint64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v23 >= v44) {
                  return v14;
                }
                unint64_t v22 = v43[v23];
                ++v24;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v23 = v16 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v15 = (v22 - 1) & v22;
      uint64_t v51 = v23;
      unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    uint64_t v25 = a4[7];
    char v26 = (uint64_t *)(a4[6] + 16 * v20);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v49;
    uint64_t v30 = v50;
    uint64_t v31 = *(void *)(v50 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v49, v25 + v31 * v20, v18);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v32(v52, v29, v18);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v18 = v48;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v33) >> 6;
      uint64_t v18 = v48;
      do
      {
        if (++v35 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v39 = v35 == v38;
        if (v35 == v38) {
          unint64_t v35 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v35);
      }
      while (v40 == -1);
      unint64_t v36 = __clz(__rbit64(~v40)) + (v35 << 6);
    }
    *(void *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t v41 = (void *)(*(void *)(v14 + 48) + 16 * v36);
    void *v41 = v27;
    v41[1] = v28;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(*(void *)(v14 + 56) + v36 * v31, v52, v18);
    ++*(void *)(v14 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v45;
    uint64_t v16 = v51;
    if (!a3) {
      return v14;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10008F7A4(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v9 = type metadata accessor for ISO18013Package.Document();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
    swift_bridgeObjectRetain();
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10008F878(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v9 = sub_100006CC8(&qword_1001C12E8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
    swift_bridgeObjectRetain();
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_10008F950(uint64_t a1, void (*a2)(void, void, char *), uint64_t a3)
{
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v64 = sub_100006CC8(&qword_1001C1348);
  uint64_t v5 = __chkstk_darwin(v64);
  uint64_t v56 = (uint64_t *)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v55 = (uint64_t *)((char *)&v47 - v8);
  __chkstk_darwin(v7);
  unint64_t v54 = (char *)&v47 - v9;
  uint64_t v10 = type metadata accessor for CredentialElement(0);
  uint64_t v53 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = &_swiftEmptyArrayStorage;
  if (!v13) {
    return (unint64_t)v14;
  }
  unint64_t v15 = v12;
  uint64_t v47 = v3;
  char v65 = &_swiftEmptyArrayStorage;
  sub_1000682D4(0, v13, 0);
  unint64_t result = sub_100129FF0(a1);
  uint64_t v18 = 0;
  uint64_t v19 = a1 + 64;
  uint64_t v59 = a1 + 80;
  uint64_t v51 = (uint64_t)v15;
  uint64_t v52 = a1;
  int64_t v48 = v13;
  uint64_t v49 = v17;
  uint64_t v50 = a1 + 64;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v22 = result >> 6;
    if ((*(void *)(v19 + 8 * (result >> 6)) & (1 << result)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v17) {
      goto LABEL_26;
    }
    uint64_t v60 = v18;
    uint64_t v61 = 1 << result;
    uint64_t v23 = v54;
    uint64_t v62 = &v54[*(int *)(v64 + 48)];
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = (uint64_t *)(*(void *)(a1 + 48) + 16 * result);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    unint64_t v28 = result;
    uint64_t v29 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    uint64_t v32 = *(void *)(v30 + 72);
    int64_t v63 = v28;
    uint64_t v33 = v24 + v32 * v28;
    unint64_t v34 = v62;
    v31(v62, v33, v29);
    *uint64_t v23 = v27;
    v23[1] = v26;
    uint64_t v35 = (uint64_t)v55;
    *unint64_t v55 = v27;
    *(void *)(v35 + 8) = v26;
    uint64_t v36 = v64;
    v31((char *)(v35 + *(int *)(v64 + 48)), (uint64_t)v34, v29);
    char v37 = v56;
    sub_10009126C(v35, (uint64_t)v56);
    swift_bridgeObjectRetain_n();
    sub_100014BBC((uint64_t)v23, &qword_1001C1348);
    unint64_t v38 = (char *)v37 + *(int *)(v36 + 48);
    uint64_t v39 = v51;
    v57(*v37, v37[1], v38);
    sub_100014BBC((uint64_t)v37, &qword_1001C1348);
    uint64_t v14 = v65;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000682D4(0, v14[2] + 1, 1);
      uint64_t v14 = v65;
    }
    unint64_t v41 = v14[2];
    unint64_t v40 = v14[3];
    if (v41 >= v40 >> 1)
    {
      sub_1000682D4(v40 > 1, v41 + 1, 1);
      uint64_t v14 = v65;
    }
    v14[2] = v41 + 1;
    unint64_t result = sub_1000913D8(v39, (uint64_t)v14+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v41);
    a1 = v52;
    int64_t v20 = 1 << *(unsigned char *)(v52 + 32);
    if (v63 >= v20) {
      goto LABEL_27;
    }
    uint64_t v19 = v50;
    uint64_t v42 = *(void *)(v50 + 8 * v22);
    if ((v42 & v61) == 0) {
      goto LABEL_28;
    }
    LODWORD(v17) = v49;
    if (*(_DWORD *)(v52 + 36) != v49) {
      goto LABEL_29;
    }
    unint64_t v43 = v42 & (-2 << (v63 & 0x3F));
    if (v43)
    {
      int64_t v20 = __clz(__rbit64(v43)) | v63 & 0xFFFFFFFFFFFFFFC0;
      int64_t v21 = v48;
    }
    else
    {
      unint64_t v44 = v22 + 1;
      unint64_t v45 = (unint64_t)(v20 + 63) >> 6;
      int64_t v21 = v48;
      if (v22 + 1 < v45)
      {
        unint64_t v46 = *(void *)(v50 + 8 * v44);
        if (v46)
        {
LABEL_22:
          int64_t v20 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v22)
          {
            unint64_t v46 = *(void *)(v59 + 8 * v22++);
            if (v46)
            {
              unint64_t v44 = v22 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v18 = v60 + 1;
    unint64_t result = v20;
    if (v60 + 1 == v21) {
      return (unint64_t)v14;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10008FDB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v22 = (unint64_t *)result;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    while (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v6 << 6);
      if (*(void *)(a4 + 16)) {
        goto LABEL_4;
      }
    }
    BOOL v18 = __OFADD__(v6++, 1);
    if (v18)
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v6 >= v24) {
      return sub_10008F148(v22, a2, v23, a3);
    }
    unint64_t v19 = *(void *)(v7 + 8 * v6);
    if (!v19) {
      break;
    }
LABEL_18:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v6 << 6);
    if (*(void *)(a4 + 16))
    {
LABEL_4:
      uint64_t v11 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v17);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10013C484(v12, v13);
      char v15 = v14;
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      if (v15)
      {
        *(unint64_t *)((char *)v22 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        BOOL v18 = __OFADD__(v23++, 1);
        if (v18)
        {
          __break(1u);
          return sub_10008F148(v22, a2, v23, a3);
        }
      }
    }
  }
  int64_t v20 = v6 + 1;
  if (v6 + 1 >= v24) {
    return sub_10008F148(v22, a2, v23, a3);
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19) {
    goto LABEL_17;
  }
  int64_t v20 = v6 + 2;
  if (v6 + 2 >= v24) {
    return sub_10008F148(v22, a2, v23, a3);
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19) {
    goto LABEL_17;
  }
  int64_t v20 = v6 + 3;
  if (v6 + 3 >= v24) {
    return sub_10008F148(v22, a2, v23, a3);
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
LABEL_17:
    int64_t v6 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v6 >= v24) {
      return sub_10008F148(v22, a2, v23, a3);
    }
    unint64_t v19 = *(void *)(v7 + 8 * v6);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10008FFA4(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10008FDB0((uint64_t)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10008FDB0((uint64_t)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_100090160(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a2;
  uint64_t v47 = a1;
  uint64_t v57 = sub_100006CC8(&qword_1001C1348);
  __chkstk_darwin(v57);
  int64_t v63 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100006CC8(&qword_1001C12E8);
  uint64_t result = __chkstk_darwin(v62);
  uint64_t v61 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = 0;
  int64_t v14 = 0;
  uint64_t v58 = a3;
  uint64_t v17 = a3[8];
  unint64_t v16 = a3 + 8;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *((unsigned char *)v16 - 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  uint64_t v52 = v16;
  int64_t v53 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v55 = v12 + 16;
  uint64_t v56 = v12;
  unint64_t v54 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v49 = a4;
  while (1)
  {
    while (1)
    {
      if (v20)
      {
        uint64_t v21 = a5;
        uint64_t v59 = (v20 - 1) & v20;
        int64_t v60 = v14;
        unint64_t v22 = __clz(__rbit64(v20)) | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_45;
        }
        if (v23 >= v53) {
          return sub_10008F3E4(v47, v46, v48, v58);
        }
        unint64_t v24 = v52[v23];
        int64_t v25 = v14 + 1;
        if (!v24)
        {
          int64_t v25 = v14 + 2;
          if (v14 + 2 >= v53) {
            return sub_10008F3E4(v47, v46, v48, v58);
          }
          unint64_t v24 = v52[v25];
          if (!v24)
          {
            int64_t v25 = v14 + 3;
            if (v14 + 3 >= v53) {
              return sub_10008F3E4(v47, v46, v48, v58);
            }
            unint64_t v24 = v52[v25];
            if (!v24)
            {
              uint64_t v26 = v14 + 4;
              if (v14 + 4 >= v53) {
                return sub_10008F3E4(v47, v46, v48, v58);
              }
              unint64_t v24 = v52[v26];
              if (!v24)
              {
                while (1)
                {
                  int64_t v25 = v26 + 1;
                  if (__OFADD__(v26, 1)) {
                    goto LABEL_46;
                  }
                  if (v25 >= v53) {
                    return sub_10008F3E4(v47, v46, v48, v58);
                  }
                  unint64_t v24 = v52[v25];
                  ++v26;
                  if (v24) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v25 = v14 + 4;
            }
          }
        }
LABEL_21:
        uint64_t v21 = a5;
        uint64_t v59 = (v24 - 1) & v24;
        int64_t v60 = v25;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      uint64_t v27 = (uint64_t *)(v58[6] + 16 * v22);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
      uint64_t v32 = v61;
      uint64_t v31 = v62;
      v30(v61, v58[7] + *(void *)(v56 + 72) * v22, v62);
      uint64_t v33 = v63;
      *(void *)int64_t v63 = v29;
      *((void *)v33 + 1) = v28;
      v30(&v33[*(int *)(v57 + 48)], (unint64_t)v32, v31);
      uint64_t v34 = *(void *)(a4 + 16);
      swift_bridgeObjectRetain_n();
      a5 = v21;
      if (v34) {
        break;
      }
LABEL_5:
      sub_100014BBC((uint64_t)v63, &qword_1001C1348);
      (*v54)(v61, v62);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v20 = v59;
      int64_t v14 = v60;
    }
    uint64_t v35 = v51;
    swift_bridgeObjectRetain();
    unint64_t v36 = sub_10013C484(v21, v35);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    unint64_t v38 = *(void **)(*(void *)(a4 + 56) + 8 * v36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v39 = v38[2];
    if (!v39) {
      goto LABEL_39;
    }
    if (v38[4] != v29 || v38[5] != v28)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        break;
      }
    }
LABEL_40:
    swift_bridgeObjectRelease();
    sub_100014BBC((uint64_t)v63, &qword_1001C1348);
    (*v54)(v61, v62);
    uint64_t result = swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v47 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    a4 = v49;
    BOOL v45 = __OFADD__(v48++, 1);
    a5 = v50;
    unint64_t v20 = v59;
    int64_t v14 = v60;
    if (v45)
    {
      __break(1u);
      return sub_10008F3E4(v47, v46, v48, v58);
    }
  }
  if (v39 == 1)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    a4 = v49;
    a5 = v50;
    goto LABEL_5;
  }
  unint64_t v41 = v38 + 7;
  uint64_t v42 = 1;
  while (1)
  {
    uint64_t v43 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (*(v41 - 1) == v29 && *v41 == v28) {
      goto LABEL_40;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_40;
    }
    v41 += 2;
    ++v42;
    if (v43 == v39) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_1000905D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v9 = *(unsigned char *)(a1 + 32);
  unsigned int v10 = v9 & 0x3F;
  unint64_t v11 = (unint64_t)((1 << v9) + 63) >> 6;
  size_t v12 = 8 * v11;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v10 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v17 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100090160((unint64_t *)((char *)&v17 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0)), v11, (void *)a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = (void *)swift_slowAlloc();
    bzero(v15, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100090160((unint64_t *)v15, v11, (void *)a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100090808(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v38)
  {
    if (v6)
    {
      uint64_t v37 = (v6 - 1) & v6;
      int64_t v38 = i;
      unint64_t v9 = __clz(__rbit64(v6)) | (i << 6);
    }
    else
    {
      BOOL v10 = __OFADD__(i, 1);
      int64_t v11 = i + 1;
      if (v10) {
        goto LABEL_39;
      }
      if (v11 >= v34)
      {
LABEL_36:
        swift_release();
        return (uint64_t)a1;
      }
      unint64_t v12 = *(void *)(v33 + 8 * v11);
      if (!v12)
      {
        int64_t v13 = v11 + 1;
        if (v11 + 1 >= v34) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v33 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v11 + 2;
          if (v11 + 2 >= v34) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v33 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v11 + 3;
            if (v11 + 3 >= v34) {
              goto LABEL_36;
            }
            unint64_t v12 = *(void *)(v33 + 8 * v13);
            if (!v12)
            {
              int64_t v13 = v11 + 4;
              if (v11 + 4 >= v34) {
                goto LABEL_36;
              }
              unint64_t v12 = *(void *)(v33 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  int64_t v11 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    goto LABEL_40;
                  }
                  if (v11 >= v34) {
                    goto LABEL_36;
                  }
                  unint64_t v12 = *(void *)(v33 + 8 * v11);
                  ++v13;
                  if (v12) {
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }
        int64_t v11 = v13;
      }
LABEL_20:
      uint64_t v37 = (v12 - 1) & v12;
      int64_t v38 = v11;
      unint64_t v9 = __clz(__rbit64(v12)) + (v11 << 6);
    }
    uint64_t v14 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v9);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(a2 + 56) + 8 * v9);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1000905D0(v17, a3, v16, v15);
    swift_bridgeObjectRelease();
    unint64_t v19 = sub_10008F950(v18, (void (*)(void, void, char *))sub_10009143C, 0);
    swift_release();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v22 = sub_10013C484(v16, v15);
    uint64_t v23 = a1[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    char v26 = v21;
    if (a1[3] >= v25)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v21) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10009A5D0();
        if (v26) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_1000983F8(v25, isUniquelyReferenced_nonNull_native);
      unint64_t v27 = sub_10013C484(v16, v15);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_41;
      }
      unint64_t v22 = v27;
      if (v26)
      {
LABEL_4:
        uint64_t v8 = a1[7];
        swift_bridgeObjectRelease();
        *(void *)(v8 + 8 * v22) = v19;
        goto LABEL_5;
      }
    }
    a1[(v22 >> 6) + 8] |= 1 << v22;
    uint64_t v29 = (uint64_t *)(a1[6] + 16 * v22);
    *uint64_t v29 = v16;
    v29[1] = v15;
    *(void *)(a1[7] + 8 * v22) = v19;
    uint64_t v30 = a1[2];
    BOOL v10 = __OFADD__(v30, 1);
    uint64_t v31 = v30 + 1;
    if (v10) {
      goto LABEL_38;
    }
    a1[2] = v31;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v6 = v37;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100090B78(uint64_t a1)
{
  uint64_t v86 = sub_100006CC8(&qword_1001C1348);
  uint64_t v2 = __chkstk_darwin(v86);
  uint64_t v85 = (uint64_t *)((char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v84 = (uint64_t *)((char *)&v73 - v5);
  __chkstk_darwin(v4);
  unint64_t v83 = (char *)&v73 - v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v74 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v75 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v77 = a1;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v81 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      uint64_t v14 = (v10 - 1) & v10;
      unint64_t v15 = v13 | (v11 << 6);
    }
    else
    {
      int64_t v16 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_70;
      }
      if (v16 >= v75) {
        goto LABEL_61;
      }
      unint64_t v17 = *(void *)(v74 + 8 * v16);
      ++v11;
      if (!v17)
      {
        int64_t v11 = v16 + 1;
        if (v16 + 1 >= v75) {
          goto LABEL_61;
        }
        unint64_t v17 = *(void *)(v74 + 8 * v11);
        if (!v17)
        {
          int64_t v11 = v16 + 2;
          if (v16 + 2 >= v75) {
            goto LABEL_61;
          }
          unint64_t v17 = *(void *)(v74 + 8 * v11);
          if (!v17)
          {
            int64_t v11 = v16 + 3;
            if (v16 + 3 >= v75) {
              goto LABEL_61;
            }
            unint64_t v17 = *(void *)(v74 + 8 * v11);
            if (!v17)
            {
              int64_t v11 = v16 + 4;
              if (v16 + 4 >= v75) {
                goto LABEL_61;
              }
              unint64_t v17 = *(void *)(v74 + 8 * v11);
              if (!v17)
              {
                int64_t v18 = v16 + 5;
                if (v18 >= v75) {
                  goto LABEL_61;
                }
                unint64_t v17 = *(void *)(v74 + 8 * v18);
                if (!v17)
                {
                  while (1)
                  {
                    int64_t v11 = v18 + 1;
                    if (__OFADD__(v18, 1)) {
                      goto LABEL_71;
                    }
                    if (v11 >= v75) {
                      break;
                    }
                    unint64_t v17 = *(void *)(v74 + 8 * v11);
                    ++v18;
                    if (v17) {
                      goto LABEL_25;
                    }
                  }
LABEL_61:
                  swift_release();
                  return (uint64_t)v81;
                }
                int64_t v11 = v18;
              }
            }
          }
        }
      }
LABEL_25:
      uint64_t v14 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
    }
    unint64_t v79 = v14;
    int64_t v80 = v11;
    uint64_t v19 = *(void *)(v77 + 56);
    unint64_t v20 = (uint64_t *)(*(void *)(v77 + 48) + 16 * v15);
    uint64_t v21 = v20[1];
    uint64_t v82 = *v20;
    uint64_t v22 = *(void *)(v19 + 8 * v15);
    int64_t v23 = *(void *)(v22 + 16);
    uint64_t v90 = v22;
    if (v23) {
      break;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v46 = _swiftEmptyArrayStorage;
LABEL_52:
    uint64_t v57 = v81;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v96 = v57;
    unint64_t v60 = sub_10013C484(v82, v21);
    uint64_t v61 = v57[2];
    BOOL v62 = (v59 & 1) == 0;
    uint64_t v63 = v61 + v62;
    if (__OFADD__(v61, v62)) {
      goto LABEL_68;
    }
    char v64 = v59;
    if (v57[3] >= v63)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10009AAA0();
      }
    }
    else
    {
      sub_100098B18(v63, isUniquelyReferenced_nonNull_native);
      unint64_t v65 = sub_10013C484(v82, v21);
      if ((v64 & 1) != (v66 & 1)) {
        goto LABEL_72;
      }
      unint64_t v60 = v65;
    }
    uint64_t v67 = v96;
    uint64_t v81 = v96;
    if (v64)
    {
      uint64_t v12 = v96[7];
      swift_bridgeObjectRelease();
      *(void *)(v12 + 8 * v60) = v46;
    }
    else
    {
      v96[(v60 >> 6) + 8] |= 1 << v60;
      BOOL v68 = (void *)(v67[6] + 16 * v60);
      *BOOL v68 = v82;
      v68[1] = v21;
      *(void *)(v67[7] + 8 * v60) = v46;
      uint64_t v69 = v67[2];
      BOOL v70 = __OFADD__(v69, 1);
      uint64_t v71 = v69 + 1;
      if (v70) {
        goto LABEL_69;
      }
      v67[2] = v71;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v10 = v79;
    int64_t v11 = v80;
  }
  unint64_t v96 = _swiftEmptyArrayStorage;
  uint64_t v78 = v21;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_100068310(0, v23, 0);
  unint64_t v25 = sub_100129FF0(v22);
  uint64_t v26 = 0;
  uint64_t v27 = v22 + 64;
  char v28 = *(unsigned char *)(v22 + 32);
  int64_t v87 = v23;
  uint64_t v88 = v24;
  uint64_t v76 = v22 + 88;
  uint64_t v89 = v22 + 64;
  while ((v25 & 0x8000000000000000) == 0 && (uint64_t)v25 < 1 << v28)
  {
    if ((*(void *)(v27 + 8 * (v25 >> 6)) & (1 << v25)) == 0) {
      goto LABEL_63;
    }
    if (*(_DWORD *)(v22 + 36) != v24) {
      goto LABEL_64;
    }
    uint64_t v92 = v24;
    uint64_t v93 = 1 << v25;
    unint64_t v94 = v25 >> 6;
    uint64_t v91 = v26;
    uint64_t v31 = v86;
    uint64_t v32 = v83;
    uint64_t v33 = &v83[*(int *)(v86 + 48)];
    uint64_t v34 = *(void *)(v22 + 56);
    uint64_t v35 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v25);
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    uint64_t v38 = sub_100006CC8(&qword_1001C12E8);
    uint64_t v39 = *(void *)(v38 - 8);
    unint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
    uint64_t v41 = *(void *)(v39 + 72);
    unint64_t v95 = v25;
    v40(v33, v34 + v41 * v25, v38);
    *uint64_t v32 = v37;
    v32[1] = v36;
    uint64_t v42 = (uint64_t)v84;
    *unint64_t v84 = v37;
    *(void *)(v42 + 8) = v36;
    v40((char *)(v42 + *(int *)(v31 + 48)), (unint64_t)v33, v38);
    uint64_t v43 = v85;
    sub_10009126C(v42, (uint64_t)v85);
    swift_bridgeObjectRetain_n();
    sub_100014BBC((uint64_t)v32, &qword_1001C1348);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    swift_bridgeObjectRetain();
    sub_100014BBC((uint64_t)v43, &qword_1001C1348);
    uint64_t v46 = v96;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100068310(0, v46[2] + 1, 1);
      uint64_t v46 = v96;
    }
    unint64_t v48 = v46[2];
    unint64_t v47 = v46[3];
    uint64_t v22 = v90;
    uint64_t v49 = v95;
    if (v48 >= v47 >> 1)
    {
      sub_100068310(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v96;
    }
    v46[2] = v48 + 1;
    uint64_t v50 = &v46[2 * v48];
    v50[4] = v44;
    v50[5] = v45;
    char v28 = *(unsigned char *)(v22 + 32);
    unint64_t v29 = 1 << v28;
    if (v49 >= 1 << v28) {
      goto LABEL_65;
    }
    uint64_t v27 = v89;
    unint64_t v51 = v94;
    uint64_t v52 = *(void *)(v89 + 8 * v94);
    if ((v52 & v93) == 0) {
      goto LABEL_66;
    }
    if (*(_DWORD *)(v22 + 36) != v92) {
      goto LABEL_67;
    }
    unint64_t v53 = v52 & (-2 << (v49 & 0x3F));
    if (v53)
    {
      unint64_t v29 = __clz(__rbit64(v53)) | v49 & 0xFFFFFFFFFFFFFFC0;
      int64_t v30 = v87;
    }
    else
    {
      unint64_t v54 = v94 + 1;
      unint64_t v55 = (v29 + 63) >> 6;
      int64_t v30 = v87;
      if (v94 + 1 < v55)
      {
        unint64_t v56 = *(void *)(v89 + 8 * v54);
        if (!v56)
        {
          unint64_t v54 = v94 + 2;
          if (v94 + 2 >= v55) {
            goto LABEL_29;
          }
          unint64_t v56 = *(void *)(v89 + 8 * v54);
          if (!v56)
          {
            while (v55 - 3 != v51)
            {
              unint64_t v56 = *(void *)(v76 + 8 * v51++);
              if (v56)
              {
                unint64_t v54 = v51 + 2;
                goto LABEL_44;
              }
            }
            goto LABEL_29;
          }
        }
LABEL_44:
        unint64_t v29 = __clz(__rbit64(v56)) + (v54 << 6);
      }
    }
LABEL_29:
    uint64_t v26 = v91 + 1;
    uint64_t v24 = v88;
    unint64_t v25 = v29;
    if (v91 + 1 == v30)
    {
      uint64_t v21 = v78;
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10009126C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C1348);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000912D4(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100091338(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100091370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C12C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000913D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CredentialElement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  sub_100006CC8(&qword_1001C14B8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileAssetType();
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v4[17] = v8;
  v4[18] = *(void *)(v8 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v4[25] = v9;
  v4[26] = *(void *)(v9 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  return _swift_task_switch(sub_100091758, 0, 0);
}

uint64_t sub_100091758()
{
  v0[34] = os_transaction_create();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[35] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009182C;
  uint64_t v2 = v0[6];
  return sub_1000931E8(2, 0, v2);
}

uint64_t sub_10009182C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100092AD0;
  }
  else
  {
    *(unsigned char *)(v4 + 336) = a1 & 1;
    uint64_t v5 = sub_100091980;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100091980()
{
  if (*(unsigned char *)(v0 + 336) == 1)
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Proceeding with fetching MobileAssets", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 112);

    unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    *(void *)(v0 + 296) = v10;
    *(void *)(v0 + 304) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v10(v4, v5);
    uint64_t v11 = type metadata accessor for MobileAssetManager();
    swift_allocObject();
    *(void *)(v0 + 16) = MobileAssetManager.init()();
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for MobileAssetType.coreidvassets(_:), v9);
    unint64_t v12 = sub_10004AEF4((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 312) = v12;
    unint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v13;
    *unint64_t v13 = v0;
    v13[1] = sub_100091DE4;
    uint64_t v14 = *(void *)(v0 + 192);
    uint64_t v15 = *(void *)(v0 + 128);
    return MobileAssetManagerProtocol.retrieveMostRecentAssetByCreationDate(assetType:filters:)(v14, v15, v12, v11, &protocol witness table for MobileAssetManager);
  }
  else
  {
    defaultLogger()();
    int64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      int64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "no mDL, skipping MobileAssets", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v21 = *(void *)(v0 + 208);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v22(v19, v20);
    defaultLogger()();
    int64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finished MobileAsset refresh", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 200);

    v22(v26, v27);
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
}

uint64_t sub_100091DE4()
{
  os_log_type_t v2 = (void *)*v1;
  v2[41] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[16];
  uint64_t v4 = v2[15];
  uint64_t v5 = v2[14];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0) {
    uint64_t v6 = sub_100092E5C;
  }
  else {
    uint64_t v6 = sub_100091FB0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100091FB0()
{
  uint64_t v81 = v0;
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  defaultLogger()();
  int64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v75(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v71 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v67 = v0[25];
    uint64_t v68 = v0[32];
    uint64_t v7 = v0[23];
    uint64_t v8 = v0[18];
    uint64_t v65 = v0[17];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = URL.debugDescription.getter();
    v0[5] = sub_10004C3A4(v10, v11, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v7, v65);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "MobileAsset available at directory %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v71(v68, v67);
  }
  else
  {
    unint64_t v13 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v14 = v0[32];
    uint64_t v15 = v0[25];
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
    v12(v0[23], v0[17]);

    v13(v14, v15);
  }
  uint64_t v16 = v0[41];
  URL.appendingPathComponent(_:)();
  uint64_t v17 = Data.init(contentsOf:options:)();
  if (v16)
  {
    uint64_t v19 = v0[24];
    uint64_t v20 = v0[17];
    v12(v0[22], v20);
    v12(v19, v20);
LABEL_7:
    uint64_t v24 = v0[26];
    uint64_t v23 = v0[27];
    uint64_t v25 = v0[25];
    uint64_t v27 = v0[11];
    uint64_t v26 = v0[12];
    uint64_t v28 = v0[10];
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.mobileAssetRefreshFailure(_:), v0[7]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v26, v28);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v30(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    swift_errorRelease();
    goto LABEL_8;
  }
  uint64_t v21 = v17;
  unint64_t v22 = v18;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for CoreIDVAsset();
  sub_10003E0C0(&qword_1001C14D0, (void (*)(uint64_t))&type metadata accessor for CoreIDVAsset);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  swift_release();
  id v38 = [self defaultManager];
  uint64_t v39 = 1;
  id v40 = [v38 URLsForDirectory:5 inDomains:1];
  uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v74 = v38;
  if (*(void *)(v41 + 16))
  {
    uint64_t v42 = *(unsigned __int8 *)(v0[18] + 80);
    v75(v0[13], v41 + ((v42 + 32) & ~v42), v0[17]);
    uint64_t v39 = 0;
  }
  uint64_t v44 = v0[17];
  uint64_t v43 = v0[18];
  uint64_t v45 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v45, v39, 1, v44);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v45, 1, v44) == 1)
  {
    uint64_t v46 = v0[24];
    uint64_t v47 = v0[22];
    uint64_t v48 = v0[17];
    uint64_t v49 = v0[13];

    sub_1000035EC(v21, v22);
    v12(v47, v48);
    v12(v46, v48);
    sub_100096220(v49);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[18] + 32))(v0[21], v0[13], v0[17]);
    URL.appendingPathComponent(_:isDirectory:)();
    URL._bridgeToObjectiveC()(v50);
    uint64_t v52 = v51;
    v0[4] = 0;
    unsigned int v53 = [v74 createDirectoryAtURL:v51 withIntermediateDirectories:1 attributes:0 error:v0 + 4];

    unint64_t v54 = (void *)v0[4];
    if (!v53)
    {
      uint64_t v76 = v0[22];
      uint64_t v78 = v0[24];
      uint64_t v69 = v0[20];
      uint64_t v72 = v0[21];
      uint64_t v56 = v0[17];
      id v57 = v54;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_1000035EC(v21, v22);
      v12(v69, v56);
      v12(v72, v56);
      v12(v76, v56);
      v12(v78, v56);
      goto LABEL_7;
    }
    id v55 = v54;
    URL.appendingPathComponent(_:isDirectory:)();
    Data.write(to:options:)();
    defaultLogger()();
    uint64_t v58 = Logger.logObject.getter();
    uint64_t v59 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v58, (os_log_type_t)v59))
    {
      unint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v59, "Copied Asset to local cache", v60, 2u);
      swift_slowDealloc();
    }
    char v66 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v61 = v0[31];
    uint64_t v62 = v0[25];
    uint64_t v77 = v0[22];
    uint64_t v79 = v0[24];
    uint64_t v63 = v0[19];
    uint64_t v70 = v0[20];
    uint64_t v73 = v0[21];
    uint64_t v64 = v0[17];

    sub_1000035EC(v21, v22);
    v66(v61, v62);
    v12(v63, v64);
    v12(v70, v64);
    v12(v73, v64);
    v12(v77, v64);
    v12(v79, v64);
  }
  uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[37];
LABEL_8:
  defaultLogger()();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Finished MobileAsset refresh", v33, 2u);
    swift_slowDealloc();
  }
  uint64_t v34 = v0[28];
  uint64_t v35 = v0[25];

  v30(v34, v35);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_100092AD0()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.mobileAssetRefreshFailure(_:), v0[7]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_errorRelease();
  defaultLogger()();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finished MobileAsset refresh", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = v0[28];
  uint64_t v13 = v0[25];

  v8(v12, v13);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100092E5C()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.mobileAssetRefreshFailure(_:), v0[7]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_errorRelease();
  defaultLogger()();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finished MobileAsset refresh", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = v0[28];
  uint64_t v13 = v0[25];

  v8(v12, v13);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000931E8(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 325) = a2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = a3;
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  *(void *)(v3 + 136) = v4;
  *(void *)(v3 + 144) = *(void *)(v4 - 8);
  *(void *)(v3 + 152) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FeatureFlagProvider();
  *(void *)(v3 + 160) = v5;
  *(void *)(v3 + 168) = *(void *)(v5 - 8);
  *(void *)(v3 + 176) = swift_task_alloc();
  *(void *)(v3 + 184) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v3 + 192) = v6;
  *(void *)(v3 + 200) = *(void *)(v6 - 8);
  *(void *)(v3 + 208) = swift_task_alloc();
  *(void *)(v3 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_100093384, 0, 0);
}

uint64_t sub_100093384()
{
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x800000010017E960;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "internal setting to force credential present", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v9 = *(void *)(v0 + 200);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v10(1);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v24 = *(void *)(v0 + 152);
    uint64_t v25 = *(void *)(v0 + 136);
    *(unsigned char *)(v0 + 324) = 0;
    *(void *)(v0 + 40) = &type metadata for CredentialDecryptionKeyIdentifierProvider;
    *(void *)(v0 + 48) = &off_1001B3EC8;
    type metadata accessor for PayloadProcessorBuilder();
    uint64_t v23 = swift_allocObject();
    swift_retain();
    unint64_t v18 = sub_100096070();
    FeatureFlagProvider.init()();
    sub_100096280(v0 + 16, v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
    *(void *)(v0 + 224) = sub_1000962DC((uint64_t)&off_1001B38D8, v17, 0, v0 + 56, v23, (uint64_t)v18, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
    sub_100085E70(v0 + 16);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v24, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v25);
    uint64_t v19 = ISO18013KnownDocTypes.rawValue.getter();
    uint64_t v21 = v20;
    *(void *)(v0 + 232) = v20;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v24, v25);
    unint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v22;
    *unint64_t v22 = v0;
    v22[1] = sub_1000936D4;
    return sub_1000ABA10((uint64_t)&off_1001B38D8, v19, v21);
  }
}

uint64_t sub_1000936D4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 248) = a1;
  *(void *)(v3 + 256) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_100093EC8;
  }
  else {
    uint64_t v4 = sub_100093808;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100093808()
{
  uint64_t v1 = (unsigned char *)(v0 + 324);
  uint64_t v2 = *(void *)(*(void *)(v0 + 248) + 16);
  swift_bridgeObjectRetain();
  if (v2 && (unint64_t v3 = sub_10013C484(*(uint64_t *)"identity", *(uint64_t *)""), (v4 & 1) != 0))
  {
    char v5 = *(unsigned char *)(v0 + 325);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(v0 + 248) + 56) + 8 * v3);
    *(void *)(v0 + 264) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      *uint64_t v1 = 1;
      goto LABEL_10;
    }
    uint64_t v7 = *(void *)(v6 + 16);
    *(void *)(v0 + 272) = v7;
    if (v7)
    {
      *(void *)(v0 + 280) = 0;
      uint64_t v8 = *(void *)(v0 + 264);
      uint64_t v9 = *(void *)(v8 + 40);
      *(void *)(v0 + 288) = v9;
      uint64_t v10 = *(void *)(v8 + 32);
      swift_bridgeObjectRetain();
      unint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v11;
      *unint64_t v11 = v0;
      v11[1] = sub_100093AE8;
      return sub_1000AC2A0(v10, v9);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_10:
  defaultLogger()();
  int v13 = *v1;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109120;
    *(_DWORD *)(v0 + 320) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "hasDriversLicense = %{BOOL}d", v16, 8u);
    swift_slowDealloc();
  }
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v19 = *(void *)(v0 + 192);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_beginAccess();
  uint64_t v20 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v20);
}

uint64_t sub_100093AE8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 304) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    char v5 = sub_100093F74;
  }
  else
  {
    *(void *)(v4 + 312) = a1;
    char v5 = sub_100093C40;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100093C40()
{
  uint64_t v1 = *(void **)(v0 + 312);
  id v2 = *(id *)(v0 + 120);
  id v3 = [v1 credentialState];

  if (v3 == v2)
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v0 + 324) = 1;
LABEL_5:
    defaultLogger()();
    int v5 = *(unsigned __int8 *)(v0 + 324);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67109120;
      *(_DWORD *)(v0 + 320) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "hasDriversLicense = %{BOOL}d", v8, 8u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v11 = *(void *)(v0 + 192);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_beginAccess();
    uint64_t v12 = *(unsigned __int8 *)(v0 + 324);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v13(v12);
  }
  uint64_t v4 = *(void *)(v0 + 280) + 1;
  if (v4 == *(void *)(v0 + 272))
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  *(void *)(v0 + 280) = v4;
  uint64_t v15 = *(void *)(v0 + 264) + 16 * v4;
  uint64_t v16 = *(void *)(v15 + 40);
  *(void *)(v0 + 288) = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v18;
  void *v18 = v0;
  v18[1] = sub_100093AE8;
  return sub_1000AC2A0(v17, v16);
}

uint64_t sub_100093EC8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100093F74()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100094020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v4[19] = v6;
  v4[20] = *(void *)(v6 - 8);
  v4[21] = swift_task_alloc();
  sub_100006CC8(&qword_1001C14B8);
  v4[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v4[23] = v7;
  v4[24] = *(void *)(v7 - 8);
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MobileAssetType();
  v4[28] = v8;
  v4[29] = *(void *)(v8 - 8);
  v4[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v4[31] = v9;
  v4[32] = *(void *)(v9 - 8);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  return _swift_task_switch(sub_10009432C, 0, 0);
}

uint64_t sub_10009432C()
{
  v0[42] = os_transaction_create();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[43] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100094400;
  uint64_t v2 = v0[15];
  return sub_1000931E8(0, 1, v2);
}

uint64_t sub_100094400(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 352) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100095384;
  }
  else
  {
    *(unsigned char *)(v4 + 392) = a1 & 1;
    uint64_t v5 = sub_100094554;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100094554()
{
  if (*(unsigned char *)(v0 + 392))
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "skipping clearing as we still have mDL ", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void *)(v0 + 304);
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v7(v4, v5);
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Finished clear Cached Assets", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 248);

    v7(v11, v12);
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    defaultLogger()();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Proceeding with clearing Cached MobileAssets", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v19 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 232);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 224);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    *(void *)(v0 + 360) = v24;
    *(void *)(v0 + 368) = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v24(v18, v19);
    uint64_t v25 = type metadata accessor for MobileAssetManager();
    swift_allocObject();
    *(void *)(v0 + 104) = MobileAssetManager.init()();
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for MobileAssetType.coreidvassets(_:), v23);
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_10009498C;
    uint64_t v27 = *(void *)(v0 + 240);
    return MobileAssetManagerProtocol.evictAssets(type:)(v27, v25, &protocol witness table for MobileAssetManager);
  }
}

uint64_t sub_10009498C()
{
  os_log_type_t v2 = (void *)*v1;
  v2[48] = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[29] + 8))(v2[30], v2[28]);
  swift_release();
  if (v0) {
    uint64_t v3 = sub_1000956FC;
  }
  else {
    uint64_t v3 = sub_100094B30;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100094B30()
{
  uint64_t v72 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Purged MobileAssets", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[45];
  uint64_t v5 = v0[40];
  uint64_t v6 = v0[31];

  v4(v5, v6);
  id v7 = [self defaultManager];
  uint64_t v8 = 1;
  id v9 = [v7 URLsForDirectory:5 inDomains:1];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v10 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[24] + 16))(v0[22], v10 + ((*(unsigned __int8 *)(v0[24] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[24] + 80)), v0[23]);
    uint64_t v8 = 0;
  }
  uint64_t v11 = v0[23];
  uint64_t v12 = v0[24];
  uint64_t v13 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v13, v8, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
  {
    uint64_t v14 = v0[22];

    sub_100096220(v14);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[24] + 32))(v0[27], v0[22], v0[23]);
    URL.appendingPathComponent(_:)();
    if (URL.isFileOnDisk.getter())
    {
      URL._bridgeToObjectiveC()(v15);
      uint64_t v17 = v16;
      v0[9] = 0;
      unsigned int v18 = [v7 removeItemAtURL:v16 error:v0 + 9];

      uint64_t v19 = (void *)v0[9];
      if (v18)
      {
        uint64_t v21 = v0[25];
        uint64_t v20 = v0[26];
        uint64_t v22 = v0[23];
        uint64_t v23 = v0[24];
        id v24 = v19;
        defaultLogger()();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v20, v22);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t type = static os_log_type_t.info.getter();
        BOOL v26 = os_log_type_enabled(v25, type);
        uint64_t v27 = (void (*)(uint64_t, uint64_t))v0[45];
        uint64_t v66 = v0[31];
        uint64_t v68 = v0[39];
        uint64_t v28 = v0[26];
        uint64_t v70 = v0[27];
        uint64_t v30 = v0[24];
        uint64_t v29 = v0[25];
        uint64_t v31 = v0[23];
        if (v26)
        {
          os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
          v71[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v32 = 136315138;
          uint64_t v33 = URL.debugDescription.getter();
          v0[11] = sub_10004C3A4(v33, v34, v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
          v35(v29, v31);
          _os_log_impl((void *)&_mh_execute_header, v25, type, "Removed cached file at %s", v32, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v27(v68, v66);
          v35(v28, v31);
          v35(v70, v31);
        }
        else
        {

          uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
          v56(v29, v31);
          v27(v68, v66);
          v56(v28, v31);
          v56(v70, v31);
        }
      }
      else
      {
        uint64_t v42 = v0[26];
        uint64_t v41 = v0[27];
        uint64_t v43 = v0[23];
        uint64_t v44 = v0[24];
        id v45 = v19;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v46(v42, v43);
        v46(v41, v43);
        defaultLogger()();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.info.getter();
        BOOL v49 = os_log_type_enabled(v47, v48);
        uint64_t v50 = (void (*)(uint64_t, uint64_t))v0[45];
        uint64_t v51 = v0[33];
        uint64_t v52 = v0[31];
        if (v49)
        {
          uint64_t v69 = (void (*)(uint64_t, uint64_t))v0[45];
          uint64_t v67 = v0[31];
          unsigned int v53 = (uint8_t *)swift_slowAlloc();
          v71[0] = swift_slowAlloc();
          *(_DWORD *)unsigned int v53 = 136315138;
          swift_getErrorValue();
          uint64_t v54 = Error.localizedDescription.getter();
          v0[10] = sub_10004C3A4(v54, v55, v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Ignoring error removing cached file: %s", v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          v69(v51, v67);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          v50(v51, v52);
        }
      }
    }
    else
    {
      uint64_t v37 = v0[26];
      uint64_t v36 = v0[27];
      uint64_t v38 = v0[23];
      uint64_t v39 = v0[24];

      id v40 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v40(v37, v38);
      v40(v36, v38);
    }
  }
  id v57 = (void (*)(uint64_t, uint64_t))v0[45];
  defaultLogger()();
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v58, v59))
  {
    unint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Finished clear Cached Assets", v60, 2u);
    swift_slowDealloc();
  }
  uint64_t v61 = v0[36];
  uint64_t v62 = v0[31];

  v57(v61, v62);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = (uint64_t (*)(void))v0[1];
  return v63();
}

uint64_t sub_100095384()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[32];
  uint64_t v5 = v0[20];
  uint64_t v4 = v0[21];
  uint64_t v6 = v0[19];
  (*(void (**)(void, void, void))(v0[17] + 104))(v0[18], enum case for DIPError.Code.mobileAssetClearCacheFailure(_:), v0[16]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10003E0C0((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v8(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_errorRelease();
  defaultLogger()();
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finished clear Cached Assets", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = v0[36];
  uint64_t v13 = v0[31];

  v8(v12, v13);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000956FC()
{
  uint64_t v77 = v0;
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v74 = (void (*)(uint64_t, uint64_t))v0[45];
    uint64_t v68 = v0[31];
    uint64_t v71 = v0[34];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    v76[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[14] = sub_10004C3A4(v4, v5, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ignoring error clearing MobileAssets: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v74(v71, v68);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[45];
    uint64_t v7 = v0[34];
    uint64_t v8 = v0[31];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  id v9 = [self defaultManager];
  uint64_t v10 = 1;
  id v11 = [v9 URLsForDirectory:5 inDomains:1];
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v12 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[24] + 16))(v0[22], v12 + ((*(unsigned __int8 *)(v0[24] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[24] + 80)), v0[23]);
    uint64_t v10 = 0;
  }
  uint64_t v13 = v0[23];
  uint64_t v14 = v0[24];
  uint64_t v15 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, v10, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    uint64_t v16 = v0[22];

    sub_100096220(v16);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[24] + 32))(v0[27], v0[22], v0[23]);
    URL.appendingPathComponent(_:)();
    if (URL.isFileOnDisk.getter())
    {
      URL._bridgeToObjectiveC()(v17);
      uint64_t v19 = v18;
      v0[9] = 0;
      unsigned int v20 = [v9 removeItemAtURL:v18 error:v0 + 9];

      uint64_t v21 = (void *)v0[9];
      if (v20)
      {
        uint64_t v23 = v0[25];
        uint64_t v22 = v0[26];
        uint64_t v24 = v0[23];
        uint64_t v25 = v0[24];
        id v26 = v21;
        defaultLogger()();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v22, v24);
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t type = static os_log_type_t.info.getter();
        BOOL v28 = os_log_type_enabled(v27, type);
        uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[45];
        uint64_t v69 = v0[31];
        uint64_t v72 = v0[39];
        uint64_t v30 = v0[26];
        uint64_t v75 = v0[27];
        uint64_t v32 = v0[24];
        uint64_t v31 = v0[25];
        uint64_t v33 = v0[23];
        if (v28)
        {
          unint64_t v34 = (uint8_t *)swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v34 = 136315138;
          uint64_t v35 = URL.debugDescription.getter();
          v0[11] = sub_10004C3A4(v35, v36, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
          v37(v31, v33);
          _os_log_impl((void *)&_mh_execute_header, v27, type, "Removed cached file at %s", v34, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v29(v72, v69);
          v37(v30, v33);
          v37(v75, v33);
        }
        else
        {

          uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
          v58(v31, v33);
          v29(v72, v69);
          v58(v30, v33);
          v58(v75, v33);
        }
      }
      else
      {
        uint64_t v44 = v0[26];
        uint64_t v43 = v0[27];
        uint64_t v45 = v0[23];
        uint64_t v46 = v0[24];
        id v47 = v21;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        os_log_type_t v48 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
        v48(v44, v45);
        v48(v43, v45);
        defaultLogger()();
        swift_errorRetain();
        swift_errorRetain();
        BOOL v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.info.getter();
        BOOL v51 = os_log_type_enabled(v49, v50);
        uint64_t v52 = (void (*)(uint64_t, uint64_t))v0[45];
        uint64_t v53 = v0[33];
        uint64_t v54 = v0[31];
        if (v51)
        {
          uint64_t v73 = (void (*)(uint64_t, uint64_t))v0[45];
          uint64_t v70 = v0[31];
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v55 = 136315138;
          swift_getErrorValue();
          uint64_t v56 = Error.localizedDescription.getter();
          v0[10] = sub_10004C3A4(v56, v57, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Ignoring error removing cached file: %s", v55, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          v73(v53, v70);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          v52(v53, v54);
        }
      }
    }
    else
    {
      uint64_t v39 = v0[26];
      uint64_t v38 = v0[27];
      uint64_t v40 = v0[23];
      uint64_t v41 = v0[24];

      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v42(v39, v40);
      v42(v38, v40);
    }
  }
  os_log_type_t v59 = (void (*)(uint64_t, uint64_t))v0[45];
  defaultLogger()();
  unint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Finished clear Cached Assets", v62, 2u);
    swift_slowDealloc();
  }
  uint64_t v63 = v0[36];
  uint64_t v64 = v0[31];

  v59(v63, v64);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v65 = (uint64_t (*)(void))v0[1];
  return v65();
}

void *sub_100096070()
{
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v0 = SESKeystore.init()();
  type metadata accessor for SEPairingManager();
  swift_allocObject();
  uint64_t v1 = SEPairingManager.init()();
  uint64_t v2 = type metadata accessor for GenericPasswordKeychainWrapper();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = type metadata accessor for SyncableKeyStoreProvider();
  unint64_t v5 = (void *)swift_allocObject();
  v5[5] = v2;
  v5[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v5[2] = v3;
  v15[3] = v4;
  v15[4] = &off_1001B6F00;
  v15[0] = v5;
  type metadata accessor for CredentialKeyManager();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = sub_100036D00((uint64_t)v15, v4);
  __chkstk_darwin(v7);
  id v9 = (void *)((char *)&v15[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = *v9;
  swift_retain();
  uint64_t v12 = sub_1001631B4(v0, v1, v11, v6);
  sub_10000B9DC((uint64_t)v15);
  swift_release();
  return v12;
}

uint64_t sub_100096220(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C14B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100096280(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1000962DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a3;
  uint64_t v32 = a6;
  uint64_t v12 = type metadata accessor for FeatureFlagProvider();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[3] = &type metadata for CredentialDecryptionKeyFinder;
  v34[4] = &off_1001B3EB8;
  uint64_t v16 = swift_allocObject();
  v34[0] = v16;
  long long v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v16 + 32) = v17;
  *(void *)(v16 + 48) = *(void *)(a4 + 32);
  uint64_t v18 = type metadata accessor for PayloadProcessorBuilder();
  v33[3] = v18;
  v33[4] = &off_1001B8C60;
  v33[0] = a5;
  type metadata accessor for CredentialStorage();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = sub_100036D00((uint64_t)v34, (uint64_t)&type metadata for CredentialDecryptionKeyFinder);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  uint64_t v24 = sub_100036D00((uint64_t)v33, v18);
  __chkstk_darwin(v24);
  id v26 = (uint64_t *)((char *)&v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = *v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a7, v12);
  uint64_t v29 = sub_1000965F4(a1, a2, v31, (uint64_t)v22, v28, v32, (uint64_t)v15, v19);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a7, v12);
  sub_10000B9DC((uint64_t)v33);
  sub_10000B9DC((uint64_t)v34);
  return v29;
}

uint64_t sub_1000965BC()
{
  sub_10000B9DC(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

void *sub_1000965F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = type metadata accessor for FeatureFlagProvider();
  v30[3] = v16;
  v30[4] = (uint64_t)&protocol witness table for FeatureFlagProvider;
  long long v17 = sub_10002C3A0(v30);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v17, a7, v16);
  v29[3] = &type metadata for CredentialDecryptionKeyFinder;
  v29[4] = &off_1001B3EB8;
  uint64_t v18 = swift_allocObject();
  v29[0] = v18;
  long long v19 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v18 + 32) = v19;
  *(void *)(v18 + 48) = *(void *)(a4 + 32);
  v28[3] = type metadata accessor for PayloadProcessorBuilder();
  v28[4] = &off_1001B8C60;
  v28[0] = a5;
  uint64_t v20 = sub_100096844(a1);
  swift_bridgeObjectRelease();
  a8[2] = v20;
  a8[20] = a2;
  sub_10002C404((uint64_t)v29, (uint64_t)(a8 + 4));
  sub_10002C404((uint64_t)v28, (uint64_t)(a8 + 9));
  a8[14] = a6;
  sub_10002C404((uint64_t)v30, (uint64_t)(a8 + 15));
  if (!a3)
  {
    sub_10002C404((uint64_t)(a8 + 15), (uint64_t)v27);
    type metadata accessor for BiometricsHelper();
    swift_allocObject();
    swift_retain_n();
    swift_retain_n();
    uint64_t v21 = BiometricsHelper.init()();
    uint64_t v25 = type metadata accessor for DeviceInformationProvider();
    id v26 = &protocol witness table for DeviceInformationProvider;
    sub_10002C3A0((uint64_t *)&v24);
    DeviceInformationProvider.init()();
    type metadata accessor for BiometricStorage();
    a3 = (void *)swift_allocObject();
    a3[2] = a2;
    sub_10002C404((uint64_t)v27, (uint64_t)(a3 + 8));
    a3[13] = a6;
    type metadata accessor for AppleIDVManager();
    sub_10015A018((uint64_t *)v23);
    sub_10000B9DC((uint64_t)v27);
    sub_10002C468(v23, (uint64_t)(a3 + 3));
    a3[14] = v21;
    sub_10002C468(&v24, (uint64_t)(a3 + 15));
    swift_release();
    swift_release();
  }
  sub_10000B9DC((uint64_t)v30);
  sub_10000B9DC((uint64_t)v28);
  sub_10000B9DC((uint64_t)v29);
  a8[3] = a3;
  return a8;
}

uint64_t sub_100096844(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100003980(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000968DC()
{
  uint64_t v0 = sub_100006CC8(&qword_1001C14C8);
  sub_1000912D4(v0, qword_1001C2A60);
  sub_100091338(v0, (uint64_t)qword_1001C2A60);
  return Regex.init(_regexString:version:)();
}

uint64_t sub_100096950@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006CC8(&qword_1001C2A78);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String_optional v9 = SecCertificateRef.commonName()();
  uint64_t countAndFlagsBits = v9.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v9.value._object;
  Swift::String_optional v12 = SecCertificateRef.organization()();
  uint64_t v25 = v12.value._countAndFlagsBits;
  Swift::String_optional v13 = SecCertificateRef.organizationalUnit()();
  if (v9.value._object)
  {
    Swift::String_optional v21 = v13;
    uint64_t v22 = v3;
    uint64_t v23 = v2;
    long long v24 = v5;
    Swift::String_optional v26 = v9;
    uint64_t v14 = qword_1001C0400;
    swift_bridgeObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_100006CC8(&qword_1001C14C8);
    sub_100091338(v15, (uint64_t)qword_1001C2A60);
    sub_100096CC8();
    sub_10003E15C();
    BidirectionalCollection<>.wholeMatch<A>(of:)();
    uint64_t v16 = sub_100006CC8(&qword_1001C2A88);
    int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v8, 1, v16);
    sub_100096D1C((uint64_t)v8);
    uint64_t result = swift_bridgeObjectRelease();
    if (v17 != 1)
    {
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t object = 0xEF766F672E736864;
      uint64_t countAndFlagsBits = 0x2E6173742E6C646DLL;
    }
    uint64_t v19 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v19 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v2 = v23;
    Swift::Int v5 = v24;
    uint64_t v20 = v21.value._object;
    uint64_t v3 = v22;
    if (v19)
    {
      *a1 = countAndFlagsBits;
      a1[1] = object;
      a1[2] = v25;
      a1[3] = (uint64_t)v12.value._object;
      a1[4] = v21.value._countAndFlagsBits;
      a1[5] = (uint64_t)v20;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsMissingReaderCommonName(_:), v2);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

unint64_t sub_100096CC8()
{
  unint64_t result = qword_1001C2A80;
  if (!qword_1001C2A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C2A80);
  }
  return result;
}

uint64_t sub_100096D1C(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C2A78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for CertificateSubjectDistinguishedNames()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CertificateSubjectDistinguishedNames(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CertificateSubjectDistinguishedNames(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CertificateSubjectDistinguishedNames(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateSubjectDistinguishedNames(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateSubjectDistinguishedNames(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateSubjectDistinguishedNames()
{
  return &type metadata for CertificateSubjectDistinguishedNames;
}

uint64_t sub_100096FA4(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v69 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v68 = (char *)&v55 - v9;
  uint64_t v71 = type metadata accessor for CredentialElement(0);
  uint64_t v55 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v11 = (uint64_t *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v62 = sub_10004B570((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v56 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v57 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v58 = a1;
  uint64_t v70 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v66 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v67 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v65 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v61)
  {
    if (v15)
    {
      uint64_t v60 = (v15 - 1) & v15;
      int64_t v61 = i;
      unint64_t v18 = __clz(__rbit64(v15)) | (i << 6);
    }
    else
    {
      int64_t v19 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_43;
      }
      if (v19 >= v57)
      {
LABEL_40:
        swift_release();
        return v62;
      }
      unint64_t v20 = *(void *)(v56 + 8 * v19);
      int64_t v21 = i + 1;
      if (!v20)
      {
        int64_t v21 = i + 2;
        if (i + 2 >= v57) {
          goto LABEL_40;
        }
        unint64_t v20 = *(void *)(v56 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = i + 3;
          if (i + 3 >= v57) {
            goto LABEL_40;
          }
          unint64_t v20 = *(void *)(v56 + 8 * v21);
          if (!v20)
          {
            uint64_t v22 = i + 4;
            if (i + 4 >= v57) {
              goto LABEL_40;
            }
            unint64_t v20 = *(void *)(v56 + 8 * v22);
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_44;
                }
                if (v21 >= v57) {
                  goto LABEL_40;
                }
                unint64_t v20 = *(void *)(v56 + 8 * v21);
                ++v22;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v21 = i + 4;
          }
        }
      }
LABEL_21:
      uint64_t v60 = (v20 - 1) & v20;
      int64_t v61 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v23 = *(void *)(v58 + 56);
    long long v24 = (uint64_t *)(*(void *)(v58 + 48) + 16 * v18);
    uint64_t v25 = *v24;
    uint64_t v63 = v24[1];
    uint64_t v64 = v25;
    uint64_t v26 = *(void *)(v23 + 8 * v18);
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v73 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v28 = *(unsigned __int8 *)(v55 + 80);
      uint64_t v59 = v26;
      uint64_t v29 = v26 + ((v28 + 32) & ~v28);
      uint64_t v72 = *(void *)(v55 + 72);
      do
      {
        sub_10009BA58(v29, (uint64_t)v11, type metadata accessor for CredentialElement);
        sub_100037898((uint64_t)v11 + *(int *)(v71 + 20), (uint64_t)v4, &qword_1001C12C8);
        if ((*v70)(v4, 1, v5) == 1)
        {
          sub_100097604((uint64_t)v4);
          id v30 = objc_allocWithZone((Class)DCCredentialElement);
          swift_bridgeObjectRetain();
          NSString v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v30 initWithElementIdentifier:v31];
        }
        else
        {
          uint64_t v32 = v68;
          (*v67)(v68, v4, v5);
          sub_10009B210();
          uint64_t v33 = *v11;
          unint64_t v34 = v11[1];
          uint64_t v35 = (uint64_t)v69;
          (*v66)(v69, v32, v5);
          swift_bridgeObjectRetain();
          sub_100065AB4(v33, v34, v35);
          (*v65)(v32, v5);
        }
        sub_10003774C((uint64_t)v11);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v29 += v72;
        --v27;
      }
      while (v27);
      unint64_t v36 = v73;
      swift_bridgeObjectRelease();
      uint64_t v37 = v63;
    }
    else
    {
      unint64_t v36 = _swiftEmptyArrayStorage;
      uint64_t v37 = swift_bridgeObjectRetain();
    }
    uint64_t v38 = (void *)v62;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v73 = v38;
    unint64_t v41 = sub_10013C484(v64, v37);
    uint64_t v42 = v38[2];
    BOOL v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    char v45 = v40;
    if (v38[3] >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10009B5EC(&qword_1001C1700);
      }
      uint64_t v46 = v63;
    }
    else
    {
      sub_100099C3C(v44, isUniquelyReferenced_nonNull_native, &qword_1001C1700);
      uint64_t v46 = v63;
      unint64_t v47 = sub_10013C484(v64, v63);
      if ((v45 & 1) != (v48 & 1)) {
        goto LABEL_45;
      }
      unint64_t v41 = v47;
    }
    BOOL v49 = v73;
    unint64_t v62 = (unint64_t)v73;
    if (v45)
    {
      uint64_t v17 = v73[7];
      swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v41) = v36;
    }
    else
    {
      v73[(v41 >> 6) + 8] |= 1 << v41;
      os_log_type_t v50 = (void *)(v49[6] + 16 * v41);
      *os_log_type_t v50 = v64;
      v50[1] = v46;
      *(void *)(v49[7] + 8 * v41) = v36;
      uint64_t v51 = v49[2];
      BOOL v52 = __OFADD__(v51, 1);
      uint64_t v53 = v51 + 1;
      if (v52) {
        goto LABEL_42;
      }
      void v49[2] = v53;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v15 = v60;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100097604(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C12C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100097664(uint64_t a1, uint64_t a2)
{
  unint64_t v36 = sub_10004AA24((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  int64_t v39 = v8;
  uint64_t v40 = a2;
  while (1)
  {
    while (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      if (*(void *)(a1 + 16)) {
        goto LABEL_20;
      }
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v9 >= v8) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (!v13) {
      break;
    }
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    if (*(void *)(a1 + 16))
    {
LABEL_20:
      unint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v11);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      uint64_t v18 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_10013C484(v17, v16);
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      uint64_t v21 = v4;
      uint64_t v22 = a1;
      uint64_t v23 = *(void **)(*(void *)(a1 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_10009B79C(v18, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v24 + 16))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v41 = (void *)v36;
        unint64_t v26 = sub_10013C484(v17, v16);
        uint64_t v27 = *(void *)(v36 + 16);
        BOOL v28 = (v25 & 1) == 0;
        uint64_t v29 = v27 + v28;
        if (__OFADD__(v27, v28)) {
          goto LABEL_40;
        }
        if (*(void *)(v36 + 24) >= v29)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            char v38 = v25;
            sub_10009B5EC(&qword_1001C1750);
            char v25 = v38;
          }
        }
        else
        {
          char v37 = v25;
          sub_100099C3C(v29, isUniquelyReferenced_nonNull_native, &qword_1001C1750);
          unint64_t v30 = sub_10013C484(v17, v16);
          int v32 = v31 & 1;
          char v25 = v37;
          if ((v37 & 1) != v32) {
            goto LABEL_41;
          }
          unint64_t v26 = v30;
        }
        unint64_t v36 = (unint64_t)v41;
        if (v25)
        {
          uint64_t v33 = v41[7];
          swift_bridgeObjectRelease();
          *(void *)(v33 + 8 * v26) = v24;
        }
        else
        {
          sub_100168F44(v26, v17, v16, v24, v41);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v21;
        a1 = v22;
        int64_t v8 = v39;
        a2 = v40;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v21;
        a1 = v22;
        int64_t v8 = v39;
        a2 = v40;
LABEL_5:
        swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v14 = v9 + 1;
  if (v9 + 1 >= v8) {
    goto LABEL_37;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13) {
    goto LABEL_18;
  }
  int64_t v14 = v9 + 2;
  if (v9 + 2 >= v8) {
    goto LABEL_37;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13) {
    goto LABEL_18;
  }
  int64_t v14 = v9 + 3;
  if (v9 + 3 >= v8)
  {
LABEL_37:
    swift_release();
    return v36;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
LABEL_18:
    int64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100097990(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006CC8(&qword_1001C17B0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v30 = a2;
    int64_t v8 = 0;
    char v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v31 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100097C58(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SESKeystore.KeyDesignation();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100006CC8(&qword_1001C17A8);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  unint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  BOOL v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  uint64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    unint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    uint64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_10009BAC0(v32 + v33 * v24, v54, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_10009BA58(v34 + v33 * v24, v54, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    }
    sub_10009BB28();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      uint64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = sub_10009BAC0(v54, *(void *)(v13 + 56) + v33 * v22, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100098140(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006CC8(&qword_1001C2AA8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  uint64_t *v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      int64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000983F8(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C1750);
}

uint64_t sub_100098404(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006CC8(&qword_1001C1788);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v34) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v35 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v5 + 56) + 32 * v17;
    if (a2)
    {
      sub_100044CD4(v25, (uint64_t)v36);
    }
    else
    {
      sub_100037898(v25, (uint64_t)v36, &qword_1001C15C8);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100044CD4((uint64_t)v36, *(void *)(v7 + 56) + 32 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100098720(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C2A40);
}

uint64_t sub_10009872C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100006CC8(&qword_1001C2A38);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  int64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  unint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    uint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    unint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  uint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_100098B18(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C1718);
}

uint64_t sub_100098B24(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006CC8(&qword_1001C17C0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10004DCD8(v24, v35);
      }
      else
      {
        sub_10004DD90((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10004DCD8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100098E24(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C1748);
}

uint64_t sub_100098E30(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for PresentmentProposal();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100006CC8(&qword_1001C1760);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_10009BAC0(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    }
    else
    {
      sub_10009BA58(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_10009BAC0((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100099210(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C1780);
}

uint64_t sub_10009921C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for AnyCodable();
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100006CC8(&qword_1001C1770);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  int64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  unint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    uint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  uint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_100099604(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C1778);
}

uint64_t sub_100099610(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006CC8(&qword_1001C2A98);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100009778(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_100099920(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006CC8(&qword_1001C1708);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_10000354C(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_100099C30(uint64_t a1, char a2)
{
  return sub_100099C3C(a1, a2, &qword_1001C2AA0);
}

uint64_t sub_100099C3C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100006CC8(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

void *sub_100099F50()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C17B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10009A0E0()
{
  uint64_t v1 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  uint64_t v29 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SESKeystore.KeyDesignation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C17A8);
  unint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    sub_10009BA58(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)sub_10009BAC0((uint64_t)v3, *(void *)(v10 + 56) + v20, type metadata accessor for MockSESKeystore.MockDesignatedKey);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10009A420()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C2AA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *unint64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10009A5D0()
{
  return sub_10009B5EC(&qword_1001C1750);
}

void *sub_10009A5DC()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C1788);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100037898(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26, &qword_1001C15C8);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v18;
    v21[1] = v19;
    sub_100044CD4((uint64_t)v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009A7CC()
{
  return sub_10009B5EC(&qword_1001C2A40);
}

void *sub_10009A7D8()
{
  uint64_t v35 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C2A38);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v28 = v36;
    uint64_t v27 = v30;
LABEL_25:
    uint64_t *v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    unint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *unint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10009AAA0()
{
  return sub_10009B5EC(&qword_1001C1718);
}

void *sub_10009AAAC()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C17C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10004DD90(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10004DCD8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009AC94()
{
  return sub_10009B5EC(&qword_1001C1748);
}

void *sub_10009ACA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PresentmentProposal();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C1760);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_10009BA58(*(void *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    int64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *int64_t v22 = v19;
    v22[1] = v20;
    sub_10009BAC0((uint64_t)v4, *(void *)(v7 + 56) + v21, (uint64_t (*)(void))type metadata accessor for PresentmentProposal);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10009AF34()
{
  return sub_10009B5EC(&qword_1001C1780);
}

void *sub_10009AF40()
{
  uint64_t v35 = type metadata accessor for AnyCodable();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CC8(&qword_1001C1770);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v28 = v36;
    uint64_t v27 = v30;
LABEL_25:
    uint64_t *v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *int64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10009B204()
{
  return sub_10009B5EC(&qword_1001C1778);
}

unint64_t sub_10009B210()
{
  unint64_t result = qword_1001C2A90;
  if (!qword_1001C2A90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001C2A90);
  }
  return result;
}

void *sub_10009B250()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C2A98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)sub_100009778(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10009B418()
{
  uint64_t v1 = v0;
  sub_100006CC8(&qword_1001C1708);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)sub_10000354C(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10009B5E0()
{
  return sub_10009B5EC(&qword_1001C2AA0);
}

void *sub_10009B5EC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100006CC8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10009B79C(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for CredentialElement(0) - 8;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v10 = (uint64_t *)((char *)&v25 - v9);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(a1 + 16);
  if (!v29) {
    return result;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v32 = *(void *)(v8 + 72);
  uint64_t v27 = (v13 + 32) & ~v13;
  uint64_t v28 = a1 + v27;
  uint64_t v25 = v2;
  int64_t v26 = a2 + 7;
  int64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v31 = a2;
  while (1)
  {
    sub_10009BA58(v28 + v32 * v12, (uint64_t)v10, type metadata accessor for CredentialElement);
    uint64_t v15 = a2[2];
    if (v15)
    {
      uint64_t v16 = *v10;
      uint64_t v17 = v10[1];
      BOOL v18 = a2[4] == *v10 && a2[5] == v17;
      if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        sub_10009BAC0((uint64_t)v10, v30, type metadata accessor for CredentialElement);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000682D4(0, v14[2] + 1, 1);
        }
        int64_t v14 = v33;
        unint64_t v20 = v33[2];
        unint64_t v19 = v33[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000682D4(v19 > 1, v20 + 1, 1);
          int64_t v14 = v33;
        }
        v14[2] = v20 + 1;
        sub_10009BAC0(v30, (uint64_t)v14 + v27 + v20 * v32, type metadata accessor for CredentialElement);
        a2 = v31;
        goto LABEL_4;
      }
      a2 = v31;
      if (v15 != 1) {
        break;
      }
    }
LABEL_3:
    sub_10003774C((uint64_t)v10);
LABEL_4:
    if (++v12 == v29) {
      return (uint64_t)v33;
    }
  }
  uint64_t v21 = v26;
  uint64_t v22 = 1;
  while (1)
  {
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (*(v21 - 1) == v16 && *v21 == v17) {
      goto LABEL_11;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_11;
    }
    v21 += 2;
    ++v22;
    BOOL v18 = v23 == v15;
    a2 = v31;
    if (v18) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10009BA58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009BAC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10009BB28()
{
  unint64_t result = qword_1001C4990;
  if (!qword_1001C4990)
  {
    type metadata accessor for SESKeystore.KeyDesignation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C4990);
  }
  return result;
}

__n128 sub_10009BB80@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v62 = a1;
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v63 = *(void *)(v61 - 8);
  uint64_t v3 = __chkstk_darwin(v61);
  uint64_t v60 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v58 = (char *)&v58 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v58 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v58 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v58 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v58 - v16;
  BOOL v18 = self;
  id v19 = [v18 standardUserDefaults];
  v20._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v20._unint64_t object = (void *)0x800000010017EAD0;
  Swift::String_optional v21 = NSUserDefaults.internalString(forKey:)(v20);

  if (v21.value._object)
  {
    uint64_t v59 = v2;
    if (v21.value._countAndFlagsBits == 0x6975716552746F6ELL && v21.value._object == (void *)0xEB00000000646572
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Forcing credential presentment auth policy to not required due to user defaults setting", v24, 2u);
        swift_slowDealloc();
      }

      uint64_t v25 = v61;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v61);
      uint64_t v26 = 0;
LABEL_8:
      uint64_t v2 = v59;
      uint64_t v27 = v62;
      goto LABEL_23;
    }
    if (v21.value._countAndFlagsBits == 0xD000000000000016 && v21.value._object == (void *)0x800000010017EB30
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Forcing credential presentment auth policy to any biometric or passcode due to user defaults setting", v30, 2u);
        swift_slowDealloc();
      }

      uint64_t v31 = v15;
      uint64_t v25 = v61;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v31, v61);
      uint64_t v26 = 1;
      goto LABEL_8;
    }
    if (v21.value._countAndFlagsBits == 0x69426C61626F6C67 && v21.value._object == (void *)0xED0000676E69646ELL)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      defaultLogger()();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Forcing credential presentment auth policy to global binding due to user defaults setting", v35, 2u);
        swift_slowDealloc();
      }

      uint64_t v25 = v61;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v61);
      uint64_t v26 = 2;
      goto LABEL_8;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v2 = v59;
    if (v32) {
      goto LABEL_19;
    }
  }
  uint64_t v26 = v2[1].n128_i64[1];
  uint64_t v25 = v61;
  uint64_t v27 = v62;
LABEL_23:
  id v36 = [v18 standardUserDefaults];
  v37._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v37._unint64_t object = (void *)0x800000010017EAD0;
  Swift::String_optional v38 = NSUserDefaults.internalString(forKey:)(v37);

  if (!v38.value._object) {
    goto LABEL_37;
  }
  if (v38.value._countAndFlagsBits == 1701736302 && v38.value._object == (void *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Forcing reader auth policy to none due to user defaults setting", v41, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v25);
    uint64_t v42 = 0;
    goto LABEL_38;
  }
  if (v38.value._countAndFlagsBits != 0x797469746E656469 || v38.value._object != (void *)0xE800000000000000)
  {
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v43) {
      goto LABEL_34;
    }
LABEL_37:
    uint64_t v42 = v2[1].n128_i64[0];
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v44 = v58;
  defaultLogger()();
  int64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    int v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Forcing reader auth policy to identity due to user defaults setting", v47, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v63 + 8))(v44, v25);
  uint64_t v42 = 1;
LABEL_38:
  id v48 = [v18 standardUserDefaults];
  v49._uint64_t countAndFlagsBits = 0xD000000000000034;
  v49._unint64_t object = (void *)0x800000010017EAF0;
  Swift::String_optional v50 = NSUserDefaults.internalString(forKey:)(v49);

  if (!v50.value._object) {
    goto LABEL_50;
  }
  if ((v50.value._countAndFlagsBits != 0x647261646E617473 || v50.value._object != (void *)0xE800000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v50.value._countAndFlagsBits == 0x697274656D6F6962 && v50.value._object == (void *)0xE900000000000063)
    {
      swift_bridgeObjectRelease();
      uint64_t v55 = 1;
      goto LABEL_51;
    }
    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v56)
    {
      uint64_t v55 = 1;
      goto LABEL_51;
    }
LABEL_50:
    uint64_t v55 = v2[2].n128_i64[0];
    goto LABEL_51;
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = v60;
  defaultLogger()();
  BOOL v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Forcing payload protection policy to standard due to user defaults settings", v54, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v25);
  uint64_t v55 = 0;
LABEL_51:
  __n128 result = *v2;
  __n128 *v27 = *v2;
  v27[1].n128_u64[0] = v42;
  v27[1].n128_u64[1] = v26;
  v27[2].n128_u64[0] = v55;
  return result;
}

id sub_10009C470(uint64_t a1)
{
  type metadata accessor for StoredCredentialOptions();
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(a1 + 16)];
  [v3 setDeleteInactiveKeysAfterDays:v1[1]];
  id result = [v3 setDeleteIncompleteCredentialAfterDays:*v1];
  if ((v1[2] & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  id result = [v3 setReaderAuthenticationPolicy:];
  if ((v1[3] & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id result = [v3 setPresentmentAuthPolicy:];
  if ((v1[4] & 0x8000000000000000) == 0)
  {
    [v3 setPayloadProtectionPolicy:];
    return v3;
  }
LABEL_7:
  __break(1u);
  return result;
}

void **sub_10009C534(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (void **)((char *)v7 + v14);
    uint64_t v17 = (void **)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v17[3];
    void v16[2] = v17[2];
    v16[3] = v19;
    uint64_t v20 = v17[5];
    v16[4] = v17[4];
    v16[5] = v20;
    *((unsigned char *)v7 + v15) = *((unsigned char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_10009C664(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void **sub_10009C704(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void **)((char *)a1 + v13);
  uint64_t v16 = (void **)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = v16[3];
  _OWORD v15[2] = v16[2];
  v15[3] = v18;
  uint64_t v19 = v16[5];
  v15[4] = v16[4];
  void v15[5] = v19;
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_10009C7E8(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (void **)((char *)a2 + v13);
  *uint64_t v14 = *(void **)((char *)a2 + v13);
  v14[1] = *(void **)((char *)a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[2] = v15[2];
  void v14[3] = v15[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[4] = v15[4];
  v14[5] = v15[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void *sub_10009C8F8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)((char *)a1 + v10);
  uint64_t v13 = (_OWORD *)((char *)a2 + v10);
  long long v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  _OWORD v12[2] = v13[2];
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

void **sub_10009C9A8(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void **)((char *)a1 + v11);
  uint64_t v13 = (void **)((char *)a2 + v11);
  uint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 8);
  *uint64_t v12 = *(void **)((char *)a2 + v11);
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = v13[3];
  _OWORD v12[2] = v13[2];
  uint64_t v12[3] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = v13[5];
  v12[4] = v13[4];
  v12[5] = v16;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_10009CA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009CA98);
}

uint64_t sub_10009CA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A382C(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
}

uint64_t sub_10009CAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009CAC4);
}

uint64_t sub_10009CAC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000A3924(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
}

uint64_t type metadata accessor for ReaderMetadataProvider(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2B20);
}

uint64_t sub_10009CAFC()
{
  uint64_t result = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10009CBA8()
{
  uint64_t v0 = sub_100006CC8(&qword_1001C2BE0);
  sub_1000912D4(v0, qword_1001C2AB0);
  sub_100091338(v0, (uint64_t)qword_1001C2AB0);
  sub_100006CC8(&qword_1001C2BF8);
  return Regex.init(_regexString:version:)();
}

uint64_t sub_10009CC2C()
{
  uint64_t v0 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter();
  uint64_t v5 = v4;
  type metadata accessor for ReaderMetadataProvider(0);
  uint64_t v6 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter();
  if (v6)
  {
    uint64_t v7 = v6;
    if (*(void *)(v6 + 16) && (unint64_t v8 = sub_10013C484(v3, v5), (v9 & 1) != 0))
    {
      unint64_t v10 = v8;
      uint64_t v11 = *(void *)(v7 + 56);
      uint64_t v12 = type metadata accessor for AnyCodable();
      uint64_t v13 = *(void *)(v12 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v2, v11 + *(void *)(v13 + 72) * v10, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
    }
    else
    {
      uint64_t v12 = type metadata accessor for AnyCodable();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v2, 1, 1, v12);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for AnyCodable();
    uint64_t v14 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v2, 1, v12) == 1)
    {
      sub_100014BBC((uint64_t)v2, &qword_1001C12C8);
      return 0;
    }
    else
    {
      char v16 = AnyCodable.BOOLValue.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v12);
      return v16 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_10009CE94()
{
  uint64_t v0 = sub_100006CC8(&qword_1001C12C8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = static ISO18013ReaderRequestInfoConstant.requestLogotypeIconDataKey.getter();
  uint64_t v5 = v4;
  type metadata accessor for ReaderMetadataProvider(0);
  uint64_t v6 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = v6;
  if (*(void *)(v6 + 16) && (unint64_t v8 = sub_10013C484(v3, v5), (v9 & 1) != 0))
  {
    unint64_t v10 = v8;
    uint64_t v11 = *(void *)(v7 + 56);
    uint64_t v12 = type metadata accessor for AnyCodable();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v2, v11 + *(void *)(v13 + 72) * v10, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
  }
  else
  {
    uint64_t v12 = type metadata accessor for AnyCodable();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v2, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for AnyCodable();
  uint64_t v14 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v2, 1, v12) == 1)
  {
    sub_100014BBC((uint64_t)v2, &qword_1001C12C8);
    return 0;
  }
  uint64_t v15 = AnyCodable.dataValue.getter();
  unint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v12);
  if (v17 >> 60 == 15) {
    return 0;
  }
  return v15;
}

uint64_t sub_10009D110()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReaderMetadataProvider(0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v6 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 28));
  if (v6 == 2)
  {
    sub_1000A171C(v1, (uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
LABEL_26:
    sub_1000A1784((uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
    return 0;
  }
  sub_1000A171C(v1, (uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
  if (v6) {
    goto LABEL_26;
  }
  char v7 = sub_10009CC2C();
  sub_1000A1784((uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
  if ((v7 & 1) == 0) {
    return 0;
  }
  uint64_t result = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
  uint64_t v9 = result;
  int64_t v10 = 0;
  uint64_t v11 = 1 << *(unsigned char *)(result + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = result + 64;
  unint64_t v14 = v12 & *(void *)(result + 64);
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_9:
    uint64_t v18 = *(void *)(*(void *)(v9 + 56) + 8 * v17);
    char v24 = 1;
    __chkstk_darwin(result);
    *(void *)&v23[-16] = &v24;
    swift_bridgeObjectRetain();
    char v19 = sub_1001357C8((uint64_t (*)(char *))sub_1000A32BC, (uint64_t)&v23[-32], v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v19)
    {
      swift_release();
      return 0;
    }
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v10 >= v15) {
    goto LABEL_30;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v10);
  if (v21)
  {
LABEL_21:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v10 << 6);
    goto LABEL_9;
  }
  int64_t v22 = v10 + 1;
  if (v10 + 1 >= v15) {
    goto LABEL_30;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_20;
  }
  int64_t v22 = v10 + 2;
  if (v10 + 2 >= v15) {
    goto LABEL_30;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_20;
  }
  int64_t v22 = v10 + 3;
  if (v10 + 3 >= v15)
  {
LABEL_30:
    swift_release();
    return 1;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21)
  {
LABEL_20:
    int64_t v10 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v13 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10009D3D4()
{
  uint64_t v2 = sub_100006CC8(&qword_1001C2C00);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006CC8(&qword_1001C2C08);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v38 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = type metadata accessor for ReaderAuthenticationAllowableElements();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *v0;
  if (!*v0) {
    return 0;
  }
  uint64_t v40 = v2;
  uint64_t v41 = v16;
  uint64_t v42 = v15;
  int v20 = *((unsigned __int8 *)v0 + *(int *)(type metadata accessor for ReaderMetadataProvider(0) + 28));
  if (v20 == 2 || (v20 & 1) != 0) {
    return 0;
  }
  id v22 = v19;
  int v23 = sub_10009D110();
  SecCertificateRef.allowableElementsForDisplayOnly.getter();
  if (v1)
  {

    return (uint64_t)v22;
  }
  int v39 = v23;
  SecCertificateRef.allowableElementsForDataTransfer.getter();
  id v38 = v22;
  uint64_t v25 = (uint64_t)&v4[*(int *)(v40 + 48)];
  uint64_t v26 = (uint64_t)&v4[*(int *)(v40 + 64)];
  char v27 = v39;
  *uint64_t v4 = v39 & 1;
  uint64_t v28 = (uint64_t)v13;
  uint64_t v29 = v25;
  sub_100037944(v28, v25, &qword_1001C2C08);
  uint64_t v30 = (uint64_t)v11;
  uint64_t v31 = v26;
  sub_100037944(v30, v26, &qword_1001C2C08);
  char v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  uint64_t v33 = v42;
  int v34 = v32(v29, 1, v42);
  if (v34 == 1)
  {
    if (v32(v31, 1, v33) == 1)
    {

      sub_100014BBC(v29, &qword_1001C2C08);
      return 0;
    }
    uint64_t v36 = v42;
    if (v39)
    {

      uint64_t v37 = v31;
LABEL_22:
      sub_100014BBC(v37, &qword_1001C2C08);
      return 1;
    }
  }
  else
  {
    sub_100037898(v29, (uint64_t)v8, &qword_1001C2C08);
    if (v27)
    {
      uint64_t v35 = v41;
      uint64_t v36 = v42;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v18, v8, v42);
      sub_100014BBC(v31, &qword_1001C2C08);
LABEL_24:
      sub_100014BBC(v29, &qword_1001C2C08);
      id v22 = (id)ReaderAuthenticationAllowableElements.documentTypes.getter();
      ReaderAuthenticationAllowableElements.elements.getter();

      (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
      return (uint64_t)v22;
    }
    uint64_t v36 = v42;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  }
  if (v32(v31, 1, v36) != 1)
  {
    uint64_t v35 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v18, v31, v36);
    goto LABEL_24;
  }
  if (v32(v29, 1, v36) != 1)
  {

    uint64_t v37 = v29;
    goto LABEL_22;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_10009D83C()
{
  uint64_t v37 = &_swiftEmptySetSingleton;
  type metadata accessor for ReaderMetadataProvider(0);
  uint64_t result = ISO18013ReaderRequest.ItemsRequest.namespaces.getter();
  int64_t v1 = 0;
  uint64_t v30 = result + 64;
  uint64_t v2 = 1 << *(unsigned char *)(result + 32);
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(result + 64);
  int64_t v31 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v32 = result;
  while (2)
  {
    if (!v4)
    {
      int64_t v6 = v1 + 1;
      if (__OFADD__(v1, 1)) {
        goto LABEL_46;
      }
      if (v6 >= v31) {
        goto LABEL_43;
      }
      unint64_t v7 = *(void *)(v30 + 8 * v6);
      int64_t v8 = v1 + 1;
      if (!v7)
      {
        int64_t v8 = v1 + 2;
        if (v1 + 2 >= v31) {
          goto LABEL_43;
        }
        unint64_t v7 = *(void *)(v30 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v1 + 3;
          if (v1 + 3 >= v31) {
            goto LABEL_43;
          }
          unint64_t v7 = *(void *)(v30 + 8 * v8);
          if (!v7)
          {
            uint64_t v9 = v1 + 4;
            if (v1 + 4 < v31)
            {
              unint64_t v7 = *(void *)(v30 + 8 * v9);
              if (v7)
              {
                int64_t v8 = v1 + 4;
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v8 = v9 + 1;
                if (__OFADD__(v9, 1)) {
                  goto LABEL_47;
                }
                if (v8 >= v31) {
                  break;
                }
                unint64_t v7 = *(void *)(v30 + 8 * v8);
                ++v9;
                if (v7) {
                  goto LABEL_21;
                }
              }
            }
LABEL_43:
            swift_release();
            return (uint64_t)v37;
          }
        }
      }
LABEL_21:
      uint64_t v33 = (v7 - 1) & v7;
      int64_t v34 = v8;
      unint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
      goto LABEL_22;
    }
    uint64_t v33 = (v4 - 1) & v4;
    int64_t v34 = v1;
    unint64_t v5 = __clz(__rbit64(v4)) | (v1 << 6);
LABEL_22:
    uint64_t v10 = (Swift::Int *)(*(void *)(v32 + 48) + 16 * v5);
    uint64_t v11 = *(void *)(*(void *)(v32 + 56) + 8 * v5);
    Swift::Int v13 = *v10;
    Swift::Int v12 = v10[1];
    uint64_t v14 = v11 + 64;
    uint64_t v15 = 1 << *(unsigned char *)(v11 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & *(void *)(v11 + 64);
    int64_t v18 = (unint64_t)(v15 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v19 = 0;
    while (1)
    {
      if (v17)
      {
        unint64_t v20 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v21 = v20 | (v19 << 6);
        goto LABEL_27;
      }
      int64_t v27 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v27 >= v18) {
        goto LABEL_5;
      }
      unint64_t v28 = *(void *)(v14 + 8 * v27);
      ++v19;
      if (!v28)
      {
        int64_t v19 = v27 + 1;
        if (v27 + 1 >= v18) {
          goto LABEL_5;
        }
        unint64_t v28 = *(void *)(v14 + 8 * v19);
        if (!v28)
        {
          int64_t v19 = v27 + 2;
          if (v27 + 2 >= v18) {
            goto LABEL_5;
          }
          unint64_t v28 = *(void *)(v14 + 8 * v19);
          if (!v28) {
            break;
          }
        }
      }
LABEL_42:
      unint64_t v17 = (v28 - 1) & v28;
      unint64_t v21 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_27:
      id v22 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v21);
      uint64_t v23 = *v22;
      char v24 = (void *)v22[1];
      Swift::Int v35 = v13;
      Swift::Int v36 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25._uint64_t countAndFlagsBits = 58;
      v25._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = v23;
      v26._unint64_t object = v24;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      sub_100003980(&v35, v35, v36);
      uint64_t result = swift_bridgeObjectRelease();
    }
    int64_t v29 = v27 + 3;
    if (v29 >= v18)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      unint64_t v4 = v33;
      int64_t v1 = v34;
      continue;
    }
    break;
  }
  unint64_t v28 = *(void *)(v14 + 8 * v29);
  if (v28)
  {
    int64_t v19 = v29;
    goto LABEL_42;
  }
  while (1)
  {
    int64_t v19 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v19 >= v18) {
      goto LABEL_5;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v19);
    ++v29;
    if (v28) {
      goto LABEL_42;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_10009DB54()
{
  uint64_t v110 = type metadata accessor for ReaderMetadataProvider(0);
  __chkstk_darwin(v110);
  uint64_t v104 = (uint64_t)v96 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v107 = *(void *)(v2 - 8);
  uint64_t v108 = v2;
  __chkstk_darwin(v2);
  int64_t v109 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v111 = v4;
  uint64_t v112 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  int64_t v106 = (void *)((char *)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v105 = (char *)v96 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v12 = (char *)v96 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v96 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  int64_t v18 = (char *)v96 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)v96 - v19;
  char v21 = sub_10009D110();
  if (v21) {
    uint64_t v22 = 0x2079616C70736964;
  }
  else {
    uint64_t v22 = 0x6172742061746164;
  }
  if (v21) {
    unint64_t v23 = 0xEC000000796C6E6FLL;
  }
  else {
    unint64_t v23 = 0xED0000726566736ELL;
  }
  uint64_t v24 = sub_10009D83C();
  uint64_t v25 = v113;
  uint64_t v26 = sub_10009D3D4();
  if (v25)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  BOOL v102 = (void (*)(void, void))v22;
  uint64_t v103 = v0;
  uint64_t v113 = v24;
  uint64_t v100 = v15;
  uint64_t v101 = v12;
  if (!v26)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = (uint64_t)v20;
    defaultLogger()();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = v112;
    if (v39)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v113 = v36;
      v114[0] = v42;
      *(_DWORD *)uint64_t v41 = 136446210;
      uint64_t v115 = (void *)sub_10004C3A4((uint64_t)v102, v23, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Reader certificate pased allowable fields validation for %{public}s request", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v113, v111);
    }
    else
    {

      return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v36, v111);
    }
  }
  uint64_t v29 = v112;
  if (v26 == 1)
  {
    type metadata accessor for IDCSAnalytics();
    static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = v106;
    defaultLogger()();
    int64_t v31 = (void *)v23;
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      int64_t v34 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)int64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      Swift::Int v35 = v102;
      uint64_t v115 = (void *)sub_10004C3A4((uint64_t)v102, (unint64_t)v31, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reader certificate is not allowed to make %{public}s requests", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(void *, uint64_t))(v29 + 8))(v106, v111);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(void *, uint64_t))(v29 + 8))(v30, v111);
      Swift::Int v35 = v102;
    }
    v114[0] = 0;
    v114[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v59._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v59._unint64_t object = (void *)0x800000010017ECE0;
    String.append(_:)(v59);
    v60._uint64_t countAndFlagsBits = (uint64_t)v35;
    v60._unint64_t object = v31;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._uint64_t countAndFlagsBits = 0x7473657571657220;
    v61._unint64_t object = (void *)0xE900000000000073;
    String.append(_:)(v61);
    (*(void (**)(char *, void, uint64_t))(v107 + 104))(v109, enum case for DIPError.Code.idcsRequestedElementsNotPermitted(_:), v108);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v94 = 175;
    unint64_t v92 = 0xD000000000000028;
    unint64_t v93 = 0x800000010017ED10;
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v99 = 0;
  char v43 = (void (*)(void, void))v18;
  uint64_t v44 = v27;
  int64_t v45 = (void *)v26;
  defaultLogger()();
  int64_t v106 = v45;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v46 = v23;
  swift_bridgeObjectRetain();
  int v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  int v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = swift_slowAlloc();
    int v98 = v49;
    uint64_t v51 = v50;
    uint64_t v97 = swift_slowAlloc();
    v114[0] = v97;
    *(_DWORD *)uint64_t v51 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v115 = (void *)sub_10004C3A4((uint64_t)v102, v46, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v51 + 12) = 2080;
    v96[1] = v51 + 14;
    uint64_t v115 = v106;
    sub_100006CC8(&qword_1001C3C70);
    sub_1000A2DFC(&qword_1001C2BC0, &qword_1001C3C70);
    BOOL v102 = v43;
    uint64_t v52 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v115 = (void *)sub_10004C3A4(v52, v53, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 22) = 2080;
    uint64_t v115 = v44;
    uint64_t v54 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v115 = (void *)sub_10004C3A4(v54, v55, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v56 = (uint64_t)v44;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v98, "Allowable elements for %{public}s request: documentTypes=[%s] elements=[%s]", (uint8_t *)v51, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int64_t v57 = *(void (**)(void, void))(v112 + 8);
    uint64_t v58 = v102;
  }
  else
  {

    uint64_t v56 = (uint64_t)v44;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    int64_t v57 = *(void (**)(void, void))(v112 + 8);
    uint64_t v58 = v43;
  }
  BOOL v102 = v57;
  v57(v58, v111);
  unint64_t v62 = v101;
  uint64_t v63 = v103;
  uint64_t v64 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
  char v66 = sub_10010EE78(v64, v65, v106);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for IDCSAnalytics();
    static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)();
    swift_bridgeObjectRelease();
    uint64_t v81 = v105;
    defaultLogger()();
    uint64_t v82 = v104;
    sub_1000A171C(v63, v104, type metadata accessor for ReaderMetadataProvider);
    unint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 136315138;
      uint64_t v86 = ISO18013ReaderRequest.ItemsRequest.docType.getter();
      uint64_t v115 = (void *)sub_10004C3A4(v86, v87, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A1784(v82, type metadata accessor for ReaderMetadataProvider);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Reader certificate is not allowed to request elements for document type: %s", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A1784(v82, type metadata accessor for ReaderMetadataProvider);
    }

    v102(v81, v111);
    (*(void (**)(char *, void, uint64_t))(v107 + 104))(v109, enum case for DIPError.Code.idcsRequestedElementsNotPermitted(_:), v108);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v94 = 150;
    unint64_t v92 = 0xD000000000000028;
    unint64_t v93 = 0x800000010017ED10;
    goto LABEL_37;
  }
  uint64_t v67 = sub_100096844(v56);
  uint64_t v68 = swift_bridgeObjectRelease();
  __chkstk_darwin(v68);
  uint64_t v94 = v63;
  uint64_t v95 = v67;
  uint64_t v69 = v99;
  uint64_t v70 = sub_1000A17E4((uint64_t)sub_1000A2DC0, (uint64_t)&v92, v113);
  uint64_t v99 = v69;
  swift_bridgeObjectRelease();
  if (*(void *)(v70 + 16))
  {
    type metadata accessor for IDCSAnalytics();
    static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)();
    defaultLogger()();
    swift_retain();
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315138;
      uint64_t v74 = swift_bridgeObjectRetain();
      uint64_t v75 = sub_1000EE5F4(v74);
      swift_release();
      uint64_t v115 = v75;
      uint64_t v76 = v99;
      sub_1000A1EE4((uint64_t *)&v115);
      if (v76)
      {
        swift_release();
        uint64_t result = swift_release();
        __break(1u);
        return result;
      }
      uint64_t v77 = Array.description.getter();
      unint64_t v79 = v78;
      swift_release();
      uint64_t v115 = (void *)sub_10004C3A4(v77, v79, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Reader certificate is not allowed to request these elements: %s", v73, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v80 = v101;
    }
    else
    {

      swift_release_n();
      uint64_t v80 = v62;
    }
    v102(v80, v111);
    (*(void (**)(char *, void, uint64_t))(v107 + 104))(v109, enum case for DIPError.Code.idcsRequestedElementsNotPermitted(_:), v108);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v94 = 164;
    unint64_t v92 = 0xD000000000000028;
    unint64_t v93 = 0x800000010017ED10;
LABEL_37:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  swift_release();
  uint64_t v88 = v100;
  defaultLogger()();
  uint64_t v89 = Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v89, v90))
  {
    uint64_t v91 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v91 = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "Reader certificate passed allowable fields validation for requested elements", v91, 2u);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(char *, uint64_t))v102)(v88, v111);
}

uint64_t sub_10009EBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v5 = sub_100006CC8(&qword_1001C2BD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006CC8(&qword_1001C2BD8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v24 = a2;
  if (qword_1001C0408 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100006CC8(&qword_1001C2BE0);
  sub_100091338(v12, (uint64_t)qword_1001C2AB0);
  sub_100096CC8();
  sub_1000A2DFC(&qword_1001C2BE8, &qword_1001C2BE0);
  BidirectionalCollection<>.wholeMatch<A>(of:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100014BBC((uint64_t)v7, &qword_1001C2BD0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    uint64_t v13 = v26;
    uint64_t v14 = v27;
    uint64_t v15 = v29;
    if ((v27 ^ (unint64_t)v26) >> 14)
    {
      uint64_t v16 = v28;
      uint64_t v17 = sub_1000A2B88(v26, v27, v28, v29, 10);
      if ((v18 & 0x100) != 0) {
        uint64_t v17 = (uint64_t)sub_1000A1B74(v13, v14, v16, v15, 10);
      }
      unint64_t v19 = v17;
      char v20 = v18;
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0 && v19 <= 0x63)
      {
        char v21 = sub_100007A0C(0xD00000000000001DLL, 0x800000010017EE20, v25);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        return v21 & 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  char v21 = sub_100007A0C(a1, v24, v25);
  return v21 & 1;
}

uint64_t sub_10009EF1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v146 = a1;
  uint64_t v127 = type metadata accessor for AlgorithmIdentifier();
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v125 = (char *)&v120 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for Logger();
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v129 = (char *)&v120 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v149 = *(void *)(v3 - 8);
  uint64_t v150 = v3;
  __chkstk_darwin(v3);
  unint64_t v148 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006CC8(&qword_1001C2B68);
  __chkstk_darwin(v5 - 8);
  uint64_t v133 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_100006CC8(&qword_1001C2B70);
  __chkstk_darwin(v131);
  unint64_t v130 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HashDigest();
  uint64_t v134 = *(void *)(v8 - 8);
  uint64_t v135 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v128 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v132 = (char *)&v120 - v11;
  uint64_t v12 = sub_100006CC8(&qword_1001C2B78);
  __chkstk_darwin(v12 - 8);
  uint64_t v145 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_100006CC8(&qword_1001C2B80);
  __chkstk_darwin(v137);
  uint64_t v136 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v139 = *(void *)(v15 - 8);
  uint64_t v140 = v15;
  __chkstk_darwin(v15);
  os_log_t v141 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LogotypeDetails();
  uint64_t v143 = *(void (***)(char *, unint64_t))(v17 - 8);
  unint64_t v144 = v17;
  __chkstk_darwin(v17);
  os_log_type_t v142 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006CC8(&qword_1001C2B88);
  __chkstk_darwin(v19 - 8);
  char v21 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100006CC8(&qword_1001C2B90);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v120 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100006CC8(&qword_1001C2B98);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Logotype();
  uint64_t v147 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100006CC8(&qword_1001C2BA0);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  int64_t v34 = (char *)&v120 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v120 - v36;
  __chkstk_darwin(v35);
  BOOL v39 = (char *)&v120 - v38;
  uint64_t v40 = v151;
  SecCertificateRef.logotype.getter();
  if (v40)
  {
    (*(void (**)(char *, void, uint64_t))(v149 + 104))(v148, enum case for DIPError.Code.internalError(_:), v150);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  unint64_t v121 = v27;
  uint64_t v122 = v30;
  uint64_t v151 = 0;
  sub_100037944((uint64_t)v37, (uint64_t)v39, &qword_1001C2BA0);
  sub_100037898((uint64_t)v39, (uint64_t)v34, &qword_1001C2BA0);
  uint64_t v42 = v147;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v34, 1, v28) == 1)
  {
    sub_100014BBC((uint64_t)v39, &qword_1001C2BA0);
    BOOL v39 = v34;
LABEL_5:
    char v43 = v146;
LABEL_13:
    sub_100014BBC((uint64_t)v39, &qword_1001C2BA0);
    uint64_t v56 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v43, 1, 1, v56);
  }
  uint64_t v44 = v28;
  int64_t v45 = *(void (**)(char *, char *))(v42 + 32);
  unint64_t v46 = v122;
  uint64_t v120 = v44;
  v45(v122, v34);
  Logotype.subjectLogo.getter();
  uint64_t v47 = type metadata accessor for LogotypeInfo();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v21, 1, v47) == 1)
  {
    int v49 = &qword_1001C2B88;
    uint64_t v50 = (uint64_t)v21;
LABEL_12:
    sub_100014BBC(v50, v49);
    char v43 = v146;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v120);
    goto LABEL_13;
  }
  LogotypeInfo.data.getter();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v47);
  uint64_t v51 = type metadata accessor for LogotypeData();
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v24, 1, v51) == 1)
  {
    int v49 = &qword_1001C2B90;
    uint64_t v50 = (uint64_t)v24;
    goto LABEL_12;
  }
  uint64_t v53 = (uint64_t)v121;
  LogotypeData.image.getter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v51);
  uint64_t v54 = type metadata accessor for LogotypeImage();
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54) == 1)
  {
    int v49 = &qword_1001C2B98;
    uint64_t v50 = v53;
    goto LABEL_12;
  }
  uint64_t v57 = v53;
  uint64_t v58 = v142;
  LogotypeImage.imageDetails.getter();
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v54);
  uint64_t v59 = LogotypeDetails.logotypes.getter();
  v143[1](v58, v144);
  uint64_t v60 = (uint64_t)v145;
  Logotype.readerMetadata.getter();
  uint64_t v61 = sub_100006CC8(&qword_1001C2BA8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48))(v60, 1, v61) == 1)
  {
    sub_100014BBC(v60, &qword_1001C2B78);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v120);
    goto LABEL_5;
  }
  uint64_t v143 = (void (**)(char *, unint64_t))v39;
  unint64_t v144 = v59;
  unint64_t v62 = (uint64_t *)(v60 + *(int *)(v61 + 48));
  uint64_t v63 = *v62;
  uint64_t v64 = v62[1];
  uint64_t v65 = v136;
  uint64_t v66 = v137;
  uint64_t v67 = &v136[*(int *)(v137 + 48)];
  uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v139 + 32);
  uint64_t v69 = v60;
  uint64_t v70 = v140;
  v68(v136, v69, v140);
  *(void *)uint64_t v67 = v63;
  *((void *)v67 + 1) = v64;
  uint64_t v71 = &v65[*(int *)(v66 + 48)];
  uint64_t v73 = *(char **)v71;
  os_log_type_t v72 = (char *)*((void *)v71 + 1);
  os_log_type_t v142 = v73;
  uint64_t v145 = v72;
  uint64_t v74 = v141;
  uint64_t v75 = v65;
  uint64_t v76 = (void (*)(char *, char *, uint64_t))v68;
  v68(v141, (uint64_t)v75, v70);
  uint64_t v138 = sub_10009CE94();
  if (v77 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    uint64_t v78 = 0;
    unint64_t v79 = 0xF000000000000000;
    goto LABEL_24;
  }
  unint64_t v80 = v77;
  unint64_t v81 = v144;
  uint64_t v82 = *(void *)(v144 + 16);
  uint64_t v83 = sub_100006CC8(&qword_1001C2BB0);
  uint64_t v84 = *(void *)(v83 - 8);
  if (v82)
  {
    uint64_t v85 = v133;
    sub_100037898(v81+ ((*(unsigned __int8 *)(*(void *)(v83 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v83 - 8) + 80)), v133, &qword_1001C2BB0);
    uint64_t v86 = 0;
  }
  else
  {
    uint64_t v86 = 1;
    uint64_t v85 = v133;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v85, v86, 1, v83);
  swift_bridgeObjectRelease();
  uint64_t v87 = sub_100006CC8(&qword_1001C2BB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v85, 1, v87) == 1)
  {
    sub_100014BBC(v85, &qword_1001C2B68);
    sub_100009764(v138, v80);
    uint64_t v78 = 0;
    unint64_t v79 = 0xF000000000000000;
    uint64_t v74 = v141;
    goto LABEL_24;
  }
  unint64_t v92 = (unint64_t *)(v85 + *(int *)(v87 + 48));
  unint64_t v94 = *v92;
  uint64_t v93 = v92[1];
  unint64_t v144 = v94;
  uint64_t v137 = v93;
  uint64_t v95 = v130;
  unint64_t v96 = &v130[*(int *)(v131 + 48)];
  uint64_t v97 = v135;
  int v98 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 32);
  v98(v130, v85, v135);
  uint64_t v99 = v137;
  *(void *)unint64_t v96 = v144;
  *((void *)v96 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t v100 = v132;
  v98(v132, (uint64_t)v95, v97);
  unint64_t v144 = v80;
  uint64_t v101 = v151;
  char v102 = HashDigest.equalsHash(of:)();
  if (!v101)
  {
    uint64_t v70 = v140;
    uint64_t v74 = v141;
    if ((v102 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v149 + 104))(v148, enum case for DIPError.Code.idcsCertificateLogoHashMismatch(_:), v150);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_100009764(v138, v144);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v100, v135);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v74, v70);
      (*(void (**)(char *, uint64_t))(v147 + 8))(v122, v120);
      return sub_100014BBC((uint64_t)v143, &qword_1001C2BA0);
    }
    (*(void (**)(char *, uint64_t))(v134 + 8))(v100, v135);
    unint64_t v79 = v144;
    uint64_t v78 = v138;
LABEL_24:
    (*(void (**)(char *, uint64_t))(v147 + 8))(v122, v120);
    sub_100014BBC((uint64_t)v143, &qword_1001C2BA0);
    uint64_t v88 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
    uint64_t v89 = v146;
    v76((char *)v146 + *(int *)(v88 + 20), v74, v70);
    *uint64_t v89 = v78;
    v89[1] = v79;
    os_log_type_t v90 = (uint64_t *)((char *)v89 + *(int *)(v88 + 24));
    uint64_t v91 = v145;
    void *v90 = v142;
    v90[1] = v91;
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v89, 0, 1, v88);
  }
  uint64_t v151 = v101;
  swift_bridgeObjectRelease();
  uint64_t v103 = v129;
  defaultLogger()();
  uint64_t v104 = v134;
  uint64_t v105 = v128;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v128, v100, v97);
  int64_t v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.error.getter();
  int v108 = v107;
  if (os_log_type_enabled(v106, v107))
  {
    LODWORD(v146) = v108;
    int64_t v109 = (uint8_t *)swift_slowAlloc();
    uint64_t v145 = (char *)swift_slowAlloc();
    uint64_t v153 = v145;
    *(_DWORD *)int64_t v109 = 136315138;
    os_log_type_t v142 = (char *)(v109 + 4);
    uint64_t v110 = v125;
    HashDigest.algorithm.getter();
    sub_1000A16D4(&qword_1001C2BB8, (void (*)(uint64_t))&type metadata accessor for AlgorithmIdentifier);
    uint64_t v111 = v127;
    uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v114 = v113;
    uint64_t v115 = v126;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v110, v111);
    uint64_t v152 = sub_10004C3A4(v112, v114, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v116 = *(void (**)(char *, uint64_t))(v104 + 8);
    v116(v128, v135);
    unint64_t v117 = v116;
    _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v146, "Unable to verify logotype data hash, unknown hash algorithm identifier: %s", v109, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v123 + 8))(v129, v124);
    uint64_t v118 = v148;
  }
  else
  {
    unint64_t v117 = *(void (**)(char *, uint64_t))(v104 + 8);
    v117(v105, v97);

    (*(void (**)(char *, uint64_t))(v123 + 8))(v103, v124);
    uint64_t v118 = v148;
    uint64_t v111 = v127;
    uint64_t v115 = v126;
    uint64_t v110 = v125;
  }
  type metadata accessor for IDCSAnalytics();
  uint64_t v119 = v132;
  HashDigest.algorithm.getter();
  static IDCSAnalytics.sendUnknownLogotypeHashAlgorithmIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v110, v111);
  (*(void (**)(char *, void, uint64_t))(v149 + 104))(v118, enum case for DIPError.Code.internalError(_:), v150);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_100009764(v138, v144);
  swift_errorRelease();
  v117(v119, v135);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v141, v140);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v122, v120);
  return sub_100014BBC((uint64_t)v143, &qword_1001C2BA0);
}

unint64_t sub_1000A03A0()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
  uint64_t v160 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v144 = (uint64_t)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v145 = (uint64_t)&v140 - v9;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v161 = *(void *)(v10 - 8);
  uint64_t v162 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v154 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v140 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v157 = (uint64_t)&v140 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v149 = (char *)&v140 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v148 = (char *)&v140 - v21;
  __chkstk_darwin(v20);
  uint64_t v159 = (uint64_t)&v140 - v22;
  uint64_t v23 = sub_100006CC8(&qword_1001C14B8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v158 = (uint64_t)&v140 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v166 = (uint64_t)&v140 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v151 = (char *)&v140 - v29;
  __chkstk_darwin(v28);
  uint64_t v164 = (uint64_t)&v140 - v30;
  uint64_t v31 = sub_100006CC8(&qword_1001C2B60);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v147 = (char *)&v140 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v140 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v152 = (uint64_t)&v140 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v150 = (uint64_t *)((char *)&v140 - v40);
  __chkstk_darwin(v39);
  unsigned int v165 = (uint64_t *)((char *)&v140 - v41);
  uint64_t v42 = v0;
  sub_10009DB54();
  uint64_t v167 = v1;
  uint64_t v146 = v36;
  if (v1)
  {
    id v43 = [self standardUserDefaults];
    v44._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v44._unint64_t object = (void *)0x800000010017EB50;
    Swift::Bool v45 = NSUserDefaults.internalBool(forKey:)(v44);

    if (!v45)
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
      swift_errorRetain();
      unint64_t v54 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000A16D4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      return v54;
    }
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v163 = v6;
    uint64_t v170 = v42;
    if (v48)
    {
      int v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v156 = (void *)swift_slowAlloc();
      *(_DWORD *)int v49 = 138412290;
      swift_errorRetain();
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v169 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v156 = v50;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Ignoring requested fields validation error due to user defaults setting: %@", v49, 0xCu);
      sub_100006CC8(&qword_1001C1350);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v51 = v161;
    uint64_t v52 = v162;
    uint64_t v53 = v159;
    (*(void (**)(char *, uint64_t))(v161 + 8))(v15, v162);
    uint64_t v167 = 0;
  }
  else
  {
    uint64_t v163 = v6;
    uint64_t v170 = v0;
    uint64_t v51 = v161;
    uint64_t v52 = v162;
    uint64_t v53 = v159;
  }
  uint64_t v55 = v160;
  uint64_t v56 = v160 + 56;
  uint64_t v57 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v160 + 56);
  v57(v165, 1, 1, v163);
  uint64_t v58 = type metadata accessor for URL();
  uint64_t v143 = *(void *)(v58 - 8);
  uint64_t v59 = (void *)(v143 + 56);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 56);
  uint64_t v153 = v58;
  v60(v164, 1, 1);
  uint64_t v61 = type metadata accessor for ReaderMetadataProvider(0);
  int v62 = *((unsigned __int8 *)v170 + *(int *)(v61 + 28));
  uint64_t v156 = v59;
  uint64_t v155 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60;
  if (v62 == 2 || (v62 & 1) != 0 || (uint64_t v63 = *v170) == 0)
  {
    uint64_t v76 = v157;
    defaultLogger()();
    unint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      unint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Certificate not present or not issued by Apple: will not read icon metadata, privacy policy URL, or merchant category code", v79, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v76, v52);
    uint64_t v80 = *(int *)(v61 + 24);
    uint64_t v81 = *(uint64_t *)((char *)v170 + v80 + 24);
    uint64_t v159 = *(uint64_t *)((char *)v170 + v80 + 16);
    uint64_t v82 = *(uint64_t *)((char *)v170 + v80 + 32);
    uint64_t v161 = *(uint64_t *)((char *)v170 + v80 + 40);
    uint64_t v162 = v82;
    swift_bridgeObjectRetain();
    uint64_t v157 = v81;
    swift_bridgeObjectRetain();
    uint64_t v154 = 0;
    uint64_t v83 = v163;
    uint64_t v84 = v165;
  }
  else
  {
    uint64_t v157 = v56;
    uint64_t v140 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v57;
    id v64 = v63;
    defaultLogger()();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Certificate is issued by Apple: reading read icon metadata and privacy policy URL", v67, 2u);
      uint64_t v53 = v159;
      swift_slowDealloc();
    }

    uint64_t v70 = *(void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v68 = v51 + 8;
    uint64_t v69 = v70;
    uint64_t v71 = v53;
    uint64_t v72 = v162;
    v70((char *)v71, v162);
    uint64_t v73 = (uint64_t)v151;
    uint64_t v74 = v167;
    SecCertificateRef.privacyPolicyURL.getter();
    if (v74)
    {
      uint64_t v75 = v154;
      defaultLogger()();
      DIPLogError(_:message:log:)();
      swift_errorRelease();
      v69(v75, v72);
    }
    else
    {
      id v101 = v64;
      uint64_t v102 = v61;
      uint64_t v103 = v68;
      uint64_t v104 = v164;
      sub_100014BBC(v164, &qword_1001C14B8);
      uint64_t v105 = v104;
      uint64_t v68 = v103;
      uint64_t v61 = v102;
      id v64 = v101;
      sub_100037944(v73, v105, &qword_1001C14B8);
    }
    int64_t v106 = v150;
    sub_10009EF1C(v150);
    uint64_t v161 = v68;
    uint64_t v141 = v61;
    os_log_type_t v142 = v69;
    uint64_t v167 = 0;
    uint64_t v107 = (uint64_t)v165;
    sub_1000A1608((uint64_t)v106, (uint64_t)v165);
    uint64_t v159 = SecCertificateRef.pseudonym.getter();
    uint64_t v109 = v108;
    uint64_t v110 = v107;
    uint64_t v111 = v152;
    sub_100037898(v110, v152, &qword_1001C2B60);
    uint64_t v112 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
    int v113 = v112(v111, 1, v163);
    sub_100014BBC(v111, &qword_1001C2B60);
    if (v113 == 1 || !v109)
    {
      uint64_t v122 = v149;
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v123 = Logger.logObject.getter();
      int v124 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v123, (os_log_type_t)v124))
      {
        LODWORD(v154) = v124;
        uint64_t v157 = v109;
        uint64_t v125 = swift_slowAlloc();
        uint64_t v152 = swift_slowAlloc();
        uint64_t v169 = v152;
        *(_DWORD *)uint64_t v125 = 136315394;
        uint64_t v126 = (uint64_t)v165;
        swift_beginAccess();
        uint64_t v127 = (uint64_t)v146;
        sub_100037898(v126, (uint64_t)v146, &qword_1001C2B60);
        int v128 = v112(v127, 1, v163);
        uint64_t v129 = 7104878;
        unint64_t v130 = 0xE300000000000000;
        if (v128 != 1)
        {
          uint64_t v131 = v127;
          uint64_t v132 = v145;
          sub_1000A1670(v131, v145);
          sub_1000A171C(v132, v144, type metadata accessor for ReaderMetadataProvider.IconMetadata);
          uint64_t v129 = String.init<A>(describing:)();
          unint64_t v130 = v133;
          sub_1000A1784(v132, type metadata accessor for ReaderMetadataProvider.IconMetadata);
        }
        uint64_t v168 = sub_10004C3A4(v129, v130, &v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v125 + 12) = 2080;
        if (v157) {
          uint64_t v134 = v159;
        }
        else {
          uint64_t v134 = 7104878;
        }
        if (v157) {
          unint64_t v135 = v157;
        }
        else {
          unint64_t v135 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        uint64_t v168 = sub_10004C3A4(v134, v135, &v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v154, "Received icon metadata (%s) and pseudonym (%s), at least one is nil: ignoring MCC, organization and organizational unit", (uint8_t *)v125, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v136 = v149;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v136 = v122;
      }
      v142(v136, v162);
      uint64_t v55 = v160;
      uint64_t v85 = v153;
      uint64_t v138 = (uint64_t)v147;
      uint64_t v139 = v141;
      uint64_t v83 = v163;
      v140(v147, 1, 1, v163);
      uint64_t v84 = v165;
      swift_beginAccess();
      sub_1000A1608(v138, (uint64_t)v84);
      uint64_t v154 = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v159 = 0;
      uint64_t v157 = 0;
      uint64_t v80 = *(int *)(v139 + 24);
      goto LABEL_20;
    }
    unint64_t v114 = v148;
    defaultLogger()();
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v115, v116))
    {
      unint64_t v117 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "Icon metadata and pseudonym are present: reading MCC, forwarding organization and organizational unit", v117, 2u);
      swift_slowDealloc();
    }

    v142(v114, v162);
    uint64_t v118 = v64;
    uint64_t v119 = SecCertificateRef.merchantCategoryCode.getter();
    uint64_t v83 = v163;
    uint64_t v55 = v160;
    uint64_t v84 = v165;
    uint64_t v157 = v109;
    if (v120)
    {

      uint64_t v80 = *(int *)(v141 + 24);
      uint64_t v137 = *(uint64_t *)((char *)v170 + v80 + 32);
      uint64_t v161 = *(uint64_t *)((char *)v170 + v80 + 40);
      uint64_t v162 = v137;
      swift_bridgeObjectRetain();
      uint64_t v154 = 0;
    }
    else
    {
      uint64_t v154 = (char *)[objc_allocWithZone((Class)NSNumber) initWithInteger:v119];

      uint64_t v80 = *(int *)(v141 + 24);
      uint64_t v121 = *(uint64_t *)((char *)v170 + v80 + 32);
      uint64_t v161 = *(uint64_t *)((char *)v170 + v80 + 40);
      uint64_t v162 = v121;
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v85 = v153;
LABEL_20:
  uint64_t v86 = *(void ***)((char *)v170 + v80);
  uint64_t v87 = *(uint64_t *)((char *)v170 + v80 + 8);
  swift_beginAccess();
  uint64_t v88 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48);
  int v89 = v88(v84, 1, v83);
  uint64_t v170 = v86;
  if (v89)
  {
    uint64_t v90 = 0;
    unint64_t v91 = 0xF000000000000000;
  }
  else
  {
    uint64_t v90 = *v84;
    unint64_t v91 = v84[1];
    sub_100009778(*v84, v91);
  }
  uint64_t v92 = 1;
  if (!v88(v84, 1, v83))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v143 + 16))(v166, (char *)v84 + *(int *)(v83 + 20), v85);
    uint64_t v92 = 0;
  }
  v155(v166, v92, 1, v85);
  if (v88(v84, 1, v83))
  {
    uint64_t v93 = 0;
    uint64_t v94 = 0;
  }
  else
  {
    uint64_t v95 = (uint64_t *)((char *)v84 + *(int *)(v83 + 24));
    uint64_t v93 = *v95;
    uint64_t v94 = v95[1];
    swift_bridgeObjectRetain();
  }
  uint64_t v96 = v158;
  uint64_t v97 = (uint64_t)v84;
  uint64_t v98 = v164;
  sub_100037898(v164, v158, &qword_1001C14B8);
  id v99 = objc_allocWithZone((Class)DCPresentmentProposalReaderMetadata);
  swift_bridgeObjectRetain();
  unint64_t v54 = (unint64_t)sub_1000EDFBC((uint64_t)v170, v87, v159, v157, v162, v161, v90, v91, v166, v93, v94, v96, v154);
  sub_100014BBC(v98, &qword_1001C14B8);
  sub_100014BBC(v97, &qword_1001C2B60);
  return v54;
}

__n128 sub_1000A152C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int *a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  uint64_t v11 = (char *)a6 + a5[5];
  uint64_t v12 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  uint64_t v13 = a5[7];
  uint64_t v14 = (char *)a6 + a5[6];
  long long v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
  *((_OWORD *)v14 + 1) = v15;
  __n128 result = *(__n128 *)(a3 + 32);
  *((__n128 *)v14 + 2) = result;
  *((unsigned char *)a6 + v13) = a4;
  return result;
}

unint64_t sub_1000A15D0()
{
  return sub_1000A03A0();
}

uint64_t type metadata accessor for ReaderMetadataProvider.IconMetadata(uint64_t a1)
{
  return sub_1000141A4(a1, qword_1001C2C68);
}

uint64_t sub_1000A1608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006CC8(&qword_1001C2B60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A1670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A16D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A171C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A1784(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A17E4(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(void *))isStackAllocationSafe;
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = sub_1000A1968((uint64_t)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a3, v5);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = sub_1000A1968((uint64_t)v10, v7, a3, v5);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_1000A1968(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  uint64_t v20 = (unint64_t *)result;
  int64_t v7 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    uint64_t v16 = (void *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    v23[0] = *v16;
    v23[1] = v17;
    swift_bridgeObjectRetain();
    char v18 = a4(v23);
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      return result;
    }
    if (v18)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v21++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v24)
  {
LABEL_26:
    swift_retain();
    return sub_100044338(v20, a2, v21, a3);
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v24) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1000A1B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1000A2E40();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_10003E534();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  BOOL v13 = sub_1000A1C68(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1000A1C68(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (int64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

Swift::Int sub_1000A1EE4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000A2B74(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000A1F50(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000A1F50(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1000A263C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    unsigned __int8 v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unsigned int v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_1000A270C((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1000A2B60((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  unsigned int v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unsigned __int8 v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    char v21 = (void *)(v103 + 16 * v20);
    do
    {
      unsigned __int8 v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v11 = sub_1000A29A8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      unsigned int v11 = sub_1000A29A8((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    id v43 = &v11[16 * v41 + 32];
    *(void *)id v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          int v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            unint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        int v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_1000A270C((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        unsigned int v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      unsigned __int8 v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A263C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A270C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      unsigned __int8 v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unsigned __int8 v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)unsigned __int8 v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)unsigned __int8 v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    sub_1000A2AA4((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000A29A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006CC8(&qword_1001C2BC8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000A2AA4(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1000A2B60(uint64_t a1)
{
  return sub_1000A29A8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A2B74(uint64_t a1)
{
  return sub_100068638(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A2B88(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    int64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    int64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    int64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_1000A2E94((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_1000A2C5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (v5 >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      sub_100009778(*a1, v5);
      sub_100009778(v6, v7);
      char v8 = sub_100147900(v4, v5, v6, v7);
      sub_100009764(v6, v7);
      sub_100009764(v4, v5);
      if (v8) {
        goto LABEL_7;
      }
      return 0;
    }
LABEL_5:
    sub_100009778(*a1, v5);
    sub_100009778(v6, v7);
    sub_100009764(v4, v5);
    sub_100009764(v6, v7);
    return 0;
  }
  if (v7 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v9 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = *(uint64_t *)((char *)a1 + v10);
  uint64_t v12 = *(uint64_t *)((char *)a1 + v10 + 8);
  char v13 = (uint64_t *)((char *)a2 + v10);
  if (v11 == *v13 && v12 == v13[1]) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL sub_1000A2DC0(uint64_t *a1)
{
  return (sub_10009EBF4(*a1, a1[1], *(void *)(v1 + 24)) & 1) == 0;
}

uint64_t sub_1000A2DFC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100016F64(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A2E40()
{
  unint64_t result = qword_1001C2BF0;
  if (!qword_1001C2BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C2BF0);
  }
  return result;
}

uint64_t sub_1000A2E94(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_10003E044(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_10003E044(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_10003E044(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  int v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    int v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

BOOL sub_1000A32BC(unsigned __int8 *a1)
{
  return ((*a1 ^ **(unsigned __int8 **)(v1 + 16)) & 1) == 0;
}

uint64_t *sub_1000A32D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      sub_10000354C(*(void *)a2, *(void *)(a2 + 8));
      *uint64_t v4 = v9;
      v4[1] = v7;
    }
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = *(int *)(a3 + 24);
    int64_t v15 = (uint64_t *)((char *)v4 + v14);
    unint64_t v16 = (void *)(a2 + v14);
    uint64_t v17 = v16[1];
    *int64_t v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000A33F4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_1000035EC(*a1, v4);
  }
  int v5 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A3494(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_10000354C(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1000A3560(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v8 = *(void *)a2;
      sub_10000354C(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v9 = *a1;
      unint64_t v10 = a1[1];
      *a1 = v8;
      a1[1] = v6;
      sub_1000035EC(v9, v10);
      goto LABEL_8;
    }
    sub_100014414((uint64_t)a1);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)a2;
  sub_10000354C(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v7;
  a1[1] = v6;
LABEL_8:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *unint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000A3684(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *sub_1000A371C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1[1];
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *a1;
      *a1 = *a2;
      a1[1] = v7;
      sub_1000035EC(v8, v6);
      goto LABEL_6;
    }
    sub_100014414((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v9 = *(int *)(a3 + 20);
  unint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A3800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A3814);
}

uint64_t sub_1000A3814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A382C(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_1000A382C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(v10, a2, v9);
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_1000A38F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A390C);
}

uint64_t sub_1000A390C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000A3924(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_1000A3924(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v12, a2, a2, v11);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000A39EC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for AccountKeySigningKeySignatureProvider(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);

  return sub_1000035EC(v2, v3);
}

void *_s7idcredd37AccountKeySigningKeySignatureProviderVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  swift_retain();
  sub_10000354C(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for AccountKeySigningKeySignatureProvider(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  sub_10000354C(v5, v4);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_1000035EC(v6, v7);
  return a1;
}

__n128 initializeWithTake for AccountKeySigningKeySignatureProvider(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for AccountKeySigningKeySignatureProvider(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1000035EC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountKeySigningKeySignatureProvider(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountKeySigningKeySignatureProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountKeySigningKeySignatureProvider()
{
  return &type metadata for AccountKeySigningKeySignatureProvider;
}

uint64_t sub_1000A3C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v28 = type metadata accessor for Logger();
  __chkstk_darwin(v28);
  uint64_t v3 = type metadata accessor for Insecure.SHA1();
  uint64_t v27 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Insecure.SHA1Digest();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = dispatch thunk of SESKeystore.getPublicKey(of:)();
  unint64_t v12 = v11;
  uint64_t v13 = v10;
  uint64_t v28 = (uint64_t)v9;
  uint64_t v29 = v7;
  sub_1000A415C(&qword_1001C0BB8, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1);
  dispatch thunk of HashFunction.init()();
  unint64_t v14 = v12 >> 62;
  uint64_t v15 = v5;
  unint64_t v16 = v12;
  uint64_t v17 = v13;
  switch(v14)
  {
    case 1uLL:
      if (v13 >> 32 < (int)v13) {
        __break(1u);
      }
      sub_10000354C(v13, v16);
      sub_10006B5CC((int)v13, v13 >> 32);
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v18 = *(void *)(v13 + 24);
      sub_10000354C(v13, v16);
      swift_retain();
      swift_retain();
      sub_10006B5CC(v19, v18);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v30, 0, 14);
      goto LABEL_7;
    default:
      v30[0] = v13;
      LOWORD(v30[1]) = v16;
      BYTE2(v30[1]) = BYTE2(v16);
      BYTE3(v30[1]) = BYTE3(v16);
      BYTE4(v30[1]) = BYTE4(v16);
      BYTE5(v30[1]) = BYTE5(v16);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_1000035EC(v13, v16);
  uint64_t v20 = v6;
  uint64_t v22 = v28;
  uint64_t v21 = v29;
  uint64_t v23 = v27;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v3);
  sub_1000A415C(&qword_1001C0BC0, (void (*)(uint64_t))&type metadata accessor for Insecure.SHA1Digest);
  uint64_t v24 = Digest.data.getter();
  sub_1000035EC(v17, v16);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v20);
  return v24;
}

uint64_t sub_1000A4124()
{
  return sub_1000A3C70(*v0, v0[1], v0[2]);
}

id sub_1000A4130(uint64_t a1, uint64_t a2)
{
  return sub_100142AE0(a1, a2, *(void *)(v2 + 8), *(void *)(v2 + 16));
}

uint64_t sub_1000A415C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A41A4()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000A42C0, 0, 0);
}

uint64_t sub_1000A42C0()
{
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ACLFetcher payloadEncryptionKeyACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000A43F0;
  return sub_1000A5958();
}

uint64_t sub_1000A43F0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000A48FC;
  }
  else
  {
    *(unsigned char *)(v4 + 105) = a1;
    uint64_t v5 = sub_1000A4518;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A4518()
{
  switch(*(unsigned char *)(v0 + 105))
  {
    case 4:
      uint64_t v9 = *(void *)(v0 + 48);
      uint64_t v8 = *(void *)(v0 + 56);
      uint64_t v10 = *(void *)(v0 + 40);
      _StringGuts.grow(_:)(38);
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0xE000000000000000;
      v11._uint64_t countAndFlagsBits = 0xD000000000000024;
      v11._unint64_t object = (void *)0x800000010017EF60;
      String.append(_:)(v11);
      *(unsigned char *)(v0 + 104) = 4;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.idcsUnknownDeviceEncryptionScenario(_:), v10);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      goto LABEL_7;
    default:
      uint64_t v1 = *(void *)(v0 + 96);
      sub_100014D14((void *)(*(void *)(v0 + 32) + 24), *(void *)(*(void *)(v0 + 32) + 48));
      uint64_t v2 = dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:)();
      if (v1)
      {
LABEL_7:
        (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 104))(*(void *)(v0 + 56), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 40));
        swift_errorRetain();
        sub_100102620((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000507C();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
        return v12();
      }
      else
      {
        uint64_t v4 = v2;
        uint64_t v5 = v3;
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v6(v4, v5);
      }
  }
}

uint64_t sub_1000A48FC()
{
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A4A60(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000A4B20, 0, 0);
}

uint64_t sub_1000A4B20()
{
  if (v0[2] == 2)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[7] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1000A4C1C;
    return sub_1000CACC4(0xD000000000000012, 0x8000000100179950);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void, unint64_t))v0[1];
    return v3(0, 0xF000000000000000);
  }
}

uint64_t sub_1000A4C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    return _swift_task_switch(sub_1000A4D80, 0, 0);
  }
}

uint64_t sub_1000A4D80()
{
  unint64_t v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v0[4]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[9];
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v5(v4, v1);
  }
}

uint64_t sub_1000A4F24(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000A5050, 0, 0);
}

uint64_t sub_1000A5050()
{
  uint64_t v1 = v0[2];
  if (v1 == 2)
  {
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Credential uses global binding policy", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v13 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    unint64_t v14 = (void *)swift_task_alloc();
    v0[11] = v14;
    *unint64_t v14 = v0;
    v14[1] = sub_1000A541C;
    return sub_1000CA7B0(0xD000000000000012, 0x8000000100179950);
  }
  else
  {
    if (v1 == 1)
    {
      defaultLogger()();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Credential uses anyBiometricOrPasscode policy", v4, 2u);
        swift_slowDealloc();
      }
      uint64_t v5 = v0[10];
      uint64_t v6 = v0[7];
      uint64_t v7 = v0[8];

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      SecAccessControlCreateFlags v16 = sub_1000A7760(0x40000001uLL, 1);
      unint64_t v18 = v17;
    }
    else
    {
      SecAccessControlCreateFlags v16 = 0;
      unint64_t v18 = 0xF000000000000000;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(SecAccessControlCreateFlags, unint64_t))v0[1];
    return v19(v16, v18);
  }
}

uint64_t sub_1000A541C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000A57F4;
  }
  else {
    uint64_t v4 = sub_1000A5530;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A5530()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 96) aclData];
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v6(v3, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 104))(*(void *)(v0 + 48), enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(void *)(v0 + 32));
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 104))(*(void *)(v0 + 48), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 32));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_1000A57F4()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A5958()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000A5A90, 0, 0);
}

uint64_t sub_1000A5A90()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A5B3C;
  return sub_1000CA7B0(0xD000000000000012, 0x8000000100179950);
}

uint64_t sub_1000A5B3C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000A6074;
  }
  else {
    uint64_t v4 = sub_1000A5C50;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A5C50()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 96) aclType];
    if (v2 == (id)2)
    {
      uint64_t v3 = (uint64_t *)(v0 + 72);
      defaultLogger()();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v4, v5))
      {
        uint64_t v16 = *v3;
        uint64_t v6 = 1;
        goto LABEL_17;
      }
      uint64_t v6 = 1;
      uint64_t v7 = "Device encryption scenario is phonePasscode";
    }
    else if (v2 == (id)1)
    {
      uint64_t v3 = (uint64_t *)(v0 + 80);
      defaultLogger()();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      uint64_t v6 = 0;
      if (!os_log_type_enabled(v4, v5))
      {
        uint64_t v16 = *v3;
        goto LABEL_17;
      }
      uint64_t v7 = "Device encryption scenario is phoneBiometricBinding";
    }
    else
    {
      uint64_t v3 = (uint64_t *)(v0 + 64);
      defaultLogger()();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v4, v5))
      {
        uint64_t v16 = *v3;
        uint64_t v6 = 4;
        goto LABEL_17;
      }
      uint64_t v6 = 4;
      uint64_t v7 = "Device encryption scenario is unknown (phone)";
    }
    uint64_t v16 = *v3;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v10, 2u);
    swift_slowDealloc();
LABEL_17:
    uint64_t v11 = v4;
    uint64_t v12 = *(void *)(v0 + 56);
    uint64_t v13 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v14(v6);
  }
  uint64_t v15 = *(void (**)(void, void, void))(*(void *)(v0 + 32) + 104);
  v15(*(void *)(v0 + 40), enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(void *)(v0 + 24));
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  v15(*(void *)(v0 + 40), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 24));
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000A6074()
{
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A61F4()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  sub_100006CC8(&qword_1001C2D58);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[12] = v4;
  v1[13] = *(void *)(v4 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000A639C, 0, 0);
}

uint64_t sub_1000A639C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ACLFetcher payloadAccessACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[12];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000A64CC;
  return sub_1000A5958();
}

uint64_t sub_1000A64CC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000A7130;
  }
  else
  {
    *(unsigned char *)(v4 + 169) = a1;
    uint64_t v5 = sub_1000A65F4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A65F4()
{
  switch(*(unsigned char *)(v0 + 169))
  {
    case 1:
    case 2:
    case 3:
      uint64_t v3 = *(void *)(v0 + 128);
      sub_100014D14((void *)(*(void *)(v0 + 32) + 24), *(void *)(*(void *)(v0 + 32) + 48));
      uint64_t v4 = dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:)();
      if (v3) {
        goto LABEL_10;
      }
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      uint64_t result = v8(v6, v7);
      break;
    case 4:
      uint64_t v10 = *(void *)(v0 + 48);
      uint64_t v9 = *(void *)(v0 + 56);
      uint64_t v11 = *(void *)(v0 + 40);
      _StringGuts.grow(_:)(38);
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0xE000000000000000;
      v12._uint64_t countAndFlagsBits = 0xD000000000000024;
      v12._unint64_t object = (void *)0x800000010017EF60;
      String.append(_:)(v12);
      *(unsigned char *)(v0 + 168) = 4;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.idcsUnknownDeviceEncryptionScenario(_:), v11);
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
LABEL_10:
      (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 104))(*(void *)(v0 + 56), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 40));
      swift_errorRetain();
      sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v13();
      break;
    default:
      uint64_t v1 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v1;
      *uint64_t v1 = v0;
      v1[1] = sub_1000A6A6C;
      uint64_t result = sub_1000CBB74(0xD000000000000012, 0x8000000100179950);
      break;
  }
  return result;
}

uint64_t sub_1000A6A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[18] = a1;
  v5[19] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_1000A6FB0;
  }
  else
  {
    v5[20] = a2;
    uint64_t v6 = sub_1000A6B94;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000A6B94()
{
  uint64_t v1 = v0[18];
  if ((uint64_t)v0[20] < 1)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v0[5]);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_10:
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  if (*(void *)(v1 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[10] + 16))(v0[8], v1 + ((*(unsigned __int8 *)(v0[10] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[10] + 80)), v0[9]);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_1000A7314(v0[8]);
    goto LABEL_8;
  }
  uint64_t v6 = v0[19];
  uint64_t v7 = v0[4];
  (*(void (**)(void, void, void))(v0[10] + 32))(v0[11], v0[8], v0[9]);
  sub_100014D14((void *)(v7 + 24), *(void *)(v7 + 48));
  uint64_t v8 = UUID.data.getter();
  unint64_t v10 = v9;
  uint64_t v11 = dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:)();
  uint64_t v13 = v12;
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  sub_1000035EC(v8, v10);
  if (v6) {
    goto LABEL_10;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v16(v11, v13);
}

uint64_t sub_1000A6FB0()
{
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A7130()
{
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A72B0()
{
  swift_release();
  sub_10000B9DC(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ACLFetcher()
{
  return self;
}

uint64_t sub_1000A7314(uint64_t a1)
{
  uint64_t v2 = sub_100006CC8(&qword_1001C2D58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

SecAccessControlRef sub_1000A7374(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFErrorRef error = 0;
  SecAccessControlRef v22 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
  if (v22)
  {
    sub_100006CC8(&qword_1001C2D90);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001767E0;
    *(void *)(inited + 32) = 0x63666E2C6573;
    *(void *)(inited + 40) = 0xE600000000000000;
    sub_100006CC8(&qword_1001C2D70);
    uint64_t v14 = swift_initStackObject();
    long long v20 = xmmword_1001768E0;
    *(_OWORD *)(v14 + 16) = xmmword_1001768E0;
    uint64_t v21 = v4;
    *(void *)(v14 + 32) = 0x6665726B63;
    *(void *)(v14 + 40) = 0xE500000000000000;
    *(void *)(v14 + 48) = a1;
    *(void *)(v14 + 56) = a2;
    sub_10000354C(a1, a2);
    *(void *)(inited + 48) = sub_10004ADB4(v14);
    *(void *)(inited + 56) = 0x61752C6C612C6573;
    *(void *)(inited + 64) = 0xE800000000000000;
    uint64_t v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = v20;
    *(void *)(v15 + 32) = 0x6665726B63;
    *(void *)(v15 + 40) = 0xE500000000000000;
    *(void *)(v15 + 48) = a3;
    *(void *)(v15 + 56) = a4;
    sub_10000354C(a3, a4);
    *(void *)(inited + 72) = sub_10004ADB4(v15);
    sub_10004AEDC(inited);
    sub_100006CC8(&qword_1001C2D78);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    SecAccessControlRef v17 = v22;
    SecAccessControlSetConstraints();

    return v17;
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, void, uint64_t))(v10 + 104);
    v19(v12, enum case for DIPError.Code.internalError(_:), v9);
    errorFromCFError(_:_:_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v19(v12, enum case for DIPError.Code.systemSecError(_:), v9);
    swift_errorRetain();
    sub_100102620((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v22;
  }
}

SecAccessControlCreateFlags sub_1000A7760(SecAccessControlCreateFlags a1, char a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFErrorRef error = 0;
  SecAccessControlRef v8 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, a1, &error);
  if (v8)
  {
    SecAccessControlRef v9 = v8;
    unint64_t v10 = sub_10004AB68((uint64_t)_swiftEmptyArrayStorage);
    if (a2)
    {
      unint64_t v11 = sub_10004AEF4((uint64_t)&off_1001B3898);
      uint64_t v22 = sub_100006CC8((uint64_t *)&unk_1001C4980);
      *(void *)&long long v21 = v11;
      sub_10004DCD8(&v21, v20);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v19 = v10;
      sub_100169938(v20, 1852273519, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      unint64_t v10 = v19;
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v10 + 16))
    {
      uint64_t v13 = v9;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      SecAccessControlSetConstraints();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = SecAccessControlCopyData();
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      a1 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.systemSecError(_:), v4);
      a1 = sub_100102620((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000507C();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
    errorFromCFError(_:_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow();
  }
  return a1;
}

SecAccessControlRef sub_1000A7ADC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFErrorRef error = 0;
  SecAccessControlRef v8 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
  if (v8)
  {
    sub_100006CC8(&qword_1001C17D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001767E0;
    *(void *)(inited + 32) = 1818584175;
    *(void *)(inited + 40) = 0xE400000000000000;
    *(unsigned char *)(inited + 48) = 1;
    *(void *)(inited + 72) = &type metadata for Bool;
    *(void *)(inited + 80) = 1852273519;
    *(void *)(inited + 88) = 0xE400000000000000;
    sub_100006CC8(&qword_1001C2D70);
    uint64_t v10 = swift_initStackObject();
    *(_OWORD *)(v10 + 16) = xmmword_1001768E0;
    *(void *)(v10 + 32) = 0x6665726B63;
    *(void *)(v10 + 40) = 0xE500000000000000;
    *(void *)(v10 + 48) = a1;
    *(void *)(v10 + 56) = a2;
    sub_10000354C(a1, a2);
    unint64_t v11 = sub_10004ADB4(v10);
    *(void *)(inited + 120) = sub_100006CC8(&qword_1001C2D78);
    *(void *)(inited + 96) = v11;
    sub_10004AB68(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    SecAccessControlSetConstraints();
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, void, uint64_t))(v5 + 104);
    v13(v7, enum case for DIPError.Code.internalError(_:), v4);
    errorFromCFError(_:_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v13(v7, enum case for DIPError.Code.systemSecError(_:), v4);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v8;
}

uint64_t getEnumTagSinglePayload for ACLFetcher.PayloadProtectionScenario(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ACLFetcher.PayloadProtectionScenario(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A7FC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ACLFetcher.PayloadProtectionScenario()
{
  return &type metadata for ACLFetcher.PayloadProtectionScenario;
}

unint64_t sub_1000A7FFC()
{
  unint64_t result = qword_1001C2D98;
  if (!qword_1001C2D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001C2D98);
  }
  return result;
}

uint64_t sub_1000A8050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v12;
  *uint64_t v12 = v7;
  v12[1] = sub_100007458;
  return sub_1000A8104(a4, a5, a6, a7);
}

uint64_t sub_1000A8104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000A81FC, 0, 0);
}

uint64_t sub_1000A81FC()
{
  char v44 = v0;
  defaultLogger()();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v39 = v0[12];
    uint64_t v40 = v0[11];
    uint64_t v41 = v0[17];
    unint64_t v3 = v0[9];
    uint64_t v38 = v0[8];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[5] = sub_10004C3A4(v5, v7, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[6] = sub_10004C3A4(v38, v3, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "IDCSCoreDataBackfillProvider: performBackfill partitions %s docType %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v8 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v8(v41, v40);
  }
  else
  {
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[12];
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    int v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  v0[18] = v8;
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "In performBackfillOperationsIfUserDefaultDoesNotExist", v14, 2u);
    swift_slowDealloc();
  }
  uint64_t v15 = v0[16];
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[12];

  v0[19] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v15, v16);
  uint64_t v18 = self;
  v0[20] = v18;
  id v19 = [v18 standardUserDefaults];
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v19 stringForKey:v20];

  if (v21)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = v0[15];
    uint64_t v29 = v0[11];
    if (v27)
    {
      uint64_t v42 = v0[15];
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain();
      v0[4] = sub_10004C3A4(v22, v24, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "IDCSCoreDataBackfillProvider idcreddDatabaseBackfillVersion exists %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v8(v42, v29);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v8(v28, v29);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  else
  {
    unsigned __int8 v31 = (void *)swift_task_alloc();
    v0[21] = v31;
    *unsigned __int8 v31 = v0;
    v31[1] = sub_1000A8824;
    uint64_t v32 = v0[9];
    uint64_t v33 = v0[10];
    uint64_t v34 = v0[7];
    uint64_t v35 = v0[8];
    return sub_1000A8D8C(v33, v34, v35, v32, v33);
  }
}

uint64_t sub_1000A8824()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1000A8B8C;
  }
  else {
    os_log_type_t v2 = sub_1000A8938;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A8938()
{
  uint64_t v16 = v0;
  id v1 = [*(id *)(v0 + 160) standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setObject:v2 forKey:v3];

  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 24) = sub_10004C3A4(3223089, 0xE300000000000000, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "IDCSCoreDataBackfillProvider performBackfillOperationsIfUserDefaultDoesNotExist: IDCSDefaultsKeys succesfully updated to %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v6(v7, v8);
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 88);

    v10(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1000A8B8C()
{
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    NSString v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)NSString v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "IDCSCoreDataBackfillProvider caught error %@", v3, 0xCu);
    sub_100006CC8(&qword_1001C1350);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 144))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000A8D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000A8E54, 0, 0);
}

uint64_t sub_1000A8E54()
{
  uint64_t v25 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v22 = v0[9];
    uint64_t v23 = v0[11];
    unint64_t v3 = v0[7];
    uint64_t v21 = v0[10];
    uint64_t v20 = v0[6];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[2] = sub_10004C3A4(v5, v7, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_10004C3A4(v20, v3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "IDCSCoreDataBackfillProvider updateEmptyRegion partitions %s docType %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = v0[9];
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v12 = v0[7];
  uint64_t v11 = v0[8];
  uint64_t v14 = v0[5];
  uint64_t v13 = v0[6];
  uint64_t v15 = v0[4];
  uint64_t v16 = (void *)swift_allocObject();
  v0[12] = v16;
  void v16[2] = v14;
  v16[3] = v13;
  v16[4] = v12;
  v16[5] = v11;
  v16[6] = v15;
  uint64_t v17 = swift_allocObject();
  v0[13] = v17;
  *(void *)(v17 + 16) = sub_1000A9A8C;
  *(void *)(v17 + 24) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[14] = v18;
  void *v18 = v0;
  v18[1] = sub_1000A9220;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v18, sub_100086288, v17, (char *)&type metadata for () + 8);
}

uint64_t sub_1000A9220()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000A93A8;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000A9344;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A9344()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000A93A8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000A9420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a1;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v51 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v46 = (char *)&v42 - v14;
  *(void *)&long long v47 = type metadata accessor for StoredPayload();
  uint64_t v15 = (void *)static StoredPayload.fetchRequest()();
  sub_100044DE0();
  sub_100006CC8(&qword_1001C0878);
  uint64_t v16 = swift_allocObject();
  long long v44 = xmmword_1001768E0;
  *(_OWORD *)(v16 + 16) = xmmword_1001768E0;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10000DB88();
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  swift_bridgeObjectRetain();
  uint64_t v17 = NSPredicate.init(format:_:)();
  if (*(void *)(a6 + 16))
  {
    sub_100006CC8(&qword_1001C08A8);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1001768F0;
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v44;
    *(void *)(v19 + 56) = sub_100006CC8(&qword_1001C3C70);
    *(void *)(v19 + 64) = sub_1000A9AE8();
    *(void *)(v19 + 32) = a6;
    swift_bridgeObjectRetain();
    *(void *)(v18 + 32) = NSPredicate.init(format:_:)();
    *(void *)(v18 + 40) = v17;
    uint64_t v52 = v18;
    specialized Array._endMutation()();
    id v20 = v17;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = [self andPredicateWithSubpredicates:isa];

    [v15 setPredicate:v22];
  }
  else
  {
    [v15 setPredicate:v17];
  }
  uint64_t v23 = (void (*)(char *, uint64_t))v15;
  unint64_t v24 = v49;
  uint64_t v25 = NSManagedObjectContext.fetch<A>(_:)();
  if (v24)
  {
  }
  else
  {
    unint64_t v26 = v25;
    uint64_t v42 = 0;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    BOOL v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    unint64_t v30 = v26 >> 62;
    unint64_t v49 = v26;
    if (!v29)
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_11;
    }
    unint64_t v26 = swift_slowAlloc();
    *(_DWORD *)unint64_t v26 = 134217984;
    if (v30) {
      goto LABEL_25;
    }
    uint64_t v31 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      uint64_t v52 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "IDCSCoreDataBackfillProvider updateEmptyRegion result count: %ld", (uint8_t *)v26, 0xCu);
      swift_slowDealloc();

LABEL_11:
      id v43 = v17;
      *(void *)&long long v44 = v23;
      uint64_t v23 = *(void (**)(char *, uint64_t))(v51 + 8);
      v51 += 8;
      v23(v46, v50);
      if (v30)
      {
        unint64_t v30 = v49;
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v33) {
          goto LABEL_22;
        }
      }
      else
      {
        unint64_t v30 = v49;
        uint64_t v33 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v33) {
          goto LABEL_22;
        }
      }
      if (v33 >= 1) {
        break;
      }
      __break(1u);
LABEL_25:
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v34 = 0;
    unint64_t v35 = v30 & 0xC000000000000001;
    *(void *)&long long v32 = 136315138;
    long long v47 = v32;
    uint64_t v46 = (char *)&type metadata for Any + 8;
    char v48 = v13;
    do
    {
      if (v35) {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v36 = *(id *)(v30 + 8 * v34 + 32);
      }
      char v37 = v36;
      NSString v38 = String._bridgeToObjectiveC()();
      [v37 setRegion:v38];

      defaultLogger()();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = v47;
        *(void *)(v41 + 4) = sub_10004C3A4(21333, 0xE200000000000000, &v52);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "IDCSCoreDataBackfillProvider updateEmptyRegion region updated %s", (uint8_t *)v41, 0xCu);
        swift_arrayDestroy();
        uint64_t v13 = v48;
        swift_slowDealloc();
        unint64_t v30 = v49;
        swift_slowDealloc();
      }

      v23(v13, v50);
      ++v34;
    }
    while (v33 != v34);
LABEL_22:
    swift_bridgeObjectRelease();
    sub_100007290();
  }
}

uint64_t sub_1000A9A3C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000A9A8C(uint64_t a1)
{
  sub_1000A9420(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000A9AB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000A9AE8()
{
  unint64_t result = qword_1001C4970;
  if (!qword_1001C4970)
  {
    sub_100016F64(&qword_1001C3C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C4970);
  }
  return result;
}

uint64_t sub_1000A9B44(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Initializing InaccessiblyEncryptedPayloadProcessor", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_1000A9C98()
{
  uint64_t v2 = v1;
  uint64_t v92 = sub_100006CC8(&qword_1001C12E8);
  uint64_t v3 = *(void *)(v92 - 8);
  uint64_t v4 = __chkstk_darwin(v92);
  uint64_t v91 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v93 = (char *)&v70 - v6;
  uint64_t v89 = type metadata accessor for AnyCodable();
  uint64_t v7 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v88 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v9 = __chkstk_darwin(v95);
  uint64_t v87 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v94 = (char *)&v70 - v12;
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v70 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v71 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v85 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v86 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v82 = v3;
  unint64_t v83 = (void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v79 = v3 + 40;
  uint64_t v80 = v3 + 32;
  uint64_t v81 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v84 = (void (**)(char *, uint64_t))(v11 + 8);
  swift_bridgeObjectRetain_n();
  int64_t v18 = 0;
  uint64_t v19 = _swiftEmptyDictionarySingleton;
  uint64_t v74 = v13;
  uint64_t v77 = _swiftEmptyDictionarySingleton;
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v17));
  uint64_t v21 = (v17 - 1) & v17;
  for (unint64_t i = v20 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v18 << 6))
  {
    unint64_t v75 = v21;
    int64_t v76 = v18;
    uint64_t v26 = *(void *)(v13 + 56);
    BOOL v27 = (uint64_t *)(*(void *)(v13 + 48) + 16 * i);
    uint64_t v28 = v27[1];
    uint64_t v78 = *v27;
    uint64_t v29 = *(void *)(v26 + 8 * i);
    uint64_t v30 = *(void *)(v29 + 16);
    if (v30) {
      break;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    long long v32 = _swiftEmptyDictionarySingleton;
LABEL_40:
    uint64_t v54 = v77;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v54;
    uint64_t v56 = v28;
    unint64_t v58 = sub_10013C484(v78, v28);
    uint64_t v59 = v54[2];
    BOOL v60 = (v57 & 1) == 0;
    uint64_t v61 = v59 + v60;
    if (__OFADD__(v59, v60)) {
      goto LABEL_61;
    }
    char v62 = v57;
    if (v54[3] >= v61)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10009A7CC();
      }
    }
    else
    {
      sub_100098720(v61, isUniquelyReferenced_nonNull_native);
      unint64_t v63 = sub_10013C484(v78, v56);
      if ((v62 & 1) != (v64 & 1)) {
        goto LABEL_65;
      }
      unint64_t v58 = v63;
    }
    uint64_t v19 = v97;
    if (v62)
    {
      uint64_t v65 = v97[7];
      swift_bridgeObjectRelease();
      *(void *)(v65 + 8 * v58) = v32;
    }
    else
    {
      v97[(v58 >> 6) + 8] |= 1 << v58;
      uint64_t v66 = (void *)(v19[6] + 16 * v58);
      *uint64_t v66 = v78;
      v66[1] = v56;
      *(void *)(v19[7] + 8 * v58) = v32;
      uint64_t v67 = v19[2];
      BOOL v23 = __OFADD__(v67, 1);
      uint64_t v68 = v67 + 1;
      if (v23) {
        goto LABEL_63;
      }
      void v19[2] = v68;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int64_t v18 = v76;
    unint64_t v17 = v75;
    uint64_t v13 = v74;
    uint64_t v77 = v19;
    if (v75) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v23 = __OFADD__(v18++, 1);
    if (v23) {
      goto LABEL_62;
    }
    if (v18 >= v71)
    {
LABEL_58:
      swift_release();
LABEL_57:
      swift_bridgeObjectRelease();
      return (uint64_t)v19;
    }
    unint64_t v24 = *(void *)(v70 + 8 * v18);
    if (!v24)
    {
      int64_t v25 = v18 + 1;
      if (v18 + 1 >= v71) {
        goto LABEL_58;
      }
      unint64_t v24 = *(void *)(v70 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v18 + 2;
        if (v18 + 2 >= v71) {
          goto LABEL_58;
        }
        unint64_t v24 = *(void *)(v70 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v18 + 3;
          if (v18 + 3 >= v71) {
            goto LABEL_58;
          }
          unint64_t v24 = *(void *)(v70 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v18 + 4;
            if (v18 + 4 >= v71) {
              goto LABEL_58;
            }
            unint64_t v24 = *(void *)(v70 + 8 * v25);
            if (!v24)
            {
              int64_t v25 = v18 + 5;
              if (v18 + 5 >= v71) {
                goto LABEL_58;
              }
              unint64_t v24 = *(void *)(v70 + 8 * v25);
              if (!v24)
              {
                while (1)
                {
                  int64_t v18 = v25 + 1;
                  if (__OFADD__(v25, 1)) {
                    goto LABEL_64;
                  }
                  if (v18 >= v71) {
                    goto LABEL_58;
                  }
                  unint64_t v24 = *(void *)(v70 + 8 * v18);
                  ++v25;
                  if (v24) {
                    goto LABEL_19;
                  }
                }
              }
            }
          }
        }
      }
      int64_t v18 = v25;
    }
LABEL_19:
    uint64_t v21 = (v24 - 1) & v24;
  }
  uint64_t v72 = v28;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v73 = v29;
  uint64_t v31 = (uint64_t *)(v29 + 40);
  long long v32 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v90 = v30;
    uint64_t v96 = v2;
    uint64_t v34 = *(v31 - 1);
    uint64_t v35 = *v31;
    uint64_t v36 = qword_1001C03F8;
    swift_bridgeObjectRetain_n();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v37 = v89;
    uint64_t v38 = sub_100091338(v89, (uint64_t)qword_1001C4C90);
    (*v86)(v88, v38, v37);
    uint64_t v39 = v94;
    ISO18013IssuerSignedItem.init(digestID:random:elementIdentifier:elementValue:)();
    (*v85)(v87, v39, v95);
    type metadata accessor for CBOREncoder();
    swift_allocObject();
    CBOREncoder.init()();
    sub_1000AB7F4(&qword_1001C2898, (void (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem);
    sub_1000AB7F4(&qword_1001C28A0, (void (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem);
    os_log_type_t v40 = v93;
    uint64_t v41 = v96;
    CBOREncodedCBOR.init(value:tag:encoder:)();
    if (v41)
    {
      (*v84)(v94, v95);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v19 = v77;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    uint64_t v96 = 0;
    (*v83)(v91, v40, v92);
    swift_bridgeObjectRetain();
    int v42 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v32;
    unint64_t v44 = sub_10013C484(v34, v35);
    uint64_t v45 = v32[2];
    BOOL v46 = (v43 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46)) {
      break;
    }
    char v48 = v43;
    if (v32[3] >= v47)
    {
      if (v42)
      {
        long long v32 = v97;
        if (v43) {
          goto LABEL_22;
        }
      }
      else
      {
        sub_10009A7D8();
        long long v32 = v97;
        if (v48) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      sub_10009872C(v47, v42);
      unint64_t v49 = sub_10013C484(v34, v35);
      if ((v48 & 1) != (v50 & 1)) {
        goto LABEL_65;
      }
      unint64_t v44 = v49;
      long long v32 = v97;
      if (v48)
      {
LABEL_22:
        uint64_t v33 = v92;
        (*(void (**)(unint64_t, char *, uint64_t))(v82 + 40))(v32[7] + *(void *)(v82 + 72) * v44, v91, v92);
        goto LABEL_23;
      }
    }
    v32[(v44 >> 6) + 8] |= 1 << v44;
    uint64_t v51 = (uint64_t *)(v32[6] + 16 * v44);
    *uint64_t v51 = v34;
    v51[1] = v35;
    uint64_t v33 = v92;
    (*(void (**)(unint64_t, char *, uint64_t))(v82 + 32))(v32[7] + *(void *)(v82 + 72) * v44, v91, v92);
    uint64_t v52 = v32[2];
    BOOL v23 = __OFADD__(v52, 1);
    uint64_t v53 = v52 + 1;
    if (v23) {
      goto LABEL_60;
    }
    void v32[2] = v53;
    swift_bridgeObjectRetain();
LABEL_23:
    v31 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v81)(v93, v33);
    (*v84)(v94, v95);
    swift_bridgeObjectRelease();
    uint64_t v30 = v90 - 1;
    uint64_t v2 = v96;
    if (v90 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = v72;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AA640()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[2] = v2;
  v1[3] = *(void *)(v2 - 8);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_1000AA6FC, v0, 0);
}

uint64_t sub_1000AA6FC()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.idcsEncryptedPayloadInaccessible(_:), v0[2]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000AB7F4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000AA874(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000AA934, v1, 0);
}

uint64_t sub_1000AA934()
{
  uint64_t v1 = sub_1000A9C98();
  uint64_t v2 = sub_10008DB44(*(void *)(v0 + 16), v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000AAB2C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000AABF0, v2, 0);
}

uint64_t sub_1000AABF0()
{
  uint64_t v1 = sub_1000A9C98();
  uint64_t v2 = sub_1000D4DA4(v0[2], v1, v0[3]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void *))v0[1];
  return v3(v2);
}

uint64_t sub_1000AADE0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000AAEA0, v0, 0);
}

uint64_t sub_1000AAEA0()
{
  uint64_t v1 = sub_1000A9C98();
  uint64_t v2 = sub_100090B78(v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000AB0A4()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[2] = v2;
  v1[3] = *(void *)(v2 - 8);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_1000AB160, v0, 0);
}

uint64_t sub_1000AB160()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.idcsEncryptedPayloadInaccessible(_:), v0[2]);
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000AB7F4((unint64_t *)&qword_1001C0E20, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000AB2D8()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InaccessiblyEncryptedPayloadProcessor()
{
  return self;
}

uint64_t sub_1000AB334()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100007458;
  return sub_1000AA640();
}

uint64_t sub_1000AB3C4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100016B68;
  return sub_1000AA874(a1);
}

uint64_t sub_1000AB45C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100016FDC;
  return sub_1000AAB2C(a1, a2);
}

uint64_t sub_1000AB504(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  return _swift_task_switch(sub_1000AB524, *v1, 0);
}

uint64_t sub_1000AB524()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for COSE_Sign1();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000AB5C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016FDC;
  return sub_1000AADE0();
}

uint64_t sub_1000AB654()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000AB6E4;
  return sub_1000AB0A4();
}

uint64_t sub_1000AB6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_1000AB7F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AB83C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AB864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100014BBC(a1, &qword_1001C0E30);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000ABA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = *v3;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000ABB58, 0, 0);
}

uint64_t sub_1000ABB58()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore credentialIdentifiersInPartitionsDocType", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = (void *)v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (sub_100007C10(v7))
  {
    uint64_t v8 = v0[7];
    uint64_t v10 = v0[4];
    uint64_t v9 = v0[5];
    uint64_t v11 = v0[3];
    uint64_t v12 = (void *)swift_allocObject();
    v0[14] = v12;
    _OWORD v12[2] = v11;
    uint64_t v12[3] = v10;
    v12[4] = v9;
    v12[5] = v8;
    uint64_t v13 = swift_allocObject();
    v0[15] = v13;
    *(void *)(v13 + 16) = sub_1000B9254;
    *(void *)(v13 + 24) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[16] = v14;
    uint64_t v15 = sub_100006CC8(&qword_1001C3070);
    *uint64_t v14 = v0;
    v14[1] = sub_1000ABFC4;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v13, v15);
  }
  else
  {
    uint64_t v17 = v0[9];
    uint64_t v16 = v0[10];
    uint64_t v18 = v0[8];
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0xD000000000000024;
    v20._unint64_t object = (void *)0x800000010017F6B0;
    String.append(_:)(v20);
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t))(v17 + 104);
    v21(v16, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v18);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v21(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    id v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_1000ABFC4()
{
  os_log_type_t v2 = (void *)*v1;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000AC138, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000AC138()
{
  uint64_t v1 = v0[9];
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v1 + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000AC2A0(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000AC3C0, 0, 0);
}

uint64_t sub_1000AC3C0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore getProperties", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[9];
  uint64_t v8 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v9 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v10 = (void *)swift_allocObject();
  v0[12] = v10;
  void v10[2] = v7;
  v10[3] = v9;
  v10[4] = v8;
  uint64_t v11 = swift_allocObject();
  v0[13] = v11;
  *(void *)(v11 + 16) = sub_1000B91C4;
  *(void *)(v11 + 24) = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  unint64_t v13 = sub_1000B91E4();
  *uint64_t v12 = v0;
  v12[1] = sub_1000AC5B0;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044E44, v11, v13);
}

uint64_t sub_1000AC5B0()
{
  os_log_type_t v2 = (void *)*v1;
  v2[15] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000AC724, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000AC724()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000AC894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[19] = v6;
  v4[20] = *(void *)(v6 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[22] = v7;
  v4[23] = *(void *)(v7 - 8);
  v4[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000ACA10, 0, 0);
}

uint64_t sub_1000ACA10()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore createCredential", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (byte_1001C4BB0 == 1
    && (sub_100007A0C(42, 0xE100000000000000, *(void *)(*(void *)(v0 + 120) + 16)) & 1) != 0
    || (sub_100007A0C(*(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(*(void *)(v0 + 120) + 16)) & 1) != 0)
  {
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 152);
    id v10 = *(id *)(v0 + 112);
    UUID.init()();
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v34 = v11;
    *(void *)(v0 + 200) = v33;
    *(void *)(v0 + 208) = v11;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    if (v10)
    {
      id v12 = *(id *)(v0 + 112);
      id v13 = [v12 deleteIncompleteCredentialAfterDays];
      id v14 = [v12 deleteInactiveKeysAfterDays];
      id v10 = [v12 readerAuthenticationPolicy];
      id v15 = [v12 presentmentAuthPolicy];
      id v16 = [v12 payloadProtectionPolicy];
    }
    else
    {
      id v16 = 0;
      id v15 = 0;
      id v14 = 0;
      id v13 = 0;
    }
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 104);
    *(void *)(v0 + 16) = v13;
    *(void *)(v0 + 24) = v14;
    *(void *)(v0 + 32) = v10;
    *(void *)(v0 + 40) = v15;
    *(void *)(v0 + 48) = v16;
    sub_10009BB80((__n128 *)(v0 + 56));
    uint64_t v29 = swift_allocObject();
    *(void *)(v0 + 216) = v29;
    *(void *)(v29 + 16) = v27;
    *(void *)(v29 + 24) = v28;
    *(void *)(v29 + 32) = v33;
    *(void *)(v29 + 40) = v34;
    long long v30 = *(_OWORD *)(v0 + 72);
    *(_OWORD *)(v29 + 48) = *(_OWORD *)(v0 + 56);
    *(_OWORD *)(v29 + 64) = v30;
    *(void *)(v29 + 80) = *(void *)(v0 + 88);
    uint64_t v31 = swift_allocObject();
    *(void *)(v0 + 224) = v31;
    *(void *)(v31 + 16) = sub_1000B97D0;
    *(void *)(v31 + 24) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    long long v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v32;
    *long long v32 = v0;
    v32[1] = sub_1000ACF7C;
    return AsyncCoreDataContainer.performWrite<A>(_:)(v32, sub_1000B983C, v31, (char *)&type metadata for () + 8);
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 96);
    Swift::String v20 = *(void **)(v0 + 104);
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = v21;
    v22._unint64_t object = v20;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = 0xD000000000000023;
    v23._unint64_t object = (void *)0x8000000100179DA0;
    String.append(_:)(v23);
    uint64_t v24 = *(void (**)(uint64_t, void, uint64_t))(v18 + 104);
    v24(v17, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v19);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v24(*(void *)(v0 + 144), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 128));
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
}

uint64_t sub_1000ACF7C()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000AD120;
  }
  else
  {
    swift_release();
    swift_release();
    os_log_type_t v2 = sub_1000AD0A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000AD0A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[26];
  return v1(v2, v3);
}

uint64_t sub_1000AD120()
{
  uint64_t v1 = v0[17];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v1 + 104))(v0[18], enum case for DIPError.Code.internalError(_:), v0[16]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void sub_1000AD2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v7 = sub_100006CC8(&qword_1001C15B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StoredCredential();
  uint64_t v24 = a1;
  uint64_t v14 = *(void *)(a1 + 16);
  id v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v16 = [v15 initWithContext:v14, v23];
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 setPartition:v17];

  [v16 setState:1];
  NSString v18 = String._bridgeToObjectiveC()();
  [v16 setCredentialIdentifier:v18];

  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  Swift::String v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  [v16 setCreatedAt:isa];

  Class v21 = (Class)[v16 createdAt];
  if (v21)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v13, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      Class v21 = 0;
    }
    else
    {
      Class v21 = Date._bridgeToObjectiveC()().super.isa;
      v20(v9, v10);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  [v16 setUpdatedAt:v21];

  id v22 = sub_10009C470(v24);
  [v16 setOptions:v22];

  sub_100007290();
}

uint64_t sub_1000AD5D8(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000AD71C, 0, 0);
}

uint64_t sub_1000AD71C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore getCredentialIdentifiers", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[9];
  uint64_t v7 = (void *)v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (sub_100007C10(v7))
  {
    uint64_t v8 = v0[5];
    uint64_t v9 = v0[3];
    uint64_t v10 = swift_allocObject();
    v0[12] = v10;
    *(void *)(v10 + 16) = v9;
    *(void *)(v10 + 24) = v8;
    uint64_t v11 = swift_allocObject();
    v0[13] = v11;
    *(void *)(v11 + 16) = sub_1000B9774;
    *(void *)(v11 + 24) = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[14] = v12;
    uint64_t v13 = sub_100006CC8(&qword_1001C3070);
    *uint64_t v12 = v0;
    v12[1] = sub_1000ADB74;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v11, v13);
  }
  else
  {
    uint64_t v15 = v0[7];
    uint64_t v14 = v0[8];
    uint64_t v16 = v0[6];
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0xD000000000000024;
    v18._unint64_t object = (void *)0x800000010017F6B0;
    String.append(_:)(v18);
    uint64_t v19 = *(void (**)(uint64_t, void, uint64_t))(v15 + 104);
    v19(v14, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v16);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v19(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_1000ADB74()
{
  os_log_type_t v2 = (void *)*v1;
  v2[15] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000ADCE8, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000ADCE8()
{
  uint64_t v1 = v0[7];
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v1 + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

unint64_t sub_1000ADE50@<X0>(void *a1@<X1>, unint64_t *a2@<X8>)
{
  if (byte_1001C4BB0 == 1 && (sub_10010EE78(42, 0xE100000000000000, a1) & 1) != 0) {
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  else {
    uint64_t v5 = a1;
  }
  unint64_t result = sub_100164254((uint64_t)v5);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000ADEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = *v5;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000AE014, 0, 0);
}

uint64_t sub_1000AE014()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore credentialIdentifiersInPartitionsDocTypeRegion", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v7 = (void *)v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (sub_100007C10(v7))
  {
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[6];
    uint64_t v9 = v0[7];
    uint64_t v12 = v0[4];
    uint64_t v11 = v0[5];
    uint64_t v13 = v0[3];
    uint64_t v14 = (void *)swift_allocObject();
    v0[16] = v14;
    void v14[2] = v13;
    void v14[3] = v12;
    v14[4] = v11;
    v14[5] = v10;
    v14[6] = v9;
    v14[7] = v8;
    uint64_t v15 = swift_allocObject();
    v0[17] = v15;
    *(void *)(v15 + 16) = sub_1000B9718;
    *(void *)(v15 + 24) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[18] = v16;
    uint64_t v17 = sub_100006CC8(&qword_1001C3070);
    *uint64_t v16 = v0;
    v16[1] = sub_1000AE490;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v15, v17);
  }
  else
  {
    uint64_t v19 = v0[11];
    uint64_t v18 = v0[12];
    uint64_t v20 = v0[10];
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0xD000000000000024;
    v22._unint64_t object = (void *)0x800000010017F6B0;
    String.append(_:)(v22);
    uint64_t v23 = *(void (**)(uint64_t, void, uint64_t))(v19 + 104);
    v23(v18, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v20);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v23(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_1000AE490()
{
  os_log_type_t v2 = (void *)*v1;
  v2[19] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000AE604, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000AE604()
{
  uint64_t v1 = v0[11];
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v1 + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

unint64_t sub_1000AE76C@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  if (byte_1001C4BB0 == 1 && (sub_10010EE78(42, 0xE100000000000000, a1) & 1) != 0) {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  else {
    uint64_t v13 = a1;
  }
  unint64_t result = sub_10016524C((uint64_t)v13, a2, a3, a4, a5);
  if (!v6) {
    *a6 = result;
  }
  return result;
}

uint64_t sub_1000AE818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = *v3;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000AE960, 0, 0);
}

uint64_t sub_1000AE960()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CredentialStore activeRegionsInPartitions", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = (void *)v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (sub_100007C10(v7))
  {
    uint64_t v8 = v0[7];
    uint64_t v10 = v0[4];
    uint64_t v9 = v0[5];
    uint64_t v11 = v0[3];
    uint64_t v12 = (void *)swift_allocObject();
    v0[14] = v12;
    _OWORD v12[2] = v11;
    uint64_t v12[3] = v10;
    v12[4] = v9;
    v12[5] = v8;
    uint64_t v13 = swift_allocObject();
    v0[15] = v13;
    *(void *)(v13 + 16) = sub_1000B969C;
    *(void *)(v13 + 24) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[16] = v14;
    uint64_t v15 = sub_100006CC8(&qword_1001C30C0);
    *uint64_t v14 = v0;
    v14[1] = sub_1000AEDCC;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100044784, v13, v15);
  }
  else
  {
    uint64_t v17 = v0[9];
    uint64_t v16 = v0[10];
    uint64_t v18 = v0[8];
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0xD000000000000024;
    v20._unint64_t object = (void *)0x800000010017F6B0;
    String.append(_:)(v20);
    Swift::String v21 = *(void (**)(uint64_t, void, uint64_t))(v17 + 104);
    v21(v16, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v18);
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000507C();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v21(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
    swift_errorRetain();
    sub_100102620((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_1000AEDCC()
{
  os_log_type_t v2 = (void *)*v1;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000AEF40, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v2[2];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_1000AEF40()
{
  uint64_t v1 = v0[9];
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v1 + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_100102620((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000507C();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000AF0A8@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(void *, uint64_t, uint64_t)@<X5>, uint64_t *a5@<X8>)
{
  if (byte_1001C4BB0 == 1 && (sub_10010EE78(42, 0xE100000000000000, a1) & 1) != 0) {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  else {
    uint64_t v11 = a1;
  }
  uint64_t result = a4(v11, a2, a3);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t sub_1000AF14C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  sub_100006CC8(&qword_1001C0E30);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000AF29C, 0, 0);
}