BOOL sub_1000025F8(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  long long v9;
  long long v10;
  unsigned char v11[32];

  v3 = a2;
  if (a1)
  {
    v4 = 0;
    do
    {
      [a1 underlyingToken:v9, v10];
      v5 = *(_DWORD *)&v11[v4];
      if (v3)
      {
        [v3 underlyingToken];
      }
      else
      {
        v9 = 0u;
        v10 = 0u;
      }
      v7 = v5 == *(_DWORD *)((char *)&v9 + v4);
      v6 = v7;
      v7 = !v7 || v4 == 28;
      v4 += 4;
    }
    while (!v7);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1000029C8(uint64_t a1, void *a2)
{
  [a2 ae_map:&stru_10009DE50];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

NSString *__cdecl sub_100002A30(id a1, NEFilterManager *a2)
{
  return (NSString *)[(NEFilterManager *)a2 appBundleIdentifier];
}

void sub_100003D0C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (char *)[v7 status];
  if ((unint64_t)v3 < 2)
  {
    v5 = +[NSAssertionHandler currentHandler];
    v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[AEAConcreteAirPlayPrimitives stopAirPlayingWithCompletion:]_block_invoke");
    [v5 handleFailureInFunction:v6 file:@"AEAConcreteAirPlayPrimitives.m" lineNumber:44 description:@"Should never receve this route setting status %ld" [v7 status]];
  }
  else
  {
    if ((unint64_t)(v3 - 3) < 2)
    {
      v4 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_7:
      v4();
      goto LABEL_10;
    }
    if (v3 == (char *)2)
    {
      v4 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_7;
    }
    v5 = +[NSAssertionHandler currentHandler];
    v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[AEAConcreteAirPlayPrimitives stopAirPlayingWithCompletion:]_block_invoke");
    [v5 handleFailureInFunction:v6 file:@"AEAConcreteAirPlayPrimitives.m" lineNumber:57 description:@"Encountered unknown AirPlay status %ld" status:[v7 status]];
  }

LABEL_10:
}

id *sub_100003E68(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)AEAConcreteOSTransactionToken;
    v5 = (id *)[super init];
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_100003EE8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

id *sub_1000040E4(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)AEAConcreteRestrictedNetworkToken;
    v5 = (id *)[super init];
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_1000044C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000044E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    v2 = [WeakRetained timerSource];
    intptr_t v3 = dispatch_source_testcancel(v2);

    id WeakRetained = v4;
    if (!v3)
    {
      [v4 timerDidFire];
      id WeakRetained = v4;
    }
  }
}

id sub_100004678(uint64_t a1)
{
  v2 = [*(id *)(a1 + 32) timerSource];
  dispatch_source_cancel(v2);

  intptr_t v3 = *(void **)(a1 + 32);

  return [v3 setFireHandler:0];
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for AEAConcreteEnvironment();
  swift_allocObject();
  id v4 = sub_100066490();
  qword_1000B00F0 = (uint64_t)v4;
  v5 = (objc_class *)type metadata accessor for AEAAgent();
  v12[3] = v3;
  v12[4] = &off_1000A2908;
  v12[0] = v4;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_retain_n();
  sub_10005BAB8(v12, (uint64_t)v9, v11);
  sub_100004840((uint64_t)v9);
  id v6 = objc_allocWithZone(v5);
  id v7 = sub_100020804((uint64_t)v11);
  sub_1000048E4((uint64_t)v12);
  swift_release();
  qword_1000B00F8 = (uint64_t)v7;
  sub_100020A90();
  CFRunLoopRun();
  return 0;
}

uint64_t sub_100004840(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AA678);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000048A0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000048E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AEASpringBoardHomeScreenConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10000496C(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100004978(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100004998(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for SecTask(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_100004A00()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100004A4C()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100004AA4()
{
  return Hasher._finalize()();
}

uint64_t sub_100004B0C(uint64_t a1, uint64_t a2)
{
  return sub_100004C78(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004B24(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100004B9C(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100004C1C@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100004C60(uint64_t a1, uint64_t a2)
{
  return sub_100004C78(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004C78(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100004CBC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100004D10()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100004D84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100004DF0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100004E7C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100004EC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

uint64_t sub_100004F04(uint64_t a1)
{
  uint64_t v2 = sub_100005050(&qword_1000AB138, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_100005050(&qword_1000AB140, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004FC0()
{
  return sub_100005050(&qword_1000AB0C0, type metadata accessor for URLResourceKey);
}

uint64_t sub_100005008()
{
  return sub_100005050(&qword_1000AB0C8, type metadata accessor for URLResourceKey);
}

uint64_t sub_100005050(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005098()
{
  return sub_100005050(&qword_1000AB0D0, type metadata accessor for URLResourceKey);
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
}

void type metadata accessor for AEPolicySessionEvent(uint64_t a1)
{
}

void sub_10000511C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100005164()
{
  return sub_100005050((unint64_t *)&qword_1000AB1C0, type metadata accessor for CFString);
}

uint64_t sub_1000051AC()
{
  return sub_100005050(&qword_1000AB1C8, type metadata accessor for CFString);
}

uint64_t sub_1000051F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v5 = a2();
  if (v6)
  {
    char v7 = v5;
    uint64_t v8 = v6;
    sub_100005884(a1, a3);
    uint64_t v9 = type metadata accessor for AEAParticipant(0);
    uint64_t v10 = a3 + *(int *)(v9 + 20);
    *(unsigned char *)uint64_t v10 = v7 & 1;
    *(void *)(v10 + 8) = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v12 = v9;
    uint64_t v13 = a3;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = type metadata accessor for AEAParticipant(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a3;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

uint64_t sub_1000052D8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses;
  uint64_t v2 = sub_1000048A0(&qword_1000AB3E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100005390()
{
  return type metadata accessor for AEACandidateMatchingParticipantSource();
}

uint64_t type metadata accessor for AEACandidateMatchingParticipantSource()
{
  uint64_t result = qword_1000AB328;
  if (!qword_1000AB328) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000053E4()
{
  sub_100005480();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100005480()
{
  if (!qword_1000AB338)
  {
    sub_1000054DC((uint64_t *)&unk_1000AB340);
    unint64_t v0 = type metadata accessor for Published.Publisher();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AB338);
    }
  }
}

uint64_t sub_1000054DC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005524()
{
  uint64_t v1 = sub_1000048A0(&qword_1000AB3D0);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000048A0(&qword_1000AB3D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)(*v0 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *v0 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v12;
  uint64_t v15 = sub_1000048A0(&qword_1000AB3E0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v4, v13, v15);
  v16 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v4[*(int *)(v1 + 76)];
  *v16 = sub_1000057D8;
  v16[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v14;
  sub_100005840(&qword_1000AB3E8, &qword_1000AB3D0);
  sub_100005840(&qword_1000AB3F0, &qword_1000AB3F8);
  swift_retain();
  Publisher<>.removeDuplicates()();
  sub_1000057E0((uint64_t)v4);
  sub_100005840(&qword_1000AB400, &qword_1000AB3D8);
  uint64_t v17 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v17;
}

uint64_t sub_1000057A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000057D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000051F4(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

uint64_t sub_1000057E0(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AB3D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100005840(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000054DC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant.Process(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000058E8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAConcreteMobileKeyBagPrimitives()
{
  return self;
}

uint64_t sub_10000591C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000048A0(&qword_1000AB5F8);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v8);
  uint64_t v10 = &v15[-v9];
  uint64_t v11 = v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL;
  swift_beginAccess();
  sub_1000063DC(v11, (uint64_t)v10);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(a1, v10, v12);
  }
  sub_100006444((uint64_t)v10);
  URL.appendingPathComponent(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v7, a1, v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  swift_beginAccess();
  sub_1000064A4((uint64_t)v7, v11);
  return swift_endAccess();
}

uint64_t sub_100005D88()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = (void *)(v0 + 16);
  sub_100006340((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_10000591C((uint64_t)v11);
  sub_10001B224();
  if (v1) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  }
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v11, v3);
  uint64_t v15 = v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_backing;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v15 + 16))
  {
    v24 = v14;
    v16 = self;
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v25 = 0;
    id v18 = [v16 dataWithPropertyList:isa format:200 options:0 error:&v25];

    id v19 = v25;
    if (v18)
    {
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      sub_100006340(v12, *(void *)(v2 + 40));
      sub_10000591C((uint64_t)v8);
      sub_10001B074();
      v24(v8, v3);
      return sub_100006384(v20, v22);
    }
    else
    {
      v23 = v19;
      _convertNSErrorToError(_:)();

      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1000060C8()
{
  sub_1000048E4(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_directoryURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006444(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL);

  return swift_deallocClassInstance();
}

uint64_t sub_1000061A4()
{
  return _s17WritingScratchpadCMa();
}

uint64_t _s17WritingScratchpadCMa()
{
  uint64_t result = qword_1000AB4F8;
  if (!qword_1000AB4F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000061F8()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_1000062E8();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000062E8()
{
  if (!qword_1000AB508)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AB508);
    }
  }
}

void *sub_100006340(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100006384(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000063DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AB5F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100006444(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AB5F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000064A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AB5F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000650C()
{
  unint64_t result = qword_1000AB608[0];
  if (!qword_1000AB608[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1000AB608);
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASpringBoardAppRestrictionState()
{
  return &type metadata for AEASpringBoardAppRestrictionState;
}

uint64_t destroy for AEASpringBoardHomeScreenConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AEASpringBoardHomeScreenConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AEASpringBoardHomeScreenConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AEASpringBoardHomeScreenConfiguration(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for AEASpringBoardHomeScreenConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASpringBoardHomeScreenConfiguration()
{
  return &type metadata for AEASpringBoardHomeScreenConfiguration;
}

uint64_t sub_10000676C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  long long v3 = *(void **)(a2 + 8);
  if (sub_100006814(*(void **)a1, *(void **)a2))
  {
    if (v2)
    {
      if (v3 && (sub_100006814(v2, v3) & 1) != 0) {
        return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1000067C8(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1000067F8(uint64_t a1, uint64_t a2)
{
  return sub_100006A44(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), *(void **)(a2 + 24));
}

uint64_t sub_100006814(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000068DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    long long v3 = (unsigned __int8 *)(a2 + 48);
    uint64_t v4 = (unsigned __int8 *)(a1 + 48);
    while (2)
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v7 = *((void *)v4 - 1);
      uint64_t v8 = *((void *)v3 - 2);
      uint64_t v9 = *((void *)v3 - 1);
      int v11 = *v3;
      v3 += 24;
      int v10 = v11;
      int v12 = *v4;
      v4 += 24;
      switch(v12)
      {
        case 1:
          if (v10 != 1 || v6 != v8) {
            return 0;
          }
          goto LABEL_10;
        case 2:
          if (v10 != 2) {
            return 0;
          }
          BOOL v14 = v6 == v8 && v7 == v9;
          if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          goto LABEL_10;
        case 3:
          if (v10 != 3) {
            return 0;
          }
          sub_100006DE4(v8, v9, 3);
          sub_100006DE4(v6, v7, 3);
          char v15 = sub_1000068DC(v6, v8);
          sub_100006E08(v8, v9, 3);
          sub_100006E08(v6, v7, 3);
          if ((v15 & 1) == 0) {
            return 0;
          }
          goto LABEL_10;
        default:
          uint64_t result = 0;
          if (v10 || ((((v6 & 1) == 0) ^ v8) & 1) == 0) {
            return result;
          }
LABEL_10:
          if (--v2) {
            continue;
          }
          return 1;
      }
    }
  }
  return 1;
}

uint64_t sub_100006A44(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (sub_100006814(a3, a7))
    {
      if (a4)
      {
        if (a8 && (sub_100006814(a4, a8) & 1) != 0) {
          return 1;
        }
      }
      else if (!a8)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AEASpringBoardHomeScreenConfiguration.Item(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AEAParticipant.Configuration()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AEASpringBoardHomeScreenConfiguration.Item(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AEAParticipant.Configuration(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for AEASpringBoardHomeScreenConfiguration.Item(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAParticipant.Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAParticipant.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100006C1C()
{
  return 0;
}

ValueMetadata *type metadata accessor for AEASpringBoardHomeScreenConfiguration.Item()
{
  return &type metadata for AEASpringBoardHomeScreenConfiguration.Item;
}

uint64_t destroy for AEASpringBoardHomeScreenConfiguration.Layout()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s15assessmentagent37AEASpringBoardHomeScreenConfigurationV6LayoutVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AEASpringBoardHomeScreenConfiguration.Layout(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AEASpringBoardHomeScreenConfiguration.Layout(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration.Layout(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration.Layout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASpringBoardHomeScreenConfiguration.Layout()
{
  return &type metadata for AEASpringBoardHomeScreenConfiguration.Layout;
}

uint64_t sub_100006DE4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100006E08(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100006E34()
{
  _s17AEADeltaPublisherVMa();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100006F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v15 = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v16 = a3;
  long long v17 = v7;
  uint64_t v18 = a4;
  long long v19 = *(_OWORD *)(a2 + 48);
  uint64_t v20 = v8;
  uint64_t v9 = _s13AEACachingMapV22CachingMapSubscriptionCMa();
  int v10 = (uint64_t *)(v4 + *(int *)(a2 + 76));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  swift_retain();
  uint64_t v13 = sub_10000A354(v4, a1, v11, v12);
  swift_release();
  *(void *)&long long v17 = v9;
  *((void *)&v17 + 1) = swift_getWitnessTable();
  *(void *)&long long v15 = v13;
  dispatch thunk of Subscriber.receive(subscription:)();
  return sub_1000048E4((uint64_t)&v15);
}

uint64_t sub_100007068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100006F6C(a1, a4, a2, a3);
}

uint64_t sub_10000707C()
{
  swift_slowDealloc();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 152);
  _s17AEADeltaPublisherVMa();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1000091B4(*(void *)(v0 + *(void *)(*(void *)v0 + 168)));
  sub_100009360(v0 + *(void *)(*(void *)v0 + 192));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100007280()
{
  sub_10000707C();

  return swift_deallocClassInstance();
}

uint64_t _s13AEACachingMapV22CachingMapSubscriptionCMa()
{
  return swift_getGenericMetadata();
}

void sub_1000072EC()
{
  uint64_t v1 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 176));
  os_unfair_lock_lock(v1);
  sub_100007358(v0);

  os_unfair_lock_unlock(v1);
}

uint64_t sub_100007358(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 104);
  uint64_t v5 = *(void *)(*a1 + 128);
  uint64_t v6 = *(void *)(*(void *)(*a1 + 136) + 8);
  uint64_t v7 = *(void *)(*a1 + 144);
  uint64_t v36 = *(void *)(*a1 + 80);
  *(void *)&long long v33 = v36;
  *((void *)&v33 + 1) = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v4;
  *(void *)&long long v34 = v5;
  *((void *)&v34 + 1) = v6;
  uint64_t v35 = v7;
  uint64_t v27 = _s17AEADeltaPublisherVMa();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  __chkstk_darwin(v8, v9);
  v26 = (char *)v25 - v10;
  uint64_t v11 = *(void *)(v2 + 96);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12, v14);
  long long v17 = (char *)v25 - v16;
  uint64_t v18 = *(void *)(v2 + 184);
  if ((*((unsigned char *)a1 + v18) & 1) == 0)
  {
    v25[0] = v7;
    v25[1] = v3;
    *((unsigned char *)a1 + v18) = 1;
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 + 192);
    swift_beginAccess();
    sub_1000092F8(v19, (uint64_t)&v33);
    if (*((void *)&v34 + 1))
    {
      sub_1000091C4((uint64_t)&v33, (uint64_t)v32);
      sub_100009360((uint64_t)&v33);
      sub_100006340(v32, v32[3]);
      dispatch thunk of Cancellable.cancel()();
      sub_1000048E4((uint64_t)v32);
    }
    else
    {
      sub_100009360((uint64_t)&v33);
    }
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    swift_beginAccess();
    sub_100009290((uint64_t)&v33, v19);
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v17, 1, 1, v11);
    uint64_t v20 = (uint64_t)a1 + *(void *)(*a1 + 160);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v20, v17, v12);
    swift_endAccess();
    unint64_t v21 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1);
    uint64_t v22 = (uint64_t)a1 + *(void *)(*a1 + 152);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 40))(v22, v21, v29);
    swift_endAccess();
    v23 = (uint64_t *)((char *)a1 + *(void *)(*a1 + 168));
    uint64_t v24 = *v23;
    uint64_t *v23 = 0;
    v23[1] = 0;
    sub_1000091B4(v24);
    swift_beginAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Dictionary();
    Dictionary.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    swift_beginAccess();
    type metadata accessor for Set();
    Set.removeAll(keepingCapacity:)(0);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1000078C0(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 176));
  os_unfair_lock_lock(v3);
  sub_10000794C(v1, a1, &v5);
  os_unfair_lock_unlock(v3);
  v5();

  return swift_release();
}

uint64_t sub_10000794C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  if ((*(unsigned char *)(result + *(void *)(*(void *)result + 184)) & 1) == 0)
  {
    uint64_t v5 = result + *(void *)(*(void *)result + 192);
    swift_beginAccess();
    sub_1000092F8(v5, (uint64_t)&v7);
    if (v8)
    {
      sub_1000093C0(&v7, (uint64_t)v9);
      sub_1000093C0(v9, (uint64_t)&v7);
      uint64_t v6 = swift_allocObject();
      uint64_t result = sub_1000093C0(&v7, v6 + 16);
      *(void *)(v6 + 56) = a2;
      *a3 = sub_100009410;
      a3[1] = (uint64_t (*)())v6;
      return result;
    }
    uint64_t result = sub_100009360((uint64_t)&v7);
  }
  *a3 = Publishers.AEACombineLatestMany.init(_:);
  a3[1] = 0;
  return result;
}

void sub_100007A74(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 176));
  os_unfair_lock_lock(v3);
  sub_100007AE8(v1, a1);

  os_unfair_lock_unlock(v3);
}

uint64_t sub_100007AE8(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(result + *(void *)(*(void *)result + 184)) & 1) == 0)
  {
    uint64_t v2 = result;
    sub_1000091C4(a2, (uint64_t)v5);
    sub_100009228((uint64_t)v5, (uint64_t)v4);
    uint64_t v3 = v2 + *(void *)(*(void *)v2 + 192);
    swift_beginAccess();
    sub_100009290((uint64_t)v4, v3);
    return swift_endAccess();
  }
  return result;
}

void sub_100007B90(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 176));
  os_unfair_lock_lock(v3);
  sub_100007C04(v1, a1);

  os_unfair_lock_unlock(v3);
}

uint64_t sub_100007C04(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 96);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v16 - v13;
  if ((*((unsigned char *)a1 + *(void *)(v3 + 184)) & 1) == 0)
  {
    uint64_t v15 = (uint64_t)a1 + *(void *)(v4 + 160);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v15, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5))
    {
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      dispatch thunk of Subscriber.receive(completion:)();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return result;
}

uint64_t (*sub_100007E74(uint64_t a1, uint64_t a2, uint64_t a3))@<X0>(uint64_t *a1@<X8>)
{
  void (*v9)(uint64_t (**__return_ptr)@<X0>(uint64_t *@<X8>));

  uint64_t v7 = *(os_unfair_lock_s **)((char *)v3 + *(void *)(*v3 + 176));
  os_unfair_lock_lock(v7);
  sub_100007F14(v3, a1, a2, a3, (uint64_t (**)@<X0>(uint64_t *@<X8>))&v9);
  os_unfair_lock_unlock(v7);
  v9((uint64_t (**)@<X0>(uint64_t *@<X8>))&v9);
  swift_release();
  return (uint64_t (*)@<X0>(uint64_t *@<X8>))v9;
}

uint64_t sub_100007F14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v39 = a2;
  v43 = a5;
  uint64_t v6 = *a1;
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 96);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v15 = *(void *)(v42 + 64);
  uint64_t v17 = __chkstk_darwin(v12, v16);
  uint64_t result = __chkstk_darwin(v17, v18);
  uint64_t v22 = (char *)&v35 - v21;
  v23 = sub_1000082D4;
  if ((*((unsigned char *)a1 + *(void *)(v6 + 184)) & 1) == 0)
  {
    v37 = v20;
    uint64_t v38 = v7;
    uint64_t v25 = (uint64_t)a1 + *(void *)(v7 + 160);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v25, v9);
    uint64_t v26 = v42;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, v8) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    }
    else
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v27(v22, v14, v8);
      uint64_t v28 = (uint64_t)a1 + *(void *)(*a1 + 168);
      uint64_t v29 = *(void (**)(char *))v28;
      if (*(void *)v28)
      {
        uint64_t v36 = *(void *)(v28 + 8);
        uint64_t v30 = v36;
        sub_100009064((uint64_t)v29);
        uint64_t v41 = sub_100008438(v39, v40, v41, v29, v30);
        uint64_t v31 = v37;
        v27(v37, v22, v8);
        unint64_t v32 = (*(unsigned __int8 *)(v26 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
        uint64_t v24 = swift_allocObject();
        uint64_t v33 = v38;
        *(void *)(v24 + 16) = *(void *)(v38 + 80);
        *(void *)(v24 + 24) = *(void *)(v33 + 88);
        *(void *)(v24 + 32) = v8;
        *(_OWORD *)(v24 + 40) = *(_OWORD *)(v33 + 104);
        *(void *)(v24 + 56) = *(void *)(v33 + 120);
        *(_OWORD *)(v24 + 64) = *(_OWORD *)(v33 + 128);
        *(void *)(v24 + 80) = *(void *)(v33 + 144);
        v27((char *)(v24 + v32), v31, v8);
        *(void *)(v24 + ((v15 + v32 + 7) & 0xFFFFFFFFFFFFFFF8)) = v41;
        swift_bridgeObjectRetain();
        uint64_t result = sub_1000091B4((uint64_t)v29);
        v23 = sub_100009110;
        goto LABEL_9;
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v22, v8);
    }
    uint64_t v24 = 0;
    v23 = sub_1000082D4;
    goto LABEL_9;
  }
  uint64_t v24 = 0;
LABEL_9:
  long long v34 = v43;
  *v43 = v23;
  v34[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v24;
  return result;
}

uint64_t sub_1000082D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Subscribers.Demand.none.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000082FC(uint64_t a1)
{
  return sub_1000078C0(a1);
}

void sub_100008320(uint64_t a1)
{
}

uint64_t (*sub_100008344(uint64_t *a1))@<X0>(uint64_t *a1@<X8>)
{
  return sub_100007E74(*a1, a1[1], a1[2]);
}

void sub_100008374(uint64_t a1)
{
}

void sub_100008398()
{
}

uint64_t sub_1000083BC()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t sub_1000083E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000083FC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_10000841C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100008438(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  v94 = a4;
  uint64_t v95 = a5;
  uint64_t v97 = *v5;
  uint64_t v8 = v97;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v99 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness, v10);
  v100 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = v12;
  __chkstk_darwin(v11, v13);
  v104 = (char *)&v76 - v14;
  uint64_t v15 = *(void *)(v8 + 88);
  uint64_t v102 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v102 - 8);
  uint64_t v18 = __chkstk_darwin(v102, v17);
  v103 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  v96 = (char *)&v76 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  v98 = (char *)&v76 - v25;
  uint64_t v107 = v15;
  uint64_t v26 = *(void *)(v15 - 8);
  uint64_t v28 = __chkstk_darwin(v24, v27);
  v86 = (char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  v85 = (char *)&v76 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  v84 = (char *)&v76 - v35;
  __chkstk_darwin(v34, v36);
  v87 = (char *)&v76 - v37;
  uint64_t v101 = *(void *)(v8 + 144);
  uint64_t v108 = AssociatedTypeWitness;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  v93 = (char *)&v76 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = v42;
  __chkstk_darwin(v41, v43);
  v106 = (char *)&v76 - v44;
  swift_bridgeObjectRetain();
  uint64_t v45 = Array.endIndex.getter();
  v79 = v5;
  uint64_t v105 = a1;
  v80 = (void (**)(char *, uint64_t))v26;
  if (!v45)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v46 = (uint64_t)v5 + *(void *)(*v5 + 200);
  v83 = (void (**)(char *, char *, uint64_t))((char *)v5 + *(void *)(*v5 + 208));
  uint64_t v91 = v46;
  swift_beginAccess();
  uint64_t v47 = v16;
  uint64_t v48 = 0;
  v92 = (void (**)(char *, uint64_t *, uint64_t))(v39 + 16);
  v90 = (void (**)(char *, uint64_t))(v39 + 8);
  v89 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v82 = (void (**)(char *, char *, uint64_t))(v26 + 32);
  uint64_t v78 = v47;
  v88 = (void (**)(char *, uint64_t))(v47 + 8);
  v81 = (void (**)(char *, uint64_t))(v26 + 8);
  v49 = v106;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v106, a3+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v48, v38);
    uint64_t v51 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      goto LABEL_12;
    }
LABEL_7:
    uint64_t v52 = a3;
    swift_getAssociatedConformanceWitness();
    swift_bridgeObjectRetain();
    v53 = v98;
    uint64_t v54 = v107;
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();
    (*v90)(v49, v38);
    if ((*v89)(v53, 1, v54) == 1)
    {
      (*v88)(v53, v102);
    }
    else
    {
      v55 = v87;
      uint64_t v56 = v107;
      (*v82)(v87, v53, v107);
      swift_beginAccess();
      type metadata accessor for Set();
      v57 = v96;
      Set.remove(_:)();
      (*v88)(v57, v102);
      swift_endAccess();
      (*v81)(v55, v56);
    }
    a1 = v105;
    a3 = v52;
    ++v48;
    if (v51 == Array.endIndex.getter()) {
      goto LABEL_13;
    }
  }
  uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
  if (v77 != 8) {
    goto LABEL_28;
  }
  uint64_t v109 = result;
  (*v92)(v106, &v109, v38);
  swift_unknownObjectRelease();
  uint64_t v51 = v48 + 1;
  if (!__OFADD__(v48, 1)) {
    goto LABEL_7;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v16 = v78;
LABEL_15:
  swift_bridgeObjectRetain();
  if (Array.endIndex.getter())
  {
    uint64_t v59 = 0;
    uint64_t v60 = *v79;
    v90 = (void (**)(char *, uint64_t))((char *)v79 + *(void *)(*v79 + 200));
    v89 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v79 + *(void *)(v60 + 208));
    v61 = (void (**)(char *, uint64_t *, uint64_t))(v99 + 16);
    v106 = (char *)(v99 + 32);
    v98 = (char *)(v80 + 6);
    v87 = (char *)(v80 + 4);
    v83 = (void (**)(char *, char *, uint64_t))(v80 + 2);
    v82 = (void (**)(char *, char *, uint64_t))(v80 + 7);
    v81 = v80 + 1;
    v92 = (void (**)(char *, uint64_t *, uint64_t))(v99 + 8);
    v80 = (void (**)(char *, uint64_t))(v16 + 8);
    v88 = (void (**)(char *, uint64_t))(v99 + 16);
    uint64_t v62 = v108;
    while (1)
    {
      Swift::Bool v72 = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (v72)
      {
        uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v99 + 16))(v104, a1+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v59, v108);
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v76 != 8) {
          goto LABEL_29;
        }
        uint64_t v109 = result;
        (*v61)(v104, &v109, v108);
        uint64_t result = swift_unknownObjectRelease();
      }
      uint64_t v71 = v59 + 1;
      v73 = v100;
      if (__OFADD__(v59, 1)) {
        break;
      }
      (*(void (**)(char *, char *, uint64_t))v106)(v100, v104, v108);
      v94(v73);
      v74 = v103;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v98)(v103, 1, v107) == 1)
      {
        ((void (*)(char *, uint64_t))*v92)(v73, v108);
        (*v80)(v74, v102);
      }
      else
      {
        v63 = *(void (**)(char *, char *, uint64_t))v87;
        v64 = v84;
        uint64_t v91 = v59 + 1;
        uint64_t v65 = v107;
        v63(v84, v74, v107);
        dispatch thunk of Identifiable.id.getter();
        v66 = *v83;
        v67 = v96;
        (*v83)(v96, v64, v65);
        ((void (*)(char *, void, uint64_t, uint64_t))*v82)(v67, 0, 1, v65);
        swift_beginAccess();
        swift_getAssociatedConformanceWitness();
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        swift_endAccess();
        v66(v86, v64, v65);
        swift_beginAccess();
        type metadata accessor for Set();
        v68 = v85;
        Set.insert(_:)();
        v69 = *v81;
        (*v81)(v68, v65);
        swift_endAccess();
        v61 = (void (**)(char *, uint64_t *, uint64_t))v88;
        uint64_t v70 = v65;
        uint64_t v71 = v91;
        v69(v64, v70);
        ((void (*)(char *, uint64_t))*v92)(v100, v62);
      }
      a1 = v105;
      ++v59;
      if (v71 == Array.endIndex.getter()) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v75 = (uint64_t)v79 + *(void *)(*v79 + 208);
    swift_beginAccess();
    return *(void *)v75;
  }
  return result;
}

uint64_t sub_100009064(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100009074()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 88) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100009110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of Subscriber.receive(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_1000091B4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000091C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100009228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(qword_1000AB690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(qword_1000AB690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000092F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(qword_1000AB690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009360(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(qword_1000AB690);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000093C0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000093D8()
{
  sub_1000048E4(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100009410()
{
  sub_100006340((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of Subscription.request(_:)();
}

uint64_t sub_10000945C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_100009464()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100009500(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000095F8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t sub_100009668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_1000096E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100009774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000097F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_100009874(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000099C0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1000099D4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  size_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, v10);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x100009C44);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v20 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *uint64_t v20 = a2 ^ 0x80000000;
            v20[1] = 0;
          }
          else
          {
            *uint64_t v20 = a2 - 1;
          }
        }
        else if (v7 >= a2)
        {
          uint64_t v21 = *(void (**)(void))(v6 + 56);
          v21();
        }
        else
        {
          if (v9 <= 3) {
            int v17 = ~(-1 << (8 * v9));
          }
          else {
            int v17 = -1;
          }
          if (v9)
          {
            int v18 = v17 & (~v7 + a2);
            if (v9 <= 3) {
              int v19 = v9;
            }
            else {
              int v19 = 4;
            }
            bzero(a1, v9);
            switch(v19)
            {
              case 2:
                *(_WORD *)a1 = v18;
                break;
              case 3:
                *(_WORD *)a1 = v18;
                a1[2] = BYTE2(v18);
                break;
              case 4:
                *(_DWORD *)a1 = v18;
                break;
              default:
                *a1 = v18;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t _s13AEACachingMapVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100009C94()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_100009CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v63 = a2;
  uint64_t v61 = a1;
  uint64_t v6 = *(void **)v4;
  uint64_t v7 = *(void *)(*(void *)v4 + 96);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v64 = *(void *)(v8 - 8);
  uint64_t v65 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v62 = (char *)&v49 - v10;
  uint64_t v69 = v6[10];
  uint64_t v11 = v6[13];
  uint64_t v12 = v6[16];
  uint64_t v66 = v6[17];
  uint64_t v13 = *(void *)(v66 + 8);
  uint64_t v14 = v6[18];
  uint64_t v70 = v69;
  uint64_t v71 = v11;
  uint64_t v57 = v11;
  uint64_t v72 = v12;
  uint64_t v73 = v13;
  uint64_t v58 = v12;
  uint64_t v74 = v14;
  uint64_t v15 = _s17AEADeltaPublisherVMa();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v59 = *(void *)(v16 - 8);
  uint64_t v60 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v54 = (char *)&v49 - v18;
  uint64_t v19 = v5 + v6[19];
  uint64_t v50 = v15;
  uint64_t v20 = *(void *)(v15 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v52(v19, 1, 1, v15);
  uint64_t v21 = (char *)(v5 + *(void *)(*(void *)v5 + 160));
  uint64_t v22 = v7;
  uint64_t v55 = v7;
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
  uint64_t v51 = v23 + 56;
  uint64_t v56 = v24;
  v24(v21, 1, 1, v22);
  uint64_t v25 = (void *)(v5 + *(void *)(*(void *)v5 + 168));
  *uint64_t v25 = 0;
  v25[1] = 0;
  uint64_t v26 = *(void *)(*(void *)v5 + 176);
  uint64_t v27 = (_DWORD *)swift_slowAlloc();
  *(void *)(v5 + v26) = v27;
  *uint64_t v27 = 0;
  *(unsigned char *)(v5 + *(void *)(*(void *)v5 + 184)) = 0;
  uint64_t v28 = v5 + *(void *)(*(void *)v5 + 192);
  *(_OWORD *)uint64_t v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(void *)(v28 + 32) = 0;
  uint64_t v49 = *(void *)(*(void *)v5 + 200);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v53 = v14;
  swift_getAssociatedTypeWitness();
  uint64_t v29 = v6[11];
  swift_getAssociatedConformanceWitness();
  *(void *)(v5 + v49) = Dictionary.init()();
  uint64_t v30 = *(void *)(*(void *)v5 + 208);
  uint64_t v31 = v6[14];
  *(void *)(v5 + v30) = Set.init()();
  uint64_t v32 = v54;
  uint64_t v33 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v54, v61, v50);
  uint64_t v34 = v33;
  v52((uint64_t)v32, 0, 1, v33);
  uint64_t v35 = v5 + *(void *)(*(void *)v5 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 40))(v35, v32, v60);
  swift_endAccess();
  uint64_t v36 = v62;
  uint64_t v37 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v62, v63, v55);
  uint64_t v38 = v36;
  uint64_t v39 = v36;
  uint64_t v40 = v37;
  v56(v38, 0, 1, v37);
  uint64_t v41 = v5 + *(void *)(*(void *)v5 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 40))(v41, v39, v65);
  swift_endAccess();
  uint64_t v42 = (uint64_t *)(v5 + *(void *)(*(void *)v5 + 168));
  uint64_t v43 = *v42;
  uint64_t v44 = v68;
  *uint64_t v42 = v67;
  v42[1] = v44;
  swift_retain();
  sub_1000091B4(v43);
  uint64_t v79 = v5;
  uint64_t v45 = v6[15];
  uint64_t v70 = v69;
  uint64_t v71 = v29;
  uint64_t v72 = v40;
  uint64_t v73 = v57;
  uint64_t v74 = v31;
  uint64_t v75 = v45;
  uint64_t v76 = v58;
  uint64_t v77 = v66;
  uint64_t v78 = v53;
  uint64_t v46 = _s13AEACachingMapV22CachingMapSubscriptionCMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1000221B8((uint64_t)&v79, v34, v46, WitnessTable);
  return v5;
}

uint64_t sub_10000A354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009CB4(a1, a2, a3, a4);
}

uint64_t sub_10000A3E0()
{
  return 1;
}

Swift::Int sub_10000A3E8()
{
  return Hasher._finalize()();
}

void sub_10000A42C()
{
}

Swift::Int sub_10000A454()
{
  return Hasher._finalize()();
}

id sub_10000A4A4()
{
  [*(id *)&v0[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener] invalidate];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AEAClientConnection();
  return [super dealloc];
}

void sub_10000A5BC()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener);
  [v1 setDelegate:v0];
  [v1 resume];
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = sub_10000C954;
  uint64_t v12 = v3;
  uint64_t v7 = _NSConcreteStackBlock;
  uint64_t v8 = 1107296256;
  uint64_t v9 = sub_10005E228;
  uint64_t v10 = &unk_10009E740;
  uint64_t v4 = _Block_copy(&v7);
  swift_release();
  [v2 setInterruptionHandler:v4];
  _Block_release(v4);
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = sub_10000C9CC;
  uint64_t v12 = v5;
  uint64_t v7 = _NSConcreteStackBlock;
  uint64_t v8 = 1107296256;
  uint64_t v9 = sub_10005E228;
  uint64_t v10 = &unk_10009E768;
  uint64_t v6 = _Block_copy(&v7);
  swift_release();
  [v2 setInvalidationHandler:v6];
  _Block_release(v6);
}

uint64_t sub_10000A77C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  aBlock[4] = sub_10000C970;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_10009E790;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_10000C630();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

void sub_10000AA00(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000CB7C(v1, (uint64_t)qword_1000B0110);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136446210;
      swift_getErrorValue();
      uint64_t v4 = sub_100062820(v7);
      sub_1000722AC(v4, v5, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to forward invalidation error to client. Error: %{public}s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10000AC0C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  unint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v0;
  aBlock[4] = sub_10000C9C4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_10009E6F0;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v0;
  static DispatchQoS.unspecified.getter();
  v15[1] = &_swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_10000C630();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

char *sub_10000AEA0(void *a1)
{
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10005FD14(a1, result);
    return (char *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for AEAClientConnection()
{
  return self;
}

uint64_t sub_10000AF58()
{
  if (qword_1000AA5B0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B0218;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_10000AFCC()
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong invalidate];
  }
}

void sub_10000B028()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10000AC0C();
  }
}

id sub_10000B0DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v11);
  id v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)&v3[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_xpcPrimitives];
  id result = [self currentConnection];
  if (result)
  {
    uint64_t v16 = result;
    id v17 = [v14 auditTokenForConnection:result];

    if (qword_1000AA578 != -1) {
      swift_once();
    }
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = v3;
    v18[3] = a1;
    uint64_t v19 = v24;
    v18[4] = v17;
    v18[5] = v19;
    v18[6] = a3;
    aBlock[4] = sub_10000C90C;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10005E228;
    aBlock[3] = &unk_10009E600;
    uint64_t v20 = _Block_copy(aBlock);
    uint64_t v21 = v3;
    id v22 = a1;
    id v23 = v17;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v27 = &_swiftEmptyArrayStorage;
    sub_10000C5D8();
    sub_1000048A0(&qword_1000AB7D8);
    sub_10000C630();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v25);
    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000B400(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10005F7D0(a1, a2, a3, a4, a5);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_10000B53C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10000B5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_10000C5B4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_10009E588;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = &_swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_10000C630();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

uint64_t sub_10000B848(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v7 = (char *)result;
    swift_retain();
    sub_100060074(a1, v7, a2, a3);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10000B8D8(uint64_t (*a1)(void))
{
  return a1(0);
}

unint64_t sub_10000B998()
{
  unint64_t result = qword_1000AB7C8;
  if (!qword_1000AB7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB7C8);
  }
  return result;
}

uint64_t sub_10000B9EC(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return _swift_task_switch(sub_10000BA0C, 0, 0);
}

uint64_t sub_10000BA0C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v2 = (void *)Strong;
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
    v0[19] = v3;
    id v4 = v3;

    v0[2] = v0;
    v0[3] = sub_10000BB78;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100025220;
    v0[13] = &unk_10009E860;
    v0[14] = v5;
    [v4 handleEventWantsBeginSingleAppModeWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10000BB78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_10000CBB8;
  }
  else {
    uint64_t v2 = sub_10000CC00;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000BC88(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return _swift_task_switch(sub_10000BCA8, 0, 0);
}

uint64_t sub_10000BCA8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v2 = (void *)Strong;
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
    v0[19] = v3;
    id v4 = v3;

    v0[2] = v0;
    v0[3] = sub_10000BE14;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100025220;
    v0[13] = &unk_10009E848;
    v0[14] = v5;
    [v4 handleEventWantsEndSingleAppModeWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10000BE14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_10000BF88;
  }
  else {
    uint64_t v2 = sub_10000BF24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000BF24()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000BF88()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10000BFF8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(v4 + 168) = a3;
  *(double *)(v4 + 160) = a4;
  *(void *)(v4 + 144) = a1;
  *(void *)(v4 + 152) = a2;
  return _swift_task_switch(sub_10000C020, 0, 0);
}

uint64_t sub_10000C020()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v2 = (void *)Strong;
  if (Strong)
  {
    Swift::Double v3 = v0[20];
    uint64_t v4 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
    *((void *)v0 + 22) = v4;
    id v5 = v4;

    NSString v6 = String._bridgeToObjectiveC()();
    *((void *)v0 + 23) = v6;
    sub_10000650C();
    Class isa = NSNumber.init(floatLiteral:)(v3).super.super.isa;
    *((void *)v0 + 24) = isa;
    *((void *)v0 + 2) = v0;
    *((void *)v0 + 3) = sub_10000C1E4;
    uint64_t v8 = swift_continuation_init();
    *((void *)v0 + 10) = _NSConcreteStackBlock;
    *((void *)v0 + 11) = 0x40000000;
    *((void *)v0 + 12) = sub_100025220;
    *((void *)v0 + 13) = &unk_10009E878;
    *((void *)v0 + 14) = v8;
    [v5 handleEventWantsPresentBannerWithTitle:v6 duration:isa completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(void))*((void *)v0 + 1);
    return v9();
  }
}

uint64_t sub_10000C1E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    uint64_t v2 = sub_10000C364;
  }
  else {
    uint64_t v2 = sub_10000C2F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000C2F4()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 192);

  Swift::Double v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10000C364()
{
  uint64_t v1 = (void *)v0[24];
  Swift::Double v3 = (void *)v0[22];
  uint64_t v2 = (void *)v0[23];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10000C3E8(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, void *a5)
{
  if (a1)
  {
    swift_errorRetain();
    a2(a1, 1);
    swift_errorRelease();
  }
  else
  {
    uint64_t v9 = (objc_class *)type metadata accessor for AEAClientConnection();
    uint64_t v10 = (char *)objc_allocWithZone(v9);
    *(void *)&v10[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    *(void *)&v10[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_xpcPrimitives] = a4;
    *(void *)&v10[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy] = a5;
    uint64_t v11 = self;
    swift_unknownObjectRetain();
    id v12 = a5;
    uint64_t v13 = v10;
    id v14 = [v11 anonymousListener];
    *(void *)&v13[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener] = v14;

    v16.receiver = v13;
    v16.super_class = v9;
    id v15 = [super init];
    a2((uint64_t)v15, 0);
  }
}

uint64_t sub_10000C534()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10000C56C(uint64_t a1)
{
  sub_10000B53C(a1, *(void *)(v1 + 16));
}

uint64_t sub_10000C574()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000C5B4()
{
  return sub_10000B848(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10000C5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000C5D0()
{
  return swift_release();
}

unint64_t sub_10000C5D8()
{
  unint64_t result = qword_1000AB7D0;
  if (!qword_1000AB7D0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB7D0);
  }
  return result;
}

unint64_t sub_10000C630()
{
  unint64_t result = qword_1000AB7E0;
  if (!qword_1000AB7E0)
  {
    sub_1000054DC(&qword_1000AB7D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB7E0);
  }
  return result;
}

id sub_10000C68C(void *a1)
{
  id v3 = [*(id *)(v1 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_xpcPrimitives) connectionCanPublishAssessmentState:a1];
  if (v3)
  {
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v15 = sub_10000C954;
    uint64_t v16 = v4;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256;
    uint64_t v13 = sub_10005E228;
    id v14 = &unk_10009E650;
    uint64_t v5 = _Block_copy(&v11);
    swift_release();
    [a1 setInterruptionHandler:v5];
    _Block_release(v5);
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v15 = sub_10000C970;
    uint64_t v16 = v6;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256;
    uint64_t v13 = sub_10005E228;
    id v14 = &unk_10009E6A0;
    uint64_t v7 = _Block_copy(&v11);
    swift_release();
    [a1 setInvalidationHandler:v7];
    _Block_release(v7);
    id v8 = [objc_allocWithZone((Class)AEAssessmentStatePublishingXPCInterfaceFactory) init];
    id v9 = [v8 makeInterface];

    [a1 setExportedInterface:v9];
    [a1 setExportedObject:v1];
    [a1 resume];
  }
  else
  {
    [a1 invalidate];
  }
  return v3;
}

uint64_t sub_10000C8BC()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000C90C()
{
  return sub_10000B400(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10000C91C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10000C954()
{
}

void sub_10000C970()
{
}

uint64_t sub_10000C98C()
{
  return _swift_deallocObject(v0, 24, 7);
}

char *sub_10000C9C4()
{
  return sub_10000AEA0(*(void **)(v0 + 16));
}

uint64_t sub_10000C9CC()
{
  return sub_10000A77C(v0);
}

uint64_t sub_10000C9D4(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAClientConnection.ClientConnectionError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AEAClientConnection.ClientConnectionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10000CAECLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAClientConnection.ClientConnectionError()
{
  return &type metadata for AEAClientConnection.ClientConnectionError;
}

unint64_t sub_10000CB28()
{
  unint64_t result = qword_1000AB7E8;
  if (!qword_1000AB7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000AB7E8);
  }
  return result;
}

uint64_t sub_10000CB7C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for AEAConcretePasteboardPrimitives()
{
  return self;
}

void sub_10000CC28()
{
  id v0 = [self generalPasteboard];
  sub_1000048A0(&qword_1000AB8A8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v0 setItems:isa];
}

ValueMetadata *type metadata accessor for AEARecoverFromCrashTask()
{
  return &type metadata for AEARecoverFromCrashTask;
}

uint64_t sub_10000CCCC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1) {
    return a2(0, 0);
  }
  swift_errorRetain();
  a2(a1, 1);

  return swift_errorRelease();
}

uint64_t sub_10000CD44(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain();
  sub_10000CDA0(v5, a1, a2);

  return swift_release();
}

uint64_t sub_10000CDA0(void *a1, void (*a2)(void ***), uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  swift_retain();
  id v7 = [a1 recoverySession];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_10000CF44;
    *(void *)(v9 + 24) = v6;
    uint64_t v16 = sub_10000CF50;
    uint64_t v17 = v9;
    uint64_t v12 = _NSConcreteStackBlock;
    uint64_t v13 = 1107296256;
    id v14 = sub_10005E26C;
    id v15 = &unk_10009E918;
    uint64_t v10 = _Block_copy(&v12);
    swift_retain();
    swift_release();
    [v8 deactivateWithCompletion:v10];
    _Block_release(v10);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
    LOBYTE(v13) = 0;
    a2(&v12);
    return swift_release();
  }
}

uint64_t sub_10000CF0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000CF44(uint64_t a1, char a2)
{
  return sub_100063F90(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10000CF50(uint64_t a1)
{
  return sub_10000CCCC(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_10000CF58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000CF68()
{
  return swift_release();
}

unint64_t sub_10000CF78()
{
  unint64_t result = qword_1000AB8C8;
  if (!qword_1000AB8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB8C8);
  }
  return result;
}

uint64_t sub_10000CFCC()
{
  if (qword_1000AA580 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B01B8;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_10000D034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = sub_1000048A0(&qword_1000AB8E0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_10000D93C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000D2A4;
  aBlock[3] = &unk_10009EAB8;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  [a5 stopAirPlayingWithCompletion:v13];
  _Block_release(v13);
}

uint64_t sub_10000D1DC(char a1)
{
  if (a1)
  {
    memset(v5, 0, 41);
  }
  else
  {
    sub_10000CF78();
    *(void *)&v5[0] = swift_allocError();
    BYTE8(v5[2]) = 1;
  }
  sub_10000D9C8((uint64_t)v5, (uint64_t)v3);
  if (v4)
  {
    v2[0] = v3[0];
    sub_1000048A0(&qword_1000AB8E0);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000DA90((uint64_t)v3, (uint64_t)v2);
    sub_1000048A0(&qword_1000AB8E0);
    CheckedContinuation.resume(returning:)();
  }
  return sub_10000DA30((uint64_t)v5);
}

uint64_t sub_10000D2A4(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

double sub_10000D2F8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10000D308(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(v1 + 1);
  *(void *)(v2 + 48) = v1[3];
  return _swift_task_switch(sub_10000D33C, 0, 0);
}

uint64_t sub_10000D33C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = v8;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  char v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = sub_1000048A0(&qword_1000ADEF0);
  *char v4 = v0;
  v4[1] = sub_10000D454;
  uint64_t v6 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0x6574617669746361, 0xEF293A6874697728, sub_10000D89C, v3, v5);
}

uint64_t sub_10000D454()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10000D590, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10000D590()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000D5F4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10000D624()
{
  return *(void *)(v0 + 16);
}

unsigned char *storeEnumTagSinglePayload for AEAAirPlayActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *double result = a2;
        return result;
      case 2:
        *(_WORD *)double result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)double result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *double result = 0;
      break;
    case 2:
      *(_WORD *)double result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10000D6C8);
    case 4:
      *(_DWORD *)double result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAirPlayActionError()
{
  return &type metadata for AEAAirPlayActionError;
}

unint64_t sub_10000D704()
{
  unint64_t result = qword_1000AB8D0;
  if (!qword_1000AB8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB8D0);
  }
  return result;
}

uint64_t destroy for AEAAirPlayActivation()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for AEAAirPlayActivation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for AEAAirPlayActivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *assignWithTake for AEAAirPlayActivation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AEAAirPlayActivation()
{
  return &type metadata for AEAAirPlayActivation;
}

void sub_10000D89C(uint64_t a1)
{
  sub_10000D034(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10000D8A8()
{
  uint64_t v1 = sub_1000048A0(&qword_1000AB8E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000D93C(char a1)
{
  sub_1000048A0(&qword_1000AB8E0);

  return sub_10000D1DC(a1);
}

uint64_t sub_10000D9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000D9C0()
{
  return swift_release();
}

uint64_t sub_10000D9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(qword_1000AB8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000DA30(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(qword_1000AB8E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000DA90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000ADEF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000DAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_10000DB00()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10000DB90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_10000DC48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_10000DC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_10000DCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_10000DD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_10000DD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_10000DDB4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_10000DF10(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x10000E128);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AEAUnsafeSendable()
{
  return sub_10000E168();
}

uint64_t sub_10000E168()
{
  return swift_getGenericMetadata();
}

void sub_10000E198(Swift::Bool a1)
{
  uint64_t v2 = v1;
  sub_10000650C();
  Class isa = NSNumber.init(BOOLeanLiteral:)(a1).super.super.isa;
  id v5 = String._bridgeToObjectiveC()();
  [v2 setNumber:isa forKey:v5];
}

uint64_t sub_10000E230()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 numberForKey:v1];

  if (!v2) {
    return 2;
  }
  id v3 = [v2 BOOLValue];

  return (uint64_t)v3;
}

unint64_t sub_10000E2AC()
{
  unint64_t result = qword_1000AB970;
  if (!qword_1000AB970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB970);
  }
  return result;
}

uint64_t sub_10000E300()
{
  if (qword_1000AA5C0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B0238;
  swift_bridgeObjectRetain();
  return v0;
}

unsigned char *storeEnumTagSinglePayload for AEASiriActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10000E404);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASiriActionError()
{
  return &type metadata for AEASiriActionError;
}

unint64_t sub_10000E440()
{
  unint64_t result = qword_1000AB978;
  if (!qword_1000AB978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB978);
  }
  return result;
}

uint64_t destroy for AEAKillAgentNotificationListenerActivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return sub_1000048E4(a1 + 32);
}

uint64_t initializeWithCopy for AEAKillAgentNotificationListenerActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2 + 32;
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v7 = v6;
  size_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v8(a1 + 32, v5, v7);
  return a1;
}

void *assignWithCopy for AEAKillAgentNotificationListenerActivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_10000E5F4(a1 + 4, a2 + 4);
  return a1;
}

uint64_t *sub_10000E5F4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        int v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AEAKillAgentNotificationListenerActivation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AEAKillAgentNotificationListenerActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_unknownObjectRelease();
  sub_1000048E4(a1 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAKillAgentNotificationListenerActivation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAKillAgentNotificationListenerActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAKillAgentNotificationListenerActivation()
{
  return &type metadata for AEAKillAgentNotificationListenerActivation;
}

uint64_t sub_10000E950()
{
  *(void *)(v1 + 16) = *(void *)(v0 + 24);
  return _swift_task_switch(sub_10000E974, 0, 0);
}

uint64_t sub_10000E974()
{
  [*(id *)(v0 + 16) invalidate];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000E9E0(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return _swift_task_switch(sub_10000EA00, 0, 0);
}

uint64_t sub_10000EA00()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = qword_1000AA578;
  id v4 = AEKillAssessmentAgentNotificationName;
  if (v3 != -1)
  {
    swift_once();
    uint64_t v1 = *(void *)(v0 + 144);
  }
  uint64_t v5 = *(void **)(v0 + 136);
  uint64_t v6 = qword_1000B01B0;
  sub_10000EE60(v1, v0 + 16);
  uint64_t v7 = swift_allocObject();
  long long v8 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v7 + 64) = v8;
  *(void *)(v7 + 80) = *(void *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v7 + 32) = v9;
  *(void *)(v0 + 120) = sub_10000EEE0;
  *(void *)(v0 + 128) = v7;
  *(void *)(v0 + 88) = _NSConcreteStackBlock;
  *(void *)(v0 + 96) = 1107296256;
  *(void *)(v0 + 104) = sub_10005E228;
  *(void *)(v0 + 112) = &unk_10009ECB0;
  uint64_t v10 = _Block_copy((const void *)(v0 + 88));
  swift_release();
  id v11 = [v2 observeSystemNotificationWithName:v4 onQueue:v6 withHandler:v10];
  _Block_release(v10);

  _OWORD v5[3] = &type metadata for AEAKillAgentNotificationListenerDeactivation;
  v5[4] = &off_10009EDA0;
  uint64_t v12 = (void *)swift_allocObject();
  void *v5 = v12;
  v12[2] = 0xD00000000000003ALL;
  v12[3] = 0x80000001000866C0;
  v12[4] = 4;
  void v12[5] = v11;
  int v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

void sub_10000EBF0()
{
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000CB7C(v0, (uint64_t)qword_1000B0110);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received kill agent notification", v3, 2u);
    swift_slowDealloc();
  }

  exit(9);
}

uint64_t sub_10000ECC0(uint64_t a1)
{
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = sub_10000ED6C;
  v4[17] = a1;
  v4[18] = v1;
  return _swift_task_switch(sub_10000EA00, 0, 0);
}

uint64_t sub_10000ED6C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10000EE60(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000EE98()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 48);

  return _swift_deallocObject(v0, 88, 7);
}

void sub_10000EEE0()
{
}

uint64_t sub_10000EEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000EEF8()
{
  return swift_release();
}

uint64_t sub_10000EF00()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for AEAKillAgentNotificationListenerDeactivation()
{
  return &type metadata for AEAKillAgentNotificationListenerDeactivation;
}

uint64_t sub_10000EF54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  *a2 = &_swiftEmptySetSingleton;
  return result;
}

uint64_t sub_10000EFCC()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000F080()
{
  sub_10000F144();
  swift_release();
  uint64_t v1 = v0 + qword_1000ABA48;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10000F0F0()
{
  sub_10000F080();

  return swift_deallocClassInstance();
}

uint64_t sub_10000F144()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = v0 + qword_1000ABA48;
    swift_retain();
    sub_10000F21C(v1);
    swift_release();
  }
  *(void *)(v0 + 16) = 0;

  return swift_release();
}

uint64_t sub_10000F1B8()
{
  return sub_10000F144();
}

uint64_t sub_10000F1DC(uint64_t (*a1)(uint64_t *))
{
  uint64_t v2 = 0;
  char v3 = 0;
  return a1(&v2);
}

uint64_t sub_10000F21C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2, v3);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v2);
  uint64_t v8 = 0;
  swift_beginAccess();
  sub_1000054DC(&qword_1000ABAD0);
  swift_getTupleTypeMetadata2();
  type metadata accessor for PassthroughSubject();
  sub_10000F558();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  return swift_endAccess();
}

id *sub_10000F394()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 14);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10000F434()
{
  sub_10000F394();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAValueAntiphony()
{
  return sub_10000E168();
}

uint64_t sub_10000F4A4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AEAValueAntiphony.Membership()
{
  return sub_10000E168();
}

unint64_t sub_10000F558()
{
  unint64_t result = qword_1000ABAD8;
  if (!qword_1000ABAD8)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ABAD8);
  }
  return result;
}

unint64_t sub_10000F5B0()
{
  unint64_t v1 = v0;
  sub_1000048A0(&qword_1000ABBA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100080B70;
  v27[0] = kCFUserNotificationAlertHeaderKey;
  CFStringRef v3 = (id)kCFUserNotificationAlertHeaderKey;
  sub_1000048A0(&qword_1000ABBA8);
  sub_1000104A4();
  AnyHashable.init<A>(_:)();
  long long v31 = *v1;
  long long v4 = v31;
  *(void *)(inited + 96) = &type metadata for String;
  *(_OWORD *)(inited + 72) = v4;
  v27[0] = kCFUserNotificationAlertMessageKey;
  sub_100010570((uint64_t)&v31);
  CFStringRef v5 = (id)kCFUserNotificationAlertMessageKey;
  AnyHashable.init<A>(_:)();
  long long v30 = v1[1];
  long long v6 = v30;
  *(void *)(inited + 168) = &type metadata for String;
  *(_OWORD *)(inited + 144) = v6;
  v27[0] = kCFUserNotificationDefaultButtonTitleKey;
  sub_100010570((uint64_t)&v30);
  CFStringRef v7 = (id)kCFUserNotificationDefaultButtonTitleKey;
  AnyHashable.init<A>(_:)();
  long long v29 = v1[2];
  long long v8 = v29;
  *(void *)(inited + 240) = &type metadata for String;
  *(_OWORD *)(inited + 216) = v8;
  v27[0] = kCFUserNotificationAlternateButtonTitleKey;
  sub_100010570((uint64_t)&v29);
  CFStringRef v9 = (id)kCFUserNotificationAlternateButtonTitleKey;
  AnyHashable.init<A>(_:)();
  long long v28 = v1[3];
  long long v10 = v28;
  *(void *)(inited + 312) = &type metadata for String;
  *(_OWORD *)(inited + 288) = v10;
  v27[0] = kCFUserNotificationAlertTopMostKey;
  sub_100010570((uint64_t)&v28);
  CFStringRef v11 = (id)kCFUserNotificationAlertTopMostKey;
  AnyHashable.init<A>(_:)();
  char v12 = *((unsigned char *)v1 + 64);
  *(void *)(inited + 384) = &type metadata for Bool;
  *(unsigned char *)(inited + 360) = v12;
  unint64_t v13 = sub_1000709F0(inited);
  *(void *)&long long v25 = SBUserNotificationDefaultButtonTag;
  id v14 = SBUserNotificationDefaultButtonTag;
  AnyHashable.init<A>(_:)();
  uint64_t v15 = *((unsigned __int8 *)v1 + 65);
  uint64_t v26 = &type metadata for Int;
  *(void *)&long long v25 = v15;
  sub_10001059C(&v25, v24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10006D5A8(v24, (uint64_t)v27, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_1000105AC((uint64_t)v27);
  *(void *)&long long v25 = SBUserNotificationDismissOnLock;
  id v17 = SBUserNotificationDismissOnLock;
  AnyHashable.init<A>(_:)();
  char v18 = *((unsigned char *)v1 + 66);
  uint64_t v26 = &type metadata for Bool;
  LOBYTE(v25) = v18;
  sub_10001059C(&v25, v24);
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10006D5A8(v24, (uint64_t)v27, v19);
  swift_bridgeObjectRelease();
  sub_1000105AC((uint64_t)v27);
  *(void *)&long long v25 = SBUserNotificationDontDismissOnUnlock;
  id v20 = SBUserNotificationDontDismissOnUnlock;
  AnyHashable.init<A>(_:)();
  char v21 = *((unsigned char *)v1 + 67);
  uint64_t v26 = &type metadata for Bool;
  LOBYTE(v25) = v21;
  sub_10001059C(&v25, v24);
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10006D5A8(v24, (uint64_t)v27, v22);
  swift_bridgeObjectRelease();
  sub_1000105AC((uint64_t)v27);
  return v13;
}

uint64_t sub_10000F904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  _OWORD v5[3] = a1;
  return _swift_task_switch(sub_10000F998, 0, 0);
}

uint64_t sub_10000F998()
{
  *(void *)(v0 + 16) = 0;
  if (CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(v0 + 32), *(CFTimeInterval *)(*(void *)(v0 + 40) + 72), (CFOptionFlags *)(v0 + 16)))
  {
    sub_10001026C();
    swift_allocError();
    *(void *)uint64_t v1 = 0;
    *(_WORD *)(v1 + 8) = 256;
    swift_willThrow();
  }
  else
  {
    **(void **)(v0 + 24) = *(void *)(v0 + 16);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10000FAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100010444(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t type metadata accessor for AEAConcreteUserNotificationPrimitives()
{
  return self;
}

uint64_t sub_10000FC40(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  sub_1000048A0(&qword_1000ADE90);
  *(void *)(v1 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_10000FD00, 0, 0);
}

uint64_t sub_10000FD00()
{
  *(_DWORD *)(v0 + 28) = 0;
  CFTimeInterval v1 = *(double *)(*(void *)(v0 + 40) + 72);
  sub_10000F5B0();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFUserNotificationRef v3 = CFUserNotificationCreate(0, v1, 3uLL, (SInt32 *)(v0 + 28), isa);
  *(void *)(v0 + 56) = v3;

  if (v3)
  {
    uint64_t v5 = *(_OWORD **)(v0 + 40);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = v3;
    long long v8 = v5[1];
    long long v9 = v5[2];
    long long v10 = v5[3];
    *(_OWORD *)(v7 + 104) = v5[4];
    *(_OWORD *)(v7 + 88) = v10;
    *(_OWORD *)(v7 + 72) = v9;
    *(_OWORD *)(v7 + 56) = v8;
    *(_OWORD *)(v7 + 40) = *v5;
    CFStringRef v11 = v3;
    sub_1000103E0((uint64_t)v5);
    uint64_t v12 = sub_10000FAA0(v4, (uint64_t)&unk_1000ABB98, v7);
    *(void *)(v0 + 64) = v12;
    unint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v13;
    uint64_t v14 = sub_1000048A0(&qword_1000ACAA0);
    *(void *)(v0 + 80) = v14;
    *unint64_t v13 = v0;
    v13[1] = sub_10000FFCC;
    return Task.result.getter(v0 + 16, v12, &type metadata for UInt, v14, &protocol self-conformance witness table for Error);
  }
  else
  {
    int v15 = *(_DWORD *)(v0 + 28);
    BOOL v16 = v15 < 1;
    uint64_t v17 = v15 & ~(v15 >> 31);
    sub_10001026C();
    swift_allocError();
    *(void *)uint64_t v18 = v17;
    *(_WORD *)(v18 + 8) = v16;
    swift_willThrow();
    swift_task_dealloc();
    char v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_10000FFCC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100010110, 0, 0);
}

uint64_t sub_100010110()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24))
  {
    uint64_t v2 = *(void **)(v0 + 56);
    *(void *)(v0 + 32) = v1;
    swift_errorRetain();
    swift_willThrowTypedImpl();

    sub_100010438(v1, 1);
    swift_task_dealloc();
    CFUserNotificationRef v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void **)(v0 + 56);

    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(BOOL))(v0 + 8);
    return v6(v1 == 1);
  }
}

unint64_t sub_10001026C()
{
  unint64_t result = qword_1000ABB88;
  if (!qword_1000ABB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000ABB88);
  }
  return result;
}

uint64_t sub_1000102C0()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100010320(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000ED6C;
  v5[4] = v4;
  v5[5] = v1 + 40;
  _OWORD v5[3] = a1;
  return _swift_task_switch(sub_10000F998, 0, 0);
}

uint64_t sub_1000103E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100010438(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100010444(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000ADE90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000104A4()
{
  unint64_t result = qword_1000ABBB0;
  if (!qword_1000ABBB0)
  {
    sub_1000054DC(&qword_1000ABBA8);
    sub_100010518();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ABBB0);
  }
  return result;
}

unint64_t sub_100010518()
{
  unint64_t result = qword_1000AB1C0;
  if (!qword_1000AB1C0)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB1C0);
  }
  return result;
}

uint64_t sub_100010570(uint64_t a1)
{
  return a1;
}

_OWORD *sub_10001059C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000105AC(uint64_t a1)
{
  return a1;
}

void *sub_100010600(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10004FA7C(0, v1, 0);
  unint64_t result = (void *)sub_1000508D4(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v4;
  uint64_t v23 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    CFStringRef v11 = (uint64_t *)(*(void *)(a1 + 48) + 40 * v5);
    uint64_t v12 = v11[1];
    uint64_t v24 = *v11;
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    unint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      unint64_t result = (void *)sub_10004FA7C(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    int v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v24;
    v15[5] = v12;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v10);
    if ((v16 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2 << (v5 & 0x3F));
    if (v17)
    {
      int64_t v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v21;
    }
    else
    {
      unint64_t v18 = v10 + 1;
      unint64_t v19 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v21;
      if (v10 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v10)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              unint64_t v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

BOOL sub_100010810(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100010828()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100010870()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10001089C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000108E0()
{
  if (*v0)
  {
    if (qword_1000AA5E8 != -1) {
      swift_once();
    }
    Swift::UInt v1 = &qword_1000B0288;
  }
  else
  {
    if (qword_1000AA5E0 != -1) {
      swift_once();
    }
    Swift::UInt v1 = &qword_1000B0278;
  }
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10001098C()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_1000109AC, 0, 0);
}

uint64_t sub_1000109AC()
{
  CFUserNotificationRef v3 = (uint64_t (*)(void))(*(void *)(*(void *)(v0 + 56) + 104) + **(int **)(*(void *)(v0 + 56) + 104));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100010A78;
  return v3();
}

uint64_t sub_100010A78()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    CFUserNotificationRef v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100010BAC, 0, 0);
  }
}

uint64_t sub_100010BAC()
{
  uint64_t v1 = v0[7];
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v4 = type metadata accessor for AEAConcreteManagedConfigurationRestrictionsApplicator();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000770D8(v3, v2);
  v0[5] = v4;
  v0[6] = &off_1000A3060;
  v0[2] = v5;
  sub_100006340(v0 + 2, v4);
  sub_100079920(0);
  sub_1000048E4((uint64_t)(v0 + 2));
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100010C9C()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_100010CA4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10001AC9C;
  v2[7] = v0;
  return _swift_task_switch(sub_1000109AC, 0, 0);
}

uint64_t sub_100010D4C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001AC9C;
  v3[15] = v2;
  return _swift_task_switch(sub_100011B70, 0, 0);
}

uint64_t sub_100010DF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [a1 stringForKey:v5];

  if (!v6)
  {
    sub_10001A670(v2, (uint64_t)v14);
LABEL_5:
    uint64_t v7 = v14[3];
    uint64_t v9 = v14[4];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  sub_10001A670(v2, (uint64_t)v14);
  if (!v9) {
    goto LABEL_5;
  }
LABEL_6:
  sub_10001A6A8((uint64_t)v14);
  a2[3] = (uint64_t)&type metadata for AEARestrictionsRecoveryDeactivation;
  a2[4] = (uint64_t)&off_10009F3A8;
  uint64_t v10 = swift_allocObject();
  *a2 = v10;
  sub_1000091C4(v2 + 40, v10 + 64);
  uint64_t v11 = *(void *)(v2 + 128);
  uint64_t v12 = *(void *)(v2 + 152);
  *(void *)(v10 + 16) = 0xD000000000000035;
  *(void *)(v10 + 24) = 0x8000000100086B80;
  *(void *)(v10 + 32) = 5;
  *(unsigned char *)(v10 + 40) = 0;
  *(void *)(v10 + 48) = v7;
  *(void *)(v10 + 56) = v9;
  *(void *)(v10 + 104) = v11;
  *(_OWORD *)(v10 + 112) = *(_OWORD *)(v2 + 136);
  *(void *)(v10 + 128) = v12;
  swift_retain();
  return swift_retain();
}

uint64_t sub_100010F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return _swift_task_switch(sub_100010F8C, 0, 0);
}

uint64_t sub_100010F8C()
{
  uint64_t v1 = v0[16];
  uint64_t v31 = v0[13];
  uint64_t v29 = v0[14];
  uint64_t v30 = *(void *)(v1 + 24);
  uint64_t v24 = *(void *)(v1 + 32);
  sub_1000091C4(v1 + 40, (uint64_t)(v0 + 2));
  sub_1000091C4(v1 + 80, (uint64_t)(v0 + 7));
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 136);
  uint64_t v27 = *(void *)(v1 + 144);
  uint64_t v28 = *(void *)(v1 + 128);
  long long v23 = *(_OWORD *)(v1 + 152);
  char v25 = *(unsigned char *)(v1 + 169);
  char v26 = *(unsigned char *)(v1 + 168);
  uint64_t v4 = v0[5];
  uint64_t v5 = sub_100019D8C((uint64_t)(v0 + 2), v4);
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v7, v5, v4);
  uint64_t v8 = v0[10];
  uint64_t v9 = sub_100019D8C((uint64_t)(v0 + 7), v8);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v11, v9, v8);
  uint64_t v22 = *v7;
  uint64_t v12 = *v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10001935C(v30, v24, v22, v12, v2, v28, v3, v27, v23, v29, v13, v26, v25);
  sub_1000048E4((uint64_t)(v0 + 7));
  swift_task_dealloc();
  sub_1000048E4((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v15 = *(void *)(v1 + 32);
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v31;
  v17[3] = v16;
  v17[4] = v15;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_100012700((uint64_t)sub_10001A624, (uint64_t)v17);
  unint64_t v18 = (uint64_t *)v0[12];
  swift_release();
  v18[3] = (uint64_t)&type metadata for AEARestrictionsDeactivation;
  v18[4] = (uint64_t)&off_10009F3C8;
  uint64_t v19 = swift_allocObject();
  *unint64_t v18 = v19;
  swift_unknownObjectRelease();
  *(void *)(v19 + 16) = 0xD00000000000002CLL;
  *(void *)(v19 + 24) = 0x8000000100086B30;
  *(void *)(v19 + 32) = 5;
  *(unsigned char *)(v19 + 40) = 0;
  *(void *)(v19 + 48) = v14;
  unint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

void sub_100011324(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 setString:v2 forKey:v3];

  id v15 = 0;
  unsigned int v4 = [a1 persistWithError:&v15];
  id v5 = v15;
  if (v4)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1000AA560 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000CB7C(v8, (uint64_t)qword_1000B0170);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v15 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      swift_getErrorValue();
      uint64_t v12 = sub_100062820(v14);
      sub_1000722AC(v12, v13, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to persist restriction scratchpad. Error: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100011608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *os_log_type_t v10 = v5;
  v10[1] = sub_10000ED6C;
  v10[15] = a4;
  v10[16] = v4;
  v10[13] = a2;
  v10[14] = a3;
  v10[12] = a1;
  return _swift_task_switch(sub_100010F8C, 0, 0);
}

uint64_t sub_1000116D8()
{
  if (v0[28])
  {
    uint64_t v1 = v0[28];
  }
  else
  {
    uint64_t v2 = v0[2];
    uint64_t v3 = v0[3];
    sub_1000091C4((uint64_t)(v0 + 9), (uint64_t)v19);
    sub_1000091C4((uint64_t)(v0 + 4), (uint64_t)v17);
    uint64_t v4 = v0[20];
    uint64_t v5 = v0[21];
    uint64_t v6 = sub_100019D8C((uint64_t)v19, v20);
    __chkstk_darwin(v6, v6);
    uint64_t v8 = (uint64_t *)&v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v10 = sub_100019D8C((uint64_t)v17, v18);
    __chkstk_darwin(v10, v10);
    uint64_t v12 = (uint64_t *)&v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    uint64_t v14 = *v8;
    uint64_t v15 = *v12;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v1 = sub_100019048(v2, v3, v14, v15, v4, v5);
    sub_1000048E4((uint64_t)v17);
    sub_1000048E4((uint64_t)v19);
    v0[28] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1000118F8()
{
  if (v0[29])
  {
    uint64_t v1 = v0[29];
  }
  else
  {
    uint64_t v2 = v0;
    sub_1000091C4((uint64_t)(v0 + 4), (uint64_t)v19);
    uint64_t v4 = v0[20];
    uint64_t v3 = v0[21];
    uint64_t v5 = sub_100019D8C((uint64_t)v19, v20);
    __chkstk_darwin(v5, v5);
    uint64_t v7 = (void *)((char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    uint64_t v9 = *v7;
    uint64_t v10 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
    v18[3] = v10;
    v18[4] = &off_10009FBF0;
    v18[0] = v9;
    type metadata accessor for AEAHomeScreenConfigurer();
    uint64_t v1 = swift_allocObject();
    uint64_t v11 = sub_100019D8C((uint64_t)v18, v10);
    __chkstk_darwin(v11, v11);
    uint64_t v13 = (void *)((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    uint64_t v15 = *v13;
    *(void *)(v1 + 40) = v10;
    *(void *)(v1 + 48) = &off_10009FBF0;
    *(void *)(v1 + 16) = v15;
    type metadata accessor for CATSerializer();
    swift_allocObject();
    swift_retain();
    uint64_t v16 = CATSerializer.init()();
    *(void *)(v1 + 64) = v3;
    *(void *)(v1 + 72) = v16;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(void *)(v1 + 144) = 0;
    *(void *)(v1 + 56) = v4;
    sub_1000048E4((uint64_t)v18);
    sub_1000048E4((uint64_t)v19);
    v2[29] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_100011B50()
{
  *(void *)(v1 + 120) = v0;
  return _swift_task_switch(sub_100011B70, 0, 0);
}

uint64_t sub_100011B70()
{
  uint64_t v1 = v0[15];
  *(unsigned char *)(v1 + 192) = 0;
  swift_beginAccess();
  sub_1000685F0();
  swift_endAccess();
  uint64_t v2 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = 0;
  *(void *)(v1 + 208) = 0;
  sub_1000091B4(v2);
  uint64_t v3 = *(void **)(v1 + 216);
  if (v3) {
    [v3 cancel];
  }
  *(void *)(v1 + 216) = 0;
  swift_unknownObjectRelease();
  v0[16] = sub_1000118F8();
  swift_retain();
  uint64_t v4 = CATSerializer.enqueue<A>(respectingCancelAll:_:)();
  v0[17] = v4;
  swift_release();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  uint64_t v6 = sub_1000048A0(&qword_1000ACAA0);
  void *v5 = v0;
  v5[1] = sub_100011CE0;
  return Task.value.getter(v6, v4, (char *)&type metadata for () + 8, v6, &protocol self-conformance witness table for Error);
}

uint64_t sub_100011CE0()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_1000121E0;
  }
  else
  {
    uint64_t v2 = sub_100011DFC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100011DFC()
{
  swift_release();
  swift_release();
  uint64_t v1 = sub_1000116D8();
  *(void *)(v0 + 160) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v2;
  void *v2 = v0;
  v2[1] = sub_100011EC4;
  v2[9] = v1;
  return _swift_task_switch(sub_100015638, v1, 0);
}

uint64_t sub_100011EC4()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100012470;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100011FE0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100011FE0()
{
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(*(void *)(v0 + 120) + 128) + **(int **)(*(void *)(v0 + 120) + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000120AC;
  return v3();
}

uint64_t sub_1000120AC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000124D4, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000121E0()
{
  uint64_t v11 = v0;
  swift_release();
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0110);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    swift_getErrorValue();
    uint64_t v5 = sub_100062820(v0[6]);
    v0[14] = sub_1000722AC(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to tear down home screen configuration session: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = sub_1000116D8();
  v0[20] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[21] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100011EC4;
  v8[9] = v7;
  return _swift_task_switch(sub_100015638, v7, 0);
}

uint64_t sub_100012470()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000124D4()
{
  uint64_t v10 = v0;
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0110);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    swift_getErrorValue();
    uint64_t v5 = sub_100062820(v0[9]);
    v0[11] = sub_1000722AC(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "An error occurred while tearing down single app mode: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100012700(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(v2 + 192) & 1) == 0)
  {
    *(unsigned char *)(v2 + 192) = 1;
    uint64_t v3 = *(void *)(v2 + 200);
    *(void *)(v2 + 200) = result;
    *(void *)(v2 + 208) = a2;
    swift_retain();
    sub_1000091B4(v3);
    sub_1000686DC();
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v2 + 184) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v2 + 184) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_100019918;
    *(void *)(v5 + 24) = v4;
    sub_1000048A0(&qword_1000ABFE0);
    sub_100005840(&qword_1000ABFE8, &qword_1000ABFE0);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_beginAccess();
    sub_1000048A0(&qword_1000ABFF0);
    sub_100005840(&qword_1000ABFF8, &qword_1000ABFF0);
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100012934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8, v9);
  uint64_t v10 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000048A0(&qword_1000ADE90);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
    sub_100019928(a1, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    uint64_t v18 = static MainActor.shared.getter();
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    int64_t v21 = (void *)swift_allocObject();
    v21[2] = v18;
    v21[3] = &protocol witness table for MainActor;
    v21[4] = v16;
    sub_100019B44((uint64_t)v10, (uint64_t)v21 + v19);
    uint64_t v22 = (void *)((char *)v21 + v20);
    *uint64_t v22 = a2;
    v22[1] = a3;
    sub_1000689E0((uint64_t)v14, (uint64_t)&unk_1000AC008, (uint64_t)v21);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100012B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = type metadata accessor for MainActor();
  v7[3] = static MainActor.shared.getter();
  uint64_t v12 = (void *)swift_task_alloc();
  v7[4] = v12;
  *uint64_t v12 = v7;
  v12[1] = sub_100012C3C;
  v12[23] = a7;
  v12[24] = a4;
  v12[21] = a5;
  v12[22] = a6;
  return _swift_task_switch(sub_100012DFC, 0, 0);
}

uint64_t sub_100012C3C()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100012D78, v1, v0);
}

uint64_t sub_100012D78()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100012DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  return _swift_task_switch(sub_100012DFC, 0, 0);
}

uint64_t sub_100012DFC()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 200);
  uint64_t v2 = (void *)(v1 + 200);
  uint64_t v3 = v4;
  if (v4)
  {
    void *v2 = 0;
    v2[1] = 0;
    swift_retain();
    uint64_t v5 = sub_1000091B4((uint64_t)v3);
    v3(v5);
    sub_1000091B4((uint64_t)v3);
  }
  *(void *)(v0 + 200) = sub_1000116D8();
  sub_100014258(v0 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 104);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 88);
  *(void *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 112);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100012F20;
  return sub_100014684(v0 + 16);
}

uint64_t sub_100012F20()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10001400C;
  }
  else
  {
    sub_100019598(v2 + 72);
    swift_release();
    uint64_t v3 = sub_100013048;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100013048()
{
  uint64_t v1 = *(void *)(v0 + 192);
  if (!*(void *)(v1 + 216))
  {
    *(void *)(v1 + 216) = sub_10001C224(*(void *)(v1 + 16), *(void *)(v1 + 24));
    swift_unknownObjectRelease();
    uint64_t v1 = *(void *)(v0 + 192);
  }
  if (*(unsigned char *)(v1 + 177) == 1)
  {
    uint64_t v2 = sub_1000118F8();
    *(void *)(v0 + 224) = v2;
    unint64_t v3 = sub_100014398();
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    *(void *)(v0 + 232) = v4;
    *(void *)(v0 + 240) = v6;
    *(void *)(v0 + 248) = v8;
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v3;
    v10[3] = v5;
    v10[4] = v7;
    v10[5] = v9;
    v10[6] = v2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = CATSerializer.enqueue<A>(respectingCancelAll:_:)();
    *(void *)(v0 + 256) = v11;
    swift_release();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v12;
    uint64_t v13 = sub_1000048A0(&qword_1000ACAA0);
    *uint64_t v12 = v0;
    v12[1] = sub_1000133A0;
    return Task.value.getter(v13, v11, (char *)&type metadata for () + 8, v13, &protocol self-conformance witness table for Error);
  }
  else if (*(unsigned char *)(v1 + 176) == 1)
  {
    uint64_t v14 = *(void *)(v0 + 168);
    if (*(void *)(*(void *)(v14 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration() + 20))
                   + 16))
    {
      unint64_t v19 = (uint64_t (*)(void))(*(void *)(v1 + 128) + **(int **)(v1 + 128));
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v15;
      *uint64_t v15 = v0;
      uint64_t v16 = sub_100013C54;
    }
    else
    {
      unint64_t v19 = (uint64_t (*)(void))(*(void *)(v1 + 112) + **(int **)(v1 + 112));
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v15;
      *uint64_t v15 = v0;
      uint64_t v16 = sub_100013908;
    }
    v15[1] = v16;
    return v19();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 176))(0, 0);
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_1000133A0()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_1000136AC;
  }
  else
  {
    uint64_t v2 = sub_1000134BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000134BC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 192);
  if (*(unsigned char *)(v1 + 176) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 168);
    if (*(void *)(*(void *)(v2 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration() + 20))
                   + 16))
    {
      uint64_t v7 = (uint64_t (*)(void))(*(void *)(v1 + 128) + **(int **)(v1 + 128));
      unint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v3;
      *unint64_t v3 = v0;
      uint64_t v4 = sub_100013C54;
    }
    else
    {
      uint64_t v7 = (uint64_t (*)(void))(*(void *)(v1 + 112) + **(int **)(v1 + 112));
      unint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v3;
      *unint64_t v3 = v0;
      uint64_t v4 = sub_100013908;
    }
    v3[1] = v4;
    return v7();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 176))(0, 0);
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000136AC()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[34];
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_getErrorValue();
    uint64_t v6 = sub_100062820(v0[17]);
    v0[20] = sub_1000722AC(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to apply restrictions for configuration: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[22];
  swift_errorRetain();
  v8(v1, 1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100013908()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100013A1C;
  }
  else {
    uint64_t v2 = sub_10001ACA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100013A1C()
{
  uint64_t v12 = v0;
  uint64_t v1 = v0[36];
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_getErrorValue();
    uint64_t v6 = sub_100062820(v0[17]);
    v0[20] = sub_1000722AC(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to apply restrictions for configuration: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[22];
  swift_errorRetain();
  v8(v1, 1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100013C54()
{
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100013DD4;
  }
  else {
    uint64_t v2 = sub_100013D68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100013D68()
{
  (*(void (**)(void, void))(v0 + 176))(0, 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100013DD4()
{
  uint64_t v12 = v0;
  uint64_t v1 = v0[38];
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_getErrorValue();
    uint64_t v6 = sub_100062820(v0[17]);
    v0[20] = sub_1000722AC(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to apply restrictions for configuration: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[22];
  swift_errorRetain();
  v8(v1, 1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10001400C()
{
  uint64_t v12 = v0;
  sub_100019598((uint64_t)(v0 + 9));
  swift_release();
  uint64_t v1 = v0[27];
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_getErrorValue();
    uint64_t v6 = sub_100062820(v0[17]);
    v0[20] = sub_1000722AC(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to apply restrictions for configuration: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[22];
  swift_errorRetain();
  v8(v1, 1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void *sub_100014258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v4 = *(unsigned __int8 *)(v1 + v3[13]);
  int v5 = *(unsigned __int8 *)(v1 + v3[11]);
  int v6 = *(unsigned __int8 *)(v1 + v3[6]);
  int v7 = *(unsigned __int8 *)(v1 + v3[15]);
  int v8 = *(unsigned __int8 *)(v1 + v3[12]);
  int v9 = *(unsigned __int8 *)(v1 + v3[10]);
  int v10 = *(unsigned __int8 *)(v1 + v3[14]);
  uint64_t v32 = *(unsigned __int8 *)(v1 + v3[9]);
  int v11 = *(unsigned __int8 *)(v1 + v3[7]);
  int v31 = *(unsigned __int8 *)(v1 + v3[8]);
  unint64_t v12 = sub_100017D00();
  uint64_t v13 = 256;
  if (!v5) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 | v4;
  uint64_t v15 = 0x10000;
  if (!v6) {
    uint64_t v15 = 0;
  }
  if (v7) {
    uint64_t v16 = 0x1000000;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v14 | v15 | v16;
  uint64_t v18 = 0x10000000000;
  if (!v8) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = 0x1000000000000;
  if (!v9) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v18 | v19;
  uint64_t v21 = 0x100000000000000;
  if (!v10) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v17 | v20 | v21;
  if (v11) {
    uint64_t v23 = 0x1000000;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 | v32;
  char v25 = &_mh_execute_header;
  if (!v31) {
    char v25 = 0;
  }
  unint64_t v26 = v24 | (unint64_t)v25;
  unint64_t v27 = v12 << 24;
  unint64_t v28 = v12 >> 40;
  uint64_t v29 = sub_100017F20();
  uint64_t result = sub_100018088();
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v26;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v27;
  *(unsigned char *)(a1 + 32) = v28;
  *(void *)(a1 + 40) = v29;
  *(void *)(a1 + 48) = result;
  return result;
}

unint64_t sub_100014398()
{
  sub_1000048A0(&qword_1000ABFD8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100080BE0;
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(inited + 32) = *(void *)(v0 + 8);
  *(void *)(inited + 40) = v2;
  type metadata accessor for AEAAssessmentSessionConfiguration();
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_100010600(v3);
  swift_bridgeObjectRelease();
  sub_10004D220((uint64_t)v4);
  int64_t v5 = *(void *)(inited + 16);
  if (v5)
  {
    sub_10004FACC(0, v5, 0);
    int v6 = (uint64_t *)(inited + 40);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        sub_10004FACC(v10 > 1, v9 + 1, 1);
      }
      v6 += 2;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      int v11 = &_swiftEmptyArrayStorage[2 * v9];
      v11[4] = v8;
      v11[5] = v7;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

uint64_t sub_10001451C()
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 32);
  sub_1000048E4(v0 + 72);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000091B4(*(void *)(v0 + 200));
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000145A8()
{
  sub_10001451C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEARestrictionsAssertion()
{
  return self;
}

uint64_t sub_1000145FC()
{
  [*(id *)(v0 + 152) cancel];
  sub_1000048E4(v0 + 112);
  swift_unknownObjectRelease();
  sub_1000186C8(*(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), *(void *)(v0 + 200), *(void *)(v0 + 208));
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AEARestrictionsApplicator()
{
  return self;
}

uint64_t sub_100014684(uint64_t a1)
{
  *(void *)(v2 + 656) = v1;
  *(void *)(v2 + 648) = a1;
  sub_1000197B0(a1, v2 + 464, &qword_1000ABFB8);
  long long v3 = *(_OWORD *)(v2 + 480);
  *(_OWORD *)(v2 + 664) = *(_OWORD *)(v2 + 464);
  *(_OWORD *)(v2 + 680) = v3;
  *(_OWORD *)(v2 + 696) = *(_OWORD *)(v2 + 496);
  *(void *)(v2 + 712) = *(void *)(v2 + 512);
  return _swift_task_switch(sub_100014718, v1, 0);
}

uint64_t sub_100014718()
{
  uint64_t v69 = v0;
  uint64_t v1 = *(void **)(v0 + 656);
  uint64_t v2 = v1[21];
  uint64_t v3 = v1[22];
  uint64_t v4 = v1[23];
  uint64_t v6 = v1[24];
  uint64_t v5 = v1[25];
  uint64_t v7 = v1[26];
  uint64_t v8 = v1[27];
  sub_1000197B0(*(void *)(v0 + 648), v0 + 184, &qword_1000ABFB8);
  if (*(void *)(v0 + 224) == 1)
  {
    if (v7 == 1) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v7 == 1)
  {
LABEL_5:
    uint64_t v66 = *(void *)(v0 + 704);
    uint64_t v64 = *(void *)(v0 + 688);
    uint64_t v65 = *(void *)(v0 + 696);
    uint64_t v62 = *(void *)(v0 + 672);
    uint64_t v63 = *(void *)(v0 + 680);
    uint64_t v61 = *(void *)(v0 + 664);
    unint64_t v9 = *(void **)(v0 + 648);
    sub_100018680(v2, v3, v4, v6, v5, v7);
    sub_100018710(v9, (void (*)(void, void, void, void, void, void, void))sub_100018680);
    sub_1000186C8(v61, v62, v63, v64, v65, v66);
    sub_1000186C8(v2, v3, v4, v6, v5, v7);
    goto LABEL_11;
  }
  long long v10 = *(_OWORD *)(v0 + 680);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 664);
  uint64_t v11 = *(void *)(v0 + 696);
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v6;
  *(unsigned char *)(v0 + 48) = v5;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = v8;
  *(_OWORD *)(v0 + 88) = v10;
  *(unsigned char *)(v0 + 104) = v11;
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 704);
  if (sub_10005DD5C((uint64_t *)(v0 + 72), (uint64_t *)(v0 + 16)))
  {
LABEL_7:
    if (qword_1000AA560 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000CB7C(v12, (uint64_t)qword_1000B0170);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v14)) {
      goto LABEL_37;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Skipping duplicate restrictions update", v15, 2u);
    goto LABEL_35;
  }
LABEL_11:
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v16 = v0 + 296;
  uint64_t v17 = (void **)(v0 + 648);
  uint64_t v18 = *(void **)(v0 + 648);
  uint64_t v19 = type metadata accessor for Logger();
  *(void *)(v0 + 720) = sub_10000CB7C(v19, (uint64_t)qword_1000B0170);
  sub_100018710(v18, (void (*)(void, void, void, void, void, void, void))sub_100018680);
  sub_100018710(v18, (void (*)(void, void, void, void, void, void, void))sub_100018680);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void **)(v0 + 648);
  if (v22)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    v68[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    sub_1000197B0((uint64_t)v23, v0 + 576, &qword_1000ABFB8);
    sub_100018710(v23, (void (*)(void, void, void, void, void, void, void))sub_100018680);
    sub_1000048A0(&qword_1000ABFB8);
    uint64_t v25 = String.init<A>(describing:)();
    *(void *)(v0 + 640) = sub_1000722AC(v25, v26, v68);
    uint64_t v16 = v0 + 296;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100018710(v23, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
    uint64_t v17 = (void **)(v0 + 648);
    sub_100018710(v23, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Applying restrictions: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100018710(*(void **)(v0 + 648), (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
    sub_100018710(v23, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
  }

  uint64_t v27 = *(void *)(v0 + 648);
  uint64_t v28 = *sub_100006340((void *)(*(void *)(v0 + 656) + 112), *(void *)(*(void *)(v0 + 656) + 136));
  sub_1000197B0(v27, v16, &qword_1000ABFB8);
  if (*(void *)(v0 + 336) == 1)
  {
    uint64_t v29 = 0;
  }
  else
  {
    long long v30 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)v16;
    *(_OWORD *)(v0 + 256) = v30;
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v16 + 32);
    *(void *)(v0 + 288) = *(void *)(v16 + 48);
    uint64_t v29 = (objc_class *)sub_100077570(*(void *)(v28 + 32));
  }
  sub_100079920(v29);
  uint64_t v67 = (_OWORD *)(v0 + 408);
  int v31 = *v17;
  swift_bridgeObjectRelease();
  uint64_t v32 = v1[21];
  uint64_t v33 = v1[22];
  uint64_t v34 = v1[23];
  uint64_t v35 = v1[24];
  uint64_t v37 = v1[25];
  uint64_t v36 = v1[26];
  uint64_t v38 = v1[27];
  sub_1000197B0((uint64_t)v31, (uint64_t)(v1 + 21), &qword_1000ABFB8);
  sub_100018710(v31, (void (*)(void, void, void, void, void, void, void))sub_100018680);
  sub_100018680(v32, v33, v34, v35, v37, v36);
  sub_1000186C8(v32, v33, v34, v35, v37, v36);
  if (v36 == 1)
  {
    uint64_t v39 = 0;
  }
  else
  {
    *(void *)(v0 + 128) = v32;
    *(void *)(v0 + 136) = v33;
    *(void *)(v0 + 144) = v34;
    *(void *)(v0 + 152) = v35;
    *(unsigned char *)(v0 + 160) = v37;
    *(void *)(v0 + 168) = v36;
    *(void *)(v0 + 176) = v38;
    uint64_t v39 = sub_1000154FC();
    sub_1000186C8(v32, v33, v34, v35, v37, v36);
  }
  *(void *)(v0 + 728) = v39;
  sub_1000197B0(*(void *)(v0 + 648), (uint64_t)v67, &qword_1000ABFB8);
  if (*(void *)(v0 + 448) == 1)
  {
    if (v39)
    {
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping SpringBoard observation: deactivating app restrictions", v42, 2u);
        swift_slowDealloc();
      }

      swift_bridgeObjectRelease();
LABEL_33:
      uint64_t v50 = *(void **)(v0 + 648);
      sub_100018710(v50, (void (*)(void, void, void, void, void, void, void))sub_100018680);
      sub_100018710(v50, (void (*)(void, void, void, void, void, void, void))sub_100018680);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v13, v51);
      uint64_t v53 = *(void **)(v0 + 648);
      if (!v52)
      {
        sub_100018710(*(void **)(v0 + 648), (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
        sub_100018710(v53, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
        goto LABEL_37;
      }
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      v68[0] = v55;
      sub_1000197B0((uint64_t)v53, v0 + 520, &qword_1000ABFB8);
      sub_100018710(v53, (void (*)(void, void, void, void, void, void, void))sub_100018680);
      sub_1000048A0(&qword_1000ABFB8);
      uint64_t v56 = String.init<A>(describing:)();
      *(void *)(v0 + 632) = sub_1000722AC(v56, v57, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018710(v53, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
      sub_100018710(v53, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
      _os_log_impl((void *)&_mh_execute_header, v13, v51, "Finished applying restrictions: %s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_35:
      swift_slowDealloc();
LABEL_37:

      uint64_t v58 = *(uint64_t (**)(void))(v0 + 8);
      return v58();
    }
LABEL_30:
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Skipping SpringBoard observation: no change in app restrictions", v49, 2u);
      swift_slowDealloc();
    }

    goto LABEL_33;
  }
  long long v43 = *(_OWORD *)(v0 + 424);
  *(_OWORD *)(v0 + 352) = *v67;
  *(_OWORD *)(v0 + 368) = v43;
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 440);
  *(void *)(v0 + 400) = *(void *)(v0 + 456);
  uint64_t v44 = sub_1000154FC();
  *(void *)(v0 + 736) = v44;
  if (v39)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = swift_bridgeObjectRetain();
    char v46 = sub_1000164A0(v45, (uint64_t)v44);
    swift_bridgeObjectRelease();
    if (v46)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v60;
  *uint64_t v60 = v0;
  v60[1] = sub_1000150E4;
  return sub_10001595C((uint64_t)v44);
}

uint64_t sub_1000150E4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 752) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 656);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_100015490;
  }
  else {
    uint64_t v4 = sub_10001522C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10001522C()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)v0[81];
  sub_100018710(v1, (void (*)(void, void, void, void, void, void, void))sub_100018680);
  sub_100018710(v1, (void (*)(void, void, void, void, void, void, void))sub_100018680);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (void *)v0[81];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_1000197B0((uint64_t)v4, (uint64_t)(v0 + 65), &qword_1000ABFB8);
    sub_100018710(v4, (void (*)(void, void, void, void, void, void, void))sub_100018680);
    sub_1000048A0(&qword_1000ABFB8);
    uint64_t v6 = String.init<A>(describing:)();
    v0[79] = sub_1000722AC(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100018710(v4, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
    sub_100018710(v4, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished applying restrictions: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = (void *)v0[81];
    sub_100018710(v8, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
    sub_100018710(v8, (void (*)(void, void, void, void, void, void, void))sub_1000186C8);
  }

  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100015490()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void *sub_1000154FC()
{
  sub_1000197B0(v0 + 40, (uint64_t)v11, &qword_1000ABFC0);
  sub_1000197B0((uint64_t)v11, (uint64_t)&v12, &qword_1000ABFC0);
  uint64_t v1 = v12;
  if (!v12) {
    return &_swiftEmptySetSingleton;
  }
  int64_t v2 = *(void *)(v12 + 16);
  if (v2)
  {
    sub_10004FA7C(0, v2, 0);
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v6 >= v7 >> 1) {
        sub_10004FA7C(v7 > 1, v6 + 1, 1);
      }
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v8 = (char *)&_swiftEmptyArrayStorage[2 * v6];
      *((void *)v8 + 4) = v5;
      *((void *)v8 + 5) = v4;
      --v2;
    }
    while (v2);
  }
  uint64_t v9 = sub_1000514FC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return (void *)v9;
}

uint64_t sub_100015618()
{
  *(void *)(v1 + 72) = v0;
  return _swift_task_switch(sub_100015638, v0, 0);
}

uint64_t sub_100015638()
{
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0170);
  int64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Tearing down restrictions and restriction monitoring session…", v4, 2u);
    swift_slowDealloc();
  }

  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 56) = xmmword_100080BF0;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  void *v5 = v0;
  v5[1] = sub_1000157A8;
  return sub_100014684(v0 + 16);
}

uint64_t sub_1000157A8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 72);
    return _swift_task_switch(sub_1000158EC, v6, 0);
  }
}

uint64_t sub_1000158EC()
{
  [*(id *)(*(void *)(v0 + 72) + 152) cancel];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001595C(uint64_t a1)
{
  v2[4] = a1;
  void v2[5] = v1;
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100015A1C, v1, 0);
}

uint64_t sub_100015A1C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  *(_OWORD *)(v0 + 16) = xmmword_100080C00;
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 72) = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  ContinuousClock.init()();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  unint64_t v5 = sub_100018628();
  *uint64_t v4 = v0;
  v4[1] = sub_100015B48;
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  return static Task<>.cat_withTimeout<A, B>(duration:clock:body:)(v5, v0 + 16, v6, &unk_1000ABF98, v3, (char *)&type metadata for () + 8, v7, v5);
}

uint64_t sub_100015B48()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  uint64_t v6 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v7 = sub_100015D44;
  }
  else {
    uint64_t v7 = sub_100015CE0;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100015CE0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100015D44()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100015DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = sub_1000048A0(&qword_1000ABFA8);
  void v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = sub_1000048A0(&qword_1000ABFB0);
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100015ECC, 0, 0);
}

uint64_t sub_100015ECC()
{
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 88) = sub_10000CB7C(v1, (uint64_t)qword_1000B0170);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Beginning SpringBoard observation for expected app restriction update", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 24);

  return _swift_task_switch(sub_100015FF0, v5, 0);
}

uint64_t sub_100015FF0()
{
  *(void *)(v0 + 96) = *(void *)(*(void *)(v0 + 24) + 152);
  return _swift_task_switch(sub_100016018, 0, 0);
}

uint64_t sub_100016018()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  CATAsyncStreamMulticaster.makeStream()();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100016120;
  uint64_t v5 = v0[8];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v5);
}

uint64_t sub_100016120()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10001621C, 0, 0);
}

uint64_t sub_10001621C()
{
  os_log_type_t v14 = v0;
  uint64_t v1 = v0[2];
  if (!v1) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v4 + 4) = sub_1000722AC(v5, v7, &v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Observed SpringBoard app restriction update: %s", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  char v8 = sub_1000164A0(v1, v0[4]);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v0[13] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100016120;
    uint64_t v12 = v0[8];
    return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v12);
  }
  else
  {
LABEL_6:
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1000164A0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    BOOL v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_100016744()
{
  return v0;
}

uint64_t sub_100016750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[41] = a5;
  v6[42] = a6;
  v6[39] = a3;
  v6[40] = a4;
  v6[38] = a2;
  return _swift_task_switch(sub_100016778, 0, 0);
}

uint64_t sub_100016778()
{
  uint64_t v46 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = v1[15];
  uint64_t v4 = v1[16];
  unint64_t v6 = (void *)v1[17];
  uint64_t v5 = (void *)v1[18];
  if (!v4)
  {
    uint64_t v9 = *(void *)(v0 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000184EC(v9, v2);
    sub_1000184EC(v3, 0);
    goto LABEL_20;
  }
  BOOL v7 = v3 == *(void *)(v0 + 304) && v4 == v2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)())
    && (sub_100006814(*(void **)(v0 + 320), v6) & 1) != 0)
  {
    if (!*(void *)(v0 + 328))
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if (!v5)
      {
        sub_10001987C(v3, v4);
        swift_bridgeObjectRelease();
LABEL_39:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
      goto LABEL_18;
    }
    if (v5)
    {
      char v8 = sub_100006814(*(void **)(v0 + 328), v5);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_10001987C(v3, v4);
      swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_39;
      }
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_18:
  sub_10001987C(v3, v4);
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_20:
  uint64_t v10 = *(void *)(v0 + 336) + 80;
  swift_beginAccess();
  sub_1000196E8(v10, v0 + 16);
  uint64_t v11 = *(void *)(v0 + 40);
  sub_10001848C(v0 + 16);
  if (v11)
  {
    uint64_t v12 = v0 + 176;
    if (qword_1000AA560 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000CB7C(v13, (uint64_t)qword_1000B0170);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(v0 + 320);
      uint64_t v44 = *(void *)(v0 + 328);
      uint64_t v17 = *(void *)(v0 + 304);
      uint64_t v18 = *(void *)(v0 + 312);
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446210;
      *(void *)(v0 + 216) = v17;
      *(void *)(v0 + 224) = v18;
      *(void *)(v0 + 232) = v16;
      *(void *)(v0 + 240) = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = String.init<A>(describing:)();
      *(void *)(v0 + 296) = sub_1000722AC(v20, v21, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Updating home screen with configuration: %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      uint64_t v12 = v0 + 176;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    sub_1000196E8(*(void *)(v0 + 336) + 80, v12);
    if (!*(void *)(v0 + 200))
    {
      sub_10001848C(v12);
      uint64_t v38 = *(void *)(v0 + 328);
      uint64_t v37 = *(void **)(v0 + 336);
      uint64_t v39 = *(void *)(v0 + 312);
      uint64_t v40 = *(void *)(v0 + 320);
      uint64_t v41 = v37[15];
      uint64_t v42 = v37[16];
      v37[15] = *(void *)(v0 + 304);
      v37[16] = v39;
      v37[17] = v40;
      v37[18] = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000184EC(v41, v42);
LABEL_40:
      long long v43 = *(uint64_t (**)(void))(v0 + 8);
      return v43();
    }
    uint64_t v33 = *(void *)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 320);
    sub_1000091C4(v12, v0 + 136);
    sub_10001848C(v12);
    sub_100006340((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_10001749C;
    uint64_t v35 = *(void *)(v0 + 328);
    uint64_t v36 = *(void *)(v0 + 304);
    return sub_100025E64(v36, v33, v32, v35);
  }
  else
  {
    if (qword_1000AA560 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000CB7C(v22, (uint64_t)qword_1000B0170);
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Beginning home screen configuration session for the first time", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = *(void *)(v0 + 336);

    uint64_t v28 = *(void *)(v26 + 56);
    uint64_t v27 = *(void *)(v26 + 64);
    uint64_t v29 = swift_allocObject();
    *(void *)(v0 + 344) = v29;
    *(void *)(v29 + 16) = v28;
    *(void *)(v29 + 24) = v27;
    *(void *)(v0 + 352) = type metadata accessor for AEAConcreteSpringBoardPrimitives.HomeScreenConfigurationSession();
    swift_allocObject();
    swift_retain();
    swift_retain();
    int64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v30;
    *int64_t v30 = v0;
    v30[1] = sub_100016F08;
    return sub_1000259D0((uint64_t)sub_100019788, v29);
  }
}

uint64_t sub_100016F08(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 368) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100017438;
  }
  else
  {
    *(void *)(v4 + 376) = a1;
    uint64_t v5 = sub_100017030;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100017030()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[42];
  v0[10] = v0[44];
  v0[11] = &off_10009FBC8;
  swift_release();
  v0[7] = v1;
  uint64_t v3 = (uint64_t)(v0 + 22);
  sub_1000197B0((uint64_t)(v0 + 7), (uint64_t)(v0 + 12), &qword_1000ABF88);
  swift_beginAccess();
  sub_100019814((uint64_t)(v0 + 12), v2 + 80);
  swift_endAccess();
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000CB7C(v4, (uint64_t)qword_1000B0170);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[40];
    uint64_t v27 = v0[41];
    uint64_t v9 = v0[38];
    uint64_t v8 = v0[39];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    uint64_t v28 = v11;
    v0[27] = v9;
    v0[28] = v8;
    v0[29] = v7;
    v0[30] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = String.init<A>(describing:)();
    v0[37] = sub_1000722AC(v12, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v3 = (uint64_t)(v0 + 22);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updating home screen with configuration: %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  sub_1000196E8(v0[42] + 80, v3);
  if (v0[25])
  {
    uint64_t v15 = v0[39];
    uint64_t v14 = v0[40];
    sub_1000091C4(v3, (uint64_t)(v0 + 17));
    sub_10001848C(v3);
    sub_100006340(v0 + 17, v0[20]);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[48] = v16;
    void *v16 = v0;
    v16[1] = sub_10001749C;
    uint64_t v17 = v0[41];
    uint64_t v18 = v0[38];
    return sub_100025E64(v18, v15, v14, v17);
  }
  else
  {
    sub_10001848C(v3);
    uint64_t v21 = v0[41];
    uint64_t v20 = (void *)v0[42];
    uint64_t v22 = v0[39];
    uint64_t v23 = v0[40];
    uint64_t v24 = v20[15];
    uint64_t v25 = v20[16];
    v20[15] = v0[38];
    v20[16] = v22;
    v20[17] = v23;
    v20[18] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000184EC(v24, v25);
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_100017438()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001749C()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100017668;
  }
  else {
    uint64_t v2 = sub_1000175B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000175B0()
{
  sub_1000048E4((uint64_t)(v0 + 17));
  uint64_t v2 = v0[41];
  uint64_t v1 = (void *)v0[42];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v5 = v1[15];
  uint64_t v6 = v1[16];
  v1[15] = v0[38];
  v1[16] = v3;
  v1[17] = v4;
  v1[18] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000184EC(v5, v6);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100017668()
{
  sub_1000048E4(v0 + 136);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000176CC(void (*a1)(void), uint64_t a2, const char *a3, char a4)
{
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000CB7C(v7, (uint64_t)qword_1000B0170);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a3, v10, 2u);
    swift_slowDealloc();
  }

  sub_100017CAC();
  swift_allocError();
  *uint64_t v11 = a4;
  a1();

  return swift_errorRelease();
}

uint64_t sub_100017804(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 184) = a2;
  return _swift_task_switch(sub_100017824, 0, 0);
}

uint64_t sub_100017824()
{
  uint64_t v1 = *(void *)(v0 + 184) + 80;
  swift_beginAccess();
  sub_1000196E8(v1, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_1000093C0((long long *)(v0 + 56), v0 + 16);
    if (qword_1000AA560 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ending home screen configuration session", v5, 2u);
      swift_slowDealloc();
    }

    *(void *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    swift_beginAccess();
    sub_100019814(v0 + 96, v1);
    swift_endAccess();
    sub_100006340((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v6;
    void *v6 = v0;
    v6[1] = sub_100017A4C;
    return sub_100026268();
  }
  else
  {
    sub_10001848C(v0 + 56);
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100017A4C()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100017BC4;
  }
  else {
    uint64_t v2 = sub_100017B60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100017B60()
{
  sub_1000048E4(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100017BC4()
{
  sub_1000048E4(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100017C28()
{
  sub_1000048E4(v0 + 16);
  swift_release();
  swift_release();
  sub_10001848C(v0 + 80);
  sub_1000184EC(*(void *)(v0 + 120), *(void *)(v0 + 128));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAHomeScreenConfigurer()
{
  return self;
}

unint64_t sub_100017CAC()
{
  unint64_t result = qword_1000ABF80;
  if (!qword_1000ABF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ABF80);
  }
  return result;
}

uint64_t sub_100017D00()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration() + 20));
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v23 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    unint64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 40 * i);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = (unsigned __int8 *)(*(void *)(v1 + 56) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = *((void *)v16 + 1);
    if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v19)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_27:
      unint64_t v22 = sub_100018328(v17, v18);
      swift_release();
      swift_bridgeObjectRelease();
      return v22 & 0xFFFFFFFFFFFFLL;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_27;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v10 >= v23) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v23) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v23) {
          goto LABEL_28;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v23)
  {
LABEL_28:
    swift_release();
    return 3;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v23) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100017F20()
{
  sub_1000048A0(&qword_1000ABFD8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100080BE0;
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(inited + 32) = *(void *)(v0 + 8);
  *(void *)(inited + 40) = v2;
  type metadata accessor for AEAAssessmentSessionConfiguration();
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_100010600(v3);
  swift_bridgeObjectRelease();
  sub_10004D220((uint64_t)v4);
  int64_t v5 = *(void *)(inited + 16);
  if (v5)
  {
    sub_10004FA9C(0, v5, 0);
    uint64_t v6 = (uint64_t *)(inited + 40);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        sub_10004FA9C(v10 > 1, v9 + 1, 1);
      }
      v6 += 2;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      unint64_t v11 = &_swiftEmptyArrayStorage[2 * v9];
      v11[4] = v8;
      v11[5] = v7;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_100018088()
{
  if (qword_1000AA670 != -1) {
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v1 = qword_1000B0370;
    sub_1000048A0(&qword_1000ABFD8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100080BE0;
    uint64_t v3 = v0[2];
    *(void *)(inited + 32) = v0[1];
    *(void *)(inited + 40) = v3;
    type metadata accessor for AEAAssessmentSessionConfiguration();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = swift_bridgeObjectRetain();
    int64_t v5 = sub_100010600(v4);
    swift_bridgeObjectRelease();
    sub_10004D220((uint64_t)v5);
    uint64_t v6 = sub_1000514FC(inited);
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16) <= *(void *)(v1 + 16) >> 3) {
      break;
    }
    uint64_t v7 = sub_1000188F8(v6, v1);
    swift_bridgeObjectRelease();
    int64_t v8 = v7[2];
    if (!v8) {
      goto LABEL_14;
    }
LABEL_4:
    sub_10004FA9C(0, v8, 0);
    uint64_t v0 = _swiftEmptyArrayStorage;
    uint64_t v9 = sub_1000633EC(v7);
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *((unsigned char *)v7 + 32))
    {
      if (((*(unint64_t *)((char *)v7 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) >> v9) & 1) == 0) {
        goto LABEL_17;
      }
      if (*((_DWORD *)v7 + 9) != v11) {
        goto LABEL_18;
      }
      char v24 = v13;
      uint64_t v14 = (uint64_t *)(v7[6] + 16 * v9);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      unint64_t v18 = _swiftEmptyArrayStorage[2];
      unint64_t v17 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1) {
        sub_10004FA9C(v17 > 1, v18 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v18 + 1;
      uint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
      uint64_t v20 = sub_100063490(v9, v11, v24 & 1, v7);
      uint64_t v9 = v20;
      uint64_t v11 = v21;
      char v13 = v22 & 1;
      if (!--v8)
      {
        sub_1000198CC(v20, v21, v13);
        swift_bridgeObjectRelease();
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once();
  }
  sub_100018750(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (unint64_t *)v1;
  int64_t v8 = *(void *)(v1 + 16);
  if (v8) {
    goto LABEL_4;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100018328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v6 = sub_1000204F0(v4, v5, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v9 = sub_1000204F0(v7, v8, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v12 = sub_1000204F0(v10, v11, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v15 = sub_1000204F0(v13, v14, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v18 = sub_1000204F0(v16, v17, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(a2) = sub_1000204F0(v19, v20, a1, a2);
  swift_bridgeObjectRelease();
  return ((unint64_t)v18 << 32) | ((unint64_t)a2 << 40) | ((unint64_t)v15 << 24) | ((unint64_t)v12 << 16) | ((unint64_t)v9 << 8) | v6;
}

uint64_t sub_10001848C(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000ABF88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000184EC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001853C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001857C(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unsigned __int8 v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10001AC9C;
  return sub_100015DA8(a1, v5, v4);
}

unint64_t sub_100018628()
{
  unint64_t result = qword_1000ABFA0;
  if (!qword_1000ABFA0)
  {
    type metadata accessor for ContinuousClock();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ABFA0);
  }
  return result;
}

uint64_t sub_100018680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000186C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100018710(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100018750(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10002FF44(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_1000188F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v38 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v36 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v37 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v37) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v38 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v37) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v38 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v37) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v38 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v37) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v38 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v37)
                {
LABEL_47:
                  sub_1000198D8();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v38 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v37) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v38 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    int64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v39 = a1;
      uint64_t v40 = v38;
      uint64_t v41 = v36;
      int64_t v42 = v9;
      unint64_t v43 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v39 = a1;
      uint64_t v40 = v38;
      uint64_t v41 = v36;
      int64_t v42 = v9;
      unint64_t v43 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v30 = *(unsigned char *)(v2 + 32);
    unint64_t v31 = (unint64_t)((1 << v30) + 63) >> 6;
    size_t v32 = 8 * v31;
    if ((v30 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe, v29);
      memcpy((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v32);
      uint64_t v33 = sub_100018D68((unint64_t *)((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0)), v31, v2, v21, &v39);
      swift_release();
      sub_1000198D8();
    }
    else
    {
      uint64_t v34 = (void *)swift_slowAlloc();
      memcpy(v34, (const void *)(v2 + 56), v32);
      uint64_t v33 = sub_100018D68((unint64_t *)v34, v31, v2, v21, &v39);
      swift_release();
      sub_1000198D8();
      swift_slowDealloc();
    }
    return v33;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_100018D68(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }
            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }
              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return (unint64_t *)sub_1000307C0(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_21:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }
        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      BOOL v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_29:
      unint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v37 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100019048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  uint64_t v26 = &off_1000A3070;
  v24[0] = a3;
  uint64_t v22 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  uint64_t v23 = &off_10009FBF0;
  v21[0] = a4;
  type metadata accessor for AEARestrictionsApplicator();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = sub_100019D8C((uint64_t)v24, v25);
  __chkstk_darwin(v13, v13);
  (*(void (**)(char *))(v15 + 16))((char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_100019D8C((uint64_t)v21, v22);
  __chkstk_darwin(v16, v16);
  (*(void (**)(char *))(v18 + 16))((char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_100019DDC(a1, a2, a5, a6, v12);
  swift_release();
  swift_release();
  sub_1000048E4((uint64_t)v21);
  sub_1000048E4((uint64_t)v24);
  return v19;
}

uint64_t sub_10001925C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, uint64_t a15)
{
  *(void *)(a15 + 56) = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  *(void *)(a15 + 64) = &off_10009FBF0;
  *(void *)(a15 + 32) = a4;
  *(void *)(a15 + 96) = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  *(void *)(a15 + 104) = &off_1000A3070;
  *(void *)(a15 + 72) = a3;
  *(void *)(a15 + 184) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a15 + 192) = 0;
  *(_OWORD *)(a15 + 200) = 0u;
  *(_OWORD *)(a15 + 216) = 0u;
  *(void *)(a15 + 232) = 0;
  *(void *)(a15 + 16) = a1;
  *(void *)(a15 + 24) = a2;
  *(void *)(a15 + 112) = a6;
  *(void *)(a15 + 120) = a7;
  *(void *)(a15 + 128) = a8;
  *(void *)(a15 + 136) = a9;
  *(void *)(a15 + 160) = a11;
  *(void *)(a15 + 168) = a12;
  *(void *)(a15 + 144) = a10;
  *(void *)(a15 + 152) = a5;
  *(unsigned char *)(a15 + 176) = a13;
  *(unsigned char *)(a15 + 177) = a14;
  return a15;
}

uint64_t sub_10001935C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  long long v28 = a9;
  uint64_t v37 = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  uint64_t v38 = &off_1000A3070;
  v36[0] = a3;
  uint64_t v34 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  BOOL v35 = &off_10009FBF0;
  v33[0] = a4;
  type metadata accessor for AEARestrictionsAssertion();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = sub_100019D8C((uint64_t)v36, v37);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (uint64_t *)((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_100019D8C((uint64_t)v33, v34);
  __chkstk_darwin(v22, v22);
  unint64_t v24 = (uint64_t *)((char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_10001925C(a1, a2, *v20, *v24, v29, v30, v31, v32, v28, *((uint64_t *)&v28 + 1), a10, a11, a12, a13, v17);
  sub_1000048E4((uint64_t)v33);
  sub_1000048E4((uint64_t)v36);
  return v26;
}

uint64_t sub_100019598(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000195D0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100019620()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 24);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_10000ED6C;
  *(void *)(v5 + 328) = v3;
  *(void *)(v5 + 336) = v4;
  *(_OWORD *)(v5 + 312) = v6;
  *(void *)(v5 + 304) = v2;
  return _swift_task_switch(sub_100016778, 0, 0);
}

uint64_t sub_1000196E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000ABF88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019750()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100019788()
{
  return sub_1000176CC(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), "Home screen configuration session was unexpectedly invalidated", 1);
}

uint64_t sub_1000197B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000048A0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100019814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000ABF88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001987C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000198CC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000198D8()
{
  return swift_release();
}

uint64_t sub_1000198E0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100019918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100012934(a1, a2, a3);
}

uint64_t sub_100019920(uint64_t a1)
{
  return sub_100068B8C(a1, *(void (**)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(v1 + 16));
}

uint64_t sub_100019928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAAssessmentSessionConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001998C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100019B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAAssessmentSessionConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019BA8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  unint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000ED6C;
  return sub_100012B58(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100019CE4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10001AC9C;
  v2[23] = v0;
  return _swift_task_switch(sub_100017824, 0, 0);
}

uint64_t sub_100019D8C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100019DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_defaultActor_initialize();
  *(void *)(a5 + 200) = 0;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 208) = xmmword_100080BF0;
  uint64_t v10 = type metadata accessor for AEAConcreteManagedConfigurationRestrictionsApplicator();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000770D8(a1, a2);
  uint64_t v17 = v10;
  uint64_t v18 = &off_1000A3060;
  swift_bridgeObjectRelease();
  *(void *)&long long v16 = v11;
  sub_1000093C0(&v16, a5 + 112);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  id v13 = objc_allocWithZone((Class)type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession());
  swift_retain();
  swift_retain();
  uint64_t v14 = sub_100025474((uint64_t)sub_100019F28, v12);
  swift_release();
  swift_release();
  *(void *)(a5 + 152) = v14;
  *(void *)(a5 + 160) = &off_10009FBE0;
  return a5;
}

uint64_t sub_100019F28()
{
  return sub_1000176CC(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), "App restriction monitoring session was unexpectedly invalidated", 0);
}

unsigned char *initializeBufferWithCopyOfBuffer for AEARestrictionsActionError(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsActionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AEARestrictionsActionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001A0B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10001A0E0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001A0E8(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsActionError()
{
  return &type metadata for AEARestrictionsActionError;
}

unint64_t sub_10001A108()
{
  unint64_t result = qword_1000AC020;
  if (!qword_1000AC020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC020);
  }
  return result;
}

uint64_t destroy for AEARestrictionsActivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 40);
  sub_1000048E4(a1 + 80);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AEARestrictionsActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = a2 + 40;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v7 = v6;
  int v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 40, v5, v7);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 80, a2 + 80);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v10;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AEARestrictionsActivation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10000E5F4((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  sub_10000E5F4((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v5;
  swift_retain();
  swift_release();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  return a1;
}

__n128 initializeWithTake for AEARestrictionsActivation(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 154) = *(long long *)((char *)a2 + 154);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for AEARestrictionsActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_1000048E4(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsActivation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 170)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 170) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 170) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsActivation()
{
  return &type metadata for AEARestrictionsActivation;
}

uint64_t sub_10001A5E4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10001A624()
{
  sub_100011324(*(void **)(v0 + 16));
}

uint64_t sub_10001A630()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001A670(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10001A6A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001A6D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 64);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t destroy for AEARestrictionsRecoveryDeactivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 48);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AEARestrictionsRecoveryDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a2 + 48;
  long long v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(a1 + 48, v6, v8);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v10;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AEARestrictionsRecoveryDeactivation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10000E5F4((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AEARestrictionsRecoveryDeactivation(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AEARestrictionsRecoveryDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsRecoveryDeactivation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsRecoveryDeactivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsRecoveryDeactivation()
{
  return &type metadata for AEARestrictionsRecoveryDeactivation;
}

uint64_t destroy for AEARestrictionsDeactivation()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsDeactivation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsDeactivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsDeactivation()
{
  return &type metadata for AEARestrictionsDeactivation;
}

ValueMetadata *type metadata accessor for AEAOSTransactionActivation()
{
  return &type metadata for AEAOSTransactionActivation;
}

uint64_t sub_10001ACD4()
{
  *(void *)(v1 + 16) = *(void *)(v0 + 24);
  return _swift_task_switch(sub_10001ACF8, 0, 0);
}

uint64_t sub_10001ACF8()
{
  [*(id *)(v0 + 16) releaseTransaction];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001AD64(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10001AD88, 0, 0);
}

uint64_t sub_10001AD88()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [*(id *)(v0 + 24) acquireAssessmentModeTransaction];
  v1[3] = &type metadata for AEAOSTransactionDeactivation;
  v1[4] = &off_10009F570;
  uint64_t v3 = (void *)swift_allocObject();
  *uint64_t v1 = v3;
  v3[2] = 0xD00000000000002ALL;
  v3[3] = 0x8000000100086BC0;
  v3[4] = 5;
  void v3[5] = v2;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10001AE50()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for AEAOSTransactionDeactivation()
{
  return &type metadata for AEAOSTransactionDeactivation;
}

void *sub_10001AEA8(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v7);
  long long v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_10004FAFC(0, v10, 0);
    uint64_t v11 = v22;
    uint64_t v17 = v6 + 32;
    uint64_t v12 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v13 = *v12;
      v21[0] = *(v12 - 1);
      v21[1] = v13;
      swift_bridgeObjectRetain();
      v19(v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v22 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_10004FAFC(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v22;
      }
      v12 += 2;
      v11[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, v9, v18);
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_10001B074()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()();
  uint64_t v6 = *(void **)(v0 + 16);
  URL._bridgeToObjectiveC()(v7);
  long long v9 = v8;
  id v14 = 0;
  LODWORD(v6) = [v6 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:0 error:&v14];

  if (v6)
  {
    id v10 = v14;
    Data.write(to:options:)();
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

id sub_10001B224()
{
  uint64_t v1 = type metadata accessor for CocoaError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (NSURL *)((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (char *)((char *)&v14 - (char *)v5);
  uint64_t v7 = *(void **)(v0 + 16);
  URL._bridgeToObjectiveC()(v5);
  long long v9 = v8;
  id v14 = 0;
  unsigned int v10 = [v7 removeItemAtURL:v8 error:&v14];

  if (v10) {
    return v14;
  }
  id v12 = v14;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  static CocoaError.fileNoSuchFile.getter();
  sub_10001B944();
  char v13 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v6, v1);
  if (v13) {
    return (id)swift_errorRelease();
  }
  return result;
}

void *sub_10001B3D4(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  URL.path.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 enumeratorAtPath:v4];

  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  id v6 = [v5 allObjects];

  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = sub_10001B50C(v7);
  uint64_t v9 = swift_bridgeObjectRelease();
  if (!v8) {
    return _swiftEmptyArrayStorage;
  }
  __chkstk_darwin(v9, v10);
  v13[2] = a1;
  id v11 = sub_10001AEA8((void (*)(void *))sub_10001B8B4, (uint64_t)v13, (uint64_t)v8);
  swift_bridgeObjectRelease();
  return v11;
}

void *sub_10001B50C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  id v12 = _swiftEmptyArrayStorage;
  sub_10004FA7C(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_10001B8E8(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10004FA7C(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_10004FA7C(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = &v3[2 * v6];
      v7[4] = v9;
      v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_10001B654()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAConcreteFileSystemPrimitives()
{
  return self;
}

uint64_t sub_10001B6B0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues;
  uint64_t v4 = type metadata accessor for URLResourceValues();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10001B794()
{
  return type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues();
}

uint64_t type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues()
{
  uint64_t result = qword_1000AC168;
  if (!qword_1000AC168) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001B7E8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URLResourceValues();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10001B8B4()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t sub_10001B8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10001B944()
{
  unint64_t result = qword_1000AC250;
  if (!qword_1000AC250)
  {
    type metadata accessor for CocoaError.Code();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC250);
  }
  return result;
}

uint64_t sub_10001B99C(uint64_t a1)
{
  return sub_10001BAE0(a1, qword_1000B0110);
}

uint64_t *sub_10001B9B8(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10001BA1C(uint64_t a1)
{
  return sub_10001BAE0(a1, qword_1000B0128);
}

uint64_t sub_10001BA48(uint64_t a1)
{
  return sub_10001BAE0(a1, qword_1000B0140);
}

uint64_t sub_10001BA6C(uint64_t a1)
{
  return sub_10001BAE0(a1, qword_1000B0158);
}

uint64_t sub_10001BA98(uint64_t a1)
{
  return sub_10001BAE0(a1, qword_1000B0170);
}

uint64_t sub_10001BABC(uint64_t a1)
{
  return sub_10001BAE0(a1, qword_1000B0188);
}

uint64_t sub_10001BAE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001B9B8(v3, a2);
  sub_10000CB7C(v3, (uint64_t)a2);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

id sub_10001BB54()
{
  [*(id *)&v0[OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_XPCListener] invalidate];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AEAActiveRestrictionUUIDFetchingService();
  return [super dealloc];
}

char *sub_10001BC5C(void *a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_xpc] = a1;
  *(void *)&v2[OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_sessionManager] = a2;
  uint64_t v4 = v2;
  swift_unknownObjectRetain();
  swift_retain();
  id v5 = [a1 makeActiveRestrictionUUIDFetchingListener];
  *(void *)&v4[OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_XPCListener] = v5;

  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for AEAActiveRestrictionUUIDFetchingService();
  unint64_t v6 = [(char *)[super init];
  uint64_t v7 = *(void **)&v6[OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_XPCListener];
  uint64_t v8 = v6;
  id v9 = v7;
  [v9 setDelegate:v8];

  swift_unknownObjectRelease();
  swift_release();
  return v8;
}

uint64_t type metadata accessor for AEAActiveRestrictionUUIDFetchingService()
{
  return self;
}

id sub_10001BD98()
{
  return [*(id *)(*v0 + OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_XPCListener) resume];
}

id sub_10001BDB4()
{
  return [*(id *)(*v0 + OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_XPCListener) invalidate];
}

uint64_t sub_10001BDD0()
{
  sub_1000048A0(&qword_1000AC360);
  swift_allocObject();
  PassthroughSubject.init()();
  sub_10001BF8C();
  uint64_t v0 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v0;
}

unint64_t sub_10001BF8C()
{
  unint64_t result = qword_1000AC368;
  if (!qword_1000AC368)
  {
    sub_1000054DC(&qword_1000AC360);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC368);
  }
  return result;
}

id sub_10001BFE8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [*(id *)(v1 + OBJC_IVAR____TtC15assessmentagent39AEAActiveRestrictionUUIDFetchingService_xpc) connectionCanFetchActiveRestrictionUUIDs:a1];
  if (v4)
  {
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000CB7C(v5, (uint64_t)qword_1000B0110);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Configuring new connection for reading published active restriction UUIDs…", v8, 2u);
      swift_slowDealloc();
    }

    id v9 = [objc_allocWithZone((Class)AEActiveRestrictionUUIDFetchingXPCInterfaceFactory) init];
    id v10 = [v9 makeInterface];

    [a1 setExportedInterface:v10];
    [a1 setExportedObject:v2];
    objc_super v11 = &selRef_resume;
  }
  else
  {
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000CB7C(v12, (uint64_t)qword_1000B0110);
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalid active restriction reader. Invalidating connection.", v15, 2u);
      swift_slowDealloc();
    }

    objc_super v11 = &selRef_invalidate;
  }
  [a1 *v11];
  return v4;
}

uint64_t sub_10001C224(Swift::Int a1, Swift::Int a2)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1000404DC(&v8, a1, a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v4;
  _OWORD v5[3] = a1;
  v5[4] = a2;
  type metadata accessor for AEABlockCancelable();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10001C498;
  *(void *)(v6 + 24) = v5;
  swift_bridgeObjectRetain();
  sub_1000091B4(0);
  return v6;
}

uint64_t sub_10001C324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    sub_10002FF44(a2, a3);
    swift_endAccess();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001C3C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAManagedConfigurationRestrictionStatusManager()
{
  return self;
}

uint64_t sub_10001C420()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001C458()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001C498()
{
  return sub_10001C324(v0[2], v0[3], v0[4]);
}

uint64_t destroy for AEAParticipant.ApplicationDescriptor()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAParticipant.ApplicationDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAParticipant.ApplicationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAParticipant.ApplicationDescriptor()
{
  return &type metadata for AEAParticipant.ApplicationDescriptor;
}

uint64_t *sub_10001C6A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    os_log_type_t v7 = (char *)a1 + v6;
    Swift::Int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    objc_super v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_10001C81C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    os_log_type_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_10001C8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  os_log_type_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_10001CA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  os_log_type_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_10001CBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10001CCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10001CE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001CE78);
}

uint64_t sub_10001CE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_1000048A0(&qword_1000AB5F8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10001CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001CF4C);
}

uint64_t sub_10001CF4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = sub_1000048A0(&qword_1000AB5F8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AEAParticipant.SecurityInfo(uint64_t a1)
{
  return sub_10001DD34(a1, qword_1000AC490);
}

uint64_t sub_10001D018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001E8C4(a1, a2, a3, (uint64_t)&unk_100081178, (uint64_t)&unk_100081190, (uint64_t (*)(uint64_t))sub_1000062E8);
}

uint64_t initializeBufferWithCopyOfBuffer for AEAParticipant.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AEAParticipant.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AEAParticipant.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AEAParticipant.Configuration()
{
  return &type metadata for AEAParticipant.Configuration;
}

char *sub_10001D108(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v7;
    a1[24] = *((unsigned char *)a2 + 24);
    uint64_t v8 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v9 = &v6[v8];
    uint64_t v10 = (uint64_t)a2 + v8;
    *uint64_t v9 = *((unsigned char *)a2 + v8);
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 16);
    *((void *)v9 + 1) = *(char **)((char *)a2 + v8 + 8);
    *((void *)v9 + 2) = v11;
    uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v9[v12];
    int v13 = (const void *)(v10 + v12);
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    long long v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v17 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v18 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = &v6[v19];
    uint64_t v21 = (uint64_t)a2 + v19;
    *uint64_t v20 = *(unsigned char *)v21;
    *((void *)v20 + 1) = *(void *)(v21 + 8);
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t type metadata accessor for AEAParticipant.Process(uint64_t a1)
{
  return sub_10001DD34(a1, qword_1000AC5B8);
}

uint64_t sub_10001D324(id *a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  int v3 = &v2[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001D420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 16);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  *(void *)(v8 + 16) = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v8 + v11);
  uint64_t v12 = (const void *)(v9 + v11);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  id v16 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v17 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10001D5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)(a2 + v9);
  *(void *)(v10 + 8) = *(void *)(a2 + v9 + 8);
  *(void *)(v10 + 16) = *(void *)(a2 + v9 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v13 = (void *)(v10 + v12);
  uint64_t v14 = (void *)(v11 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001D7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)(a2 + v6);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + v6 + 8);
  uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v10 = (void *)(v7 + v9);
  uint64_t v11 = (const void *)(v8 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10001D968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)uint64_t v9 = *(unsigned char *)(a2 + v8);
  uint64_t v11 = *(void *)(a2 + v8 + 16);
  *(void *)(v9 + 8) = *(void *)(a2 + v8 + 8);
  *(void *)(v9 + 16) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v13 = (void *)(v9 + v12);
  uint64_t v14 = (void *)(v10 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001DB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001DB7C);
}

uint64_t sub_10001DB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AEAParticipant.Process(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10001DC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001DC54);
}

uint64_t sub_10001DC54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AEAParticipant.Process(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AEAParticipant(uint64_t a1)
{
  return sub_10001DD34(a1, qword_1000AC528);
}

uint64_t sub_10001DD34(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001DD6C()
{
  uint64_t result = type metadata accessor for AEAParticipant.Process(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_10001DE00(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    a1[24] = *((unsigned char *)a2 + 24);
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (uint64_t)a2 + v7;
    *uint64_t v8 = *((unsigned char *)a2 + v7);
    uint64_t v10 = *(uint64_t *)((char *)a2 + v7 + 16);
    *((void *)v8 + 1) = *(char **)((char *)a2 + v7 + 8);
    *((void *)v8 + 2) = v10;
    uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v12 = &v8[v11];
    uint64_t v13 = (const void *)(v9 + v11);
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v17 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v18 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return v5;
}

uint64_t sub_10001DFB8(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = &v4[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t sub_10001E0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)(a2 + v6);
  uint64_t v9 = *(void *)(a2 + v6 + 16);
  *(void *)(v7 + 8) = *(void *)(a2 + v6 + 8);
  *(void *)(v7 + 16) = v9;
  uint64_t v10 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v11 = (void *)(v7 + v10);
  uint64_t v12 = (const void *)(v8 + v10);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  id v16 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v17 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t sub_10001E214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v13 = (void *)(v10 + v12);
  uint64_t v14 = (void *)(v11 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10001E404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)(a2 + v4);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + v4 + 8);
  uint64_t v7 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  id v8 = (void *)(v5 + v7);
  uint64_t v9 = (const void *)(v6 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10001E54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)uint64_t v9 = *(unsigned char *)v10;
  uint64_t v11 = *(void *)(v10 + 16);
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v13 = (void *)(v9 + v12);
  uint64_t v14 = (void *)(v10 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10001E718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E72C);
}

uint64_t sub_10001E72C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AEAParticipant.SecurityInfo(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10001E7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E7F0);
}

void *sub_10001E7F0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AEAParticipant.SecurityInfo(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10001E898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001E8C4(a1, a2, a3, (uint64_t)&value witness table for Builtin.UnknownObject + 64, (uint64_t)&unk_1000811E8, type metadata accessor for AEAParticipant.SecurityInfo);
}

uint64_t sub_10001E8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t result = a6(319);
  if (v7 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10001E958()
{
  _StringGuts.grow(_:)(22);
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 45;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  [*(id *)v0 processIdentifier];
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x756769666E6F6320;
  v6._object = (void *)0xEF3A6E6F69746172;
  String.append(_:)(v6);
  type metadata accessor for AEAParticipant(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

Swift::Int sub_10001EA88()
{
  Hasher.init(_seed:)();
  id v1 = [*v0 dataRepresentation];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.hash(into:)();
  sub_100006384(v2, v4);
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRetain();
  Swift::UInt v5 = Bool.hashValue.getter();
  Hasher._combine(_:)(v5);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v7 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v7);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10001EB8C()
{
  id v1 = [*v0 dataRepresentation];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.hash(into:)();
  sub_100006384(v2, v4);
  swift_bridgeObjectRetain();
  Swift::UInt v5 = Bool.hashValue.getter();
  Hasher._combine(_:)(v5);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v7 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v7);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001EC84()
{
  Hasher.init(_seed:)();
  id v1 = [*v0 dataRepresentation];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.hash(into:)();
  sub_100006384(v2, v4);
  swift_bridgeObjectRetain();
  Swift::UInt v5 = Bool.hashValue.getter();
  Hasher._combine(_:)(v5);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v7 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v7);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_10001ED84(uint64_t *a1@<X8>)
{
  id v3 = [*v1 dataRepresentation];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

void sub_10001EDE4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000048A0(&qword_1000AB5F8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*(unsigned char *)v0);
  if (*(void *)(v0 + 16))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v10 = type metadata accessor for AEAParticipant.SecurityInfo(0);
  sub_1000063DC(v0 + *(int *)(v10 + 24), (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v9, v1);
    Hasher._combine(_:)(1u);
    sub_10001F33C(&qword_1000AC628, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

Swift::Int sub_10001F000()
{
  Hasher.init(_seed:)();
  id v1 = [*v0 dataRepresentation];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.hash(into:)();
  sub_100006384(v2, v4);
  return Hasher._finalize()();
}

uint64_t sub_10001F088()
{
  id v1 = [*v0 dataRepresentation];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.hash(into:)();

  return sub_100006384(v2, v4);
}

Swift::Int sub_10001F104()
{
  Hasher.init(_seed:)();
  id v1 = [*v0 dataRepresentation];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.hash(into:)();
  sub_100006384(v2, v4);
  return Hasher._finalize()();
}

uint64_t sub_10001F188()
{
  uint64_t v4 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 45;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  [*(id *)v0 processIdentifier];
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10001F210()
{
  return static NSObject.== infix(_:_:)() & 1;
}

unint64_t sub_10001F258()
{
  unint64_t result = qword_1000AC5F8;
  if (!qword_1000AC5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC5F8);
  }
  return result;
}

uint64_t sub_10001F2AC()
{
  return sub_10001F33C(&qword_1000AC600, (void (*)(uint64_t))type metadata accessor for AEAParticipant.Process);
}

uint64_t sub_10001F2F4()
{
  return sub_10001F33C(&qword_1000AC608, (void (*)(uint64_t))type metadata accessor for AEAParticipant);
}

uint64_t sub_10001F33C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_10001F384()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001F3F8()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10001F454()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10001F4C4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v5) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

Swift::Int sub_10001F524()
{
  return Hasher._finalize()();
}

Swift::Int sub_10001F568()
{
  return Hasher._finalize()();
}

unint64_t sub_10001F5A8()
{
  unint64_t result = sub_100070DB4((uint64_t)_swiftEmptyArrayStorage);
  byte_1000B01A0 = 1;
  qword_1000B01A8 = result;
  return result;
}

Swift::Int sub_10001F5DC()
{
  return Hasher._finalize()();
}

void sub_10001F648()
{
  Swift::UInt v0 = Bool.hashValue.getter();
  Hasher._combine(_:)(v0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v2 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v2);
}

Swift::Int sub_10001F6C4()
{
  return Hasher._finalize()();
}

uint64_t sub_10001F72C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  sub_100020210();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  char v5 = static NSObject.== infix(_:_:)();

  return v5 & 1;
}

unint64_t sub_10001F7FC()
{
  unint64_t result = qword_1000AC610;
  if (!qword_1000AC610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC610);
  }
  return result;
}

uint64_t sub_10001F850()
{
  return sub_10001F33C(&qword_1000AC618, (void (*)(uint64_t))type metadata accessor for AEAParticipant.SecurityInfo);
}

Swift::Int sub_10001F898()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

void sub_10001F960()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10001FA10()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10001FAC8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return sub_10001FB6C((uint64_t)v5, (uint64_t)v7) & 1;
}

unint64_t sub_10001FB18()
{
  unint64_t result = qword_1000AC620;
  if (!qword_1000AC620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC620);
  }
  return result;
}

uint64_t sub_10001FB6C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (!v8)
    {
LABEL_16:
      char v6 = ((*(unsigned char *)(a1 + 32) & 1) == 0) ^ *(unsigned char *)(a2 + 32);
      return v6 & 1;
    }
LABEL_15:
    char v6 = 0;
    return v6 & 1;
  }
  if (!v8) {
    goto LABEL_15;
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && v7 == v8) {
    goto LABEL_16;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v6 = 0;
  if (v10) {
    goto LABEL_16;
  }
  return v6 & 1;
}

uint64_t sub_10001FC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v17 - v10;
  sub_100020210();
  char v12 = static NSObject.== infix(_:_:)();
  sub_100020250(a1, (uint64_t)v11);
  sub_100020250(a2, (uint64_t)v8);
  if ((v12 & 1) != 0 && v11[*(int *)(v4 + 20)] == v8[*(int *)(v4 + 20)])
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    Class v15 = Dictionary._bridgeToObjectiveC()().super.isa;
    char v13 = static NSObject.== infix(_:_:)();
  }
  else
  {
    char v13 = 0;
  }
  sub_1000202B4((uint64_t)v11);
  sub_1000202B4((uint64_t)v8);
  return v13 & 1;
}

BOOL sub_10001FD98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000048A0(&qword_1000AC630);
  __chkstk_darwin(v9, v10);
  char v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000048A0(&qword_1000AB5F8);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v40 - v20;
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v40 - v23;
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v26 = *((void *)a1 + 2);
  uint64_t v27 = *((void *)a2 + 2);
  if (!v26)
  {
    if (v27) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!v27) {
    return 0;
  }
  if (*((void *)a1 + 1) == *((void *)a2 + 1) && v26 == v27
    || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v28 & 1) != 0))
  {
LABEL_11:
    uint64_t v41 = v8;
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    uint64_t v31 = type metadata accessor for AEAParticipant.SecurityInfo(0);
    sub_1000063DC((uint64_t)&a1[*(int *)(v31 + 24)], (uint64_t)v24);
    uint64_t v32 = *(int *)(v31 + 24);
    uint64_t v33 = v30;
    uint64_t v34 = v29;
    sub_1000063DC((uint64_t)&a2[v32], (uint64_t)v21);
    uint64_t v35 = (uint64_t)&v12[*(int *)(v9 + 48)];
    sub_1000063DC((uint64_t)v24, (uint64_t)v12);
    sub_1000063DC((uint64_t)v21, v35);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    if (v36((uint64_t)v12, 1, v29) == 1)
    {
      sub_1000201B4((uint64_t)v21, &qword_1000AB5F8);
      sub_1000201B4((uint64_t)v24, &qword_1000AB5F8);
      if (v36(v35, 1, v29) == 1)
      {
        sub_1000201B4((uint64_t)v12, &qword_1000AB5F8);
        return 1;
      }
      goto LABEL_16;
    }
    sub_1000063DC((uint64_t)v12, (uint64_t)v17);
    if (v36(v35, 1, v29) == 1)
    {
      sub_1000201B4((uint64_t)v21, &qword_1000AB5F8);
      sub_1000201B4((uint64_t)v24, &qword_1000AB5F8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v29);
LABEL_16:
      sub_1000201B4((uint64_t)v12, &qword_1000AC630);
      return 0;
    }
    uint64_t v37 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v41, v35, v34);
    sub_10001F33C(&qword_1000AC638, (void (*)(uint64_t))&type metadata accessor for URL);
    char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    v39(v37, v34);
    sub_1000201B4((uint64_t)v21, &qword_1000AB5F8);
    sub_1000201B4((uint64_t)v24, &qword_1000AB5F8);
    v39(v17, v34);
    sub_1000201B4((uint64_t)v12, &qword_1000AB5F8);
    return (v38 & 1) != 0;
  }
  return result;
}

uint64_t sub_1000201B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000048A0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100020210()
{
  unint64_t result = qword_1000AC640;
  if (!qword_1000AC640)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000AC640);
  }
  return result;
}

uint64_t sub_100020250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000202B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100020314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AEAParticipant.Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AEAParticipant.Metadata(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AEAParticipant.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAParticipant.Metadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAParticipant.Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAParticipant.Metadata()
{
  return &type metadata for AEAParticipant.Metadata;
}

unint64_t sub_100020494()
{
  unint64_t result = qword_1000AC648;
  if (!qword_1000AC648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AC648);
  }
  return result;
}

uint64_t sub_1000204F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100072904(a1, a2);
  if ((v8 & 1) == 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_10001B8E8(*(void *)(a4 + 56) + 32 * v7, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
LABEL_8:
    sub_1000205E0((uint64_t)&v12);
    return 2;
  }
  sub_10000650C();
  if ((swift_dynamicCast() & 1) == 0) {
    return 2;
  }
  id v9 = [v11 BOOLValue];

  return (uint64_t)v9;
}

uint64_t sub_1000205E0(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0((uint64_t *)&unk_1000AC650);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100020640()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC15assessmentagent8AEAAgent_services];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000091C4(v3, (uint64_t)v8);
      uint64_t v4 = v9;
      uint64_t v5 = v10;
      sub_100006340(v8, v9);
      (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
      sub_1000048E4((uint64_t)v8);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for AEAAgent();
  return [super dealloc];
}

id sub_100020804(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_languagePreferencesChangedObservation] = 0;
  v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_cancellables] = &_swiftEmptySetSingleton;
  sub_100021FF8(a1, (uint64_t)&v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_args]);
  type metadata accessor for AEATaskQueue();
  swift_allocObject();
  uint64_t v3 = v1;
  uint64_t v4 = sub_100055310();
  *(void *)&v3[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskQueue] = v4;
  uint64_t v5 = &v3[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource];
  sub_1000091C4(a1 + 56, (uint64_t)&v3[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource]);
  uint64_t v6 = *(void *)(a1 + 96);
  sub_1000091C4(a1 + 104, (uint64_t)(v5 + 48));
  *((void *)v5 + 5) = v6;
  objc_super v7 = *(uint64_t (**)(char *, uint64_t))(a1 + 160);
  swift_retain();
  *(void *)&v3[OBJC_IVAR____TtC15assessmentagent8AEAAgent_services] = v7(v5, v4);
  sub_100021FF8(a1, (uint64_t)v18);
  char v8 = (_OWORD *)swift_allocObject();
  long long v9 = v18[9];
  v8[9] = v18[8];
  v8[10] = v9;
  v8[11] = v18[10];
  long long v10 = v18[5];
  v8[5] = v18[4];
  v8[6] = v10;
  long long v11 = v18[7];
  v8[7] = v18[6];
  v8[8] = v11;
  long long v12 = v18[1];
  v8[1] = v18[0];
  v8[2] = v12;
  long long v13 = v18[3];
  void v8[3] = v18[2];
  v8[4] = v13;
  uint64_t v14 = sub_100039880((uint64_t)sub_100022098, (uint64_t)v8);
  swift_release();
  *(void *)&v3[OBJC_IVAR____TtC15assessmentagent8AEAAgent_sigtermSourceSignal] = v14;

  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for AEAAgent();
  id v15 = [super init];
  sub_100021E10(a1);
  return v15;
}

void sub_1000209C0()
{
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000CB7C(v0, (uint64_t)qword_1000B0110);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received SIGINT. Tearing down.", v3, 2u);
    swift_slowDealloc();
  }

  exit(2);
}

void sub_100020A90()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  objc_super v7 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin();
  long long v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = (void *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args);
  sub_100006340((void *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args), *(void *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args + 24));
  id v11 = sub_1000661B4();
  id v12 = [v11 enterSandbox];

  id v13 = [v12 value];
  if (v13)
  {
    uint64_t v51 = v6;
    unsigned int v14 = [v13 BOOLValue];

    if (v14) {
      sub_100021520();
    }
    os_log_type_t v48 = v7;
    uint64_t v53 = v3;
    uint64_t v15 = v2;
    if (qword_1000AA578 != -1) {
      swift_once();
    }
    uint64_t v16 = qword_1000B01B0;
    uint64_t v60 = (uint64_t (**)(void *, void *))sub_10007494C;
    uint64_t v61 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v57 = 1107296256;
    uint64_t v58 = sub_100021DB0;
    uint64_t v59 = &unk_10009F8A8;
    objc_super v17 = _Block_copy(&aBlock);
    swift_release();
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v16, v17);
    _Block_release(v17);
    uint64_t v18 = qword_1000B01B0;
    uint64_t v60 = (uint64_t (**)(void *, void *))sub_1000749A8;
    uint64_t v61 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v57 = 1107296256;
    BOOL v52 = &v58;
    uint64_t v58 = sub_100021DB0;
    uint64_t v59 = &unk_10009F8D0;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_release();
    xpc_set_event_stream_handler("com.apple.fsevents.matching", v18, v19);
    _Block_release(v19);
    uint64_t v20 = (uint64_t (*)(uint64_t))v10[18];
    uint64_t v45 = v10;
    uint64_t v47 = v1;
    uint64_t v46 = v20(v1 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource);
    uint64_t v21 = *(void *)(v46 + 16);
    if (v21)
    {
      uint64_t v50 = *(void *)(v47 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskQueue);
      uint64_t v22 = (uint64_t *)(v46 + 32);
      ++v48;
      uint64_t v49 = (void (**)(char *, uint64_t))(v53 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = v50;
        uint64_t v53 = *(void *)(v50 + 16);
        uint64_t v25 = (void *)swift_allocObject();
        void v25[2] = v24;
        v25[3] = v23;
        v25[4] = 0;
        v25[5] = 0;
        uint64_t v60 = (uint64_t (**)(void *, void *))sub_100021EFC;
        uint64_t v61 = v25;
        aBlock = _NSConcreteStackBlock;
        uint64_t v57 = 1107296256;
        uint64_t v58 = sub_10005E228;
        uint64_t v59 = &unk_10009F920;
        uint64_t v26 = _Block_copy(&aBlock);
        swift_retain_n();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        *(void *)&v54[0] = &_swiftEmptyArrayStorage;
        sub_10000C5D8();
        sub_1000048A0(&qword_1000AB7D8);
        sub_100005840((unint64_t *)&qword_1000AB7E0, &qword_1000AB7D8);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v27 = v51;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v26);
        (*v49)(v5, v15);
        (*v48)(v9, v27);
        swift_release();
        swift_release();
        --v21;
      }
      while (v21);
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = v47;
    uint64_t v29 = *(void *)(v47 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_services);
    uint64_t v30 = *(void *)(v29 + 16);
    if (v30)
    {
      uint64_t v31 = v29 + 32;
      uint64_t v53 = *(void *)(v47 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_services);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000091C4(v31, (uint64_t)&aBlock);
        uint64_t v32 = v59;
        uint64_t v33 = v60;
        sub_100006340(&aBlock, (uint64_t)v59);
        uint64_t v55 = v33[5](v32, v33);
        uint64_t v34 = swift_allocObject();
        swift_unknownObjectWeakInit();
        sub_1000091C4((uint64_t)&aBlock, (uint64_t)v54);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v34;
        sub_1000093C0(v54, v35 + 24);
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = sub_100021F84;
        *(void *)(v36 + 24) = v35;
        sub_1000048A0(&qword_1000AC6D8);
        sub_100005840(qword_1000AC6E0, &qword_1000AC6D8);
        Publisher<>.sink(receiveValue:)();
        swift_release();
        swift_release();
        swift_beginAccess();
        AnyCancellable.store(in:)();
        swift_endAccess();
        swift_release();
        uint64_t v37 = v59;
        char v38 = (void (**)(void *, void *))v60;
        sub_100006340(&aBlock, (uint64_t)v59);
        v38[1](v37, v38);
        sub_1000048E4((uint64_t)&aBlock);
        v31 += 40;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
    }
    uint64_t v39 = *(void **)(*sub_100006340(v45, v45[3]) + 208);
    swift_unknownObjectRetain();
    NSString v40 = String._bridgeToObjectiveC()();
    uint64_t v41 = qword_1000B01B0;
    uint64_t v42 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v60 = (uint64_t (**)(void *, void *))sub_100021FF0;
    uint64_t v61 = (void *)v42;
    aBlock = _NSConcreteStackBlock;
    uint64_t v57 = 1107296256;
    uint64_t v58 = sub_10005E228;
    uint64_t v59 = &unk_10009F9C0;
    unint64_t v43 = _Block_copy(&aBlock);
    swift_release();
    id v44 = [v39 observeSystemNotificationWithName:v40 onQueue:v41 withHandler:v43];
    _Block_release(v43);

    *(void *)(v28 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_languagePreferencesChangedObservation) = v44;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000212BC(uint64_t a1, unint64_t a2)
{
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000CB7C(v4, (uint64_t)qword_1000B0110);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    objc_super v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)objc_super v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000722AC(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received notification: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_100021464()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (*(unsigned char *)(Strong + OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds) == 1) {
      sub_1000217BC();
    }
  }
}

void sub_1000214CC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000217BC();
  }
}

id sub_100021520()
{
  id result = *(id *)(*sub_100006340((void *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args), *(void *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args + 24))+ 16);
  if (result)
  {
    id v12 = 0;
    unsigned int v2 = [result enterSandboxWithError:&v12];
    id v3 = v12;
    if (!v2)
    {
      id v4 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1000AA540 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10000CB7C(v5, (uint64_t)qword_1000B0110);
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        id v12 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136446210;
        swift_getErrorValue();
        uint64_t v9 = sub_100062820(v11);
        sub_1000722AC(v9, v10, (uint64_t *)&v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to enter sandbox. Error: %{public}s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      exit(1);
    }
    return v3;
  }
  return result;
}

uint64_t sub_1000217BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_services);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000091C4(v4, (uint64_t)&v9);
      uint64_t v5 = v10;
      uint64_t v6 = v11;
      sub_100006340(&v9, v10);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6)) {
        break;
      }
      sub_1000048E4((uint64_t)&v9);
      v4 += 40;
      if (!--v3) {
        goto LABEL_7;
      }
    }
    sub_1000093C0(&v9, (uint64_t)&v12);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)&v13 + 1);
  uint64_t result = sub_100021D50((uint64_t)&v12);
  if (!v7) {
    exit(0);
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds) = 1;
  return result;
}

uint64_t type metadata accessor for AEAAgent()
{
  return self;
}

uint64_t destroy for AEAAgent.Arguments(uint64_t a1)
{
  sub_1000048E4(a1);
  swift_unknownObjectRelease();
  sub_1000048E4(a1 + 56);
  swift_release();
  sub_1000048E4(a1 + 104);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AEAAgent.Arguments(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_unknownObjectRetain();
  v7(a1 + 56, a2 + 56, v6);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_retain();
  v10(a1 + 104, a2 + 104, v9);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for AEAAgent.Arguments(uint64_t *a1, uint64_t *a2)
{
  sub_10000E5F4(a1, a2);
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[6] = v4;
  sub_10000E5F4(a1 + 7, a2 + 7);
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  sub_10000E5F4(a1 + 13, a2 + 13);
  uint64_t v5 = a2[19];
  a1[18] = a2[18];
  a1[19] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[21];
  a1[20] = a2[20];
  a1[21] = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AEAAgent.Arguments(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for AEAAgent.Arguments(uint64_t a1, uint64_t a2)
{
  sub_1000048E4(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = v6;
  sub_1000048E4(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_release();
  sub_1000048E4(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAAgent.Arguments(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAAgent.Arguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAgent.Arguments()
{
  return &type metadata for AEAAgent.Arguments;
}

uint64_t sub_100021D50(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0((uint64_t *)&unk_1000AC6C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100021DB0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100021E10(uint64_t a1)
{
  return a1;
}

uint64_t sub_100021E40(uint64_t a1)
{
  return a1;
}

uint64_t sub_100021E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100021EA4()
{
  return swift_release();
}

uint64_t sub_100021EAC()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100021EFC()
{
  sub_10005FC44(v0[2], v0 + 3, v0[4], v0[5]);
}

uint64_t sub_100021F0C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100021F44()
{
  swift_release();
  sub_1000048E4(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100021F84()
{
}

uint64_t sub_100021F90()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100021FC8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100021FF0()
{
}

uint64_t sub_100021FF8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100022030()
{
  sub_1000048E4(v0 + 16);
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 72);
  swift_release();
  sub_1000048E4(v0 + 120);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

void sub_100022098()
{
}

uint64_t sub_1000220B8()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1000221B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 48);
  v11[0] = *(void *)(a2 + 16);
  v11[1] = a3;
  v11[2] = v6;
  uint64_t v12 = a4;
  long long v13 = *(_OWORD *)(a2 + 32);
  uint64_t v14 = v7;
  uint64_t v8 = _s17AEADeltaPublisherV17DeltaSubscriptionCMa();
  uint64_t v9 = sub_100024EB0(v4, a1);
  uint64_t v12 = v8;
  *(void *)&long long v13 = swift_getWitnessTable();
  v11[0] = v9;
  dispatch thunk of Subscriber.receive(subscription:)();
  return sub_1000048E4((uint64_t)v11);
}

uint64_t sub_10002227C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  if ((static Array<A>.== infix(_:_:)() & 1) == 0 || (static Array<A>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return static Array<A>.== infix(_:_:)();
}

uint64_t sub_1000223D4()
{
  return sub_10002227C() & 1;
}

uint64_t sub_100022428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000221B8(a1, a4, a2, a3);
}

uint64_t sub_10002243C()
{
  swift_slowDealloc();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_100009360(v0 + *(void *)(*(void *)v0 + 168));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10002258C()
{
  sub_10002243C();

  return swift_deallocClassInstance();
}

uint64_t _s17AEADeltaPublisherV17DeltaSubscriptionCMa()
{
  return swift_getGenericMetadata();
}

void sub_1000225F8()
{
  uint64_t v1 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 152));
  os_unfair_lock_lock(v1);
  sub_100022664(v0);

  os_unfair_lock_unlock(v1);
}

uint64_t sub_100022664(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v28 = (char *)&v20 - v7;
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t result = __chkstk_darwin(v9, v10);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = *(void *)(v2 + 160);
  if ((*((unsigned char *)a1 + v15) & 1) == 0)
  {
    uint64_t v21 = v12;
    uint64_t v22 = result;
    uint64_t v23 = v5;
    *((unsigned char *)a1 + v15) = 1;
    uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 + 168);
    swift_beginAccess();
    sub_1000092F8(v16, (uint64_t)&v25);
    if (*((void *)&v26 + 1))
    {
      sub_1000091C4((uint64_t)&v25, (uint64_t)v24);
      sub_100009360((uint64_t)&v25);
      uint64_t v20 = v4;
      sub_100006340(v24, v24[3]);
      uint64_t v4 = v20;
      dispatch thunk of Cancellable.cancel()();
      sub_1000048E4((uint64_t)v24);
    }
    else
    {
      sub_100009360((uint64_t)&v25);
    }
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    swift_beginAccess();
    sub_100009290((uint64_t)&v25, v16);
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v14, 1, 1, v8);
    uint64_t v17 = (uint64_t)a1 + *(void *)(*a1 + 144);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 40))(v17, v14, v22);
    swift_endAccess();
    uint64_t v18 = v28;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v28, 1, 1, v3);
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 + 136);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(v19, v18, v4);
    swift_endAccess();
    swift_beginAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Dictionary();
    Dictionary.removeAll(keepingCapacity:)(0);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_100022B00(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152));
  os_unfair_lock_lock(v3);
  sub_100022B8C(v1, a1, &v5);
  os_unfair_lock_unlock(v3);
  v5();

  return swift_release();
}

uint64_t sub_100022B8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  if ((*(unsigned char *)(result + *(void *)(*(void *)result + 160)) & 1) == 0)
  {
    uint64_t v5 = result + *(void *)(*(void *)result + 168);
    swift_beginAccess();
    sub_1000092F8(v5, (uint64_t)&v7);
    if (v8)
    {
      sub_1000093C0(&v7, (uint64_t)v9);
      sub_1000093C0(v9, (uint64_t)&v7);
      uint64_t v6 = swift_allocObject();
      uint64_t result = sub_1000093C0(&v7, v6 + 16);
      *(void *)(v6 + 56) = a2;
      *a3 = sub_100009410;
      a3[1] = (uint64_t (*)())v6;
      return result;
    }
    uint64_t result = sub_100009360((uint64_t)&v7);
  }
  *a3 = Publishers.AEACombineLatestMany.init(_:);
  a3[1] = 0;
  return result;
}

void sub_100022CB4(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152));
  os_unfair_lock_lock(v3);
  sub_100022D28(v1, a1);

  os_unfair_lock_unlock(v3);
}

uint64_t sub_100022D28(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(result + *(void *)(*(void *)result + 160)) & 1) == 0)
  {
    uint64_t v2 = result;
    sub_1000091C4(a2, (uint64_t)v5);
    sub_100009228((uint64_t)v5, (uint64_t)v4);
    uint64_t v3 = v2 + *(void *)(*(void *)v2 + 168);
    swift_beginAccess();
    sub_100009290((uint64_t)v4, v3);
    return swift_endAccess();
  }
  return result;
}

void sub_100022DD0(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v3);
  sub_100022E44(v1, a1);

  os_unfair_lock_unlock(v3);
}

uint64_t sub_100022E44(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v16 - v13;
  if ((*((unsigned char *)a1 + *(void *)(v3 + 160)) & 1) == 0)
  {
    uint64_t v15 = (uint64_t)a1 + *(void *)(v4 + 144);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v15, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5))
    {
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      dispatch thunk of Subscriber.receive(completion:)();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return result;
}

uint64_t (*sub_1000230B4(void (**a1)(char *, uint64_t)))@<X0>(uint64_t *a1@<X8>)
{
  void (*v5)(uint64_t (**__return_ptr)@<X0>(uint64_t *@<X8>));

  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v3);
  sub_10002313C(v1, a1, (uint64_t (**)@<X0>(uint64_t *@<X8>))&v5);
  os_unfair_lock_unlock(v3);
  v5((uint64_t (**)@<X0>(uint64_t *@<X8>))&v5);
  swift_release();
  return (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
}

uint64_t sub_10002313C@<X0>(void *a1@<X0>, void (**a2)(char *, uint64_t)@<X1>, uint64_t (**a3)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = *a1;
  uint64_t v37 = a2;
  uint64_t v38 = v5;
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = *(void *)(v6 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v10, v15);
  uint64_t result = __chkstk_darwin(v16, v17);
  uint64_t v21 = (char *)&v35 - v20;
  uint64_t v22 = sub_1000082D4;
  if (*((unsigned char *)a1 + *(void *)(v4 + 160)))
  {
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v36 = v19;
    uint64_t v24 = (char *)a1 + *(void *)(v38 + 144);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v24, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v6) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      uint64_t v23 = 0;
      uint64_t v22 = sub_1000082D4;
    }
    else
    {
      long long v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v25(v21, v12, v6);
      uint64_t v37 = (void (**)(char *, uint64_t))sub_10002348C(v37);
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v30 = v36;
      v25(v36, v21, v6);
      unint64_t v31 = (*(unsigned __int8 *)(v13 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v23 = swift_allocObject();
      uint64_t v32 = v38;
      *(void *)(v23 + 16) = *(void *)(v38 + 80);
      *(void *)(v23 + 24) = v6;
      *(void *)(v23 + 32) = *(void *)(v32 + 96);
      *(void *)(v23 + 40) = *(void *)(v32 + 104);
      *(_OWORD *)(v23 + 48) = *(_OWORD *)(v32 + 112);
      *(void *)(v23 + 64) = *(void *)(v32 + 128);
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(v23 + v31, v30, v6);
      uint64_t v33 = (void *)(v23 + ((v14 + v31 + 7) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v33 = v37;
      v33[1] = v27;
      v33[2] = v29;
      uint64_t v22 = sub_100024FD4;
    }
  }
  uint64_t v34 = v39;
  *uint64_t v39 = v22;
  v34[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v23;
  return result;
}

uint64_t sub_10002348C(void (**a1)(char *, uint64_t))
{
  uint64_t v109 = a1;
  uint64_t v88 = *v1;
  int64_t v2 = *(void *)(v88 + 128);
  uint64_t v3 = *(void (**)(char *, uint64_t))(*(void *)(v88 + 112) + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v108 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  v112 = (char *)&v83 - v8;
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  v103 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v101 = (char *)&v83 - v13;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  v89 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  v87 = (char *)&v83 - v21;
  __chkstk_darwin(v20, v22);
  v85 = (char *)&v83 - v23;
  uint64_t v106 = type metadata accessor for Optional();
  uint64_t v98 = *(void *)(v106 - 8);
  uint64_t v25 = __chkstk_darwin(v106, v24);
  v100 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v83 - v29;
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)&v83 - v32;
  uint64_t v34 = swift_checkMetadataState();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  uint64_t v105 = (void (**)(char *, uint64_t))((char *)&v83 - v37);
  uint64_t v104 = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(v104 - 8);
  __chkstk_darwin(v104, v38);
  NSString v40 = (char *)&v83 - v39;
  int64_t v110 = v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v117 = Dictionary.init()();
  uint64_t v42 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 176));
  swift_beginAccess();
  v84 = v42;
  unint64_t v116 = *v42;
  swift_bridgeObjectRetain();
  uint64_t v115 = Array.init()();
  uint64_t v114 = Array.init()();
  uint64_t v113 = Array.init()();
  (*(void (**)(void (**)(char *, uint64_t), void (**)(char *, uint64_t), uint64_t))(v35 + 16))(v105, v109, v34);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v43 = swift_getAssociatedConformanceWitness();
  uint64_t v102 = v40;
  id v44 = v85;
  uint64_t v99 = v43;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v45 = v15 + 48;
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v47 = v46(v33, 1, v14);
  uint64_t v111 = AssociatedConformanceWitness;
  if (v47 != 1)
  {
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v56 = v15 + 32;
    uint64_t v57 = v58;
    v92 = (void (**)(char *, char *, uint64_t))(v56 - 16);
    v90 = (void (**)(char *, uint64_t))(v56 - 24);
    uint64_t v105 = (void (**)(char *, uint64_t))(v98 + 8);
    uint64_t v91 = (void (**)(char *, void, uint64_t, uint64_t))(v56 + 24);
    uint64_t v98 = v56;
    uint64_t v97 = v30;
    v96 = v33;
    v93 = v58;
    uint64_t v95 = v45;
    v94 = v46;
    uint64_t v109 = (void (**)(char *, uint64_t))(v107 + 8);
    v58(v44, v33, v14);
    while (1)
    {
      uint64_t v67 = AssociatedTypeWitness;
      uint64_t v68 = (unsigned int (*)(char *, uint64_t, uint64_t))v46;
      uint64_t v69 = v101;
      dispatch thunk of Identifiable.id.getter();
      Dictionary.subscript.getter();
      uint64_t v108 = *v109;
      v108(v69, v67);
      if (v68(v30, 1, v14) == 1)
      {
        uint64_t v59 = v67;
        (*v105)(v30, v106);
        uint64_t v60 = v92;
        (*v92)(v89, v44, v14);
        type metadata accessor for Array();
        Array.append(_:)();
        uint64_t v61 = v103;
        uint64_t v62 = v90;
      }
      else
      {
        uint64_t v70 = v87;
        v57(v87, v30, v14);
        char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v61 = v103;
        uint64_t v60 = v92;
        uint64_t v59 = v67;
        if ((v71 & 1) == 0)
        {
          (*v92)(v89, v44, v14);
          type metadata accessor for Array();
          Array.append(_:)();
        }
        uint64_t v62 = v90;
        (*v90)(v70, v14);
      }
      dispatch thunk of Identifiable.id.getter();
      uint64_t v63 = v61;
      uint64_t v64 = v100;
      (*v60)(v100, v44, v14);
      (*v91)(v64, 0, 1, v14);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      dispatch thunk of Identifiable.id.getter();
      Dictionary.removeValue(forKey:)();
      v108(v63, v59);
      (*v105)(v64, v106);
      (*v62)(v44, v14);
      uint64_t v65 = v96;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v46 = v94;
      int v66 = v94(v65, 1, v14);
      uint64_t AssociatedTypeWitness = v59;
      uint64_t v30 = v97;
      uint64_t v57 = v93;
      if (v66 == 1) {
        break;
      }
      v93(v44, v65, v14);
    }
  }
  (*(void (**)(char *, uint64_t))(v86 + 8))(v102, v104);
  uint64_t v108 = (void (*)(char *, uint64_t))v116;
  if ((v116 & 0xC000000000000001) != 0)
  {
    unint64_t v48 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v111 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    uint64_t v53 = v112;
    uint64_t v54 = v103;
    uint64_t v55 = AssociatedTypeWitness;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = AssociatedTypeWitness;
    uint64_t result = _NativeDictionary.makeIterator()();
    unint64_t v48 = v118;
    uint64_t v111 = v119;
    uint64_t v50 = v120;
    uint64_t v51 = v121;
    unint64_t v52 = v122;
    uint64_t v53 = v112;
    uint64_t v54 = v103;
  }
  uint64_t v72 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
  uint64_t v106 = v50;
  uint64_t v109 = (void (**)(char *, uint64_t))(v48 & 0x7FFFFFFFFFFFFFFFLL);
  int64_t v110 = (unint64_t)(v50 + 64) >> 6;
  uint64_t v73 = (void (**)(char *, char *, uint64_t))(v107 + 32);
  uint64_t v74 = v112;
  while ((v48 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.nextKey()())
    {
      uint64_t v53 = v112;
LABEL_39:
      v81 = v84;
      (*v72)(v53, 1, 1, v55);
      sub_1000198D8();
      uint64_t *v81 = v117;
      swift_bridgeObjectRelease();
      uint64_t v82 = v115;
      swift_bridgeObjectRelease();
      return v82;
    }
    _forceBridgeFromObjectiveC<A>(_:_:)();
    uint64_t v53 = v74;
    swift_unknownObjectRelease();
LABEL_16:
    (*v72)(v53, 0, 1, v55);
    (*v73)(v54, v53, v55);
    type metadata accessor for Array();
    uint64_t result = Array.append(_:)();
    uint64_t v53 = v112;
  }
  if (v52)
  {
    unint64_t v75 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    unint64_t v76 = v75 | (v51 << 6);
LABEL_15:
    (*(void (**)(char *, unint64_t, uint64_t))(v107 + 16))(v53, *(void *)(v48 + 48) + *(void *)(v107 + 72) * v76, v55);
    goto LABEL_16;
  }
  int64_t v77 = v51 + 1;
  if (!__OFADD__(v51, 1))
  {
    if (v77 >= v110) {
      goto LABEL_39;
    }
    unint64_t v78 = *(void *)(v111 + 8 * v77);
    uint64_t v79 = v51 + 1;
    if (!v78)
    {
      uint64_t v79 = v51 + 2;
      if (v51 + 2 >= v110) {
        goto LABEL_39;
      }
      unint64_t v78 = *(void *)(v111 + 8 * v79);
      if (!v78)
      {
        uint64_t v79 = v51 + 3;
        if (v51 + 3 >= v110) {
          goto LABEL_39;
        }
        unint64_t v78 = *(void *)(v111 + 8 * v79);
        if (!v78)
        {
          uint64_t v79 = v51 + 4;
          if (v51 + 4 >= v110) {
            goto LABEL_39;
          }
          unint64_t v78 = *(void *)(v111 + 8 * v79);
          if (!v78)
          {
            uint64_t v79 = v51 + 5;
            if (v51 + 5 >= v110) {
              goto LABEL_39;
            }
            unint64_t v78 = *(void *)(v111 + 8 * v79);
            if (!v78)
            {
              uint64_t v80 = v51 + 6;
              while (v110 != v80)
              {
                unint64_t v78 = *(void *)(v111 + 8 * v80++);
                if (v78)
                {
                  uint64_t v79 = v80 - 1;
                  goto LABEL_34;
                }
              }
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v52 = (v78 - 1) & v78;
    unint64_t v76 = __clz(__rbit64(v78)) + (v79 << 6);
    uint64_t v51 = v79;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100024190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_10002419C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000241E0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100024230(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AEARunningBoardApplication(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000242BC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10002430C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100024354(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s17AEADeltaPublisherV5DeltaVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000243AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000243B4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100024444(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1000245A0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1000247B8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t _s17AEADeltaPublisherVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000247F8()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_100024814(uint64_t a1)
{
  return sub_100022B00(a1);
}

void sub_100024838(uint64_t a1)
{
}

uint64_t (*sub_10002485C(void (**a1)(char *, uint64_t)))@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000230B4(a1);
}

void sub_100024880(uint64_t a1)
{
}

void sub_1000248A4()
{
}

uint64_t sub_1000248C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000248E4()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_100024904()
{
  return swift_getWitnessTable();
}

uint64_t sub_100024920(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = a2;
  uint64_t v43 = a1;
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 88);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6, v7);
  id v44 = (char *)&v31 - v8;
  uint64_t v9 = v4[10];
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v36 = (char *)&v31 - v12;
  uint64_t v13 = v3 + v4[17];
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v35(v13, 1, 1, v9);
  int v15 = (char *)(v3 + *(void *)(*(void *)v3 + 144));
  uint64_t v38 = v5;
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
  uint64_t v34 = v16 + 56;
  NSString v40 = v17;
  v17(v15, 1, 1, v5);
  uint64_t v18 = *(void *)(*(void *)v3 + 152);
  uint64_t v19 = (_DWORD *)swift_slowAlloc();
  *(void *)(v3 + v18) = v19;
  *uint64_t v19 = 0;
  *(unsigned char *)(v3 + *(void *)(*(void *)v3 + 160)) = 0;
  uint64_t v20 = v3 + *(void *)(*(void *)v3 + 168);
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(void *)(v20 + 32) = 0;
  uint64_t v32 = *(void *)(*(void *)v3 + 176);
  uint64_t v21 = v4[16];
  uint64_t v39 = v4[14];
  uint64_t v37 = v4[12];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v33 = v21;
  swift_getAssociatedTypeWitness();
  swift_checkMetadataState();
  swift_getAssociatedConformanceWitness();
  *(void *)(v3 + v32) = Dictionary.init()();
  uint64_t v22 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v36, v43, v9);
  uint64_t v23 = v22;
  v35((uint64_t)v22, 0, 1, v9);
  uint64_t v24 = v3 + *(void *)(*(void *)v3 + 136);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 40))(v24, v23, v42);
  swift_endAccess();
  uint64_t v25 = v44;
  uint64_t v26 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v44, v45, v38);
  v40(v25, 0, 1, v26);
  uint64_t v27 = v3 + *(void *)(*(void *)v3 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 40))(v27, v25, v47);
  swift_endAccess();
  uint64_t v55 = v3;
  uint64_t v28 = v4[13];
  uint64_t v29 = v4[15];
  uint64_t v48 = v9;
  uint64_t v49 = v26;
  uint64_t v50 = v37;
  uint64_t v51 = v28;
  uint64_t v52 = v39;
  uint64_t v53 = v29;
  uint64_t v54 = v33;
  _s17AEADeltaPublisherV17DeltaSubscriptionCMa();
  swift_getWitnessTable();
  dispatch thunk of Publisher.receive<A>(subscriber:)();
  return v3;
}

uint64_t sub_100024EB0(uint64_t a1, uint64_t a2)
{
  return sub_100024920(a1, a2);
}

uint64_t sub_100024F24()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 72) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100024FD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of Subscriber.receive(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_100025080()
{
  sub_1000048E4(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000250B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000CB7C(v4, (uint64_t)qword_1000B0140);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Main participant did change", v7, 2u);
    swift_slowDealloc();
  }

  return sub_1000251B8(a1, a2);
}

uint64_t sub_1000251B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AFC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025220(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_1000048A0(&qword_1000ACAA0);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_1000252B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100026CE0(0, &qword_1000ACAD8);
  **(void **)(*(void *)(v1 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return _swift_continuation_resume(v1);
}

uint64_t type metadata accessor for AEAConcreteSpringBoardPrimitives()
{
  return self;
}

id sub_100025354()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  sub_1000091B4(v3);
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion];
  if (v4)
  {
    *(void *)&v1[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion] = 0;
    [v4 invalidate];
    swift_unknownObjectRelease();
  }
  CATAsyncStreamMulticaster.finish()();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession();
  return [super dealloc];
}

char *sub_100025474(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000048A0(&qword_1000ACAC0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (id *)((char *)&v21.receiver - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (uint64_t *)&v3[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler];
  *uint64_t v10 = 0;
  v10[1] = 0;
  *(void *)&v3[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion] = 0;
  uint64_t v11 = OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_streamMulticaster;
  *uint64_t v9 = 1;
  (*(void (**)(void *, void))(v12 + 104))(v9, enum case for CATAsyncStreamMulticaster.BufferingPolicy.bufferingNewest<A>(_:));
  sub_1000048A0(&qword_1000ACAC8);
  swift_allocObject();
  uint64_t v13 = v3;
  *(void *)&v3[v11] = CATAsyncStreamMulticaster.init(bufferingPolicy:)();
  uint64_t v14 = *v10;
  *uint64_t v10 = a1;
  v10[1] = a2;
  swift_retain();
  sub_1000091B4(v14);

  int v15 = (objc_class *)type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession();
  v21.receiver = v13;
  v21.super_class = v15;
  id v16 = [super init];
  uint64_t v17 = self;
  uint64_t v18 = (char *)v16;
  id v19 = [v17 registerMonitor:v18];

  swift_release();
  *(void *)&v18[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion] = v19;
  swift_unknownObjectRelease();
  return v18;
}

void sub_100025658()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler);
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler);
  *uint64_t v1 = 0;
  v1[1] = 0;
  sub_1000091B4(v2);
  uint64_t v3 = *(void **)(v0
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion);
  if (v3)
  {
    *(void *)(v0
              + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion) = 0;
    [v3 invalidate];
    swift_unknownObjectRelease();
  }
  CATAsyncStreamMulticaster.finish()();
}

void sub_10002585C()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler);
  uint64_t v2 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler);
  *uint64_t v1 = 0;
  v1[1] = 0;
  sub_100009064((uint64_t)v2);
  sub_1000091B4((uint64_t)v2);
  uint64_t v3 = *(void **)(v0
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion);
  if (v3)
  {
    *(void *)(v0
              + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion) = 0;
    [v3 invalidate];
    swift_unknownObjectRelease();
  }
  CATAsyncStreamMulticaster.finish()();
  if (v2)
  {
    uint64_t v4 = swift_retain();
    v2(v4);
    sub_1000091B4((uint64_t)v2);
    sub_1000091B4((uint64_t)v2);
  }
}

uint64_t type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession()
{
  return self;
}

uint64_t sub_1000259D0(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return _swift_task_switch(sub_1000259F4, 0, 0);
}

uint64_t sub_1000259F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 10;
  uint64_t v4 = v1[18];
  uint64_t v5 = v1[17];
  *(void *)(v1[19] + 16) = 0;
  uint64_t v6 = self;
  v1[14] = v5;
  v1[15] = v4;
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 1107296256;
  v1[12] = sub_10005E228;
  v1[13] = &unk_10009FC48;
  uint64_t v7 = _Block_copy(v3);
  v1[20] = v7;
  swift_retain();
  swift_release();
  v1[2] = v1;
  v1[7] = v1 + 16;
  v1[3] = sub_100025B7C;
  uint64_t v8 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100025DA0;
  v1[13] = &unk_10009FC70;
  v1[14] = v8;
  [v6 beginConfigurationSessionWithInvalidationHandler:v7 completion:v3];
  return _swift_continuation_await(v2);
}

uint64_t sub_100025B7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_100025D10;
  }
  else {
    uint64_t v2 = sub_100025C8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100025C8C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (const void *)v0[20];
  swift_release();
  *(void *)(v1 + 16) = v0[16];
  swift_unknownObjectRelease();
  _Block_release(v2);
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v4 = v0[19];
  return v3(v4);
}

uint64_t sub_100025D10()
{
  uint64_t v1 = *(const void **)(v0 + 160);
  swift_willThrow();
  swift_release();
  swift_release();
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100025DA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000048A0(&qword_1000ACAA0);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      swift_unknownObjectRetain();
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_100025E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  return _swift_task_switch(sub_100025E8C, 0, 0);
}

uint64_t sub_100025E8C()
{
  uint64_t v1 = *(void **)(v0[19] + 16);
  v0[20] = v1;
  if (v1)
  {
    if (v0[16])
    {
      uint64_t v3 = v0[17];
      uint64_t v2 = v0[18];
      id v4 = objc_allocWithZone((Class)SBSHomeScreenConfiguration);
      swift_unknownObjectRetain();
      id v5 = [v4 init];
      NSString v6 = String._bridgeToObjectiveC()();
      [v5 setName:v6];

      id v7 = sub_100026604(v3, v2);
      [v5 setLayout:v7];
    }
    else
    {
      swift_unknownObjectRetain();
      id v5 = 0;
    }
    v0[21] = v5;
    v0[2] = v0;
    v0[3] = sub_100026070;
    uint64_t v10 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100025220;
    v0[13] = &unk_10009FC30;
    v0[14] = v10;
    [v1 applyConfiguration:v5 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100026070()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_1000261EC;
  }
  else {
    uint64_t v2 = sub_100026180;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100026180()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000261EC()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();
  swift_unknownObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100026268()
{
  *(void *)(v1 + 120) = v0;
  return _swift_task_switch(sub_100026288, 0, 0);
}

uint64_t sub_100026288()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[16] = v2;
  if (v2)
  {
    *(void *)(v1 + 16) = 0;
    v0[2] = v0;
    v0[3] = sub_1000263C0;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100025220;
    v0[13] = &unk_10009FC18;
    v0[14] = v3;
    [v2 endConfigurationSessionWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1000263C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_100026534;
  }
  else {
    uint64_t v2 = sub_1000264D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000264D0()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100026534()
{
  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000265A8()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAConcreteSpringBoardPrimitives.HomeScreenConfigurationSession()
{
  return self;
}

id sub_100026604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = a1 + 40;
    do
    {
      id v6 = objc_allocWithZone((Class)SBSHomeScreenItemApplication);
      swift_bridgeObjectRetain();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v6 initWithBundleIdentifier:v7];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  if (a2)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = _swiftEmptyArrayStorage;
    if (v8)
    {
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v10 = a2 + 40;
      do
      {
        id v11 = objc_allocWithZone((Class)SBSHomeScreenItemApplication);
        swift_bridgeObjectRetain();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v11 initWithBundleIdentifier:v12];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v10 += 16;
        --v8;
      }
      while (v8);
      uint64_t v9 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_100026CE0(0, &qword_1000ACAA8);
  v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v9)
  {
    v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.Class isa = 0;
  }
  id v15 = [objc_allocWithZone((Class)SBSHomeScreenConfigurationLayout) initWithItems:v13.super.isa dockItems:v14.super.isa];

  return v15;
}

uint64_t sub_100026868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100026878()
{
  return swift_release();
}

uint64_t sub_100026880()
{
  return _swift_task_switch(sub_10002689C, 0, 0);
}

uint64_t sub_10002689C()
{
  id v1 = [objc_allocWithZone((Class)SBSExternalDisplayService) init];
  v0[16] = v1;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000269B8;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000252B8;
  v0[13] = &unk_10009FC88;
  v0[14] = v2;
  [v1 getConnectedDisplayInfoWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000269B8()
{
  return _swift_task_switch(sub_100026A98, 0, 0);
}

void sub_100026A98()
{
  unint64_t v20 = *(void *)(v0 + 120);
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v3 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  uint64_t v1 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v1) {
    goto LABEL_18;
  }
LABEL_3:
  if (v1 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v2 = 0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = (void **)(&AEAConcreteLaunchServicesPrimitives + 56);
  p_weak_ivar_lyt = &AEAConcreteLaunchServicesPrimitives.weak_ivar_lyt;
  do
  {
    if ((v20 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v20 + 8 * v2 + 32);
    }
    NSString v7 = v6;
    if (([v6 (SEL)v4[140]] & 1) == 0)
    {
      uint64_t v8 = p_weak_ivar_lyt;
      id v9 = [v7 p_weak_ivar_lyt[141]];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_10006B258(0, v3[2] + 1, 1, v3);
      }
      unint64_t v14 = v3[2];
      unint64_t v13 = v3[3];
      if (v14 >= v13 >> 1) {
        uint64_t v3 = sub_10006B258((void *)(v13 > 1), v14 + 1, 1, v3);
      }
      v3[2] = v14 + 1;
      id v15 = &v3[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      p_weak_ivar_lyt = v8;
      NSString v16 = [v7 (SEL)v8[141]];
      if (!v16)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [*(id *)(v19 + 128) setMirroringEnabled:1 forDisplay:v16];

      uint64_t v4 = &AEAConcreteLaunchServicesPrimitives.weak_ivar_lyt;
    }
    ++v2;
  }
  while (v1 != v2);
LABEL_19:
  uint64_t v17 = *(void **)(v19 + 128);
  swift_bridgeObjectRelease();

  uint64_t v18 = *(void (**)(void *))(v19 + 8);
  v18(v3);
}

uint64_t sub_100026CE0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100026D1C(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return _swift_task_switch(sub_100026D3C, 0, 0);
}

uint64_t sub_100026D3C()
{
  uint64_t v1 = *(void *)(v0[16] + 16);
  v0[17] = v1;
  if (v1)
  {
    id v2 = [objc_allocWithZone((Class)SBSExternalDisplayService) init];
    v0[18] = v2;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100026E98;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000252B8;
    v0[13] = &unk_10009FCA0;
    v0[14] = v3;
    [v2 getConnectedDisplayInfoWithCompletionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100026E98()
{
  return _swift_task_switch(sub_100026F78, 0, 0);
}

uint64_t sub_100026F78()
{
  unint64_t v1 = *(void *)(v0 + 120);
  if (v1 >> 62) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void **)(v30 + 128);
    uint64_t v28 = v1 & 0xFFFFFFFFFFFFFF8;
    unint64_t v29 = v1 & 0xC000000000000001;
    uint64_t v5 = v4[4];
    uint64_t v6 = v4[5];
    uint64_t v26 = *(void *)(v30 + 136);
    unint64_t v27 = v1 + 32;
    uint64_t v25 = v4;
    uint64_t v24 = v4 + 9;
    while (1)
    {
      if (v29)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v3 >= *(void *)(v28 + 16)) {
          goto LABEL_35;
        }
        id v9 = *(id *)(v27 + 8 * v3);
      }
      uint64_t v8 = v9;
      if (__OFADD__(v3++, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      id v11 = [v9 identifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      BOOL v15 = v5 == v12 && v6 == v14;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_4:
        swift_bridgeObjectRelease();
        NSString v7 = [v8 identifier];
        if (!v7)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [*(id *)(v30 + 144) setMirroringEnabled:0 forDisplay:v7 v22 v23];

        uint64_t v8 = v7;
        goto LABEL_7;
      }
      if (v26 != 1)
      {
        if (v25[6] == v12 && v25[7] == v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_4;
        }
        if (v26 != 2) {
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_7:

      if (v3 == v2) {
        goto LABEL_38;
      }
    }
    uint64_t v22 = v2;
    unint64_t v23 = v1;
    NSString v16 = v24;
    uint64_t v17 = 2;
    while (1)
    {
      unint64_t v1 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        break;
      }
      BOOL v18 = *(v16 - 1) == v12 && *v16 == v14;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v2 = v22;
        unint64_t v1 = v23;
        goto LABEL_4;
      }
      ++v17;
      v16 += 2;
      if (v1 == *(void *)(v30 + 136))
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v22;
        unint64_t v1 = v23;
        goto LABEL_7;
      }
    }
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_38:
  uint64_t v19 = *(void **)(v30 + 144);
  swift_bridgeObjectRelease();

  unint64_t v20 = *(uint64_t (**)(void))(v30 + 8);
  return v20();
}

uint64_t type metadata accessor for AEAConcreteExternalSubsystemRestrictionPrimitives()
{
  return self;
}

uint64_t sub_100027280()
{
  return sub_1000272A8();
}

uint64_t sub_100027294()
{
  return sub_1000272A8();
}

uint64_t sub_1000272A8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100027314()
{
  uint64_t v0 = sub_1000048A0(&qword_1000ACE68);
  uint64_t v32 = *(void *)(v0 - 8);
  uint64_t v33 = v0;
  __chkstk_darwin(v0, v1);
  uint64_t v31 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_1000048A0(&qword_1000ACE70);
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1000048A0(&qword_1000ACE78);
  __chkstk_darwin(v30, v7);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000CB7C(v10, (uint64_t)qword_1000B0140);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Resuming participant matching", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = v34;
  uint64_t v15 = *(void *)(v34 + 16);
  *(void *)&long long v36 = sub_10007D2B4();
  sub_1000048A0(&qword_1000ACE80);
  sub_100005840(&qword_1000ACE88, &qword_1000ACE80);
  sub_100005840(&qword_1000ACE90, &qword_1000ACE98);
  Publisher<>.removeDuplicates()();
  swift_release();
  sub_1000091C4(v14 + 64, (uint64_t)&v36);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  sub_1000093C0(&v36, v16 + 24);
  uint64_t v17 = v29;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v6, v29);
  BOOL v18 = (void (**)(uint64_t@<X8>))&v9[*(int *)(v30 + 76)];
  *BOOL v18 = sub_1000297C8;
  v18[1] = (void (*)(uint64_t@<X8>))v16;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  v19(v6, v17);
  swift_allocObject();
  swift_weakInit();
  sub_100005840(&qword_1000ACEA0, &qword_1000ACE78);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  sub_1000201B4((uint64_t)v9, &qword_1000ACE78);
  swift_beginAccess();
  sub_1000048A0(&qword_1000ABFF0);
  sub_100005840(&qword_1000ABFF8, &qword_1000ABFF0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v20 = sub_100028834();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v22 = v20 + 32;
    do
    {
      sub_1000091C4(v22, (uint64_t)&v36);
      uint64_t v23 = v37;
      uint64_t v24 = v38;
      sub_100006340(&v36, v37);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
      sub_1000048E4((uint64_t)&v36);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v22 += 40;
      --v21;
    }
    while (v21);
    uint64_t v25 = v35;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = _swiftEmptyArrayStorage;
  }
  *(void *)&long long v36 = v25;
  sub_1000048A0(&qword_1000ACEA8);
  sub_1000048A0(&qword_1000AB3F8);
  sub_100005840(&qword_1000ACEB0, &qword_1000ACEA8);
  uint64_t v26 = v31;
  Publisher.map<A>(_:)();
  swift_bridgeObjectRelease();
  swift_allocObject();
  swift_weakInit();
  sub_100005840(&qword_1000ACEB8, &qword_1000ACE68);
  uint64_t v27 = v33;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v27);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

void sub_1000279C8(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v11 = [a1 auditTokenForData:isa];

  if (v11)
  {
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    sub_100006340(a2, v7);
    (*(void (**)(id, uint64_t, uint64_t))(v8 + 8))(v11, v7, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for AEAParticipant.Process(0);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    v10(a3, 1, 1, v9);
  }
}

uint64_t sub_100027AE4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_100027B7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = swift_bridgeObjectRetain();
      sub_10004D374(v5);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = sub_100051594((uint64_t)_swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t sub_100027C1C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_100029520();
    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_100027CB4()
{
  uint64_t v0 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v2 = __chkstk_darwin(v0 - 8, v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v2, v5);
  uint64_t v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6, v9);
  id v11 = (char *)&v19 - v10;
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000CB7C(v12, (uint64_t)qword_1000B0140);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Suspending participant matching", v15, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  sub_1000685F0();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = &_swiftEmptySetSingleton;
  swift_retain();
  static Published.subscript.setter();
  sub_100029520();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = &_swiftEmptySetSingleton;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v16 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  sub_100028004();
  sub_1000251B8((uint64_t)v11, (uint64_t)v8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000251B8((uint64_t)v8, (uint64_t)v4);
  swift_retain();
  static Published.subscript.setter();
  sub_1000201B4((uint64_t)v8, &qword_1000AFC50);
  swift_release();
  sub_1000201B4((uint64_t)v11, &qword_1000AFC50);
  unint64_t v17 = sub_100071080((uint64_t)_swiftEmptyArrayStorage);
  sub_100028214();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = (void *)v17;
  return static Published.subscript.setter();
}

uint64_t sub_100028004()
{
  uint64_t v1 = sub_1000048A0(&qword_1000ACE58);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource))
  {
    uint64_t v15 = *(void *)(v0
                    + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource);
  }
  else
  {
    type metadata accessor for AEAMainParticipantSource();
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v15 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant;
    uint64_t v17 = type metadata accessor for AEAParticipant(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    sub_1000251B8((uint64_t)v13, (uint64_t)v10);
    Published.init(initialValue:)();
    sub_1000201B4((uint64_t)v13, &qword_1000AFC50);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v16, v5, v1);
    *(void *)(v0 + v14) = v15;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v15;
}

uint64_t sub_100028214()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000048A0(&qword_1000AB3E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource))
  {
    uint64_t v8 = *(void *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource);
  }
  else
  {
    swift_beginAccess();
    sub_1000048A0(&qword_1000ACE48);
    Published.projectedValue.getter();
    swift_endAccess();
    type metadata accessor for AEAConfigurationParticipantSource();
    uint64_t v8 = swift_allocObject();
    v10[1] = _swiftEmptyDictionarySingleton;
    sub_1000048A0(&qword_1000ACE50);
    Published.init(initialValue:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses, v6, v2);
    *(void *)(v1 + v7) = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

uint64_t sub_1000283B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000048A0(&qword_1000AB3E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource))
  {
    uint64_t v8 = *(void *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource);
  }
  else
  {
    swift_beginAccess();
    sub_1000048A0(&qword_1000ACE48);
    Published.projectedValue.getter();
    swift_endAccess();
    type metadata accessor for AEACandidateMatchingParticipantSource();
    uint64_t v8 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses, v6, v2);
    uint64_t v9 = (uint64_t (**)(uint64_t))(v8
                                          + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder);
    *uint64_t v9 = sub_100028540;
    v9[1] = 0;
    *(void *)(v1 + v7) = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

uint64_t sub_100028540(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) != 1) {
    return 0;
  }
  if (qword_1000AA570 != -1) {
    swift_once();
  }
  uint64_t v1 = byte_1000B01A0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000285C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000048A0(&qword_1000AB3E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource))
  {
    uint64_t v8 = *(void *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource);
  }
  else
  {
    swift_beginAccess();
    sub_1000048A0(&qword_1000ACE48);
    Published.projectedValue.getter();
    swift_endAccess();
    type metadata accessor for AEACandidateMatchingParticipantSource();
    uint64_t v8 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses, v6, v2);
    uint64_t v9 = (uint64_t (**)(uint64_t))(v8
                                          + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder);
    *uint64_t v9 = sub_10002874C;
    v9[1] = 0;
    *(void *)(v1 + v7) = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

uint64_t sub_10002874C(uint64_t a1)
{
  if (qword_1000AA668 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1000B0368;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  LOBYTE(v2) = sub_10002E584(v4, v3, v2);
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0) {
    return 0;
  }
  if (qword_1000AA570 != -1) {
    swift_once();
  }
  uint64_t v5 = byte_1000B01A0;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_100028834()
{
  uint64_t v1 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources);
  }
  else
  {
    sub_1000048A0(&qword_1000ACE40);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1000818C0;
    uint64_t v3 = sub_100028004();
    *(void *)(v2 + 56) = type metadata accessor for AEAMainParticipantSource();
    *(void *)(v2 + 64) = &off_1000A0EC8;
    *(void *)(v2 + 32) = v3;
    uint64_t v4 = sub_100028214();
    *(void *)(v2 + 96) = type metadata accessor for AEAConfigurationParticipantSource();
    *(void *)(v2 + 104) = &off_1000A0D38;
    *(void *)(v2 + 72) = v4;
    uint64_t v5 = sub_1000283B8();
    uint64_t v6 = type metadata accessor for AEACandidateMatchingParticipantSource();
    *(void *)(v2 + 136) = v6;
    *(void *)(v2 + 144) = &off_10009E1D0;
    *(void *)(v2 + 112) = v5;
    uint64_t v7 = sub_1000285C4();
    *(void *)(v2 + 176) = v6;
    *(void *)(v2 + 184) = &off_10009E1D0;
    *(void *)(v2 + 152) = v7;
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100028934()
{
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 24);
  sub_1000048E4(v0 + 64);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__candidateProcesses;
  uint64_t v2 = sub_1000048A0(&qword_1000ACE48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__participants;
  uint64_t v4 = sub_1000048A0(&qword_1000ACE28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100028A5C()
{
  sub_100028934();

  return swift_deallocClassInstance();
}

uint64_t sub_100028AB4()
{
  return type metadata accessor for AEAmacOSParticipantManager();
}

uint64_t type metadata accessor for AEAmacOSParticipantManager()
{
  uint64_t result = qword_1000ACBF8;
  if (!qword_1000ACBF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100028B08()
{
  sub_100028C28(319, &qword_1000ACC08, (uint64_t *)&unk_1000AB340);
  if (v0 <= 0x3F)
  {
    sub_100028C28(319, (unint64_t *)&unk_1000ACC10, &qword_1000AB3F8);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100028C28(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_1000054DC(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100028C78()
{
  uint64_t v0 = sub_1000048A0(&qword_1000ACE18);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000048A0(&qword_1000ACE20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_1000048A0(&qword_1000ACE28);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_100005840(&qword_1000ACE30, &qword_1000ACE18);
  sub_100005840(&qword_1000AB3F0, &qword_1000AB3F8);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_100005840(&qword_1000ACE38, &qword_1000ACE20);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v10;
}

uint64_t sub_100028ECC()
{
  sub_100028004();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100028F54(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_100028004();
  sub_1000251B8(a1, (uint64_t)v9);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000251B8((uint64_t)v9, (uint64_t)v6);
  swift_retain();
  static Published.subscript.setter();
  sub_1000201B4((uint64_t)v9, &qword_1000AFC50);
  swift_release();
  return sub_1000201B4(a1, &qword_1000AFC50);
}

uint64_t sub_100029078()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000290EC()
{
  return static Published.subscript.setter();
}

uint64_t sub_100029168@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000291E4()
{
  return static Published.subscript.setter();
}

uint64_t sub_100029264@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000292E8()
{
  return static Published.subscript.setter();
}

uint64_t sub_100029368()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000293E8(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_1000251B8(a1, (uint64_t)&v11 - v8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000251B8((uint64_t)v9, (uint64_t)v6);
  swift_retain();
  static Published.subscript.setter();
  return sub_1000201B4((uint64_t)v9, &qword_1000AFC50);
}

uint64_t sub_1000294F4@<X0>(void *a1@<X8>)
{
  return sub_100029168(a1);
}

void sub_100029520()
{
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000CB7C(v0, (uint64_t)qword_1000B0140);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    type metadata accessor for AEAParticipant(0);
    sub_100029730();
    swift_bridgeObjectRetain();
    uint64_t v4 = Set.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    sub_1000722AC(v4, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Publishing Participants: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100029704@<X0>(void *a1@<X8>)
{
  return sub_100029168(a1);
}

unint64_t sub_100029730()
{
  unint64_t result = qword_1000ACE60;
  if (!qword_1000ACE60)
  {
    type metadata accessor for AEAParticipant(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ACE60);
  }
  return result;
}

uint64_t sub_100029788()
{
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1000297C8(uint64_t a1@<X8>)
{
  sub_1000279C8(*(void **)(v1 + 16), (void *)(v1 + 24), a1);
}

uint64_t sub_1000297D4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002980C()
{
  return sub_100027AE4();
}

uint64_t sub_100029814()
{
  return sub_100027C1C();
}

uint64_t sub_10002981C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t destroy for AEARunningApplication(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);

  return sub_100006384(v2, v3);
}

uint64_t initializeWithCopy for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_10002981C(v5, v6);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_10002981C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  sub_100006384(v6, v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100006384(v5, v6);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARunningApplication(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARunningApplication(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARunningApplication()
{
  return &type metadata for AEARunningApplication;
}

Swift::Int sub_100029A7C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10002981C(v1, v2);
  Data.hash(into:)();
  sub_100006384(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100029B24()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10002981C(v1, v2);
  Data.hash(into:)();
  sub_100006384(v1, v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_100029BB4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10002981C(v1, v2);
  Data.hash(into:)();
  sub_100006384(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100029C58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_10002981C(v2, v3);
}

BOOL sub_100029C64(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  int v6 = *(_DWORD *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  int v8 = *(_DWORD *)(a2 + 32);
  return sub_100029FF0((uint64_t)v5, (uint64_t)v7);
}

unint64_t sub_100029CB4()
{
  unint64_t result = qword_1000ACEC0;
  if (!qword_1000ACEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ACEC0);
  }
  return result;
}

uint64_t sub_100029D08(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_10002981C(a1, a2);
      char v5 = sub_100029F38((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_100006384(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = sub_100029F38(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      sub_100006384(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      sub_100073B14((uint64_t)__s1, a3, a4, &v14);
      sub_100006384(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

uint64_t sub_100029F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_100073B14(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

BOOL sub_100029FF0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    unint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = 0;
    switch(v8 >> 62)
    {
      case 1uLL:
        LODWORD(v9) = HIDWORD(v7) - v7;
        if (__OFSUB__(HIDWORD(v7), v7))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          JUMPOUT(0x10002A160);
        }
        uint64_t v9 = (int)v9;
LABEL_11:
        uint64_t v13 = *(void *)(a2 + 16);
        unint64_t v14 = *(void *)(a2 + 24);
        switch(v14 >> 62)
        {
          case 1uLL:
            LODWORD(v15) = HIDWORD(v13) - v13;
            if (__OFSUB__(HIDWORD(v13), v13)) {
              goto LABEL_25;
            }
            uint64_t v15 = (int)v15;
LABEL_16:
            if (v9 == v15
              && (v9 < 1
               || (sub_10002981C(*(void *)(a2 + 16), *(void *)(a2 + 24)), (sub_100029D08(v7, v8, v13, v14) & 1) != 0)))
            {
LABEL_19:
              BOOL result = *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
            }
            else
            {
LABEL_21:
              BOOL result = 0;
            }
            break;
          case 2uLL:
            uint64_t v17 = *(void *)(v13 + 16);
            uint64_t v16 = *(void *)(v13 + 24);
            BOOL v12 = __OFSUB__(v16, v17);
            uint64_t v15 = v16 - v17;
            if (!v12) {
              goto LABEL_16;
            }
            goto LABEL_26;
          case 3uLL:
            if (v9) {
              goto LABEL_21;
            }
            goto LABEL_19;
          default:
            uint64_t v15 = BYTE6(v14);
            goto LABEL_16;
        }
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(v7 + 16);
        uint64_t v10 = *(void *)(v7 + 24);
        BOOL v12 = __OFSUB__(v10, v11);
        uint64_t v9 = v10 - v11;
        if (!v12) {
          goto LABEL_11;
        }
        goto LABEL_24;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v9 = BYTE6(v8);
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_10002A180()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_10002A1A0, 0, 0);
}

uint64_t sub_10002A1A0()
{
  uint64_t v1 = v0[16];
  if (*(void *)(v1 + 104))
  {
    int v6 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v2 = swift_bridgeObjectRetain();
    return v6(v2);
  }
  else
  {
    BOOL v4 = *(void **)(v1 + 16);
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_10002A2E8;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10002A954;
    v0[13] = &unk_10009FE68;
    v0[14] = v5;
    [v4 fetchNetworkContentFilterBundleIdentifiersWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_10002A2E8()
{
  return _swift_task_switch(sub_10002A3C8, 0, 0);
}

uint64_t sub_10002A3C8()
{
  uint64_t v43 = v0;
  uint64_t v1 = v0[15];
  if (qword_1000AA548 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0128);
  swift_bridgeObjectRetain_n();
  long long v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    v0[10] = sub_1000722AC(v6, v8, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Discovered Web Content Filters %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = v0[16];
  swift_retain();
  uint64_t v10 = sub_10002DA38(v1, v9);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = v10[2];
  if (!v11)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      long long v36 = (uint8_t *)swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)long long v36 = 136446210;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      uint64_t v37 = Array.description.getter();
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      v0[10] = sub_1000722AC(v37, v39, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Granting access to UUIDs %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    *(void *)(v0[16] + 104) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    NSString v40 = (uint64_t (*)(void *))v0[1];
    return v40(v13);
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v13 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v14 = v10[v12 + 4];
    uint64_t v15 = *(void *)(v14 + 16);
    int64_t v16 = v13[2];
    int64_t v17 = v16 + v15;
    if (__OFADD__(v16, v15)) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v17 <= v13[3] >> 1)
    {
      if (*(void *)(v14 + 16)) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v16 <= v17) {
        int64_t v19 = v16 + v15;
      }
      else {
        int64_t v19 = v16;
      }
      uint64_t v13 = (void *)sub_10006B5CC(isUniquelyReferenced_nonNull_native, v19, 1, (unint64_t)v13);
      if (*(void *)(v14 + 16))
      {
LABEL_19:
        uint64_t v20 = v13[2];
        uint64_t v21 = (v13[3] >> 1) - v20;
        uint64_t v22 = *(void *)(type metadata accessor for UUID() - 8);
        uint64_t v23 = *(void *)(v22 + 72);
        if (v21 < v15) {
          goto LABEL_38;
        }
        unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        uint64_t v25 = (char *)v13 + v24 + v23 * v20;
        unint64_t v26 = v14 + v24;
        uint64_t v27 = v23 * v15;
        uint64_t v28 = &v25[v27];
        unint64_t v29 = v26 + v27;
        if (v26 < (unint64_t)v28 && (unint64_t)v25 < v29) {
          return _fatalErrorMessage(_:_:file:line:flags:)();
        }
        swift_arrayInitWithCopy();
        if (v15)
        {
          uint64_t v31 = v13[2];
          BOOL v32 = __OFADD__(v31, v15);
          uint64_t v33 = v31 + v15;
          if (v32) {
            goto LABEL_39;
          }
          v13[2] = v33;
        }
        goto LABEL_9;
      }
    }
    if (v15)
    {
      __break(1u);
      break;
    }
LABEL_9:
    ++v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11 == v12)
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_10002A954(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v1 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return _swift_continuation_resume(v1);
}

uint64_t sub_10002A9B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000048A0(&qword_1000AD040);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[8];
  v12[0] = v1[9];
  v12[1] = v7;
  swift_retain();
  swift_retain();
  sub_1000048A0(&qword_1000AD048);
  sub_1000048A0(&qword_1000AD050);
  sub_100005840((unint64_t *)&qword_1000AD058, &qword_1000AD048);
  sub_100005840(&qword_1000AD060, &qword_1000AD050);
  Publishers.CombineLatest.init(_:_:)();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10002D728;
  *(void *)(v9 + 24) = v8;
  sub_100005840(&qword_1000AD068, &qword_1000AD040);
  uint64_t v10 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v1[11] = v10;
  return swift_release();
}

uint64_t sub_10002ABE4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    uint64_t v5 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v5;
    v6[3] = a1;
    v6[4] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000048A0(&qword_1000AD080);
    CATSerializer.enqueue<A>(respectingCancelAll:_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10002AD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v6;
  v4[11] = v5;
  return _swift_task_switch(sub_10002ADC4, v6, v5);
}

uint64_t sub_10002ADC4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 96) = Strong;
  if (Strong)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v4 = sub_10002C82C(v2, v3);
    *(void *)(v0 + 104) = v4;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v5;
    void *v5 = v0;
    v5[1] = sub_10002AEF8;
    uint64_t v6 = *(void *)(v0 + 64);
    return sub_10002B0D0((uint64_t)v4, v6);
  }
  else
  {
    swift_release();
    **(unsigned char **)(v0 + 40) = *(void *)(v0 + 96) == 0;
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10002AEF8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 80);
  return _swift_task_switch(sub_10002B058, v3, v2);
}

uint64_t sub_10002B058()
{
  swift_release();
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 96) == 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002B0D0(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  type metadata accessor for MainActor();
  v3[7] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[8] = v5;
  v3[9] = v4;
  return _swift_task_switch(sub_10002B16C, v5, v4);
}

uint64_t sub_10002B16C()
{
  uint64_t v1 = *(NSURL **)(v0 + 48);
  baseURL = v1[2]._baseURL;
  if (baseURL)
  {
    [(NSURL *)baseURL releaseRestrictions];
    uint64_t v1 = *(NSURL **)(v0 + 48);
  }
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = v1->_baseURL;
  *(void *)(v0 + 80) = v5;
  [(NSURL *)v5 clearUUIDCache];
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  swift_retain();
  sub_10002D204(v4, (id *)(v0 + 24), v1, v0 + 16);
  sub_10002D47C(v3, (uint64_t)v1, v0 + 16);
  swift_release();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  void *v6 = v0;
  v6[1] = sub_10002B2AC;
  v6[16] = *(void *)(v0 + 48);
  return _swift_task_switch(sub_10002A1A0, 0, 0);
}

uint64_t sub_10002B2AC(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 64);
  return _swift_task_switch(sub_10002B3D4, v4, v3);
}

uint64_t sub_10002B3D4()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[10];
  uint64_t v3 = v0[6];
  swift_release();
  sub_10004DC04(v1);
  sub_10000650C();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  swift_bridgeObjectRetain();
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [v2 restrictNetworkExcludingProcessesWithIdentifiers:isa machOUUIDs:v5];

  *(void *)(v3 + 96) = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10002B4FC(id *a1, id *a2, NSURL *a3, uint64_t a4)
{
  uint64_t v84 = a4;
  uint64_t v97 = a3;
  uint64_t v99 = a2;
  uint64_t v5 = sub_1000048A0(&qword_1000AB5F8);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v9 = (char *)v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v100 = (uint64_t)v78 - v11;
  uint64_t v98 = type metadata accessor for URL();
  uint64_t v81 = *(void *)(v98 - 8);
  uint64_t v13 = __chkstk_darwin(v98, v12);
  uint64_t v15 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  int64_t v19 = (char *)v78 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)v78 - v21;
  uint64_t v23 = type metadata accessor for AEAParticipant(0);
  uint64_t v25 = __chkstk_darwin(v23 - 8, v24);
  v96 = (id *)((char *)v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25, v27);
  unint64_t v29 = (char *)v78 - v28;
  if (qword_1000AA548 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = sub_10000CB7C(v30, (uint64_t)qword_1000B0128);
  sub_100020250((uint64_t)a1, (uint64_t)v29);
  uint64_t v86 = v31;
  BOOL v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v80 = v22;
  uint64_t v83 = v15;
  v87 = v19;
  if (v34)
  {
    os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v85 = v9;
    uint64_t v102 = v36;
    *(_DWORD *)os_log_type_t v35 = 136446210;
    uint64_t v37 = sub_10001E958();
    uint64_t v101 = sub_1000722AC(v37, v38, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000202B4((uint64_t)v29);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Creating policy for %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    uint64_t v9 = v85;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000202B4((uint64_t)v29);
  }

  [objc_allocWithZone((Class)NSNumber) initWithInt:[*a1 processIdentifier]];
  unint64_t v39 = v99;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v40 = v98;
  uint64_t v41 = v96;
  if (*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v99 = a1;
  sub_100020250((uint64_t)a1, (uint64_t)v41);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 67240192;
    unsigned int v45 = [*v41 processIdentifier];
    uint64_t v46 = (uint64_t)v41;
    unsigned int v47 = v45;
    sub_1000202B4(v46);
    LODWORD(v102) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Granting access for process %{public}d", v44, 8u);
    swift_slowDealloc();
  }
  else
  {
    sub_1000202B4((uint64_t)v41);
  }
  uint64_t v48 = v81;
  uint64_t v49 = (uint64_t)v80;
  uint64_t v50 = v87;

  uint64_t v51 = (char *)v99 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v52 = (uint64_t)&v51[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
  uint64_t v53 = v100;
  sub_1000063DC(v52, v100);
  uint64_t v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  v96 = (id *)(v48 + 48);
  if (v95(v53, 1, v40) == 1) {
    return sub_100006444(v53);
  }
  v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32);
  uint64_t v94 = v48 + 32;
  v93(v49, v53, v40);
  if (sub_10002CEA8(v49))
  {
    sub_100006340(&v97->_clients, (uint64_t)v97[1]._urlString);
    uint64_t v55 = (uint64_t)sub_10001B3D4(v49);
  }
  else
  {
    sub_1000048A0(&qword_1000AD020);
    unint64_t v56 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_100080BE0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 16))(v55 + v56, v49, v40);
  }
  uint64_t v57 = *(void *)(v55 + 16);
  v78[2] = v55;
  if (v57)
  {
    uint64_t v99 = *(id **)(v48 + 16);
    uint64_t v100 = v48 + 16;
    unint64_t v58 = v55 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v91 = *(void *)(v48 + 72);
    swift_bridgeObjectRetain();
    v92 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
    v78[1] = (v48 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v88 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v90 = (v48 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    *(void *)&long long v59 = 136446466;
    long long v79 = v59;
    v78[3] = (char *)&type metadata for Any + 8;
    v85 = v9;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v99)(v9, v58, v40);
      v89 = *v92;
      v89(v9, 0, 1, v40);
      if (v95((uint64_t)v9, 1, v40) == 1) {
        break;
      }
      v93((uint64_t)v50, (uint64_t)v9, v40);
      baseURL = v97->_baseURL;
      URL._bridgeToObjectiveC()(v97);
      uint64_t v63 = v62;
      id v64 = [(NSURL *)baseURL machOUUIDsForExecutableURL:v62];

      if (v64)
      {
        type metadata accessor for UUID();
        static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v65 = swift_bridgeObjectRetain();
        sub_10004DC04(v65);
        int v66 = v83;
        ((void (*)(char *, char *, uint64_t))v99)(v83, v50, v40);
        swift_bridgeObjectRetain();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          uint64_t v102 = v82;
          *(_DWORD *)uint64_t v69 = v79;
          sub_10002D698();
          uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v69 + 4) = sub_1000722AC(v70, v71, &v102);
          swift_bridgeObjectRelease();
          uint64_t v72 = v66;
          uint64_t v60 = *v88;
          (*v88)(v72, v98);
          *(_WORD *)(v69 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v73 = Array.description.getter();
          unint64_t v75 = v74;
          swift_bridgeObjectRelease();
          *(void *)(v69 + 14) = sub_1000722AC(v73, v75, &v102);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Granting access for executable at %{public}s with UUIDs %{public}s", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v40 = v98;
          swift_slowDealloc();
        }
        else
        {
          unint64_t v76 = v66;
          uint64_t v60 = *v88;
          (*v88)(v76, v40);

          swift_bridgeObjectRelease_n();
        }
        uint64_t v9 = v85;
        uint64_t v50 = v87;
      }
      else
      {
        uint64_t v60 = *v88;
      }
      v60(v50, v40);
      v58 += v91;
      if (!--v57)
      {
        v89(v9, 1, 1, v40);
        break;
      }
    }
  }
  else
  {
    int64_t v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
    swift_bridgeObjectRetain();
    v77(v9, 1, 1, v40);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v40);
  return swift_bridgeObjectRelease();
}

void sub_10002BEAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  unint64_t v12 = a1[1];
  uint64_t v14 = *(void **)(a2 + 16);
  URL.init(fileURLWithPath:)();
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  id v18 = [v14 machOUUIDsForExecutableURL:v17];

  if (v18)
  {
    type metadata accessor for UUID();
    uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v19 + 16))
    {
      v32[2] = v3;
      if (qword_1000AA548 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10000CB7C(v20, (uint64_t)qword_1000B0128);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        v32[1] = a3;
        uint64_t v24 = v23;
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_1000722AC(v13, v12, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v24 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v25 = Array.description.getter();
        unint64_t v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t v33 = sub_1000722AC(v25, v27, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Granting access for executable at %{public}s with UUIDs %{public}s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      sub_10004DC04(v19);
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10000CB7C(v28, (uint64_t)qword_1000B0110);
  swift_bridgeObjectRetain_n();
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1000722AC(v13, v12, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Can't grant network access for executable at: %{public}s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10002C374()
{
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10002C3CC()
{
  sub_10002C374();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEANetworkAssertion()
{
  return self;
}

uint64_t sub_10002C420()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001AC9C;
  v3[2] = v2;
  return _swift_task_switch(sub_10002E044, 0, 0);
}

uint64_t sub_10002C4C8(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(sub_10002C4E8, 0, 0);
}

uint64_t sub_10002C4E8()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v19 = v1[3];
  uint64_t v20 = (void *)v0[12];
  sub_1000091C4((uint64_t)(v1 + 4), (uint64_t)(v0 + 2));
  uint64_t v2 = v1[10];
  uint64_t v18 = v1[9];
  uint64_t v3 = v0[5];
  uint64_t v4 = sub_100019D8C((uint64_t)(v0 + 2), v3);
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v6, v4, v3);
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v0[10] = v8;
  v0[11] = &off_10009F5C0;
  v0[7] = v7;
  type metadata accessor for AEANetworkAssertion();
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = sub_100019D8C((uint64_t)(v0 + 7), v8);
  uint64_t v11 = *(void *)(v8 - 8);
  unint64_t v12 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v12, v10, v8);
  uint64_t v13 = *v12;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v14 = sub_10002CBDC(v19, v13, v18, v2, v9);
  sub_1000048E4((uint64_t)(v0 + 7));
  swift_task_dealloc();
  sub_1000048E4((uint64_t)(v0 + 2));
  swift_task_dealloc();
  sub_10002A9B8();
  v20[3] = &type metadata for AEANetworkDeactivation;
  v20[4] = &off_1000A0010;
  uint64_t v15 = (void *)swift_allocObject();
  *uint64_t v20 = v15;
  void v15[2] = 0xD000000000000024;
  v15[3] = 0x8000000100087570;
  v15[4] = 4;
  v15[5] = v14;
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10002C780(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000ED6C;
  v4[12] = a1;
  v4[13] = v1;
  return _swift_task_switch(sub_10002C4E8, 0, 0);
}

void *sub_10002C82C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_10002C990((unint64_t *)((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_10002C990((unint64_t *)v8, v5, v3);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

void *sub_10002C990(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (void *)__chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = 0;
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v26 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v15) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v26 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v15) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v26 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v15) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v26 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_5:
    sub_100020250(*(void *)(a3 + 48) + *(void *)(v5 + 72) * v17, (uint64_t)v9);
    int v18 = v9[*(int *)(v4 + 20)];
    uint64_t result = (void *)sub_1000202B4((uint64_t)v9);
    if (v18 == 1)
    {
      *(unint64_t *)((char *)v24 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100030A58(v24, v23, v25, a3);
      }
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v15) {
    goto LABEL_24;
  }
  unint64_t v20 = *(void *)(v26 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v26 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void *sub_10002CBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v12 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  uint64_t v13 = &off_10009F5C0;
  *(void *)&long long v11 = a2;
  type metadata accessor for CATSerializer();
  swift_allocObject();
  a5[10] = CATSerializer.init()();
  a5[11] = 0;
  a5[12] = 0;
  a5[13] = 0;
  a5[2] = a1;
  sub_1000093C0(&v11, (uint64_t)(a5 + 3));
  a5[8] = a3;
  a5[9] = a4;
  return a5;
}

void *sub_10002CC78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000048A0(&qword_1000AD038);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10002CEA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLResourceValues();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v23 - v13;
  sub_1000048A0(&qword_1000AD030);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100080BE0;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  uint64_t v16 = NSURLIsDirectoryKey;
  sub_10002CC78(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v17 = v25;
  uint64_t v23 = v2;
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v24(v11, v14, v7);
  uint64_t v18 = type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues();
  uint64_t v19 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v19 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL, v6, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v19 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues, v11, v7);
  uint64_t v27 = v18;
  uint64_t v28 = &off_10009F590;
  *(void *)&long long v26 = v19;
  char v20 = *(void (**)(char *, uint64_t))(v17 + 8);
  v20(v14, v7);
  swift_bridgeObjectRelease();
  sub_1000093C0(&v26, (uint64_t)v29);
  uint64_t v21 = *sub_100006340(v29, v29[3])
      + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues;
  swift_beginAccess();
  v24(v11, (char *)v21, v7);
  LOBYTE(v21) = URLResourceValues.isDirectory.getter();
  v20(v11, v7);
  sub_1000048E4((uint64_t)v29);
  return v21 & 1;
}

uint64_t sub_10002D204(uint64_t a1, id *a2, NSURL *a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v8 = type metadata accessor for AEAParticipant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8 - 8, v10);
  uint64_t v13 = (id *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v29 = (unint64_t)(v18 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (v20)
  {
    unint64_t v23 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    unint64_t v24 = v23 | (v22 << 6);
LABEL_5:
    sub_100020250(*(void *)(a1 + 48) + *(void *)(v9 + 72) * v24, (uint64_t)v16);
    sub_10002D634((uint64_t)v16, (uint64_t)v13);
    sub_10002B4FC(v13, a2, a3, v30);
    uint64_t result = sub_1000202B4((uint64_t)v13);
    if (v4) {
      return swift_release();
    }
  }
  if (__OFADD__(v22++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v22 >= v29) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v22);
  if (v26)
  {
LABEL_19:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_5;
  }
  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v29) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  int64_t v27 = v22 + 2;
  if (v22 + 2 >= v29) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  int64_t v27 = v22 + 3;
  if (v22 + 3 >= v29) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  int64_t v27 = v22 + 4;
  if (v22 + 4 >= v29) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26)
  {
LABEL_18:
    int64_t v22 = v27;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v29) {
      return swift_release();
    }
    unint64_t v26 = *(void *)(v28 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10002D47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v20 = v19[1];
    v22[0] = *v19;
    v22[1] = v20;
    swift_bridgeObjectRetain();
    sub_10002BEAC(v22, a2, a3);
    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v11) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (!v17)
    {
      int64_t v18 = v13 + 1;
      if (v13 + 1 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17) {
        goto LABEL_14;
      }
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17) {
        goto LABEL_14;
      }
      int64_t v18 = v13 + 3;
      if (v13 + 3 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17)
      {
LABEL_14:
        int64_t v13 = v18;
        goto LABEL_15;
      }
      int64_t v21 = v13 + 4;
      if (v13 + 4 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v21);
      v13 += 4;
      if (!v17) {
        break;
      }
    }
LABEL_15:
    unint64_t v10 = (v17 - 1) & v17;
  }
  while (1)
  {
    int64_t v13 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v13 >= v11) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v21;
    if (v17) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002D634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002D698()
{
  unint64_t result = qword_1000AD028;
  if (!qword_1000AD028)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD028);
  }
  return result;
}

uint64_t sub_10002D6F0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002D728(uint64_t a1, uint64_t a2)
{
  return sub_10002ABE4(a1, a2);
}

uint64_t sub_10002D730()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002D768(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_10002D798()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002D7E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000ED6C;
  return sub_10002AD28(a1, v4, v5, v6);
}

Swift::Int sub_10002D894(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000048A0(&qword_1000AD088);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      int64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *int64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_10002DA38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void **)(a2 + 16);
  uint64_t v4 = swift_bridgeObjectRetain() + 40;
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v3 machOUUIDsForBundleIdentifier:v6];

    if (v7)
    {
      type metadata accessor for UUID();
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_10006B4BC(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = sub_10006B4BC((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      _OWORD v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v4 += 16;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t destroy for AEANetworkActivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(a1 + 32);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AEANetworkActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 32;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = v7;
  unint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v9(a1 + 32, v6, v8);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AEANetworkActivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_10000E5F4(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AEATaskSource(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AEANetworkActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_unknownObjectRelease();
  sub_1000048E4(a1 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEANetworkActivation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEANetworkActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEANetworkActivation()
{
  return &type metadata for AEANetworkActivation;
}

uint64_t sub_10002DEA0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t destroy for AEANetworkDeactivation()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for AEANetworkDeactivation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AEANetworkDeactivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AEANetworkDeactivation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AEANetworkDeactivation()
{
  return &type metadata for AEANetworkDeactivation;
}

uint64_t sub_10002E024(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10002E044, 0, 0);
}

uint64_t sub_10002E044()
{
  uint64_t v1 = *(void *)(v0 + 16);
  CATSerializer.cancelAllTasks()();
  if (*(void *)(v1 + 88))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  unint64_t v2 = *(void **)(*(void *)(v0 + 16) + 96);
  if (v2) {
    [v2 releaseRestrictions];
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

ValueMetadata *type metadata accessor for AEADisableAssessmentModeTask()
{
  return &type metadata for AEADisableAssessmentModeTask;
}

uint64_t sub_10002E0F0(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain();
  sub_10002E14C(v5, a1, a2);

  return swift_release();
}

uint64_t sub_10002E14C(uint64_t a1, void (*a2)(void ***), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void ***)((char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10000CF44;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = qword_1000AA578;
  swift_retain_n();
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1000B01B0;
  *uint64_t v10 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v14)
  {
    BOOL v17 = *(void **)(a1 + 128);
    if (v17)
    {
      if (*(unsigned char *)(a1 + 136))
      {
        sub_10002E52C();
        uint64_t v18 = swift_allocError();
        *uint64_t v19 = 0;
        aBlock = (void **)v18;
        LOBYTE(v23) = 1;
        swift_unknownObjectRetain();
        a2(&aBlock);
        swift_errorRelease();
      }
      else
      {
        *(unsigned char *)(a1 + 136) = 1;
        swift_unknownObjectRetain();
        sub_100052990();
        uint64_t v20 = (void *)swift_allocObject();
        v20[2] = a1;
        v20[3] = sub_10000CF50;
        v20[4] = v12;
        unint64_t v26 = sub_10002E508;
        int64_t v27 = v20;
        aBlock = _NSConcreteStackBlock;
        uint64_t v23 = 1107296256;
        uint64_t v24 = sub_10005E26C;
        uint64_t v25 = &unk_1000A00D0;
        int64_t v21 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        [v17 deactivateWithCompletion:v21];
        _Block_release(v21);
      }
      swift_release_n();
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      aBlock = 0;
      LOBYTE(v23) = 0;
      a2(&aBlock);
      swift_release_n();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002E490()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002E4C8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002E508(uint64_t a1)
{
  return sub_100052518(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10002E514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E524()
{
  return swift_release();
}

unint64_t sub_10002E52C()
{
  unint64_t result = qword_1000AD0C8;
  if (!qword_1000AD0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD0C8);
  }
  return result;
}

uint64_t sub_10002E584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for AEAConcreteRunningBoardPrimitives()
{
  return self;
}

uint64_t sub_10002E6E0()
{
  sub_10002F9CC();

  swift_release();
  sub_1000201B4(v0 + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken, &qword_1000AD2A8);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10002E770()
{
  return type metadata accessor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor();
}

uint64_t type metadata accessor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor()
{
  uint64_t result = qword_1000AD1A8;
  if (!qword_1000AD1A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002E7C4()
{
  sub_10002FEEC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10002E87C(uint64_t a1)
{
  uint64_t v58 = a1;
  uint64_t v1 = sub_1000048A0(&qword_1000AD2A8);
  uint64_t v3 = __chkstk_darwin(v1 - 8, v2);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  unint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v52 = v12;
  uint64_t v53 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  unint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (void (**)(char *, char *, uint64_t))((char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  int64_t v21 = (void *)qword_1000B01B0;
  *uint64_t v20 = qword_1000B01B0;
  uint64_t v22 = *(void (**)(void))(v17 + 104);
  unsigned int v55 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v54 = (void (*)(void *, void, uint64_t))v22;
  v22(v20);
  id v23 = v21;
  char v24 = _dispatchPreconditionTest(_:)();
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t))(v17 + 8);
  uint64_t result = v25(v20, v16);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  int64_t v27 = v15;
  UUID.init()();
  uint64_t v28 = v56;
  uint64_t v50 = v27;
  uint64_t v51 = v25;
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v48(v8, v27, v9);
  int64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56);
  uint64_t v49 = v9;
  v29(v8, 0, 1, v9);
  sub_100030758((uint64_t)v8, (uint64_t)v5);
  uint64_t v30 = v57;
  uint64_t v31 = v57
      + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
  swift_beginAccess();
  uint64_t v32 = v31;
  uint64_t v33 = v30;
  sub_1000306F0((uint64_t)v5, v32);
  swift_endAccess();
  uint64_t v34 = v58;
  *(void *)(v33
            + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs) = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = qword_1000B01B0;
  *uint64_t v20 = qword_1000B01B0;
  v54(v20, v55, v16);
  id v36 = (id)v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  uint64_t result = v51(v20, v16);
  if ((v35 & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  CurrentValueSubject.value.getter();
  uint64_t v37 = aBlock[0];
  swift_retain();
  uint64_t v38 = sub_10003123C(v37, v33);
  swift_release();
  aBlock[0] = v38;
  CurrentValueSubject.send(_:)();
  swift_release();
  unint64_t v39 = *(void **)(v33 + 16);
  uint64_t v40 = v53;
  uint64_t v41 = v49;
  uint64_t v42 = v50;
  v48(v53, v50, v49);
  unint64_t v43 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v34;
  *(void *)(v44 + 24) = v33;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v44 + v43, v40, v41);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_1000314DC;
  *(void *)(v45 + 24) = v44;
  aBlock[4] = sub_100031560;
  aBlock[5] = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002F978;
  aBlock[3] = &unk_1000A0178;
  uint64_t v46 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v39 updateConfiguration:v46];
  _Block_release(v46);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v42, v41);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
LABEL_9:
  }
    __break(1u);
  return result;
}

void sub_10002EDE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  sub_1000048A0(&qword_1000AD310);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100081CA0;
  swift_bridgeObjectRetain();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [self predicateMatchingBundleIdentifiers:isa];

  *(void *)(v9 + 32) = v11;
  aBlock[0] = v9;
  specialized Array._endMutation()();
  sub_100026CE0(0, &qword_1000AD318);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a1 setPredicates:v12];

  id v13 = [objc_allocWithZone((Class)RBSProcessStateDescriptor) init];
  [a1 setStateDescriptor:v13];

  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v5);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_1000316A4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002F8D8;
  aBlock[3] = &unk_1000A01F0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  [a1 setUpdateHandler:v17];
  _Block_release(v17);
}

uint64_t sub_10002F0D0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v6);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9, v10);
  Class v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  uint64_t v17 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  v28[1] = qword_1000B01B0;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v13);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v30;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v17, v13);
  uint64_t v22 = v31;
  int64_t v21 = v32;
  *(void *)(v20 + v19) = v31;
  *(void *)(v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  aBlock[4] = sub_100031828;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_1000A0240;
  id v23 = _Block_copy(aBlock);
  swift_retain();
  id v24 = v22;
  id v25 = v21;
  static DispatchQoS.unspecified.getter();
  id v36 = _swiftEmptyArrayStorage;
  sub_10003192C((unint64_t *)&qword_1000AB7D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000048A0(&qword_1000AB7D8);
  sub_10000C630();
  uint64_t v26 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v26);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return swift_release();
}

uint64_t sub_10002F49C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v37 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000048A0(&qword_1000AD320);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000048A0(&qword_1000AD2A8);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  unint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v34 - v21;
  __chkstk_darwin(v20, v23);
  id v25 = (char *)&v34 - v24;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v27 = result;
    uint64_t v35 = a4;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v25, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v25, 0, 1, v6);
    uint64_t v28 = v27
        + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
    swift_beginAccess();
    sub_1000318C4(v28, (uint64_t)v22);
    uint64_t v29 = (uint64_t)&v13[*(int *)(v10 + 48)];
    sub_1000318C4((uint64_t)v25, (uint64_t)v13);
    sub_1000318C4((uint64_t)v22, v29);
    uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    if (v30((uint64_t)v13, 1, v6) == 1)
    {
      sub_1000201B4((uint64_t)v22, &qword_1000AD2A8);
      sub_1000201B4((uint64_t)v25, &qword_1000AD2A8);
      if (v30(v29, 1, v6) == 1)
      {
        sub_1000201B4((uint64_t)v13, &qword_1000AD2A8);
LABEL_9:
        sub_10002FC04(v37, v35);
        return swift_release();
      }
    }
    else
    {
      sub_1000318C4((uint64_t)v13, (uint64_t)v18);
      if (v30(v29, 1, v6) != 1)
      {
        uint64_t v31 = v36;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v36, v29, v6);
        sub_10003192C(&qword_1000AD328, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
        v33(v31, v6);
        sub_1000201B4((uint64_t)v22, &qword_1000AD2A8);
        sub_1000201B4((uint64_t)v25, &qword_1000AD2A8);
        v33(v18, v6);
        sub_1000201B4((uint64_t)v13, &qword_1000AD2A8);
        if (v32) {
          goto LABEL_9;
        }
        return swift_release();
      }
      sub_1000201B4((uint64_t)v22, &qword_1000AD2A8);
      sub_1000201B4((uint64_t)v25, &qword_1000AD2A8);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    }
    sub_1000201B4((uint64_t)v13, &qword_1000AD320);
    return swift_release();
  }
  return result;
}

void sub_10002F8D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, id, id))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, v8, v9);
  swift_release();
}

uint64_t sub_10002F978(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

uint64_t sub_10002F9CC()
{
  uint64_t v1 = sub_1000048A0(&qword_1000AD2A8);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (void *)((char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1000B01B0;
  *id v9 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    [*(id *)(v0 + 16) invalidate];
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
    uint64_t v14 = v0
        + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
    swift_beginAccess();
    sub_1000306F0((uint64_t)v4, v14);
    swift_endAccess();
    *(void *)(v0
              + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    v15[1] = &_swiftEmptySetSingleton;
    return CurrentValueSubject.send(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10002FC04(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1000B01B0;
  *uint64_t v8 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    id v11 = [a1 bundle];
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = [v11 identifier];

      if (v13)
      {
        Swift::Int v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v16 = v15;

        [a1 auditToken];
        long long v28 = v32;
        long long v29 = v31;
        id v17 = objc_allocWithZone((Class)AEAConcreteAuditToken);
        long long v31 = v29;
        long long v32 = v28;
        id v18 = [v17 initWithAuditToken:&v31];
        CurrentValueSubject.value.getter();
        id v19 = [a2 state];
        if (v19 && (uint64_t v20 = v19, v21 = [v19 isRunning], v20, v21))
        {
          swift_bridgeObjectRetain();
          sub_100040BDC((Swift::Int *)&v31, v14, v16, v18);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v22 = sub_1000300D4(v14, v16, v18);
          sub_1000302E0(v22, v23, v24);
        }
        uint64_t v25 = v30;
        uint64_t v26 = *(void *)(v30 + 16);
        CurrentValueSubject.value.getter();
        uint64_t v27 = *(void *)(v31 + 16);
        swift_bridgeObjectRelease();
        if (v26 == v27)
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)&long long v31 = v25;
          CurrentValueSubject.send(_:)();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10002FEEC()
{
  if (!qword_1000AD1B8)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AD1B8);
    }
  }
}

uint64_t sub_10002FF44(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  id v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      Swift::Int v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000427EC();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_100030324(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1000300D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v9 = a3;
  NSObject.hash(into:)();

  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v23 = v4;
    uint64_t v13 = ~v11;
    while (1)
    {
      Swift::Int v16 = (void *)(*(void *)(v8 + 48) + 24 * v12);
      BOOL v17 = (void *)v16[2];
      BOOL v18 = *v16 == a1 && v16[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_100026CE0(0, (unint64_t *)&qword_1000AC640);
        swift_bridgeObjectRetain();
        id v14 = v17;
        char v15 = static NSObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        if (v15) {
          break;
        }
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v23;
    uint64_t v24 = *v23;
    uint64_t *v23 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100042D74();
      uint64_t v21 = v24;
    }
    uint64_t v19 = *(void *)(*(void *)(v21 + 48) + 24 * v12);
    sub_1000304EC(v12);
    uint64_t *v23 = v24;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v19;
}

void sub_1000302E0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_100030324(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          id v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000304EC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v11 = *(void **)(*(void *)(v3 + 48) + 24 * v6 + 16);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        id v12 = v11;
        String.hash(into:)();
        id v13 = v12;
        NSObject.hash(into:)();

        Swift::Int v14 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v15 = v14 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 < v9) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(v3 + 48);
          unint64_t v17 = v16 + 24 * v2;
          BOOL v18 = (long long *)(v16 + 24 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v17 >= (unint64_t)v18 + 24))
          {
            long long v10 = *v18;
            *(void *)(v17 + 16) = *((void *)v18 + 2);
            *(_OWORD *)unint64_t v17 = v10;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000306F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AD2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AD2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000307C0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000048A0(&qword_1000AD088);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    long long v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *long long v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_100030A58(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AEAParticipant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v10);
  unint64_t v12 = (id *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a3)
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return (void *)a4;
  }
  sub_1000048A0(qword_1000AD338);
  uint64_t result = (void *)static _SetStorage.allocate(capacity:)();
  uint64_t v13 = (uint64_t)result;
  if (a2 < 1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v16 << 6);
    }
    else
    {
      uint64_t v19 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_30;
      }
      if (v19 >= a2)
      {
LABEL_27:
        swift_release();
        return (void *)v13;
      }
      unint64_t v20 = a1[v19];
      ++v16;
      if (!v20)
      {
        uint64_t v16 = v19 + 1;
        if (v19 + 1 >= a2) {
          goto LABEL_27;
        }
        unint64_t v20 = a1[v16];
        if (!v20)
        {
          uint64_t v16 = v19 + 2;
          if (v19 + 2 >= a2) {
            goto LABEL_27;
          }
          unint64_t v20 = a1[v16];
          if (!v20)
          {
            uint64_t v21 = v19 + 3;
            if (v21 >= a2) {
              goto LABEL_27;
            }
            unint64_t v20 = a1[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v16 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_31;
                }
                if (v16 >= a2) {
                  goto LABEL_27;
                }
                unint64_t v20 = a1[v16];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v21;
          }
        }
      }
LABEL_24:
      unint64_t v15 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    }
    sub_100020250(*(void *)(a4 + 48) + *(void *)(v9 + 72) * v18, (uint64_t)v12);
    uint64_t result = (void *)sub_100041C7C(v12, v13);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100030C68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000048A0(&qword_1000AD330);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  uint64_t v32 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= v32) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v4 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    long long v33 = *(_OWORD *)(v18 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    id v20 = *((id *)&v33 + 1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v21 = v20;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << v9[32];
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = *((void *)v9 + 6) + 24 * v25;
    *(void *)uint64_t v30 = v19;
    *(_OWORD *)(v30 + 8) = v33;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v32) {
    goto LABEL_36;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100030F40(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = 0;
  int64_t v4 = 0;
  uint64_t v7 = *(void *)(a3 + 56);
  uint64_t v5 = a3 + 56;
  uint64_t v6 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v5 - 24);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v6;
  uint64_t v38 = OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs;
  uint64_t v35 = v5;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_22:
    uint64_t v16 = *(void *)(a4 + v38);
    if (*(void *)(v16 + 16))
    {
      unint64_t v37 = v12;
      uint64_t v17 = (uint64_t *)(*(void *)(a3 + 48) + 24 * v12);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      id v20 = (void *)v17[2];
      Hasher.init(_seed:)();
      id v40 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v16 + 32);
      unint64_t v23 = v21 & ~v22;
      if (((*(void *)(v16 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v24 = *(void *)(v16 + 48);
      unint64_t v25 = (void *)(v24 + 16 * v23);
      BOOL v26 = *v25 == v19 && v25[1] == v18;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        *(unint64_t *)((char *)a1 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
        if (__OFADD__(v33++, 1))
        {
          __break(1u);
LABEL_39:
          swift_retain();
          sub_100030C68(a1, a2, v33, a3);
          return;
        }
      }
      else
      {
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v16 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          BOOL v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v19 && v28[1] == v18;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_36;
          }
        }
LABEL_5:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v13 >= v36) {
    goto LABEL_39;
  }
  unint64_t v14 = *(void *)(v35 + 8 * v13);
  ++v4;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v36) {
    goto LABEL_39;
  }
  unint64_t v14 = *(void *)(v35 + 8 * v4);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v4 = v13 + 2;
  if (v13 + 2 >= v36) {
    goto LABEL_39;
  }
  unint64_t v14 = *(void *)(v35 + 8 * v4);
  if (v14)
  {
LABEL_21:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v36) {
    goto LABEL_39;
  }
  unint64_t v14 = *(void *)(v35 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v36) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v35 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_10003123C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v11);
    bzero((char *)&v17 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    sub_100030F40((unint64_t *)((char *)&v17 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    uint64_t v13 = v12;
    swift_release();
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v14 = (void *)swift_slowAlloc();
    bzero(v14, v9);
    swift_retain();
    sub_100030F40((unint64_t *)v14, v8, a1, a2);
    uint64_t v13 = v15;
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v13;
}

uint64_t sub_100031408()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000314DC(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10002EDE8(a1, v4, v5, v6);
}

uint64_t sub_100031550()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100031560()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100031588(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031598()
{
  return swift_release();
}

uint64_t sub_1000315A0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000315D8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000316A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_10002F0D0(a1, a2, a3, v8, v9);
}

uint64_t sub_100031730()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100031828()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + v3);
  unint64_t v6 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10002F49C(v4, v0 + v2, v5, v6);
}

uint64_t sub_1000318C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AD2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003192C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100031984()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100031A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100031A90(a1, a2, a3);
}

uint64_t *sub_100031A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v18 = a1;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 88);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = (uint64_t)v3 + *(void *)(v4 + 104);
  uint64_t v12 = *(void *)(v5 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(v11, 1, 1, v5);
  uint64_t v14 = *(void *)(*v3 + 120);
  *(uint64_t *)((char *)v3 + v14) = static Subscribers.Demand.none.getter();
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 128)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v10, v18, v5);
  v13((uint64_t)v10, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v11, v10, v6);
  swift_endAccess();
  uint64_t v15 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 112));
  uint64_t v16 = v20;
  *uint64_t v15 = v19;
  v15[1] = v16;
  return v3;
}

uint64_t sub_100031CA0(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120));
  swift_beginAccess();
  uint64_t v4 = *v3;
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)()) {
    goto LABEL_10;
  }
  static Subscribers.Demand.unlimited.getter();
  char v5 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v6 = static Subscribers.Demand.unlimited.getter();
  if (v5)
  {
LABEL_9:
    *unint64_t v3 = v6;
LABEL_10:
    swift_endAccess();
    return sub_100031F00();
  }
  uint64_t result = static Subscribers.Demand.== infix(_:_:)();
  if (result) {
    goto LABEL_7;
  }
  if ((v4 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = v4 + a1;
  if (__OFADD__(v4, a1))
  {
LABEL_7:
    uint64_t v6 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100031D80()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = *(void *)(v1 + 128);
  uint64_t v9 = *(void **)((char *)v0 + v8);
  if (v9) {
    [v9 cancel];
  }
  *(uint64_t *)((char *)v0 + v8) = 0;
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v7, 1, 1, v2);
  uint64_t v10 = (uint64_t)v0 + *(void *)(*v0 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v10, v7, v3);
  return swift_endAccess();
}

uint64_t sub_100031F00()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 120));
  swift_beginAccess();
  uint64_t v2 = *v1;
  static Subscribers.Demand.unlimited.getter();
  uint64_t result = static Subscribers.Demand.== infix(_:_:)();
  if (result) {
    goto LABEL_4;
  }
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  if (v2)
  {
LABEL_4:
    uint64_t v4 = *(void *)(*(void *)v0 + 128);
    if (!*(void *)(v0 + v4))
    {
      *(void *)(v0 + v4) = sub_100031FF0();
      swift_unknownObjectRelease();
      uint64_t result = *(void *)(v0 + v4);
      if (result) {
        return (uint64_t)[(id)result resume];
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)v0 + 128);
    uint64_t result = *(void *)(v0 + v5);
    if (result)
    {
      [(id)result cancel];
      *(void *)(v0 + v5) = 0;
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100031FF0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((char *)v0 + *(void *)(*v0 + 112));
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v2 + 80);
  *(void *)(v5 + 32) = *(void *)(v1 + 96);
  *(void *)(v5 + 40) = v4;
  swift_retain();
  uint64_t v6 = v3(sub_100032690, v5);
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_10003210C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = *(void *)(a4 - 8);
  __chkstk_darwin(v8, v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = result + *(void *)(*(void *)result + 104);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v17, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a4) == 1)
    {
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, a4);
    uint64_t v18 = (uint64_t *)(v16 + *(void *)(*(void *)v16 + 120));
    swift_beginAccess();
    uint64_t v19 = *v18;
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_11;
    }
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if (result)
    {
      uint64_t v20 = static Subscribers.Demand.unlimited.getter();
LABEL_10:
      *uint64_t v18 = v20;
LABEL_11:
      swift_endAccess();
      uint64_t v21 = dispatch thunk of Subscriber.receive(_:)();
      swift_beginAccess();
      uint64_t v22 = *v18;
      static Subscribers.Demand.unlimited.getter();
      if (static Subscribers.Demand.== infix(_:_:)())
      {
LABEL_20:
        uint64_t v25 = swift_endAccess();
        sub_100031F00(v25);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a4);
      }
      static Subscribers.Demand.unlimited.getter();
      char v23 = static Subscribers.Demand.== infix(_:_:)();
      uint64_t v24 = static Subscribers.Demand.unlimited.getter();
      if (v23)
      {
LABEL_19:
        *uint64_t v18 = v24;
        goto LABEL_20;
      }
      uint64_t result = static Subscribers.Demand.== infix(_:_:)();
      if (result)
      {
LABEL_17:
        uint64_t v24 = static Subscribers.Demand.unlimited.getter();
        goto LABEL_19;
      }
      if (((v22 | v21) & 0x8000000000000000) == 0)
      {
        uint64_t v24 = v22 + v21;
        if (!__OFADD__(v22, v21))
        {
          if ((v24 & 0x8000000000000000) == 0) {
            goto LABEL_19;
          }
LABEL_25:
          __break(1u);
          return result;
        }
        goto LABEL_17;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v19 < 0)
    {
      __break(1u);
    }
    else if (v19)
    {
      uint64_t v20 = v19 - 1;
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_100032470()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100032534()
{
  sub_100032470();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEASubscriptionPublisher.AEASubscriptionSubscription()
{
  return sub_10000E168();
}

uint64_t sub_1000325A0(uint64_t a1)
{
  return sub_100031CA0(a1);
}

uint64_t sub_1000325C4()
{
  return sub_100031D80();
}

uint64_t sub_1000325E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100032604()
{
  return swift_getWitnessTable();
}

uint64_t sub_100032620()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100032658()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100032690(uint64_t a1)
{
  return sub_10003210C(a1, v1[5], v1[2], v1[3]);
}

unint64_t sub_1000326A0()
{
  unint64_t result = qword_1000AD3C0;
  if (!qword_1000AD3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD3C0);
  }
  return result;
}

uint64_t sub_1000326F4()
{
  if (qword_1000AA5D0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B0258;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10003275C(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  sub_1000048A0(&qword_1000AFC50);
  v2[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AEAParticipant(0);
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_10003284C, 0, 0);
}

uint64_t sub_10003284C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = type metadata accessor for AEAUserConfirmationActivation();
  sub_1000251B8(v4 + *(int *)(v5 + 32), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10003474C(*(void *)(v0 + 112));
    if (qword_1000AA610 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1000B02C0;
    uint64_t v10 = *(void *)algn_1000B02C8;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 136);
    sub_10002D634(*(void *)(v0 + 112), v6);
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 16);
    id v9 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n();
    id v22 = sub_100053768(v8, v7, 0);
    id v23 = [v22 localizedName];

    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    swift_bridgeObjectRelease();
    if (qword_1000AA608 != -1) {
      swift_once();
    }
    uint64_t v27 = *(void *)(v0 + 136);
    sub_1000048A0(&qword_1000AD488);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100080BE0;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_1000347AC();
    *(void *)(v28 + 32) = v24;
    *(void *)(v28 + 40) = v26;
    uint64_t v11 = String.init(format:_:)();
    uint64_t v10 = v29;
    sub_1000202B4(v27);
  }
  *(void *)(v0 + 144) = v10;
  if (qword_1000AA600 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1000B02A0;
  uint64_t v12 = *(void *)algn_1000B02A8;
  *(void *)(v0 + 152) = *(void *)algn_1000B02A8;
  uint64_t v14 = qword_1000AA618;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1000B02D0;
  uint64_t v15 = *(void *)algn_1000B02D8;
  *(void *)(v0 + 160) = *(void *)algn_1000B02D8;
  uint64_t v17 = qword_1000AA620;
  swift_bridgeObjectRetain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_1000B02E0;
  uint64_t v18 = *(void *)algn_1000B02E8;
  *(void *)(v0 + 16) = v13;
  *(void *)(v0 + 168) = v18;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 32) = v11;
  *(void *)(v0 + 40) = v10;
  *(void *)(v0 + 48) = v16;
  *(void *)(v0 + 56) = v15;
  *(void *)(v0 + 64) = v19;
  *(void *)(v0 + 72) = v18;
  *(_DWORD *)(v0 + 80) = 16777473;
  uint64_t v30 = (uint64_t (*)(uint64_t))((char *)&dword_1000ABB80 + dword_1000ABB80);
  *(void *)(v0 + 88) = 0x404E000000000000;
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100032BE8;
  return v30(v0 + 16);
}

uint64_t sub_100032BE8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100032E14;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 192) = a1;
    uint64_t v5 = sub_100032D3C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100032D3C()
{
  if (*(unsigned char *)(v0 + 192))
  {
    sub_1000326A0();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 96);
    *(void *)(v1 + 32) = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100032E14()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100032EB0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000ED6C;
  return sub_10003275C(a1);
}

unsigned char *storeEnumTagSinglePayload for AEAUserConfirmationActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100032FE4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAUserConfirmationActionError()
{
  return &type metadata for AEAUserConfirmationActionError;
}

unint64_t sub_100033020()
{
  unint64_t result = qword_1000AD3C8;
  if (!qword_1000AD3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD3C8);
  }
  return result;
}

uint64_t sub_100033074(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    long long v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v8;
    uint64_t v9 = v8;
    uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
    swift_bridgeObjectRetain();
    v10(a1 + 24, a2 + 3, v9);
    long long v11 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 88) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, (uint64_t)(a2 + 8));
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (void **)(a1 + v12);
    uint64_t v14 = (void **)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AEAParticipant(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_1000048A0(&qword_1000AFC50);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v20 = *v14;
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      uint64_t v38 = v20;
      v13[2] = v14[2];
      *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
      uint64_t v21 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      id v22 = (char *)v13 + v21;
      id v23 = (char *)v14 + v21;
      *id v22 = *((unsigned char *)v14 + v21);
      uint64_t v24 = *(uint64_t *)((char *)v14 + v21 + 16);
      *((void *)v22 + 1) = *(void **)((char *)v14 + v21 + 8);
      *((void *)v22 + 2) = v24;
      uint64_t v25 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v22[v25];
      unint64_t v37 = &v23[v25];
      uint64_t v26 = type metadata accessor for URL();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      id v29 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28(v37, 1, v26))
      {
        uint64_t v30 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dst, v37, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v37, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      uint64_t v31 = *(int *)(v15 + 20);
      uint64_t v32 = (char *)v13 + v31;
      uint64_t v33 = (char *)v14 + v31;
      *uint64_t v32 = *v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      uint64_t v34 = *(void (**)(void **, void, uint64_t, uint64_t))(v16 + 56);
      swift_bridgeObjectRetain();
      v34(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_1000333E0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 24);
  sub_1000048E4(a1 + 64);
  unsigned int v4 = (id *)(a1 + *(int *)(a2 + 32));
  uint64_t v5 = type metadata accessor for AEAParticipant(0);
  uint64_t result = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)v4 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease();
    long long v8 = &v7[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100033554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = a2 + 24;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  v10(a1 + 24, v7, v9);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void **)(a1 + v12);
  uint64_t v14 = (void **)(a2 + v12);
  uint64_t v15 = type metadata accessor for AEAParticipant(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000048A0(&qword_1000AFC50);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v14;
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    int64_t v36 = v19;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    uint64_t v20 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v21 = (char *)v13 + v20;
    id v22 = (char *)v14 + v20;
    *uint64_t v21 = *((unsigned char *)v14 + v20);
    uint64_t v23 = *(uint64_t *)((char *)v14 + v20 + 16);
    *((void *)v21 + 1) = *(void **)((char *)v14 + v20 + 8);
    *((void *)v21 + 2) = v23;
    uint64_t v24 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v21[v24];
    uint64_t v35 = &v22[v24];
    uint64_t v25 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    id v28 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v35, 1, v25))
    {
      uint64_t v29 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dst, v35, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v35, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    uint64_t v30 = *(int *)(v15 + 20);
    uint64_t v31 = (char *)v13 + v30;
    uint64_t v32 = (char *)v14 + v30;
    *uint64_t v31 = *v32;
    *((void *)v31 + 1) = *((void *)v32 + 1);
    uint64_t v33 = *(void (**)(void **, void, uint64_t, uint64_t))(v16 + 56);
    swift_bridgeObjectRetain();
    v33(v13, 0, 1, v15);
  }
  return a1;
}

void *sub_100033874(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  sub_10000E5F4(a1 + 3, a2 + 3);
  sub_10000E5F4(a1 + 8, a2 + 8);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (uint64_t)a1 + v6;
  long long v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AEAParticipant(0);
  uint64_t v10 = *(void *)(v9 - 8);
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1000202B4(v7);
      goto LABEL_7;
    }
    uint64_t v24 = *(void **)v8;
    uint64_t v25 = *(void **)v7;
    *(void *)uint64_t v7 = *(void *)v8;
    id v26 = v24;

    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(void *)(v7 + 16) = *((void *)v8 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v7 + 24) = v8[24];
    uint64_t v27 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v28 = v7 + v27;
    uint64_t v29 = &v8[v27];
    *(unsigned char *)uint64_t v28 = v8[v27];
    *(void *)(v28 + 8) = *(void *)&v8[v27 + 8];
    *(void *)(v28 + 16) = *(void *)&v8[v27 + 16];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v31 = (void *)(v28 + v30);
    uint64_t v32 = &v29[v30];
    uint64_t v33 = type metadata accessor for URL();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
    uint64_t v49 = v31;
    LODWORD(v31) = v35(v31, 1, v33);
    int v36 = v35(v32, 1, v33);
    if (v31)
    {
      if (!v36)
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v49, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v49, 0, 1, v33);
        goto LABEL_18;
      }
      size_t v37 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v38 = v49;
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 24))(v49, v32, v33);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v34 + 8))(v49, v33);
      size_t v37 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v38 = v49;
    }
    memcpy(v38, v32, v37);
LABEL_18:
    uint64_t v43 = *(int *)(v9 + 20);
    uint64_t v44 = v7 + v43;
    uint64_t v45 = &v8[v43];
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v23 = sub_1000048A0(&qword_1000AFC50);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v48 = *(void **)v8;
  *(void *)uint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *((void *)v8 + 1);
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(unsigned char *)(v7 + 24) = v8[24];
  uint64_t v14 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = &v8[v14];
  *(unsigned char *)uint64_t v15 = v8[v14];
  *(void *)(v15 + 8) = *(void *)&v8[v14 + 8];
  *(void *)(v15 + 16) = *(void *)&v8[v14 + 16];
  uint64_t v17 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v15 + v17);
  unsigned int v47 = &v16[v17];
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  id v21 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20(v47, 1, v18))
  {
    uint64_t v22 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(__dst, v47, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v19 + 16))(__dst, v47, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  uint64_t v39 = *(int *)(v9 + 20);
  uint64_t v40 = v7 + v39;
  uint64_t v41 = &v8[v39];
  *(unsigned char *)uint64_t v40 = *v41;
  *(void *)(v40 + 8) = *((void *)v41 + 1);
  uint64_t v42 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v42(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_100033D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (void *)(a2 + v5);
  uint64_t v7 = (void *)(a1 + v5);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = type metadata accessor for AEAParticipant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    uint64_t v10 = sub_1000048A0(&qword_1000AFC50);
    memcpy(v7, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    *uint64_t v7 = *v6;
    *(_OWORD *)(v7 + 1) = *(_OWORD *)(v6 + 1);
    *((unsigned char *)v7 + 24) = *((unsigned char *)v6 + 24);
    uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    int v12 = (char *)v7 + v11;
    int v13 = (char *)v6 + v11;
    *int v12 = *((unsigned char *)v6 + v11);
    *(_OWORD *)(v12 + 8) = *(_OWORD *)((char *)v6 + v11 + 8);
    uint64_t v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v15 = &v12[v14];
    uint64_t v16 = &v13[v14];
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_OWORD *)((char *)v7 + *(int *)(v8 + 20)) = *(_OWORD *)((char *)v6 + *(int *)(v8 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_100033FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1000048E4(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_1000048E4(a1 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for AEAParticipant(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_1000202B4(v9);
      goto LABEL_7;
    }
    id v26 = *(void **)v9;
    *(void *)uint64_t v9 = *(void *)v10;

    uint64_t v27 = *(void *)(v10 + 16);
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    *(void *)(v9 + 16) = v27;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
    uint64_t v28 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v29 = v9 + v28;
    uint64_t v30 = v10 + v28;
    *(unsigned char *)uint64_t v29 = *(unsigned char *)(v10 + v28);
    uint64_t v31 = *(void *)(v10 + v28 + 16);
    *(void *)(v29 + 8) = *(void *)(v10 + v28 + 8);
    *(void *)(v29 + 16) = v31;
    swift_bridgeObjectRelease();
    uint64_t v32 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v33 = (void *)(v29 + v32);
    uint64_t v34 = (void *)(v30 + v32);
    uint64_t v35 = type metadata accessor for URL();
    uint64_t v36 = *(void *)(v35 - 8);
    size_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    uint64_t v45 = v33;
    LODWORD(v33) = v37(v33, 1, v35);
    int v38 = v37(v34, 1, v35);
    if (v33)
    {
      if (!v38)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v45, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v45, 0, 1, v35);
        goto LABEL_18;
      }
      size_t v39 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v40 = v45;
    }
    else
    {
      if (!v38)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v45, v34, v35);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v36 + 8))(v45, v35);
      size_t v39 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v40 = v45;
    }
    memcpy(v40, v34, v39);
LABEL_18:
    uint64_t v41 = *(int *)(v11 + 20);
    uint64_t v42 = v9 + v41;
    uint64_t v43 = v10 + v41;
    *(unsigned char *)uint64_t v42 = *(unsigned char *)v43;
    *(void *)(v42 + 8) = *(void *)(v43 + 8);
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v25 = sub_1000048A0(&qword_1000AFC50);
    memcpy((void *)v9, (const void *)v10, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v9 = *(void *)v10;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(v10 + 8);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  uint64_t v16 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)(v10 + v16);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v10 + v16 + 8);
  uint64_t v19 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v20 = (void *)(v17 + v19);
  id v21 = (const void *)(v18 + v19);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_OWORD *)(v9 + *(int *)(v11 + 20)) = *(_OWORD *)(v10 + *(int *)(v11 + 20));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_100034470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034484);
}

uint64_t sub_100034484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000048A0(&qword_1000AFC50);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100034538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003454C);
}

uint64_t sub_10003454C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000048A0(&qword_1000AFC50);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AEAUserConfirmationActivation()
{
  uint64_t result = qword_1000AD428;
  if (!qword_1000AD428) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100034644()
{
  sub_1000346F4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000346F4()
{
  if (!qword_1000AD438)
  {
    type metadata accessor for AEAParticipant(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AD438);
    }
  }
}

uint64_t sub_10003474C(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AFC50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000347AC()
{
  unint64_t result = qword_1000AD490[0];
  if (!qword_1000AD490[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000AD490);
  }
  return result;
}

uint64_t Publishers.AEACombineLatestMany.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v54 = type metadata accessor for Subscribers.Completion();
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v13);
  uint64_t v51 = (char *)v46 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v64 = a3;
  uint64_t v65 = v15;
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v67 = a4;
  uint64_t WitnessTable = a5;
  uint64_t v69 = a6;
  uint64_t v56 = _s20AEACombineLatestManyV5InnerC4SideVMa();
  uint64_t v50 = *(void *)(v56 - 8);
  uint64_t v17 = __chkstk_darwin(v56, v16);
  unsigned int v55 = (char *)v46 - v18;
  uint64_t v48 = *(void *)(a3 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v53 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v60 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v60 - 8);
  uint64_t v22 = __chkstk_darwin(v60, v21);
  long long v59 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  id v26 = (void *)((char *)v46 - v25);
  uint64_t v64 = a3;
  uint64_t v65 = v15;
  uint64_t v49 = v15;
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v67 = a4;
  uint64_t v58 = a5;
  uint64_t WitnessTable = a5;
  uint64_t v69 = a6;
  v46[1] = a6;
  uint64_t v27 = _s20AEACombineLatestManyV5InnerCMa();
  uint64_t v28 = Array.count.getter();
  uint64_t v29 = sub_10003721C(a1, v28);
  uint64_t v64 = a2;
  uint64_t v57 = a3;
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    uint64_t v67 = v27;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v64 = (uint64_t)v29;
    swift_retain();
    dispatch thunk of Subscriber.receive(subscription:)();
    sub_1000048E4((uint64_t)&v64);
    uint64_t v64 = static Array._allocateUninitialized(_:)();
    dispatch thunk of Subscriber.receive(_:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v51, 1, 1, AssociatedTypeWitness);
    dispatch thunk of Subscriber.receive(completion:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v30, v54);
  }
  else
  {
    uint64_t v54 = (uint64_t)v29;
    uint64_t v64 = a2;
    swift_getWitnessTable();
    Sequence.enumerated()();
    uint64_t v62 = v63;
    type metadata accessor for EnumeratedSequence();
    EnumeratedSequence.makeIterator()();
    uint64_t v52 = type metadata accessor for EnumeratedSequence.Iterator();
    uint64_t v32 = (void (**)(uint64_t *, char *, uint64_t))(v47 + 32);
    uint64_t v33 = TupleTypeMetadata2;
    uint64_t v51 = (char *)(TupleTypeMetadata2 - 8);
    uint64_t v34 = (void (**)(char *, char *, uint64_t))(v48 + 32);
    uint64_t v35 = (void (**)(void *, uint64_t))(v50 + 8);
    uint64_t v36 = (void (**)(char *, uint64_t))(v48 + 8);
    size_t v37 = v55;
    while (1)
    {
      int v38 = v59;
      EnumeratedSequence.Iterator.next()();
      (*v32)(v26, v38, v60);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v26, 1, v33) == 1) {
        break;
      }
      uint64_t v39 = *v26;
      uint64_t v40 = (char *)v26 + *(int *)(v33 + 48);
      uint64_t v41 = v53;
      uint64_t v42 = v57;
      (*v34)(v53, v40, v57);
      uint64_t v43 = v54;
      swift_retain();
      sub_100034EA0(v39, v43, v37);
      uint64_t v44 = v56;
      swift_getWitnessTable();
      Publisher.subscribe<A>(_:)();
      (*v35)(v37, v44);
      uint64_t v45 = v42;
      uint64_t v33 = TupleTypeMetadata2;
      (*v36)(v41, v45);
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t _s20AEACombineLatestManyV5InnerC4SideVMa()
{
  return swift_getGenericMetadata();
}

uint64_t _s20AEACombineLatestManyV5InnerCMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100034EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  _s20AEACombineLatestManyV5InnerC4SideVMa();
  return CombineIdentifier.init()();
}

uint64_t sub_100034F18@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000048A0(&qword_1000AD618);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  (*(void (**)(char *, uint64_t, _OWORD *))(v16 + 16))((char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  sub_1000048A0(&qword_1000AD620);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100080BE0;
  *(void *)(v17 + 32) = 0xD000000000000012;
  *(void *)(v17 + 40) = 0x80000001000877B0;
  *(void *)(v17 + 72) = type metadata accessor for CombineIdentifier();
  sub_100037C54((uint64_t *)(v17 + 48));
  long long v18 = a1[2];
  long long v22 = a1[1];
  long long v23 = v18;
  long long v24 = a1[3];
  _s20AEACombineLatestManyV5InnerCMa();
  swift_getWitnessTable();
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void sub_1000351DC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for String;
  strcpy((char *)a1, "CombineLatest");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_100035210(void *a1)
{
  sub_100035700(a1, *v1);
}

void sub_100035238(uint64_t a1)
{
  sub_100035A24(a1, *v1);
}

void sub_100035260(uint64_t a1)
{
  sub_100036108(a1, *v1);
}

uint64_t sub_100035294()
{
  return 0x4C656E69626D6F43;
}

uint64_t sub_1000352C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 72);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100035330()
{
  uint64_t v1 = (_OWORD *)*v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000048A0(&qword_1000AD618);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v0;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  long long v12 = v1[6];
  v14[0] = v1[5];
  v14[1] = v12;
  void v14[2] = v1[7];
  _s20AEACombineLatestManyV5InnerCMa();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100035508(long long *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    if (a2)
    {
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v4[2] = v2;
      uint64_t v5 = (uint64_t)(v4 + 4);
      do
      {
        sub_100037CB8(a1, v5);
        v5 += 40;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
    sub_100037D38((uint64_t)a1);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t *sub_1000355D8()
{
  uint64_t v1 = *v0;
  swift_slowDealloc();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 104) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000356AC()
{
  sub_1000355D8();

  return swift_deallocClassInstance();
}

void sub_100035700(void *a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  if (*(uint64_t *)((char *)v2 + *(void *)(*v2 + 176)) <= a2)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v7 + 184));
  os_unfair_lock_lock(v3);
  uint64_t v8 = (void *)*v2;
  if ((*((unsigned char *)v2 + *(void *)(*v2 + 152)) & 1) != 0
    || (*((unsigned char *)v2 + v8[20]) & 1) != 0
    || (*((unsigned char *)v2 + v8[21]) & 1) != 0)
  {
    goto LABEL_8;
  }
  uint64_t v6 = (uint64_t *)((char *)v2 + v8[18]);
  swift_beginAccess();
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_22;
  }
  if (*(void *)(*v6 + 16) <= v4)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t v5 = sub_100036E98(v5);
    uint64_t *v6 = (uint64_t)v5;
    goto LABEL_11;
  }
  sub_100037CB8((long long *)(*v6 + 40 * v4 + 32), (uint64_t)&v17);
  uint64_t v9 = v19;
  sub_100037D38((uint64_t)&v17);
  if (v9)
  {
LABEL_8:
    os_unfair_lock_unlock(v3);
    sub_100006340(v5, v5[3]);
    dispatch thunk of Cancellable.cancel()();
    return;
  }
  sub_1000091C4((uint64_t)v5, (uint64_t)&v17);
  swift_beginAccess();
  uint64_t v5 = (void *)*v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v6 = (uint64_t)v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_24;
  }
LABEL_11:
  if (v5[2] > v4)
  {
    sub_100037DDC(&v17, (uint64_t)&v5[5 * v4 + 4]);
    uint64_t v11 = *v6;
    swift_endAccess();
    uint64_t v12 = *(void *)(v11 + 16);
    if (!v12)
    {
LABEL_19:
      os_unfair_lock_unlock(v3);
      uint64_t v14 = *(void *)(v7 + 120);
      long long v15 = *(_OWORD *)(v7 + 80);
      uint64_t v18 = *(void *)(v7 + 96);
      long long v16 = *(_OWORD *)(v7 + 104);
      long long v17 = v15;
      long long v19 = v16;
      uint64_t v20 = v14;
      *(void *)&long long v19 = _s20AEACombineLatestManyV5InnerCMa();
      *((void *)&v19 + 1) = swift_getWitnessTable();
      *(void *)&long long v17 = v2;
      swift_retain();
      dispatch thunk of Subscriber.receive(subscription:)();
      sub_1000048E4((uint64_t)&v17);
      return;
    }
    uint64_t v13 = (long long *)(v11 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100037CB8(v13, (uint64_t)&v17);
      sub_100037CB8(&v17, (uint64_t)v21);
      if (v22 != 1)
      {
        if (!v22)
        {
          sub_100037D38((uint64_t)&v17);
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v3);
          return;
        }
        sub_100037D38((uint64_t)v21);
      }
      sub_100037D38((uint64_t)&v17);
      uint64_t v13 = (long long *)((char *)v13 + 40);
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
  }
  __break(1u);
}

void sub_100035A24(uint64_t a1, int64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)*v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = *(void *)(*v3 + 88);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v33 - v12;
  if (*(uint64_t *)((char *)v3 + v6[22]) <= a2)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v14 = *(os_unfair_lock_s **)((char *)v3 + v7[23]);
  os_unfair_lock_lock(v14);
  uint64_t v15 = *v3;
  if ((*((unsigned char *)v3 + *(void *)(*v3 + 152)) & 1) != 0
    || (*((unsigned char *)v3 + *(void *)(v15 + 160)) & 1) != 0
    || (*((unsigned char *)v3 + *(void *)(v15 + 168)) & 1) != 0)
  {
    os_unfair_lock_unlock(v14);
    static Subscribers.Demand.none.getter();
    return;
  }
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v8);
  long long v17 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 136));
  swift_beginAccess();
  *(void *)&long long v39 = type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  uint64_t v18 = *v17;
  sub_100036E44(a2, *v17);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 40))(v18+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * a2, v13, v9);
  swift_endAccess();
  uint64_t v38 = (uint64_t)&v33;
  long long v19 = v17;
  uint64_t v46 = *v17;
  __chkstk_darwin(v46, v20);
  uint64_t v35 = v7[10];
  *(&v33 - 6) = v35;
  *(&v33 - 5) = v8;
  uint64_t v21 = v7[13];
  uint64_t v34 = v7[12];
  *(&v33 - 4) = v34;
  *(&v33 - 3) = v21;
  unint64_t v37 = v21;
  uint64_t v23 = v7[14];
  uint64_t v22 = v7[15];
  *(&v33 - 2) = v23;
  *(&v33 - 1) = v22;
  uint64_t v36 = v22;
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  LOBYTE(v17) = Sequence.allSatisfy(_:)();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    os_unfair_lock_unlock(v14);
    goto LABEL_24;
  }
  uint64_t v38 = (uint64_t)&v33;
  uint64_t v46 = *v19;
  __chkstk_darwin(v46, v24);
  *(&v33 - 6) = v35;
  *(&v33 - 5) = v8;
  uint64_t v25 = v37;
  *(&v33 - 4) = v34;
  *(&v33 - 3) = v25;
  *(&v33 - 2) = v23;
  *(&v33 - 1) = v36;
  swift_bridgeObjectRetain();
  uint64_t v26 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v14);
  uint64_t v46 = v26;
  uint64_t v27 = dispatch thunk of Subscriber.receive(_:)();
  swift_bridgeObjectRelease();
  static Subscribers.Demand.unlimited.getter();
  uint64_t v38 = v27;
  if (static Subscribers.Demand.== infix(_:_:)()) {
    goto LABEL_12;
  }
  if (v38 < 0)
  {
LABEL_28:
    __break(1u);
    return;
  }
  if (!v38)
  {
LABEL_24:
    uint64_t v38 = static Subscribers.Demand.none.getter();
    return;
  }
LABEL_12:
  os_unfair_lock_lock(v14);
  uint64_t v28 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 144));
  swift_beginAccess();
  uint64_t v29 = *v28;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v14);
  unint64_t v30 = 0;
  unint64_t v31 = *(void *)(v29 + 16);
  long long v39 = xmmword_100081FF0;
  unint64_t v37 = v31;
  while (1)
  {
    if (v30 == v31)
    {
      memset(v45, 0, 32);
      unint64_t v30 = v31;
      v45[2] = v39;
    }
    else
    {
      if (v30 >= *(void *)(v29 + 16)) {
        goto LABEL_27;
      }
      sub_100037CB8((long long *)(v29 + 32 + 40 * v30), (uint64_t)&v43);
      *(void *)&v45[0] = v30;
      sub_1000093C0(&v43, (uint64_t)v45 + 8);
      ++v30;
    }
    sub_100037D74((uint64_t)v45, (uint64_t)&v46);
    if (v48 == 2) {
      break;
    }
    uint64_t v32 = v46;
    sub_1000093C0(&v47, (uint64_t)v45);
    if (v32 == a2)
    {
      sub_100037D38((uint64_t)v45);
    }
    else
    {
      sub_100037CB8(v45, (uint64_t)&v40);
      if (v41 > 1)
      {
        sub_1000093C0(&v40, (uint64_t)&v42);
        sub_100006340(&v42, v44);
        unint64_t v31 = v37;
        dispatch thunk of Subscription.request(_:)();
        sub_100037D38((uint64_t)v45);
        sub_1000048E4((uint64_t)&v42);
      }
      else
      {
        sub_100037D38((uint64_t)v45);
        sub_100037D38((uint64_t)&v40);
      }
    }
  }
  swift_bridgeObjectRelease();
}

void sub_100036108(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 96);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v5 + 184));
  os_unfair_lock_lock(v16);
  uint64_t v17 = *v2;
  if ((*((unsigned char *)v2 + *(void *)(*v2 + 152)) & 1) != 0
    || (uint64_t v18 = *(void *)(v17 + 160), (*((unsigned char *)v2 + v18) & 1) != 0)
    || (*((unsigned char *)v2 + *(void *)(v17 + 168)) & 1) != 0)
  {
    os_unfair_lock_unlock(v16);
    return;
  }
  uint64_t v26 = *(void *)(v17 + 168);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, a1, v7);
  uint64_t v25 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v15, 1, v6) != 1)
  {
    *((unsigned char *)v2 + v18) = 1;
    sub_100036508(a1, a2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    return;
  }
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  long long v31 = xmmword_100080BF0;
  long long v19 = (void **)((char *)v2 + *(void *)(*v2 + 144));
  swift_beginAccess();
  uint64_t v20 = *v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *long long v19 = v20;
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v20 = sub_100036E98(v20);
  *long long v19 = v20;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if (v20[2] <= a2)
  {
LABEL_25:
    __break(1u);
    return;
  }
  sub_100037DDC(&v29, (uint64_t)&v20[5 * a2 + 4]);
  uint64_t v22 = *v19;
  swift_endAccess();
  uint64_t v23 = v22[2];
  if (v23)
  {
    uint64_t v24 = (long long *)(v22 + 4);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100037CB8(v24, (uint64_t)&v29);
      sub_100037CB8(&v29, (uint64_t)v27);
      if (v28 != 1) {
        break;
      }
      sub_100037D38((uint64_t)&v29);
      uint64_t v24 = (long long *)((char *)v24 + 40);
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    if (v28) {
      sub_100037D38((uint64_t)v27);
    }
    sub_100037D38((uint64_t)&v29);
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v16);
  }
  else
  {
LABEL_16:
    *((unsigned char *)v2 + v26) = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v12, 1, 1, v6);
    sub_100036508((uint64_t)v12, a2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
}

void sub_100036508(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v20 = *v2;
  uint64_t v4 = *(void *)(v20 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v19 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v19 - v8, 1, 1, v4);
  uint64_t v10 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 176));
  uint64_t v11 = sub_100036EAC((uint64_t)v9, v10, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v12 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 136));
  swift_beginAccess();
  *uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 144));
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  swift_bridgeObjectRetain();
  *uint64_t v13 = sub_100035508(v30, v10);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(*v2 + 184);
  uint64_t v21 = v2;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v15));
  unint64_t v16 = 0;
  unint64_t v17 = *(void *)(v14 + 16);
  long long v23 = xmmword_100081FF0;
  while (1)
  {
    if (v16 == v17)
    {
      memset(v29, 0, 32);
      unint64_t v16 = v17;
      v29[2] = v23;
      goto LABEL_7;
    }
    if (v16 >= *(void *)(v14 + 16)) {
      break;
    }
    sub_100037CB8((long long *)(v14 + 32 + 40 * v16), (uint64_t)&v27);
    *(void *)&v29[0] = v16;
    sub_1000093C0(&v27, (uint64_t)v29 + 8);
    ++v16;
LABEL_7:
    sub_100037D74((uint64_t)v29, (uint64_t)v30);
    if (v31 == 2)
    {
      swift_bridgeObjectRelease();
      dispatch thunk of Subscriber.receive(completion:)();
      return;
    }
    uint64_t v18 = *(void *)&v30[0];
    sub_1000093C0((long long *)((char *)v30 + 8), (uint64_t)v29);
    if (v18 == a2)
    {
      sub_100037D38((uint64_t)v29);
    }
    else
    {
      sub_100037CB8(v29, (uint64_t)&v24);
      if (v25 > 1)
      {
        sub_1000093C0(&v24, (uint64_t)&v26);
        sub_100006340(&v26, v28);
        dispatch thunk of Cancellable.cancel()();
        sub_100037D38((uint64_t)v29);
        sub_1000048E4((uint64_t)&v26);
      }
      else
      {
        sub_100037D38((uint64_t)v29);
        sub_100037D38((uint64_t)&v24);
      }
    }
  }
  __break(1u);
}

void sub_1000368D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 184));
  os_unfair_lock_lock(v8);
  uint64_t v9 = *(void *)(*v0 + 152);
  if (*((unsigned char *)v0 + v9))
  {
    os_unfair_lock_unlock(v8);
  }
  else
  {
    uint64_t v10 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 144));
    swift_beginAccess();
    uint64_t v11 = *v10;
    *((unsigned char *)v0 + v9) = 1;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    long long v21 = xmmword_100080BF0;
    uint64_t v12 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 176));
    swift_bridgeObjectRetain();
    *uint64_t v10 = sub_100035508(&v19, v12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v7, 1, 1, v2);
    uint64_t v13 = sub_100036EAC((uint64_t)v7, v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v14 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 136));
    swift_beginAccess();
    uint64_t *v14 = v13;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v8);
    uint64_t v15 = *(void *)(v11 + 16);
    if (v15)
    {
      unint64_t v16 = (long long *)(v11 + 32);
      do
      {
        sub_100037CB8(v16, (uint64_t)&v17);
        if (v18 <= 1)
        {
          sub_100037D38((uint64_t)&v17);
        }
        else
        {
          sub_1000093C0(&v17, (uint64_t)&v19);
          sub_100006340(&v19, v21);
          dispatch thunk of Cancellable.cancel()();
          sub_1000048E4((uint64_t)&v19);
        }
        unint64_t v16 = (long long *)((char *)v16 + 40);
        --v15;
      }
      while (v15);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_100036BDC(uint64_t a1)
{
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 184));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void **)v1;
  if ((*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 152)) & 1) != 0
    || (*(unsigned char *)(v1 + v4[20]) & 1) != 0
    || (*(unsigned char *)(v1 + v4[21]) & 1) != 0)
  {
    os_unfair_lock_unlock(v3);
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v1 + v4[18]);
    swift_beginAccess();
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v3);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = (long long *)(v6 + 32);
      do
      {
        sub_100037CB8(v8, (uint64_t)&v9);
        if (v10 <= 1)
        {
          sub_100037D38((uint64_t)&v9);
        }
        else
        {
          sub_1000093C0(&v9, (uint64_t)v11);
          sub_100006340(v11, v11[3]);
          dispatch thunk of Subscription.request(_:)();
          sub_1000048E4((uint64_t)v11);
        }
        uint64_t v8 = (long long *)((char *)v8 + 40);
        --v7;
      }
      while (v7);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_100036D9C(uint64_t a1)
{
}

uint64_t sub_100036DC0()
{
  return sub_100035330();
}

void sub_100036DE4(uint64_t a1@<X8>)
{
}

void sub_100036E08()
{
}

uint64_t sub_100036E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.AEACombineLatestMany.receive<A>(subscriber:)(a1, *v4, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
}

uint64_t sub_100036E44(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

void *sub_100036E98(void *a1)
{
  return sub_10006B010(0, a1[2], 0, a1);
}

uint64_t sub_100036EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (a2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a3 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      uint64_t v12 = a2 - 1;
      if (v12)
      {
        uint64_t v13 = *(void *)(v10 + 72);
        uint64_t v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array();
    return v8;
  }
  return result;
}

uint64_t *sub_100036FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 88);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v16 - v10;
  *((unsigned char *)v2 + *(void *)(v5 + 152)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 160)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 168)) = 0;
  uint64_t v12 = *(void *)(*v2 + 184);
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(uint64_t *)((char *)v2 + v12) = (uint64_t)v13;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 104) - 8) + 16))((uint64_t)v2 + *(void *)(*v2 + 128), a1);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 176)) = a2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v11, 1, 1, v6);
  uint64_t v14 = sub_100036EAC((uint64_t)v11, a2, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136)) = v14;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 144)) = sub_100035508(v16, a2);
  return v2;
}

uint64_t *sub_10003721C(uint64_t a1, uint64_t a2)
{
  return sub_100036FB0(a1, a2);
}

uint64_t sub_100037288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for Publishers.AEACombineLatestMany()
{
  return sub_10000E168();
}

uint64_t sub_1000372A8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for SubscriptionStatus(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return sub_1000048E4(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for SubscriptionStatus(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_1000048E4(a1);
    goto LABEL_7;
  }
  sub_10000E5F4((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    sub_1000048E4(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SubscriptionStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1000375C8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1000375E0(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionStatus()
{
  return &type metadata for SubscriptionStatus;
}

uint64_t sub_10003761C()
{
  uint64_t result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000376C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 72);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for CombineIdentifier();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1000377AC(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 72);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100037824(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 72);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for CombineIdentifier();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_1000378BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 72);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100037958(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 72);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_1000379D4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = *(int *)(a3 + 72);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100037A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037A74);
}

uint64_t sub_100037A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CombineIdentifier();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 72);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100037B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037B38);
}

uint64_t sub_100037B38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CombineIdentifier();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 72);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100037BE0()
{
  return swift_getWitnessTable();
}

uint64_t sub_100037BFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100037C18()
{
  return swift_getWitnessTable();
}

uint64_t sub_100037C34()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t *sub_100037C54(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100037CB8(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t sub_100037D38(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    sub_1000048E4(a1);
  }
  return a1;
}

uint64_t sub_100037D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AD628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037DDC(long long *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24) >= 0xFFFFFFFFuLL) {
    sub_1000048E4(a2);
  }
  long long v4 = *a1;
  long long v5 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

BOOL sub_100037E2C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 48))(a1, 1) != 1;
}

uint64_t sub_100037E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_100037EFC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000048A0(&qword_1000ACAA0);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t type metadata accessor for AEAConcreteFrontBoardPrimitives()
{
  return self;
}

uint64_t sub_100037FE0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return _swift_task_switch(sub_100038000, 0, 0);
}

uint64_t sub_100038000()
{
  id v1 = [self serviceWithDefaultShellEndpoint];
  v0[18] = v1;
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    v0[19] = v3;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_10003818C;
    uint64_t v4 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100037EFC;
    v0[13] = &unk_1000A05E8;
    v0[14] = v4;
    [v2 openApplication:v3 withOptions:0 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10003818C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    id v2 = sub_100038310;
  }
  else {
    id v2 = sub_10003829C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10003829C()
{
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = *(void **)(v0 + 152);

  NSString v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100038310()
{
  uint64_t v1 = (void *)v0[19];
  id v2 = (void *)v0[18];
  swift_willThrow();

  NSString v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10003838C()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 16);
  if (v1)
  {
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0;
    swift_retain();
    uint64_t v2 = sub_1000091B4((uint64_t)v1);
    v1(v2);
    sub_1000091B4((uint64_t)v1);
    uint64_t v3 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_1000091B4(v3);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEABlockCancelable()
{
  return self;
}

uint64_t sub_1000384D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001059C((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10006D448(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000201B4(a1, (uint64_t *)&unk_1000AC650);
    sub_100039450(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1000201B4((uint64_t)v9, (uint64_t *)&unk_1000AC650);
  }
}

uint64_t sub_1000385AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AEAParticipant(0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 48))(a1, 1) == 1)
  {
    sub_1000201B4(a1, &qword_1000AFC50);
    sub_10003964C(a2, a3, (uint64_t)v11);
    sub_100006384(a2, a3);
    return sub_1000201B4((uint64_t)v11, &qword_1000AFC50);
  }
  else
  {
    sub_10002D634(a1, (uint64_t)v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_10006DB9C((uint64_t)v15, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v20;
    swift_bridgeObjectRelease();
    return sub_100006384(a2, a3);
  }
}

id sub_10003876C(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v8 = *a1;
  id v9 = [*a1 processIdentifier];
  id v10 = [v8 dataRepresentation];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_100020250((uint64_t)a1, (uint64_t)v7);
  uint64_t v14 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 0, 1, v14);
  swift_beginAccess();
  sub_1000385AC((uint64_t)v7, v11, v13);
  swift_endAccess();
  swift_beginAccess();
  sub_100040E08(&v20[4], (uint64_t)v9);
  swift_endAccess();
  sub_100038C3C();
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000CB7C(v15, (uint64_t)qword_1000B0110);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 67240192;
    *(_DWORD *)&v20[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Adding PID %{public}d to exclusive frontmost list", v18, 8u);
    swift_slowDealloc();
  }

  return [*(id *)(v2 + 16) startFrontmostForPID:v9];
}

void sub_1000389E0()
{
  uint64_t v1 = v0;
  if (qword_1000AA540 != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0110);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Removing all exclusive frontmost processes", v5, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = &_swiftEmptySetSingleton;
  unint64_t v7 = sub_1000711D8((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  *(void *)(v1 + 48) = v7;
  swift_bridgeObjectRelease();
  int64_t v8 = 0;
  uint64_t v9 = v6 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v6 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_8;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v13) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v9 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_8:
    [*(id *)(v1 + 16) stopFrontmostForPID:*(unsigned int *)(*(void *)(v6 + 48) + 4 * v15)];
  }
  int64_t v18 = v16 + 3;
  if (v18 < v13)
  {
    unint64_t v17 = *(void *)(v9 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        int64_t v8 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_26;
        }
        if (v8 >= v13) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v8);
        ++v18;
        if (v17) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v18;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  sub_100038C3C();
}

void sub_100038C3C()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v0 + 56);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      long long v24 = _swiftEmptyArrayStorage;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = sub_1000633EC(v2);
      uint64_t v6 = v5;
      char v8 = v7 & 1;
      while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v2 + 32))
      {
        if (((*(void *)(v2 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          goto LABEL_19;
        }
        if (*(_DWORD *)(v2 + 36) != v6) {
          goto LABEL_20;
        }
        [objc_allocWithZone((Class)NSNumber) initWithInt:*(unsigned int *)(*(void *)(v2 + 48) + 4 * v4)];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v9 = sub_100063490(v4, v6, v8 & 1, v2);
        uint64_t v4 = v9;
        uint64_t v6 = v10;
        char v8 = v11 & 1;
        if (!--v3)
        {
          sub_1000198CC(v9, v10, v11 & 1);
          unint64_t v12 = v24;
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v12 = _swiftEmptyArrayStorage;
LABEL_11:
      sub_100039070((unint64_t)v12);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v14 = String._bridgeToObjectiveC()();
      [v1 setArray:isa forKey:v14];

      long long v24 = 0;
      if ([v1 persistWithError:&v24])
      {
        unint64_t v15 = v24;
        swift_unknownObjectRelease();
        return;
      }
      int64_t v16 = v24;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1000AA540 == -1) {
        goto LABEL_14;
      }
    }
    swift_once();
LABEL_14:
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000CB7C(v17, (uint64_t)qword_1000B0110);
    swift_errorRetain();
    swift_errorRetain();
    int64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      long long v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_getErrorValue();
      uint64_t v21 = sub_100062820(v23);
      sub_1000722AC(v21, v22, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to persist frontmost app scratchpad. Error %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();

      swift_errorRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100039070(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  int64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10004FB1C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10000650C();
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10004FB1C(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_10004FB1C(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_10001059C(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      char v8 = (id *)(a1 + 32);
      sub_10000650C();
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10004FB1C(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_10004FB1C(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_10001059C(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_1000392A4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v9 = _swiftEmptyArrayStorage;
    sub_10004FB1C(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10004FB1C(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10004FB1C(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_10001059C(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1000393CC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAFrontmostAppAssertion()
{
  return self;
}

double sub_100039450@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100072904(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10006DF9C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10001059C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1000480B8(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100039554(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100072930(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10006E184();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100048290(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003964C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100072ADC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10006E9A0();
      uint64_t v11 = v21;
    }
    sub_100006384(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for AEAParticipant(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10002D634(v12 + *(void *)(v20 + 72) * v8, a3);
    sub_10004854C(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    NSString v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for AEAParticipant(0);
    NSString v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1000397DC()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t type metadata accessor for AEAConcreteSignalPrimitives()
{
  return self;
}

uint64_t sub_100039880(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v17 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026CE0(0, &qword_1000AD980);
  sub_100026CE0(0, (unint64_t *)&qword_1000AD988);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

  swift_getObjectType();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  aBlock[4] = sub_100021FC8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_1000A0638;
  NSString v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_1000397DC();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  OS_dispatch_source.resume()();
  return v12;
}

uint64_t sub_100039B18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039B50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100039B60()
{
  return swift_release();
}

unint64_t sub_100039B6C()
{
  unint64_t result = qword_1000AD990;
  if (!qword_1000AD990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD990);
  }
  return result;
}

uint64_t sub_100039BC0()
{
  if (qword_1000AA5C8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B0248;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100039C28()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001AC9C;
  v3[2] = v2;
  return _swift_task_switch(sub_10003CAE4, 0, 0);
}

uint64_t sub_100039CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for AEAExpirationActivation();
  v5[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[25] = v7;
  v5[26] = *(void *)(v7 + 64);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  sub_1000048A0(&qword_1000AFC50);
  v5[29] = swift_task_alloc();
  return _swift_task_switch(sub_100039DE0, 0, 0);
}

uint64_t sub_100039DE0()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  sub_1000091C4(v3 + 32, v0 + 64);
  sub_1000251B8(v3 + *(int *)(v2 + 36), v1);
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v1, 1, v4);
  uint64_t v6 = *(void *)(v0 + 232);
  if (v5 == 1)
  {
    sub_10003474C(*(void *)(v0 + 232));
    uint64_t v39 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 16);
    uint64_t v39 = *(void *)(v6 + 8);
    swift_bridgeObjectRetain();
    sub_10003C8EC(v6, type metadata accessor for AEAParticipant);
  }
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 176);
  long long v40 = *(_OWORD *)(v0 + 160);
  sub_10003C554(*(void *)(v0 + 184), v8);
  sub_1000091C4(v0 + 64, v0 + 104);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  sub_10003C7D8(v8, v15 + v12);
  unint64_t v16 = v15 + v13;
  *(_OWORD *)unint64_t v16 = v40;
  *(void *)(v16 + 16) = v11;
  uint64_t v17 = (void *)(v15 + v14);
  *uint64_t v17 = v39;
  v17[1] = v7;
  sub_1000093C0((long long *)(v0 + 104), v15 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v18 = qword_1000AA568;
  swift_unknownObjectRetain();
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 184);
  uint64_t v21 = type metadata accessor for Logger();
  sub_10000CB7C(v21, (uint64_t)qword_1000B0188);
  sub_10003C554(v20, v19);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void *)(v0 + 216);
  if (v24)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136446210;
    uint64_t v27 = Double.description.getter();
    *(void *)(v0 + 144) = sub_1000722AC(v27, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003C8EC(v25, (uint64_t (*)(void))type metadata accessor for AEAExpirationActivation);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Starting expiration timer -- the session will expire in %{public}s seconds", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10003C8EC(*(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for AEAExpirationActivation);
  }

  uint64_t v29 = *(void *)(v0 + 184);
  uint64_t v30 = *(void **)(v29 + 24);
  double v31 = *(double *)(v29 + 72);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v32 = *(void **)(v0 + 152);
  uint64_t v33 = qword_1000B01B0;
  *(void *)(v0 + 48) = sub_10003C83C;
  *(void *)(v0 + 56) = v15;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = sub_10005E228;
  *(void *)(v0 + 40) = &unk_1000A0750;
  uint64_t v34 = _Block_copy((const void *)(v0 + 16));
  swift_retain();
  swift_release();
  id v35 = [v30 scheduledTimerWithDuration:v33 queue:v34 handler:v31];
  _Block_release(v34);
  void v32[3] = &type metadata for AEAExpirationDeactivation;
  void v32[4] = &off_1000A0868;
  uint64_t v36 = (void *)swift_allocObject();
  *uint64_t v32 = v36;
  swift_release();
  v36[2] = 0xD000000000000024;
  void v36[3] = 0x80000001000879F0;
  v36[4] = 5;
  v36[5] = v35;
  sub_1000048E4(v0 + 64);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_10003A2D8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v10 = sub_1000048A0(&qword_1000ADE90);
  __chkstk_darwin(v10 - 8, v11);
  unint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AEAExpirationActivation();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA568 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000CB7C(v18, (uint64_t)qword_1000B0188);
  sub_10003C554(a1, (uint64_t)v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v30 = v13;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = a5;
    unint64_t v22 = (uint8_t *)v21;
    *(void *)&v35[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 136446210;
    uint64_t v23 = Double.description.getter();
    uint64_t v34 = sub_1000722AC(v23, v24, (uint64_t *)v35);
    unint64_t v13 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003C8EC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AEAExpirationActivation);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "The session expired after %{public}s seconds", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v31;
    swift_slowDealloc();
  }
  else
  {
    sub_10003C8EC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AEAExpirationActivation);
  }

  sub_100039B6C();
  swift_allocError();
  a3();
  swift_errorRelease();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v13, 1, 1, v25);
  sub_1000091C4(v33, (uint64_t)v35);
  type metadata accessor for MainActor();
  uint64_t v26 = v32;
  swift_bridgeObjectRetain();
  uint64_t v27 = static MainActor.shared.getter();
  unint64_t v28 = (void *)swift_allocObject();
  void v28[2] = v27;
  v28[3] = &protocol witness table for MainActor;
  v28[4] = a5;
  v28[5] = v26;
  sub_1000093C0(v35, (uint64_t)(v28 + 6));
  sub_1000689E0((uint64_t)v13, (uint64_t)&unk_1000ADA58, (uint64_t)v28);
  return swift_release();
}

uint64_t sub_10003A654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[12] = v7;
  v5[13] = v6;
  return _swift_task_switch(sub_10003A6EC, v7, v6);
}

uint64_t sub_10003A6EC()
{
  uint64_t v14 = v0;
  unint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = qword_1000AA568;
    swift_bridgeObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    v0[14] = sub_10000CB7C(v3, (uint64_t)qword_1000B0188);
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v11 = v0[9];
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_bridgeObjectRetain();
      v0[8] = sub_1000722AC(v11, v1, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Opening %{public}s because session expired", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000AD6D0 + dword_1000AD6D0);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[15] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10003A980;
    uint64_t v10 = v0[9];
    return v12(v10, v1);
  }
  else
  {
    swift_release();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10003A980()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    os_log_type_t v5 = sub_10003AAFC;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    os_log_type_t v5 = sub_10003AA9C;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10003AA9C()
{
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003AAFC()
{
  uint64_t v11 = v0;
  swift_release();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[9];
    unint64_t v3 = v0[10];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    swift_bridgeObjectRetain();
    v0[5] = sub_1000722AC(v4, v3, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v6 = sub_100062820(v0[3]);
    v0[7] = sub_1000722AC(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to open %{public}s: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10003AD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED6C;
  return sub_100039CD0(a1, a2, a3, a4);
}

unsigned char *storeEnumTagSinglePayload for AEAExpirationActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003AEA4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAExpirationActionError()
{
  return &type metadata for AEAExpirationActionError;
}

unint64_t sub_10003AEE0()
{
  unint64_t result = qword_1000AD998;
  if (!qword_1000AD998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD998);
  }
  return result;
}

uint64_t sub_10003AF34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    long long v9 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 56) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v11(a1 + 32, a2 + 4, v10);
    *(void *)(a1 + 72) = a2[9];
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = (void **)(a1 + v12);
    uint64_t v14 = (void **)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AEAParticipant(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_1000048A0(&qword_1000AFC50);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      os_log_type_t v20 = *v14;
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      uint64_t v38 = v20;
      v13[2] = v14[2];
      *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
      uint64_t v21 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      unint64_t v22 = (char *)v13 + v21;
      uint64_t v23 = (char *)v14 + v21;
      *unint64_t v22 = *((unsigned char *)v14 + v21);
      uint64_t v24 = *(uint64_t *)((char *)v14 + v21 + 16);
      *((void *)v22 + 1) = *(void **)((char *)v14 + v21 + 8);
      *((void *)v22 + 2) = v24;
      uint64_t v25 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v22[v25];
      unint64_t v37 = &v23[v25];
      uint64_t v26 = type metadata accessor for URL();
      uint64_t v27 = *(void *)(v26 - 8);
      unint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      id v29 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28(v37, 1, v26))
      {
        uint64_t v30 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dst, v37, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v37, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      uint64_t v31 = *(int *)(v15 + 20);
      uint64_t v32 = (char *)v13 + v31;
      uint64_t v33 = (char *)v14 + v31;
      *uint64_t v32 = *v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      uint64_t v34 = *(void (**)(void **, void, uint64_t, uint64_t))(v16 + 56);
      swift_bridgeObjectRetain();
      v34(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_10003B260(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(a1 + 32);
  unsigned int v4 = (id *)(a1 + *(int *)(a2 + 36));
  uint64_t v5 = type metadata accessor for AEAParticipant(0);
  uint64_t result = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)v4 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease();
    uint64_t v8 = &v7[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003B3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2 + 32;
  long long v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v11(a1 + 32, v8, v10);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (void **)(a1 + v12);
  uint64_t v14 = (void **)(a2 + v12);
  uint64_t v15 = type metadata accessor for AEAParticipant(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000048A0(&qword_1000AFC50);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v14;
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v36 = v19;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    uint64_t v20 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v21 = (char *)v13 + v20;
    unint64_t v22 = (char *)v14 + v20;
    *uint64_t v21 = *((unsigned char *)v14 + v20);
    uint64_t v23 = *(uint64_t *)((char *)v14 + v20 + 16);
    *((void *)v21 + 1) = *(void **)((char *)v14 + v20 + 8);
    *((void *)v21 + 2) = v23;
    uint64_t v24 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v21[v24];
    id v35 = &v22[v24];
    uint64_t v25 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    id v28 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v35, 1, v25))
    {
      uint64_t v29 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dst, v35, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v35, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    uint64_t v30 = *(int *)(v15 + 20);
    uint64_t v31 = (char *)v13 + v30;
    uint64_t v32 = (char *)v14 + v30;
    *uint64_t v31 = *v32;
    *((void *)v31 + 1) = *((void *)v32 + 1);
    uint64_t v33 = *(void (**)(void **, void, uint64_t, uint64_t))(v16 + 56);
    swift_bridgeObjectRetain();
    v33(v13, 0, 1, v15);
  }
  return a1;
}

void *sub_10003B6B4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_10000E5F4(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AEAParticipant(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_10003C8EC(v7, type metadata accessor for AEAParticipant);
      goto LABEL_7;
    }
    uint64_t v24 = *(void **)v8;
    uint64_t v25 = *(void **)v7;
    *(void *)uint64_t v7 = *(void *)v8;
    id v26 = v24;

    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(void *)(v7 + 16) = *((void *)v8 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v7 + 24) = v8[24];
    uint64_t v27 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v28 = v7 + v27;
    uint64_t v29 = &v8[v27];
    *(unsigned char *)uint64_t v28 = v8[v27];
    *(void *)(v28 + 8) = *(void *)&v8[v27 + 8];
    *(void *)(v28 + 16) = *(void *)&v8[v27 + 16];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v31 = (void *)(v28 + v30);
    uint64_t v32 = &v29[v30];
    uint64_t v33 = type metadata accessor for URL();
    uint64_t v34 = *(void *)(v33 - 8);
    id v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
    uint64_t v49 = v31;
    LODWORD(v31) = v35(v31, 1, v33);
    int v36 = v35(v32, 1, v33);
    if (v31)
    {
      if (!v36)
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v49, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v49, 0, 1, v33);
        goto LABEL_18;
      }
      size_t v37 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v38 = v49;
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 24))(v49, v32, v33);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v34 + 8))(v49, v33);
      size_t v37 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v38 = v49;
    }
    memcpy(v38, v32, v37);
LABEL_18:
    uint64_t v43 = *(int *)(v9 + 20);
    uint64_t v44 = v7 + v43;
    uint64_t v45 = &v8[v43];
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v23 = sub_1000048A0(&qword_1000AFC50);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v48 = *(void **)v8;
  *(void *)uint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *((void *)v8 + 1);
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(unsigned char *)(v7 + 24) = v8[24];
  uint64_t v14 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = &v8[v14];
  *(unsigned char *)uint64_t v15 = v8[v14];
  *(void *)(v15 + 8) = *(void *)&v8[v14 + 8];
  *(void *)(v15 + 16) = *(void *)&v8[v14 + 16];
  uint64_t v17 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v15 + v17);
  long long v47 = &v16[v17];
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  id v21 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20(v47, 1, v18))
  {
    uint64_t v22 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(__dst, v47, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v19 + 16))(__dst, v47, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  uint64_t v39 = *(int *)(v9 + 20);
  uint64_t v40 = v7 + v39;
  uint64_t v41 = &v8[v39];
  *(unsigned char *)uint64_t v40 = *v41;
  *(void *)(v40 + 8) = *((void *)v41 + 1);
  uint64_t v42 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v42(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_10003BBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)(a2 + v7);
  uint64_t v9 = (void *)(a1 + v7);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v10 = type metadata accessor for AEAParticipant(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
  {
    uint64_t v12 = sub_1000048A0(&qword_1000AFC50);
    memcpy(v9, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v8;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v8 + 1);
    *((unsigned char *)v9 + 24) = *((unsigned char *)v8 + 24);
    uint64_t v13 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = (char *)v8 + v13;
    char *v14 = *((unsigned char *)v8 + v13);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)((char *)v8 + v13 + 8);
    uint64_t v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v17 = &v14[v16];
    uint64_t v18 = &v15[v16];
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)((char *)v9 + *(int *)(v10 + 20)) = *(_OWORD *)((char *)v8 + *(int *)(v10 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10003BE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_unknownObjectRelease();
  sub_1000048E4(a1 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for AEAParticipant(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_10003C8EC(v10, type metadata accessor for AEAParticipant);
      goto LABEL_7;
    }
    uint64_t v27 = *(void **)v10;
    *(void *)uint64_t v10 = *(void *)v11;

    uint64_t v28 = *(void *)(v11 + 16);
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(void *)(v10 + 16) = v28;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
    uint64_t v29 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v30 = v10 + v29;
    uint64_t v31 = v11 + v29;
    *(unsigned char *)uint64_t v30 = *(unsigned char *)(v11 + v29);
    uint64_t v32 = *(void *)(v11 + v29 + 16);
    *(void *)(v30 + 8) = *(void *)(v11 + v29 + 8);
    *(void *)(v30 + 16) = v32;
    swift_bridgeObjectRelease();
    uint64_t v33 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v34 = (void *)(v30 + v33);
    id v35 = (void *)(v31 + v33);
    uint64_t v36 = type metadata accessor for URL();
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
    uint64_t v46 = v34;
    LODWORD(v34) = v38(v34, 1, v36);
    int v39 = v38(v35, 1, v36);
    if (v34)
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v37 + 32))(v46, v35, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v46, 0, 1, v36);
        goto LABEL_18;
      }
      size_t v40 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v41 = v46;
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v37 + 40))(v46, v35, v36);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v37 + 8))(v46, v36);
      size_t v40 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v41 = v46;
    }
    memcpy(v41, v35, v40);
LABEL_18:
    uint64_t v42 = *(int *)(v12 + 20);
    uint64_t v43 = v10 + v42;
    uint64_t v44 = v11 + v42;
    *(unsigned char *)uint64_t v43 = *(unsigned char *)v44;
    *(void *)(v43 + 8) = *(void *)(v44 + 8);
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v16)
  {
LABEL_7:
    uint64_t v26 = sub_1000048A0(&qword_1000AFC50);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v10 = *(void *)v11;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
  *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
  uint64_t v17 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v18 = v10 + v17;
  uint64_t v19 = v11 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)(v11 + v17);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v11 + v17 + 8);
  uint64_t v20 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v21 = (void *)(v18 + v20);
  uint64_t v22 = (const void *)(v19 + v20);
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_OWORD *)(v10 + *(int *)(v12 + 20)) = *(_OWORD *)(v11 + *(int *)(v12 + 20));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10003C2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C2D8);
}

uint64_t sub_10003C2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000048A0(&qword_1000AFC50);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10003C38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C3A0);
}

uint64_t sub_10003C3A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000048A0(&qword_1000AFC50);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AEAExpirationActivation()
{
  uint64_t result = qword_1000AD9F8;
  if (!qword_1000AD9F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10003C498()
{
  sub_1000346F4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10003C554(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAExpirationActivation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C5B8()
{
  unint64_t v1 = (int *)(type metadata accessor for AEAExpirationActivation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + v3 + 32);
  uint64_t v5 = (id *)(v0 + v3 + v1[11]);
  uint64_t v6 = type metadata accessor for AEAParticipant(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)v5 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease();
    uint64_t v8 = &v7[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v11 = (((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + v11);

  return _swift_deallocObject(v0, v11 + 40, v2 | 7);
}

uint64_t sub_10003C7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAExpirationActivation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C83C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AEAExpirationActivation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void (**)(void))(v0 + v3 + 8);
  uint64_t v7 = *(void *)(v0 + v3 + 16);
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v4 + 8);

  return sub_10003A2D8(v0 + v2, v5, v6, v7, v8, v9, v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_10003C8EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003C94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003C95C()
{
  return swift_release();
}

uint64_t sub_10003C964()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003C9A4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 48);

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10003C9EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000ED6C;
  return sub_10003A654(a1, v4, v5, v6, v7);
}

ValueMetadata *type metadata accessor for AEAExpirationDeactivation()
{
  return &type metadata for AEAExpirationDeactivation;
}

uint64_t sub_10003CAC4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10003CAE4, 0, 0);
}

uint64_t sub_10003CAE4()
{
  if (qword_1000AA568 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0188);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cancelling expiration timer", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void **)(v0 + 16);

  [v5 cancel];
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

void *sub_10003CEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000091C4(v2 + 16, (uint64_t)v26);
  id v10 = [self assessmentAgentPolicyStoreDirectoryURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = sub_100019D8C((uint64_t)v26, v27);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v13;
  uint64_t v16 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v25[3] = v16;
  v25[4] = &off_10009F5C0;
  v25[0] = v15;
  _s17WritingScratchpadCMa();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = sub_100019D8C((uint64_t)v25, v16);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (void *)((char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = *v20;
  v17[5] = v16;
  v17[6] = &off_10009F5C0;
  v17[2] = v22;
  *(void *)((char *)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_backing) = _swiftEmptyDictionarySingleton;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))((uint64_t)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL, 1, 1, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))((uint64_t)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_directoryURL, v9, v5);
  uint64_t v23 = (void *)((char *)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_fileName);
  void *v23 = a1;
  v23[1] = a2;
  swift_bridgeObjectRetain();
  sub_1000048E4((uint64_t)v25);
  sub_1000048E4((uint64_t)v26);
  return v17;
}

uint64_t sub_10003D228(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000091C4(v2 + 16, (uint64_t)v25);
  id v9 = [self assessmentAgentPolicyStoreDirectoryURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = sub_100019D8C((uint64_t)v25, v26);
  __chkstk_darwin(v10, v10);
  uint64_t v12 = (void *)((char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = *v12;
  uint64_t v15 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  void v24[3] = v15;
  void v24[4] = &off_10009F5C0;
  v24[0] = v14;
  _s17ReadingScratchpadCMa();
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = sub_100019D8C((uint64_t)v24, v15);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v19;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10003D6EC(v21, v8, a1, a2, v16);
  sub_1000048E4((uint64_t)v24);
  sub_1000048E4((uint64_t)v25);
  return v22;
}

uint64_t sub_10003D690()
{
  sub_1000048E4(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAPolicyStore()
{
  return self;
}

uint64_t sub_10003D6EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v22[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  uint64_t v24 = &off_10009F5C0;
  v22[0] = a1;
  *(void *)(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL, 1, 1, v10);
  sub_1000091C4((uint64_t)v22, a5 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_directoryURL, a2, v10);
  uint64_t v15 = (void *)(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_fileName);
  *uint64_t v15 = a3;
  v15[1] = a4;
  uint64_t v16 = sub_100006340(v22, v23);
  sub_10007145C((uint64_t)v14);
  uint64_t v17 = *(void **)(*v16 + 16);
  URL.path.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(a4) = [v17 fileExistsAtPath:v18];

  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(a2, v10);
  v19(v14, v10);
  if (!a4)
  {
    swift_release();
    a5 = 0;
  }
  sub_1000048E4((uint64_t)v22);
  return a5;
}

uint64_t sub_10003D8EC()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  os_log_type_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_10003DAEC();
  static DispatchQoS.userInteractive.getter();
  v5[1] = &_swiftEmptyArrayStorage;
  sub_10003DB2C();
  sub_1000048A0(&qword_1000ADB40);
  sub_10003DB84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1000B01B0 = result;
  return result;
}

unint64_t sub_10003DAEC()
{
  unint64_t result = qword_1000AD988;
  if (!qword_1000AD988)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000AD988);
  }
  return result;
}

unint64_t sub_10003DB2C()
{
  unint64_t result = qword_1000ADB38;
  if (!qword_1000ADB38)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ADB38);
  }
  return result;
}

unint64_t sub_10003DB84()
{
  unint64_t result = qword_1000ADB48;
  if (!qword_1000ADB48)
  {
    sub_1000054DC(&qword_1000ADB40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ADB48);
  }
  return result;
}

__n128 initializeWithTake for AEAFailingDeactivationAction(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for AEAFailingDeactivationAction()
{
  return &type metadata for AEAFailingDeactivationAction;
}

uint64_t sub_10003DC18(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return _swift_task_switch(sub_10003DC38, 0, 0);
}

uint64_t sub_10003DC38()
{
  uint64_t v11 = v0;
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0110);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_1000722AC(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Deactivation succeeding in recovery", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10003DE2C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *BOOL v4 = v1;
  v4[1] = sub_10001AC9C;
  v4[3] = v2;
  v4[4] = v3;
  return _swift_task_switch(sub_10003DC38, 0, 0);
}

uint64_t sub_10003DED8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return _swift_task_switch(sub_10003DEF8, 0, 0);
}

uint64_t sub_10003DEF8()
{
  uint64_t v11 = v0;
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0110);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_1000722AC(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Deactivation failing here", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_10003E84C();
  swift_allocError();
  swift_willThrow();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10003E110()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *BOOL v4 = v1;
  v4[1] = sub_10000ED6C;
  v4[3] = v2;
  v4[4] = v3;
  return _swift_task_switch(sub_10003DEF8, 0, 0);
}

uint64_t sub_10003E1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 40) = a8;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  return _swift_task_switch(sub_10003E250, 0, 0);
}

uint64_t sub_10003E250()
{
  if (*(unsigned char *)(v0 + 40) != 1)
  {
    uint64_t v7 = *(void *)(v0 + 24);
    *(void *)(v7 + 32) = 0;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    goto LABEL_5;
  }
  uint64_t v1 = *(void **)(v0 + 32);
  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_10000E198(1);
  *(void *)(v0 + 16) = 0;
  unsigned int v2 = [v1 persistWithError:v0 + 16];
  uint64_t v3 = *(void **)(v0 + 16);
  if (v2)
  {
    BOOL v4 = *(uint64_t **)(v0 + 24);
    v4[3] = (uint64_t)&type metadata for AEAFailingDeactivation;
    v4[4] = (uint64_t)&off_1000A0AC8;
    uint64_t v5 = swift_allocObject();
    *BOOL v4 = v5;
    id v6 = v3;
    swift_unknownObjectRelease();
    *(void *)(v5 + 16) = 0xD000000000000036;
    *(void *)(v5 + 24) = 0x8000000100087AC0;
    *(void *)(v5 + 32) = 4;
    *(unsigned char *)(v5 + 40) = 0;
LABEL_5:
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  id v9 = v3;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
  return v8();
}

void sub_10003E428(void *a1@<X8>)
{
  a1[3] = &type metadata for AEASuccedingDeactivation;
  a1[4] = &off_1000A0AA8;
  *a1 = 0xD00000000000003FLL;
  a1[1] = 0x8000000100087B00;
  a1[2] = 4;
}

uint64_t sub_10003E464(uint64_t a1, uint64_t a2)
{
  char v6 = *(unsigned char *)(v2 + 24);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_10001AC9C;
  *(unsigned char *)(v7 + 40) = v6;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  return _swift_task_switch(sub_10003E250, 0, 0);
}

uint64_t sub_10003E524()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

void *sub_10003E560(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AEASuccedingDeactivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for AEASuccedingDeactivation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARunningBoardApplication(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARunningBoardApplication(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASuccedingDeactivation()
{
  return &type metadata for AEASuccedingDeactivation;
}

uint64_t _s15assessmentagent28AEAFailingDeactivationActionVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s15assessmentagent28AEAFailingDeactivationActionVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t _s15assessmentagent28AEAFailingDeactivationActionVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t _s15assessmentagent28AEAFailingDeactivationActionVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10003E7F8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAFailingDeactivation()
{
  return &type metadata for AEAFailingDeactivation;
}

unint64_t sub_10003E84C()
{
  unint64_t result = qword_1000ADB78;
  if (!qword_1000ADB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000ADB78);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AEAFailingDeactivationActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003E93CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAFailingDeactivationActionError()
{
  return &type metadata for AEAFailingDeactivationActionError;
}

unint64_t sub_10003E978()
{
  unint64_t result = qword_1000ADB88;
  if (!qword_1000ADB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ADB88);
  }
  return result;
}

void destroy for AEARunningBoardApplication(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *_s15assessmentagent26AEARunningBoardApplicationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unsigned int v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for AEARunningBoardApplication(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AEARunningBoardApplication(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for AEARunningBoardApplication()
{
  return &type metadata for AEARunningBoardApplication;
}

Swift::Int sub_10003EB04()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_10003EB80()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v2 = v1;
  NSObject.hash(into:)();
}

Swift::Int sub_10003EC04()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_10003EC7C(uint64_t *a1@<X8>)
{
  id v3 = [*(id *)(v1 + 16) dataRepresentation];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t sub_10003ECD4(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  sub_100020210();
  return static NSObject.== infix(_:_:)() & 1;
}

unint64_t sub_10003ED4C()
{
  unint64_t result = qword_1000ADB90;
  if (!qword_1000ADB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000ADB90);
  }
  return result;
}

void sub_10003EDA0()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B01B8 = v4;
  unk_1000B01C0 = v6;
}

void sub_10003EEBC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B01C8 = v4;
  unk_1000B01D0 = v6;
}

void sub_10003EFD8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B01D8 = v4;
  unk_1000B01E0 = v6;
}

void sub_10003F0F4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B01E8 = v4;
  unk_1000B01F0 = v6;
}

void sub_10003F20C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B01F8 = v4;
  unk_1000B0200 = v6;
}

void sub_10003F324()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0208 = v4;
  unk_1000B0210 = v6;
}

void sub_10003F440()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0218 = v4;
  unk_1000B0220 = v6;
}

void sub_10003F55C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0228 = v4;
  unk_1000B0230 = v6;
}

void sub_10003F678()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0238 = v4;
  unk_1000B0240 = v6;
}

void sub_10003F794()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0248 = v4;
  unk_1000B0250 = v6;
}

void sub_10003F8B0()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0258 = v4;
  unk_1000B0260 = v6;
}

void sub_10003F9C8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0268 = v4;
  unk_1000B0270 = v6;
}

void sub_10003FAE4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0278 = v4;
  unk_1000B0280 = v6;
}

void sub_10003FC00()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  qword_1000B0288 = v4;
  unk_1000B0290 = v6;
}

id sub_10003FD1C()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  sub_1000685F0();
  swift_endAccess();
  swift_beginAccess();
  *(void *)(v0 + 32) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  if (qword_1000AA558 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0158);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Removing all windows from assessment mode", v5, 2u);
    swift_slowDealloc();
  }

  return [*(id *)(v1 + 16) removeAllWindowsFromAssessmentMode];
}

uint64_t sub_10003FE5C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAWindowServerAssertion()
{
  return self;
}

void sub_10003FED0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = &_swiftEmptySetSingleton;
  sub_1000048A0(&qword_1000ADC90);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100080BE0;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a3);
  uint64_t v11 = _getErrorEmbeddedNSError<A>(_:)();
  if (v11)
  {
    uint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v12 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14, v9, a3);
    uint64_t v13 = *(void *)(v10 + 16);
  }
  *(void *)(v10 + 32) = v12;
  v27[1] = v10;
  uint64_t v28 = v10 + 32;
  if (!v13)
  {
LABEL_20:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v15 = 0;
  unint64_t v16 = (2 * v13) | 1;
  while (v15 < (uint64_t)(v16 >> 1))
  {
    if (v13 <= v15) {
      goto LABEL_24;
    }
    if (v16 >> 1 < v13) {
      goto LABEL_25;
    }
    uint64_t v17 = *(void *)(v28 + 8 * v15++);
    unint64_t v16 = v16 & 1 | (2 * v13);
    uint64_t v29 = v15;
    unint64_t v30 = v16;
    swift_errorRetain();
    NSString v18 = (void *)_convertErrorToNSError(_:)();
    uint64_t v19 = v31;
    if (v31[2])
    {
      uint64_t v20 = static Hasher._hash(seed:_:)();
      uint64_t v21 = -1 << *((unsigned char *)v19 + 32);
      unint64_t v22 = v20 & ~v21;
      if ((*(void *)((char *)v19 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v22))
      {
        uint64_t v23 = v19[6];
        if (*(void **)(v23 + 8 * v22) == v18)
        {
LABEL_6:

          swift_errorRelease();
          goto LABEL_7;
        }
        uint64_t v24 = ~v21;
        while (1)
        {
          unint64_t v22 = (v22 + 1) & v24;
          if (((*(void *)((char *)v19 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v22) & 1) == 0) {
            break;
          }
          if (*(void **)(v23 + 8 * v22) == v18) {
            goto LABEL_6;
          }
        }
      }
    }
    if (a1(v17))
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      return;
    }
    sub_100040AE0(v27, (uint64_t)v18);
    id v25 = [v18 underlyingErrors];
    sub_1000048A0(&qword_1000ACAA0);
    uint64_t v26 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100040220(v26);
    swift_errorRelease();

    uint64_t v15 = v29;
    unint64_t v16 = v30;
LABEL_7:
    uint64_t v13 = v16 >> 1;
    if (v15 == v16 >> 1) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

void *sub_100040220(void *a1)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  uint64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v6 = a1[2];
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v7 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v8 = (void *)swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8[2];
  if ((void *)(v7 + 8 * v3 + 8 * v4) != &v8[v9 + 4])
  {
    swift_release();
LABEL_7:
    uint64_t v10 = v4;
    goto LABEL_9;
  }
  unint64_t v11 = v8[3];
  swift_release();
  uint64_t v12 = (v11 >> 1) - v9;
  BOOL v13 = __OFADD__(v4, v12);
  uint64_t v10 = v4 + v12;
  if (v13)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_9:
  uint64_t v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v15 = 2 * v10;
    if (v15 > v14) {
      uint64_t v14 = v15;
    }
  }
  sub_1000441A4(v14);
  uint64_t v17 = v1[2];
  unint64_t v16 = v1[3];
  uint64_t v18 = (v16 >> 1) - v17;
  if (__OFSUB__(v16 >> 1, v17)) {
    goto LABEL_41;
  }
  unint64_t v19 = v1[1] + 8 * v17 + 8 * v18;
  if ((v16 & 1) == 0)
  {
LABEL_20:
    uint64_t v22 = v18;
    goto LABEL_22;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v20 = (void *)swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  uint64_t v21 = v20[2];
  if ((void *)v19 != &v20[v21 + 4])
  {
    swift_release();
    goto LABEL_20;
  }
  unint64_t v23 = v20[3];
  swift_release();
  uint64_t v24 = (v23 >> 1) - v21;
  BOOL v13 = __OFADD__(v18, v24);
  uint64_t v22 = v18 + v24;
  if (v13)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_22:
  uint64_t v25 = v22 - v18;
  if (__OFSUB__(v22, v18))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v26 = a1[2];
  if (v26)
  {
    if (v25 >= v6)
    {
      if ((unint64_t)(a1 + 4) < v19 + 8 * v6 && v19 < (unint64_t)&a1[v6 + 4]) {
        goto LABEL_49;
      }
      sub_1000048A0(&qword_1000ACAA0);
      swift_arrayInitWithCopy();
      if (v6 <= 0) {
        goto LABEL_32;
      }
      if (!__OFADD__(v18, v6))
      {
        sub_100043DA0((void *)(v18 + v6));
        goto LABEL_32;
      }
      goto LABEL_46;
    }
    goto LABEL_44;
  }
  if (v6 > 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v6 = 0;
LABEL_32:
  if (v6 == v25)
  {
    return sub_100043E58(a1, v26);
  }
  else
  {
    return (void *)swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000404DC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100041DFC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10004068C(uint64_t a1, void **a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = a1;
  uint64_t v5 = type metadata accessor for AEAParticipant(0);
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  BOOL v13 = (char *)&v46 - v12;
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v46 - v16;
  __chkstk_darwin(v15, v18);
  long long v47 = (id *)((char *)&v46 - v19);
  uint64_t v20 = *v2;
  Hasher.init(_seed:)();
  uint64_t v21 = *a2;
  swift_bridgeObjectRetain();
  id v22 = [v21 dataRepresentation];
  uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  Data.hash(into:)();
  sub_100006384(v23, v25);
  swift_bridgeObjectRetain();
  Swift::UInt v26 = Bool.hashValue.getter();
  Hasher._combine(_:)(v26);
  uint64_t v50 = (char *)&type metadata for Any + 8;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v28 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v28);
  swift_bridgeObjectRelease();
  Swift::Int v29 = Hasher._finalize()();
  uint64_t v30 = -1 << *(unsigned char *)(v20 + 32);
  unint64_t v31 = v29 & ~v30;
  uint64_t v53 = v20 + 56;
  if ((*(void *)(v20 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31))
  {
    uint64_t v46 = v3;
    uint64_t v51 = ~v30;
    unint64_t v54 = sub_100020210();
    uint64_t v52 = *(void *)(v52 + 72);
    uint64_t v32 = v20;
    uint64_t v49 = v20;
    do
    {
      unint64_t v33 = v52 * v31;
      sub_100020250(*(void *)(v32 + 48) + v52 * v31, (uint64_t)v17);
      char v34 = static NSObject.== infix(_:_:)();
      sub_100020250((uint64_t)v17, (uint64_t)v13);
      sub_100020250((uint64_t)a2, (uint64_t)v9);
      if ((v34 & 1) != 0 && v13[*(int *)(v5 + 20)] == v9[*(int *)(v5 + 20)])
      {
        id v35 = v13;
        uint64_t v36 = v9;
        uint64_t v37 = v5;
        uint64_t v38 = a2;
        Class v39 = Dictionary._bridgeToObjectiveC()().super.isa;
        Class v40 = Dictionary._bridgeToObjectiveC()().super.isa;
        char v41 = static NSObject.== infix(_:_:)();

        a2 = v38;
        uint64_t v5 = v37;
        uint64_t v9 = v36;
        BOOL v13 = v35;
        uint64_t v32 = v49;

        sub_1000202B4((uint64_t)v13);
        sub_1000202B4((uint64_t)v9);
        sub_1000202B4((uint64_t)v17);
        if (v41)
        {
          swift_bridgeObjectRelease();
          sub_1000202B4((uint64_t)a2);
          sub_100020250(*(void *)(*v46 + 48) + v33, v48);
          return 0;
        }
      }
      else
      {
        sub_1000202B4((uint64_t)v13);
        sub_1000202B4((uint64_t)v9);
        sub_1000202B4((uint64_t)v17);
      }
      unint64_t v31 = (v31 + 1) & v51;
    }
    while (((*(void *)(v53 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) != 0);
    swift_bridgeObjectRelease();
    uint64_t v44 = v47;
    uint64_t v43 = v48;
    uint64_t v3 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = v47;
    uint64_t v43 = v48;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100020250((uint64_t)a2, (uint64_t)v44);
  uint64_t v55 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100041F98(v44, v31, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v55;
  swift_bridgeObjectRelease();
  sub_10002D634((uint64_t)a2, v43);
  return 1;
}

uint64_t sub_100040AE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000423A0(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100040BDC(Swift::Int *a1, Swift::Int a2, Swift::Int a3, void *a4)
{
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v9 = a4;
  NSObject.hash(into:)();

  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    while (1)
    {
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 24 * v12);
      uint64_t v17 = (void *)v16[2];
      BOOL v18 = *v16 == a2 && v16[1] == a3;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_100020210();
        swift_bridgeObjectRetain();
        id v14 = v17;
        char v15 = static NSObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        if (v15) {
          break;
        }
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v22 = (Swift::Int *)(*(void *)(*v26 + 48) + 24 * v12);
    Swift::Int v23 = v22[1];
    unint64_t v24 = (void *)v22[2];
    *a1 = *v22;
    a1[1] = v23;
    a1[2] = (Swift::Int)v24;
    swift_bridgeObjectRetain();
    id v25 = v24;
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v26;
    uint64_t *v26 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    id v20 = v9;
    sub_1000424C4(a2, a3, v20, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v26 = v28;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    uint64_t result = 1;
    a1[2] = (Swift::Int)v20;
  }
  return result;
}

uint64_t sub_100040E08(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000426C4(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100040F0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0(&qword_1000AD088);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000411EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (id *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *v0;
  sub_1000048A0(qword_1000AD338);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v7 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v10 = (void *)(v7 + 56);
    uint64_t v11 = -1;
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    unint64_t v12 = v11 & *(void *)(v7 + 56);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v15 << 6);
      }
      else
      {
        int64_t v18 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_22;
        }
        unint64_t v19 = v10[v18];
        ++v15;
        if (!v19)
        {
          int64_t v15 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_22;
          }
          unint64_t v19 = v10[v15];
          if (!v19)
          {
            int64_t v15 = v18 + 2;
            if (v18 + 2 >= v13) {
              goto LABEL_22;
            }
            unint64_t v19 = v10[v15];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_22:
                swift_release();
                uint64_t v21 = 1 << *(unsigned char *)(v7 + 32);
                if (v21 > 63) {
                  bzero((void *)(v7 + 56), ((unint64_t)(v21 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v10 = -1 << v21;
                }
                *(void *)(v7 + 16) = 0;
                break;
              }
              unint64_t v19 = v10[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v15 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_28;
                  }
                  if (v15 >= v13) {
                    goto LABEL_22;
                  }
                  unint64_t v19 = v10[v15];
                  ++v20;
                  if (v19) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v15 = v20;
            }
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
      }
      sub_10002D634(*(void *)(v7 + 48) + *(void *)(v3 + 72) * v17, (uint64_t)v6);
      uint64_t result = sub_100041C7C(v6, v8);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

uint64_t sub_100041448()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0(&qword_1000ADC98);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  uint64_t *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000416CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0(&qword_1000AD330);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = *(void *)(v2 + 48) + 24 * v15;
      uint64_t v20 = *(void *)v19;
      long long v31 = *(_OWORD *)(v19 + 8);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      id v21 = *((id *)&v31 + 1);
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = *(void *)(v4 + 48) + 24 * v12;
      *(void *)uint64_t v13 = v20;
      *(_OWORD *)(v13 + 8) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000419F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0((uint64_t *)&unk_1000ADCA0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  uint64_t *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100041C7C(id *a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  id v4 = [*a1 dataRepresentation];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  Data.hash(into:)();
  sub_100006384(v5, v7);
  uint64_t v8 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRetain();
  Swift::UInt v9 = Bool.hashValue.getter();
  Hasher._combine(_:)(v9);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v11 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v11);
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  unint64_t v12 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
  uint64_t result = sub_10002D634((uint64_t)a1, *(void *)(a2 + 48) + *(void *)(*(void *)(v8 - 8) + 72) * v12);
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_100041DFC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100040F0C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000427EC();
      goto LABEL_22;
    }
    sub_1000430E8();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100041F98(id *a1, unint64_t a2, char a3)
{
  uint64_t v48 = type metadata accessor for AEAParticipant(0);
  uint64_t v7 = *(void *)(v48 - 8);
  uint64_t v9 = __chkstk_darwin(v48, v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  int64_t v15 = (char *)&v43 - v14;
  __chkstk_darwin(v13, v16);
  int v18 = (char *)&v43 - v17;
  unint64_t v19 = *(void *)(*v3 + 16);
  unint64_t v20 = *(void *)(*v3 + 24);
  uint64_t v44 = v7;
  uint64_t v45 = v3;
  if (v20 > v19 && (a3 & 1) != 0) {
    goto LABEL_17;
  }
  if (a3)
  {
    sub_1000411EC();
  }
  else
  {
    if (v20 > v19)
    {
      sub_1000429A0();
      goto LABEL_17;
    }
    sub_100043398();
  }
  uint64_t v21 = *v3;
  Hasher.init(_seed:)();
  id v22 = [*a1 dataRepresentation];
  BOOL v23 = a1;
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  Data.hash(into:)();
  sub_100006384(v24, v26);
  long long v47 = v23;
  swift_bridgeObjectRetain();
  Swift::UInt v27 = Bool.hashValue.getter();
  Hasher._combine(_:)(v27);
  uint64_t v46 = (char *)&type metadata for Any + 8;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Swift::UInt v29 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v29);
  swift_bridgeObjectRelease();
  Swift::Int v30 = Hasher._finalize()();
  uint64_t v31 = -1 << *(unsigned char *)(v21 + 32);
  a2 = v30 & ~v31;
  uint64_t v49 = v21 + 56;
  uint64_t v50 = v21;
  if (((*(void *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v32 = ~v31;
  unint64_t v51 = sub_100020210();
  uint64_t v33 = *(void *)(v7 + 72);
  a1 = v47;
  while (1)
  {
    sub_100020250(*(void *)(v50 + 48) + v33 * a2, (uint64_t)v18);
    char v34 = static NSObject.== infix(_:_:)();
    sub_100020250((uint64_t)v18, (uint64_t)v15);
    sub_100020250((uint64_t)a1, (uint64_t)v11);
    if ((v34 & 1) != 0 && v15[*(int *)(v48 + 20)] == v11[*(int *)(v48 + 20)]) {
      break;
    }
    sub_1000202B4((uint64_t)v15);
    sub_1000202B4((uint64_t)v11);
    sub_1000202B4((uint64_t)v18);
LABEL_11:
    a2 = (a2 + 1) & v32;
    if (((*(void *)(v49 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
      goto LABEL_17;
    }
  }
  Class v35 = Dictionary._bridgeToObjectiveC()().super.isa;
  Class v36 = Dictionary._bridgeToObjectiveC()().super.isa;
  char v37 = static NSObject.== infix(_:_:)();

  a1 = v47;
  sub_1000202B4((uint64_t)v15);
  sub_1000202B4((uint64_t)v11);
  sub_1000202B4((uint64_t)v18);
  if ((v37 & 1) == 0) {
    goto LABEL_11;
  }
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_16:
  a1 = v47;
LABEL_17:
  uint64_t v38 = *v45;
  *(void *)(*v45 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10002D634((uint64_t)a1, *(void *)(v38 + 48) + *(void *)(v44 + 72) * a2);
  uint64_t v40 = *(void *)(v38 + 16);
  BOOL v41 = __OFADD__(v40, 1);
  uint64_t v42 = v40 + 1;
  if (v41) {
    __break(1u);
  }
  else {
    *(void *)(v38 + 16) = v42;
  }
  return result;
}

uint64_t sub_1000423A0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100041448();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100042BDC();
      goto LABEL_14;
    }
    sub_1000435C0();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_1000424C4(Swift::Int result, Swift::Int a2, void *a3, unint64_t a4, char a5)
{
  Swift::Int v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  if (a5)
  {
    sub_1000416CC();
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (Swift::Int)sub_100042D74();
      goto LABEL_18;
    }
    sub_100043824();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v13 = a3;
  NSObject.hash(into:)();

  uint64_t result = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a4 = result & ~v14;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v15 = ~v14;
    do
    {
      int v18 = (void *)(*(void *)(v12 + 48) + 24 * a4);
      unint64_t v19 = (void *)v18[2];
      BOOL v20 = *v18 == v9 && v18[1] == a2;
      if (v20 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        sub_100020210();
        swift_bridgeObjectRetain();
        id v16 = v19;
        char v17 = static NSObject.== infix(_:_:)();

        uint64_t result = swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_21;
        }
      }
      a4 = (a4 + 1) & v15;
    }
    while (((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_18:
  uint64_t v21 = *v26;
  *(void *)(*v26 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  id v22 = (Swift::Int *)(*(void *)(v21 + 48) + 24 * a4);
  *id v22 = v9;
  v22[1] = a2;
  uint64_t v22[2] = (Swift::Int)a3;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_21:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000426C4(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000419F4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100042F50();
      goto LABEL_14;
    }
    sub_100043B38();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_1000427EC()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AD088);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000429A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000048A0(qword_1000AD338);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v11 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v11 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v11 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    sub_100020250(*(void *)(v7 + 48) + v20, (uint64_t)v6);
    uint64_t result = (void *)sub_10002D634((uint64_t)v6, *(void *)(v9 + 48) + v20);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v17) {
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v11 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100042BDC()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000ADC98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100042D74()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AD330);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v9);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v22 = *(_OWORD *)(v17 + 8);
    *(void *)uint64_t v18 = *(void *)v17;
    *(_OWORD *)(v18 + 8) = v22;
    swift_bridgeObjectRetain();
    id result = *((id *)&v22 + 1);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v13) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100042F50()
{
  uint64_t v1 = v0;
  sub_1000048A0((uint64_t *)&unk_1000ADCA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000430E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0(&qword_1000AD088);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100043398()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (id *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *v0;
  sub_1000048A0(qword_1000AD338);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_24:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = v7 + 56;
  uint64_t v11 = -1;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  unint64_t v12 = v11 & *(void *)(v7 + 56);
  int64_t v13 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_6;
    }
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v13) {
      goto LABEL_22;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v18);
    ++v15;
    if (!v19)
    {
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_22;
      }
      unint64_t v19 = *(void *)(v10 + 8 * v15);
      if (!v19)
      {
        int64_t v15 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_22;
        }
        unint64_t v19 = *(void *)(v10 + 8 * v15);
        if (!v19) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_6:
    sub_100020250(*(void *)(v7 + 48) + *(void *)(v3 + 72) * v17, (uint64_t)v6);
    uint64_t result = sub_100041C7C(v6, v8);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_22:
    uint64_t result = swift_release_n();
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19)
  {
    int64_t v15 = v20;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v13) {
      goto LABEL_22;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000435C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0(&qword_1000ADC98);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100043824()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0(&qword_1000AD330);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v29 = v0;
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v31) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v30 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    long long v32 = *(_OWORD *)(v18 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    id v20 = *((id *)&v32 + 1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v21 = v20;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v8 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(_OWORD *)(v12 + 8) = v32;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v30 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100043B38()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000048A0((uint64_t *)&unk_1000ADCA0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = static Hasher._hash(seed:bytes:count:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_100043DA0(void *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = (void *)swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = _swiftEmptyArrayStorage;
  }
  uint64_t v8 = result[2];
  BOOL v5 = __OFADD__(v8, v7);
  unint64_t v9 = &v7[v8];
  if (v5) {
    goto LABEL_13;
  }
  result[2] = v9;
  uint64_t result = (void *)swift_release();
  int64_t v10 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * (void)v10);
  return result;
}

void *sub_100043E58(void *result, unint64_t a2)
{
  uint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  BOOL v5 = (void *)((v3 >> 1) - v4);
  if (__OFSUB__(v3 >> 1, v4)) {
    goto LABEL_52;
  }
  unint64_t v6 = result[2];
  if (v6 == a2)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return (void *)swift_errorRelease();
  }
  if (v6 <= a2) {
    goto LABEL_53;
  }
  unint64_t v33 = a2 + 1;
  BOOL v27 = result + 4;
  uint64_t v28 = result;
  uint64_t v7 = result[a2 + 4];
  uint64_t result = (void *)swift_errorRetain();
  unint64_t v26 = 1 - v6;
  unint64_t v29 = v6;
  while (1)
  {
    uint64_t v8 = (void *)((char *)v5 + 1);
    if (__OFADD__(v5, 1)) {
      break;
    }
    char v34 = sub_10004442C(v5, (uint64_t)v5 + 1, *v2, v2[1], v4, v3);
    unint64_t v9 = sub_100044630();
    uint64_t v32 = (uint64_t)v5;
    sub_10004464C((uint64_t *)&v34, (uint64_t)v5, 0, (void (*)(uint64_t, uint64_t))v9);
    swift_release();
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    unint64_t v10 = (v3 >> 1) - v4;
    if (__OFSUB__(v3 >> 1, v4)) {
      goto LABEL_46;
    }
    uint64_t v11 = v7;
    uint64_t v12 = v2[1];
    unint64_t v31 = v3 >> 1;
    if ((v3 & 1) == 0) {
      goto LABEL_14;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    unint64_t v13 = (void *)swift_dynamicCastClass();
    if (!v13)
    {
      swift_unknownObjectRelease();
      unint64_t v13 = _swiftEmptyArrayStorage;
    }
    uint64_t v14 = v13[2];
    if ((void *)(v12 + 8 * v4 + 8 * v10) != &v13[v14 + 4])
    {
      uint64_t result = (void *)swift_release();
LABEL_14:
      uint64_t v15 = (v3 >> 1) - v4;
      goto LABEL_16;
    }
    unint64_t v16 = v13[3];
    uint64_t result = (void *)swift_release();
    uint64_t v17 = (v16 >> 1) - v14;
    uint64_t v15 = v10 + v17;
    if (__OFADD__(v10, v17)) {
      goto LABEL_50;
    }
LABEL_16:
    BOOL v5 = (void *)v32;
    if (v32 >= v15)
    {
      uint64_t v7 = v11;
      BOOL v18 = __OFSUB__(v32, v10);
      uint64_t v19 = (char *)(v32 - v10);
      if (v18) {
        goto LABEL_47;
      }
    }
    else
    {
      *(void *)(v12 + 8 * v4 + 8 * v32) = v11;
      if (v33 == v6)
      {
        uint64_t v7 = 0;
        BOOL v5 = v8;
        unint64_t v33 = v6;
        BOOL v18 = __OFSUB__(v8, v10);
        uint64_t v19 = (char *)v8 - v10;
        if (v18) {
          goto LABEL_47;
        }
      }
      else
      {
        if ((v33 & 0x8000000000000000) != 0) {
          goto LABEL_51;
        }
        uint64_t v30 = v4;
        if (v33 >= v28[2])
        {
LABEL_44:
          __break(1u);
          break;
        }
        uint64_t v20 = 0;
        uint64_t v22 = v12 + 8 * v32 + 8 * v4 + 8;
        while (1)
        {
          unint64_t v21 = &v27[v33];
          if (!(v32 - v15 + 1 + v20))
          {
            v33 += v20 + 1;
            uint64_t v7 = v21[v20];
            goto LABEL_33;
          }
          *(void *)(v22 + 8 * v20) = v21[v20];
          if (!(v26 + v33 + v20)) {
            break;
          }
          uint64_t result = (void *)swift_errorRetain();
          ++v20;
          if (v33 + v20 >= v28[2]) {
            goto LABEL_44;
          }
        }
        uint64_t v7 = 0;
        uint64_t v15 = v32 + v20 + 2;
        unint64_t v33 = v29;
LABEL_33:
        uint64_t result = (void *)swift_errorRetain();
        BOOL v5 = (void *)v15;
        unint64_t v6 = v29;
        uint64_t v4 = v30;
        BOOL v18 = __OFSUB__(v15, v10);
        uint64_t v19 = (char *)(v15 - v10);
        if (v18) {
          goto LABEL_47;
        }
      }
    }
    if (v19)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      uint64_t result = (void *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        uint64_t result = _swiftEmptyArrayStorage;
      }
      uint64_t v23 = result[2];
      BOOL v18 = __OFADD__(v23, v19);
      BOOL v24 = &v19[v23];
      if (v18) {
        goto LABEL_48;
      }
      result[2] = v24;
      uint64_t result = (void *)swift_release();
      uint64_t v25 = &v19[v31];
      if (__OFADD__(v31, v19)) {
        goto LABEL_49;
      }
      if (((unint64_t)v25 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_41;
      }
      unint64_t v3 = v3 & 1 | (2 * (void)v25);
      v2[3] = v3;
    }
    if (!v7) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t sub_1000441A4(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull(), *(void *)v1 = v4, (result & 1) == 0))
  {
    unint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v9 = *(void **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (void)v9 + 32) {
    goto LABEL_31;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v10 = *(void *)(v1 + 16);
    uint64_t v7 = v5 - v10;
    if (__OFSUB__(v5, v10))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (v7 <= v2 ? v2 : v5 - v10) {
      break;
    }
    uint64_t v4 = _swiftEmptyArrayStorage;
    if (v5 >= v10) {
      goto LABEL_17;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    unint64_t v19 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v20 = (v19 >> 1) - (void)v9;
    BOOL v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21) {
      goto LABEL_40;
    }
  }
  sub_1000048A0(&qword_1000ADC90);
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v4);
  uint64_t v13 = result - 32;
  if (result < 32) {
    uint64_t v13 = result - 25;
  }
  v4[2] = v7;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v10) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = (unint64_t)(v4 + 4);
    unint64_t v15 = v11 + 8 * v10;
    if (v15 >= (unint64_t)&v4[v7 + 4] || v14 >= v15 + 8 * v7)
    {
      sub_1000048A0(&qword_1000ACAA0);
      swift_arrayInitWithCopy();
      if (!__OFSUB__(0, v10))
      {
        uint64_t v17 = v4[2];
        uint64_t v18 = v10 + v17;
        if (!__OFADD__(v10, v17))
        {
          if (v18 >= v10)
          {
            uint64_t result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(void *)(v1 + 8) = v14 - 8 * v10;
              *(void *)(v1 + 16) = v10;
              *(void *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(void *)uint64_t v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10004442C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_34;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11[2];
  uint64_t v13 = a4 + 8 * a5 + 8 * v8;
  if ((void *)v13 == &v11[v12 + 4])
  {
    unint64_t v15 = v11[3];
    uint64_t result = (void *)swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = (void *)swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    uint64_t v18 = v17[2];
    if ((void *)v13 == &v17[v18 + 4])
    {
      unint64_t v20 = v17[3];
      uint64_t result = (void *)swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t result = (void *)swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v19 = v17[2];
  if ((void *)v13 == &v17[v19 + 4])
  {
    unint64_t v23 = v17[3];
    uint64_t result = (void *)swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= (uint64_t)v6) {
    unint64_t v26 = v6;
  }
  else {
    unint64_t v26 = (void *)v25;
  }
  if (!v26) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000048A0(&qword_1000ADC90);
  BOOL v27 = (void *)swift_allocObject();
  int64_t v28 = j__malloc_size(v27);
  uint64_t v29 = v28 - 32;
  if (v28 < 32) {
    uint64_t v29 = v28 - 25;
  }
  uint64_t v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return v27;
}

uint64_t (*sub_100044630())()
{
  return Publishers.AEACombineLatestMany.init(_:);
}

uint64_t sub_10004464C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3] >> 1;
  uint64_t v7 = (void *)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v15 = (char *)v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v33 = &v15[-v14];
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __dst = (char *)(v9 + 32);
  uint64_t v17 = v9 + 32 + 8 * a2;
  unint64_t v31 = (char *)(v17 + 8 * a3);
  uint64_t v18 = sub_100044964(v7);
  uint64_t v32 = a4;
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v30 = v9;
    uint64_t v20 = v4[2];
    uint64_t v21 = (char *)(v4[1] + 8 * v20);
    sub_1000048A0(&qword_1000ACAA0);
    swift_arrayDestroy();
    if (a2 < 0) {
      goto LABEL_43;
    }
    BOOL v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22) {
      memmove(__dst, v21, 8 * a2);
    }
    swift_arrayDestroy();
    v32(v17, a3);
    if (v14 < 0) {
      goto LABEL_43;
    }
    unint64_t v23 = &v22[8 * (void)v33];
    if (v31 != v23 || v31 >= &v23[8 * v14]) {
      memmove(v31, v23, 8 * v14);
    }
    swift_arrayDestroy();
    *(void *)(v19 + 16) = 0;
    swift_release();
    uint64_t v9 = v30;
LABEL_23:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      uint64_t v28 = *(void *)(v9 + 16);
      BOOL v11 = __OFADD__(v20, v28);
      uint64_t v29 = v20 + v28;
      if (!v11)
      {
        if (v29 >= v20)
        {
          if ((v29 & 0x8000000000000000) == 0)
          {
            *uint64_t v4 = v9;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v29) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v20 = v4[2];
  BOOL v11 = __OFADD__(v20, a2);
  uint64_t v24 = v20 + a2;
  if (v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v24 < v20)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v24, v20))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_1000048A0(&qword_1000ACAA0);
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[8 * (v24 - v20)], a3);
  uint64_t v25 = &v33[v24];
  if (__OFADD__(v24, v33))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v26 = (char *)(v4[3] >> 1);
  if ((uint64_t)v26 < (uint64_t)v25)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v26, v25))
  {
    swift_arrayInitWithCopy();
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100044964(void *a1)
{
  uint64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9[2];
  if ((void *)(v8 + 8 * v6 + 8 * v7) != &v9[v10 + 4])
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = v9[3];
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < (uint64_t)a1) {
      return 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = (void *)swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = _swiftEmptyArrayStorage;
    }
    uint64_t v16 = v8 + 8 * v6 - (void)a1;
    uint64_t v17 = v16 - 32;
    uint64_t v18 = v16 - 25;
    if (v17 >= 0) {
      uint64_t v18 = v17;
    }
    uint64_t isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      uint64_t v4 = a1[2];
      if (isUniquelyReferenced_nonNull >= v4) {
        return (uint64_t)a1;
      }
LABEL_21:
      sub_100044AD4(isUniquelyReferenced_nonNull, v4, 0);
      return (uint64_t)a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

char *sub_100044AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 8 * a1;
  sub_1000048A0(&qword_1000ACAA0);
  uint64_t result = (char *)swift_arrayDestroy();
  BOOL v10 = __OFSUB__(a3, v4);
  uint64_t v11 = a3 - v4;
  if (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  BOOL v10 = __OFSUB__(v12, a2);
  uint64_t v13 = v12 - a2;
  if (v10) {
    goto LABEL_18;
  }
  if (v13 < 0)
  {
LABEL_21:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = (char *)(v8 + 8 * a3);
  uint64_t v14 = (char *)(v7 + 32 + 8 * a2);
  if (result != v14 || result >= &v14[8 * v13]) {
    uint64_t result = (char *)memmove(result, v14, 8 * v13);
  }
  uint64_t v16 = *(void *)(v7 + 16);
  BOOL v10 = __OFADD__(v16, v11);
  uint64_t v17 = v16 + v11;
  if (v10) {
    goto LABEL_19;
  }
  *(void *)(v7 + 16) = v17;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_100044BF4(uint64_t a1, uint64_t a2)
{
  return sub_100044C24(a1, a2, (uint64_t)type metadata accessor for AEAPolicyActivationRunner, (void (*)(void))type metadata accessor for AEAPolicyActivationRunner, (void (*)(uint64_t *, uint64_t))sub_1000093C0);
}

uint64_t sub_100044C24(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t *, uint64_t))
{
  uint64_t v10 = *(void *)(a1 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v13(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a1);
  return sub_1000467DC((uint64_t)v12, v14, a1, a2, a4, a5);
}

uint64_t sub_100044D28()
{
  void (*v3)(void *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void v8[3];
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100006340(v0 + 2, v1);
  unint64_t v3 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v4 = swift_unknownObjectRetain();
  v3(v8, v4, v1, v2);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v10;
    sub_100006340(v8, v9);
    uint64_t v5 = sub_100044C24(v5, v6, (uint64_t)type metadata accessor for AEAPolicyDeactivationRunner, (void (*)(void))type metadata accessor for AEAPolicyDeactivationRunner, (void (*)(uint64_t *, uint64_t))sub_1000093C0);
    swift_unknownObjectRelease();
    sub_1000048E4((uint64_t)v8);
  }
  else
  {
    swift_unknownObjectRelease();
    sub_1000201B4((uint64_t)v8, &qword_1000ADEF0);
  }
  return v5;
}

uint64_t sub_100044E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1000048A0(&qword_1000ADE90);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000091C4(v5 + 16, (uint64_t)v22);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  *(void *)(v15 + 24) = a5;
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  sub_100046650((uint64_t)v22, (uint64_t)v20);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  long long v18 = v20[1];
  *(_OWORD *)(v17 + 32) = v20[0];
  *(_OWORD *)(v17 + 48) = v18;
  *(void *)(v17 + 64) = v21;
  *(void *)(v17 + 72) = a1;
  *(void *)(v17 + 80) = a2;
  *(void *)(v17 + 88) = a3;
  *(void *)(v17 + 96) = sub_100046620;
  *(void *)(v17 + 104) = v15;
  swift_unknownObjectRetain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_1000689E0((uint64_t)v14, (uint64_t)&unk_1000ADEE8, v17);
  swift_release_n();
  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  return sub_1000201B4((uint64_t)v22, &qword_1000ADEE0);
}

uint64_t sub_100045068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a8;
  v8[17] = v10;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  return _swift_task_switch(sub_100045098, 0, 0);
}

uint64_t sub_100045098()
{
  sub_1000091C4(v0[12], (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100006340(v0 + 2, v1);
  uint64_t v8 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 24)
                                                                                     + **(int **)(v2 + 24));
  swift_unknownObjectRetain();
  swift_retain();
  unint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  *unint64_t v3 = v0;
  v3[1] = sub_1000451E8;
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  return v8(v0 + 7, v6, v4, v5, v1, v2);
}

uint64_t sub_1000451E8()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100045428;
  }
  else {
    uint64_t v2 = sub_1000452FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000452FC()
{
  uint64_t v9 = v0;
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[11];
    sub_100006340(v0 + 7, v0[10]);
    uint64_t v3 = sub_100044C24(v1, v2, (uint64_t)type metadata accessor for AEAPolicyDeactivationRunner, (void (*)(void))type metadata accessor for AEAPolicyDeactivationRunner, (void (*)(uint64_t *, uint64_t))sub_1000093C0);
    sub_1000048E4((uint64_t)(v0 + 7));
  }
  else
  {
    sub_1000201B4((uint64_t)(v0 + 7), &qword_1000ADEF0);
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void (*)(uint64_t *, uint64_t *))v0[16];
  uint64_t v7 = v3;
  uint64_t v8 = 0;
  v4(&v7, &v8);
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  sub_1000048E4((uint64_t)(v0 + 2));
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100045428()
{
  uint64_t v7 = v0;
  uint64_t v1 = v0[19];
  uint64_t v2 = (void (*)(uint64_t *, uint64_t *))v0[16];
  swift_unknownObjectRelease();
  swift_release();
  sub_1000048E4((uint64_t)(v0 + 2));
  uint64_t v5 = 0;
  uint64_t v6 = v1;
  swift_errorRetain();
  v2(&v5, &v6);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1000455E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t type metadata accessor for AEAPolicyActivationRunner()
{
  return self;
}

uint64_t sub_100045984(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_100045A00, 0, 0);
}

uint64_t sub_100045A00()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  sub_100006340(v1 + 2, v2);
  id v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100045B04;
  return v6(v2, v3);
}

uint64_t sub_100045B04()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100045C94;
  }
  else {
    uint64_t v2 = sub_100045C18;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100045C18()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100045C94()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 24));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t type metadata accessor for AEAPolicyDeactivationRunner()
{
  return self;
}

uint64_t sub_100045D58()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100045D98()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001AC9C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1000ADE98 + dword_1000ADE98);
  return v5(v2, v3);
}

uint64_t sub_100045E44(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10001AC9C;
  return v6();
}

uint64_t sub_100045F14()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10001AC9C;
  id v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1000ADEA8 + dword_1000ADEA8);
  return v6(v2, v3, v4);
}

uint64_t sub_100045FD4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_10001AC9C;
  return v7();
}

uint64_t sub_1000460A4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000460E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001AC9C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1000ADEB8 + dword_1000ADEB8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000461B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000201B4(a1, &qword_1000ADE90);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10004635C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100046438;
  return v6(a1);
}

uint64_t sub_100046438()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100046530()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100046568(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000ED6C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000ADEC8 + dword_1000ADEC8);
  return v6(a1, v4);
}

uint64_t sub_100046620(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100046650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000ADEE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000466B8()
{
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 32);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100046710()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 72);
  long long v5 = *(_OWORD *)(v0 + 88);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10000ED6C;
  *(void *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v5;
  *(_OWORD *)(v3 + 104) = v4;
  *(void *)(v3 + 96) = v0 + 32;
  return _swift_task_switch(sub_100045098, 0, 0);
}

uint64_t sub_1000467DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(uint64_t *, uint64_t))
{
  v13[3] = a3;
  void v13[4] = a4;
  uint64_t v10 = sub_100037C54(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v10, a1, a3);
  a5(0);
  uint64_t v11 = swift_allocObject();
  a6(v13, v11 + 16);
  return v11;
}

uint64_t sub_100046884()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000468BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (id)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100046914(uint64_t a1, uint64_t a2)
{
  sub_1000455E0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100046928()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10004699C()
{
  uint64_t v50 = sub_1000048A0(&qword_1000AB3E0);
  uint64_t v45 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v0);
  uint64_t v43 = (char *)v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000048A0(&qword_1000AE040);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000048A0(&qword_1000AE048);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000048A0(&qword_1000AE050);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  uint64_t v38 = v13;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_1000048A0(&qword_1000AE058);
  __chkstk_darwin(v39, v17);
  v36[1] = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_1000048A0(&qword_1000AE060);
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v19);
  uint64_t v21 = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_1000048A0(&qword_1000AE068);
  uint64_t v49 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v22);
  uint64_t v40 = (char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_1000048A0(&qword_1000AE070);
  uint64_t v48 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v24);
  BOOL v41 = (char *)v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_1000048A0(&qword_1000AE078);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_100005840(&qword_1000AE080, &qword_1000AE040);
  sub_10004A534();
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_1000048A0(&qword_1000ACE50);
  sub_100005840(&qword_1000AE090, &qword_1000AE048);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_1000048A0(&qword_1000AE098);
  uint64_t v26 = v37;
  Publishers.Map.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, v36[0] + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses, v50);
  sub_100005840(&qword_1000AE0A0, &qword_1000AE058);
  sub_100005840(&qword_1000AE0A8, &qword_1000AB3E0);
  Publishers.CombineLatest.init(_:_:)();
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = sub_10004A5E0;
  *(void *)(v28 + 24) = v27;
  sub_1000048A0(&qword_1000AB3F8);
  sub_100005840(&qword_1000AE0B0, &qword_1000AE060);
  uint64_t v29 = v40;
  uint64_t v30 = v42;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v30);
  sub_100005840(&qword_1000AE0B8, &qword_1000AE068);
  sub_100005840(&qword_1000AB3F0, &qword_1000AB3F8);
  unint64_t v31 = v41;
  uint64_t v32 = v47;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v32);
  sub_100005840(&qword_1000AE0C0, &qword_1000AE070);
  uint64_t v33 = v46;
  uint64_t v34 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v33);
  return v34;
}

void *sub_100047174(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v5 = Strong;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10004A658(a2, v5, a1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_100051594((uint64_t)v6);
  swift_release();
  swift_bridgeObjectRelease();
  return (void *)v7;
}

uint64_t sub_100047230@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v66 = _swiftEmptyDictionarySingleton;
  uint64_t v60 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  int64_t v61 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v62 = v2;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if (v9 >= v61)
    {
LABEL_51:
      uint64_t result = swift_release();
      *a2 = v66;
      return result;
    }
    unint64_t v10 = *(void *)(v60 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v61) {
        goto LABEL_51;
      }
      unint64_t v10 = *(void *)(v60 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v61) {
          goto LABEL_51;
        }
        unint64_t v10 = *(void *)(v60 + 8 * v6);
        if (!v10) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_22:
    uint64_t v12 = *(void *)(v62 + 48) + 40 * v8;
    char v13 = *(unsigned char *)(v12 + 32);
    long long v14 = *(_OWORD *)(v12 + 16);
    long long v67 = *(_OWORD *)v12;
    long long v68 = v14;
    char v69 = v13;
    long long v15 = v67;
    sub_10004A4CC((uint64_t)&v68, (uint64_t)v70);
    uint64_t v16 = *(void *)(v62 + 56) + 16 * v8;
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = v66;
    uint64_t v20 = v66[2];
    swift_bridgeObjectRetain();
    char v63 = v17;
    if (!v20)
    {
      sub_100010570((uint64_t)v70);
      swift_bridgeObjectRetain();
LABEL_26:
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v65[0] = v19;
      unint64_t v25 = sub_100072904(v15, *((uint64_t *)&v15 + 1));
      uint64_t v26 = v19[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      char v29 = v24;
      if (v19[3] < v28)
      {
        sub_10006D128(v28, isUniquelyReferenced_nonNull_native);
        uint64_t v30 = sub_100072904(v15, *((uint64_t *)&v15 + 1));
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_58;
        }
        unint64_t v25 = v30;
        uint64_t v32 = (void *)v65[0];
        if ((v29 & 1) == 0) {
          goto LABEL_35;
        }
LABEL_33:
        uint64_t v33 = v32[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v25) = _swiftEmptyDictionarySingleton;
LABEL_37:
        uint64_t v66 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v32 = (void *)v65[0];
        if (v24) {
          goto LABEL_33;
        }
      }
      else
      {
        sub_10006EE24();
        uint64_t v32 = (void *)v65[0];
        if (v29) {
          goto LABEL_33;
        }
      }
LABEL_35:
      v32[(v25 >> 6) + 8] |= 1 << v25;
      *(_OWORD *)(v32[6] + 16 * v25) = v15;
      *(void *)(v32[7] + 8 * v25) = _swiftEmptyDictionarySingleton;
      uint64_t v34 = v32[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_55;
      }
      v32[2] = v36;
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    sub_100010570((uint64_t)v70);
    swift_bridgeObjectRetain();
    sub_100072904(v15, *((uint64_t *)&v15 + 1));
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      goto LABEL_26;
    }
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100047808(v65, v15, *((uint64_t *)&v15 + 1));
    if (!*v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t v39 = v37;
    swift_bridgeObjectRetain();
    sub_100010570((uint64_t)v70);
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v41 = (void *)*v39;
    uint64_t v64 = (void *)*v39;
    *uint64_t v39 = 0x8000000000000000;
    unint64_t v43 = sub_1000729F8((uint64_t)&v67);
    uint64_t v44 = v41[2];
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_53;
    }
    char v47 = v42;
    if (v41[3] >= v46)
    {
      if (v40)
      {
        uint64_t v50 = v64;
        if ((v42 & 1) == 0) {
          goto LABEL_48;
        }
      }
      else
      {
        sub_10006EC38();
        uint64_t v50 = v64;
        if ((v47 & 1) == 0) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      sub_10006CEE4(v46, v40);
      unint64_t v48 = sub_1000729F8((uint64_t)&v67);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_59;
      }
      unint64_t v43 = v48;
      uint64_t v50 = v64;
      if ((v47 & 1) == 0)
      {
LABEL_48:
        v50[(v43 >> 6) + 8] |= 1 << v43;
        uint64_t v52 = v50[6] + 40 * v43;
        long long v53 = v67;
        long long v54 = v68;
        *(unsigned char *)(v52 + 32) = v69;
        *(_OWORD *)uint64_t v52 = v53;
        *(_OWORD *)(v52 + 16) = v54;
        uint64_t v55 = v50[7] + 16 * v43;
        *(unsigned char *)uint64_t v55 = v63;
        *(void *)(v55 + 8) = v18;
        uint64_t v56 = v50[2];
        BOOL v35 = __OFADD__(v56, 1);
        uint64_t v57 = v56 + 1;
        if (v35) {
          goto LABEL_56;
        }
        v50[2] = v57;
        swift_bridgeObjectRetain();
        sub_100010570((uint64_t)v70);
        goto LABEL_50;
      }
    }
    uint64_t v51 = v50[7] + 16 * v43;
    swift_bridgeObjectRelease();
    *(unsigned char *)uint64_t v51 = v63;
    *(void *)(v51 + 8) = v18;
LABEL_50:
    *uint64_t v39 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10004ABB0((uint64_t)v70);
LABEL_5:
    ((void (*)(void *, void))v38)(v65, 0);
    swift_bridgeObjectRelease();
    sub_10004ABB0((uint64_t)v70);
    swift_bridgeObjectRelease();
  }
  int64_t v11 = v9 + 3;
  if (v11 >= v61) {
    goto LABEL_51;
  }
  unint64_t v10 = *(void *)(v60 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v61) {
      goto LABEL_51;
    }
    unint64_t v10 = *(void *)(v60 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_21;
    }
  }
LABEL_57:
  __break(1u);
LABEL_58:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_59:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t (*sub_100047784(void *a1, uint64_t a2, uint64_t a3))()
{
  int64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_100048B94(v6, a2, a3);
  return sub_100047804;
}

uint64_t (*sub_100047808(void *a1, uint64_t a2, uint64_t a3))()
{
  int64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_100048C44(v6, a2, a3);
  return sub_100047804;
}

void sub_100047888(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_1000478DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v53 = type metadata accessor for AEAParticipant(0);
  __chkstk_darwin(v53, v6);
  uint64_t v54 = (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a2 + 16)) {
    goto LABEL_28;
  }
  uint64_t v50 = v7;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100072904(v10, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v50;
LABEL_28:
    unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v26 = v53;
    return v25(a3, 1, 1, v26);
  }
  uint64_t v13 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int64_t v14 = 0;
  uint64_t v15 = v13 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v13 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  do
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v14 << 6);
    }
    else
    {
      int64_t v22 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_62;
      }
      if (v22 >= v19) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v15 + 8 * v22);
      ++v14;
      if (!v23)
      {
        int64_t v14 = v22 + 1;
        if (v22 + 1 >= v19) {
          goto LABEL_34;
        }
        unint64_t v23 = *(void *)(v15 + 8 * v14);
        if (!v23)
        {
          int64_t v14 = v22 + 2;
          if (v22 + 2 >= v19) {
            goto LABEL_34;
          }
          unint64_t v23 = *(void *)(v15 + 8 * v14);
          if (!v23)
          {
            int64_t v14 = v22 + 3;
            if (v22 + 3 >= v19) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v15 + 8 * v14);
            if (!v23)
            {
              int64_t v14 = v22 + 4;
              if (v22 + 4 >= v19) {
                goto LABEL_34;
              }
              unint64_t v23 = *(void *)(v15 + 8 * v14);
              if (!v23)
              {
                int64_t v24 = v22 + 5;
                if (v24 >= v19) {
                  goto LABEL_34;
                }
                unint64_t v23 = *(void *)(v15 + 8 * v24);
                if (!v23)
                {
                  while (1)
                  {
                    int64_t v14 = v24 + 1;
                    if (__OFADD__(v24, 1)) {
                      break;
                    }
                    if (v14 >= v19) {
                      goto LABEL_34;
                    }
                    unint64_t v23 = *(void *)(v15 + 8 * v14);
                    ++v24;
                    if (v23) {
                      goto LABEL_26;
                    }
                  }
LABEL_62:
                  __break(1u);
                  uint64_t result = swift_release();
                  __break(1u);
                  return result;
                }
                int64_t v14 = v24;
              }
            }
          }
        }
      }
LABEL_26:
      unint64_t v18 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
    }
  }
  while (*(unsigned char *)(*(void *)(v13 + 48) + 40 * v21 + 32) != 1);
  if ((*(unsigned char *)(a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24)) & 1) == 0)
  {
    sub_100049180(v13, v28);
    swift_bridgeObjectRelease();
  }
LABEL_34:
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = sub_100048A98(v29);
  swift_bridgeObjectRelease();
  uint64_t v55 = v30;
  sub_1000492D8(&v55);
  swift_bridgeObjectRelease();
  char v31 = v55;
  uint64_t v32 = v55[2];
  if (!v32)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(a3, 1, 1, v53);
  }
  uint64_t v49 = a3;
  uint64_t v33 = 0;
  uint64_t v51 = v55;
  uint64_t v34 = v54;
  while (1)
  {
    uint64_t v52 = v32;
    uint64_t v36 = v31[v33 + 4];
    uint64_t v35 = v31[v33 + 5];
    uint64_t v38 = v31[v33 + 6];
    uint64_t v37 = v31[v33 + 7];
    uint64_t v39 = v31[v33 + 10];
    char v40 = v31[v33 + 9];
    char v41 = v31[v33 + 8];
    sub_100005884(a1, v34);
    uint64_t v42 = v34 + *(int *)(v53 + 20);
    *(unsigned char *)uint64_t v42 = v40;
    *(void *)(v42 + 8) = v39;
    if ((v41 & 1) == 0)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_60;
    }
    BOOL v43 = v36 == *(void *)(a1 + 8) && v35 == *(void *)(a1 + 16);
    if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10004AB50(v54, type metadata accessor for AEAParticipant);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    if (!v37) {
      goto LABEL_55;
    }
    uint64_t v44 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45) {
      break;
    }
    swift_bridgeObjectRetain();
LABEL_37:
    sub_10004AB50(v54, type metadata accessor for AEAParticipant);
LABEL_38:
    v33 += 7;
    char v31 = v51;
    uint64_t v32 = v52 - 1;
    if (v52 == 1)
    {
      swift_release();
      a3 = v49;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(a3, 1, 1, v53);
    }
  }
  if (v38 != *(void *)(v44 + 8) || v37 != v45)
  {
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    if (v47) {
      goto LABEL_60;
    }
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
LABEL_60:
  swift_release();
  uint64_t v48 = v49;
  sub_10004AAE8(v54, v49, type metadata accessor for AEAParticipant);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v48, 0, 1, v53);
}

uint64_t sub_100047DE4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses;
  uint64_t v2 = sub_1000048A0(&qword_1000AB3E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource__configurationsByApplicationDescriptor;
  uint64_t v4 = sub_1000048A0(&qword_1000AE078);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_100047ED0()
{
  return type metadata accessor for AEAConfigurationParticipantSource();
}

uint64_t type metadata accessor for AEAConfigurationParticipantSource()
{
  uint64_t result = qword_1000ADF30;
  if (!qword_1000ADF30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100047F24()
{
  sub_100048034(319, (unint64_t *)&qword_1000AB338, (uint64_t *)&unk_1000AB340, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published.Publisher);
  if (v0 <= 0x3F)
  {
    sub_100048034(319, (unint64_t *)&unk_1000ADF40, &qword_1000ACE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100048034(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = sub_1000054DC(a3);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100048094()
{
  return sub_10004699C();
}

unint64_t sub_1000480B8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          int64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100048290(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v6);
  long long v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v38 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v13 = v38;
    if ((*(void *)(v38 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v36 = (result + 1) & v12;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v14 = v5 + 16;
      uint64_t v35 = v15;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v37 = v14;
      uint64_t v17 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      do
      {
        int64_t v18 = v16 * v11;
        v35(v9, *(void *)(a2 + 48) + v16 * v11, v4);
        sub_10000F558();
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v17)(v9, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v36)
        {
          if (v20 >= v36 && a1 >= (uint64_t)v20)
          {
LABEL_17:
            uint64_t v23 = *(void *)(a2 + 48);
            unint64_t result = v23 + v16 * a1;
            unint64_t v24 = v23 + v18 + v16;
            if (v16 * a1 < v18 || result >= v24)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v26 = *(void *)(a2 + 56);
            BOOL v27 = (void *)(v26 + 8 * a1);
            uint64_t v28 = (void *)(v26 + 8 * v11);
            uint64_t v13 = v38;
            if (a1 != v11 || (a1 = v11, v27 >= v28 + 1))
            {
              *BOOL v27 = *v28;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v36 || a1 >= (uint64_t)v20)
        {
          goto LABEL_17;
        }
        uint64_t v13 = v38;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v13 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10004854C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_10002981C(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_100006384(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for AEAParticipant(0) - 8) + 72);
        int64_t v19 = v18 * v3;
        unint64_t result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v13) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  uint64_t *v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10004876C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

__n128 sub_100048944(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = a4[6] + 40 * v8;
  __n128 result = *(__n128 *)a1;
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(a1 + 32);
  uint64_t v12 = a4[7] + 16 * v8;
  *(unsigned char *)uint64_t v12 = a2 & 1;
  *(void *)(v12 + 8) = a3;
  ++a4[2];
  return result;
}

void *sub_100048A98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000048A0(&qword_1000AE018);
  int64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  uint64_t v5 = sub_100050688(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1000198D8();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t (*sub_100048B94(void *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100049060(v6);
  v6[10] = sub_100048D64(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100048C40;
}

uint64_t (*sub_100048C44(void *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100049090(v6);
  v6[10] = sub_100048EC4(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100048C40;
}

void sub_100048CF0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_100048D64(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = v4;
  unint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  uint64_t v13 = sub_100072904(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      void v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *unint64_t v10 = v19;
        return sub_100048EAC;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10006E524();
      goto LABEL_7;
    }
    sub_10006C3C4(v16, a4 & 1);
    uint64_t v20 = sub_100072904(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      void v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  __n128 result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100048EAC(uint64_t **a1, uint64_t a2)
{
}

void (*sub_100048EC4(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = v4;
  unint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  uint64_t v13 = sub_100072904(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      void v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *unint64_t v10 = v19;
        return sub_100048EAC;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10006EE24();
      goto LABEL_7;
    }
    sub_10006D128(v16, a4 & 1);
    uint64_t v20 = sub_100072904(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      void v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  __n128 result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10004900C(uint64_t **a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  int64_t v3 = *a1;
  sub_1000490CC(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], a3);
  swift_bridgeObjectRelease();

  free(v3);
}

uint64_t (*sub_100049060(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_10004ABE4;
}

uint64_t (*sub_100049090(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1000490C0;
}

uint64_t sub_1000490C0(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_1000490CC(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v9;
    }
    else
    {
      a7(a4, a5, a6, v9, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10004876C(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100049180(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v11 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_10004A074((unint64_t *)((char *)&v11 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v7;
    }
  }
  else
  {
    unint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    sub_10004A074((unint64_t *)v8, v5, v3);
    uint64_t v3 = v9;
    swift_slowDealloc();
  }
  return v3;
}

_OWORD *sub_1000492D8(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_10004A4B8(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  __n128 result = sub_100049344(v5);
  *a1 = v2;
  return result;
}

_OWORD *sub_100049344(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  __n128 result = (_OWORD *)_minimumMergeRunLength(_:)(v3);
  if ((uint64_t)result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_166;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v101 = *a1;
      uint64_t v102 = *a1 + 104;
      uint64_t v103 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        int v105 = *(unsigned __int8 *)(v101 + 56 * i + 32);
        uint64_t v106 = v103;
        uint64_t v107 = v102;
        do
        {
          if (((v105 ^ 1 | *(unsigned __int8 *)(v107 - 72)) & 1) != 0
            && (!*(void *)(v107 - 24) || *(void *)(v107 - 80) != 0))
          {
            break;
          }
          if (!v101) {
            goto LABEL_168;
          }
          uint64_t v109 = v107 - 48;
          __n128 result = (_OWORD *)(v107 - 104);
          uint64_t v110 = *(void *)(v107 - 56);
          *(void *)(v107 - 56) = *(void *)v107;
          v107 -= 56;
          uint64_t v112 = *(void *)(v107 + 8);
          uint64_t v111 = *(void *)(v107 + 16);
          char v113 = *(unsigned char *)(v107 + 48);
          long long v114 = *(_OWORD *)(v107 + 24);
          long long v115 = result[1];
          *(_OWORD *)uint64_t v109 = *result;
          *(_OWORD *)(v109 + 16) = v115;
          *(_OWORD *)(v109 + 32) = result[2];
          *(void *)(v109 + 48) = v110;
          *(void *)(v107 - 48) = v112;
          *(void *)(v107 - 40) = v111;
          *(_OWORD *)(v107 - 32) = v114;
          *(unsigned char *)(v107 - 16) = v105;
          *(unsigned char *)(v107 - 8) = v113;
        }
        while (!__CFADD__(v106++, 1));
        v102 += 56;
        --v103;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_175;
  }
  v129 = result;
  uint64_t v133 = v1;
  v126 = a1;
  if (v3 < 2)
  {
    unint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_132:
      uint64_t v117 = v11;
      v128 = v8;
      if (v12 >= 2)
      {
        uint64_t v118 = *v126;
        do
        {
          unint64_t v119 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_161;
          }
          if (!v118) {
            goto LABEL_174;
          }
          uint64_t v120 = v117;
          uint64_t v121 = *(void *)&v117[16 * v119 + 32];
          uint64_t v122 = *(void *)&v117[16 * v12 + 24];
          sub_100049B84((char *)(v118 + 56 * v121), (char *)(v118 + 56 * *(void *)&v117[16 * v12 + 16]), v118 + 56 * v122, __dst);
          if (v133) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_162;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v120 = sub_10004A060((uint64_t)v120);
          }
          if (v119 >= *((void *)v120 + 2)) {
            goto LABEL_163;
          }
          v123 = &v120[16 * v119 + 32];
          *(void *)v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v120 + 2);
          if (v12 > v124) {
            goto LABEL_164;
          }
          memmove(&v120[16 * v12 + 16], &v120[16 * v12 + 32], 16 * (v124 - v12));
          uint64_t v117 = v120;
          *((void *)v120 + 2) = v124 - 1;
          unint64_t v12 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v128[2] = 0;
      return (_OWORD *)swift_bridgeObjectRelease();
    }
    v128 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_1000048A0(&qword_1000AE020);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    v128 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v127 = *a1 + 32;
  uint64_t v125 = *a1 + 48;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v130 = v3;
  uint64_t v131 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_49;
    }
    Swift::Int v14 = v10 + 56 * v9;
    int v15 = *(unsigned __int8 *)(v14 + 32);
    uint64_t v16 = v10 + 56 * v13;
    if (v15 != 1 || (*(unsigned char *)(v16 + 32) & 1) != 0)
    {
      if (*(void *)(v14 + 24))
      {
        BOOL v18 = *(void *)(v16 + 24) == 0;
        Swift::Int v17 = v13 + 2;
        if (v13 + 2 >= v3) {
          goto LABEL_40;
        }
      }
      else
      {
        Swift::Int v17 = v13 + 2;
        if (v13 + 2 >= v3) {
          goto LABEL_48;
        }
        BOOL v18 = 0;
      }
    }
    else
    {
      Swift::Int v17 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_42;
      }
      BOOL v18 = 1;
    }
    uint64_t v19 = v3 <= v17 + 1 ? v17 + 1 : v3;
    uint64_t v20 = (unsigned char *)(v127 + 56 * v17);
    do
    {
      char v21 = v15;
      LOBYTE(v15) = *v20;
      if ((v21 & 1) == 0 && *v20)
      {
        if (!v18) {
          goto LABEL_48;
        }
      }
      else if (*((void *)v20 - 1))
      {
        if (((v18 ^ (*(void *)(v10 + 56 * v9 + 24) != 0)) & 1) == 0) {
          goto LABEL_40;
        }
      }
      else if (v18)
      {
        goto LABEL_41;
      }
      Swift::Int v9 = v17;
      v20 += 56;
      ++v17;
    }
    while (v17 < v3);
    Swift::Int v17 = v19;
LABEL_40:
    Swift::Int v9 = v17;
    if (v18)
    {
LABEL_41:
      if (v17 < v13) {
        goto LABEL_167;
      }
LABEL_42:
      if (v13 < v17)
      {
        uint64_t v22 = 56 * v17;
        Swift::Int v23 = v17;
        Swift::Int v24 = v13;
        uint64_t v25 = 56 * v13;
        do
        {
          if (v24 != --v23)
          {
            if (!v10) {
              goto LABEL_173;
            }
            uint64_t v26 = v10 + v25;
            uint64_t v27 = v10 + v22;
            uint64_t v28 = *(void *)(v10 + v25);
            uint64_t v29 = *(void *)(v10 + v25 + 8);
            char v30 = *(unsigned char *)(v10 + v25 + 32);
            char v31 = *(unsigned char *)(v10 + v25 + 40);
            uint64_t v32 = *(void *)(v10 + v25 + 48);
            long long v33 = *(_OWORD *)(v10 + v25 + 16);
            long long v34 = *(_OWORD *)(v10 + v22 - 40);
            long long v35 = *(_OWORD *)(v10 + v22 - 24);
            long long v36 = *(_OWORD *)(v10 + v22 - 56);
            *(void *)(v26 + 48) = *(void *)(v10 + v22 - 8);
            *(_OWORD *)(v26 + 16) = v34;
            *(_OWORD *)(v26 + 32) = v35;
            *(_OWORD *)uint64_t v26 = v36;
            *(void *)(v27 - 56) = v28;
            *(void *)(v27 - 48) = v29;
            *(_OWORD *)(v27 - 40) = v33;
            *(unsigned char *)(v27 - 24) = v30;
            *(unsigned char *)(v27 - 16) = v31;
            *(void *)(v27 - 8) = v32;
          }
          ++v24;
          v22 -= 56;
          v25 += 56;
        }
        while (v24 < v23);
      }
LABEL_48:
      Swift::Int v9 = v17;
    }
LABEL_49:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_165;
      }
      if (v9 - v13 < (uint64_t)v129) {
        break;
      }
    }
LABEL_70:
    if (v9 < v13) {
      goto LABEL_160;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100049E90(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v52 = *((void *)v11 + 2);
    unint64_t v51 = *((void *)v11 + 3);
    unint64_t v12 = v52 + 1;
    uint64_t v10 = v131;
    if (v52 >= v51 >> 1)
    {
      uint64_t v100 = sub_100049E90((char *)(v51 > 1), v52 + 1, 1, v11);
      uint64_t v10 = v131;
      uint64_t v11 = v100;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v53 = v11 + 32;
    uint64_t v54 = &v11[16 * v52 + 32];
    *(void *)uint64_t v54 = v13;
    *((void *)v54 + 1) = v9;
    if (v52)
    {
      while (1)
      {
        unint64_t v55 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v60 = &v53[16 * v12];
          uint64_t v61 = *((void *)v60 - 8);
          uint64_t v62 = *((void *)v60 - 7);
          BOOL v66 = __OFSUB__(v62, v61);
          uint64_t v63 = v62 - v61;
          if (v66) {
            goto LABEL_149;
          }
          uint64_t v65 = *((void *)v60 - 6);
          uint64_t v64 = *((void *)v60 - 5);
          BOOL v66 = __OFSUB__(v64, v65);
          uint64_t v58 = v64 - v65;
          char v59 = v66;
          if (v66) {
            goto LABEL_150;
          }
          unint64_t v67 = v12 - 2;
          long long v68 = &v53[16 * v12 - 32];
          uint64_t v70 = *(void *)v68;
          uint64_t v69 = *((void *)v68 + 1);
          BOOL v66 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          if (v66) {
            goto LABEL_152;
          }
          BOOL v66 = __OFADD__(v58, v71);
          uint64_t v72 = v58 + v71;
          if (v66) {
            goto LABEL_155;
          }
          if (v72 >= v63)
          {
            uint64_t v90 = &v53[16 * v55];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v66 = __OFSUB__(v91, v92);
            uint64_t v93 = v91 - v92;
            if (v66) {
              goto LABEL_159;
            }
            BOOL v83 = v58 < v93;
            goto LABEL_107;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v84 = *((void *)v11 + 4);
            uint64_t v85 = *((void *)v11 + 5);
            BOOL v66 = __OFSUB__(v85, v84);
            uint64_t v77 = v85 - v84;
            char v78 = v66;
            goto LABEL_101;
          }
          uint64_t v57 = *((void *)v11 + 4);
          uint64_t v56 = *((void *)v11 + 5);
          BOOL v66 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          char v59 = v66;
        }
        if (v59) {
          goto LABEL_151;
        }
        unint64_t v67 = v12 - 2;
        uint64_t v73 = &v53[16 * v12 - 32];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v76 = __OFSUB__(v74, v75);
        uint64_t v77 = v74 - v75;
        char v78 = v76;
        if (v76) {
          goto LABEL_154;
        }
        long long v79 = &v53[16 * v55];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v66 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v66) {
          goto LABEL_157;
        }
        if (__OFADD__(v77, v82)) {
          goto LABEL_158;
        }
        if (v77 + v82 >= v58)
        {
          BOOL v83 = v58 < v82;
LABEL_107:
          if (v83) {
            unint64_t v55 = v67;
          }
          goto LABEL_109;
        }
LABEL_101:
        if (v78) {
          goto LABEL_153;
        }
        uint64_t v86 = &v53[16 * v55];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v66 = __OFSUB__(v87, v88);
        uint64_t v89 = v87 - v88;
        if (v66) {
          goto LABEL_156;
        }
        if (v89 < v77) {
          goto LABEL_15;
        }
LABEL_109:
        unint64_t v94 = v55 - 1;
        if (v55 - 1 >= v12)
        {
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
          goto LABEL_170;
        }
        if (!v10) {
          goto LABEL_172;
        }
        uint64_t v95 = &v53[16 * v94];
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = &v53[16 * v55];
        uint64_t v98 = *((void *)v97 + 1);
        sub_100049B84((char *)(v10 + 56 * *(void *)v95), (char *)(v10 + 56 * *(void *)v97), v10 + 56 * v98, __dst);
        if (v133) {
          goto LABEL_117;
        }
        if (v98 < v96) {
          goto LABEL_146;
        }
        if (v55 > *((void *)v11 + 2)) {
          goto LABEL_147;
        }
        *(void *)uint64_t v95 = v96;
        *(void *)&v53[16 * v94 + 8] = v98;
        unint64_t v99 = *((void *)v11 + 2);
        if (v55 >= v99) {
          goto LABEL_148;
        }
        unint64_t v12 = v99 - 1;
        memmove(&v53[16 * v55], v97 + 16, 16 * (v99 - 1 - v55));
        *((void *)v11 + 2) = v99 - 1;
        uint64_t v10 = v131;
        if (v99 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v130;
    if (v9 >= v130)
    {
      unint64_t v8 = v128;
      goto LABEL_132;
    }
  }
  Swift::Int v37 = (Swift::Int)v129 + v13;
  if (__OFADD__(v13, v129)) {
    goto LABEL_169;
  }
  if (v37 >= v3) {
    Swift::Int v37 = v3;
  }
  if (v37 >= v13)
  {
    if (v9 != v37)
    {
      uint64_t v38 = v125 + 56 * v9;
      do
      {
        int v39 = *(unsigned __int8 *)(v10 + 56 * v9 + 32);
        Swift::Int v40 = v13;
        uint64_t v41 = v38;
        do
        {
          if (((v39 ^ 1 | *(unsigned __int8 *)(v41 - 72)) & 1) != 0
            && (!*(void *)(v41 - 24) || *(void *)(v41 - 80) != 0))
          {
            break;
          }
          if (!v10) {
            goto LABEL_171;
          }
          uint64_t v43 = v41 - 48;
          uint64_t v44 = (_OWORD *)(v41 - 104);
          uint64_t v45 = *(void *)(v41 - 56);
          *(void *)(v41 - 56) = *(void *)v41;
          v41 -= 56;
          uint64_t v46 = *(void *)(v41 + 8);
          uint64_t v47 = *(void *)(v41 + 16);
          char v48 = *(unsigned char *)(v41 + 48);
          long long v49 = *(_OWORD *)(v41 + 24);
          long long v50 = v44[1];
          *(_OWORD *)uint64_t v43 = *v44;
          *(_OWORD *)(v43 + 16) = v50;
          *(_OWORD *)(v43 + 32) = v44[2];
          *(void *)(v43 + 48) = v45;
          *(void *)(v41 - 48) = v46;
          *(void *)(v41 - 40) = v47;
          *(_OWORD *)(v41 - 32) = v49;
          *(unsigned char *)(v41 - 16) = v39;
          *(unsigned char *)(v41 - 8) = v48;
          ++v40;
        }
        while (v9 != v40);
        ++v9;
        v38 += 56;
      }
      while (v9 != v37);
      Swift::Int v9 = v37;
    }
    goto LABEL_70;
  }
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __n128 result = (_OWORD *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100049B84(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  long long v36 = __src;
  long long v35 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst) {
        memmove(__dst, a2, 56 * v11);
      }
      char v21 = &v4[56 * v11];
      long long v34 = v21;
      long long v36 = v6;
      if (v7 < v6 && v10 >= 56)
      {
        unint64_t v22 = a3 - 56;
        do
        {
          Swift::Int v23 = (char *)(v22 + 56);
          BOOL v24 = *(v21 - 24) == 1 && *(v6 - 24) == 0;
          if (v24 || (*((void *)v21 - 4) ? (BOOL v25 = *((void *)v6 - 4) == 0) : (BOOL v25 = 0), v25))
          {
            uint64_t v29 = v6 - 56;
            if (v23 != v6 || v22 >= (unint64_t)v6)
            {
              long long v30 = *(_OWORD *)v29;
              long long v31 = *(_OWORD *)(v6 - 40);
              long long v32 = *(_OWORD *)(v6 - 24);
              *(void *)(v22 + 48) = *((void *)v6 - 1);
              *(_OWORD *)(v22 + 16) = v31;
              *(_OWORD *)(v22 + 32) = v32;
              *(_OWORD *)unint64_t v22 = v30;
            }
            long long v36 = v6 - 56;
            if (v29 <= v7) {
              break;
            }
          }
          else
          {
            long long v34 = v21 - 56;
            if (v23 < v21 || v22 >= (unint64_t)v21 || v23 != v21)
            {
              long long v26 = *(_OWORD *)(v21 - 56);
              long long v27 = *(_OWORD *)(v21 - 40);
              long long v28 = *(_OWORD *)(v21 - 24);
              *(void *)(v22 + 48) = *((void *)v21 - 1);
              *(_OWORD *)(v22 + 16) = v27;
              *(_OWORD *)(v22 + 32) = v28;
              *(_OWORD *)unint64_t v22 = v26;
            }
            uint64_t v29 = v6;
            v21 -= 56;
            if (v6 <= v7) {
              break;
            }
          }
          v22 -= 56;
          uint64_t v6 = v29;
        }
        while (v21 > v4);
      }
LABEL_54:
      sub_100049F8C((void **)&v36, &v35, &v34);
      return 1;
    }
  }
  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst) {
      memmove(__dst, __src, 56 * v9);
    }
    unint64_t v12 = &v4[56 * v9];
    long long v34 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      Swift::Int v13 = v4;
      while (1)
      {
        BOOL v14 = v6[32] == 1 && v13[32] == 0;
        if (v14 || (*((void *)v6 + 3) ? (BOOL v15 = *((void *)v13 + 3) == 0) : (BOOL v15 = 0), v15))
        {
          Swift::Int v17 = v6 + 56;
          uint64_t v16 = v6;
          if (v7 == v6 && v7 < v17) {
            goto LABEL_25;
          }
        }
        else
        {
          char v4 = v13 + 56;
          uint64_t v16 = v13;
          Swift::Int v17 = v6;
          if (v7 == v13)
          {
            v13 += 56;
            if (v7 < v4) {
              goto LABEL_25;
            }
          }
          else
          {
            v13 += 56;
          }
        }
        long long v18 = *(_OWORD *)v16;
        long long v19 = *((_OWORD *)v16 + 1);
        long long v20 = *((_OWORD *)v16 + 2);
        *((void *)v7 + 6) = *((void *)v16 + 6);
        *((_OWORD *)v7 + 1) = v19;
        *((_OWORD *)v7 + 2) = v20;
        *(_OWORD *)uint64_t v7 = v18;
LABEL_25:
        v7 += 56;
        if (v13 < v12)
        {
          uint64_t v6 = v17;
          if ((unint64_t)v17 < a3) {
            continue;
          }
        }
        long long v35 = v4;
        long long v36 = v7;
        goto LABEL_54;
      }
    }
    goto LABEL_54;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100049E90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000048A0(&qword_1000AE028);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100049F8C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -56)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
    {
      return (char *)memmove(result, v3, 56 * v6);
    }
  }
  return result;
}

char *sub_10004A060(uint64_t a1)
{
  return sub_100049E90(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_10004A074(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if ((*(unsigned char *)(*(void *)(a3 + 48) + 40 * v12 + 32) & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        sub_10004A1C8(a1, a2, v4, (void *)a3);
        return;
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

void sub_10004A1C8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a3) {
    return;
  }
  uint64_t v5 = a3;
  if (a4[2] == a3)
  {
    swift_retain();
    return;
  }
  sub_1000048A0(&qword_1000AE030);
  uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_25;
    }
    uint64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_29;
    }
    if (v13 >= a2) {
      return;
    }
    unint64_t v14 = a1[v13];
    ++v10;
    if (!v14)
    {
      uint64_t v10 = v13 + 1;
      if (v13 + 1 >= a2) {
        return;
      }
      unint64_t v14 = a1[v10];
      if (!v14)
      {
        uint64_t v10 = v13 + 2;
        if (v13 + 2 >= a2) {
          return;
        }
        unint64_t v14 = a1[v10];
        if (!v14) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_25:
    uint64_t v16 = a4[6] + 40 * v12;
    char v17 = *(unsigned char *)(v16 + 32);
    long long v18 = *(_OWORD *)(v16 + 16);
    long long v23 = *(_OWORD *)v16;
    long long v24 = v18;
    char v25 = v17;
    long long v26 = *(_OWORD *)v16;
    sub_10004A4CC((uint64_t)&v24, (uint64_t)v27);
    uint64_t v19 = a4[7] + 16 * v12;
    char v20 = *(unsigned char *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    sub_100010570((uint64_t)&v26);
    sub_100010570((uint64_t)v27);
    swift_bridgeObjectRetain();
    sub_100048944((uint64_t)&v23, v20, v21, v8);
    if (__OFSUB__(v5--, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (!v5) {
      return;
    }
  }
  uint64_t v15 = v13 + 3;
  if (v15 >= a2) {
    return;
  }
  unint64_t v14 = a1[v15];
  if (v14)
  {
    uint64_t v10 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= a2) {
      return;
    }
    unint64_t v14 = a1[v10];
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_10004A3B8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000CB7C(v4, (uint64_t)qword_1000B0140);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Participant configuration did change", v7, 2u);
    swift_slowDealloc();
  }

  *a2 = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10004A4B8(void *a1)
{
  return sub_1000501F8(0, a1[2], 0, a1);
}

uint64_t sub_10004A4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AE038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004A534()
{
  unint64_t result = qword_1000AE088;
  if (!qword_1000AE088)
  {
    sub_1000054DC(&qword_1000ACE50);
    sub_10001F7FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AE088);
  }
  return result;
}

uint64_t sub_10004A5A8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10004A5E0(uint64_t a1, uint64_t a2)
{
  return sub_100047174(a1, a2);
}

uint64_t sub_10004A5E8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004A620@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, a1[1]);
  *a2 = result;
  return result;
}

void *sub_10004A658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a3;
  uint64_t v4 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for AEAParticipant(0);
  uint64_t v8 = *(void *)(v51 - 8);
  uint64_t v10 = __chkstk_darwin(v51, v9);
  uint64_t v47 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v44 = (uint64_t)&v43 - v13;
  uint64_t v14 = type metadata accessor for AEAParticipant.Process(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14 - 8, v16);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  unint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v49 = a1 + 56;
  uint64_t v24 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v50 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v45 = v8;
  long long v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v28 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v30 = 0;
  char v48 = _swiftEmptyArrayStorage;
  if (!v26) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v31 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  for (unint64_t i = v31 | (v30 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v30 << 6))
  {
    sub_100005884(*(void *)(v28 + 48) + *(void *)(v15 + 72) * i, (uint64_t)v22);
    sub_10004AAE8((uint64_t)v22, (uint64_t)v19, type metadata accessor for AEAParticipant.Process);
    sub_1000478DC((uint64_t)v19, v52, (uint64_t)v7);
    sub_10004AB50((uint64_t)v19, type metadata accessor for AEAParticipant.Process);
    if ((*v27)(v7, 1, v51) == 1)
    {
      uint64_t result = (void *)sub_10003474C((uint64_t)v7);
      if (v26) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v46 = type metadata accessor for AEAParticipant;
      uint64_t v36 = v44;
      sub_10004AAE8((uint64_t)v7, v44, type metadata accessor for AEAParticipant);
      sub_10004AAE8(v36, v47, v46);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v48 = (void *)sub_10006B488(0, v48[2] + 1, 1, (unint64_t)v48);
      }
      unint64_t v38 = v48[2];
      unint64_t v37 = v48[3];
      int v39 = (uint64_t (*)(uint64_t))(v38 + 1);
      if (v38 >= v37 >> 1)
      {
        uint64_t v46 = (uint64_t (*)(uint64_t))(v38 + 1);
        uint64_t v42 = (void *)sub_10006B488(v37 > 1, v38 + 1, 1, (unint64_t)v48);
        int v39 = v46;
        char v48 = v42;
      }
      uint64_t v40 = v47;
      uint64_t v41 = v48;
      v48[2] = v39;
      uint64_t result = (void *)sub_10004AAE8(v40, (uint64_t)v41+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v38, type metadata accessor for AEAParticipant);
      if (v26) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v33 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v33 >= v50) {
      goto LABEL_29;
    }
    unint64_t v34 = *(void *)(v49 + 8 * v33);
    ++v30;
    if (!v34)
    {
      int64_t v30 = v33 + 1;
      if (v33 + 1 >= v50) {
        goto LABEL_29;
      }
      unint64_t v34 = *(void *)(v49 + 8 * v30);
      if (!v34)
      {
        int64_t v30 = v33 + 2;
        if (v33 + 2 >= v50) {
          goto LABEL_29;
        }
        unint64_t v34 = *(void *)(v49 + 8 * v30);
        if (!v34)
        {
          int64_t v30 = v33 + 3;
          if (v33 + 3 >= v50) {
            goto LABEL_29;
          }
          unint64_t v34 = *(void *)(v49 + 8 * v30);
          if (!v34) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v26 = (v34 - 1) & v34;
  }
  int64_t v35 = v33 + 4;
  if (v35 >= v50)
  {
LABEL_29:
    swift_release();
    return v48;
  }
  unint64_t v34 = *(void *)(v49 + 8 * v35);
  if (v34)
  {
    int64_t v30 = v35;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v30 >= v50) {
      goto LABEL_29;
    }
    unint64_t v34 = *(void *)(v49 + 8 * v30);
    ++v35;
    if (v34) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10004AAE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004AB50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10004ABB0(uint64_t a1)
{
  return a1;
}

char *sub_10004ABE8(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    a1[24] = *((unsigned char *)a2 + 24);
    uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v10 = &v7[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v9 + 16);
    *((void *)v10 + 1) = *(char **)((char *)a2 + v9 + 8);
    *((void *)v10 + 2) = v12;
    uint64_t v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v10[v13];
    uint64_t v14 = (const void *)(v11 + v13);
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v18 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v19 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dst, v14, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v20 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
    uint64_t v21 = &v7[v20];
    uint64_t v22 = (uint64_t)a2 + v20;
    *uint64_t v21 = *(unsigned char *)v22;
    *((void *)v21 + 1) = *(void *)(v22 + 8);
    uint64_t v23 = a3[6];
    *(void *)&v7[a3[5]] = *(char **)((char *)a2 + a3[5]);
    v7[v23] = *((unsigned char *)a2 + v23);
    uint64_t v24 = a3[8];
    v7[a3[7]] = *((unsigned char *)a2 + a3[7]);
    v7[v24] = *((unsigned char *)a2 + v24);
    uint64_t v25 = a3[10];
    v7[a3[9]] = *((unsigned char *)a2 + a3[9]);
    v7[v25] = *((unsigned char *)a2 + v25);
    uint64_t v26 = a3[12];
    v7[a3[11]] = *((unsigned char *)a2 + a3[11]);
    v7[v26] = *((unsigned char *)a2 + v26);
    uint64_t v27 = a3[14];
    v7[a3[13]] = *((unsigned char *)a2 + a3[13]);
    v7[v27] = *((unsigned char *)a2 + v27);
    v7[a3[15]] = *((unsigned char *)a2 + a3[15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_10004AE64(id *a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  int v3 = &v2[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  }
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004AF74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v27 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 16);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  *(void *)(v8 + 16) = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v8 + v11);
  uint64_t v12 = (const void *)(v9 + v11);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  id v16 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v17 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  uint64_t v21 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  uint64_t v24 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004B1A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)(a2 + v9);
  *(void *)(v10 + 8) = *(void *)(a2 + v9 + 8);
  *(void *)(v10 + 16) = *(void *)(a2 + v9 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v13 = (void *)(v10 + v12);
  uint64_t v14 = (void *)(v11 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  uint64_t v21 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10004B470(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)(a2 + v6);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + v6 + 8);
  uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v10 = (void *)(v7 + v9);
  uint64_t v11 = (const void *)(v8 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = type metadata accessor for AEAParticipant(0);
  *(_OWORD *)(a1 + *(int *)(v15 + 20)) = *(_OWORD *)(a2 + *(int *)(v15 + 20));
  uint64_t v16 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10004B654(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)uint64_t v9 = *(unsigned char *)(a2 + v8);
  uint64_t v11 = *(void *)(a2 + v8 + 16);
  *(void *)(v9 + 8) = *(void *)(a2 + v8 + 8);
  *(void *)(v9 + 16) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v13 = (void *)(v9 + v12);
  uint64_t v14 = (void *)(v10 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  uint64_t v21 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v27 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v27) = *(unsigned char *)(a2 + v27);
  uint64_t v28 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v28) = *(unsigned char *)(a2 + v28);
  return a1;
}

uint64_t sub_10004B8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004B8E8);
}

uint64_t sub_10004B8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AEAParticipant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10004B9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004B9BC);
}

uint64_t sub_10004B9BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AEAParticipant(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AEAAssessmentSessionConfiguration()
{
  uint64_t result = qword_1000AE120;
  if (!qword_1000AE120) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004BAC4()
{
  uint64_t result = type metadata accessor for AEAParticipant(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10004BB78(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v34 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_10004FB3C(0, v2 & ~(v2 >> 63), 0);
    uint64_t result = sub_10004CDC8(v1);
    uint64_t v41 = result;
    uint64_t v42 = v4;
    char v43 = v5 & 1;
    if (v2 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      uint64_t v33 = v1;
      do
      {
        while (1)
        {
          uint64_t v12 = v41;
          char v13 = v43;
          uint64_t v35 = v42;
          sub_10004CE8C(v40, v41, v42, v43, v1);
          uint64_t v15 = v14;
          uint64_t v16 = (void *)v40[0];
          id v17 = [v14 bundleIdentifier];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v38 = v19;
          uint64_t v39 = v18;

          id v20 = [v15 teamIdentifier];
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v36 = v23;
            uint64_t v37 = v22;
          }
          else
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
          }
          unsigned __int8 v24 = [v15 requiresSignatureValidation];
          unsigned __int8 v25 = [v16 allowsNetworkAccess];
          id v26 = [v16 configurationInfo];
          uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = v44;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10004FB3C(0, v28[2] + 1, 1);
            uint64_t v28 = v44;
          }
          unint64_t v30 = v28[2];
          unint64_t v29 = v28[3];
          if (v30 >= v29 >> 1)
          {
            uint64_t result = sub_10004FB3C(v29 > 1, v30 + 1, 1);
            uint64_t v28 = v44;
          }
          void v28[2] = v30 + 1;
          unint64_t v31 = &v28[7 * v30];
          v31[4] = v39;
          v31[5] = v38;
          v31[6] = v37;
          v31[7] = v36;
          *((unsigned char *)v31 + 64) = v24;
          *((unsigned char *)v31 + 72) = v25;
          v31[10] = v27;
          if (v34) {
            break;
          }
          uint64_t v1 = v33;
          sub_10004CC28(v12, v35, v13, v33);
          uint64_t v7 = v6;
          uint64_t v9 = v8;
          char v11 = v10;
          sub_1000198CC(v12, v35, v13);
          uint64_t v41 = v7;
          uint64_t v42 = v9;
          char v43 = v11 & 1;
          if (!--v2) {
            goto LABEL_20;
          }
        }
        uint64_t v1 = v33;
        if ((v13 & 1) == 0) {
          goto LABEL_23;
        }
        if (__CocoaDictionary.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_1000048A0(&qword_1000AE1B0);
        long long v32 = (void (*)(void *, void))Dictionary.Index._asCocoa.modify();
        __CocoaDictionary.formIndex(after:isUnique:)();
        v32(v40, 0);
        --v2;
      }
      while (v2);
LABEL_20:
      sub_1000198CC(v41, v42, v43);
      return (uint64_t)v44;
    }
  }
  return result;
}

uint64_t sub_10004BEB8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v68 = a3;
  uint64_t v66 = a5;
  uint64_t v63 = type metadata accessor for AEAParticipant(0);
  __chkstk_darwin(v63, v8);
  char v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000048A0(&qword_1000AE180);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000048A0(&qword_1000AE188);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = type metadata accessor for AEAParticipant.Process(0);
  uint64_t v67 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v65 = (uint64_t)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (![a2 isEnabled]) {
    goto LABEL_7;
  }
  id v26 = [a2 configurationsByApplicationDescriptor];
  if (!v26) {
    goto LABEL_7;
  }
  uint64_t v27 = v26;
  uint64_t v61 = a1;
  uint64_t v62 = a4;
  sub_100026CE0(0, &qword_1000AE198);
  sub_100026CE0(0, &qword_1000AE1A0);
  sub_10004C6F8();
  uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v29 = [a2 mainIndividualConfiguration];
  if (!v29)
  {
    swift_bridgeObjectRelease();
    a1 = v61;
    a4 = v62;
LABEL_7:
    sub_10004C6A4();
    swift_allocError();
    unsigned char *v37 = 0;
    swift_willThrow();

    swift_release();
LABEL_8:

    return sub_1000048E4(a4);
  }
  unint64_t v30 = v29;
  uint64_t v59 = v28;
  uint64_t v31 = *(void *)(v68 + 120) + *(void *)(**(void **)(v68 + 120) + 112);
  swift_beginAccess();
  sub_10004C760(v31, (uint64_t)v14);
  uint64_t v32 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v32 - 8) + 48);
  uint64_t v58 = (int *)v32;
  int v34 = v33(v14, 1);
  id v60 = v30;
  if (v34 == 1)
  {
    sub_1000201B4((uint64_t)v14, &qword_1000AE180);
    uint64_t v35 = v67;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    v36(v19, 1, 1, v23);
  }
  else
  {
    sub_10004CB60((uint64_t)v14, (uint64_t)v10, type metadata accessor for AEAParticipant);
    sub_10004CBC8((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
    sub_10004CB60((uint64_t)v10, (uint64_t)v19, type metadata accessor for AEAParticipant.Process);
    sub_10004CBC8((uint64_t)v10, type metadata accessor for AEAParticipant);
    uint64_t v35 = v67;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    v36(v19, 0, 1, v23);
  }
  sub_1000091C4(v62, (uint64_t)v69);
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (v39(v19, 1, v23) == 1)
  {
    uint64_t v40 = v70;
    uint64_t v41 = v71;
    sub_100006340(v69, v70);
    (*(void (**)(void *, uint64_t, uint64_t))(v41 + 8))(v61, v40, v41);
    sub_1000201B4((uint64_t)v19, &qword_1000AE188);
  }
  else
  {
    sub_10004C7C8((uint64_t)v19, (uint64_t)v22);
    v36(v22, 0, 1, v23);
  }
  sub_1000048E4((uint64_t)v69);
  if (v39(v22, 1, v23) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1000201B4((uint64_t)v22, &qword_1000AE188);
    sub_10004C6A4();
    swift_allocError();
    *uint64_t v42 = 1;
    swift_willThrow();

    swift_release();
    a1 = v61;
    a4 = v62;
    goto LABEL_8;
  }
  uint64_t v43 = v65;
  sub_10004C7C8((uint64_t)v22, v65);
  id v44 = v60;
  unsigned __int8 v45 = [v60 allowsNetworkAccess];
  id v46 = [v44 configurationInfo];
  uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v48 = v66;
  sub_10004CB60(v43, v66, type metadata accessor for AEAParticipant.Process);
  uint64_t v49 = v64;
  uint64_t v50 = v48 + *(int *)(v63 + 20);
  *(unsigned char *)uint64_t v50 = v45;
  *(void *)(v50 + 8) = v47;
  uint64_t v51 = sub_10004BB78(v59);
  swift_bridgeObjectRelease();
  uint64_t v52 = v61;
  if (*(void *)(v51 + 16))
  {
    sub_1000048A0(&qword_1000AE030);
    uint64_t v53 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v53 = _swiftEmptyDictionarySingleton;
  }
  v69[0] = v53;
  uint64_t v54 = swift_bridgeObjectRetain();
  sub_10004C82C(v54, 1, v69);
  if (v49)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v55 = v58;
    *(void *)(v48 + v58[5]) = v69[0];
    *(unsigned char *)(v48 + v55[6]) = [a2 allowsAutoCorrection];
    *(unsigned char *)(v48 + v55[7]) = [a2 allowsSmartPunctuation];
    *(unsigned char *)(v48 + v55[8]) = [a2 allowsSpellCheck];
    *(unsigned char *)(v48 + v55[9]) = [a2 allowsPredictiveKeyboard];
    *(unsigned char *)(v48 + v55[10]) = [a2 allowsKeyboardShortcuts];
    *(unsigned char *)(v48 + v55[11]) = [a2 allowsActivityContinuation];
    *(unsigned char *)(v48 + v55[12]) = [a2 allowsDictation];
    *(unsigned char *)(v48 + v55[13]) = [a2 allowsAccessibilitySpeech];
    *(unsigned char *)(v48 + v55[14]) = [a2 allowsPasswordAutoFill];
    unsigned __int8 v56 = [a2 allowsContinuousPathKeyboard];

    swift_release();
    sub_1000048E4(v62);
    uint64_t result = sub_10004CBC8(v43, type metadata accessor for AEAParticipant.Process);
    *(unsigned char *)(v48 + v55[15]) = v56;
  }
  return result;
}

unint64_t sub_10004C6A4()
{
  unint64_t result = qword_1000AE190;
  if (!qword_1000AE190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AE190);
  }
  return result;
}

unint64_t sub_10004C6F8()
{
  unint64_t result = qword_1000AE1A8;
  if (!qword_1000AE1A8)
  {
    sub_100026CE0(255, &qword_1000AE198);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AE1A8);
  }
  return result;
}

uint64_t sub_10004C760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AE180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant.Process(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C82C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v34 = v4;
  if (!v4) {
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v8 = *(void *)(a1 + v5 + 32);
    uint64_t v7 = *(void *)(a1 + v5 + 40);
    uint64_t v10 = *(void *)(a1 + v5 + 48);
    uint64_t v9 = *(void *)(a1 + v5 + 56);
    char v11 = *(unsigned char *)(a1 + v5 + 64);
    char v12 = *(unsigned char *)(a1 + v5 + 72);
    uint64_t v13 = *(void *)(a1 + v5 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v7) {
      return swift_bridgeObjectRelease_n();
    }
    *(void *)&long long v37 = v8;
    *((void *)&v37 + 1) = v7;
    *(void *)&long long v38 = v10;
    *((void *)&v38 + 1) = v9;
    char v39 = v11;
    uint64_t v14 = (void *)*a3;
    unint64_t v16 = sub_1000729F8((uint64_t)&v37);
    uint64_t v17 = v14[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_21;
    }
    char v20 = v15;
    if (v14[3] < v19) {
      break;
    }
    if (a2)
    {
      if (v15) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_10006EC38();
      if (v20) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v24 = v23[6] + 40 * v16;
    long long v25 = v38;
    *(_OWORD *)uint64_t v24 = v37;
    *(_OWORD *)(v24 + 16) = v25;
    *(unsigned char *)(v24 + 32) = v39;
    uint64_t v26 = v23[7] + 16 * v16;
    *(unsigned char *)uint64_t v26 = v12;
    *(void *)(v26 + 8) = v13;
    uint64_t v27 = v23[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_22;
    }
    ++v6;
    v23[2] = v29;
    v5 += 56;
    a2 = 1;
    if (v34 == v6) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_10006CEE4(v19, a2 & 1);
  unint64_t v21 = sub_1000729F8((uint64_t)&v37);
  if ((v20 & 1) != (v22 & 1)) {
    goto LABEL_23;
  }
  unint64_t v16 = v21;
  if ((v20 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v30 = swift_allocError();
  swift_willThrow();
  uint64_t v40 = v30;
  swift_errorRetain();
  sub_1000048A0(&qword_1000ACAA0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v32._object = (void *)0x8000000100088100;
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  _print_unlocked<A, B>(_:_:)();
  v33._countAndFlagsBits = 39;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004CB60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004CBC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10004CC28(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1))
    {
      if (*(_DWORD *)(a4 + 36) == a2)
      {
        _HashTable.occupiedBucket(after:)();
        return;
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__CocoaDictionary.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __CocoaDictionary.Index.key.getter();
  sub_10004D0B8(a1, a2, 1);
  sub_100026CE0(0, &qword_1000AE198);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  sub_100072B9C((uint64_t)v8);
  char v7 = v6;

  if (v7)
  {
    __CocoaDictionary.Index.dictionary.getter();
    __CocoaDictionary.index(after:)();
    sub_1000198CC(a1, a2, 1);
    swift_unknownObjectRelease();
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_10004CDC8(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaDictionary.startIndex.getter();
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v1 = 1 << v5;
  if (v6 < 7) {
    return v1;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  unint64_t v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v3 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v2 = v10;
    --v8;
    v3 += 64;
    if (v10) {
      return __clz(__rbit64(v2)) + v3;
    }
  }
  return v1;
}

void sub_10004CE8C(void *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  unint64_t v6 = a2;
  if ((a5 & 0xC000000000000001) != 0)
  {
    if (a4)
    {
      __CocoaDictionary.lookup(_:)();
      sub_100026CE0(0, &qword_1000AE198);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      sub_100026CE0(0, &qword_1000AE1A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v13;
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_18;
  }
  if (a4)
  {
LABEL_10:
    if (__CocoaDictionary.Index.age.getter() == *(_DWORD *)(a5 + 36))
    {
      __CocoaDictionary.Index.key.getter();
      sub_100026CE0(0, &qword_1000AE198);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      unint64_t v6 = sub_100072B9C((uint64_t)v13);
      char v9 = v8;

      if (v9) {
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  unint64_t v10 = *(void **)(*(void *)(a5 + 48) + 8 * v6);
  char v11 = *(void **)(*(void *)(a5 + 56) + 8 * v6);
  *a1 = v11;
  v10;
  id v12 = v11;
}

uint64_t sub_10004D0B8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AEAAssessmentSessionConfiguration.ConfigurationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004D190);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentSessionConfiguration.ConfigurationError()
{
  return &type metadata for AEAAssessmentSessionConfiguration.ConfigurationError;
}

unint64_t sub_10004D1CC()
{
  unint64_t result = qword_1000AE1B8;
  if (!qword_1000AE1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AE1B8);
  }
  return result;
}

uint64_t sub_10004D220(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = sub_10006B258(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004D374(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v83 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v84 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v82 = (uint64_t)&v70 - v14;
  __chkstk_darwin(v13, v15);
  BOOL v18 = (char *)&v70 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = *v1;
  int64_t v21 = *(void *)(*v1 + 16);
  int64_t v22 = v21 + v19;
  if (__OFADD__(v21, v19))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v20;
  uint64_t v85 = v4;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v24 = *(void *)(v20 + 24) >> 1, v24 < v22))
  {
    if (v21 <= v22) {
      int64_t v25 = v21 + v19;
    }
    else {
      int64_t v25 = v21;
    }
    unint64_t v20 = sub_10006B488(isUniquelyReferenced_nonNull_native, v25, 1, v20);
    *uint64_t v1 = v20;
    int64_t v24 = *(void *)(v20 + 24) >> 1;
  }
  uint64_t v26 = *(void *)(v20 + 16);
  int64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int64_t v22 = *(void *)(v5 + 72);
  int64_t v27 = v24 - v26;
  uint64_t v28 = sub_1000503BC(&v86, v20 + v21 + v22 * v26, v24 - v26, a1);
  if (v28 < v19) {
    goto LABEL_17;
  }
  if (v28)
  {
    uint64_t v30 = *(void *)(v20 + 16);
    BOOL v31 = __OFADD__(v30, v28);
    uint64_t v32 = v30 + v28;
    if (v31)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v20 + 16) = v32;
  }
  if (v28 == v27)
  {
LABEL_18:
    int64_t v72 = *(void *)(v20 + 16);
    uint64_t v29 = v86;
    int64_t v27 = v89;
    uint64_t v80 = v87;
    uint64_t v81 = v88;
    if (v90)
    {
      unint64_t v79 = (v90 - 1) & v90;
      unint64_t v34 = __clz(__rbit64(v90)) | (v89 << 6);
      uint64_t v35 = v85;
LABEL_20:
      uint64_t v36 = v29;
      sub_100020250(*(void *)(v29 + 48) + v34 * v22, (uint64_t)v18);
      uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v74(v18, 0, 1, v35);
      uint64_t v19 = v27;
      goto LABEL_44;
    }
LABEL_22:
    int64_t v37 = v27 + 1;
    uint64_t v35 = v85;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_42:
      uint64_t v35 = v85;
      uint64_t v29 = v16;
    }
    else
    {
      int64_t v38 = (unint64_t)(v81 + 64) >> 6;
      uint64_t v19 = v27;
      if (v37 < v38)
      {
        unint64_t v39 = *(void *)(v80 + 8 * v37);
        if (v39)
        {
LABEL_25:
          unint64_t v79 = (v39 - 1) & v39;
          unint64_t v34 = __clz(__rbit64(v39)) + (v37 << 6);
          int64_t v27 = v37;
          goto LABEL_20;
        }
        int64_t v40 = v27 + 2;
        uint64_t v19 = v27 + 1;
        if (v27 + 2 < v38)
        {
          uint64_t v16 = v29;
          unint64_t v39 = *(void *)(v80 + 8 * v40);
          if (v39)
          {
LABEL_28:
            int64_t v37 = v40;
LABEL_29:
            uint64_t v35 = v85;
            goto LABEL_25;
          }
          uint64_t v19 = v27 + 2;
          uint64_t v35 = v85;
          if (v27 + 3 < v38)
          {
            unint64_t v39 = *(void *)(v80 + 8 * (v27 + 3));
            if (v39)
            {
              int64_t v37 = v27 + 3;
              goto LABEL_29;
            }
            int64_t v40 = v27 + 4;
            uint64_t v19 = v27 + 3;
            uint64_t v35 = v85;
            if (v27 + 4 < v38)
            {
              unint64_t v39 = *(void *)(v80 + 8 * v40);
              if (v39) {
                goto LABEL_28;
              }
              int64_t v37 = v27 + 5;
              uint64_t v19 = v27 + 4;
              uint64_t v35 = v85;
              if (v27 + 5 < v38)
              {
                unint64_t v39 = *(void *)(v80 + 8 * v37);
                if (v39) {
                  goto LABEL_25;
                }
                uint64_t v19 = v38 - 1;
                int64_t v41 = v27 + 6;
                do
                {
                  if (v38 == v41) {
                    goto LABEL_42;
                  }
                  unint64_t v39 = *(void *)(v80 + 8 * v41++);
                }
                while (!v39);
                int64_t v37 = v41 - 1;
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
    uint64_t v36 = v29;
    uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v74(v18, 1, 1, v35);
    unint64_t v79 = 0;
LABEL_44:
    uint64_t v42 = v36;
    uint64_t v86 = v36;
    uint64_t v87 = v80;
    uint64_t v88 = v81;
    int64_t v89 = v19;
    uint64_t v75 = v19;
    unint64_t v90 = v79;
    uint64_t v43 = v82;
    sub_10004F984((uint64_t)v18, v82, &qword_1000AFC50);
    char v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    if (v78(v43, 1, v35) == 1)
    {
      uint64_t v44 = v82;
LABEL_46:
      sub_1000201B4((uint64_t)v18, &qword_1000AFC50);
      sub_1000198D8();
      return sub_1000201B4(v44, &qword_1000AFC50);
    }
    uint64_t v73 = v5 + 56;
    uint64_t v44 = v82;
    int64_t v45 = v72;
    while (1)
    {
      uint64_t v71 = v42;
      sub_1000201B4(v44, &qword_1000AFC50);
      unint64_t v46 = *v1;
      unint64_t v47 = *(void *)(*v1 + 24);
      int64_t v48 = v47 >> 1;
      int64_t v72 = v45;
      if ((uint64_t)(v47 >> 1) < v45 + 1)
      {
        unint64_t v46 = sub_10006B488(v47 > 1, v45 + 1, 1, v46);
        *uint64_t v1 = v46;
        int64_t v48 = *(void *)(v46 + 24) >> 1;
      }
      uint64_t v49 = v84;
      sub_10004F984((uint64_t)v18, v84, &qword_1000AFC50);
      if (v78(v49, 1, v85) == 1)
      {
        uint64_t v50 = v49;
        uint64_t v42 = v71;
        int64_t v45 = v72;
LABEL_87:
        sub_1000201B4(v50, &qword_1000AFC50);
        uint64_t v44 = v82;
        goto LABEL_49;
      }
      unint64_t v76 = v46 + v21;
      uint64_t v51 = v83;
      sub_10002D634(v49, v83);
      uint64_t v42 = v71;
      BOOL v52 = v72 < v48;
      int64_t v53 = v72 <= v48 ? v48 : v72;
      int64_t v77 = v53;
      uint64_t v54 = v51;
      int64_t v55 = v72;
      if (v52) {
        break;
      }
LABEL_48:
      sub_1000202B4(v54);
      int64_t v45 = v77;
      uint64_t v44 = v82;
LABEL_49:
      *(void *)(*v1 + 16) = v45;
      sub_10004F984((uint64_t)v18, v44, &qword_1000AFC50);
      if (v78(v44, 1, v85) == 1) {
        goto LABEL_46;
      }
    }
    while (1)
    {
      sub_1000201B4((uint64_t)v18, &qword_1000AFC50);
      uint64_t result = sub_10002D634(v54, v76 + v55 * v22);
      uint64_t v56 = v86;
      int64_t v57 = v89;
      uint64_t v80 = v87;
      uint64_t v81 = v88;
      if (v90) {
        break;
      }
      int64_t v62 = v89 + 1;
      if (__OFADD__(v89, 1))
      {
        __break(1u);
        return result;
      }
      int64_t v63 = (unint64_t)(v81 + 64) >> 6;
      int64_t v64 = v89;
      if (v62 < v63)
      {
        unint64_t v65 = *(void *)(v80 + 8 * v62);
        if (v65) {
          goto LABEL_65;
        }
        int64_t v64 = v89 + 1;
        if (v89 + 2 < v63)
        {
          unint64_t v65 = *(void *)(v80 + 8 * (v89 + 2));
          if (v65)
          {
            int64_t v62 = v89 + 2;
            goto LABEL_65;
          }
          int64_t v64 = v89 + 2;
          if (v89 + 3 < v63)
          {
            unint64_t v65 = *(void *)(v80 + 8 * (v89 + 3));
            if (v65)
            {
              int64_t v62 = v89 + 3;
              goto LABEL_65;
            }
            int64_t v64 = v89 + 3;
            if (v89 + 4 < v63)
            {
              unint64_t v65 = *(void *)(v80 + 8 * (v89 + 4));
              if (v65)
              {
                int64_t v62 = v89 + 4;
LABEL_65:
                uint64_t v58 = v55;
                unint64_t v79 = (v65 - 1) & v65;
                unint64_t v59 = __clz(__rbit64(v65)) + (v62 << 6);
                int64_t v57 = v62;
LABEL_61:
                sub_100020250(*(void *)(v86 + 48) + v59 * v22, (uint64_t)v18);
                uint64_t v60 = v85;
                v74(v18, 0, 1, v85);
                int64_t v61 = v57;
                uint64_t v54 = v83;
                goto LABEL_83;
              }
              int64_t v62 = v89 + 5;
              int64_t v64 = v89 + 4;
              uint64_t v54 = v83;
              if (v89 + 5 < v63)
              {
                unint64_t v65 = *(void *)(v80 + 8 * v62);
                if (v65) {
                  goto LABEL_65;
                }
                int64_t v66 = v89 + 6;
                while (v63 != v66)
                {
                  unint64_t v65 = *(void *)(v80 + 8 * v66++);
                  if (v65)
                  {
                    int64_t v62 = v66 - 1;
                    goto LABEL_65;
                  }
                }
                uint64_t v54 = v83;
                int64_t v64 = v63 - 1;
              }
            }
          }
        }
      }
      uint64_t v58 = v55;
      uint64_t v60 = v85;
      int64_t v67 = v64;
      v74(v18, 1, 1, v85);
      int64_t v61 = v67;
      unint64_t v79 = 0;
LABEL_83:
      uint64_t v68 = v58 + 1;
      uint64_t v42 = v56;
      uint64_t v86 = v56;
      uint64_t v87 = v80;
      uint64_t v88 = v81;
      int64_t v89 = v61;
      uint64_t v75 = v61;
      unint64_t v90 = v79;
      uint64_t v69 = v84;
      sub_10004F984((uint64_t)v18, v84, &qword_1000AFC50);
      if (v78(v69, 1, v60) == 1)
      {
        int64_t v45 = v68;
        uint64_t v50 = v69;
        goto LABEL_87;
      }
      sub_10002D634(v69, v54);
      int64_t v55 = v68;
      if (v68 == v77) {
        goto LABEL_48;
      }
    }
    uint64_t v58 = v55;
    unint64_t v79 = (v90 - 1) & v90;
    unint64_t v59 = __clz(__rbit64(v90)) | (v89 << 6);
    goto LABEL_61;
  }

  return sub_1000198D8();
}

uint64_t sub_10004DC04(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_10006B5CC(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004DDB4()
{
  return sub_1000272A8();
}

uint64_t sub_10004DDC8()
{
  return sub_1000272A8();
}

uint64_t sub_10004DDDC(uint64_t a1)
{
  sub_10004EF28();
  swift_getKeyPath();
  swift_getKeyPath();
  v8[0] = a1;
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  swift_beginAccess();
  sub_10004F984(v1 + 96, (uint64_t)v8, &qword_1000AE400);
  if (v8[3])
  {
    sub_1000091C4((uint64_t)v8, (uint64_t)v7);
    sub_1000201B4((uint64_t)v8, &qword_1000AE400);
    sub_100006340(v7, v7[3]);
    uint64_t v3 = swift_bridgeObjectRetain();
    int64_t v4 = sub_100010600(v3);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000514FC((uint64_t)v4);
    swift_bridgeObjectRelease();
    sub_10002E87C(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1000048E4((uint64_t)v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_1000201B4((uint64_t)v8, &qword_1000AE400);
  }
}

uint64_t sub_10004DF2C()
{
  uint64_t v1 = v0;
  uint64_t v38 = sub_1000048A0(&qword_1000ACE68);
  uint64_t v37 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v2);
  uint64_t v36 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000048A0(&qword_1000AE408);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_1000048A0(&qword_1000AE410);
  __chkstk_darwin(v35, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000CB7C(v12, (uint64_t)qword_1000B0140);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Resuming participant matching", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = type metadata accessor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = [objc_allocWithZone((Class)RBSProcessMonitor) init];
  v43[0] = &_swiftEmptySetSingleton;
  sub_1000048A0(&qword_1000AE418);
  swift_allocObject();
  *(void *)(v17 + 24) = CurrentValueSubject.init(_:)();
  uint64_t v18 = v17
      + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(void *)(v17
            + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs) = &_swiftEmptySetSingleton;
  uint64_t v44 = v16;
  int64_t v45 = &off_1000A00F8;
  v43[0] = v17;
  sub_100006340(v43, v16);
  sub_10004EF28();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v20 = swift_bridgeObjectRetain();
  BOOL v21 = sub_100010600(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_1000514FC((uint64_t)v21);
  swift_bridgeObjectRelease();
  sub_10002E87C(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000091C4((uint64_t)v43, (uint64_t)&v40);
  sub_1000509B8((uint64_t)&v40, (uint64_t)v39);
  swift_beginAccess();
  sub_10004F9E8((uint64_t)v39, v1 + 96);
  swift_endAccess();
  *(void *)&long long v40 = *(void *)(*sub_100006340(v43, v44) + 24);
  sub_100005840(&qword_1000AE420, &qword_1000AE418);
  *(void *)&long long v40 = Publisher.eraseToAnyPublisher()();
  sub_1000048A0(&qword_1000AE428);
  sub_100005840(&qword_1000AE430, &qword_1000AE428);
  sub_100005840(&qword_1000AE438, &qword_1000AE440);
  Publisher<>.removeDuplicates()();
  swift_release();
  sub_1000091C4(v1 + 56, (uint64_t)&v40);
  uint64_t v23 = swift_allocObject();
  sub_1000093C0(&v40, v23 + 16);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v8, v4);
  int64_t v24 = (uint64_t (**)(uint64_t))&v11[*(int *)(v35 + 76)];
  *int64_t v24 = sub_100050A58;
  v24[1] = (uint64_t (*)(uint64_t))v23;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_allocObject();
  swift_weakInit();
  sub_100005840(&qword_1000AE448, &qword_1000AE410);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  sub_1000201B4((uint64_t)v11, &qword_1000AE410);
  swift_beginAccess();
  sub_1000048A0(&qword_1000ABFF0);
  sub_100005840(&qword_1000ABFF8, &qword_1000ABFF0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v25 = sub_10004F0CC();
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    v39[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v27 = v25 + 32;
    do
    {
      sub_1000091C4(v27, (uint64_t)&v40);
      uint64_t v28 = v41;
      uint64_t v29 = v42;
      sub_100006340(&v40, v41);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
      sub_1000048E4((uint64_t)&v40);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v27 += 40;
      --v26;
    }
    while (v26);
    uint64_t v30 = (void *)v39[0];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = _swiftEmptyArrayStorage;
  }
  *(void *)&long long v40 = v30;
  sub_1000048A0(&qword_1000ACEA8);
  sub_1000048A0(&qword_1000AB3F8);
  sub_100005840(&qword_1000ACEB0, &qword_1000ACEA8);
  BOOL v31 = v36;
  Publisher.map<A>(_:)();
  swift_bridgeObjectRelease();
  swift_allocObject();
  swift_weakInit();
  sub_100005840(&qword_1000ACEB8, &qword_1000ACE68);
  uint64_t v32 = v38;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v32);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  return sub_1000048E4((uint64_t)v43);
}

uint64_t sub_10004E808()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_10004E8A0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_100029520();
    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_10004E938()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v4, v7);
  uint64_t v10 = (char *)v21 - v9;
  __chkstk_darwin(v8, v11);
  unint64_t v13 = (char *)v21 - v12;
  if (qword_1000AA550 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000CB7C(v14, (uint64_t)qword_1000B0140);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Suspending participant matching", v17, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  sub_10004F984(v1 + 96, (uint64_t)&v22, &qword_1000AE400);
  if (*((void *)&v23 + 1))
  {
    sub_1000091C4((uint64_t)&v22, (uint64_t)v21);
    sub_1000201B4((uint64_t)&v22, &qword_1000AE400);
    sub_100006340(v21, v21[3]);
    sub_10002F9CC();
    sub_1000048E4((uint64_t)v21);
  }
  else
  {
    sub_1000201B4((uint64_t)&v22, &qword_1000AE400);
  }
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  swift_beginAccess();
  sub_10004F9E8((uint64_t)&v22, v1 + 96);
  swift_endAccess();
  swift_beginAccess();
  sub_1000685F0();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)&long long v22 = &_swiftEmptySetSingleton;
  swift_retain();
  static Published.subscript.setter();
  sub_100029520();
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)&long long v22 = &_swiftEmptySetSingleton;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v18 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  sub_10004ED08();
  sub_10004F984((uint64_t)v13, (uint64_t)v10, &qword_1000AFC50);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10004F984((uint64_t)v10, (uint64_t)v6, &qword_1000AFC50);
  swift_retain();
  static Published.subscript.setter();
  sub_1000201B4((uint64_t)v10, &qword_1000AFC50);
  swift_release();
  sub_1000201B4((uint64_t)v13, &qword_1000AFC50);
  unint64_t v19 = sub_100071080((uint64_t)_swiftEmptyArrayStorage);
  return sub_10004DDDC(v19);
}

uint64_t sub_10004ED08()
{
  uint64_t v1 = sub_1000048A0(&qword_1000ACE58);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  unint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource))
  {
    uint64_t v15 = *(void *)(v0
                    + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource);
  }
  else
  {
    type metadata accessor for AEAMainParticipantSource();
    uint64_t v15 = swift_allocObject();
    uint64_t v19 = v15 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant;
    uint64_t v16 = type metadata accessor for AEAParticipant(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
    sub_10004F984((uint64_t)v13, (uint64_t)v10, &qword_1000AFC50);
    Published.init(initialValue:)();
    sub_1000201B4((uint64_t)v13, &qword_1000AFC50);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v19, v5, v1);
    *(void *)(v0 + v14) = v15;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v15;
}

uint64_t sub_10004EF28()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000048A0(&qword_1000AB3E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource))
  {
    uint64_t v8 = *(void *)(v0
                   + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource);
  }
  else
  {
    swift_beginAccess();
    sub_1000048A0(&qword_1000ACE48);
    Published.projectedValue.getter();
    swift_endAccess();
    type metadata accessor for AEAConfigurationParticipantSource();
    uint64_t v8 = swift_allocObject();
    v10[1] = _swiftEmptyDictionarySingleton;
    sub_1000048A0(&qword_1000ACE50);
    Published.init(initialValue:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses, v6, v2);
    *(void *)(v1 + v7) = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

uint64_t sub_10004F0CC()
{
  uint64_t v1 = OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources;
  if (*(void *)(v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources);
  }
  else
  {
    sub_1000048A0(&qword_1000ACE40);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_100082BA0;
    uint64_t v3 = sub_10004ED08();
    *(void *)(v2 + 56) = type metadata accessor for AEAMainParticipantSource();
    *(void *)(v2 + 64) = &off_1000A0EC8;
    *(void *)(v2 + 32) = v3;
    uint64_t v4 = sub_10004EF28();
    *(void *)(v2 + 96) = type metadata accessor for AEAConfigurationParticipantSource();
    *(void *)(v2 + 104) = &off_1000A0D38;
    *(void *)(v2 + 72) = v4;
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10004F194()
{
  sub_1000048E4(v0 + 16);
  sub_1000048E4(v0 + 56);
  sub_1000201B4(v0 + 96, &qword_1000AE400);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__candidateProcesses;
  uint64_t v2 = sub_1000048A0(&qword_1000ACE48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__participants;
  uint64_t v4 = sub_1000048A0(&qword_1000ACE28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10004F2A4()
{
  sub_10004F194();

  return swift_deallocClassInstance();
}

uint64_t sub_10004F2FC()
{
  return type metadata accessor for AEAiOSParticipantManager();
}

uint64_t type metadata accessor for AEAiOSParticipantManager()
{
  uint64_t result = qword_1000AE218;
  if (!qword_1000AE218) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004F350()
{
  sub_100028C28(319, &qword_1000ACC08, (uint64_t *)&unk_1000AB340);
  if (v0 <= 0x3F)
  {
    sub_100028C28(319, (unint64_t *)&unk_1000ACC10, &qword_1000AB3F8);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10004F46C()
{
  uint64_t v0 = sub_1000048A0(&qword_1000ACE18);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000048A0(&qword_1000ACE20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_1000048A0(&qword_1000ACE28);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_100005840(&qword_1000ACE30, &qword_1000ACE18);
  sub_100005840(&qword_1000AB3F0, &qword_1000AB3F8);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_100005840(&qword_1000ACE38, &qword_1000ACE20);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v10;
}

uint64_t sub_10004F6C0()
{
  sub_10004ED08();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10004F748(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_10004ED08();
  sub_10004F984(a1, (uint64_t)v9, &qword_1000AFC50);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10004F984((uint64_t)v9, (uint64_t)v6, &qword_1000AFC50);
  swift_retain();
  static Published.subscript.setter();
  sub_1000201B4((uint64_t)v9, &qword_1000AFC50);
  swift_release();
  return sub_1000201B4(a1, &qword_1000AFC50);
}

uint64_t sub_10004F880()
{
  return static Published.subscript.setter();
}

uint64_t sub_10004F8FC()
{
  return static Published.subscript.setter();
}

uint64_t sub_10004F984(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000048A0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004F9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AE400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004FA50@<X0>(void *a1@<X8>)
{
  return sub_100029168(a1);
}

uint64_t sub_10004FA7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004FB6C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10004FA9C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004FCD8(a1, a2, a3, *v3, &qword_1000AE460);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10004FACC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004FCD8(a1, a2, a3, *v3, &qword_1000AE458);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10004FAFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004FE48(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10004FB1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100050088(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10004FB3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005020C(a1, a2, a3, (void *)*v3, &qword_1000AE468, &qword_1000AE470);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10004FB6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000048A0(&qword_1000ABFD8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004FCD8(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000048A0(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004FE48(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000048A0(&qword_1000AD020);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  BOOL v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100050088(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000048A0(&qword_1000AE450);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000501F8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_10005020C(a1, a2, a3, a4, &qword_1000AE018, &qword_1000AE020);
}

uint64_t sub_10005020C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_1000048A0(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 56);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 56 * v11) {
      memmove(v13 + 4, a4 + 4, 56 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 56 * v11 || v15 >= v16 + 56 * v11)
  {
    sub_1000048A0(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000503BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AEAParticipant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8 - 8, v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11, v14);
  unint64_t v17 = (char *)&v32 - v16;
  uint64_t v37 = a4;
  uint64_t v20 = *(void *)(a4 + 56);
  uint64_t v19 = a4 + 56;
  uint64_t v18 = v20;
  uint64_t v21 = -1 << *(unsigned char *)(v19 - 24);
  if (-v21 < 64) {
    uint64_t v22 = ~(-1 << -(char)v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v18;
  if (!a2)
  {
    int64_t v24 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v37;
    a1[1] = v19;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    int64_t v24 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v19 - 24);
  uint64_t v35 = a1;
  int64_t v24 = 0;
  uint64_t v25 = 0;
  int64_t v36 = (unint64_t)(63 - v21) >> 6;
  int64_t v33 = v36 - 1;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    uint64_t v31 = *(void *)(v9 + 72);
    sub_100020250(*(void *)(v37 + 48) + v31 * v27, (uint64_t)v13);
    sub_10002D634((uint64_t)v13, (uint64_t)v17);
    uint64_t result = sub_10002D634((uint64_t)v17, a2);
    if (v25 == a3) {
      goto LABEL_37;
    }
    a2 += v31;
    if (v23) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v28 >= v36) {
      goto LABEL_32;
    }
    unint64_t v29 = *(void *)(v19 + 8 * v28);
    if (!v29) {
      break;
    }
LABEL_18:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v36)
  {
    unint64_t v23 = 0;
    int64_t v24 = v28;
    goto LABEL_36;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v24);
  if (v29) {
    goto LABEL_14;
  }
  int64_t v30 = v28 + 2;
  if (v28 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    unint64_t v23 = 0;
    int64_t v24 = v28 + 2;
    goto LABEL_36;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v24);
  if (v29)
  {
LABEL_14:
    int64_t v28 = v24;
    goto LABEL_18;
  }
  int64_t v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    unint64_t v23 = 0;
LABEL_36:
    a3 = v25;
LABEL_37:
    uint64_t v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v36)
    {
      unint64_t v23 = 0;
      int64_t v24 = v33;
      goto LABEL_36;
    }
    unint64_t v29 = *(void *)(v19 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100050688(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v27 = -1 << *(unsigned char *)(a4 + 32);
  int64_t v28 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v19 = *(void *)(a4 + 48) + 40 * v15;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v23 = *(void *)(v19 + 16);
    uint64_t v22 = *(void *)(v19 + 24);
    LOBYTE(v19) = *(unsigned char *)(v19 + 32);
    uint64_t v24 = *(void *)(a4 + 56) + 16 * v15;
    char v25 = *(unsigned char *)v24;
    uint64_t v26 = *(void *)(v24 + 8);
    *(void *)uint64_t v10 = v20;
    *(void *)(v10 + 8) = v21;
    *(void *)(v10 + 16) = v23;
    *(void *)(v10 + 24) = v22;
    *(unsigned char *)(v10 + 32) = v19;
    *(unsigned char *)(v10 + 40) = v25;
    *(void *)(v10 + 48) = v26;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v27;
      uint64_t result = v28;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1000508D4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100050984@<X0>(void *a1@<X8>)
{
  return sub_100029168(a1);
}

uint64_t sub_1000509B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AE400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050A20()
{
  sub_1000048E4(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100050A58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_100006340(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v2, v3, v4);
}

uint64_t sub_100050AC8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100050B00()
{
  return sub_10004E808();
}

uint64_t sub_100050B08()
{
  return sub_10004E8A0();
}

uint64_t sub_100050B10()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100050B88()
{
  uint64_t v0 = sub_1000048A0(&qword_1000AE570);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000048A0(&qword_1000AE578);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000048A0(&qword_1000AE580);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1000048A0(&qword_1000AE588);
  uint64_t v32 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v15);
  unint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_1000048A0(&qword_1000AE590);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v18);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_1000048A0(&qword_1000ACE58);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_100005840(&qword_1000AE598, &qword_1000AE570);
  sub_10005146C();
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_1000048A0(&qword_1000AFC50);
  sub_100005840(&qword_1000AE5A8, &qword_1000AE578);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_1000048A0(&qword_1000AB3F8);
  uint64_t v21 = v27;
  Publishers.Map.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v21);
  sub_100005840(&qword_1000AE5B0, &qword_1000AE588);
  sub_100005840(&qword_1000AB3F0, &qword_1000AB3F8);
  uint64_t v22 = v30;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v22);
  sub_100005840(&qword_1000AE5B8, &qword_1000AE590);
  uint64_t v23 = v29;
  uint64_t v24 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v23);
  return v24;
}

uint64_t sub_100051088@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AEAParticipant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000251B8(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10003474C((uint64_t)v7);
    uint64_t result = sub_100051594((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = result;
  }
  else
  {
    sub_10002D634((uint64_t)v7, (uint64_t)v12);
    sub_1000048A0(&qword_1000AE5C0);
    unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100080BE0;
    sub_100020250((uint64_t)v12, v16 + v15);
    uint64_t v14 = sub_100051594(v16);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t result = sub_1000202B4((uint64_t)v12);
  }
  *a2 = v14;
  return result;
}

uint64_t sub_100051264()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant;
  uint64_t v2 = sub_1000048A0(&qword_1000ACE58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100051308()
{
  return type metadata accessor for AEAMainParticipantSource();
}

uint64_t type metadata accessor for AEAMainParticipantSource()
{
  uint64_t result = qword_1000AE4A8;
  if (!qword_1000AE4A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10005135C()
{
  sub_1000513EC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000513EC()
{
  if (!qword_1000AE4B8)
  {
    sub_1000054DC(&qword_1000AFC50);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AE4B8);
    }
  }
}

uint64_t sub_100051448()
{
  return sub_100050B88();
}

unint64_t sub_10005146C()
{
  unint64_t result = qword_1000AE5A0;
  if (!qword_1000AE5A0)
  {
    sub_1000054DC(&qword_1000AFC50);
    sub_1000516E8(&qword_1000AC608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AE5A0);
  }
  return result;
}

uint64_t sub_1000514FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1000404DC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100051594(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  Swift::Int v7 = (void **)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_1000516E8((unint64_t *)&qword_1000ACE60);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_100020250(v13, (uint64_t)v7);
      sub_10004068C((uint64_t)v10, v7);
      sub_1000202B4((uint64_t)v10);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_1000516E8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AEAParticipant(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051734(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v39 = a6;
  long long v40 = a4;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_1000B01B0;
  void *v16 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a2)
  {
    *(unsigned char *)(a3 + 136) = 0;
    swift_errorRetain();
    if (qword_1000AA540 == -1)
    {
LABEL_6:
      uint64_t v20 = type metadata accessor for Logger();
      sub_10000CB7C(v20, (uint64_t)qword_1000B0110);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_getErrorValue();
        uint64_t v24 = sub_100062820(v42);
        uint64_t v41 = sub_1000722AC(v24, v25, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "An error occured while beginning the session. Error: %{public}s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain();
      v40(a2);
      swift_errorRelease();
      return swift_errorRelease();
    }
LABEL_19:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v26 = sub_10005336C();
  if (v27)
  {
    uint64_t v28 = v26;
    uint64_t v29 = v27;
    if (qword_1000AA628 != -1) {
      swift_once();
    }
    sub_1000048A0(&qword_1000AD488);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_100080BE0;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_1000347AC();
    *(void *)(v30 + 32) = v28;
    *(void *)(v30 + 40) = v29;
    uint64_t v31 = String.init(format:_:)();
    uint64_t v33 = v32;
  }
  else
  {
    if (qword_1000AA630 != -1) {
      swift_once();
    }
    uint64_t v31 = qword_1000B0300;
    uint64_t v33 = *(void *)algn_1000B0308;
    swift_bridgeObjectRetain();
  }
  sub_100052C58(v31, v33, 3.0);
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)swift_allocObject();
  long long v35[2] = a3;
  v35[3] = a1;
  int64_t v36 = v40;
  v35[4] = a7;
  v35[5] = v36;
  v35[6] = a5;
  id v37 = a1;
  id v38 = a7;
  swift_retain();
  swift_retain();
  sub_1000577B4(v39, (uint64_t)sub_1000549F4, (uint64_t)v35);
  return swift_release();
}

uint64_t sub_100051BD8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v33 = a4;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (void *)((char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)qword_1000B01B0;
  *uint64_t v15 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_6;
  }
  *(unsigned char *)(a2 + 136) = 0;
  if (!a1) {
    goto LABEL_9;
  }
  v32[1] = a6;
  swift_errorRetain();
  if (qword_1000AA540 != -1) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10000CB7C(v19, (uint64_t)qword_1000B0110);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    v32[0] = a5;
    *(_DWORD *)os_log_type_t v22 = 136446210;
    swift_getErrorValue();
    uint64_t v23 = sub_100062820(v35);
    uint64_t v34 = sub_1000722AC(v23, v24, aBlock);
    a5 = (uint64_t (*)(uint64_t))v32[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "An error occured while beginning the session. Error: %{public}s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_9:
  if (a3)
  {
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v33;
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v27;
    aBlock[4] = (uint64_t)sub_100054A7C;
    aBlock[5] = v26;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10005210C;
    aBlock[3] = (uint64_t)&unk_1000A10D0;
    uint64_t v28 = _Block_copy(aBlock);
    id v29 = v27;
    swift_release();
    [a3 setInvalidationHandler:v28];
    _Block_release(v28);
  }
  *(void *)(a2 + 128) = a3;
  id v30 = a3;
  swift_unknownObjectRelease();
  return a5(a1);
}

void sub_100051FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(Strong + 160) = a1;
    swift_errorRetain();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v6 = *(void **)(a3 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  Swift::Int v7 = (void *)_convertErrorToNSError(_:)();
  aBlock[4] = sub_10000AA00;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E26C;
  aBlock[3] = &unk_1000A10F8;
  uint64_t v8 = _Block_copy(aBlock);
  [v6 handleEventDidInvalidateWithError:v7 completion:v8];
  _Block_release(v8);
}

void sub_10005210C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_100052174(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100052200(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1000B01B0;
  *uint64_t v10 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  *(unsigned char *)(a2 + 136) = 0;
  if (!a1) {
    return a3(a1);
  }
  swift_errorRetain();
  if (qword_1000AA540 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000CB7C(v13, (uint64_t)qword_1000B0110);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446210;
    swift_getErrorValue();
    uint64_t v17 = sub_100062820(v20[2]);
    v20[0] = sub_1000722AC(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "An error occured while updating the session. Error: %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return a3(a1);
}

uint64_t sub_100052518(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_1000048A0(&qword_1000AE180);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_1000B01B0;
  void *v16 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v36 = a4;
  swift_errorRetain();
  if (qword_1000AA540 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v20 = type metadata accessor for Logger();
  sub_10000CB7C(v20, (uint64_t)qword_1000B0110);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v35 = a3;
    v39[0] = v24;
    *(_DWORD *)uint64_t v23 = 136446210;
    swift_getErrorValue();
    uint64_t v25 = sub_100062820(v37);
    uint64_t v38 = sub_1000722AC(v25, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "An error occured while ending the session. Error: %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    a3 = v35;
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_9:
  *(void *)(a2 + 128) = 0;
  swift_unknownObjectRelease();
  *(unsigned char *)(a2 + 136) = 0;
  uint64_t v27 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  sub_1000091B4(v27);
  uint64_t v28 = *(void *)(a2 + 64);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v28 + 72))(ObjectType, v28);
  id v30 = *(void **)(a2 + 120);
  swift_beginAccess();
  v30[3] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30[4] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for AEAAssessmentSessionConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 1, 1, v31);
  uint64_t v32 = (uint64_t)v30 + *(void *)(*v30 + 112);
  swift_beginAccess();
  sub_100053ACC((uint64_t)v11, v32);
  swift_endAccess();
  return a3(a1);
}

uint64_t sub_100052990()
{
  if (*(void *)(v0 + 160))
  {
    uint64_t ErrorValue = swift_getErrorValue();
    uint64_t v2 = v21;
    uint64_t v3 = *(void *)(v21 - 8);
    __chkstk_darwin(ErrorValue, v20);
    uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v3 + 16))(v5);
    sub_10003FED0((uint64_t (*)(uint64_t))sub_100053720, 0, v2);
    char v7 = v6;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v7)
    {
      uint64_t v8 = sub_10005336C();
      if (v9)
      {
        uint64_t v10 = v8;
        uint64_t v11 = v9;
        if (qword_1000AA648 == -1) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
      if (qword_1000AA650 != -1) {
        swift_once();
      }
      id v18 = &qword_1000B0340;
LABEL_15:
      uint64_t v15 = *v18;
      uint64_t v17 = v18[1];
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
  }
  uint64_t v12 = sub_10005336C();
  if (!v13)
  {
    if (qword_1000AA640 != -1) {
      swift_once();
    }
    id v18 = &qword_1000B0320;
    goto LABEL_15;
  }
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  if (qword_1000AA638 != -1) {
LABEL_17:
  }
    swift_once();
LABEL_8:
  sub_1000048A0(&qword_1000AD488);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100080BE0;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1000347AC();
  *(void *)(v14 + 32) = v10;
  *(void *)(v14 + 40) = v11;
  uint64_t v15 = String.init(format:_:)();
  uint64_t v17 = v16;
LABEL_16:
  sub_100052C58(v15, v17, 2.1);
  return swift_bridgeObjectRelease();
}

void sub_100052C58(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = sub_1000048A0(&qword_1000ADE90);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v3[18];
  if (v11)
  {
    uint64_t v12 = v3[19];
    uint64_t v13 = (void *)v3[14];
    swift_retain();
    id v14 = [v13 showPromptsAndBanners];
    id v15 = [v14 value];

    if (v15)
    {
      unsigned int v16 = [v15 BOOLValue];

      if (v16)
      {
        uint64_t v17 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
        type metadata accessor for MainActor();
        sub_100009064(v11);
        swift_bridgeObjectRetain();
        uint64_t v18 = static MainActor.shared.getter();
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v18;
        *(void *)(v19 + 24) = &protocol witness table for MainActor;
        *(void *)(v19 + 32) = v11;
        *(void *)(v19 + 40) = v12;
        *(void *)(v19 + 48) = a1;
        *(void *)(v19 + 56) = a2;
        *(double *)(v19 + 64) = a3;
        sub_1000689E0((uint64_t)v10, (uint64_t)&unk_1000AE780, v19);
        sub_1000091B4(v11);
        swift_release();
      }
      else
      {
        sub_1000091B4(v11);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100052E64(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = type metadata accessor for MainActor();
  v8[8] = static MainActor.shared.getter();
  unsigned int v16 = (uint64_t (*)(uint64_t, uint64_t, __n128))((char *)a5 + *a5);
  uint64_t v13 = (void *)swift_task_alloc();
  v8[9] = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_100052F80;
  v14.n128_f64[0] = a1;
  return v16(a7, a8, v14);
}

uint64_t sub_100052F80()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_10005313C;
  }
  else {
    uint64_t v4 = sub_1000530DC;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_1000530DC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005313C()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000CB7C(v1, (uint64_t)qword_1000B0110);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    swift_getErrorValue();
    uint64_t v5 = sub_100062820(v0[3]);
    v0[6] = sub_1000722AC(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to present banner with error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10005336C()
{
  uint64_t v1 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for AEAParticipant(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10003474C((uint64_t)v4);
    return 0;
  }
  else
  {
    sub_100054810((uint64_t)v4, (uint64_t)v9, type metadata accessor for AEAParticipant);
    uint64_t v12 = *((void *)v9 + 1);
    uint64_t v13 = *((void *)v9 + 2);
    id v14 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n();
    id v16 = sub_100053768(v12, v13, 0);
    id v17 = [v16 localizedName];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100054944((uint64_t)v9, type metadata accessor for AEAParticipant);
    swift_bridgeObjectRelease();
  }
  return v15;
}

uint64_t sub_1000535B8()
{
  sub_1000048E4(v0 + 16);
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 72);

  swift_release();
  swift_unknownObjectRelease();
  sub_1000091B4(*(void *)(v0 + 144));
  swift_errorRelease();
  swift_release();
  return v0;
}

uint64_t sub_100053618()
{
  sub_1000535B8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAAssessmentSessionManager()
{
  return self;
}

uint64_t sub_100053674()
{
  if (*v0)
  {
    if (qword_1000AA5A8 != -1) {
      swift_once();
    }
    uint64_t v1 = &qword_1000B0208;
  }
  else
  {
    if (qword_1000AA5A0 != -1) {
      swift_once();
    }
    uint64_t v1 = &qword_1000B01F8;
  }
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100053720()
{
  return swift_dynamicCast();
}

id sub_100053768(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_100053844()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10005388C(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  id v6 = (int *)*((void *)v1 + 4);
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = *((void *)v1 + 6);
  uint64_t v9 = *((void *)v1 + 7);
  double v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000ED6C;
  return sub_100052E64(v10, a1, v4, v5, v6, v7, v8, v9);
}

unsigned char *storeEnumTagSinglePayload for AEAAssessmentSessionManager.SessionManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100053A3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentSessionManager.SessionManagerError()
{
  return &type metadata for AEAAssessmentSessionManager.SessionManagerError;
}

unint64_t sub_100053A78()
{
  unint64_t result = qword_1000AE788;
  if (!qword_1000AE788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AE788);
  }
  return result;
}

uint64_t sub_100053ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AE180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100053B34(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void ***), uint64_t a5)
{
  uint64_t v74 = a2;
  uint64_t v68 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v70 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v9);
  uint64_t v71 = v10;
  uint64_t v73 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = (int *)type metadata accessor for AEAPolicyBundleArguments();
  __chkstk_darwin(v69, v11);
  uint64_t v72 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v13 - 8, v14);
  id v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (void (**)(char *, void, uint64_t, uint64_t))((char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a4;
  *(void *)(v22 + 24) = a5;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_10000CF44;
  *(void *)(v23 + 24) = v22;
  uint64_t v75 = v23;
  uint64_t v24 = qword_1000AA578;
  swift_retain_n();
  swift_retain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_1000B01B0;
  *uint64_t v21 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v26 = (id)v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v25)
  {
    if (*(void *)(a3 + 128))
    {
      aBlock = 0;
      LOBYTE(v77) = 0;
      swift_retain();
      a4(&aBlock);
      swift_release();
      swift_release();
      return swift_release_n();
    }
    else
    {
      if (*(unsigned char *)(a3 + 136))
      {
        sub_10002E52C();
        uint64_t v28 = swift_allocError();
        *id v29 = 0;
        aBlock = (void **)v28;
        LOBYTE(v77) = 1;
        swift_retain();
        a4(&aBlock);
        swift_release();
        swift_errorRelease();
      }
      else
      {
        *(unsigned char *)(a3 + 136) = 1;
        *(void *)(a3 + 160) = 0;
        swift_errorRelease();
        uint64_t v31 = *(void *)(a3 + 56);
        uint64_t v30 = *(void *)(a3 + 64);
        uint64_t ObjectType = swift_getObjectType();
        int64_t v62 = type metadata accessor for AEAParticipant;
        uint64_t v67 = a1;
        sub_1000545F4(a1, (uint64_t)v16, type metadata accessor for AEAParticipant);
        uint64_t v60 = type metadata accessor for AEAParticipant(0);
        uint64_t v33 = *(void *)(v60 - 8);
        unint64_t v59 = *(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
        uint64_t v61 = v33 + 56;
        v59(v16, 0, 1, v60);
        uint64_t v34 = *(void (**)(char *, uint64_t))(v30 + 24);
        uint64_t v66 = v31;
        v34(v16, ObjectType);
        uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
        uint64_t v36 = swift_bridgeObjectRetain();
        uint64_t v65 = ObjectType;
        v35(v36, ObjectType, v30);
        uint64_t v37 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v38 = *(void *)(a3 + 144);
        int64_t v63 = &unk_1000AE790;
        *(void *)(a3 + 144) = &unk_1000AE790;
        *(void *)(a3 + 152) = v37;
        uint64_t v68 = v37;
        swift_retain();
        sub_1000091B4(v38);
        sub_1000545F4(v67, (uint64_t)v16, v62);
        v59(v16, 0, 1, v60);
        uint64_t v64 = v30;
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(ObjectType, v64);
        int64_t v62 = *(uint64_t (**)(uint64_t))(a3 + 120);
        long long v40 = v62;
        uint64_t v41 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v42 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v43 = *(void *)(a3 + 168);
        uint64_t v44 = v72;
        sub_10005458C((uint64_t)v16, v72);
        int64_t v45 = v69;
        *(void *)(v44 + v69[5]) = v39;
        *(void *)(v44 + v45[6]) = v40;
        unint64_t v46 = (void *)(v44 + v45[7]);
        *unint64_t v46 = &unk_1000AE798;
        v46[1] = v41;
        void v46[2] = &unk_1000AE7A0;
        v46[3] = v42;
        unint64_t v47 = (void *)(v44 + v45[8]);
        uint64_t v48 = v68;
        *unint64_t v47 = v63;
        v47[1] = v48;
        *(void *)(v44 + v45[9]) = v43;
        uint64_t v49 = *(void *)(a3 + 96);
        uint64_t v50 = *(void *)(a3 + 104);
        sub_100006340((void *)(a3 + 72), v49);
        uint64_t v69 = *(int **)(v50 + 8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v69 = (int *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v69)(v44, v49, v50);
        (*(void (**)(uint64_t))(v64 + 64))(v65);
        uint64_t v51 = v73;
        sub_1000545F4(v67, v73, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
        unint64_t v52 = (*(unsigned __int8 *)(v70 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        unint64_t v53 = (v71 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v54 = (void *)swift_allocObject();
        long long v54[2] = a3;
        v54[3] = sub_10000CF50;
        v54[4] = v75;
        sub_100054810(v51, (uint64_t)v54 + v52, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
        int64_t v55 = v74;
        *(void *)((char *)v54 + v53) = v74;
        uint64_t v80 = sub_100054878;
        uint64_t v81 = v54;
        aBlock = _NSConcreteStackBlock;
        uint64_t v77 = 1107296256;
        char v78 = sub_100052174;
        unint64_t v79 = &unk_1000A1030;
        uint64_t v56 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        id v57 = v55;
        swift_release();
        uint64_t v58 = v69;
        [v69 activateSessionWithCompletion:v56];
        _Block_release(v56);
        swift_release();

        sub_100054944(v44, (uint64_t (*)(void))type metadata accessor for AEAPolicyBundleArguments);
      }
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005434C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100054384()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000543BC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_10000ED6C;
  return sub_10000BFF8(a1, a2, v3, a3);
}

uint64_t sub_10005446C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10001AC9C;
  return sub_10000B9EC(v0);
}

uint64_t sub_1000544FC()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10001AC9C;
  return sub_10000BC88(v0);
}

uint64_t sub_10005458C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AFC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000545F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005465C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  unint64_t v9 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v9 + 8, v2 | 7);
}

uint64_t sub_100054810(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100054878(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2[2];
  uint64_t v8 = (void (*)(uint64_t))v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = *(void **)((char *)v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100051734(a1, a2, v7, v8, v9, (uint64_t)v2 + v6, v10);
}

uint64_t sub_10005492C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005493C()
{
  return swift_release();
}

uint64_t sub_100054944(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000549A4()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000549F4(uint64_t a1)
{
  return sub_100051BD8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100054A04()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100054A3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100054A7C(uint64_t a1)
{
  sub_100051FF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *sub_100054A98@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_100054AB8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t initializeBufferWithCopyOfBuffer for AEAUserNotificationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AEAUserNotificationError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AEAUserNotificationError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

uint64_t sub_100054B28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100054B44(uint64_t result, int a2)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 9) = 1;
  }
  else
  {
    *(unsigned char *)(result + 9) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAUserNotificationError()
{
  return &type metadata for AEAUserNotificationError;
}

unsigned char *storeEnumTagSinglePayload for AEAUserNotificationResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100054C44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAUserNotificationResponse()
{
  return &type metadata for AEAUserNotificationResponse;
}

unint64_t sub_100054C80()
{
  unint64_t result = qword_1000AE7A8[0];
  if (!qword_1000AE7A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000AE7A8);
  }
  return result;
}

uint64_t sub_100054CD4()
{
  return swift_initClassMetadata2();
}

void sub_100054D0C()
{
}

uint64_t type metadata accessor for AEABoxedTaskBase()
{
  return sub_10000E168();
}

uint64_t sub_100054D80()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100054E14()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_100054E58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)v2 + 112) + 16))(a1, a2, *(void *)(*(void *)v2 + 104));
}

uint64_t sub_100054ED0()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t sub_100054F28()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEABoxedTask()
{
  return sub_10000E168();
}

uint64_t sub_100054FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)a3 + 88))();
}

uint64_t sub_100055030(uint64_t a1, uint64_t a2)
{
  return sub_100054FEC(a1, a2, *v2);
}

uint64_t sub_100055038()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEATaskQueue()
{
  return self;
}

uint64_t destroy for AEATaskSource(uint64_t a1)
{
  sub_1000048E4(a1);
  swift_release();

  return sub_1000048E4(a1 + 48);
}

uint64_t initializeWithCopy for AEATaskSource(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a2 + 48;
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  v8(a1 + 48, v5, v7);
  return a1;
}

uint64_t *assignWithCopy for AEATaskSource(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  sub_10000E5F4(a1 + 6, a2 + 6);
  return a1;
}

uint64_t assignWithTake for AEATaskSource(uint64_t a1, uint64_t a2)
{
  sub_1000048E4(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  sub_1000048E4(a1 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEATaskSource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEATaskSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEATaskSource()
{
  return &type metadata for AEATaskSource;
}

uint64_t sub_100055310()
{
  v5[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v5[0] - 8);
  __chkstk_darwin();
  int v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_10003DAEC();
  static DispatchQoS.unspecified.getter();
  v5[1] = &_swiftEmptyArrayStorage;
  sub_10003DB2C();
  sub_1000048A0(&qword_1000ADB40);
  sub_100005840((unint64_t *)&qword_1000ADB48, &qword_1000ADB40);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5[0]);
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 24) = dispatch_group_create();
  return v0;
}

uint64_t sub_100055540()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for AEAPolicyBundleArguments();
  __chkstk_darwin();
  long long v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000048A0(&qword_1000AE990);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = &_swiftEmptySetSingleton;
  sub_1000048A0(&qword_1000AB3F8);
  Just.init(_:)();
  sub_100005840(&qword_1000AE998, &qword_1000AE990);
  uint64_t v9 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  uint64_t v11 = qword_1000AA578;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_1000B01B0;
  sub_1000048A0(&qword_1000AE9A0);
  uint64_t v13 = (void *)swift_allocObject();
  v13[3] = &_swiftEmptyDictionarySingleton;
  void v13[4] = &_swiftEmptyDictionarySingleton;
  uint64_t v14 = (char *)v13 + *(void *)(*v13 + 112);
  uint64_t v15 = type metadata accessor for AEAAssessmentSessionConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v13[2] = v12;
  type metadata accessor for AEAManagedConfigurationRestrictionStatusManager();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = &_swiftEmptySetSingleton;
  *(void *)&v4[v2[5]] = v9;
  *(void *)&v4[v2[6]] = v13;
  uint64_t v17 = &v4[v2[7]];
  *(void *)uint64_t v17 = &unk_1000AE9A8;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = &unk_1000AE9B0;
  *((void *)v17 + 3) = 0;
  uint64_t v18 = &v4[v2[8]];
  *(void *)uint64_t v18 = &unk_1000AE9B8;
  *((void *)v18 + 1) = 0;
  *(void *)&v4[v2[9]] = v16;
  uint64_t v19 = v1[3];
  uint64_t v20 = v1[4];
  sub_100006340(v1, v19);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 8);
  id v22 = v12;
  uint64_t v23 = v21(v4, v19, v20);
  swift_release();
  sub_1000558EC((uint64_t)v4);
  sub_1000048A0(qword_1000AE9C0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v23;
  return result;
}

uint64_t sub_1000558B4()
{
  return sub_100055948(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000558EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AEAPolicyBundleArguments();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100055948(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for AEAAnyTask()
{
  return sub_10000E168();
}

uint64_t *sub_100055970(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100055A48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100055ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100055B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100055BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100055C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100055CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055D00);
}

uint64_t sub_100055D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100055DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055DD4);
}

uint64_t sub_100055DD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AEAConfigurationProfile(uint64_t a1)
{
  return sub_10001DD34(a1, qword_1000AEAA0);
}

uint64_t sub_100055EB0()
{
  return sub_100056AD0();
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.CalculatorSetting(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x79) {
    goto LABEL_17;
  }
  if (a2 + 135 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 135) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 135;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 135;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 135;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 5) & 0xFFFFFF87 | (8 * ((*a1 >> 1) & 0xF))) ^ 0x7F;
  if (v6 >= 0x78) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.CalculatorSetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 135 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 135) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x79) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x78)
  {
    unsigned int v6 = ((a2 - 121) >> 8) + 1;
    *uint64_t result = a2 - 121;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100056038);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_100056060(unsigned __int8 *a1)
{
  return *a1 >> 5;
}

unsigned char *sub_10005606C(unsigned char *result)
{
  *result &= 0x1Fu;
  return result;
}

unsigned char *sub_10005607C(unsigned char *result, char a2)
{
  *uint64_t result = *result & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings.CalculatorSetting()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings.CalculatorSetting;
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.NotesSetting(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.NotesSetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005620CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings.NotesSetting()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings.NotesSetting;
}

uint64_t initializeBufferWithCopyOfBuffer for AEAConfigurationProfile.Payload.Settings(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AEAConfigurationProfile.Payload.Settings()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for AEAConfigurationProfile.Payload.Settings(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AEAConfigurationProfile.Payload.Settings(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for AEAConfigurationProfile.Payload.Settings(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000563A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000563AC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings;
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.AppAccessSetting(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x78) {
    goto LABEL_17;
  }
  if (a2 + 136 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 136) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 136;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 136;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 136;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 4) & 0xFFFFFF8F | (16 * ((*a1 >> 1) & 7))) ^ 0x7F;
  if (v6 >= 0x77) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.AppAccessSetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 136 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 136) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x78) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x77)
  {
    unsigned int v6 = ((a2 - 120) >> 8) + 1;
    *uint64_t result = a2 - 120;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005653CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = 2 * (((-a2 >> 4) & 7) - 8 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_100056564(unsigned __int8 *a1)
{
  return *a1 >> 4;
}

unsigned char *sub_100056570(unsigned char *result)
{
  *result &= 0xFu;
  return result;
}

unsigned char *sub_100056580(unsigned char *result, char a2)
{
  *uint64_t result = *result & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings.AppAccessSetting()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings.AppAccessSetting;
}

uint64_t *sub_1000565A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    LOBYTE(v10) = v10[8];
    *(void *)uint64_t v9 = v11;
    v9[8] = (char)v10;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10005668C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  LOBYTE(v9) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = (_BYTE)v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100056724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  LOBYTE(v9) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = (_BYTE)v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000567CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_100056860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  LOBYTE(v9) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = (_BYTE)v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000568FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100056910);
}

uint64_t sub_100056910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 > 2) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1000569D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000569E4);
}

uint64_t sub_1000569E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for AEAConfigurationProfile.Payload(uint64_t a1)
{
  return sub_10001DD34(a1, qword_1000AEB38);
}

uint64_t sub_100056AC4()
{
  return sub_100056AD0();
}

uint64_t sub_100056AD0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_100056B74()
{
  sub_100056BCC();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_1000B0298 = (uint64_t)result;
  return result;
}

unint64_t sub_100056BCC()
{
  unint64_t result = qword_1000AEB78;
  if (!qword_1000AEB78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000AEB78);
  }
  return result;
}

uint64_t type metadata accessor for AEAConcreteSecurityTaskPrimitives()
{
  return self;
}

uint64_t sub_100056C30()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    CFStringRef v4 = SecTaskCopySigningIdentifier(*(SecTaskRef *)(v0 + 16), 0);
    if (v4)
    {
      int v5 = (__CFString *)v4;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v0 + 24);
    uint64_t v9 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = v3;
    *(void *)(v0 + 32) = v7;
    swift_bridgeObjectRetain();
    sub_100056D3C(v8, v9);
  }
  sub_100056D50(v1, v2);
  return v3;
}

uint64_t sub_100056CD8()
{
  sub_100056D3C(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAConcreteSecurityTaskPrimitives.ConcreteSecurityTask()
{
  return self;
}

uint64_t sub_100056D3C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100056D50(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

id sub_100056D64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v52 = a1;
  uint64_t v4 = sub_1000048A0(&qword_1000AB5F8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AEAParticipant.SecurityInfo(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (unsigned __int8 *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v2 + 16);
  id v13 = [v52 dataRepresentation];
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006384(v14, v16);
  id v18 = [v12 codeForAuditTokenData:isa];

  if (v18)
  {
    id v19 = [v18 bundleIdentifier];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v22;
      uint64_t v51 = v21;

      id v23 = [v18 entitlements];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v25 = 0;
      }
      unint64_t v29 = sub_100067F08(v25);
      if (!v29)
      {
        unint64_t v29 = sub_100070F14((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v29 + 16) && (uint64_t v30 = sub_100072904(0xD00000000000002BLL, 0x8000000100088530), (v31 & 1) != 0))
      {
        uint64_t v32 = *(void *)(v29 + 56) + 24 * v30;
        uint64_t v33 = *(void *)v32;
        uint64_t v34 = *(void *)(v32 + 8);
        uint64_t v35 = *(unsigned __int8 *)(v32 + 16);
        sub_100006DE4(*(void *)v32, v34, *(unsigned char *)(v32 + 16));
        swift_bridgeObjectRelease();
        char v36 = 0;
        switch(v35)
        {
          case 1:
            break;
          case 2:
            sub_100006E08(v33, v34, 2);
            goto LABEL_17;
          case 3:
            sub_100006E08(v33, v34, 3);
            goto LABEL_17;
          default:
            char v36 = v33 & 1;
            break;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_17:
        char v36 = 0;
      }
      unsigned __int8 v37 = [v18 isTrusted];
      id v38 = [v18 teamIdentifier];
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v41;
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v42 = 0;
      }
      id v43 = [v18 url];
      if (v43)
      {
        uint64_t v44 = v43;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        swift_unknownObjectRelease();
        uint64_t v45 = type metadata accessor for URL();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v7, 0, 1, v45);
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v46 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v7, 1, 1, v46);
      }
      *uint64_t v11 = v37;
      *((void *)v11 + 1) = v40;
      *((void *)v11 + 2) = v42;
      sub_100057288((uint64_t)v7, (uint64_t)&v11[*(int *)(v8 + 24)]);
      uint64_t v47 = v51;
      *(void *)a2 = v52;
      *(void *)(a2 + 8) = v47;
      *(void *)(a2 + 16) = v50;
      *(unsigned char *)(a2 + 24) = v36;
      uint64_t v48 = type metadata accessor for AEAParticipant.Process(0);
      sub_1000572F0((uint64_t)v11, a2 + *(int *)(v48 + 24));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(a2, 0, 1, v48);
      id v49 = v52;
      return v49;
    }
    swift_unknownObjectRelease();
  }
  uint64_t v26 = type metadata accessor for AEAParticipant.Process(0);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);

  return (id)v27(a2, 1, 1, v26);
}

uint64_t type metadata accessor for AEAmacOSProcessLift()
{
  return self;
}

id sub_100057264@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100056D64(a1, a2);
}

uint64_t sub_100057288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AB5F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000572F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant.SecurityInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for AEAUpdateAssessmentModeTask(uint64_t a1)
{
  swift_release();
  sub_1000048E4(a1 + 8);

  uint64_t v2 = *(void **)(a1 + 64);
}

uint64_t initializeWithCopy for AEAUpdateAssessmentModeTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  uint64_t v8 = *(void **)(a2 + 48);
  uint64_t v9 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v10;
  id v11 = v8;
  id v12 = v9;
  id v13 = v10;
  return a1;
}

void *assignWithCopy for AEAUpdateAssessmentModeTask(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  sub_10000E5F4(a1 + 1, a2 + 1);
  uint64_t v4 = (void *)a2[6];
  long long v5 = (void *)a1[6];
  a1[6] = v4;
  id v6 = v4;

  uint64_t v7 = (void *)a2[7];
  uint64_t v8 = (void *)a1[7];
  a1[7] = v7;
  id v9 = v7;

  uint64_t v10 = (void *)a2[8];
  id v11 = (void *)a1[8];
  a1[8] = v10;
  id v12 = v10;

  return a1;
}

uint64_t assignWithTake for AEAUpdateAssessmentModeTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  sub_1000048E4(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  long long v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;

  id v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  uint64_t v7 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  return a1;
}

uint64_t getEnumTagSinglePayload for AEAUpdateAssessmentModeTask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAUpdateAssessmentModeTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAUpdateAssessmentModeTask()
{
  return &type metadata for AEAUpdateAssessmentModeTask;
}

uint64_t sub_100057610(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    swift_retain();
    a1(&v18);
    if (v3)
    {
      swift_release();
      return swift_release();
    }
    uint64_t result = swift_release();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000577B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v6 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v42 + 64);
  __chkstk_darwin(v6 - 8, v8);
  uint64_t v41 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v39 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = __chkstk_darwin(v39, v11);
  unint64_t v13 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v45 = (char *)&v36 - v15;
  sub_1000048A0(&qword_1000AEDA8);
  swift_allocObject();
  uint64_t v51 = Future.init(_:)();
  sub_100005840(&qword_1000AEDB0, &qword_1000AEDA8);
  uint64_t v16 = Publisher.eraseToAnyPublisher()();
  swift_release();
  uint64_t v52 = v16;
  uint64_t v37 = v4;
  swift_beginAccess();
  uint64_t v17 = *(void *)(v4 + 24);
  uint64_t v47 = &v52;
  uint64_t v48 = a1;
  swift_bridgeObjectRetain();
  sub_100057610((void (*)(uint64_t *))sub_10005952C, (uint64_t)v46, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v45;
  UUID.init()();
  uint64_t v36 = v52;
  uint64_t v50 = v52;
  uint64_t v19 = v9;
  id v38 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v20 = v39;
  v38(v13, v18, v39);
  uint64_t v21 = a1;
  uint64_t v22 = v41;
  sub_10005954C(v21, v41, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
  uint64_t v23 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v24 = v19;
  uint64_t v40 = v19;
  uint64_t v25 = (v23 + 24) & ~v23;
  unint64_t v26 = (v10 + *(unsigned __int8 *)(v42 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v37;
  *(void *)(v27 + 16) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v27 + v25, v13, v20);
  sub_100019B44(v22, v27 + v26);
  unint64_t v29 = (void *)(v27 + ((v7 + v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v30 = v44;
  *unint64_t v29 = v43;
  v29[1] = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000048A0(&qword_1000AEDB8);
  sub_100005840(&qword_1000AEDC0, &qword_1000AEDB8);
  uint64_t v31 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v32 = v45;
  v38(v13, v45, v20);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v49 = *(void *)(v28 + 32);
  *(void *)(v28 + 32) = 0x8000000000000000;
  sub_10006D59C(v31, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *(void *)(v28 + 32) = v49;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v40 + 8);
  v34(v13, v20);
  swift_endAccess();
  swift_release();
  v34(v32, v20);
  return swift_release();
}

uint64_t sub_100057C64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8, v9);
  uint64_t v22 = sub_1000048A0(&qword_1000AEDC8);
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v11);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a2;
  sub_10005954C(a3, (uint64_t)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  sub_100019B44((uint64_t)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_100059CA4;
  *(void *)(v16 + 24) = v15;
  swift_retain();
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_1000048A0(&qword_1000AEDB8);
  sub_1000048A0(&qword_1000AEDA8);
  sub_100005840(&qword_1000AEDC0, &qword_1000AEDB8);
  sub_100005840(&qword_1000AEDB0, &qword_1000AEDA8);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  sub_100005840(&qword_1000AEDD0, &qword_1000AEDC8);
  uint64_t v17 = v22;
  uint64_t v18 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v17);
  *uint64_t v21 = v18;
  return swift_release();
}

uint64_t sub_100057F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8, v7);
  sub_10005954C(a2, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  sub_100019B44((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  sub_1000048A0(&qword_1000AEDA8);
  swift_allocObject();
  swift_retain();
  return Future.init(_:)();
}

uint64_t sub_1000580BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000048A0(&qword_1000AEDD8);
  uint64_t v8 = v7 - 8;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  uint64_t v17 = (uint64_t (**)(uint64_t, char))&v12[*(int *)(v8 + 56)];
  sub_10005954C(a4, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
  *uint64_t v17 = sub_10005BAB4;
  v17[1] = (uint64_t (*)(uint64_t, char))v16;
  sub_100019B44((uint64_t)v12, (uint64_t)v15);
  uint64_t v18 = (uint64_t (**)(uint64_t))&v15[*(int *)(v8 + 56)];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_10005BAB4;
  *(void *)(v19 + 24) = v16;
  *uint64_t v18 = sub_100059F58;
  v18[1] = (uint64_t (*)(uint64_t))v19;
  swift_retain();
  PassthroughSubject.send(_:)();
  return sub_100059F8C((uint64_t)v15);
}

uint64_t sub_100058224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v35 = a3;
  uint64_t v36 = a1;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v8);
  uint64_t v41 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  __chkstk_darwin(v10, v11);
  id v38 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8, v16);
  uint64_t v17 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  __chkstk_darwin(v18, v21);
  uint64_t v22 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v35, v18);
  sub_10005954C(a4, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
  unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v24 = (v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (*(unsigned __int8 *)(v14 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v26 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v27 + v23, v22, v18);
  *(void *)(v27 + v24) = v36;
  sub_100019B44((uint64_t)v17, v27 + v25);
  uint64_t v28 = (void *)(v27 + v26);
  uint64_t v29 = v40;
  *uint64_t v28 = v39;
  v28[1] = v29;
  aBlock[4] = sub_100059B28;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_1000A1850;
  uint64_t v30 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  uint64_t v31 = v38;
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = _swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_100005840((unint64_t *)&qword_1000AB7E0, &qword_1000AB7D8);
  uint64_t v33 = v41;
  uint64_t v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
  return swift_release();
}

uint64_t sub_100058680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10 = sub_1000048A0(&qword_1000AE180);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v21 - v16;
  swift_beginAccess();
  sub_100039554(a2);
  swift_endAccess();
  swift_release();
  if (a3)
  {
    swift_errorRetain();
    a5(a3);
    return swift_errorRelease();
  }
  else
  {
    sub_10005954C(a4, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
    uint64_t v19 = type metadata accessor for AEAAssessmentSessionConfiguration();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 0, 1, v19);
    sub_100059C38((uint64_t)v17, (uint64_t)v14);
    uint64_t v20 = a1 + *(void *)(*(void *)a1 + 112);
    swift_beginAccess();
    sub_100053ACC((uint64_t)v14, v20);
    swift_endAccess();
    return ((uint64_t (*)(void))a5)(0);
  }
}

uint64_t sub_100058860@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = type metadata accessor for AEAAssessmentSessionConfiguration();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ([a1 isEnabled])
  {
    sub_1000091C4(a5, (uint64_t)v21);
    swift_retain();
    sub_10004BEB8(a3, a1, a4, (uint64_t)v21, (uint64_t)v16);
    if (v6)
    {

      swift_release();
      return sub_1000048E4(a5);
    }
    sub_1000048E4(a5);
    uint64_t v18 = *(void *)(a4 + 128);
    swift_release();
    if (v18)
    {

      sub_100019B44((uint64_t)v16, a6);
    }
    else
    {
      uint64_t v19 = *(int *)(sub_1000048A0(&qword_1000AEDA0) + 48);
      sub_100019B44((uint64_t)v16, a6);
      *(void *)(a6 + v19) = a2;
    }
    type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction();
  }
  else
  {

    swift_release();
    sub_1000048E4(a5);
    type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100058A10(void (*a1)(void ***), uint64_t a2)
{
  swift_retain();
  sub_100058A68(v2, a1, a2);

  return swift_release();
}

uint64_t sub_100058A68(uint64_t *a1, void (*a2)(void ***), uint64_t a3)
{
  uint64_t v6 = sub_1000048A0(&qword_1000AFC50);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v75 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v10 = __chkstk_darwin(v68, v9);
  uint64_t v74 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v69 = (uint64_t)&v66 - v13;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v71 = *(void *)(v14 - 8);
  uint64_t v72 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v70 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction();
  uint64_t v18 = __chkstk_darwin(updated, v17);
  uint64_t v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  unint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = swift_allocObject();
  unint64_t v76 = a2;
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  unint64_t v26 = (void *)a1[7];
  unint64_t v25 = (void *)a1[8];
  uint64_t v27 = (void *)a1[6];
  uint64_t v28 = *a1;
  sub_1000091C4((uint64_t)(a1 + 1), (uint64_t)&aBlock);
  swift_retain_n();
  id v29 = v25;
  id v30 = v27;
  id v31 = v26;
  swift_retain();
  sub_100058860(v29, v30, v31, v28, (uint64_t)&aBlock, (uint64_t)v23);
  uint64_t v33 = (uint64_t)v74;
  uint64_t v34 = (uint64_t)v75;
  uint64_t v36 = v70;
  uint64_t v35 = v71;
  uint64_t v37 = v72;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = sub_10000CF44;
  *(void *)(v38 + 24) = v24;
  uint64_t v66 = v38;
  sub_10005954C((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t updated = v24;
  uint64_t v67 = v23;
  if (!EnumCaseMultiPayload)
  {
    uint64_t v42 = v69;
    sub_100019B44((uint64_t)v20, v69);
    uint64_t v43 = *a1;
    uint64_t v44 = qword_1000AA578;
    swift_retain_n();
    if (v44 != -1) {
      swift_once();
    }
    uint64_t v45 = qword_1000B01B0;
    *uint64_t v36 = qword_1000B01B0;
    (*(void (**)(void *, void, uint64_t))(v35 + 104))(v36, enum case for DispatchPredicate.onQueue(_:), v37);
    id v46 = (id)v45;
    LOBYTE(v45) = _dispatchPreconditionTest(_:)();
    uint64_t v47 = *(void (**)(void *, uint64_t))(v35 + 8);
    v35 += 8;
    v47(v36, v37);
    if (v45)
    {
      if (*(unsigned char *)(v43 + 136))
      {
        sub_10002E52C();
        uint64_t v48 = swift_allocError();
        unsigned char *v49 = 0;
        aBlock = (void **)v48;
        LOBYTE(v78) = 1;
        v76(&aBlock);
        swift_errorRelease();
        swift_release_n();
      }
      else
      {
        *(unsigned char *)(v43 + 136) = 1;
        uint64_t v57 = *(void *)(v43 + 64);
        uint64_t ObjectType = swift_getObjectType();
        sub_10005954C(v42, v34, type metadata accessor for AEAParticipant);
        uint64_t v59 = type metadata accessor for AEAParticipant(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v34, 0, 1, v59);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 24))(v34, ObjectType, v57);
        uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
        uint64_t v61 = swift_bridgeObjectRetain();
        v60(v61, ObjectType, v57);
        uint64_t v62 = v69;
        int64_t v63 = (void *)swift_allocObject();
        v63[2] = v43;
        v63[3] = sub_10000CF50;
        v63[4] = v66;
        swift_retain();
        swift_retain();
        sub_1000577B4(v62, (uint64_t)sub_1000594C4, (uint64_t)v63);
        swift_release_n();
        uint64_t v42 = v62;
        swift_release();
      }
      swift_release();
      sub_100059460(v42, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
      sub_100059460((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
      swift_release();
      return swift_release();
    }
    __break(1u);
LABEL_22:
    swift_once();
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v40 = *(void **)&v20[*(int *)(sub_1000048A0(&qword_1000AEDA0) + 48)];
    sub_100019B44((uint64_t)v20, v33);
    uint64_t v41 = *a1;
    swift_retain_n();
    swift_retain();
    sub_100053B34(v33, v40, v41, v76, a3);

    swift_release_n();
    swift_release();
    swift_release();
    sub_100059460(v33, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
    sub_100059460((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    swift_release();
    return swift_release();
  }
  uint64_t v42 = *a1;
  uint64_t v50 = qword_1000AA578;
  swift_retain_n();
  if (v50 != -1) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v51 = qword_1000B01B0;
  *uint64_t v36 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v35 + 104))(v36, enum case for DispatchPredicate.onQueue(_:), v37);
  id v52 = (id)v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v35 + 8))(v36, v37);
  if (v51)
  {
    unint64_t v53 = *(void **)(v42 + 128);
    if (v53)
    {
      uint64_t v54 = v76;
      if ((*(unsigned char *)(v42 + 136) & 1) == 0)
      {
        *(unsigned char *)(v42 + 136) = 1;
        swift_unknownObjectRetain();
        sub_100052990();
        uint64_t v64 = (void *)swift_allocObject();
        v64[2] = v42;
        v64[3] = sub_10000CF50;
        v64[4] = v66;
        uint64_t v81 = sub_10002E508;
        uint64_t v82 = v64;
        aBlock = _NSConcreteStackBlock;
        uint64_t v78 = 1107296256;
        unint64_t v79 = sub_10005E26C;
        uint64_t v80 = &unk_1000A17D8;
        uint64_t v65 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        [v53 deactivateWithCompletion:v65];
        _Block_release(v65);
        swift_release_n();
        swift_release();
        swift_unknownObjectRelease();
        sub_100059460((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
        swift_release();
        return swift_release();
      }
      sub_10002E52C();
      uint64_t v55 = swift_allocError();
      *uint64_t v56 = 0;
      aBlock = (void **)v55;
      LOBYTE(v78) = 1;
      swift_unknownObjectRetain();
      v54(&aBlock);
      swift_errorRelease();
      swift_release_n();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      aBlock = 0;
      LOBYTE(v78) = 0;
      v76(&aBlock);
      swift_release_n();
      swift_release();
    }
    sub_100059460((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction()
{
  uint64_t result = qword_1000AEE50;
  if (!qword_1000AEE50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100059428()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100059460(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000594C4(uint64_t a1)
{
  return sub_100052200(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000594D4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100059514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100059524()
{
  return swift_release();
}

uint64_t sub_10005952C(uint64_t *a1)
{
  return sub_100057C64(*a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10005954C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000595B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v8 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_1000597E0(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = v1 + v7;
  uint64_t v10 = (uint64_t *)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *a1;

  return sub_100058224(v13, v8, v1 + v4, v9, v11, v12);
}

uint64_t sub_1000598E8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7 + 8) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();

  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v8 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_100059B28()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + v3);
  uint64_t v8 = *(void (**)(uint64_t))(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100058680(v6, v0 + v2, v7, v0 + v5, v8);
}

uint64_t sub_100059C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AE180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100059CA4()
{
  uint64_t v1 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100057F7C(v2, v3);
}

uint64_t sub_100059D08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100059D3C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100059ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000580BC(a1, a2, v6, v7);
}

uint64_t sub_100059F58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100059F8C(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AEDD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100059FEC(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = &v20[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = a2[1];
      id v46 = *a2;
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v21;
      *((void *)a1 + 2) = a2[2];
      a1[24] = *((unsigned char *)a2 + 24);
      uint64_t v22 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      unint64_t v23 = &a1[v22];
      uint64_t v24 = (char *)a2 + v22;
      char *v23 = *((unsigned char *)a2 + v22);
      uint64_t v25 = *(uint64_t *)((char *)a2 + v22 + 16);
      *((void *)v23 + 1) = *(char **)((char *)a2 + v22 + 8);
      *((void *)v23 + 2) = v25;
      uint64_t v26 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dsta = &v23[v26];
      uint64_t v27 = &v24[v26];
      uint64_t v28 = type metadata accessor for URL();
      uint64_t v29 = *(void *)(v28 - 8);
      id v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      id v31 = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30(v27, 1, v28))
      {
        uint64_t v32 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dsta, v27, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dsta, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dsta, 0, 1, v28);
      }
      uint64_t v37 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      uint64_t v38 = &a1[v37];
      uint64_t v39 = (char *)a2 + v37;
      *uint64_t v38 = *v39;
      *((void *)v38 + 1) = *((void *)v39 + 1);
      uint64_t v40 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
      *(void *)&a1[v40[5]] = *(char **)((char *)a2 + v40[5]);
      a1[v40[6]] = *((unsigned char *)a2 + v40[6]);
      a1[v40[7]] = *((unsigned char *)a2 + v40[7]);
      a1[v40[8]] = *((unsigned char *)a2 + v40[8]);
      a1[v40[9]] = *((unsigned char *)a2 + v40[9]);
      a1[v40[10]] = *((unsigned char *)a2 + v40[10]);
      a1[v40[11]] = *((unsigned char *)a2 + v40[11]);
      a1[v40[12]] = *((unsigned char *)a2 + v40[12]);
      a1[v40[13]] = *((unsigned char *)a2 + v40[13]);
      a1[v40[14]] = *((unsigned char *)a2 + v40[14]);
      a1[v40[15]] = *((unsigned char *)a2 + v40[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v41 = *(int *)(sub_1000048A0(&qword_1000AEDA0) + 48);
      uint64_t v42 = *(char **)((char *)a2 + v41);
      *(void *)&a1[v41] = v42;
      id v43 = v42;
      goto LABEL_14;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = a2[1];
      uint64_t v45 = *a2;
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v8;
      *((void *)a1 + 2) = a2[2];
      a1[24] = *((unsigned char *)a2 + 24);
      uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = (char *)a2 + v9;
      *uint64_t v10 = *((unsigned char *)a2 + v9);
      uint64_t v12 = *(uint64_t *)((char *)a2 + v9 + 16);
      *((void *)v10 + 1) = *(char **)((char *)a2 + v9 + 8);
      *((void *)v10 + 2) = v12;
      uint64_t v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v10[v13];
      uint64_t v14 = &v11[v13];
      uint64_t v15 = type metadata accessor for URL();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      uint64_t v18 = v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        uint64_t v19 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dst, v14, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      uint64_t v33 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      uint64_t v34 = &a1[v33];
      uint64_t v35 = (char *)a2 + v33;
      *uint64_t v34 = *v35;
      *((void *)v34 + 1) = *((void *)v35 + 1);
      uint64_t v36 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
      *(void *)&a1[v36[5]] = *(char **)((char *)a2 + v36[5]);
      a1[v36[6]] = *((unsigned char *)a2 + v36[6]);
      a1[v36[7]] = *((unsigned char *)a2 + v36[7]);
      a1[v36[8]] = *((unsigned char *)a2 + v36[8]);
      a1[v36[9]] = *((unsigned char *)a2 + v36[9]);
      a1[v36[10]] = *((unsigned char *)a2 + v36[10]);
      a1[v36[11]] = *((unsigned char *)a2 + v36[11]);
      a1[v36[12]] = *((unsigned char *)a2 + v36[12]);
      a1[v36[13]] = *((unsigned char *)a2 + v36[13]);
      a1[v36[14]] = *((unsigned char *)a2 + v36[14]);
      a1[v36[15]] = *((unsigned char *)a2 + v36[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

void sub_10005A4FC(id *a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease();
    uint64_t v8 = &v7[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    }
    type metadata accessor for AEAParticipant(0);
    swift_bridgeObjectRelease();
    type metadata accessor for AEAAssessmentSessionConfiguration();
    swift_bridgeObjectRelease();
    uint64_t v11 = *(id *)((char *)a1 + *(int *)(sub_1000048A0(&qword_1000AEDA0) + 48));
  }
  else if (!EnumCaseMultiPayload)
  {

    swift_bridgeObjectRelease();
    uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease();
    uint64_t v4 = &v3[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    }
    type metadata accessor for AEAParticipant(0);
    swift_bridgeObjectRelease();
    type metadata accessor for AEAAssessmentSessionConfiguration();
    swift_bridgeObjectRelease();
  }
}

void *sub_10005A734(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v21 = (void *)*a2;
    uint64_t v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    a1[2] = a2[2];
    *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v22 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    unint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    char *v23 = *((unsigned char *)a2 + v22);
    uint64_t v25 = *(void *)((char *)a2 + v22 + 16);
    *((void *)v23 + 1) = *(void *)((char *)a2 + v22 + 8);
    *((void *)v23 + 2) = v25;
    uint64_t v26 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dsta = &v23[v26];
    uint64_t v27 = &v24[v26];
    uint64_t v28 = type metadata accessor for URL();
    uint64_t v29 = *(void *)(v28 - 8);
    id v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    id v31 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      uint64_t v32 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dsta, v27, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dsta, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dsta, 0, 1, v28);
    }
    uint64_t v37 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
    uint64_t v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    *uint64_t v38 = *v39;
    *((void *)v38 + 1) = *((void *)v39 + 1);
    uint64_t v40 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
    *(void *)((char *)a1 + v40[5]) = *(void *)((char *)a2 + v40[5]);
    *((unsigned char *)a1 + v40[6]) = *((unsigned char *)a2 + v40[6]);
    *((unsigned char *)a1 + v40[7]) = *((unsigned char *)a2 + v40[7]);
    *((unsigned char *)a1 + v40[8]) = *((unsigned char *)a2 + v40[8]);
    *((unsigned char *)a1 + v40[9]) = *((unsigned char *)a2 + v40[9]);
    *((unsigned char *)a1 + v40[10]) = *((unsigned char *)a2 + v40[10]);
    *((unsigned char *)a1 + v40[11]) = *((unsigned char *)a2 + v40[11]);
    *((unsigned char *)a1 + v40[12]) = *((unsigned char *)a2 + v40[12]);
    *((unsigned char *)a1 + v40[13]) = *((unsigned char *)a2 + v40[13]);
    *((unsigned char *)a1 + v40[14]) = *((unsigned char *)a2 + v40[14]);
    *((unsigned char *)a1 + v40[15]) = *((unsigned char *)a2 + v40[15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = *(int *)(sub_1000048A0(&qword_1000AEDA0) + 48);
    uint64_t v42 = *(void **)((char *)a2 + v41);
    *(void *)((char *)a1 + v41) = v42;
    id v43 = v42;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v8 = (void *)*a2;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    uint64_t v12 = *(void *)((char *)a2 + v9 + 16);
    *((void *)v10 + 1) = *(void *)((char *)a2 + v9 + 8);
    *((void *)v10 + 2) = v12;
    uint64_t v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v10[v13];
    uint64_t v14 = &v11[v13];
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    id v18 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v19 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dst, v14, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v33 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    *uint64_t v34 = *v35;
    *((void *)v34 + 1) = *((void *)v35 + 1);
    uint64_t v36 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
    *(void *)((char *)a1 + v36[5]) = *(void *)((char *)a2 + v36[5]);
    *((unsigned char *)a1 + v36[6]) = *((unsigned char *)a2 + v36[6]);
    *((unsigned char *)a1 + v36[7]) = *((unsigned char *)a2 + v36[7]);
    *((unsigned char *)a1 + v36[8]) = *((unsigned char *)a2 + v36[8]);
    *((unsigned char *)a1 + v36[9]) = *((unsigned char *)a2 + v36[9]);
    *((unsigned char *)a1 + v36[10]) = *((unsigned char *)a2 + v36[10]);
    *((unsigned char *)a1 + v36[11]) = *((unsigned char *)a2 + v36[11]);
    *((unsigned char *)a1 + v36[12]) = *((unsigned char *)a2 + v36[12]);
    *((unsigned char *)a1 + v36[13]) = *((unsigned char *)a2 + v36[13]);
    *((unsigned char *)a1 + v36[14]) = *((unsigned char *)a2 + v36[14]);
    *((unsigned char *)a1 + v36[15]) = *((unsigned char *)a2 + v36[15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_10005AC00(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100059460((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      id v18 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v19 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      *uint64_t v20 = *((unsigned char *)a2 + v19);
      *((void *)v20 + 1) = *(void *)((char *)a2 + v19 + 8);
      *((void *)v20 + 2) = *(void *)((char *)a2 + v19 + 16);
      uint64_t v22 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dsta = &v20[v22];
      unint64_t v23 = &v21[v22];
      uint64_t v24 = type metadata accessor for URL();
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      id v27 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26(v23, 1, v24))
      {
        uint64_t v28 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dsta, v23, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dsta, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dsta, 0, 1, v24);
      }
      uint64_t v33 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      *uint64_t v34 = *v35;
      *((void *)v34 + 1) = *((void *)v35 + 1);
      uint64_t v36 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
      *(void *)((char *)a1 + v36[5]) = *(void *)((char *)a2 + v36[5]);
      *((unsigned char *)a1 + v36[6]) = *((unsigned char *)a2 + v36[6]);
      *((unsigned char *)a1 + v36[7]) = *((unsigned char *)a2 + v36[7]);
      *((unsigned char *)a1 + v36[8]) = *((unsigned char *)a2 + v36[8]);
      *((unsigned char *)a1 + v36[9]) = *((unsigned char *)a2 + v36[9]);
      *((unsigned char *)a1 + v36[10]) = *((unsigned char *)a2 + v36[10]);
      *((unsigned char *)a1 + v36[11]) = *((unsigned char *)a2 + v36[11]);
      *((unsigned char *)a1 + v36[12]) = *((unsigned char *)a2 + v36[12]);
      *((unsigned char *)a1 + v36[13]) = *((unsigned char *)a2 + v36[13]);
      *((unsigned char *)a1 + v36[14]) = *((unsigned char *)a2 + v36[14]);
      *((unsigned char *)a1 + v36[15]) = *((unsigned char *)a2 + v36[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v37 = *(int *)(sub_1000048A0(&qword_1000AEDA0) + 48);
      uint64_t v38 = *(void **)((char *)a2 + v37);
      *(void *)((char *)a1 + v37) = v38;
      id v39 = v38;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v8 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      *uint64_t v9 = *((unsigned char *)a2 + v8);
      *((void *)v9 + 1) = *(void *)((char *)a2 + v8 + 8);
      *((void *)v9 + 2) = *(void *)((char *)a2 + v8 + 16);
      uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v9[v11];
      uint64_t v12 = &v10[v11];
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
      id v16 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v15(v12, 1, v13))
      {
        uint64_t v17 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
      }
      uint64_t v29 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      id v30 = (char *)a1 + v29;
      id v31 = (char *)a2 + v29;
      *id v30 = *v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      uint64_t v32 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
      *(void *)((char *)a1 + v32[5]) = *(void *)((char *)a2 + v32[5]);
      *((unsigned char *)a1 + v32[6]) = *((unsigned char *)a2 + v32[6]);
      *((unsigned char *)a1 + v32[7]) = *((unsigned char *)a2 + v32[7]);
      *((unsigned char *)a1 + v32[8]) = *((unsigned char *)a2 + v32[8]);
      *((unsigned char *)a1 + v32[9]) = *((unsigned char *)a2 + v32[9]);
      *((unsigned char *)a1 + v32[10]) = *((unsigned char *)a2 + v32[10]);
      *((unsigned char *)a1 + v32[11]) = *((unsigned char *)a2 + v32[11]);
      *((unsigned char *)a1 + v32[12]) = *((unsigned char *)a2 + v32[12]);
      *((unsigned char *)a1 + v32[13]) = *((unsigned char *)a2 + v32[13]);
      *((unsigned char *)a1 + v32[14]) = *((unsigned char *)a2 + v32[14]);
      *((unsigned char *)a1 + v32[15]) = *((unsigned char *)a2 + v32[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10005B110(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    a1[24] = a2[24];
    uint64_t v16 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v17 = &a1[v16];
    id v18 = &a2[v16];
    *uint64_t v17 = a2[v16];
    *(_OWORD *)(v17 + 8) = *(_OWORD *)&a2[v16 + 8];
    uint64_t v19 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v20 = &v17[v19];
    uint64_t v21 = &v18[v19];
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v27 = type metadata accessor for AEAParticipant(0);
    *(_OWORD *)&a1[*(int *)(v27 + 20)] = *(_OWORD *)&a2[*(int *)(v27 + 20)];
    uint64_t v28 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
    *(void *)&a1[v28[5]] = *(void *)&a2[v28[5]];
    a1[v28[6]] = a2[v28[6]];
    a1[v28[7]] = a2[v28[7]];
    a1[v28[8]] = a2[v28[8]];
    a1[v28[9]] = a2[v28[9]];
    a1[v28[10]] = a2[v28[10]];
    a1[v28[11]] = a2[v28[11]];
    a1[v28[12]] = a2[v28[12]];
    a1[v28[13]] = a2[v28[13]];
    a1[v28[14]] = a2[v28[14]];
    a1[v28[15]] = a2[v28[15]];
    uint64_t v29 = sub_1000048A0(&qword_1000AEDA0);
    *(void *)&a1[*(int *)(v29 + 48)] = *(void *)&a2[*(int *)(v29 + 48)];
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    *(void *)a1 = *(void *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    a1[24] = a2[24];
    uint64_t v7 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    *uint64_t v8 = a2[v7];
    *(_OWORD *)(v8 + 8) = *(_OWORD *)&a2[v7 + 8];
    uint64_t v10 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v9[v10];
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v25 = type metadata accessor for AEAParticipant(0);
    *(_OWORD *)&a1[*(int *)(v25 + 20)] = *(_OWORD *)&a2[*(int *)(v25 + 20)];
    uint64_t v26 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
    *(void *)&a1[v26[5]] = *(void *)&a2[v26[5]];
    a1[v26[6]] = a2[v26[6]];
    a1[v26[7]] = a2[v26[7]];
    a1[v26[8]] = a2[v26[8]];
    a1[v26[9]] = a2[v26[9]];
    a1[v26[10]] = a2[v26[10]];
    a1[v26[11]] = a2[v26[11]];
    a1[v26[12]] = a2[v26[12]];
    a1[v26[13]] = a2[v26[13]];
    a1[v26[14]] = a2[v26[14]];
    a1[v26[15]] = a2[v26[15]];
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_10005B540(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100059460((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      a1[24] = a2[24];
      uint64_t v16 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      uint64_t v17 = &a1[v16];
      id v18 = &a2[v16];
      *uint64_t v17 = a2[v16];
      *(_OWORD *)(v17 + 8) = *(_OWORD *)&a2[v16 + 8];
      uint64_t v19 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      uint64_t v20 = &v17[v19];
      uint64_t v21 = &v18[v19];
      uint64_t v22 = type metadata accessor for URL();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v27 = type metadata accessor for AEAParticipant(0);
      *(_OWORD *)&a1[*(int *)(v27 + 20)] = *(_OWORD *)&a2[*(int *)(v27 + 20)];
      uint64_t v28 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
      *(void *)&a1[v28[5]] = *(void *)&a2[v28[5]];
      a1[v28[6]] = a2[v28[6]];
      a1[v28[7]] = a2[v28[7]];
      a1[v28[8]] = a2[v28[8]];
      a1[v28[9]] = a2[v28[9]];
      a1[v28[10]] = a2[v28[10]];
      a1[v28[11]] = a2[v28[11]];
      a1[v28[12]] = a2[v28[12]];
      a1[v28[13]] = a2[v28[13]];
      a1[v28[14]] = a2[v28[14]];
      a1[v28[15]] = a2[v28[15]];
      uint64_t v29 = sub_1000048A0(&qword_1000AEDA0);
      *(void *)&a1[*(int *)(v29 + 48)] = *(void *)&a2[*(int *)(v29 + 48)];
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      a1[24] = a2[24];
      uint64_t v7 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      *uint64_t v8 = a2[v7];
      *(_OWORD *)(v8 + 8) = *(_OWORD *)&a2[v7 + 8];
      uint64_t v10 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      uint64_t v11 = &v8[v10];
      uint64_t v12 = &v9[v10];
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      uint64_t v25 = type metadata accessor for AEAParticipant(0);
      *(_OWORD *)&a1[*(int *)(v25 + 20)] = *(_OWORD *)&a2[*(int *)(v25 + 20)];
      uint64_t v26 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
      *(void *)&a1[v26[5]] = *(void *)&a2[v26[5]];
      a1[v26[6]] = a2[v26[6]];
      a1[v26[7]] = a2[v26[7]];
      a1[v26[8]] = a2[v26[8]];
      a1[v26[9]] = a2[v26[9]];
      a1[v26[10]] = a2[v26[10]];
      a1[v26[11]] = a2[v26[11]];
      a1[v26[12]] = a2[v26[12]];
      a1[v26[13]] = a2[v26[13]];
      a1[v26[14]] = a2[v26[14]];
      a1[v26[15]] = a2[v26[15]];
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10005B994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10005B9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10005B9E8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10005B9F8()
{
  uint64_t result = type metadata accessor for AEAAssessmentSessionConfiguration();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    void v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_10005BAB8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100006340(a1, a1[3]);
  sub_1000091C4(*v6 + 168, (uint64_t)v78);
  uint64_t v7 = sub_100019D8C((uint64_t)v78, (uint64_t)v79);
  __chkstk_darwin(v7, v7);
  uint64_t v9 = (uint64_t *)((char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = *v9;
  uint64_t v12 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  uint64_t v76 = v12;
  uint64_t v77 = &off_10009F5C0;
  *(void *)&long long v75 = v11;
  type metadata accessor for AEAPolicyStore();
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = sub_100019D8C((uint64_t)&v75, v12);
  __chkstk_darwin(v14, v14);
  uint64_t v16 = (uint64_t *)((char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = *v16;
  uint64_t v13[5] = v12;
  v13[6] = &off_10009F5C0;
  v13[2] = v18;
  sub_1000048E4((uint64_t)&v75);
  sub_1000048E4((uint64_t)v78);
  sub_10005C3C4(a2, (uint64_t)&v75);
  sub_1000091C4((uint64_t)a1, (uint64_t)&v72);
  uint64_t v70 = v13;
  if (v76)
  {
    sub_1000048E4((uint64_t)&v72);
    sub_1000093C0(&v75, (uint64_t)v78);
  }
  else
  {
    unint64_t v79 = &type metadata for AEAiOSPolicyBundleFactory;
    uint64_t v80 = &off_1000A2E70;
    uint64_t v19 = swift_allocObject();
    v78[0] = v19;
    sub_1000093C0(&v72, v19 + 16);
    *(void *)(v19 + 56) = v13;
    swift_retain();
    sub_100004840((uint64_t)&v75);
  }
  uint64_t v20 = sub_100006340(a1, a1[3]);
  sub_1000091C4(*v20 + 384, (uint64_t)&v75);
  uint64_t v21 = sub_100019D8C((uint64_t)&v75, v76);
  __chkstk_darwin(v21, v21);
  uint64_t v23 = (uint64_t *)((char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = *v23;
  uint64_t v26 = type metadata accessor for AEAConcreteSecurityTaskPrimitives();
  uint64_t v73 = v26;
  uint64_t v74 = &off_1000A1688;
  *(void *)&long long v72 = v25;
  uint64_t v69 = type metadata accessor for AEAiOSOSProcessLift();
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = sub_100019D8C((uint64_t)&v72, v26);
  __chkstk_darwin(v28, v28);
  id v30 = (uint64_t *)((char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  uint64_t v32 = *v30;
  void v27[5] = v26;
  v27[6] = &off_1000A1688;
  uint64_t v27[2] = v32;
  sub_1000048E4((uint64_t)&v72);
  sub_1000048E4((uint64_t)&v75);
  uint64_t v33 = sub_100006340(a1, a1[3]);
  sub_1000091C4(*v33 + 424, (uint64_t)&v75);
  uint64_t v34 = sub_100019D8C((uint64_t)&v75, v76);
  __chkstk_darwin(v34, v34);
  uint64_t v36 = (uint64_t *)((char *)&v68 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  uint64_t v38 = *v36;
  uint64_t v39 = type metadata accessor for AEAConcreteRunningBoardPrimitives();
  uint64_t v73 = v39;
  uint64_t v74 = &off_1000A0118;
  *(void *)&long long v72 = v38;
  type metadata accessor for AEAiOSParticipantManager();
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = sub_100019D8C((uint64_t)&v72, v39);
  __chkstk_darwin(v41, v41);
  id v43 = (uint64_t *)((char *)&v68 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v44 + 16))(v43);
  uint64_t v45 = *v43;
  swift_retain();
  uint64_t v46 = sub_10005C69C(v45, (uint64_t)v27, v40);
  sub_1000048E4((uint64_t)&v72);
  sub_1000048E4((uint64_t)&v75);
  uint64_t v47 = sub_100006340(a1, a1[3]);
  sub_1000091C4(*v47 + 320, (uint64_t)&v75);
  sub_1000091C4((uint64_t)v78, (uint64_t)&v72);
  sub_100006340(a1, a1[3]);
  swift_retain();
  swift_retain();
  id v48 = sub_1000661B4();
  uint64_t v49 = sub_100019D8C((uint64_t)&v75, v76);
  __chkstk_darwin(v49, v49);
  uint64_t v51 = (uint64_t *)((char *)&v68 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v52 + 16))(v51);
  uint64_t v53 = *v51;
  uint64_t v54 = type metadata accessor for AEAConcreteLaunchServicesPrimitives();
  v71[3] = v54;
  v71[4] = &off_1000A3398;
  v71[0] = v53;
  type metadata accessor for AEAAssessmentSessionManager();
  uint64_t v55 = swift_allocObject();
  uint64_t v56 = sub_100019D8C((uint64_t)v71, v54);
  __chkstk_darwin(v56, v56);
  uint64_t v58 = (uint64_t *)((char *)&v68 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v59 + 16))(v58);
  uint64_t v60 = sub_10005CD48(*v58, v46, &v72, (uint64_t)v48, v55);
  sub_1000048E4((uint64_t)v71);
  swift_release();
  sub_1000048E4((uint64_t)&v75);
  sub_1000091C4((uint64_t)a1, (uint64_t)&v75);
  uint64_t v61 = swift_allocObject();
  sub_1000093C0(&v75, v61 + 16);
  sub_1000091C4((uint64_t)a1, (uint64_t)&v75);
  uint64_t v62 = swift_allocObject();
  sub_1000093C0(&v75, v62 + 16);
  *(void *)(v62 + 56) = v60;
  uint64_t v64 = a1[3];
  uint64_t v63 = a1[4];
  uint64_t v65 = sub_100006340(a1, v64);
  a3[3] = v64;
  a3[4] = *(void *)(v63 + 8);
  uint64_t v66 = sub_100037C54(a3);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v64 - 8) + 16))(v66, v65, v64);
  sub_1000091C4((uint64_t)v78, (uint64_t)(a3 + 7));
  a3[16] = v69;
  a3[17] = (uint64_t)&off_1000A30A0;
  swift_retain();
  swift_release();
  a3[5] = v46;
  a3[6] = (uint64_t)&off_1000A0E28;
  a3[12] = v60;
  a3[13] = (uint64_t)v27;
  a3[18] = (uint64_t)sub_10005CF08;
  a3[19] = v61;
  a3[20] = (uint64_t)sub_10005CF78;
  a3[21] = v62;
  return sub_1000048E4((uint64_t)v78);
}

uint64_t sub_10005C3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AA678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C42C()
{
  return sub_10005CF28((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_10005C444(uint64_t a1, void *a2)
{
  sub_1000048A0(&qword_1000AEE90);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100082BA0;
  uint64_t v4 = *sub_100006340(a2, a2[3]);
  uint64_t v5 = *sub_100006340(a2, a2[3]);
  uint64_t v6 = *(void *)(*sub_100006340(a2, a2[3]) + 504);
  uint64_t v7 = sub_100006340((void *)(v4 + 168), *(void *)(v4 + 192));
  uint64_t v8 = sub_100006340((void *)(v5 + 592), *(void *)(v5 + 616));
  uint64_t v9 = *v7;
  uint64_t v10 = *v8;
  swift_unknownObjectRetain();
  uint64_t v11 = sub_10005CB18(v9, v10, v6);
  swift_unknownObjectRelease();
  *(void *)(v3 + 32) = v11;
  *(void *)(v3 + 40) = sub_100055540();
  specialized Array._endMutation()();
  return v3;
}

uint64_t sub_10005C554(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_1000048A0(&qword_1000AEE88);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100082BA0;
  uint64_t v9 = *(void **)(*sub_100006340(a3, a3[3]) + 144);
  uint64_t v10 = (objc_class *)type metadata accessor for AEAActiveRestrictionUUIDFetchingService();
  objc_allocWithZone(v10);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v11 = sub_10001BC5C(v9, a4);
  *(void *)(v8 + 56) = v10;
  *(void *)(v8 + 64) = &off_10009F608;
  *(void *)(v8 + 32) = v11;
  uint64_t v12 = *(void **)(*sub_100006340(a3, a3[3]) + 144);
  sub_10005CF84(a1, (uint64_t)v17);
  uint64_t v13 = (objc_class *)type metadata accessor for AEAAssessmentModeService();
  id v14 = objc_allocWithZone(v13);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v15 = sub_100060434(v12, (uint64_t)v17, a2);
  swift_unknownObjectRelease();
  swift_release();
  *(void *)(v8 + 96) = v13;
  *(void *)(v8 + 104) = &off_1000A1C50;
  *(void *)(v8 + 72) = v15;
  return v8;
}

uint64_t sub_10005C69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000048A0(&qword_1000ACE28);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000048A0(&qword_1000ACE48);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AEAiOSOSProcessLift();
  uint64_t v24 = &off_1000A30A0;
  *(void *)&long long v22 = a2;
  uint64_t v20 = type metadata accessor for AEAConcreteRunningBoardPrimitives();
  uint64_t v21 = &off_1000A0118;
  *(void *)&long long v19 = a1;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a3 + 128) = 0;
  uint64_t v14 = a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__candidateProcesses;
  uint64_t v18 = &_swiftEmptySetSingleton;
  sub_1000048A0((uint64_t *)&unk_1000AB340);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  uint64_t v15 = a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__participants;
  uint64_t v18 = &_swiftEmptySetSingleton;
  sub_1000048A0(&qword_1000AB3F8);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15, v9, v6);
  *(void *)(a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager_subscriptions) = &_swiftEmptyArrayStorage;
  *(void *)(a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource) = 0;
  *(void *)(a3
            + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource) = 0;
  *(void *)(a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources) = 0;
  sub_1000093C0(&v22, a3 + 56);
  sub_1000093C0(&v19, a3 + 16);
  return a3;
}

uint64_t sub_10005C90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v23[3] = v6;
  v23[4] = &off_10009F5C0;
  v23[0] = a1;
  uint64_t v7 = type metadata accessor for AEAConcreteMobileKeyBagPrimitives();
  uint64_t v21 = v7;
  long long v22 = &off_10009E208;
  v20[0] = a2;
  type metadata accessor for AEAWaitForReadPermissionTask();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_100019D8C((uint64_t)v23, v6);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100019D8C((uint64_t)v20, v21);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = *v11;
  uint64_t v18 = *v15;
  *(void *)(v8 + 40) = v6;
  *(void *)(v8 + 48) = &off_10009F5C0;
  *(void *)(v8 + 16) = v17;
  *(void *)(v8 + 80) = v7;
  *(void *)(v8 + 88) = &off_10009E208;
  *(void *)(v8 + 56) = v18;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 96) = a3;
  sub_1000048E4((uint64_t)v20);
  sub_1000048E4((uint64_t)v23);
  return v8;
}

uint64_t sub_10005CB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v24[3] = type metadata accessor for AEAConcreteFileSystemPrimitives();
  void v24[4] = &off_10009F5C0;
  v24[0] = a1;
  v23[3] = type metadata accessor for AEAConcreteMobileKeyBagPrimitives();
  v23[4] = &off_10009E208;
  v23[0] = a2;
  sub_1000091C4((uint64_t)v24, (uint64_t)v21);
  sub_1000091C4((uint64_t)v23, (uint64_t)v19);
  uint64_t v6 = sub_100019D8C((uint64_t)v21, v22);
  __chkstk_darwin(v6, v6);
  uint64_t v8 = (uint64_t *)&v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100019D8C((uint64_t)v19, v20);
  __chkstk_darwin(v10, v10);
  uint64_t v12 = (uint64_t *)&v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = *v8;
  uint64_t v15 = *v12;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v16 = sub_10005C90C(v14, v15, a3);
  sub_1000048E4((uint64_t)v19);
  sub_1000048E4((uint64_t)v21);
  sub_1000048A0(&qword_1000AEE98);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  sub_1000048E4((uint64_t)v24);
  sub_1000048E4((uint64_t)v23);
  return v17;
}

uint64_t sub_10005CD48(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = type metadata accessor for AEAConcreteLaunchServicesPrimitives();
  long long v19 = &off_1000A3398;
  *(void *)&long long v17 = a1;
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_1000B01B0;
  sub_1000048A0(&qword_1000AE9A0);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[3] = &_swiftEmptyDictionarySingleton;
  void v11[4] = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = (char *)v11 + *(void *)(*v11 + 112);
  uint64_t v13 = type metadata accessor for AEAAssessmentSessionConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v11[2] = v10;
  *(void *)(a5 + 120) = v11;
  *(void *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 136) = 0;
  type metadata accessor for AEAManagedConfigurationRestrictionStatusManager();
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = 0;
  *(void *)(a5 + 144) = 0;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &_swiftEmptySetSingleton;
  *(void *)(a5 + 168) = v14;
  sub_1000093C0(&v17, a5 + 16);
  *(void *)(a5 + 56) = a2;
  *(void *)(a5 + 64) = &off_1000A0E28;
  sub_1000093C0(a3, a5 + 72);
  *(void *)(a5 + 112) = a4;
  id v15 = v10;
  return a5;
}

uint64_t sub_10005CED0()
{
  sub_1000048E4(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005CF08(uint64_t a1)
{
  return sub_10005C444(a1, (void *)(v1 + 16));
}

uint64_t sub_10005CF10()
{
  return sub_10005CF28((void (*)(void))&_swift_release);
}

uint64_t sub_10005CF28(void (*a1)(void))
{
  sub_1000048E4(v1 + 16);
  a1(*(void *)(v1 + 56));

  return _swift_deallocObject(v1, 64, 7);
}

uint64_t sub_10005CF78(uint64_t a1, uint64_t a2)
{
  return sub_10005C554(a1, a2, (void *)(v2 + 16), *(void *)(v2 + 56));
}

uint64_t sub_10005CF84(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for AEAManagedConfigurationRestrictions()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AEAManagedConfigurationRestrictions(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AEAManagedConfigurationRestrictions(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AEAManagedConfigurationRestrictions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AEAManagedConfigurationRestrictions(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAManagedConfigurationRestrictions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAManagedConfigurationRestrictions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions()
{
  return &type metadata for AEAManagedConfigurationRestrictions;
}

void sub_10005D20C(uint64_t a1, unint64_t a2)
{
  if (a2 == 2)
  {
    Swift::UInt8 v3 = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Swift::UInt8 v3 = a2 & 1;
  }
  Hasher._combine(_:)(v3);
  if ((a2 & 0xFF00) == 0x200)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    unsigned int v4 = (a2 >> 8) & 1;
  }
  Hasher._combine(_:)(v4);
  if ((a2 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    unsigned int v5 = WORD1(a2) & 1;
  }
  Hasher._combine(_:)(v5);
  if ((a2 & 0xFF000000) == 0x2000000)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    unsigned int v6 = BYTE3(a2) & 1;
  }
  Hasher._combine(_:)(v6);
  if ((a2 & 0xFF00000000) == 0x200000000)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v7 = HIDWORD(a2) & 1;
  }
  Hasher._combine(_:)(v7);
  if ((a2 & 0xFF0000000000) == 0x20000000000)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v8 = (a2 >> 40) & 1;
  }
  Hasher._combine(_:)(v8);
}

BOOL sub_10005D314(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  void v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_10005DD5C((uint64_t *)v5, (uint64_t *)v7);
}

uint64_t sub_10005D370(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return sub_10005D70C((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

Swift::Int sub_10005D3BC()
{
  return Hasher._finalize()();
}

uint64_t sub_10005D418()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005D470()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005D4C8()
{
  uint64_t v1 = *(unsigned int *)(v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  sub_10005D20C((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

void sub_10005D514(uint64_t a1)
{
  sub_10005D20C(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_10005D524()
{
  uint64_t v1 = *(unsigned int *)(v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  sub_10005D20C((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t sub_10005D56C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10005D588(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

uint64_t sub_10005D588(uint64_t a1, unint64_t a2)
{
  if (a1 == 2)
  {
    if (a2 != 2) {
      return 0;
    }
  }
  else if (a2 == 2 || ((((a1 & 1) == 0) ^ a2) & 1) == 0)
  {
    return 0;
  }
  if ((a1 & 0xFF00) == 0x200)
  {
    if (BYTE1(a2) != 2) {
      return 0;
    }
  }
  else if (BYTE1(a2) == 2 || ((a1 & 0x100) == 0) == ((a2 >> 8) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF0000) == 0x20000)
  {
    if (BYTE2(a2) != 2) {
      return 0;
    }
  }
  else if (BYTE2(a2) == 2 || ((a1 & 0x10000) == 0) == ((a2 >> 16) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF000000) == 0x2000000)
  {
    if (BYTE3(a2) != 2) {
      return 0;
    }
  }
  else if (BYTE3(a2) == 2 || ((a1 & 0x1000000) == 0) == ((a2 >> 24) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF00000000) == 0x200000000)
  {
    if (BYTE4(a2) != 2) {
      return 0;
    }
  }
  else if (BYTE4(a2) == 2 || ((a1 & (unint64_t)&_mh_execute_header) == 0) == (BYTE4(a2) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF0000000000) == 0x20000000000)
  {
    if (BYTE5(a2) == 2) {
      return 1;
    }
  }
  else if (BYTE5(a2) != 2 && ((a1 & 0x10000000000) == 0) != ((a2 >> 40) & 1))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10005D70C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = (v2 & 1) == 0;
    if (v3 == 2 || ((v5 ^ v3) & 1) == 0) {
      return v4;
    }
  }
  int v6 = a1[1];
  int v7 = a2[1];
  if (v6 == 2)
  {
    if (v7 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v8 = (v6 & 1) == 0;
    if (v7 == 2 || ((v8 ^ v7) & 1) == 0) {
      return v4;
    }
  }
  int v9 = a1[2];
  int v10 = a2[2];
  if (v9 == 2)
  {
    if (v10 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v11 = (v9 & 1) == 0;
    if (v10 == 2 || ((v11 ^ v10) & 1) == 0) {
      return v4;
    }
  }
  int v12 = a1[3];
  int v13 = a2[3];
  if (v12 == 2)
  {
    if (v13 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v14 = (v12 & 1) == 0;
    if (v13 == 2 || ((v14 ^ v13) & 1) == 0) {
      return v4;
    }
  }
  int v15 = a1[4];
  int v16 = a2[4];
  if (v15 == 2)
  {
    if (v16 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v17 = (v15 & 1) == 0;
    if (v16 == 2 || ((v17 ^ v16) & 1) == 0) {
      return v4;
    }
  }
  int v18 = a1[5];
  int v19 = a2[5];
  if (v18 == 2)
  {
    if (v19 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v20 = (v18 & 1) == 0;
    if (v19 == 2 || ((v20 ^ v19) & 1) == 0) {
      return v4;
    }
  }
  int v21 = a1[6];
  int v22 = a2[6];
  if (v21 == 2)
  {
    if (v22 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v23 = (v21 & 1) == 0;
    if (v22 == 2 || ((v23 ^ v22) & 1) == 0) {
      return v4;
    }
  }
  int v24 = a1[7];
  int v25 = a2[7];
  if (v24 == 2)
  {
    if (v25 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v26 = (v24 & 1) == 0;
    if (v25 == 2 || ((v26 ^ v25) & 1) == 0) {
      return v4;
    }
  }
  int v27 = a1[8];
  int v28 = a2[8];
  if (v27 == 2)
  {
    if (v28 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v29 = (v27 & 1) == 0;
    if (v28 == 2 || ((v29 ^ v28) & 1) == 0) {
      return v4;
    }
  }
  int v30 = a1[9];
  int v31 = a2[9];
  if (v30 == 2)
  {
    if (v31 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v32 = (v30 & 1) == 0;
    if (v31 == 2 || ((v32 ^ v31) & 1) == 0) {
      return v4;
    }
  }
  int v33 = a1[10];
  int v34 = a2[10];
  if (v33 == 2)
  {
    if (v34 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v35 = (v33 & 1) == 0;
    if (v34 == 2 || ((v35 ^ v34) & 1) == 0) {
      return v4;
    }
  }
  int v36 = a1[11];
  int v37 = a2[11];
  if (v36 == 2)
  {
    if (v37 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v38 = (v36 & 1) == 0;
    if (v37 == 2 || ((v38 ^ v37) & 1) == 0) {
      return v4;
    }
  }
  int v39 = a1[12];
  int v40 = a2[12];
  if (v39 == 2)
  {
    if (v40 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v41 = (v39 & 1) == 0;
    if (v40 == 2 || ((v41 ^ v40) & 1) == 0) {
      return v4;
    }
  }
  int v42 = a1[13];
  int v43 = a2[13];
  if (v42 == 2)
  {
    if (v43 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v44 = (v42 & 1) == 0;
    if (v43 == 2 || ((v44 ^ v43) & 1) == 0) {
      return v4;
    }
  }
  int v45 = a1[14];
  int v46 = a2[14];
  if (v45 == 2)
  {
    if (v46 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v47 = (v45 & 1) == 0;
    if (v46 == 2 || ((v47 ^ v46) & 1) == 0) {
      return v4;
    }
  }
  int v48 = a1[15];
  int v49 = a2[15];
  if (v48 == 2)
  {
    if (v49 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v50 = (v48 & 1) == 0;
    if (v49 == 2 || ((v50 ^ v49) & 1) == 0) {
      return v4;
    }
  }
  int v51 = a1[16];
  int v52 = a2[16];
  if (v51 == 2)
  {
    if (v52 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v53 = (v51 & 1) == 0;
    if (v52 == 2 || ((v53 ^ v52) & 1) == 0) {
      return v4;
    }
  }
  int v54 = a1[17];
  int v55 = a2[17];
  if (v54 == 2)
  {
    if (v55 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v56 = (v54 & 1) == 0;
    if (v55 == 2 || ((v56 ^ v55) & 1) == 0) {
      return v4;
    }
  }
  int v57 = a1[18];
  int v58 = a2[18];
  if (v57 == 2)
  {
    if (v58 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v59 = (v57 & 1) == 0;
    if (v58 == 2 || ((v59 ^ v58) & 1) == 0) {
      return v4;
    }
  }
  int v60 = a1[19];
  int v61 = a2[19];
  if (v60 == 2)
  {
    if (v61 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v62 = (v60 & 1) == 0;
    if (v61 == 2 || ((v62 ^ v61) & 1) == 0) {
      return v4;
    }
  }
  int v63 = a1[20];
  int v64 = a2[20];
  if (v63 == 2)
  {
    if (v64 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v65 = (v63 & 1) == 0;
    if (v64 == 2 || ((v65 ^ v64) & 1) == 0) {
      return v4;
    }
  }
  int v66 = a1[21];
  int v67 = a2[21];
  if (v66 == 2)
  {
    if (v67 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v68 = (v66 & 1) == 0;
    if (v67 == 2 || ((v68 ^ v67) & 1) == 0) {
      return v4;
    }
  }
  int v69 = a1[22];
  int v70 = a2[22];
  if (v69 == 2)
  {
    if (v70 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v71 = (v69 & 1) == 0;
    if (v70 == 2 || ((v71 ^ v70) & 1) == 0) {
      return v4;
    }
  }
  int v72 = a1[23];
  int v73 = a2[23];
  if (v72 == 2)
  {
    if (v73 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v74 = (v72 & 1) == 0;
    if (v73 == 2 || ((v74 ^ v73) & 1) == 0) {
      return v4;
    }
  }
  int v75 = a1[24];
  int v76 = a2[24];
  if (v75 == 2)
  {
    if (v76 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v77 = (v75 & 1) == 0;
    if (v76 == 2 || ((v77 ^ v76) & 1) == 0) {
      return v4;
    }
  }
  int v78 = a1[25];
  int v79 = a2[25];
  if (v78 == 2)
  {
    if (v79 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v80 = (v78 & 1) == 0;
    if (v79 == 2 || ((v80 ^ v79) & 1) == 0) {
      return v4;
    }
  }
  int v81 = a1[26];
  int v82 = a2[26];
  if (v81 == 2)
  {
    if (v82 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v83 = (v81 & 1) == 0;
    if (v82 == 2 || ((v83 ^ v82) & 1) == 0) {
      return v4;
    }
  }
  unint64_t v84 = *(unsigned int *)(a1 + 27) | ((unint64_t)*(unsigned __int16 *)(a1 + 31) << 32);
  unint64_t v85 = *(unsigned int *)(a2 + 27) | ((unint64_t)*(unsigned __int16 *)(a2 + 31) << 32);
  if (v84 == 3)
  {
    if (v85 != 3) {
      return 0;
    }
  }
  else if (v85 == 3 || (sub_10005D588(v84, v85) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

BOOL sub_10005DD5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = *a2;
  if (*a1 == 3)
  {
    if (v6 != 3) {
      return 0;
    }
  }
  else
  {
    if (v6 == 3) {
      return 0;
    }
    char v21 = BYTE2(*a1);
    char v22 = BYTE3(v4);
    char v23 = BYTE4(v4);
    char v24 = BYTE5(v4);
    char v25 = BYTE6(v4);
    uint64_t v7 = a1[1];
    uint64_t v8 = a1[2];
    __int16 v20 = v4;
    char v26 = HIBYTE(v4);
    char v28 = BYTE2(v7);
    char v29 = BYTE3(v7);
    char v30 = BYTE4(v7);
    char v31 = BYTE5(v7);
    char v32 = BYTE6(v7);
    uint64_t v9 = a1[3];
    __int16 v27 = v7;
    char v33 = HIBYTE(v7);
    char v35 = BYTE2(v8);
    char v36 = BYTE3(v8);
    char v37 = BYTE4(v8);
    char v38 = BYTE5(v8);
    char v39 = BYTE6(v8);
    uint64_t v10 = *((unsigned __int8 *)a1 + 32);
    __int16 v34 = v8;
    char v40 = HIBYTE(v8);
    *((void *)&v11 + 1) = v10;
    *(void *)&long long v11 = v9;
    __int16 v41 = v9;
    char v42 = BYTE2(v9);
    int v43 = v9 >> 24;
    __int16 v44 = (unint64_t)(v11 >> 24) >> 32;
    char v46 = BYTE2(v5);
    char v47 = BYTE3(v5);
    char v48 = BYTE4(v5);
    char v49 = BYTE5(v5);
    char v50 = BYTE6(v5);
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[2];
    __int16 v45 = v5;
    char v51 = HIBYTE(v5);
    uint64_t v52 = v12;
    char v54 = BYTE2(v13);
    char v55 = BYTE3(v13);
    char v56 = BYTE4(v13);
    char v57 = BYTE5(v13);
    char v58 = BYTE6(v13);
    uint64_t v14 = a2[3];
    __int16 v53 = v13;
    char v59 = HIBYTE(v13);
    *((void *)&v11 + 1) = *((unsigned __int8 *)a2 + 32);
    *(void *)&long long v11 = v14;
    __int16 v60 = v14;
    char v61 = BYTE2(v14);
    __int16 v63 = (unint64_t)(v11 >> 24) >> 32;
    int v62 = v14 >> 24;
    if ((sub_10005D70C((unsigned __int8 *)&v20, (unsigned __int8 *)&v45) & 1) == 0) {
      return 0;
    }
  }
  int v15 = (void *)a1[5];
  int v16 = (void *)a2[5];
  if (v15)
  {
    if (!v16 || (sub_100006814(v15, v16) & 1) == 0) {
      return 0;
    }
  }
  else if (v16)
  {
    return 0;
  }
  BOOL v17 = (void *)a1[6];
  int v18 = (void *)a2[6];
  if (v17) {
    return v18 && (sub_100006814(v17, v18) & 1) != 0;
  }
  return !v18;
}

uint64_t initializeBufferWithCopyOfBuffer for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[6]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures()
{
  return &type metadata for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions.Application()
{
  return &type metadata for AEAManagedConfigurationRestrictions.Application;
}

__n128 initializeWithCopy for AEAManagedConfigurationRestrictions.Features(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[33]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions.Features()
{
  return &type metadata for AEAManagedConfigurationRestrictions.Features;
}

unint64_t sub_10005E17C()
{
  unint64_t result = qword_1000AEEA0;
  if (!qword_1000AEEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AEEA0);
  }
  return result;
}

unint64_t sub_10005E1D4()
{
  unint64_t result = qword_1000AEEA8;
  if (!qword_1000AEEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AEEA8);
  }
  return result;
}

uint64_t sub_10005E228(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_10005E26C(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_10005E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v14);
  int v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v4 + 16);
  BOOL v17 = (void *)swift_allocObject();
  v17[2] = v4;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  aBlock[4] = sub_1000607F4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_1000A1DE8;
  int v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_100009064(a2);
  static DispatchQoS.unspecified.getter();
  char v22 = &_swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_100005840((unint64_t *)&qword_1000AB7E0, &qword_1000AB7D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v21);
  return swift_release();
}

void sub_10005E58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v18 = *(dispatch_group_t *)(a1 + 24);
  dispatch_group_enter(v18);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1000B01B0;
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a2;
  v15[3] = a1;
  void v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_100060854;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_1000A1E38;
  int v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_100009064(a3);
  static DispatchQoS.unspecified.getter();
  __int16 v20 = &_swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_100005840((unint64_t *)&qword_1000AB7E0, &qword_1000AB7D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v19);
  swift_release();
  OS_dispatch_group.wait()();
}

uint64_t sub_10005E888()
{
  if (qword_1000AA5B8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B0228;
  swift_bridgeObjectRetain();
  return v0;
}

id sub_10005E8F0()
{
  [*(id *)&v0[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_XPCListener] invalidate];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AEAAssessmentModeService();
  return [super dealloc];
}

uint64_t type metadata accessor for AEAAssessmentModeService()
{
  return self;
}

id sub_10005EA7C()
{
  return [*(id *)(*v0 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_XPCListener) resume];
}

id sub_10005EA98()
{
  return [*(id *)(*v0 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_XPCListener) invalidate];
}

BOOL sub_10005EAB4()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection) != 0;
}

uint64_t sub_10005EAD0()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_10005EBB8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  int v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  v22[0] = qword_1000B01B0;
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v3;
  v17[3] = a2;
  v17[4] = a3;
  v17[5] = a1;
  aBlock[4] = sub_10005F464;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005E228;
  aBlock[3] = &unk_1000A1CD0;
  dispatch_group_t v18 = _Block_copy(aBlock);
  id v19 = v3;
  swift_retain();
  id v20 = a1;
  static DispatchQoS.unspecified.getter();
  v22[1] = _swiftEmptyArrayStorage;
  sub_10000C5D8();
  sub_1000048A0(&qword_1000AB7D8);
  sub_100005840((unint64_t *)&qword_1000AB7E0, &qword_1000AB7D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release();
}

void sub_10005EE90(char *a1, void (*a2)(void, uint64_t), uint64_t a3, void *a4)
{
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000CB7C(v8, (uint64_t)qword_1000B0110);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Publisher attempting to connect", v11, 2u);
    swift_slowDealloc();
  }

  if (*(void *)&a1[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection])
  {
    sub_10005F390();
    uint64_t v12 = swift_allocError();
    a2(0, v12);
    swift_errorRelease();
  }
  else
  {
    uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_xpc];
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = a2;
    _OWORD v14[3] = a3;
    v14[4] = a1;
    uint64_t v15 = qword_1000AA578;
    swift_retain();
    int v16 = a1;
    id v17 = a4;
    if (v15 != -1) {
      swift_once();
    }
    id v18 = [self proxyWithEndpoint:v17 queue:qword_1000B01B0];

    id v19 = (void *)swift_allocObject();
    void v19[2] = sub_10005F4C8;
    v19[3] = v14;
    v19[4] = v13;
    v19[5] = v18;
    v22[4] = sub_10005F520;
    v22[5] = v19;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    void v22[2] = sub_10005E26C;
    void v22[3] = &unk_1000A1D48;
    id v20 = _Block_copy(v22);
    swift_retain();
    swift_unknownObjectRetain();
    id v21 = v18;
    swift_release();
    [v21 handleEventDidBeginWithCompletion:v20];
    _Block_release(v20);
    swift_release();
  }
}

void sub_10005F188(void *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_errorRetain();
    ((void (*)(void, void *))a3)(0, a1);
  }
  else
  {
    uint64_t v8 = *(void **)(a5 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection);
    *(void *)(a5 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection) = a1;
    uint64_t v9 = a1;

    *(void *)&v9[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = &off_1000A1C38;
    swift_unknownObjectWeakAssign();
    sub_10000A5BC();
    id v10 = [*(id *)&v9[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener] endpoint];
    a3();

    swift_retain();
    sub_1000048A0(&qword_1000AC360);
    sub_100005840(&qword_1000AEF78, &qword_1000AC360);
    Subject<>.send()();
    swift_release();
  }

  sub_10005FC38(a1, a2 & 1);
}

unint64_t sub_10005F390()
{
  unint64_t result = qword_1000AEF68;
  if (!qword_1000AEF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AEF68);
  }
  return result;
}

uint64_t sub_10005F3E4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005F41C()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10005F464()
{
  sub_10005EE90(*(char **)(v0 + 16), *(void (**)(void, uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10005F470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005F480()
{
  return swift_release();
}

uint64_t sub_10005F488()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10005F4C8(void *a1, char a2)
{
  sub_10005F188(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10005F4D8()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10005F520(uint64_t a1)
{
  sub_10000C3E8(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10005F52C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    uint64_t v5 = *(void *)a1;
    swift_errorRetain();
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000CB7C(v6, (uint64_t)qword_1000B0110);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_getErrorValue();
      uint64_t v10 = sub_100062820(v14);
      sub_1000722AC(v10, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010438(v5, 1);
      sub_100010438(v5, 1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found error while cleaning up from disconnect. Error: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100010438(v5, 1);
    }
    else
    {
      sub_100010438(v5, 1);
      sub_100010438(v5, 1);
      swift_errorRelease();
    }
  }
  uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection);
  *(void *)(a2 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection) = 0;

  a3();
  swift_retain();
  sub_1000048A0(&qword_1000AC360);
  sub_100005840(&qword_1000AEF78, &qword_1000AC360);
  Subject<>.send()();
  return swift_release();
}

uint64_t sub_10005F7D0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  char v40 = a1;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  int v16 = (void *)qword_1000B01B0;
  *uint64_t v15 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v18)
  {
    if (qword_1000AA540 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10000CB7C(v19, (uint64_t)qword_1000B0110);
  id v20 = a2;
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    char v37 = (void *)swift_slowAlloc();
    char v38 = v23;
    *(_DWORD *)char v23 = 138543362;
    int v43 = v20;
    char v24 = v20;
    uint64_t v39 = a4;
    char v25 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v37 = v20;

    a4 = v39;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Client did publish state: %{public}@", v38, 0xCu);
    sub_1000048A0(&qword_1000AEF90);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v21 = v20;
  }

  char v26 = *(NSObject **)(v6 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_taskSource + 40);
  sub_1000091C4(v6 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_taskSource + 48, (uint64_t)v44);
  int v43 = v26;
  __int16 v27 = v40;
  v44[5] = v40;
  v44[6] = a3;
  v44[7] = v20;
  sub_100060900((uint64_t)&v43, (uint64_t)v41);
  sub_1000048A0(&qword_1000AEF88);
  uint64_t v28 = swift_allocObject();
  long long v29 = v41[3];
  *(_OWORD *)(v28 + 48) = v41[2];
  *(_OWORD *)(v28 + 64) = v29;
  *(void *)(v28 + 80) = v42;
  long long v30 = v41[1];
  *(_OWORD *)(v28 + 16) = v41[0];
  *(_OWORD *)(v28 + 32) = v30;
  char v31 = v20;
  swift_retain();
  id v32 = v27;
  id v33 = a3;
  sub_10006095C((uint64_t)&v43);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a4;
  *(void *)(v34 + 24) = a5;
  swift_retain();
  sub_10005E2D8(v28, (uint64_t)sub_1000609B0, v34);
  swift_release();
  return swift_release();
}

uint64_t sub_10005FBB4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (*(unsigned char *)(a1 + 8) != 1) {
    return a2(0);
  }
  uint64_t v3 = *(void *)a1;
  swift_errorRetain();
  a2(v3);

  return sub_100010438(v3, 1);
}

void sub_10005FC38(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

void sub_10005FC44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10005FC4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  os_log_type_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  void v8[3] = a3;
  v8[4] = a4;
  uint64_t v9 = *(void (**)(void (*)(uint64_t *), void *))(*(void *)v7 + 88);
  swift_retain();
  sub_100009064(a3);
  v9(sub_1000608AC, v8);

  return swift_release();
}

uint64_t sub_10005FD14(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  os_log_type_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1000B01B0;
  *os_log_type_t v8 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (qword_1000AA540 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000CB7C(v11, (uint64_t)qword_1000B0110);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Assessment source did disconnect", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = *(void **)&a2[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection];
  if (v15
    && (type metadata accessor for AEAClientConnection(),
        int v16 = a1,
        id v17 = v15,
        char v18 = static NSObject.== infix(_:_:)(),
        v17,
        v16,
        (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)&a2[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_taskSource + 40];
    sub_1000048A0(&qword_1000AEF80);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    *(void *)&v16[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = 0;
    swift_unknownObjectWeakAssign();
    id v21 = (void *)swift_allocObject();
    void v21[2] = a2;
    void v21[3] = Publishers.AEACombineLatestMany.init(_:);
    v21[4] = 0;
    swift_retain();
    os_log_type_t v22 = a2;
    sub_10005E2D8(v20, (uint64_t)sub_100060B28, (uint64_t)v21);
    swift_release();
  }
  else
  {
    swift_retain();
    sub_1000048A0(&qword_1000AC360);
    sub_100005840(&qword_1000AEF78, &qword_1000AC360);
    Subject<>.send()();
  }
  return swift_release();
}

uint64_t sub_100060074(void *a1, char *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  uint64_t v14 = qword_1000AA578;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1000B01B0;
  *uint64_t v12 = qword_1000B01B0;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v15)
  {
    if (qword_1000AA540 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v17 = type metadata accessor for Logger();
  sub_10000CB7C(v17, (uint64_t)qword_1000B0110);
  char v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Assessment source did disconnect", v20, 2u);
    swift_slowDealloc();
  }

  id v21 = *(void **)&a2[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection];
  if (v21
    && (type metadata accessor for AEAClientConnection(),
        os_log_type_t v22 = a1,
        id v23 = v21,
        char v24 = static NSObject.== infix(_:_:)(),
        v23,
        v22,
        (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)&a2[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_taskSource + 40];
    sub_1000048A0(&qword_1000AEF80);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)&v22[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = 0;
    swift_unknownObjectWeakAssign();
    __int16 v27 = (void *)swift_allocObject();
    uint64_t v27[2] = a2;
    v27[3] = sub_1000607D8;
    v27[4] = v13;
    swift_retain();
    uint64_t v28 = a2;
    swift_retain();
    sub_10005E2D8(v26, (uint64_t)sub_1000607E4, (uint64_t)v27);
    swift_release();
  }
  else
  {
    a3(0);
    swift_retain();
    sub_1000048A0(&qword_1000AC360);
    sub_100005840(&qword_1000AEF78, &qword_1000AC360);
    Subject<>.send()();
  }
  swift_release();
  return swift_release();
}

char *sub_100060434(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_clientConnection] = 0;
  uint64_t v7 = OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_activityStatusDidChangeSubject;
  sub_1000048A0(&qword_1000AC360);
  swift_allocObject();
  uint64_t v8 = v3;
  *(void *)&v3[v7] = PassthroughSubject.init()();
  *(void *)&v8[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_xpc] = a1;
  sub_10005CF84(a2, (uint64_t)&v8[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_taskSource]);
  *(void *)&v8[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_taskQueue] = a3;
  swift_unknownObjectRetain();
  swift_retain();
  id v9 = [a1 makeSourceRegisteringListener];
  *(void *)&v8[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_XPCListener] = v9;

  v12.receiver = v8;
  v12.super_class = (Class)type metadata accessor for AEAAssessmentModeService();
  uint64_t v10 = (char *)[super init];
  [*(id *)&v10[OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_XPCListener] setDelegate:v10];
  sub_100021E40(a2);
  return v10;
}

id sub_100060564(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [*(id *)(v1 + OBJC_IVAR____TtC15assessmentagent24AEAAssessmentModeService_xpc) connectionCanRegisterAsAssessmentSource:a1];
  if (v4)
  {
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000CB7C(v5, (uint64_t)qword_1000B0110);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Configuring new connection for assessment source…", v8, 2u);
      swift_slowDealloc();
    }

    id v9 = [objc_allocWithZone((Class)AEAssessmentStateSourceRegisteringXPCInterfaceFactory) init];
    id v10 = [v9 makeInterface];

    [a1 setExportedInterface:v10];
    [a1 setExportedObject:v2];
    uint64_t v11 = &selRef_resume;
  }
  else
  {
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000CB7C(v12, (uint64_t)qword_1000B0110);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalid assessment source. Invalidating connection.", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v11 = &selRef_invalidate;
  }
  [a1 *v11];
  return v4;
}

uint64_t sub_1000607A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000607D8()
{
  return sub_10000B8D8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000607E4(uint64_t a1)
{
  return sub_10005F52C(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

void sub_1000607F4()
{
  sub_10005E58C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100060804()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100060854()
{
  return sub_10005FC4C(v0 + 2, v0[3], v0[4], v0[5]);
}

uint64_t sub_100060864()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000608AC(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void (**)(uint64_t *))(v1 + 24);
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *a1;
  char v6 = v4;
  dispatch_group_leave(*(dispatch_group_t *)(v2 + 24));
  if (v3) {
    v3(&v5);
  }
}

uint64_t sub_100060900(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006095C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000609B0(uint64_t a1)
{
  return sub_10005FBB4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000609BC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

unsigned char *storeEnumTagSinglePayload for AEAAssessmentModeServiceError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100060A98);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentModeServiceError()
{
  return &type metadata for AEAAssessmentModeServiceError;
}

unint64_t sub_100060AD4()
{
  unint64_t result = qword_1000AEF98;
  if (!qword_1000AEF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AEF98);
  }
  return result;
}

unint64_t sub_100060B4C()
{
  unint64_t result = qword_1000AEFA0;
  if (!qword_1000AEFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AEFA0);
  }
  return result;
}

uint64_t sub_100060BA0()
{
  if (*v0)
  {
    if (qword_1000AA590 != -1) {
      swift_once();
    }
    uint64_t v1 = &qword_1000B01D8;
  }
  else
  {
    if (qword_1000AA588 != -1) {
      swift_once();
    }
    uint64_t v1 = &qword_1000B01C8;
  }
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

unsigned char *storeEnumTagSinglePayload for AEAAssessmentStateActionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100060D18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentStateActionError()
{
  return &type metadata for AEAAssessmentStateActionError;
}

unint64_t sub_100060D54()
{
  unint64_t result = qword_1000AEFA8;
  if (!qword_1000AEFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AEFA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentStateActivation()
{
  return &type metadata for AEAAssessmentStateActivation;
}

uint64_t sub_100060DD0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for URL();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_100060E90, 0, 0);
}

uint64_t sub_100060E90()
{
  uint64_t v1 = v0[2];
  id v2 = [self assessmentModeFileURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  int v3 = *(void **)(*sub_100006340((void *)(v1 + 24), *(void *)(v1 + 48)) + 16);
  URL.path.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v5 = [v3 fileExistsAtPath:v4];

  if (v5)
  {
    sub_100006340((void *)(v1 + 24), *(void *)(v1 + 48));
    sub_10001B224();
    uint64_t v7 = v0[4];
    uint64_t v6 = v0[5];
    uint64_t v8 = v0[3];
    [*(id *)(v0[2] + 64) postSystemNotificationWithName:AEAssessmentStateDidChangeNotificationName];
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  else
  {
    sub_100060B4C();
    swift_allocError();
    *id v10 = 1;
    swift_willThrow();
    (*(void (**)(void, void))(v0[4] + 8))(v0[5], v0[3]);
  }
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100061050()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001AC9C;
  return sub_100060DD0();
}

double sub_1000610DC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [a1 numberForKey:v5];

  if (v6)
  {
    if ([v6 BOOLValue])
    {
      *(void *)(a2 + 24) = &type metadata for AEAAssessmentStateDeactivation;
      *(void *)(a2 + 32) = &off_1000A2180;
      uint64_t v7 = (void *)swift_allocObject();
      *(void *)a2 = v7;
      sub_1000091C4(v2 + 24, (uint64_t)(v7 + 5));
      uint64_t v8 = *(void *)(v2 + 64);
      swift_unknownObjectRetain();

      _OWORD v7[2] = 0xD00000000000002CLL;
      _OWORD v7[3] = 0x8000000100088640;
      v7[4] = 5;
      v7[10] = v8;
      return result;
    }
  }
  *(void *)(a2 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_100061200(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000612F0, 0, 0);
}

uint64_t sub_1000612F0()
{
  uint64_t v1 = (void *)v0[4];
  sub_10000650C();
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setNumber:isa forKey:v3];

  v0[2] = 0;
  unsigned int v4 = [v1 persistWithError:v0 + 2];
  NSString v5 = (void *)v0[2];
  if (v4)
  {
    uint64_t v6 = v0[5];
    uint64_t v7 = self;
    id v8 = v5;
    id v9 = [v7 assessmentModeFileURL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = v6 + 24;
    uint64_t v11 = *(void **)(*sub_100006340((void *)(v6 + 24), *(void *)(v6 + 48)) + 16);
    URL.path.getter();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LOBYTE(v11) = [v11 fileExistsAtPath:v12];

    uint64_t v13 = (void (*)(void, void, void))v0[8];
    if ((v11 & 1) == 0)
    {
      sub_100006340((void *)(v6 + 24), *(void *)(v6 + 48));
      sub_100061654(v13);
      uint64_t v19 = v0[7];
      uint64_t v18 = v0[8];
      uint64_t v20 = v0[6];
      os_log_type_t v22 = (void *)v0[3];
      id v23 = *(void **)(v0[5] + 64);
      [v23 postSystemNotificationWithName:AEAssessmentStateDidChangeNotificationName];
      void v22[3] = &type metadata for AEAAssessmentStateDeactivation;
      v22[4] = &off_1000A2180;
      char v24 = (void *)swift_allocObject();
      *os_log_type_t v22 = v24;
      sub_1000091C4(v10, (uint64_t)(v24 + 5));
      _OWORD v24[2] = 0xD00000000000002CLL;
      void v24[3] = 0x8000000100088640;
      void v24[4] = 5;
      v24[10] = v23;
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      swift_unknownObjectRetain();
      v25(v18, v20);
      swift_task_dealloc();
      uint64_t v26 = (uint64_t (*)(void))v0[1];
      goto LABEL_7;
    }
    uint64_t v15 = v0[6];
    uint64_t v14 = v0[7];
    sub_100060B4C();
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    (*(void (**)(void (*)(void, void, void), uint64_t))(v14 + 8))(v13, v15);
  }
  else
  {
    id v17 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v26();
}

uint64_t sub_100061654(void (*a1)(void, void, void))
{
  uint64_t v3 = sub_1000048A0(&qword_1000AEFC0);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v47 = (uint64_t)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  char v48 = (char *)v43 - v8;
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v9);
  __int16 v44 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for URLResourceValues();
  uint64_t v50 = *(void *)(v52 - 8);
  uint64_t v12 = __chkstk_darwin(v52, v11);
  char v49 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  char v51 = (char *)v43 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v43 - v18;
  uint64_t v20 = type metadata accessor for CocoaError.Code();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  char v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v56 = a1;
  uint64_t result = sub_10001B074();
  if (v1)
  {
    swift_errorRetain();
    static CocoaError.fileWriteFileExists.getter();
    sub_10001B944();
    char v26 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    if (v26)
    {
      swift_errorRelease();
      sub_1000048A0(&qword_1000AD030);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100080BE0;
      *(void *)(inited + 32) = NSURLContentModificationDateKey;
      uint64_t v28 = NSURLContentModificationDateKey;
      sub_10002CC78(inited);
      swift_setDeallocating();
      type metadata accessor for URLResourceKey(0);
      swift_arrayDestroy();
      long long v29 = v56;
      URL.resourceValues(forKeys:)();
      uint64_t v30 = v45;
      char v31 = v44;
      uint64_t v32 = v46;
      (*(void (**)(char *, void, uint64_t))(v45 + 16))(v44, v29, v46);
      uint64_t v33 = v50;
      uint64_t v34 = *(void (**)(void, void, void))(v50 + 16);
      v43[1] = v50 + 16;
      char v56 = v34;
      v34(v51, v19, v52);
      uint64_t v35 = type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues();
      uint64_t v36 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v36 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL, v31, v32);
      uint64_t v37 = v52;
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v36+ OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues, v51, v52);
      uint64_t v54 = v35;
      char v55 = &off_10009F590;
      v53[0] = v36;
      char v38 = *(void (**)(char *, uint64_t))(v33 + 8);
      v38(v19, v37);
      swift_bridgeObjectRelease();
      uint64_t v39 = (uint64_t)v48;
      Date.init()();
      uint64_t v40 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
      sub_100019D8C((uint64_t)v53, v54);
      sub_100061D38(v39, v47);
      swift_beginAccess();
      URLResourceValues.contentModificationDate.setter();
      swift_endAccess();
      sub_100061DA0(v39);
      uint64_t v41 = *sub_100006340(v53, v54)
          + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues;
      swift_beginAccess();
      uint64_t v42 = v49;
      v56(v49, v41, v37);
      swift_beginAccess();
      URL.setResourceValues(_:)();
      v38(v42, v37);
      swift_endAccess();
      return sub_1000048E4((uint64_t)v53);
    }
  }
  return result;
}

uint64_t sub_100061C48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000ED6C;
  return sub_100061200(a1, a2);
}

uint64_t sub_100061CF0()
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 40);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100061D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AEFC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061DA0(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AEFC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s15assessmentagent28AEAAssessmentStateActivationVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 24);

  return swift_unknownObjectRelease();
}

uint64_t _s15assessmentagent28AEAAssessmentStateActivationVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 24, v5, v7);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  return a1;
}

void *_s15assessmentagent28AEAAssessmentStateActivationVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  sub_10000E5F4(a1 + 3, a2 + 3);
  a1[8] = a2[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t _s15assessmentagent28AEAAssessmentStateActivationVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1000048E4(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AEAAssessmentStateDeactivation()
{
  return &type metadata for AEAAssessmentStateDeactivation;
}

uint64_t destroy for AEAStageManagerActivation(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return sub_1000048E4(a1 + 24);
}

__n128 initializeWithTake for AEAStageManagerActivation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AEAStageManagerActivation()
{
  return &type metadata for AEAStageManagerActivation;
}

uint64_t sub_100062054()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_100062074, 0, 0);
}

uint64_t sub_100062074()
{
  sub_1000091C4(v0[7] + 24, (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100019D8C((uint64_t)(v0 + 2), v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(1, v1, v2);
  sub_1000048E4((uint64_t)(v0 + 2));
  long long v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100062128@<X0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = sub_10000E230();
  if (result)
  {
    *(void *)(a1 + 24) = &type metadata for AEAStageManagerDeactivation;
    *(void *)(a1 + 32) = &off_1000A2328;
    long long v4 = (void *)swift_allocObject();
    *(void *)a1 = v4;
    uint64_t result = sub_1000091C4(v1 + 24, (uint64_t)(v4 + 5));
    v4[2] = 0xD00000000000002ALL;
    v4[3] = 0x80000001000886B0;
    v4[4] = 5;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000621F8(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return _swift_task_switch(sub_10006228C, 0, 0);
}

uint64_t sub_10006228C()
{
  sub_1000091C4(v0[10] + 24, (uint64_t)(v0 + 2));
  if (qword_1000AA658 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1000B0350;
  NSString v2 = String._bridgeToObjectiveC()();
  LODWORD(v1) = [v1 BOOLForKey:v2];

  if (!v1)
  {
    uint64_t v12 = v0[8];
    *(void *)(v12 + 32) = 0;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    goto LABEL_7;
  }
  long long v3 = (void *)v0[9];
  swift_getObjectType();
  sub_10000E198(1);
  v0[7] = 0;
  unsigned int v4 = [v3 persistWithError:v0 + 7];
  uint64_t v5 = (void *)v0[7];
  if (v4)
  {
    long long v6 = (void *)v0[8];
    uint64_t v7 = v0[5];
    uint64_t v8 = v0[6];
    sub_100019D8C((uint64_t)(v0 + 2), v7);
    uint64_t v9 = *(void (**)(void, uint64_t, uint64_t))(v8 + 16);
    id v10 = v5;
    v9(0, v7, v8);
    v6[3] = &type metadata for AEAStageManagerDeactivation;
    v6[4] = &off_1000A2328;
    uint64_t v11 = (void *)swift_allocObject();
    void *v6 = v11;
    sub_1000091C4((uint64_t)(v0 + 2), (uint64_t)(v11 + 5));
    v11[2] = 0xD00000000000002ALL;
    void v11[3] = 0x80000001000886B0;
    void v11[4] = 5;
LABEL_7:
    sub_1000048E4((uint64_t)(v0 + 2));
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  id v14 = v5;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_1000048E4((uint64_t)(v0 + 2));
  uint64_t v13 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v13();
}

uint64_t sub_100062524(uint64_t a1, uint64_t a2)
{
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_10000ED6C;
  v6[9] = a2;
  v6[10] = v2;
  v6[8] = a1;
  return _swift_task_switch(sub_10006228C, 0, 0);
}

uint64_t sub_1000625E0()
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t initializeWithCopy for AEAExternalDisplayActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a2 + 24;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 24, v4, v6);
  return a1;
}

void *assignWithCopy for AEAExternalDisplayActivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  sub_10000E5F4(a1 + 3, a2 + 3);
  return a1;
}

uint64_t assignWithTake for AEAExternalDisplayActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1000048E4(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAExternalDisplayActivation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAExternalDisplayActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAStageManagerDeactivation()
{
  return &type metadata for AEAStageManagerDeactivation;
}

uint64_t sub_100062820(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v4, a1);
  }
  uint64_t v7 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v8 = [v7 ae_verboseDescription];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v9;
}

uint64_t sub_1000629A0()
{
  if (qword_1000AA598 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B01E8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100062A08()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    *(unsigned char *)(v0 + 64) = 0;
    if (*(void *)(v0 + 72))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    *(void *)(v0 + 72) = 0;
    swift_release();
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000CB7C(v2, (uint64_t)qword_1000B0110);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Restoring media commands to all processes", v5, 2u);
      swift_slowDealloc();
    }

    sub_100065D1C((unint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
  }
  sub_1000048E4(v1 + 16);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEARestrictMediaAssertion()
{
  return self;
}

void sub_100062B8C()
{
  if ((*(unsigned char *)(v0 + 64) & 1) == 0)
  {
    uint64_t v1 = v0;
    *(unsigned char *)(v0 + 64) = 1;
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    sub_1000048A0(&qword_1000AD048);
    sub_100062D54();
    uint64_t v2 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)(v1 + 72) = v2;
    swift_release();
  }
}

unint64_t sub_100062C60()
{
  unint64_t result = qword_1000AF0F8;
  if (!qword_1000AF0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AF0F8);
  }
  return result;
}

uint64_t sub_100062CB4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100062CEC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100063704(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100062D4C(uint64_t *a1)
{
  return sub_100062CEC(a1);
}

unint64_t sub_100062D54()
{
  unint64_t result = qword_1000AD058;
  if (!qword_1000AD058)
  {
    sub_1000054DC(&qword_1000AD048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AD058);
  }
  return result;
}

uint64_t sub_100062DB0()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001AC9C;
  v3[2] = v2;
  return _swift_task_switch(sub_100063598, 0, 0);
}

uint64_t sub_100062E58(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[14] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100062F30;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x6C6C416573756170, 0xEA00000000002928, sub_100065AE0, 0, (char *)&type metadata for () + 8);
}

uint64_t sub_100062F30()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000632BC;
  }
  else {
    uint64_t v2 = sub_100063044;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100063044()
{
  uint64_t v1 = v0[13];
  uint64_t v17 = (void *)v0[12];
  sub_1000091C4(v1 + 24, (uint64_t)(v0 + 2));
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = v0[5];
  uint64_t v4 = sub_100019D8C((uint64_t)(v0 + 2), v3);
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v6, v4, v3);
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for AEAConcreteMediaPrimitives();
  v0[10] = v8;
  v0[11] = &off_1000A2818;
  v0[7] = v7;
  type metadata accessor for AEARestrictMediaAssertion();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = sub_100019D8C((uint64_t)(v0 + 7), v8);
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v12 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v12, v10, v8);
  uint64_t v13 = *v12;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = &off_1000A2818;
  *(void *)(v9 + 56) = v2;
  *(void *)(v9 + 16) = v13;
  *(unsigned char *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  swift_retain();
  sub_1000048E4((uint64_t)(v0 + 7));
  swift_task_dealloc();
  sub_1000048E4((uint64_t)(v0 + 2));
  swift_task_dealloc();
  sub_100062B8C();
  v17[3] = &type metadata for AEARestrictMediaDeactivation;
  v17[4] = &off_1000A2588;
  id v14 = (void *)swift_allocObject();
  *uint64_t v17 = v14;
  void v14[2] = 0xD000000000000022;
  _OWORD v14[3] = 0x8000000100088760;
  v14[4] = 4;
  v14[5] = v9;
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000632BC()
{
  sub_100062C60();
  swift_allocError();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100063354(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000ED6C;
  return sub_100062E58(a1);
}

uint64_t sub_1000633F0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_100063494(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100063578(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100063598, 0, 0);
}

uint64_t sub_100063598()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v1 + 64) == 1)
  {
    *(unsigned char *)(v1 + 64) = 0;
    if (*(void *)(v1 + 72))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    *(void *)(v1 + 72) = 0;
    swift_release();
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000CB7C(v2, (uint64_t)qword_1000B0110);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Restoring media commands to all processes", v5, 2u);
      swift_slowDealloc();
    }

    sub_100065D1C((unint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

void sub_100063704(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (id *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4, v7);
  uint64_t v37 = (uint64_t)&v35 - v8;
  if (qword_1000AA540 != -1) {
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = sub_10000CB7C(v9, (uint64_t)qword_1000B0110);
    swift_bridgeObjectRetain_n();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v36 = v13 + 4;
      sub_100029730();
      swift_bridgeObjectRetain();
      uint64_t v14 = Set.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_1000722AC(v14, v16, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Restricting media commands to participants: %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = _swiftEmptyArrayStorage;
    if (!v17) {
      break;
    }
    uint64_t v36 = (uint8_t *)v10;
    uint64_t v40 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v19 = sub_1000633F0(a1);
    int v21 = v20;
    char v23 = v22 & 1;
    while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 56 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        goto LABEL_17;
      }
      if (*(_DWORD *)(a1 + 36) != v21) {
        goto LABEL_18;
      }
      uint64_t v24 = v37;
      sub_100020250(*(void *)(a1 + 48) + *(void *)(v38 + 72) * v19, v37);
      sub_10002D634(v24, (uint64_t)v6);
      id v25 = *v6;
      sub_1000202B4((uint64_t)v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v26 = sub_100063494(v19, v21, v23 & 1, a1);
      int64_t v19 = v26;
      int v21 = v27;
      char v23 = v28 & 1;
      if (!--v17)
      {
        sub_1000198CC(v26, v27, v28 & 1);
        uint64_t v18 = v40;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once();
  }
LABEL_13:
  sub_100065D1C((unint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  long long v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    char v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = (void *)swift_slowAlloc();
    *(_DWORD *)char v31 = 136446210;
    sub_100063BF4();
    swift_bridgeObjectRetain();
    uint64_t v32 = Array.description.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_1000722AC(v32, v34, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully restricted media commands to participants with audit tokens: %{public}s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

unint64_t sub_100063BF4()
{
  unint64_t result = qword_1000AF100;
  if (!qword_1000AF100)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000AF100);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AEAMediaActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100063CD0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAMediaActionError()
{
  return &type metadata for AEAMediaActionError;
}

unint64_t sub_100063D0C()
{
  unint64_t result = qword_1000AF108;
  if (!qword_1000AF108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AF108);
  }
  return result;
}

uint64_t destroy for AEARestrictMediaActivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 24);

  return swift_release();
}

uint64_t initializeWithCopy for AEARestrictMediaActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 24, v5, v7);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  return a1;
}

void *assignWithCopy for AEARestrictMediaActivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  sub_10000E5F4(a1 + 3, a2 + 3);
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AEARestrictMediaActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1000048E4(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AEARestrictMediaActivation()
{
  return &type metadata for AEARestrictMediaActivation;
}

uint64_t sub_100063F40()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for AEARestrictMediaDeactivation()
{
  return &type metadata for AEARestrictMediaDeactivation;
}

uint64_t sub_100063F90(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

uint64_t sub_100063FD0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000CB7C(v6, (uint64_t)qword_1000B0110);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Beginning task for verifying agent read permission before proceeding", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = v3[16];
  v3[16] = a1;
  v3[17] = a2;
  swift_retain();
  sub_1000091B4(v10);
  sub_100064D30();
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  unint64_t v11 = (void *)qword_1000B01B0;
  uint64_t v12 = swift_allocObject();
  uint64_t result = swift_weakInit();
  if (kMobileKeyBagLockStatusNotifyToken)
  {
    swift_retain();
    String.init(cString:)();
    id v14 = v11;
    swift_retain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    long long v29 = sub_1000653F0;
    uint64_t v30 = v12;
    id v25 = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_10005E228;
    char v28 = &unk_1000A2620;
    unint64_t v16 = _Block_copy(&v25);
    uint64_t v17 = self;
    id v18 = [v17 observationWithNotificationName:v15 queue:v14 notificationHandler:v16];

    _Block_release(v16);
    swift_release();
    swift_release_n();
    v3[14] = v18;
    swift_unknownObjectRelease();
    int64_t v19 = (void *)qword_1000B01B0;
    uint64_t v20 = swift_allocObject();
    swift_weakInit();
    swift_retain_n();
    id v21 = v19;
    NSString v22 = String._bridgeToObjectiveC()();
    long long v29 = sub_1000653F0;
    uint64_t v30 = v20;
    id v25 = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_10005E228;
    char v28 = &unk_1000A2648;
    char v23 = _Block_copy(&v25);
    id v24 = [v17 observationWithNotificationName:v22 queue:v21 notificationHandler:v23];

    _Block_release(v23);
    swift_release();
    swift_release_n();
    v3[15] = v24;
    swift_unknownObjectRelease();
    sub_100006340(v3 + 2, v3[5]);
    uint64_t result = sub_100064414();
    if (result) {
      return sub_100065078();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000643A0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100006340((void *)(result + 16), *(void *)(result + 40));
    if (sub_100064414()) {
      sub_100065078();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100064414()
{
  uint64_t v0 = type metadata accessor for CocoaError.Code();
  uint64_t v48 = *(void *)(v0 - 8);
  uint64_t v49 = v0;
  __chkstk_darwin(v0, v1);
  uint64_t v47 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000048A0(&qword_1000AB5F8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  unint64_t v16 = (char *)&v43 - v15;
  __chkstk_darwin(v14, v17);
  int64_t v19 = (char *)&v43 - v18;
  id v20 = [self assessmentAgentPolicyStoreDirectoryURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v21 = (char *)sub_10001B3D4((uint64_t)v19);
  NSString v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v19, v7);
  if (*((void *)v21 + 2))
  {
    char v23 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v23(v6, &v21[(*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)], v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      uint64_t v46 = v22;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v6, v7);
      if (qword_1000AA540 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      uint64_t v25 = sub_10000CB7C(v24, (uint64_t)qword_1000B0110);
      v23(v12, v16, v7);
      swift_bridgeObjectRetain();
      uint64_t v45 = v25;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        __int16 v44 = v16;
        uint64_t v29 = v28;
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 134349314;
        uint64_t v30 = *((void *)v21 + 2);
        swift_bridgeObjectRelease();
        uint64_t v50 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2082;
        sub_10002D698();
        uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v50 = sub_1000722AC(v31, v32, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v46(v12, v7);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found %{public}ld scratchpad(s). Using this scratchpad to check read permission: %{public}s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v16 = v44;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v46(v12, v7);
      }

      uint64_t v38 = Data.init(contentsOf:options:)();
      sub_100006384(v38, v39);
      uint64_t v40 = Logger.logObject.getter();
      uint64_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, (os_log_type_t)v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v41, "Agent has read permission and needs recovery", v42, 2u);
        swift_slowDealloc();
      }

      v46(v16, v7);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  sub_100006444((uint64_t)v6);
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_10000CB7C(v33, (uint64_t)qword_1000B0110);
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "No policy store or no scratchpads --> recovery not needed", v36, 2u);
    swift_slowDealloc();
  }

  return 1;
}

uint64_t sub_100064D30()
{
  uint64_t v1 = *(void **)(v0 + 104);
  if (v1) {
    [v1 cancel];
  }
  uint64_t v2 = *(void **)(v0 + 96);
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1000B01B0;
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  v8[4] = sub_1000653D0;
  void v8[5] = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10005E228;
  void v8[3] = &unk_1000A25F8;
  uint64_t v5 = _Block_copy(v8);
  swift_release();
  id v6 = [v2 scheduledTimerWithDuration:v3 queue:v5 handler:60.0];
  _Block_release(v5);
  *(void *)(v0 + 104) = v6;
  return swift_unknownObjectRelease();
}

uint64_t sub_100064E7C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100064ED4();
    return swift_release();
  }
  return result;
}

uint64_t sub_100064ED4()
{
  uint64_t v1 = v0;
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0110);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Permission polling timer did fire", v5, 2u);
    swift_slowDealloc();
  }

  sub_100006340((void *)(v1 + 16), *(void *)(v1 + 40));
  if (sub_100064414())
  {
    return sub_100065078();
  }
  else
  {
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Agent still does not have read permission. Restarting timer…", v9, 2u);
      swift_slowDealloc();
    }

    return sub_100064D30();
  }
}

uint64_t sub_100065078()
{
  uint64_t v1 = v0;
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0110);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Agent has read permission. Proceeding…", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = (void *)v1[13];
  if (v6) {
    [v6 cancel];
  }
  v1[13] = 0;
  swift_unknownObjectRelease();
  uint64_t v7 = (void *)v1[14];
  if (v7) {
    [v7 invalidate];
  }
  v1[14] = 0;
  swift_unknownObjectRelease();
  os_log_type_t v8 = (void *)v1[15];
  if (v8) {
    [v8 invalidate];
  }
  v1[15] = 0;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v10 = (void (*)(void, void))v1[16];
  if (v10)
  {
    v1[16] = 0;
    v1[17] = 0;
    swift_retain();
    sub_1000091B4((uint64_t)v10);
    v10(0, 0);
    return sub_1000091B4((uint64_t)v10);
  }
  return result;
}

uint64_t sub_100065210()
{
  sub_1000048E4(v0 + 16);
  sub_1000048E4(v0 + 56);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000091B4(*(void *)(v0 + 128));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAWaitForReadPermissionTask()
{
  return self;
}

uint64_t sub_10006529C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_100063FD0((uint64_t)sub_100065358, v4);

  return swift_release();
}

uint64_t sub_100065320()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100065358(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100065398()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000653D0()
{
  return sub_100064E7C();
}

uint64_t sub_1000653D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000653E8()
{
  return swift_release();
}

uint64_t sub_1000653F0()
{
  return sub_1000643A0();
}

ValueMetadata *type metadata accessor for AEAPasteboardActivation()
{
  return &type metadata for AEAPasteboardActivation;
}

uint64_t sub_10006542C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10006544C, 0, 0);
}

uint64_t sub_10006544C()
{
  sub_100006340((void *)(*(void *)(v0 + 16) + 24), *(void *)(*(void *)(v0 + 16) + 48));
  type metadata accessor for AEAConcretePasteboardPrimitives();
  sub_10000CC28();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000654EC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_100065580, 0, 0);
}

uint64_t sub_100065580()
{
  uint64_t v1 = (void *)v0[4];
  id v2 = [self generalPasteboard];
  sub_1000048A0(&qword_1000AB8A8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v2 setItems:isa];

  swift_getObjectType();
  sub_10000E198(1);
  v0[2] = 0;
  unsigned int v4 = [v1 persistWithError:v0 + 2];
  uint64_t v5 = (void *)v0[2];
  if (v4)
  {
    char v6 = (void *)v0[3];
    uint64_t v7 = v0[5] + 24;
    v6[3] = &type metadata for AEAPasteboardDeactivation;
    v6[4] = &off_1000A27F8;
    os_log_type_t v8 = (void *)swift_allocObject();
    void *v6 = v8;
    sub_1000091C4(v7, (uint64_t)(v8 + 5));
    v8[2] = 0xD00000000000002ALL;
    void v8[3] = 0x8000000100088890;
    v8[4] = 5;
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    id v9 = v5;
    uint64_t v10 = v13;
  }
  else
  {
    id v11 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
  }
  return v10();
}

uint64_t sub_10006578C@<X0>(void *a1@<X8>)
{
  a1[3] = &type metadata for AEAPasteboardDeactivation;
  a1[4] = &off_1000A27F8;
  uint64_t v3 = (void *)swift_allocObject();
  *a1 = v3;
  uint64_t result = sub_1000091C4(v1 + 24, (uint64_t)(v3 + 5));
  v3[2] = 0xD00000000000002ALL;
  v3[3] = 0x8000000100088890;
  v3[4] = 5;
  return result;
}

uint64_t sub_100065818(uint64_t a1, uint64_t a2)
{
  char v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_10000ED6C;
  v6[4] = a2;
  v6[5] = v2;
  v6[3] = a1;
  return _swift_task_switch(sub_100065580, 0, 0);
}

uint64_t sub_1000658D4()
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

ValueMetadata *type metadata accessor for AEAPasteboardDeactivation()
{
  return &type metadata for AEAPasteboardDeactivation;
}

unint64_t sub_100065924()
{
  sub_1000048A0(&qword_1000AD620);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100080BE0;
  unint64_t result = kMRMediaRemoteOptionAssistantSetQueueTrueCompletion;
  if (kMRMediaRemoteOptionAssistantSetQueueTrueCompletion)
  {
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v2;
    *(void *)(inited + 72) = &type metadata for Bool;
    *(unsigned char *)(inited + 48) = 1;
    unint64_t result = sub_100070DB4(inited);
    qword_1000AF2B8 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000659AC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t type metadata accessor for AEAConcreteMediaPrimitives()
{
  return self;
}

id sub_100065A84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AEAConcreteMediaPrimitives.MediaRemoteAuditToken();
  return [super dealloc];
}

uint64_t type metadata accessor for AEAConcreteMediaPrimitives.MediaRemoteAuditToken()
{
  return self;
}

void sub_100065AE0(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0((uint64_t *)&unk_1000AF3A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  if (qword_1000AA5F8 != -1) {
    swift_once();
  }
  v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_100066134;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000659AC;
  aBlock[3] = &unk_1000A2858;
  id v9 = _Block_copy(aBlock);
  swift_release();
  MRMediaRemoteSendCommandWithReply();
  _Block_release(v9);
}

uint64_t sub_100065D1C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v4 = &v24;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v5 = self;
    uint64_t v6 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v1 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      [v5 underlyingAuditTokenFromAuditToken:v7, v20, v21];
      id v9 = (objc_class *)type metadata accessor for AEAConcreteMediaPrimitives.MediaRemoteAuditToken();
      long long v20 = v23[1];
      long long v21 = v23[0];
      uint64_t v10 = (char *)objc_allocWithZone(v9);
      id v11 = &v10[OBJC_IVAR____TtCC15assessmentagent26AEAConcreteMediaPrimitivesP33_620CDB64FB7B028F5CC03EEF5D4C490C21MediaRemoteAuditToken_realToken];
      *(_OWORD *)id v11 = v21;
      *((_OWORD *)v11 + 1) = v20;
      v22.receiver = v10;
      v22.super_class = v9;
      [super init];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v6);
    unint64_t v3 = (unint64_t)v24;
  }
  swift_bridgeObjectRetain();
  if (v3 >> 62)
  {
    sub_1000048A0(&qword_1000AF398);
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  }
  swift_bridgeObjectRelease();
  sub_1000048A0(&qword_1000AF398);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = (id)MRMediaRemoteRestrictCommandClients();

  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v13) {
    return (uint64_t)v4;
  }
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v1 >> 62))
  {
    uint64_t v14 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_16;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_23;
  }
LABEL_16:
  uint64_t v24 = v4;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = self;
    uint64_t v17 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v18 = *(void **)(v1 + 8 * v17 + 32);
        swift_unknownObjectRetain();
      }
      ++v17;
      [v18 realToken:v20, v21];
      id v19 = [v16 auditTokenWithUnderlyingAuditToken:v23];
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v14 != v17);
    uint64_t v4 = v24;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000660A0()
{
  uint64_t v1 = sub_1000048A0((uint64_t *)&unk_1000AF3A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100066134()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10006619C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000661AC()
{
  return swift_release();
}

id sub_1000661B4()
{
  uint64_t v1 = *(void **)(v0 + 376);
  if (v1)
  {
    id v2 = *(id *)(v0 + 376);
  }
  else
  {
    id v3 = sub_100066210(v0);
    uint64_t v4 = *(void **)(v0 + 376);
    *(void *)(v0 + 376) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_100066210(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)AEOSGestalt) init];
  if ([v2 isInternalOS] && !objc_msgSend(*(id *)(a1 + 368), "isBeingTested"))
  {
    uint64_t v5 = *(void *)(a1 + 360);
    uint64_t v6 = *(void *)(a1 + 208);
    uint64_t v7 = qword_1000AA578;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if (v7 != -1) {
      swift_once();
    }
    id v8 = [self preferencesWithPreferencePrimitives:v5 systemNotificationPrimitives:v6 queue:qword_1000B01B0];

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v8;
  }
  else
  {
    id v3 = [self defaultPreferences];

    return v3;
  }
}

uint64_t sub_100066340()
{
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 24);
  sub_1000048E4(v0 + 64);
  sub_1000048E4(v0 + 104);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 168);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 224);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 280);
  sub_1000048E4(v0 + 320);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_1000048E4(v0 + 384);
  sub_1000048E4(v0 + 424);
  sub_1000048E4(v0 + 464);
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 512);
  sub_1000048E4(v0 + 552);
  sub_1000048E4(v0 + 592);
  sub_1000048E4(v0 + 632);
  sub_1000048E4(v0 + 672);
  sub_1000048E4(v0 + 712);
  return v0;
}

uint64_t sub_100066438()
{
  sub_100066340();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAConcreteEnvironment()
{
  return self;
}

void *sub_100066490()
{
  v0[2] = 0;
  uint64_t v1 = type metadata accessor for AEAConcreteXPCEventStreamPrimitives();
  uint64_t v2 = swift_allocObject();
  v0[6] = v1;
  v0[7] = &off_1000A2DC8;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for AEAConcreteSignalPrimitives();
  uint64_t v4 = swift_allocObject();
  v0[11] = v3;
  v0[12] = &off_1000A0600;
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for AEAConcreteProcessPrimitives();
  uint64_t v6 = swift_allocObject();
  v0[16] = v5;
  v0[17] = &off_1000A2DE0;
  v0[13] = v6;
  v0[18] = [objc_allocWithZone((Class)AEAConcreteXPCConnectionPrimitives) init];
  id v7 = [objc_allocWithZone((Class)AEPerformancePrimitivesProvider) init];
  id v8 = [v7 makePrimitives];

  v0[19] = v8;
  v0[20] = [objc_allocWithZone((Class)AEAConcreteOSTransactionPrimitives) init];
  uint64_t v9 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = [self defaultManager];
  v0[24] = v9;
  v0[25] = &off_10009F5C0;
  v0[21] = v10;
  v0[26] = [objc_allocWithZone((Class)AEConcreteSystemNotificationPrimitives) init];
  id v11 = [objc_allocWithZone((Class)AEFeatureFlagsProvider) init];
  id v12 = [v11 makeFeatureFlags];

  v0[27] = v12;
  uint64_t v13 = type metadata accessor for AEAConcretePasteboardPrimitives();
  uint64_t v14 = swift_allocObject();
  v0[31] = v13;
  v0[32] = &off_10009E890;
  v0[28] = v14;
  v0[33] = [objc_allocWithZone((Class)AEAConcreteAirPlayPrimitives) init];
  v0[34] = [objc_allocWithZone((Class)AEAConcreteNetworkPrimitives) init];
  uint64_t v15 = type metadata accessor for AEAConcreteMediaPrimitives();
  uint64_t v16 = swift_allocObject();
  v0[38] = v15;
  v0[39] = &off_1000A2818;
  v0[35] = v16;
  uint64_t v17 = type metadata accessor for AEAConcreteLaunchServicesPrimitives();
  uint64_t v18 = swift_allocObject();
  v0[43] = v17;
  v0[44] = &off_1000A3398;
  v0[40] = v18;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v19 = objc_allocWithZone((Class)AEConcretePreferencePrimitives);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v19 initWithDomain:v20];

  v0[45] = v21;
  id v22 = [objc_allocWithZone((Class)AEProcessInfoPrimitivesProvider) init];
  id v23 = [v22 makePrimitives];

  v0[46] = v23;
  v0[47] = 0;
  uint64_t v24 = type metadata accessor for AEAConcreteSecurityTaskPrimitives();
  uint64_t v25 = swift_allocObject();
  v0[51] = v24;
  v0[52] = &off_1000A1688;
  v0[48] = v25;
  uint64_t v26 = type metadata accessor for AEAConcreteRunningBoardPrimitives();
  uint64_t v27 = swift_allocObject();
  v0[56] = v26;
  v0[57] = &off_1000A0118;
  v0[53] = v27;
  uint64_t v28 = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  uint64_t v29 = swift_allocObject();
  v0[61] = v28;
  v0[62] = &off_1000A3070;
  v0[58] = v29;
  v0[63] = [objc_allocWithZone((Class)AEAConcreteTimerPrimitives) init];
  uint64_t v30 = type metadata accessor for AEAConcreteExternalSubsystemRestrictionPrimitives();
  uint64_t v31 = swift_allocObject();
  v0[67] = v30;
  v0[68] = &off_10009FCB8;
  v0[64] = v31;
  uint64_t v32 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  uint64_t v33 = swift_allocObject();
  v0[72] = v32;
  v0[73] = &off_10009FBF0;
  v0[69] = v33;
  uint64_t v34 = type metadata accessor for AEAConcreteMobileKeyBagPrimitives();
  uint64_t v35 = swift_allocObject();
  v0[77] = v34;
  v0[78] = &off_10009E208;
  v0[74] = v35;
  uint64_t v36 = type metadata accessor for AEAConcreteFrontBoardPrimitives();
  uint64_t v37 = swift_allocObject();
  v0[82] = v36;
  v0[83] = &off_1000A05D8;
  v0[79] = v37;
  uint64_t v38 = type metadata accessor for AEAConcreteUserDefaultsPrimitives();
  uint64_t v39 = swift_allocObject();
  v0[87] = v38;
  v0[88] = &off_1000A3080;
  v0[84] = v39;
  uint64_t v40 = type metadata accessor for AEAConcreteUserNotificationPrimitives();
  uint64_t v41 = swift_allocObject();
  v0[92] = v40;
  v0[93] = &off_10009EF30;
  v0[89] = v41;
  return v0;
}

void *initializeBufferWithCopyOfBuffer for AEAClientUIPresenter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for AEAClientUIPresenter()
{
  return swift_release();
}

void *assignWithCopy for AEAClientUIPresenter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AEAClientUIPresenter(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AEAClientUIPresenter()
{
  return &type metadata for AEAClientUIPresenter;
}

uint64_t sub_1000669D8(uint64_t a1)
{
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v37 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v3) {
    goto LABEL_29;
  }
LABEL_6:
  int64_t v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    if (v7 >= v27) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v26 + 8 * v7);
    ++v5;
    if (v8) {
      goto LABEL_21;
    }
    int64_t v5 = v7 + 1;
    if (v7 + 1 >= v27) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v26 + 8 * v5);
    if (v8) {
      goto LABEL_21;
    }
    int64_t v5 = v7 + 2;
    if (v7 + 2 >= v27) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v26 + 8 * v5);
    if (v8) {
      goto LABEL_21;
    }
    int64_t v5 = v7 + 3;
    if (v7 + 3 >= v27) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v26 + 8 * v5);
    if (v8) {
      goto LABEL_21;
    }
    int64_t v9 = v7 + 4;
    if (v9 >= v27)
    {
LABEL_31:
      swift_release();
      return (uint64_t)v6;
    }
    unint64_t v8 = *(void *)(v26 + 8 * v9);
    if (v8)
    {
      int64_t v5 = v9;
LABEL_21:
      unint64_t v3 = (v8 - 1) & v8;
      for (unint64_t i = __clz(__rbit64(v8)) + (v5 << 6); ; unint64_t i = v22 | (v5 << 6))
      {
        uint64_t v11 = v37;
        sub_100067FDC(*(void *)(v37 + 48) + 40 * i, (uint64_t)v34);
        sub_10001B8E8(*(void *)(v11 + 56) + 32 * i, (uint64_t)v35 + 8);
        v32[0] = v35[0];
        v32[1] = v35[1];
        uint64_t v33 = v36;
        v31[0] = v34[0];
        v31[1] = v34[1];
        sub_100067FDC((uint64_t)v31, (uint64_t)v30);
        if (!swift_dynamicCast()) {
          break;
        }
        sub_10001B8E8((uint64_t)v32 + 8, (uint64_t)v30);
        unint64_t v12 = sub_100066D44((uint64_t)v30);
        if (v14 == -1)
        {
          swift_bridgeObjectRelease();
          uint64_t result = sub_1000680C4((uint64_t)v31);
          if (!v3) {
            goto LABEL_6;
          }
        }
        else
        {
          unint64_t v15 = v12;
          uint64_t v16 = v13;
          char v17 = v14;
          sub_1000680C4((uint64_t)v31);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_10006B368(0, v6[2] + 1, 1, v6);
            uint64_t v6 = (void *)result;
          }
          unint64_t v19 = v6[2];
          unint64_t v18 = v6[3];
          NSString v20 = v6;
          if (v19 >= v18 >> 1)
          {
            uint64_t result = (uint64_t)sub_10006B368((void *)(v18 > 1), v19 + 1, 1, v6);
            NSString v20 = (void *)result;
          }
          void v20[2] = v19 + 1;
          uint64_t v6 = v20;
          id v21 = &v20[5 * v19];
          v21[4] = v28;
          void v21[5] = v29;
          v21[6] = v15;
          v21[7] = v16;
          *((unsigned char *)v21 + 64) = v17;
          if (!v3) {
            goto LABEL_6;
          }
        }
LABEL_29:
        unint64_t v22 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
      }
      sub_100068038();
      swift_allocError();
      uint64_t v24 = v23;
      *(void *)(v23 + 24) = &type metadata for AnyHashable;
      uint64_t v25 = swift_allocObject();
      *(void *)uint64_t v24 = v25;
      sub_100067FDC((uint64_t)v31, v25 + 16);
      *(unsigned char *)(v24 + 32) = 0;
      swift_willThrow();
      sub_1000680C4((uint64_t)v31);
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v6;
    }
    while (1)
    {
      int64_t v5 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      if (v5 >= v27) {
        goto LABEL_31;
      }
      unint64_t v8 = *(void *)(v26 + 8 * v5);
      ++v9;
      if (v8) {
        goto LABEL_21;
      }
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100066D44(uint64_t a1)
{
  sub_10001B8E8(a1, (uint64_t)v16);
  if (swift_dynamicCast())
  {
    unint64_t v2 = v15;
    sub_1000048E4(a1);
  }
  else
  {
    sub_10001B8E8(a1, (uint64_t)v16);
    if (swift_dynamicCast() & 1) != 0 || (sub_10001B8E8(a1, (uint64_t)v16), (swift_dynamicCast()))
    {
      unint64_t v2 = (unint64_t)v15;
      sub_1000048E4(a1);
    }
    else
    {
      sub_10001B8E8(a1, (uint64_t)v16);
      sub_1000048A0(&qword_1000AB600);
      if (swift_dynamicCast())
      {
        uint64_t v3 = v15[2];
        if (v3)
        {
          uint64_t v4 = (uint64_t)(v15 + 4);
          swift_bridgeObjectRetain();
          unint64_t v2 = (unint64_t)_swiftEmptyArrayStorage;
          do
          {
            sub_10001B8E8(v4, (uint64_t)v16);
            sub_10001B8E8((uint64_t)v16, (uint64_t)&v15);
            uint64_t v6 = sub_100066D44(&v15);
            uint64_t v8 = v7;
            char v10 = v9;
            int v11 = ~v9;
            sub_1000048E4((uint64_t)v16);
            if (v11)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v2 = (unint64_t)sub_10006B880(0, *(void *)(v2 + 16) + 1, 1, (void *)v2);
              }
              unint64_t v13 = *(void *)(v2 + 16);
              unint64_t v12 = *(void *)(v2 + 24);
              if (v13 >= v12 >> 1) {
                unint64_t v2 = (unint64_t)sub_10006B880((void *)(v12 > 1), v13 + 1, 1, (void *)v2);
              }
              *(void *)(v2 + 16) = v13 + 1;
              int64_t v5 = (void *)(v2 + 24 * v13);
              v5[4] = v6;
              v5[5] = v8;
              *((unsigned char *)v5 + 48) = v10;
            }
            v4 += 32;
            --v3;
          }
          while (v3);
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v2 = (unint64_t)_swiftEmptyArrayStorage;
        }
        sub_1000048E4(a1);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1000048E4(a1);
        return 0;
      }
    }
  }
  return v2;
}

Swift::Int sub_100066FC8(Swift::UInt a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  switch(a3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a1);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_100067D3C((uint64_t)v6, a1);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(a1 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000670B8(uint64_t a1, uint64_t a2)
{
  return sub_100067E4C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

Swift::Int sub_1000670D4()
{
  return sub_100066FC8(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_1000670E0(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v2);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_100067D3C(a1, v2);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v2 & 1);
      break;
  }
}

Swift::Int sub_1000671DC()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch(v2)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v1);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_100067D3C((uint64_t)v4, v1);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1 & 1);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000672C4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100067AB8((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10006731C(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_100067AB8(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100067368()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100067AB8((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000673BC(uint64_t *a1, uint64_t *a2)
{
  return sub_1000673C8(*a1, *a2);
}

uint64_t sub_1000673C8(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v33 = a1 + 64;
    uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v6 = -1;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    unint64_t v7 = v6 & *(void *)(a1 + 64);
    int64_t v34 = (unint64_t)(v5 + 63) >> 6;
    while (1)
    {
      if (v7)
      {
        unint64_t v8 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v9 = v8 | (v4 << 6);
      }
      else
      {
        int64_t v10 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        if (v10 >= v34) {
          return 1;
        }
        unint64_t v11 = *(void *)(v33 + 8 * v10);
        ++v4;
        if (!v11)
        {
          int64_t v4 = v10 + 1;
          if (v10 + 1 >= v34) {
            return 1;
          }
          unint64_t v11 = *(void *)(v33 + 8 * v4);
          if (!v11)
          {
            int64_t v4 = v10 + 2;
            if (v10 + 2 >= v34) {
              return 1;
            }
            unint64_t v11 = *(void *)(v33 + 8 * v4);
            if (!v11)
            {
              int64_t v4 = v10 + 3;
              if (v10 + 3 >= v34) {
                return 1;
              }
              unint64_t v11 = *(void *)(v33 + 8 * v4);
              if (!v11)
              {
                int64_t v12 = v10 + 4;
                if (v12 >= v34) {
                  return 1;
                }
                unint64_t v11 = *(void *)(v33 + 8 * v12);
                if (!v11)
                {
                  while (1)
                  {
                    int64_t v4 = v12 + 1;
                    if (__OFADD__(v12, 1)) {
                      break;
                    }
                    if (v4 >= v34) {
                      return 1;
                    }
                    unint64_t v11 = *(void *)(v33 + 8 * v4);
                    ++v12;
                    if (v11) {
                      goto LABEL_24;
                    }
                  }
LABEL_47:
                  __break(1u);
                  JUMPOUT(0x1000676C8);
                }
                int64_t v4 = v12;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v11 - 1) & v11;
        unint64_t v9 = __clz(__rbit64(v11)) + (v4 << 6);
      }
      unint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t v16 = *(void *)(a1 + 56) + 24 * v9;
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      int v19 = *(unsigned __int8 *)(v16 + 16);
      swift_bridgeObjectRetain();
      sub_100006DE4(v17, v18, v19);
      uint64_t v20 = sub_100072904(v14, v15);
      char v22 = v21;
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        break;
      }
      uint64_t v23 = *(void *)(a2 + 56) + 24 * v20;
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      switch(*(unsigned char *)(v23 + 16))
      {
        case 1:
          if (v19 != 1) {
            goto LABEL_44;
          }
          if (v24 != v17) {
            return 0;
          }
          continue;
        case 2:
          if (v19 != 2) {
            goto LABEL_44;
          }
          if (v24 == v17 && v25 == v18)
          {
            sub_100006E08(v17, v18, 2);
          }
          else
          {
            char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v28 = v17;
            uint64_t v29 = v18;
            char v30 = 2;
LABEL_41:
            sub_100006E08(v28, v29, v30);
            if ((v27 & 1) == 0) {
              return 0;
            }
          }
          break;
        case 3:
          if (v19 != 3) {
            goto LABEL_44;
          }
          uint64_t v31 = swift_bridgeObjectRetain();
          char v27 = sub_1000068DC(v31, v17);
          sub_100006E08(v24, v25, 3);
          uint64_t v28 = v17;
          uint64_t v29 = v18;
          char v30 = 3;
          goto LABEL_41;
        default:
          if (v19) {
            goto LABEL_44;
          }
          if (((v17 ^ ((*(void *)v23 & 1) == 0)) & 1) == 0) {
            return 0;
          }
          continue;
      }
    }
LABEL_44:
    sub_100006E08(v17, v18, v19);
  }
  return 0;
}

uint64_t sub_1000676D8(uint64_t a1, char a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v46 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  char v9 = *(unsigned char *)(a1 + 64);
  swift_bridgeObjectRetain();
  uint64_t v10 = *a3;
  swift_bridgeObjectRetain();
  sub_100006DE4(v8, v7, v9);
  unint64_t v12 = sub_100072904(v6, v5);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (*(void *)(v10 + 24) >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10006E7C4();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = a3;
    char v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    char v22 = (uint64_t *)(v21[6] + 16 * v12);
    *char v22 = v6;
    v22[1] = v5;
    uint64_t v23 = v21[7] + 24 * v12;
    *(void *)uint64_t v23 = v8;
    *(void *)(v23 + 8) = v7;
    *(unsigned char *)(v23 + 16) = v9;
    uint64_t v24 = v21[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v21[2] = v26;
    uint64_t v27 = v46 - 1;
    if (v46 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (unint64_t i = (char *)(a1 + 104); ; i += 40)
    {
      uint64_t v30 = *((void *)i - 4);
      uint64_t v29 = *((void *)i - 3);
      uint64_t v8 = *((void *)i - 2);
      uint64_t v7 = *((void *)i - 1);
      char v9 = *i;
      uint64_t v31 = *v20;
      swift_bridgeObjectRetain();
      sub_100006DE4(v8, v7, v9);
      unint64_t v32 = sub_100072904(v30, v29);
      uint64_t v34 = *(void *)(v31 + 16);
      BOOL v35 = (v33 & 1) == 0;
      BOOL v25 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v25) {
        break;
      }
      char v37 = v33;
      if (*(void *)(v31 + 24) < v36)
      {
        sub_10006C7E4(v36, 1);
        unint64_t v32 = sub_100072904(v30, v29);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v20 = a3;
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      uint64_t v40 = (uint64_t *)(v39[6] + 16 * v32);
      *uint64_t v40 = v30;
      v40[1] = v29;
      uint64_t v41 = v39[7] + 24 * v32;
      *(void *)uint64_t v41 = v8;
      *(void *)(v41 + 8) = v7;
      *(unsigned char *)(v41 + 16) = v9;
      uint64_t v42 = v39[2];
      BOOL v25 = __OFADD__(v42, 1);
      uint64_t v43 = v42 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v39[2] = v43;
      if (!--v27) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10006C7E4(v15, a2 & 1);
  uint64_t v17 = sub_100072904(v6, v5);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_1000048A0(&qword_1000ACAA0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_100006E08(v8, v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v44._object = (void *)0x8000000100088100;
  v44._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)();
  v45._countAndFlagsBits = 39;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100067AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v21 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v7 = 0;
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v11 >= v21) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v22 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v21) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v22 + 8 * v8);
      if (!v12) {
        break;
      }
    }
LABEL_19:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_20:
    uint64_t v14 = *(void *)(a2 + 56) + 24 * v10;
    Swift::UInt v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(unsigned __int8 *)(v14 + 16);
    uint64_t v18 = *(void *)(a1 + 64);
    long long v19 = *(_OWORD *)(a1 + 16);
    v23[0] = *(_OWORD *)a1;
    v23[1] = v19;
    long long v20 = *(_OWORD *)(a1 + 48);
    _OWORD v23[2] = *(_OWORD *)(a1 + 32);
    v23[3] = v20;
    uint64_t v24 = v18;
    swift_bridgeObjectRetain();
    sub_100006DE4(v15, v16, v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    switch(v17)
    {
      case 1:
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v15);
        break;
      case 2:
        Hasher._combine(_:)(2uLL);
        String.hash(into:)();
        sub_100006E08(v15, v16, 2);
        break;
      case 3:
        Hasher._combine(_:)(3uLL);
        sub_100067D3C((uint64_t)v23, v15);
        sub_100006E08(v15, v16, 3);
        break;
      default:
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v15 & 1);
        break;
    }
    v7 ^= Hasher._finalize()();
  }
  int64_t v13 = v11 + 2;
  if (v13 < v21)
  {
    unint64_t v12 = *(void *)(v22 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v8 >= v21) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v22 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_19;
        }
      }
LABEL_26:
      __break(1u);
      JUMPOUT(0x100067D2CLL);
    }
    int64_t v8 = v13;
    goto LABEL_19;
  }
LABEL_24:
  swift_release();
  Hasher._combine(_:)(v7);
}

void sub_100067D3C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)(a2 + 48);
    do
    {
      Swift::UInt v9 = *((void *)v5 - 2);
      uint64_t v10 = *((void *)v5 - 1);
      int v11 = *v5;
      v5 += 24;
      switch(v11)
      {
        case 1:
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v9);
          break;
        case 2:
          Hasher._combine(_:)(2uLL);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          uint64_t v6 = v9;
          uint64_t v7 = v10;
          char v8 = 2;
          goto LABEL_4;
        case 3:
          Hasher._combine(_:)(3uLL);
          swift_bridgeObjectRetain();
          sub_100067D3C(a1, v9);
          uint64_t v6 = v9;
          uint64_t v7 = v10;
          char v8 = 3;
LABEL_4:
          sub_100006E08(v6, v7, v8);
          break;
        default:
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v9 & 1);
          break;
      }
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_100067E4C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      BOOL v9 = a6 == 1 && a1 == a4;
      uint64_t result = v9;
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_18;
      }
      if (a1 == a4 && a2 == a5) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
    case 3:
      if (a6 == 3) {
        uint64_t result = sub_1000068DC(a1, a4);
      }
      else {
LABEL_18:
      }
        uint64_t result = 0;
      break;
    default:
      char v6 = ((a1 & 1) == 0) ^ a4;
      if (a6) {
        char v6 = 0;
      }
      uint64_t result = v6 & 1;
      break;
  }
  return result;
}

uint64_t sub_100067F08(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = sub_1000669D8(result);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v1)
    {
      if (*(void *)(v2 + 16))
      {
        sub_1000048A0(&qword_1000AF540);
        uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v3 = _swiftEmptyDictionarySingleton;
      }
      uint64_t v5 = v3;
      uint64_t v4 = swift_bridgeObjectRetain();
      sub_1000676D8(v4, 1, (uint64_t *)&v5);
      swift_bridgeObjectRelease();
      return (uint64_t)v5;
    }
  }
  return result;
}

uint64_t sub_100067FDC(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100068038()
{
  unint64_t result = qword_1000AF548;
  if (!qword_1000AF548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AF548);
  }
  return result;
}

uint64_t sub_10006808C()
{
  sub_1000048E4(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000680C4(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AF550);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for AEAPropertyList.ParsingError(uint64_t a1)
{
  return sub_1000048E4(a1);
}

uint64_t initializeWithCopy for AEAPropertyList.ParsingError(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  BOOL v4 = v3 == 1;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  (**(void (***)(uint64_t))(v5 - 8))(a1);
  *(unsigned char *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for AEAPropertyList.ParsingError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000048E4(a1);
    unsigned int v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    BOOL v5 = v4 == 1;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(unsigned char *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t assignWithTake for AEAPropertyList.ParsingError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000048E4(a1);
    unsigned int v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 32) = v4 == 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAPropertyList.ParsingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AEAPropertyList.ParsingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100068334(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_100068350(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AEAPropertyList.ParsingError()
{
  return &type metadata for AEAPropertyList.ParsingError;
}

ValueMetadata *type metadata accessor for AEAPropertyList()
{
  return &type metadata for AEAPropertyList;
}

uint64_t destroy for AEAPropertyList.Value(uint64_t a1)
{
  return sub_100006E08(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s15assessmentagent15AEAPropertyListV5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100006DE4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AEAPropertyList.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100006DE4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100006E08(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AEAPropertyList.Value(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100006E08(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAPropertyList.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAPropertyList.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100068520(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100068528(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AEAPropertyList.Value()
{
  return &type metadata for AEAPropertyList.Value;
}

unint64_t sub_100068544()
{
  unint64_t result = qword_1000AF558;
  if (!qword_1000AF558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AF558);
  }
  return result;
}

unint64_t sub_10006859C()
{
  unint64_t result = qword_1000AF560;
  if (!qword_1000AF560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AF560);
  }
  return result;
}

uint64_t sub_1000685F0()
{
  uint64_t v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease_n();
    *uint64_t v0 = (uint64_t)_swiftEmptyArrayStorage;
    return result;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      AnyCancellable.cancel()();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000686DC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  BOOL v9 = (char *)&v18 - v8;
  UUID.init()();
  uint64_t v21 = sub_1000048A0(&qword_1000AF768);
  swift_allocObject();
  uint64_t v10 = PassthroughSubject.init()();
  int v11 = (void (*)(char *, char *, uint64_t))v2[2];
  v11(v6, v9, v1);
  swift_beginAccess();
  uint64_t v19 = v10;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = 0x8000000000000000;
  sub_10006D9E0(v10, (uint64_t)v6, isUniquelyReferenced_nonNull_native, &qword_1000AF788);
  *(void *)(v0 + 24) = v22;
  swift_bridgeObjectRelease();
  long long v20 = (void (*)(char *, uint64_t))v2[1];
  v20(v6, v1);
  swift_endAccess();
  v11(v6, v9, v1);
  sub_1000048A0(&qword_1000AF770);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v0;
  uint64_t v14 = v13 + qword_1000ABA48;
  Swift::UInt v15 = (void (*)(uint64_t, char *, uint64_t))v2[4];
  swift_retain();
  v15(v14, v6, v1);
  uint64_t v23 = v13;
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  sub_100005840(&qword_1000AF778, &qword_1000AF770);
  swift_retain();
  uint64_t v16 = AnyCancellable.init<A>(_:)();
  uint64_t v23 = v19;
  sub_100005840(&qword_1000AF780, &qword_1000AF768);
  Publisher.eraseToAnyPublisher()();
  swift_release();
  v20(v9, v1);
  swift_release();
  return v16;
}

uint64_t sub_1000689E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000201B4(a1, &qword_1000ADE90);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100068B8C(uint64_t a1, void (*a2)(uint64_t, uint64_t (*)(uint64_t a1, char a2), uint64_t))
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(sub_1000048A0(&qword_1000AEDD8) + 48));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  swift_retain();
  a2(a1, sub_10006FA40, v7);

  return swift_release();
}

uint64_t sub_100068C38()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = sub_1000048A0(&qword_1000AF740);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  int v11 = (char *)v31 - v10;
  swift_beginAccess();
  sub_1000685F0();
  swift_endAccess();
  unint64_t v12 = (void *)(v0
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  uint64_t v13 = *(void *)(v0
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  *unint64_t v12 = 0;
  v12[1] = 0;
  sub_1000091B4(v13);
  uint64_t v14 = v0
      + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile;
  swift_beginAccess();
  sub_10006F834(v14, (uint64_t)v11);
  uint64_t v15 = type metadata accessor for AEAConfigurationProfile(0);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v15);
  uint64_t result = sub_1000201B4((uint64_t)v11, &qword_1000AF740);
  if (v17 != 1)
  {
    uint64_t v35 = v16;
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v34 = v8;
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000CB7C(v19, (uint64_t)qword_1000B0110);
    swift_retain_n();
    long long v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v36[0] = v32;
      uint64_t v33 = v1;
      *(_DWORD *)uint64_t v22 = 136446210;
      v31[1] = v22 + 4;
      type metadata accessor for UUID();
      sub_10006FE2C(&qword_1000AF790);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v36[7] = sub_1000722AC(v23, v24, v36);
      uint64_t v2 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v25 = v21;
      p_cache = (void **)(&OBJC_METACLASS____TtC15assessmentagentP33_805CA3E2EA204F0AE738F6962258085725AEARestrictMediaAssertion
                        + 16);
      _os_log_impl((void *)&_mh_execute_header, v20, v25, "Uninstalling profile with ID: %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v27 = v35;
    }
    else
    {

      swift_release_n();
      uint64_t v27 = v35;
      p_cache = &OBJC_METACLASS____TtC15assessmentagentP33_805CA3E2EA204F0AE738F6962258085725AEARestrictMediaAssertion.cache;
    }
    uint64_t v28 = *(void *)(v3
                    + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                    + 24);
    uint64_t v29 = *(void *)(v3
                    + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                    + 32);
    sub_100006340((void *)(v3+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles), v28);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 24))((char *)p_cache[173] + v3, v28, v29);
    if (!v2)
    {
      uint64_t v30 = (uint64_t)v34;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v34, 1, 1, v15);
      swift_beginAccess();
      sub_10006F960(v30, v14);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_100069038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2
                + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  uint64_t v4 = *(void *)(v2
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  *uint64_t v3 = a1;
  v3[1] = a2;
  swift_retain();
  sub_1000091B4(v4);
  sub_1000686DC();
  uint64_t v5 = (void *)(v2
                + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_subscriptions);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10006FA00;
  *(void *)(v7 + 24) = v6;
  sub_1000048A0(&qword_1000ABFE0);
  sub_100005840(&qword_1000ABFE8, &qword_1000ABFE0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_beginAccess();
  sub_1000048A0(&qword_1000ABFF0);
  sub_100005840(&qword_1000ABFF8, &qword_1000ABFF0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100069268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8, v9);
  uint64_t v10 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000048A0(&qword_1000ADE90);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
    sub_10006FED4(a1, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    uint64_t v18 = static MainActor.shared.getter();
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    os_log_type_t v21 = (void *)swift_allocObject();
    void v21[2] = v18;
    void v21[3] = &protocol witness table for MainActor;
    v21[4] = v16;
    sub_10006FF3C((uint64_t)v10, (uint64_t)v21 + v19, (uint64_t (*)(void))type metadata accessor for AEAAssessmentSessionConfiguration);
    uint64_t v22 = (void *)((char *)v21 + v20);
    *uint64_t v22 = a2;
    v22[1] = a3;
    sub_1000689E0((uint64_t)v14, (uint64_t)&unk_1000AF750, (uint64_t)v21);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000694B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  void v7[5] = a7;
  _OWORD v7[2] = a4;
  _OWORD v7[3] = a5;
  v7[6] = type metadata accessor for MainActor();
  v7[7] = static MainActor.shared.getter();
  return _swift_task_switch(sub_100069538, a4, 0);
}

uint64_t sub_100069538()
{
  sub_10006962C(*(void *)(v0 + 24), *(void (**)(void, void))(v0 + 32), *(void *)(v0 + 40));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000695CC, v2, v1);
}

uint64_t sub_1000695CC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006962C(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v80 = a3;
  int v81 = a2;
  uint64_t v5 = sub_1000048A0(&qword_1000AF740);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v74 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v70 - v11;
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v70 - v14;
  uint64_t v16 = type metadata accessor for AEAConfigurationProfile(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  int v72 = (uint8_t *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v73 = (uint64_t)&v70 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  BOOL v71 = (uint8_t *)&v70 - v26;
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v70 - v28;
  sub_10006A068(a1, (uint64_t)&v70 - v28);
  uint64_t v31 = *(void *)(v3
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                  + 24);
  uint64_t v30 = *(void *)(v3
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                  + 32);
  int v79 = (void *)(v3
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles);
  sub_100006340((void *)(v3+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles), v31);
  int v82 = v29;
  uint64_t v32 = (uint64_t)v29;
  uint64_t v33 = v3;
  sub_10006FED4(v32, (uint64_t)v15, type metadata accessor for AEAConfigurationProfile);
  int v76 = *(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
  uint64_t v77 = v17 + 56;
  v76(v15, 0, 1, v16);
  uint64_t v34 = v3
      + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile;
  swift_beginAccess();
  sub_10006F834(v34, (uint64_t)v12);
  char v35 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v30 + 8))(v15, v12, v31, v30);
  int v78 = v12;
  sub_1000201B4((uint64_t)v12, &qword_1000AF740);
  int v75 = v15;
  sub_1000201B4((uint64_t)v15, &qword_1000AF740);
  if (v35)
  {
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10000CB7C(v36, (uint64_t)qword_1000B0110);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = (uint64_t)v82;
    if (v39)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping configuration profile installation/update", v41, 2u);
      swift_slowDealloc();
    }

    goto LABEL_24;
  }
  uint64_t v42 = v74;
  sub_10006F834(v34, v74);
  int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v42, 1, v16);
  sub_1000201B4(v42, &qword_1000AF740);
  if (v43 == 1)
  {
    uint64_t v74 = v34;
    uint64_t v40 = (uint64_t)v82;
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_10000CB7C(v44, (uint64_t)qword_1000B0110);
    uint64_t v45 = (uint64_t)v71;
    sub_10006FED4(v40, (uint64_t)v71, type metadata accessor for AEAConfigurationProfile);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136446210;
      int v72 = v48 + 4;
      sub_10006FED4(v45, v73, type metadata accessor for AEAConfigurationProfile);
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v83 = sub_1000722AC(v49, v50, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006F89C(v45);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Installing configuration profile with descriptor: %{public}s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10006F89C(v45);
    }

    uint64_t v34 = v74;
  }
  else
  {
    uint64_t v74 = v33;
    uint64_t v40 = (uint64_t)v82;
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10000CB7C(v51, (uint64_t)qword_1000B0110);
    uint64_t v52 = (uint64_t)v72;
    sub_10006FED4(v40, (uint64_t)v72, type metadata accessor for AEAConfigurationProfile);
    __int16 v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      char v55 = (uint8_t *)swift_slowAlloc();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)char v55 = 136446210;
      BOOL v71 = v55 + 4;
      sub_10006FED4(v52, v73, type metadata accessor for AEAConfigurationProfile);
      uint64_t v56 = String.init<A>(describing:)();
      uint64_t v83 = sub_1000722AC(v56, v57, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006F89C(v52);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Updating configuration profile with descriptor: %{public}s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10006F89C(v52);
    }

    uint64_t v33 = v74;
  }
  uint64_t v58 = (uint64_t)v75;
  sub_10006FED4(v40, (uint64_t)v75, type metadata accessor for AEAConfigurationProfile);
  v76((char *)v58, 0, 1, v16);
  uint64_t v59 = v58;
  uint64_t v60 = (uint64_t)v78;
  sub_10006F8F8(v59, (uint64_t)v78);
  swift_beginAccess();
  sub_10006F960(v60, v34);
  swift_endAccess();
  char v61 = (void *)(v33
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  int v62 = *(void (**)(uint64_t))(v33
                                       + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  if (v62)
  {
    *char v61 = 0;
    v61[1] = 0;
    swift_retain();
    uint64_t v63 = sub_1000091B4((uint64_t)v62);
    v62(v63);
    sub_1000091B4((uint64_t)v62);
  }
  uint64_t v64 = v79[3];
  uint64_t v65 = v79[4];
  sub_100006340(v79, v64);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v40, v64, v65);
  uint64_t v67 = *(void *)(v33
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_version);
  BOOL v68 = __OFADD__(v67, 1);
  uint64_t v69 = v67 + 1;
  if (!v68)
  {
    *(void *)(v33
              + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_version) = v69;
LABEL_24:
    v81(0, 0);
    return sub_10006F89C(v40);
  }
  __break(1u);
  return result;
}

void sub_10006A068(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v58 = type metadata accessor for AEAConfigurationProfile.Payload(0);
  uint64_t v4 = *(void *)(v58 - 8);
  __chkstk_darwin(v58, v5);
  uint64_t v52 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v60 - 8);
  uint64_t v9 = __chkstk_darwin(v60, v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v51 - v13;
  sub_1000048A0(&qword_1000AF720);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v61 = *(void *)(v4 + 72);
  unint64_t v62 = v15;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100082BA0;
  UUID.init()();
  sub_1000048A0(&qword_1000AF728);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100083F80;
  uint64_t v18 = *(void **)(v2
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_preferences);
  id v19 = [v18 disableContinuity];
  id v20 = [v19 value];

  if (!v20)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v55 = v2;
  uint64_t v56 = a2;
  unsigned __int8 v21 = [v20 BOOLValue];

  *(unsigned char *)(v17 + 32) = v21 ^ 1;
  id v57 = v18;
  id v22 = [v18 disableDictation];
  id v23 = [v22 value];

  if (!v23)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v53 = v16;
  unint64_t v24 = v16 + v62;
  unsigned __int8 v25 = [v23 BOOLValue];

  *(unsigned char *)(v17 + 33) = v25 ^ 1 | 0x10;
  *(_WORD *)(v17 + 34) = 12320;
  uint64_t v26 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration();
  uint64_t v27 = v59;
  *(unsigned char *)(v17 + 36) = *(unsigned char *)(v59 + v26[8]) | 0x40;
  *(unsigned char *)(v17 + 37) = *(unsigned char *)(v27 + v26[10]) | 0x50;
  *(unsigned char *)(v17 + 38) = *(unsigned char *)(v27 + v26[6]) | 0x60;
  *(unsigned char *)(v17 + 39) = *(unsigned char *)(v27 + v26[9]) | 0x70;
  *(unsigned char *)(v17 + 40) = 0x80;
  uint64_t v54 = v7;
  uint64_t v28 = *(void (**)(unint64_t, char *, uint64_t))(v7 + 32);
  uint64_t v29 = v14;
  uint64_t v30 = v60;
  v28(v24, v29, v60);
  uint64_t v31 = v58;
  *(void *)(v24 + *(int *)(v58 + 20)) = 1;
  unint64_t v32 = v24 + *(int *)(v31 + 24);
  *(void *)unint64_t v32 = v17;
  *(unsigned char *)(v32 + 8) = 0;
  UUID.init()();
  sub_1000048A0(&qword_1000AF730);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100080BE0;
  id v34 = [v57 disableQuickNote];
  id v35 = [v34 value];

  if (!v35)
  {
LABEL_12:
    __break(1u);
    return;
  }
  unint64_t v36 = v24 + v61;
  unsigned __int8 v37 = [v35 BOOLValue];

  *(unsigned char *)(v33 + 32) = v37 ^ 1;
  v28(v36, v11, v30);
  *(void *)(v36 + *(int *)(v31 + 20)) = 1;
  unint64_t v38 = v36 + *(int *)(v31 + 24);
  *(void *)unint64_t v38 = v33;
  *(unsigned char *)(v38 + 8) = 1;
  uint64_t v39 = sub_10006A5B8();
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = (uint64_t)v52;
    UUID.init()();
    *(void *)(v41 + *(int *)(v31 + 20)) = 1;
    uint64_t v42 = v41 + *(int *)(v31 + 24);
    *(void *)uint64_t v42 = v40;
    *(unsigned char *)(v42 + 8) = 2;
    uint64_t v44 = v53;
    uint64_t v43 = v54;
    unint64_t v46 = *(void *)(v53 + 16);
    unint64_t v45 = *(void *)(v53 + 24);
    uint64_t v48 = v55;
    uint64_t v47 = v56;
    if (v46 >= v45 >> 1) {
      uint64_t v44 = sub_10006B600(v45 > 1, v46 + 1, 1, v53, &qword_1000AF720, type metadata accessor for AEAConfigurationProfile.Payload, type metadata accessor for AEAConfigurationProfile.Payload);
    }
    *(void *)(v44 + 16) = v46 + 1;
    sub_10006FF3C(v41, v44 + v62 + v46 * v61, type metadata accessor for AEAConfigurationProfile.Payload);
  }
  else
  {
    uint64_t v48 = v55;
    uint64_t v47 = v56;
    uint64_t v44 = v53;
    uint64_t v43 = v54;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v47, v48+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_profileID, v30);
  uint64_t v49 = *(void *)(v48
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_version);
  uint64_t v50 = type metadata accessor for AEAConfigurationProfile(0);
  *(void *)(v47 + *(int *)(v50 + 20)) = v49;
  *(void *)(v47 + *(int *)(v50 + 24)) = v44;
}

uint64_t sub_10006A5B8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration() + 20));
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v23 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 40 * i);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = (unsigned __int8 *)(*(void *)(v1 + 56) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = *((void *)v16 + 1);
    if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v19)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_27:
      id v22 = sub_10006AA88(v17, v18);
      swift_release();
      swift_bridgeObjectRelease();
      return (uint64_t)v22;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_27;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v10 >= v23) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (v11) {
      goto LABEL_18;
    }
    int64_t v7 = v10 + 1;
    if (v10 + 1 >= v23) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    if (v11) {
      goto LABEL_18;
    }
    int64_t v7 = v10 + 2;
    if (v10 + 2 >= v23) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    if (v11) {
      goto LABEL_18;
    }
    int64_t v12 = v10 + 3;
    if (v12 >= v23)
    {
LABEL_28:
      swift_release();
      return 0;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v7 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_31;
        }
        if (v7 >= v23) {
          goto LABEL_28;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        ++v12;
        if (v11) {
          goto LABEL_18;
        }
      }
    }
    int64_t v7 = v12;
LABEL_18:
    unint64_t v5 = (v11 - 1) & v11;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10006A7D8()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_profileID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_preferences));
  swift_release();
  sub_1000048E4(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles);
  swift_bridgeObjectRelease();
  sub_1000091B4(*(void *)(v0
                          + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler));
  sub_1000201B4(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile, &qword_1000AF740);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10006A8C0()
{
  return type metadata accessor for AEAConfigurationProfileAssertion();
}

uint64_t type metadata accessor for AEAConfigurationProfileAssertion()
{
  uint64_t result = qword_1000AF5D0;
  if (!qword_1000AF5D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10006A914()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10006AA30();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10006AA30()
{
  if (!qword_1000AF5E0)
  {
    type metadata accessor for AEAConfigurationProfile(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AF5E0);
    }
  }
}

void *sub_10006AA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v6 = sub_1000204F0(v4, v5, a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 2)
  {
    int64_t v7 = _swiftEmptyArrayStorage;
  }
  else
  {
    char v8 = v6 & 1;
    int64_t v7 = sub_10006B9A4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v9 > 1), v10 + 1, 1, v7);
    }
    _OWORD v7[2] = v10 + 1;
    *((unsigned char *)v7 + v10 + 32) = v8;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v13 = sub_1000204F0(v11, v12, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v13 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v15 = v7[2];
    unint64_t v14 = v7[3];
    if (v15 >= v14 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v14 > 1), v15 + 1, 1, v7);
    }
    _OWORD v7[2] = v15 + 1;
    *((unsigned char *)v7 + v15 + 32) = v13 & 1 | 0x20;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v18 = sub_1000204F0(v16, v17, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v18 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v20 = v7[2];
    unint64_t v19 = v7[3];
    if (v20 >= v19 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v19 > 1), v20 + 1, 1, v7);
    }
    _OWORD v7[2] = v20 + 1;
    *((unsigned char *)v7 + v20 + 32) = v18 & 1 | 0x40;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v23 = sub_1000204F0(v21, v22, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v23 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v25 = v7[2];
    unint64_t v24 = v7[3];
    if (v25 >= v24 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v24 > 1), v25 + 1, 1, v7);
    }
    _OWORD v7[2] = v25 + 1;
    *((unsigned char *)v7 + v25 + 32) = v23 & 1 | 0x60;
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v28 = sub_1000204F0(v26, v27, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v28 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v30 = v7[2];
    unint64_t v29 = v7[3];
    if (v30 >= v29 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v29 > 1), v30 + 1, 1, v7);
    }
    _OWORD v7[2] = v30 + 1;
    *((unsigned char *)v7 + v30 + 32) = v28 & 1 | 0x80;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v33 = sub_1000204F0(v31, v32, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v33 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v35 = v7[2];
    unint64_t v34 = v7[3];
    if (v35 >= v34 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v34 > 1), v35 + 1, 1, v7);
    }
    _OWORD v7[2] = v35 + 1;
    *((unsigned char *)v7 + v35 + 32) = v33 & 1 | 0xA0;
  }
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v38 = sub_1000204F0(v36, v37, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v38 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v40 = v7[2];
    unint64_t v39 = v7[3];
    if (v40 >= v39 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v39 > 1), v40 + 1, 1, v7);
    }
    _OWORD v7[2] = v40 + 1;
    *((unsigned char *)v7 + v40 + 32) = v38 & 1 | 0xC0;
  }
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v43 = sub_1000204F0(v41, v42, a1 & 1, a2);
  swift_bridgeObjectRelease();
  if (v43 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v7 = sub_10006B9A4(0, v7[2] + 1, 1, v7);
    }
    unint64_t v45 = v7[2];
    unint64_t v44 = v7[3];
    if (v45 >= v44 >> 1) {
      int64_t v7 = sub_10006B9A4((void *)(v44 > 1), v45 + 1, 1, v7);
    }
    _OWORD v7[2] = v45 + 1;
    *((unsigned char *)v7 + v45 + 32) = v43 & 1 | 0xE0;
  }
  return v7;
}

void *sub_10006B010(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000AF7C0);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10006EFE0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10006B134(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000AF7F8);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10006F0D8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10006B258(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000ABFD8);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10006F1E8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10006B368(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000AF798);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10006F3D4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B488(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10006B600(a1, a2, a3, a4, &qword_1000AE5C0, type metadata accessor for AEAParticipant, type metadata accessor for AEAParticipant);
}

void *sub_10006B4BC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000AF7D0);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10006F4E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B5CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10006B600(a1, a2, a3, a4, &qword_1000AF7C8, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10006B600(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    char v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000048A0(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  char v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10006F6D8(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_10006B880(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000AF7A8);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10006F2DC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10006B9A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000048A0(&qword_1000AF738);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10006F5F0(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006BAA0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000048A0(&qword_1000AF7E0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10001059C(v24, v35);
      }
      else
      {
        sub_10001B8E8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10001059C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006BDA0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000048A0(&qword_1000AF810);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_10001059C((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100067FDC(v25, (uint64_t)&v38);
      sub_10001B8E8(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_10001059C(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006C0B8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000048A0(&qword_1000AF7E8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006C3C4(uint64_t a1, char a2)
{
  return sub_10006D134(a1, a2, &qword_1000AF7F0);
}

uint64_t sub_10006C3D0(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  sub_1000048A0(a3);
  int v49 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = *(void *)(v14 + 64);
  unint64_t v45 = (void *)(v14 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  char v43 = v5;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  unint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v8;
  unint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v21 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v44) {
      break;
    }
    uint64_t v28 = v45;
    unint64_t v29 = v45[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v29 = v45[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v43;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v45[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v44) {
              goto LABEL_34;
            }
            unint64_t v29 = v45[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v48 + 72);
    unint64_t v32 = *(void *)(v14 + 48) + v31 * v26;
    if (v49)
    {
      (*v20)(v11, v32, v7);
      uint64_t v33 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
    }
    else
    {
      (*v46)(v11, v32, v7);
      uint64_t v33 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
      swift_retain();
    }
    sub_10006FE2C((unint64_t *)&qword_1000ABAD8);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v21 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v24 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v20)(*(void *)(v15 + 48) + v31 * v24, v11, v7);
    *(void *)(*(void *)(v15 + 56) + 8 * v24) = v33;
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v5 = v43;
  uint64_t v28 = v45;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v14 + 32);
  if (v41 >= 64) {
    bzero(v28, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v41;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v15;
  return result;
}

uint64_t sub_10006C7E4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000048A0(&qword_1000AF540);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *(void *)(v32 + 8);
      char v35 = *(unsigned char *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100006DE4(v34, v33, v35);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v30;
      v18[1] = v31;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(unsigned char *)(v19 + 16) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006CB10(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AEAParticipant(0);
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000048A0(&qword_1000AF7B8);
  char v10 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v9 + 16))
  {
    unint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v14 = *(void *)(v9 + 64);
    char v40 = (void *)(v9 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    while (1)
    {
      if (v16)
      {
        unint64_t v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v23 = v22 | (v19 << 6);
      }
      else
      {
        int64_t v24 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v39) {
          goto LABEL_34;
        }
        unint64_t v25 = v40[v24];
        ++v19;
        if (!v25)
        {
          int64_t v19 = v24 + 1;
          if (v24 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v25 = v40[v19];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v10)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v40 = -1 << v37;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v40[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v19 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v25 = v40[v19];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v26;
          }
        }
LABEL_21:
        unint64_t v16 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      uint64_t v27 = *(void *)(v41 + 72);
      uint64_t v28 = *(void *)(v9 + 56) + v27 * v23;
      unint64_t v29 = *(void *)(*(void *)(v9 + 48) + 16 * v23 + 8);
      long long v42 = *(_OWORD *)(*(void *)(v9 + 48) + 16 * v23);
      if (v10)
      {
        sub_10006FF3C(v28, (uint64_t)v8, type metadata accessor for AEAParticipant);
      }
      else
      {
        sub_10006FED4(v28, (uint64_t)v8, type metadata accessor for AEAParticipant);
        sub_10002981C(v42, v29);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
        long long v21 = v42;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        long long v21 = v42;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_OWORD *)(*(void *)(v12 + 48) + 16 * v20) = v21;
      uint64_t result = sub_10006FF3C((uint64_t)v8, *(void *)(v12 + 56) + v27 * v20, type metadata accessor for AEAParticipant);
      ++*(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

void sub_10006CEE4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000048A0(&qword_1000AE030);
  char v28 = a2;
  unint64_t v29 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v27 = (void *)(v5 + 64);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(v5 + 64);
    unint64_t v25 = v2;
    int64_t v26 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v12 >= v26) {
          goto LABEL_22;
        }
        unint64_t v13 = v27[v12];
        ++v9;
        if (!v13)
        {
          int64_t v9 = v12 + 1;
          if (v12 + 1 >= v26) {
            goto LABEL_22;
          }
          unint64_t v13 = v27[v9];
          if (!v13)
          {
            int64_t v14 = v12 + 2;
            if (v14 >= v26)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (v28)
              {
                uint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v27 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v13 = v27[v14];
            if (!v13)
            {
              while (1)
              {
                int64_t v9 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_29;
                }
                if (v9 >= v26) {
                  goto LABEL_22;
                }
                unint64_t v13 = v27[v9];
                ++v14;
                if (v13) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v9 = v14;
          }
        }
LABEL_19:
        unint64_t v8 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
      }
      uint64_t v15 = *(void *)(v5 + 48) + 40 * v11;
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = *(void *)(v15 + 24);
      char v20 = *(unsigned char *)(v15 + 32);
      uint64_t v21 = *(void *)(v5 + 56) + 16 * v11;
      char v22 = *(unsigned char *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      if ((v28 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v30[0] = v17;
      v30[1] = v16;
      long long v30[2] = v18;
      v30[3] = v19;
      char v31 = v20;
      sub_100048944((uint64_t)v30, v22, v23, v29);
    }
  }
  swift_release();
  *uint64_t v3 = v29;
}

uint64_t sub_10006D128(uint64_t a1, char a2)
{
  return sub_10006D134(a1, a2, &qword_1000AF7B0);
}

uint64_t sub_10006D134(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1000048A0(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

_OWORD *sub_10006D448(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100072904(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10006DF9C();
      goto LABEL_7;
    }
    sub_10006BAA0(v15, a4 & 1);
    uint64_t v21 = sub_100072904(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_1000048E4((uint64_t)v19);
    return sub_10001059C(a1, v19);
  }
LABEL_13:
  sub_10006DD04(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10006D59C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10006D9E0(a1, a2, a3, &qword_1000AF808);
}

_OWORD *sub_10006D5A8(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000729B4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10006E190();
      goto LABEL_7;
    }
    sub_10006BDA0(v13, a3 & 1);
    unint64_t v19 = sub_1000729B4(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100067FDC(a2, (uint64_t)v21);
      return sub_10006DD70(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_1000048E4((uint64_t)v17);

  return sub_10001059C(a1, v17);
}

uint64_t sub_10006D6F4(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100072904(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10006E378();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10006C0B8(result, a4 & 1);
  uint64_t result = sub_100072904(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v20 = (uint64_t *)(v18[6] + 16 * v12);
  *char v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1 & 1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10006D860(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100072904(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10006EE30(&qword_1000AF7F0);
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10006D134(v15, a4 & 1, &qword_1000AF7F0);
  uint64_t v21 = sub_100072904(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10006D9E0(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v28 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v14 = (void *)*v4;
  unint64_t v16 = sub_100072930(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    char v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10006E530(a4);
    goto LABEL_7;
  }
  sub_10006C3D0(v19, a3 & 1, a4);
  unint64_t v25 = sub_100072930(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  return sub_10006DDF0(v16, (uint64_t)v13, v28, v22);
}

uint64_t sub_10006DB9C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100072ADC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10006E9A0();
      goto LABEL_7;
    }
    sub_10006CB10(v15, a4 & 1);
    uint64_t v22 = sub_100072ADC(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      BOOL v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for AEAParticipant(0) - 8) + 72) * v12;
    return sub_10006FE70(a1, v20);
  }
LABEL_13:
  sub_10006DEA8(v12, a2, a3, a1, v18);

  return sub_10002981C(a2, a3);
}

_OWORD *sub_10006DD04(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10001059C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_10006DD70(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10001059C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_10006DDF0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_10006DEA8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for AEAParticipant(0);
  uint64_t result = sub_10006FF3C(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, type metadata accessor for AEAParticipant);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_10006DF54(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_10006DF9C()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AF7E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10001B8E8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_10001059C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10006E184()
{
  return sub_10006E530(&qword_1000AF808);
}

void *sub_10006E190()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AF810);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100067FDC(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10001B8E8(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_10001059C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006E378()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AF7E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    long long v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *long long v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006E524()
{
  return sub_10006EE30(&qword_1000AF7F0);
}

void *sub_10006E530(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000048A0(a1);
  uint64_t v27 = v1;
  uint64_t v8 = *v1;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v28 = v8 + 64;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v4 + 32;
  uint64_t v31 = v4 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v4 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, *(void *)(v8 + 48) + v20, v3);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v10 + 48) + v20, v7, v3);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006E7C4()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AF540);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    unint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    char v25 = *(unsigned char *)(v21 + 16);
    *unint64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(unsigned char *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_100006DE4(v22, v23, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006E9A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000048A0(&qword_1000AF7B8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v28 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v29 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    unint64_t v22 = *(void *)(v30 + 72) * v17;
    sub_10006FED4(*(void *)(v6 + 56) + v22, (uint64_t)v5, type metadata accessor for AEAParticipant);
    uint64_t v23 = (uint64_t *)(*(void *)(v8 + 48) + v18);
    uint64_t *v23 = v20;
    v23[1] = v21;
    sub_10006FF3C((uint64_t)v5, *(void *)(v8 + 56) + v22, type metadata accessor for AEAParticipant);
    uint64_t result = (void *)sub_10002981C(v20, v21);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10006EC38()
{
  uint64_t v1 = v0;
  sub_1000048A0(&qword_1000AE030);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v21 = *(void *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    LOBYTE(v17) = *(unsigned char *)(v17 + 32);
    uint64_t v22 = 16 * v15;
    uint64_t v23 = *(void *)(v2 + 56) + v22;
    char v24 = *(unsigned char *)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    uint64_t v26 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v26 = v18;
    *(void *)(v26 + 8) = v19;
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v20;
    *(unsigned char *)(v26 + 32) = v17;
    uint64_t v27 = *(void *)(v4 + 56) + v22;
    *(unsigned char *)uint64_t v27 = v24;
    *(void *)(v27 + 8) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006EE24()
{
  return sub_10006EE30(&qword_1000AF7B0);
}

void *sub_10006EE30(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000048A0(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10006EFE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F0D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1000048A0(&qword_1000AF800);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F1E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F2DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F3D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1000048A0(&qword_1000AF7A0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F4E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_1000048A0(&qword_1000AF7D8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10006F5F0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F6D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006F834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F89C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AEAConfigurationProfile(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006F8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000048A0(&qword_1000AF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F9C8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006FA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100069268(a1, a2, a3);
}

uint64_t sub_10006FA08()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006FA40(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10006FA80()
{
  uint64_t v1 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10006FC38(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AEAAssessmentSessionConfiguration() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  unint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *unint64_t v13 = v2;
  v13[1] = sub_10000ED6C;
  return sub_1000694B4(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_10006FD74(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000ED6C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000AF758 + dword_1000AF758);
  return v6(a1, v4);
}

uint64_t sub_10006FE2C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006FE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006FED4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006FF3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for AEAExternalDisplayActivation()
{
  return &type metadata for AEAExternalDisplayActivation;
}

uint64_t sub_10006FFBC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10006FFDC, 0, 0);
}

uint64_t sub_10006FFDC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 64);
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_1000ACAE0 + dword_1000ACAE0);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  void *v2 = v0;
  v2[1] = sub_100070088;
  return v4(v1);
}

uint64_t sub_100070088()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

double sub_100070180@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [a1 arrayForKey:v5];

  if (v6
    && (uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v6,
        uint64_t v8 = sub_10001B50C(v7),
        swift_bridgeObjectRelease(),
        v8))
  {
    *(void *)(a2 + 24) = &type metadata for AEAExternalDisplayDeactivation;
    *(void *)(a2 + 32) = &off_1000A2DA8;
    uint64_t v9 = (void *)swift_allocObject();
    *(void *)a2 = v9;
    sub_1000091C4(v2 + 24, (uint64_t)(v9 + 5));
    _OWORD v9[2] = 0xD000000000000045;
    v9[3] = 0x8000000100088CD0;
    v9[4] = 4;
    v9[10] = v8;
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000702AC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = dword_1000ACAD0;
  NSString v5 = (void *)swift_task_alloc();
  v3[6] = v5;
  void *v5 = v3;
  v5[1] = sub_100070380;
  return ((uint64_t (__cdecl *)())((char *)&dword_1000ACAD0 + v4))();
}

uint64_t sub_100070380(uint64_t a1)
{
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000704AC, 0, 0);
}

uint64_t sub_1000704AC()
{
  uint64_t v1 = v0[7];
  if (!*(void *)(v1 + 16))
  {
    uint64_t v12 = v0[3];
    *(void *)(v12 + 32) = 0;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v2 = (void *)v0[4];
  sub_1000392A4(v1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setArray:isa forKey:v4];

  v0[2] = 0;
  unsigned int v5 = [v2 persistWithError:v0 + 2];
  id v6 = (void *)v0[2];
  uint64_t v7 = v0[7];
  if (v5)
  {
    uint64_t v8 = (void *)v0[3];
    uint64_t v9 = v0[5] + 24;
    void v8[3] = &type metadata for AEAExternalDisplayDeactivation;
    v8[4] = &off_1000A2DA8;
    uint64_t v10 = (void *)swift_allocObject();
    *uint64_t v8 = v10;
    sub_1000091C4(v9, (uint64_t)(v10 + 5));
    v10[2] = 0xD000000000000045;
    v10[3] = 0x8000000100088CD0;
    void v10[4] = 4;
    v10[10] = v7;
    id v11 = v6;
LABEL_5:
    unint64_t v13 = (uint64_t (*)(void))v0[1];
    goto LABEL_7;
  }
  id v14 = v6;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
  unint64_t v13 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v13();
}

uint64_t sub_1000706C8(uint64_t a1, uint64_t a2)
{
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_10000ED6C;
  v6[4] = a2;
  v6[5] = v2;
  v6[3] = a1;
  uint64_t v9 = (uint64_t (*)(void))((char *)&dword_1000ACAD0 + dword_1000ACAD0);
  uint64_t v7 = (void *)swift_task_alloc();
  v6[6] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100070380;
  return v9();
}

uint64_t sub_1000707C8()
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 40);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t destroy for AEAExternalDisplayDeactivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 24);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AEAExternalDisplayDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 24, v5, v7);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AEAExternalDisplayDeactivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  sub_10000E5F4(a1 + 3, a2 + 3);
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AEAExternalDisplayDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1000048E4(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AEAExternalDisplayDeactivation()
{
  return &type metadata for AEAExternalDisplayDeactivation;
}

unint64_t sub_1000709F0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AF810);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10004F984(v6, (uint64_t)v15, &qword_1000AFA58);
    unint64_t result = sub_1000729B4((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10001059C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070B34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AF7E8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100072B08(v5, v6, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v10 = (uint64_t *)(v2[6] + 16 * result);
    *long long v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070C70(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AFA50);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100072B08(v5, v6, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v10 = (uint64_t *)(v2[6] + 16 * result);
    *long long v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070DB4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AF7E0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10004F984(v6, (uint64_t)&v15, &qword_1000AFA40);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100072B08(v15, v16, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10001059C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070F14(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AF540);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    uint64_t v6 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v8 = *((void *)v4 - 1);
    char v9 = *v4;
    swift_bridgeObjectRetain();
    sub_100006DE4(v7, v8, v9);
    unint64_t result = sub_100072B08(v5, v6, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100071080(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AE030);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v6 = v4[2];
    char v8 = *((unsigned char *)v4 + 24);
    char v9 = *((unsigned char *)v4 + 32);
    uint64_t v10 = v4[5];
    *(void *)&long long v19 = *(v4 - 1);
    *((void *)&v19 + 1) = v5;
    *(void *)&long long v20 = v7;
    *((void *)&v20 + 1) = v6;
    char v21 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000729F8((uint64_t)&v19);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = v2[6] + 40 * result;
    long long v14 = v20;
    *(_OWORD *)uint64_t v13 = v19;
    *(_OWORD *)(v13 + 16) = v14;
    *(unsigned char *)(v13 + 32) = v21;
    uint64_t v15 = v2[7] + 16 * result;
    *(unsigned char *)uint64_t v15 = v9;
    *(void *)(v15 + 8) = v10;
    uint64_t v16 = v2[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v2[2] = v18;
    v4 += 7;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000711D8(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AFA48);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    char v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000048A0(&qword_1000AF7B8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  char v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (uint64_t)v6 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10004F984(v13, (uint64_t)v6, &qword_1000AFA48);
    uint64_t v15 = *v6;
    uint64_t v16 = v6[1];
    unint64_t result = sub_100072B08(*v6, v16, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10007305C);
    if (v18) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v20 = (uint64_t *)(v8[6] + 16 * result);
    *long long v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for AEAParticipant(0);
    unint64_t result = sub_10002D634(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000713E8()
{
  uint64_t v1 = OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing;
  if (*(void *)(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing))
  {
    unint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing);
  }
  else
  {
    unint64_t v3 = sub_100071CC0();
    if (!v3) {
      unint64_t v3 = sub_100070DB4((uint64_t)_swiftEmptyArrayStorage);
    }
    unint64_t v2 = v3;
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10007145C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000048A0(&qword_1000AB5F8);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v8);
  uint64_t v10 = &v15[-v9];
  uint64_t v11 = v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL;
  swift_beginAccess();
  sub_10004F984(v11, (uint64_t)v10, &qword_1000AB5F8);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(a1, v10, v12);
  }
  sub_1000201B4((uint64_t)v10, &qword_1000AB5F8);
  URL.appendingPathComponent(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v7, a1, v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  swift_beginAccess();
  sub_1000064A4((uint64_t)v7, v11);
  return swift_endAccess();
}

uint64_t sub_100071658(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000713E8();
  if (!*(void *)(v4 + 16)
    || (uint64_t v5 = sub_100072B08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0), (v6 & 1) == 0))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_10001B8E8(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    sub_1000201B4((uint64_t)&v9, (uint64_t *)&unk_1000AC650);
    return 0;
  }
  sub_100026CE0(0, qword_1000AB608);
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000717EC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000713E8();
  if (!*(void *)(v4 + 16)
    || (uint64_t v5 = sub_100072B08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0), (v6 & 1) == 0))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_10001B8E8(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_9:
    sub_1000201B4((uint64_t)&v9, (uint64_t *)&unk_1000AC650);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000719A0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000713E8();
  if (!*(void *)(v4 + 16)
    || (uint64_t v5 = sub_100072B08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0), (v6 & 1) == 0))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_10001B8E8(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    sub_1000201B4((uint64_t)&v9, (uint64_t *)&unk_1000AC650);
    return 0;
  }
  sub_1000048A0(&qword_1000AB600);
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t sub_100071CC0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007145C((uint64_t)v4);
  uint64_t v12 = Data.init(contentsOf:options:)();
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  uint64_t v15 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v21[0] = 0;
  id v17 = [v15 propertyListWithData:isa options:2 format:0 error:v21];

  id v18 = *(id *)&v21[0];
  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    sub_100006384(v12, v14);
    swift_unknownObjectRelease();
    sub_10001059C(v22, v21);
    sub_1000048A0(&qword_1000AB8A8);
    if (swift_dynamicCast()) {
      return v20[1];
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v19 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100006384(v12, v14);
    if (qword_1000AA540 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000CB7C(v5, (uint64_t)qword_1000B0110);
    swift_errorRetain();
    swift_errorRetain();
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(void *)&v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_getErrorValue();
      uint64_t v9 = sub_100062820(v20[3]);
      *(void *)&v21[0] = sub_1000722AC(v9, v10, (uint64_t *)v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to read property list. Error: %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
}

uint64_t sub_100072088()
{
  sub_1000048E4(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_directoryURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000201B4(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL, &qword_1000AB5F8);

  return swift_deallocClassInstance();
}

uint64_t sub_10007216C()
{
  return _s17ReadingScratchpadCMa();
}

uint64_t _s17ReadingScratchpadCMa()
{
  uint64_t result = qword_1000AF938;
  if (!qword_1000AF938) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000721C0()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_1000062E8();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000722AC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100072380(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001B8E8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001B8E8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000048E4((uint64_t)v12);
  return v7;
}

uint64_t sub_100072380(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10007253C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10007253C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000725D4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000727B4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000727B4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000725D4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10007274C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10007274C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000048A0(&qword_1000AFA38);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000727B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000048A0(&qword_1000AFA38);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100072904(uint64_t a1, uint64_t a2)
{
  return sub_100072B08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100072BE0);
}

unint64_t sub_100072930(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10006FE2C((unint64_t *)&qword_1000ABAD8);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100072CC4(a1, v2);
}

unint64_t sub_1000729B4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100072E70(a1, v4);
}

unint64_t sub_1000729F8(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100072F38((uint64_t *)a1, v2);
}

uint64_t sub_100072ADC(uint64_t a1, uint64_t a2)
{
  return sub_100072B08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10007305C);
}

uint64_t sub_100072B08(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

unint64_t sub_100072B9C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000739F8(a1, v4);
}

unint64_t sub_100072BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100072CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  int64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    BOOL v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_10006FE2C(&qword_1000AD328);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100072E70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100067FDC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000105AC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100072F38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = ~v4;
    uint64_t v8 = *(void *)(v2 + 48);
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    do
    {
      uint64_t v11 = v8 + 40 * v5;
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v12 = *(void *)(v11 + 24);
      int v14 = *(unsigned __int8 *)(v11 + 32);
      BOOL v15 = *(void *)v11 == v9 && *(void *)(v11 + 8) == v10;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v16 = a1[3];
        if (v12)
        {
          if (v16)
          {
            BOOL v17 = v13 == a1[2] && v12 == v16;
            if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_3:
              if (v14 == (a1[4] & 1)) {
                return v5;
              }
            }
          }
        }
        else if (!v16)
        {
          goto LABEL_3;
        }
      }
      unint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_10007305C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_10002981C(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_100006384(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  unint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  unint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_100006384(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  char v40 = v29;
                  unint64_t v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  sub_100006384(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  uint64_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                sub_100006384(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  long long v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  sub_100006384(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_10002981C(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  unint64_t v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  char v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_100006384(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  sub_100006384(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  sub_10002981C(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x1000739C8);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_100006384(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_1000739F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100026CE0(0, &qword_1000AE198);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_100073B14@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  char v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10002981C(a2, a3);
      char v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100073D78);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100006384(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

void sub_100073D88()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B02A0 = v4;
    *(void *)algn_1000B02A8 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_100073E9C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B02B0 = v4;
    *(void *)algn_1000B02B8 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_100073FAC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B02C0 = v4;
    *(void *)algn_1000B02C8 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000740BC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B02D0 = v4;
    *(void *)algn_1000B02D8 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000741C4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B02E0 = v4;
    *(void *)algn_1000B02E8 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000742C8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B02F0 = v4;
    *(void *)algn_1000B02F8 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000743D8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B0300 = v4;
    *(void *)algn_1000B0308 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000744E8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B0310 = v4;
    *(void *)algn_1000B0318 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000745F8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B0320 = v4;
    *(void *)algn_1000B0328 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_100074708()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B0330 = v4;
    *(void *)algn_1000B0338 = v6;
  }
  else
  {
    __break(1u);
  }
}

void sub_100074818()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  if (qword_1000AA5F0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = (id)AELocalizedStringFromTableInBundle();

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    qword_1000B0340 = v4;
    *(void *)algn_1000B0348 = v6;
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AEALocalizedStrings()
{
  return self;
}

const char *sub_10007494C(void *a1)
{
  uint64_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v2 = String.init(cString:)();
    sub_1000212BC(v2, v3);
    return (const char *)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000749A8()
{
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000CB7C(v0, (uint64_t)qword_1000B0110);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Received filepath keepalive event", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t type metadata accessor for AEAConcreteXPCEventStreamPrimitives()
{
  return self;
}

uint64_t type metadata accessor for AEAConcreteProcessPrimitives()
{
  return self;
}

uint64_t destroy for AEAiOSPolicyBundleFactory(uint64_t a1)
{
  sub_1000048E4(a1);

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for AEAiOSPolicyBundleFactory(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AEAiOSPolicyBundleFactory(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 initializeWithTake for AEAiOSPolicyBundleFactory(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AEAiOSPolicyBundleFactory(uint64_t a1, uint64_t a2)
{
  sub_1000048E4(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAiOSPolicyBundleFactory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAiOSPolicyBundleFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAiOSPolicyBundleFactory()
{
  return &type metadata for AEAiOSPolicyBundleFactory;
}

void sub_100074CB8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v162 = type metadata accessor for AEAExpirationActivation();
  __chkstk_darwin(v162, v4);
  v163 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_1000048A0(&qword_1000AFC40);
  uint64_t v158 = *(void *)(v160 - 8);
  __chkstk_darwin(v160, v6);
  v156 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000048A0(&qword_1000AFC48);
  uint64_t v159 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v157 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (ValueMetadata *)type metadata accessor for AEAUserConfirmationActivation();
  __chkstk_darwin(v11, v12);
  int v14 = (uint64_t *)((char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v181 = _swiftEmptyArrayStorage;
  sub_100006340(v1, v1[3]);
  id v15 = sub_1000661B4();
  uint64_t v16 = *(void *)(*sub_100006340(v2, v2[3]) + 160);
  swift_unknownObjectRetain();
  uint64_t v17 = sub_10006B134(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v19 = v17[2];
  unint64_t v18 = v17[3];
  uint64_t v161 = v8;
  if (v19 >= v18 >> 1) {
    uint64_t v17 = sub_10006B134((void *)(v18 > 1), v19 + 1, 1, v17);
  }
  v171 = &type metadata for AEAOSTransactionActivation;
  uint64_t v172 = (uint64_t)&off_10009F488;
  int64_t v20 = (void *)swift_allocObject();
  *(void *)&long long v169 = v20;
  void v20[2] = 0xD00000000000002ALL;
  void v20[3] = 0x8000000100089610;
  void v20[4] = 0;
  v20[5] = v16;
  v17[2] = v19 + 1;
  sub_1000093C0(&v169, (uint64_t)&v17[5 * v19 + 4]);
  v181 = v17;
  id v168 = v15;
  id v21 = [v15 showPromptsAndBanners];
  id v22 = [v21 value];

  if (!v22)
  {
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  unsigned int v23 = [v22 BOOLValue];

  if (v23)
  {
    uint64_t v24 = *sub_100006340(v2, v2[3]) + 320;
    uint64_t v25 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v25 + 712, (uint64_t)(v14 + 8));
    sub_1000251B8(a1, (uint64_t)v14 + SLODWORD(v11[2].Kind));
    void *v14 = 0xD000000000000026;
    v14[1] = 0x8000000100089920;
    void v14[2] = 0;
    sub_1000091C4(v24, (uint64_t)(v14 + 3));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v181 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v17 = sub_10006B134(0, v17[2] + 1, 1, v17);
      v181 = v17;
    }
    unint64_t v28 = v17[2];
    unint64_t v27 = v17[3];
    if (v28 >= v27 >> 1)
    {
      uint64_t v17 = sub_10006B134((void *)(v27 > 1), v28 + 1, 1, v17);
      v181 = v17;
    }
    v171 = v11;
    uint64_t v172 = (uint64_t)&off_1000A0418;
    char v29 = sub_100037C54((uint64_t *)&v169);
    sub_100076FEC((uint64_t)v14, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AEAUserConfirmationActivation);
    v17[2] = v28 + 1;
    sub_1000093C0(&v169, (uint64_t)&v17[5 * v28 + 4]);
    sub_100077054((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AEAUserConfirmationActivation);
    uint64_t v17 = v181;
  }
  char v30 = sub_100006340(v2, v2[3]);
  sub_1000091C4(*v30 + 464, (uint64_t)&v178);
  uint64_t v31 = sub_100006340(v2, v2[3]);
  sub_1000091C4(*v31 + 552, (uint64_t)v177);
  uint64_t v32 = (int *)type metadata accessor for AEAPolicyBundleArguments();
  uint64_t v33 = *(void *)(a1 + v32[6]);
  uint64_t v34 = a1 + v32[7];
  uint64_t v165 = *(void *)v34;
  long long v167 = *(_OWORD *)(v34 + 8);
  uint64_t v35 = *(void *)(v34 + 24);
  v164 = v32;
  uint64_t v36 = v32[9];
  uint64_t v166 = a1;
  uint64_t v37 = *(void *)(a1 + v36);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v38 = v168;
  id v39 = [v168 enforceSingleAppMode];
  id v40 = [v39 value];

  if (!v40) {
    goto LABEL_90;
  }
  unsigned __int8 v41 = [v40 BOOLValue];

  id v42 = [v38 setCustomHomeScreenLayout];
  id v43 = [v42 value];

  if (!v43)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    return;
  }
  unsigned __int8 v44 = [v43 BOOLValue];

  v171 = &type metadata for AEARestrictionsActivation;
  uint64_t v172 = (uint64_t)&off_10009F1C8;
  uint64_t v45 = swift_allocObject();
  *(void *)&long long v169 = v45;
  *(void *)(v45 + 16) = 0xD00000000000002ALL;
  *(void *)(v45 + 24) = 0x8000000100089670;
  *(_OWORD *)(v45 + 32) = xmmword_100084230;
  *(void *)(v45 + 48) = 0x8000000100089640;
  sub_1000093C0(&v178, v45 + 56);
  sub_1000093C0(v177, v45 + 96);
  uint64_t v46 = v165;
  *(void *)(v45 + 136) = v33;
  *(void *)(v45 + 144) = v46;
  *(_OWORD *)(v45 + 152) = v167;
  *(void *)(v45 + 168) = v35;
  *(void *)(v45 + 176) = v37;
  *(unsigned char *)(v45 + 184) = v41;
  *(unsigned char *)(v45 + 185) = v44;
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  v181 = v17;
  if ((v47 & 1) == 0)
  {
    uint64_t v17 = sub_10006B134(0, v17[2] + 1, 1, v17);
    v181 = v17;
  }
  unint64_t v49 = v17[2];
  unint64_t v48 = v17[3];
  if (v49 >= v48 >> 1) {
    v181 = sub_10006B134((void *)(v48 > 1), v49 + 1, 1, v17);
  }
  size_t v50 = v171;
  uint64_t v51 = v172;
  uint64_t v52 = sub_100019D8C((uint64_t)&v169, (uint64_t)v171);
  __chkstk_darwin(v52, v52);
  uint64_t v54 = (char *)&v155 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v55 + 16))(v54);
  sub_10007679C(v49, (uint64_t)v54, (uint64_t *)&v181, (uint64_t)v50, v51);
  sub_1000048E4((uint64_t)&v169);
  uint64_t v56 = v181;
  uint64_t v57 = sub_100006340(v2, v2[3]);
  sub_1000091C4(*v57 + 672, (uint64_t)&v171);
  *(void *)&long long v169 = 0xD00000000000002BLL;
  *((void *)&v169 + 1) = 0x80000001000896A0;
  unint64_t v170 = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v56 = sub_10006B134(0, v56[2] + 1, 1, v56);
    v181 = v56;
  }
  id v58 = v168;
  unint64_t v60 = v56[2];
  unint64_t v59 = v56[3];
  if (v60 >= v59 >> 1)
  {
    uint64_t v56 = sub_10006B134((void *)(v59 > 1), v60 + 1, 1, v56);
    v181 = v56;
  }
  v179 = &type metadata for AEAStageManagerActivation;
  v180 = &off_1000A2240;
  *(void *)&long long v178 = swift_allocObject();
  sub_100076838((uint64_t)&v169, v178 + 16);
  v56[2] = v60 + 1;
  sub_1000093C0(&v178, (uint64_t)&v56[5 * v60 + 4]);
  sub_100076894((uint64_t)&v169);
  int v61 = v181;
  id v62 = [v58 disableSiri];
  id v63 = [v62 value];

  if (!v63) {
    goto LABEL_92;
  }
  unsigned int v64 = [v63 BOOLValue];

  if (v64)
  {
    uint64_t v65 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v65 + 512, (uint64_t)&v173);
    uint64_t v172 = 1;
    *(void *)&long long v178 = 0;
    *((void *)&v178 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v66._countAndFlagsBits = 0xD000000000000031;
    v66._object = (void *)0x80000001000898E0;
    String.append(_:)(v66);
    v67._countAndFlagsBits = 0x7473655269726953;
    v67._object = (void *)0xEE00726F74636972;
    String.append(_:)(v67);
    long long v169 = v178;
    unint64_t v170 = 0xD00000000000002ALL;
    v171 = (ValueMetadata *)0x80000001000898B0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      int v61 = sub_10006B134(0, v61[2] + 1, 1, v61);
      v181 = v61;
    }
    unint64_t v69 = v61[2];
    unint64_t v68 = v61[3];
    if (v69 >= v68 >> 1)
    {
      int v61 = sub_10006B134((void *)(v68 > 1), v69 + 1, 1, v61);
      v181 = v61;
    }
    v179 = &type metadata for AEAExternalSubsystemRestrictionActivation;
    v180 = &off_1000A3260;
    *(void *)&long long v178 = swift_allocObject();
    sub_100076F3C((uint64_t)&v169, v178 + 16);
    v61[2] = v69 + 1;
    sub_1000093C0(&v178, (uint64_t)&v61[5 * v69 + 4]);
    sub_100076F98((uint64_t)&v169);
    int v61 = v181;
  }
  id v70 = [v58 scrubPasteboard];
  id v71 = [v70 value];

  if (!v71) {
    goto LABEL_93;
  }
  unsigned int v72 = [v71 BOOLValue];

  if (v72)
  {
    uint64_t v73 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v73 + 224, (uint64_t)&v171);
    *(void *)&long long v169 = 0xD00000000000002CLL;
    *((void *)&v169 + 1) = 0x8000000100089880;
    unint64_t v170 = 1;
    char v74 = swift_isUniquelyReferenced_nonNull_native();
    v181 = v61;
    if ((v74 & 1) == 0)
    {
      int v61 = sub_10006B134(0, v61[2] + 1, 1, v61);
      v181 = v61;
    }
    unint64_t v76 = v61[2];
    unint64_t v75 = v61[3];
    if (v76 >= v75 >> 1)
    {
      int v61 = sub_10006B134((void *)(v75 > 1), v76 + 1, 1, v61);
      v181 = v61;
    }
    v179 = &type metadata for AEAPasteboardActivation;
    v180 = &off_1000A2710;
    *(void *)&long long v178 = swift_allocObject();
    sub_100076E44((uint64_t)&v169, v178 + 16);
    v61[2] = v76 + 1;
    sub_1000093C0(&v178, (uint64_t)&v61[5 * v76 + 4]);
    sub_100076EA0((uint64_t)&v169);
    int v61 = v181;
  }
  id v77 = [v58 restrictNetworkAccess];
  id v78 = [v77 value];

  if (!v78) {
    goto LABEL_94;
  }
  unsigned int v79 = [v78 BOOLValue];

  if (v79)
  {
    unint64_t v80 = *(ValueMetadata **)(*sub_100006340(v2, v2[3]) + 272);
    uint64_t v81 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v81 + 168, (uint64_t)&v178);
    uint64_t v82 = *(void *)(v166 + v164[5]);
    swift_unknownObjectRetain();
    swift_retain();
    id v83 = [v58 networkPolicyExemptExecutablePaths];
    swift_getKeyPath();
    uint64_t v84 = v156;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();
    sub_1000048A0(&qword_1000AFC60);
    sub_100005840(&qword_1000AFC68, &qword_1000AFC40);
    BOOL v85 = v157;
    uint64_t v86 = v160;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v158 + 8))(v84, v86);
    sub_100005840((unint64_t *)&unk_1000AFC70, &qword_1000AFC48);
    uint64_t v87 = v161;
    uint64_t v88 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v85, v87);

    *(void *)&long long v169 = 0xD000000000000025;
    *((void *)&v169 + 1) = 0x8000000100089850;
    unint64_t v170 = 1;
    v171 = v80;
    sub_1000093C0(&v178, (uint64_t)&v172);
    uint64_t v175 = v82;
    uint64_t v176 = v88;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      int v61 = sub_10006B134(0, v61[2] + 1, 1, v61);
      v181 = v61;
    }
    unint64_t v90 = v61[2];
    unint64_t v89 = v61[3];
    if (v90 >= v89 >> 1)
    {
      int v61 = sub_10006B134((void *)(v89 > 1), v90 + 1, 1, v61);
      v181 = v61;
    }
    v179 = &type metadata for AEANetworkActivation;
    v180 = &off_10009FF28;
    *(void *)&long long v178 = swift_allocObject();
    sub_100076D50((uint64_t)&v169, v178 + 16);
    v61[2] = v90 + 1;
    sub_1000093C0(&v178, (uint64_t)&v61[5 * v90 + 4]);
    sub_100076DAC((uint64_t)&v169);
    int v61 = v181;
  }
  id v91 = [v58 stopAirPlayBeforehand];
  id v92 = [v91 value];

  if (!v92) {
    goto LABEL_95;
  }
  unsigned int v93 = [v92 BOOLValue];

  if (v93)
  {
    uint64_t v94 = *(void *)(*sub_100006340(v2, v2[3]) + 264);
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v61 = sub_10006B134(0, v61[2] + 1, 1, v61);
    }
    unint64_t v96 = v61[2];
    unint64_t v95 = v61[3];
    if (v96 >= v95 >> 1) {
      int v61 = sub_10006B134((void *)(v95 > 1), v96 + 1, 1, v61);
    }
    v171 = &type metadata for AEAAirPlayActivation;
    uint64_t v172 = (uint64_t)&off_10009EA70;
    char v97 = (void *)swift_allocObject();
    *(void *)&long long v169 = v97;
    v97[2] = 0xD000000000000021;
    v97[3] = 0x8000000100089820;
    v97[4] = 1;
    v97[5] = v94;
    v61[2] = v96 + 1;
    sub_1000093C0(&v169, (uint64_t)&v61[5 * v96 + 4]);
    v181 = v61;
  }
  id v98 = [v58 restrictMedia];
  id v99 = [v98 value];

  if (!v99) {
    goto LABEL_96;
  }
  unsigned int v100 = [v99 BOOLValue];

  if (v100)
  {
    char v101 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v101 + 280, (uint64_t)&v171);
    uint64_t v102 = *(void *)(v166 + v164[5]);
    *(void *)&long long v169 = 0xD000000000000023;
    *((void *)&v169 + 1) = 0x80000001000897F0;
    unint64_t v170 = 1;
    uint64_t v174 = v102;
    swift_retain();
    char v103 = swift_isUniquelyReferenced_nonNull_native();
    v181 = v61;
    if ((v103 & 1) == 0)
    {
      int v61 = sub_10006B134(0, v61[2] + 1, 1, v61);
      v181 = v61;
    }
    unint64_t v105 = v61[2];
    unint64_t v104 = v61[3];
    if (v105 >= v104 >> 1)
    {
      int v61 = sub_10006B134((void *)(v104 > 1), v105 + 1, 1, v61);
      v181 = v61;
    }
    v179 = &type metadata for AEARestrictMediaActivation;
    v180 = &off_1000A24A0;
    *(void *)&long long v178 = swift_allocObject();
    sub_100076BA8((uint64_t)&v169, v178 + 16);
    v61[2] = v105 + 1;
    sub_1000093C0(&v178, (uint64_t)&v61[5 * v105 + 4]);
    sub_100076C04((uint64_t)&v169);
    int v61 = v181;
  }
  uint64_t v106 = *(void *)(*sub_100006340(v2, v2[3]) + 504);
  uint64_t v107 = sub_100006340(v2, v2[3]);
  sub_1000091C4(*v107 + 632, (uint64_t)&v169);
  swift_unknownObjectRetain();
  id v108 = [v58 expirationTime];
  id v109 = [v108 value];

  if (!v109) {
    goto LABEL_97;
  }
  [v109 doubleValue];
  uint64_t v111 = v110;

  uint64_t v112 = (ValueMetadata *)v162;
  char v113 = v163;
  sub_1000251B8(v166, (uint64_t)&v163[*(int *)(v162 + 36)]);
  *char v113 = 0xD000000000000025;
  v113[1] = 0x80000001000896D0;
  v113[2] = 1;
  v113[3] = v106;
  sub_1000093C0(&v169, (uint64_t)(v113 + 4));
  v113[9] = v111;
  char v114 = swift_isUniquelyReferenced_nonNull_native();
  v181 = v61;
  if ((v114 & 1) == 0)
  {
    int v61 = sub_10006B134(0, v61[2] + 1, 1, v61);
    v181 = v61;
  }
  unint64_t v116 = v61[2];
  unint64_t v115 = v61[3];
  if (v116 >= v115 >> 1)
  {
    int v61 = sub_10006B134((void *)(v115 > 1), v116 + 1, 1, v61);
    v181 = v61;
  }
  v171 = v112;
  uint64_t v172 = (uint64_t)&off_1000A0708;
  uint64_t v117 = sub_100037C54((uint64_t *)&v169);
  sub_100076FEC((uint64_t)v113, (uint64_t)v117, (uint64_t (*)(void))type metadata accessor for AEAExpirationActivation);
  v61[2] = v116 + 1;
  sub_1000093C0(&v169, (uint64_t)&v61[5 * v116 + 4]);
  sub_100077054((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for AEAExpirationActivation);
  uint64_t v118 = v181;
  id v119 = [v58 forceScreenMirroring];
  id v120 = [v119 value];

  if (!v120) {
    goto LABEL_98;
  }
  unsigned int v121 = [v120 BOOLValue];

  if (v121)
  {
    uint64_t v122 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v122 + 552, (uint64_t)&v171);
    *(void *)&long long v169 = 0xD000000000000035;
    *((void *)&v169 + 1) = 0x80000001000897B0;
    unint64_t v170 = 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v118 = sub_10006B134(0, v118[2] + 1, 1, v118);
      v181 = v118;
    }
    unint64_t v124 = v118[2];
    unint64_t v123 = v118[3];
    if (v124 >= v123 >> 1)
    {
      uint64_t v118 = sub_10006B134((void *)(v123 > 1), v124 + 1, 1, v118);
      v181 = v118;
    }
    v179 = &type metadata for AEAExternalDisplayActivation;
    v180 = &off_1000A2CC0;
    *(void *)&long long v178 = swift_allocObject();
    sub_100076A88((uint64_t)&v169, v178 + 16);
    v118[2] = v124 + 1;
    sub_1000093C0(&v178, (uint64_t)&v118[5 * v124 + 4]);
    sub_100076AE4((uint64_t)&v169);
    uint64_t v118 = v181;
  }
  id v125 = [v58 allowRemotelyKillingAgent];
  id v126 = [v125 value];

  if (!v126) {
    goto LABEL_99;
  }
  unsigned int v127 = [v126 BOOLValue];

  if (v127)
  {
    v128 = *(ValueMetadata **)(*sub_100006340(v2, v2[3]) + 208);
    v129 = sub_100006340(v2, v2[3]);
    sub_1000091C4(*v129 + 104, (uint64_t)&v172);
    *(void *)&long long v169 = 0xD00000000000003CLL;
    *((void *)&v169 + 1) = 0x8000000100089770;
    unint64_t v170 = 1;
    v171 = v128;
    swift_unknownObjectRetain();
    char v130 = swift_isUniquelyReferenced_nonNull_native();
    v181 = v118;
    if ((v130 & 1) == 0)
    {
      uint64_t v118 = sub_10006B134(0, v118[2] + 1, 1, v118);
      v181 = v118;
    }
    unint64_t v132 = v118[2];
    unint64_t v131 = v118[3];
    if (v132 >= v131 >> 1)
    {
      uint64_t v118 = sub_10006B134((void *)(v131 > 1), v132 + 1, 1, v118);
      v181 = v118;
    }
    v179 = &type metadata for AEAKillAgentNotificationListenerActivation;
    v180 = &off_10009EC68;
    *(void *)&long long v178 = swift_allocObject();
    sub_10000EE60((uint64_t)&v169, v178 + 16);
    v118[2] = v132 + 1;
    sub_1000093C0(&v178, (uint64_t)&v118[5 * v132 + 4]);
    sub_100076A30((uint64_t)&v169);
    uint64_t v118 = v181;
  }
  id v133 = [v58 failOnDeactivation];
  id v134 = [v133 value];

  if (!v134) {
    goto LABEL_100;
  }
  unsigned __int8 v135 = [v134 BOOLValue];

  unint64_t v137 = v118[2];
  unint64_t v136 = v118[3];
  if (v137 >= v136 >> 1) {
    uint64_t v118 = sub_10006B134((void *)(v136 > 1), v137 + 1, 1, v118);
  }
  v171 = &type metadata for AEAFailingDeactivationAction;
  uint64_t v172 = (uint64_t)&off_1000A0928;
  uint64_t v138 = swift_allocObject();
  *(void *)&long long v169 = v138;
  *(void *)(v138 + 16) = 0xD000000000000034;
  *(void *)(v138 + 24) = 0x8000000100089700;
  *(void *)(v138 + 32) = 1;
  *(unsigned char *)(v138 + 40) = v135;
  v118[2] = v137 + 1;
  sub_1000093C0(&v169, (uint64_t)&v118[5 * v137 + 4]);
  v181 = v118;
  uint64_t v139 = *sub_100006340(v2, v2[3]) + 168;
  uint64_t v140 = *(void *)(*sub_100006340(v2, v2[3]) + 208);
  *(void *)&long long v169 = 0xD00000000000002BLL;
  *((void *)&v169 + 1) = 0x8000000100089740;
  unint64_t v170 = 2;
  sub_1000091C4(v139, (uint64_t)&v171);
  uint64_t v174 = v140;
  swift_unknownObjectRetain();
  char v141 = swift_isUniquelyReferenced_nonNull_native();
  v181 = v118;
  if ((v141 & 1) == 0)
  {
    uint64_t v118 = sub_10006B134(0, v118[2] + 1, 1, v118);
    v181 = v118;
  }
  unint64_t v143 = v118[2];
  unint64_t v142 = v118[3];
  if (v143 >= v142 >> 1)
  {
    uint64_t v118 = sub_10006B134((void *)(v142 > 1), v143 + 1, 1, v118);
    v181 = v118;
  }
  v179 = &type metadata for AEAAssessmentStateActivation;
  v180 = &off_1000A2098;
  *(void *)&long long v178 = swift_allocObject();
  sub_100076938((uint64_t)&v169, v178 + 16);
  v118[2] = v143 + 1;
  sub_1000093C0(&v178, (uint64_t)&v118[5 * v143 + 4]);
  sub_100076994((uint64_t)&v169);
  v144 = v181;
  uint64_t v145 = v2[5];
  uint64_t v146 = *(void *)(*sub_100006340(v2, v2[3]) + 152);
  uint64_t v147 = v144[2];
  if (v147)
  {
    *(void *)&long long v178 = _swiftEmptyArrayStorage;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v148 = (uint64_t)(v144 + 4);
    do
    {
      sub_1000091C4(v148, (uint64_t)&v169);
      v149 = v171;
      uint64_t v150 = v172;
      sub_100006340(&v169, (uint64_t)v171);
      sub_100044BF4((uint64_t)v149, v150);
      sub_1000048E4((uint64_t)&v169);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v148 += 40;
      --v147;
    }
    while (v147);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (qword_1000AA578 != -1) {
    swift_once();
  }
  v151 = (void *)qword_1000B01B0;
  id v152 = objc_allocWithZone((Class)AEPolicyBundle);
  id v153 = v151;
  sub_1000048A0(&qword_1000AFC58);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v152 initWithPolicyStore:v145 performancePrimitives:v146 activations:isa queue:v153];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_10007672C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 56);
  sub_1000048E4(v0 + 96);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 186, 7);
}

uint64_t sub_10007679C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_100037C54((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_1000093C0(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_100076838(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076894(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000768E8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100076920()
{
  return sub_100076B50((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_100076938(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076994(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000769E8()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 48);

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100076A30(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076A88(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076AE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076B38()
{
  return sub_100076B50((void (*)(void))&_swift_release);
}

uint64_t sub_100076B50(void (*a1)(void))
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v1 + 40);
  a1(*(void *)(v1 + 80));

  return _swift_deallocObject(v1, 88, 7);
}

uint64_t sub_100076BA8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076C04(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076C5C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

const char *sub_100076C9C()
{
  return "value";
}

id sub_100076CA8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 value];
  *a2 = result;
  return result;
}

id sub_100076CE4(void *a1, id *a2)
{
  return [*a2 setValue:*a1];
}

uint64_t sub_100076CF8()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000048E4(v0 + 48);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100076D50(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076DAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076E04()
{
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100076E44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076EA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076EF4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100076F3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100076F98(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076FEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100077054(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AEAConcreteManagedConfigurationPrimitives()
{
  return self;
}

void *sub_1000770D8(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  id result = [self sharedConnection];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result effectiveRestrictions];

    if (!v5
      || (uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
          v5,
          uint64_t v7 = (void *)sub_1000771A8(v6),
          swift_bridgeObjectRelease(),
          !v7))
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = &_swiftEmptyDictionarySingleton;
    }
    v2[4] = v7;
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000771A8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_1000048A0(&qword_1000AF7F0);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int64_t v27 = (unint64_t)(63 - v4) >> 6;
  uint64_t v6 = (char *)v36 + 8;
  uint64_t v7 = (char *)v33 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v26 = v1;
  while (1)
  {
    if (v5)
    {
      uint64_t v14 = (v5 - 1) & v5;
      unint64_t v15 = __clz(__rbit64(v5)) | (v9 << 6);
      int64_t v16 = v9;
    }
    else
    {
      int64_t v17 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v27)
      {
LABEL_36:
        sub_1000198D8();
        return (unint64_t)v2;
      }
      unint64_t v18 = *(void *)(v28 + 8 * v17);
      int64_t v16 = v9 + 1;
      if (!v18)
      {
        int64_t v16 = v9 + 2;
        if (v9 + 2 >= v27) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v28 + 8 * v16);
        if (!v18)
        {
          int64_t v16 = v9 + 3;
          if (v9 + 3 >= v27) {
            goto LABEL_36;
          }
          unint64_t v18 = *(void *)(v28 + 8 * v16);
          if (!v18)
          {
            int64_t v16 = v9 + 4;
            if (v9 + 4 >= v27) {
              goto LABEL_36;
            }
            unint64_t v18 = *(void *)(v28 + 8 * v16);
            if (!v18)
            {
              int64_t v19 = v9 + 5;
              if (v9 + 5 >= v27) {
                goto LABEL_36;
              }
              unint64_t v18 = *(void *)(v28 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v16 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_41;
                  }
                  if (v16 >= v27) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = *(void *)(v28 + 8 * v16);
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v16 = v9 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v14 = (v18 - 1) & v18;
      unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    }
    sub_100067FDC(*(void *)(v1 + 48) + 40 * v15, (uint64_t)v35);
    sub_10001B8E8(*(void *)(v1 + 56) + 32 * v15, (uint64_t)v6);
    v33[0] = v36[0];
    v33[1] = v36[1];
    uint64_t v34 = v37;
    v32[0] = v35[0];
    v32[1] = v35[1];
    sub_100067FDC((uint64_t)v32, (uint64_t)v31);
    if (!swift_dynamicCast())
    {
      sub_1000680C4((uint64_t)v32);
LABEL_35:
      swift_bridgeObjectRelease();
      sub_1000198D8();
      swift_release();
      return 0;
    }
    sub_10001B8E8((uint64_t)v7, (uint64_t)v31);
    sub_1000680C4((uint64_t)v32);
    sub_1000048A0(&qword_1000AB8A8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    unint64_t result = sub_100072904(v29, v30);
    unint64_t v20 = result;
    if (v21)
    {
      uint64_t v10 = v7;
      uint64_t v11 = v6;
      long long v12 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *long long v12 = v29;
      v12[1] = v30;
      uint64_t v13 = v2[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v13 + 8 * v20) = v29;
      uint64_t v6 = v11;
      uint64_t v7 = v10;
      uint64_t v1 = v26;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v22 = (uint64_t *)(v2[6] + 16 * result);
    *id v22 = v29;
    v22[1] = v30;
    *(void *)(v2[7] + 8 * result) = v29;
    uint64_t v23 = v2[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_39;
    }
    v2[2] = v25;
LABEL_8:
    int64_t v9 = v16;
    unint64_t v5 = v14;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100077570(unint64_t a1)
{
  unint64_t v142 = a1;
  uint64_t v127 = v1;
  sub_1000197B0(v1, (uint64_t)v145, &qword_1000AFDD8);
  sub_1000197B0((uint64_t)v145, (uint64_t)v149, &qword_1000AFDD8);
  if (LOBYTE(v149[0]) == 3)
  {
    swift_bridgeObjectRetain();
    goto LABEL_44;
  }
  long long v146 = v149[0];
  long long v147 = v149[1];
  char v148 = v150;
  swift_bridgeObjectRetain();
  uint64_t v134 = sub_1000788B8();
  if (!v134)
  {
LABEL_44:
    sub_1000197B0(v127 + 40, (uint64_t)v144, &qword_1000ABFC0);
    sub_1000197B0((uint64_t)v144, (uint64_t)&v151, &qword_1000ABFC0);
    uint64_t v51 = v151;
    if (!v151) {
      goto LABEL_67;
    }
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v142 + 16))
    {
      sub_100072904(v52, v53);
      char v55 = v54;
      swift_bridgeObjectRelease();
      if (v55)
      {
LABEL_50:
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v63 = sub_100047784(v141, v61, v62);
        if (*v64)
        {
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v67 = v66;
          sub_1000048A0(&qword_1000AFDE0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100080BE0;
          *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(inited + 40) = v69;
          int64_t v70 = v51[2];
          id v71 = _swiftEmptyArrayStorage;
          if (v70)
          {
            uint64_t v130 = v67;
            uint64_t v132 = v65;
            unsigned __int8 v135 = v63;
            *(void *)&long long v139 = _swiftEmptyArrayStorage;
            sub_10004FA7C(0, v70, 0);
            id v71 = (void *)v139;
            unsigned int v72 = v51 + 5;
            do
            {
              uint64_t v73 = *(v72 - 1);
              uint64_t v74 = *v72;
              *(void *)&long long v139 = v71;
              unint64_t v76 = v71[2];
              unint64_t v75 = v71[3];
              swift_bridgeObjectRetain();
              if (v76 >= v75 >> 1)
              {
                sub_10004FA7C(v75 > 1, v76 + 1, 1);
                id v71 = (void *)v139;
              }
              v72 += 2;
              v71[2] = v76 + 1;
              id v77 = &v71[2 * v76];
              v77[4] = v73;
              v77[5] = v74;
              --v70;
            }
            while (v70);
            id v63 = v135;
            uint64_t v67 = v130;
            uint64_t v65 = v132;
          }
          *(void *)(inited + 48) = v71;
          unint64_t v78 = sub_100070C70(inited);
          uint64_t v140 = sub_1000048A0(&qword_1000AFDE8);
          *(void *)&long long v139 = v78;
          sub_1000384D4((uint64_t)&v139, v65, v67);
          ((void (*)(void *, void))v63)(v141, 0);
        }
        else
        {
          ((void (*)(void *, void))v63)(v141, 0);
        }
        swift_bridgeObjectRelease();
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (*(void *)(v142 + 16))
        {
          sub_100072904(v79, v80);
          char v82 = v81;
          swift_bridgeObjectRelease();
          if (v82) {
            goto LABEL_64;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v85 = v84;
        unint64_t v86 = v142;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v141[0] = v86;
        unint64_t v142 = 0x8000000000000000;
        sub_10006D860((uint64_t)_swiftEmptyDictionarySingleton, v83, v85, isUniquelyReferenced_nonNull_native);
        unint64_t v142 = v141[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_64:
        uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v90 = sub_100047784(v141, v88, v89);
        if (*v91)
        {
          sub_1000048A0(&qword_1000AFDF0);
          uint64_t v92 = swift_initStackObject();
          *(_OWORD *)(v92 + 16) = xmmword_100082BA0;
          *(void *)(v92 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v92 + 40) = v93;
          *(unsigned char *)(v92 + 48) = 1;
          *(void *)(v92 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v92 + 64) = v94;
          *(unsigned char *)(v92 + 72) = 1;
          unint64_t v95 = sub_100070B34(v92);
          uint64_t v140 = sub_1000048A0(&qword_1000AFDF8);
          *(void *)&long long v139 = v95;
          sub_1000384D4((uint64_t)&v139, 0xD000000000000030, 0x8000000100089A40);
        }
        ((void (*)(void *, void))v90)(v141, 0);
        swift_bridgeObjectRelease();
LABEL_67:
        sub_1000197B0(v127 + 48, (uint64_t)v143, &qword_1000ABFC0);
        sub_1000197B0((uint64_t)v143, (uint64_t)v138, &qword_1000ABFC0);
        uint64_t v96 = *(void *)&v138[0];
        if (!*(void *)&v138[0])
        {
LABEL_83:
          if (*(void *)(v142 + 16))
          {
            uint64_t v124 = swift_bridgeObjectRetain();
            unint64_t v125 = sub_100078120(v124);
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v125 = 0;
          }
          swift_bridgeObjectRelease();
          return v125;
        }
        uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (*(void *)(v142 + 16))
        {
          sub_100072904(v97, v98);
          char v100 = v99;
          swift_bridgeObjectRelease();
          if (v100) {
            goto LABEL_73;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v103 = v102;
        unint64_t v104 = v142;
        char v105 = swift_isUniquelyReferenced_nonNull_native();
        v141[0] = v104;
        unint64_t v142 = 0x8000000000000000;
        sub_10006D860((uint64_t)_swiftEmptyDictionarySingleton, v101, v103, v105);
        unint64_t v142 = v141[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_73:
        uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v108 = sub_100047784(v141, v106, v107);
        if (*v109)
        {
          uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v112 = v111;
          sub_1000048A0(&qword_1000AFDE0);
          uint64_t v113 = swift_initStackObject();
          *(_OWORD *)(v113 + 16) = xmmword_100080BE0;
          *(void *)(v113 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v113 + 40) = v114;
          int64_t v115 = *(void *)(v96 + 16);
          unint64_t v116 = _swiftEmptyArrayStorage;
          if (v115)
          {
            uint64_t v131 = v112;
            uint64_t v133 = v110;
            unint64_t v136 = v108;
            *(void *)&long long v139 = _swiftEmptyArrayStorage;
            sub_10004FA7C(0, v115, 0);
            unint64_t v116 = (void *)v139;
            uint64_t v117 = (uint64_t *)(v96 + 40);
            do
            {
              uint64_t v118 = *(v117 - 1);
              uint64_t v119 = *v117;
              *(void *)&long long v139 = v116;
              unint64_t v121 = v116[2];
              unint64_t v120 = v116[3];
              swift_bridgeObjectRetain();
              if (v121 >= v120 >> 1)
              {
                sub_10004FA7C(v120 > 1, v121 + 1, 1);
                unint64_t v116 = (void *)v139;
              }
              v117 += 2;
              v116[2] = v121 + 1;
              uint64_t v122 = &v116[2 * v121];
              v122[4] = v118;
              v122[5] = v119;
              --v115;
            }
            while (v115);
            id v108 = v136;
            uint64_t v112 = v131;
            uint64_t v110 = v133;
          }
          *(void *)(v113 + 48) = v116;
          unint64_t v123 = sub_100070C70(v113);
          uint64_t v140 = sub_1000048A0(&qword_1000AFDE8);
          *(void *)&long long v139 = v123;
          sub_1000384D4((uint64_t)&v139, v110, v112);
          ((void (*)(void *, void))v108)(v141, 0);
        }
        else
        {
          ((void (*)(void *, void))v108)(v141, 0);
        }
        swift_bridgeObjectRelease();
        goto LABEL_83;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;
    unint64_t v59 = v142;
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    v141[0] = v59;
    unint64_t v142 = 0x8000000000000000;
    sub_10006D860((uint64_t)_swiftEmptyDictionarySingleton, v56, v58, v60);
    unint64_t v142 = v141[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16))
  {
    sub_100072904(v3, v4);
    char v6 = v5;
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  v141[0] = v142;
  sub_10006D860((uint64_t)_swiftEmptyDictionarySingleton, v7, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_9:
  int64_t v11 = 0;
  uint64_t v128 = v134 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v134 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v134 + 64);
  int64_t v129 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v17 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_88;
    }
    if (v17 >= v129)
    {
LABEL_43:
      swift_release();
      goto LABEL_44;
    }
    unint64_t v18 = *(void *)(v128 + 8 * v17);
    ++v11;
    if (!v18)
    {
      int64_t v11 = v17 + 1;
      if (v17 + 1 >= v129) {
        goto LABEL_43;
      }
      unint64_t v18 = *(void *)(v128 + 8 * v11);
      if (!v18)
      {
        int64_t v11 = v17 + 2;
        if (v17 + 2 >= v129) {
          goto LABEL_43;
        }
        unint64_t v18 = *(void *)(v128 + 8 * v11);
        if (!v18) {
          break;
        }
      }
    }
LABEL_29:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_30:
    unint64_t v20 = (uint64_t *)(*(void *)(v134 + 48) + 16 * v16);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    char v23 = *(unsigned char *)(*(void *)(v134 + 56) + v16);
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    int64_t v27 = sub_100047784(v141, v24, v26);
    uint64_t v29 = v27;
    if (!*v28)
    {
      swift_bridgeObjectRelease();
      ((void (*)(void *, void))v29)(v141, 0);
      goto LABEL_13;
    }
    uint64_t v30 = v28;
    unint64_t v137 = v27;
    sub_1000048A0(&qword_1000AFDF0);
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_100082BA0;
    *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v31 + 40) = v32;
    *(unsigned char *)(v31 + 48) = v23;
    *(void *)(v31 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v31 + 64) = v33;
    *(unsigned char *)(v31 + 72) = v23;
    unint64_t v34 = sub_100070B34(v31);
    uint64_t v140 = sub_1000048A0(&qword_1000AFDF8);
    *(void *)&long long v139 = v34;
    sub_10001059C(&v139, v138);
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    v151 = (void *)*v30;
    uint64_t v36 = v151;
    *uint64_t v30 = 0x8000000000000000;
    unint64_t v38 = sub_100072904(v22, v21);
    uint64_t v39 = v36[2];
    BOOL v40 = (v37 & 1) == 0;
    uint64_t v41 = v39 + v40;
    if (__OFADD__(v39, v40))
    {
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    char v42 = v37;
    if (v36[3] >= v41)
    {
      if (v35)
      {
        uint64_t v45 = v151;
        if ((v37 & 1) == 0) {
          goto LABEL_40;
        }
      }
      else
      {
        sub_10006DF9C();
        uint64_t v45 = v151;
        if ((v42 & 1) == 0) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      sub_10006BAA0(v41, v35);
      uint64_t v43 = sub_100072904(v22, v21);
      if ((v42 & 1) != (v44 & 1)) {
        goto LABEL_91;
      }
      unint64_t v38 = v43;
      uint64_t v45 = v151;
      if ((v42 & 1) == 0)
      {
LABEL_40:
        v45[(v38 >> 6) + 8] |= 1 << v38;
        char v47 = (uint64_t *)(v45[6] + 16 * v38);
        *char v47 = v22;
        v47[1] = v21;
        sub_10001059C(v138, (_OWORD *)(v45[7] + 32 * v38));
        uint64_t v48 = v45[2];
        BOOL v49 = __OFADD__(v48, 1);
        uint64_t v50 = v48 + 1;
        if (v49) {
          goto LABEL_89;
        }
        v45[2] = v50;
        swift_bridgeObjectRetain();
        goto LABEL_42;
      }
    }
    uint64_t v46 = (_OWORD *)(v45[7] + 32 * v38);
    sub_1000048E4((uint64_t)v46);
    sub_10001059C(v138, v46);
LABEL_42:
    *uint64_t v30 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(void *, void))v137)(v141, 0);
LABEL_13:
    swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v129) {
    goto LABEL_43;
  }
  unint64_t v18 = *(void *)(v128 + 8 * v19);
  if (v18)
  {
    int64_t v11 = v19;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v11 >= v129) {
      goto LABEL_43;
    }
    unint64_t v18 = *(void *)(v128 + 8 * v11);
    ++v19;
    if (v18) {
      goto LABEL_29;
    }
  }
LABEL_90:
  __break(1u);
LABEL_91:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100078120(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_1000048A0(&qword_1000AF7E0);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  char v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  char v10 = &qword_1000AB8A8;
  int64_t v11 = (char *)&type metadata for Any + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000198D8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000048A0(v10);
    swift_dynamicCast();
    sub_10001059C(v6, v7);
    sub_10001059C(v7, v40);
    sub_10001059C(v40, &v38);
    unint64_t result = sub_100072904(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      unint64_t v15 = v11;
      unint64_t v16 = v10;
      int64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v17 = v35;
      v17[1] = v36;
      char v10 = v16;
      int64_t v11 = v15;
      uint64_t v1 = v14;
      char v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      unint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_1000048E4((uint64_t)v18);
      unint64_t result = (unint64_t)sub_10001059C(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_10001059C(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10007848C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000048A0(&qword_1000AF810);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  char v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    int64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10001B8E8(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10001059C(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10001059C(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10001059C(v36, v37);
    sub_10001059C(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_10001059C(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000198D8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100078854()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AEAConcreteManagedConfigurationRestrictionsApplicator()
{
  return self;
}

uint64_t sub_1000788B8()
{
  uint64_t v1 = v0;
  int v2 = *v0;
  uint64_t v3 = _swiftEmptyDictionarySingleton;
  if (v2 != 2)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v2 & 1, v4, v6, isUniquelyReferenced_nonNull_native);
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v8 = v1[1];
  if (v8 != 2)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v8 & 1, v9, v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v13 = v1[2];
  if (v13 != 2)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v13 & 1, v14, v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v18 = v1[3];
  if (v18 != 2)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v18 & 1, v19, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v23 = v1[4];
  if (v23 != 2)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v23 & 1, v24, v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v28 = v1[5];
  if (v28 != 2)
  {
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v28 & 1, v29, v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v33 = v1[6];
  if (v33 != 2)
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v33 & 1, v34, v36, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v38 = v1[7];
  if (v38 != 2)
  {
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v38 & 1, v39, v41, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v43 = v1[8];
  if (v43 != 2)
  {
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v43 & 1, v44, v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v48 = v1[9];
  if (v48 != 2)
  {
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;
    char v52 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v48 & 1, v49, v51, v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v53 = v1[10];
  if (v53 != 2)
  {
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v53 & 1, v54, v56, v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v58 = v1[11];
  if (v58 != 2)
  {
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v60;
    char v62 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v58 & 1, v59, v61, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v63 = v1[12];
  if (v63 != 2)
  {
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;
    char v67 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v63 & 1, v64, v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v68 = v1[13];
  if (v68 != 2)
  {
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;
    char v72 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v68 & 1, v69, v71, v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v73 = v1[14];
  if (v73 != 2)
  {
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;
    char v77 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v73 & 1, v74, v76, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v78 = v1[15];
  if (v78 != 2)
  {
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v81 = v80;
    char v82 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v78 & 1, v79, v81, v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v83 = v1[16];
  if (v83 != 2)
  {
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v86 = v85;
    char v87 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v83 & 1, v84, v86, v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v88 = v1[17];
  if (v88 != 2)
  {
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v91 = v90;
    char v92 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v88 & 1, v89, v91, v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v93 = v1[18];
  if (v93 != 2)
  {
    uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v95;
    char v97 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v93 & 1, v94, v96, v97);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v98 = v1[19];
  if (v98 != 2)
  {
    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v101 = v100;
    char v102 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v98 & 1, v99, v101, v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v103 = v1[21];
  if (v103 != 2)
  {
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v106 = v105;
    char v107 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v103 & 1, v104, v106, v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v108 = v1[20];
  if (v108 != 2)
  {
    uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v111 = v110;
    char v112 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v108 & 1, v109, v111, v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v103 != 2)
  {
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v115 = v114;
    char v116 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v103 & 1, v113, v115, v116);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v117 = v1[22];
  if (v117 != 2)
  {
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v120 = v119;
    char v121 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v117 & 1, v118, v120, v121);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v124 = v123;
    char v125 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v117 & 1, v122, v124, v125);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v126 = v1[23];
  if (v126 != 2)
  {
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v129 = v128;
    char v130 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v126 & 1, v127, v129, v130);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int v131 = v1[25];
  if (v131 != 2)
  {
    char v132 = v131 & 1;
    char v133 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v132, 0xD000000000000025, 0x8000000100089A80, v133);
    swift_bridgeObjectRelease();
  }
  int v134 = v1[26];
  if (v134 != 2)
  {
    uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v137 = v136;
    char v138 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(v134 & 1, v135, v137, v138);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1000197B0((uint64_t)(v1 + 27), (uint64_t)v176, &qword_1000AFE00);
  sub_1000197B0((uint64_t)v176, (uint64_t)&v177, &qword_1000AFE00);
  if (v177 == 3 || (long long v139 = sub_10007967C(v177 | ((unint64_t)v178 << 32))) == 0)
  {
LABEL_90:
    int v167 = v1[24];
    if (v167 != 2)
    {
      uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v170 = v169;
      char v171 = swift_isUniquelyReferenced_nonNull_native();
      sub_10006D6F4(v167 & 1, v168, v170, v171);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (!_swiftEmptyDictionarySingleton[2])
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return (uint64_t)v3;
  }
  uint64_t v140 = v139;
  int64_t v141 = 0;
  uint64_t v173 = v1;
  uint64_t v174 = v139 + 8;
  uint64_t v142 = 1 << *((unsigned char *)v139 + 32);
  uint64_t v143 = -1;
  if (v142 < 64) {
    uint64_t v143 = ~(-1 << v142);
  }
  unint64_t v144 = v143 & v139[8];
  int64_t v175 = (unint64_t)(v142 + 63) >> 6;
  while (1)
  {
    if (v144)
    {
      unint64_t v145 = __clz(__rbit64(v144));
      v144 &= v144 - 1;
      unint64_t v146 = v145 | (v141 << 6);
    }
    else
    {
      int64_t v147 = v141 + 1;
      if (__OFADD__(v141, 1)) {
        goto LABEL_97;
      }
      uint64_t v1 = v173;
      if (v147 >= v175)
      {
LABEL_89:
        swift_release();
        goto LABEL_90;
      }
      unint64_t v148 = v174[v147];
      ++v141;
      if (!v148)
      {
        int64_t v141 = v147 + 1;
        if (v147 + 1 >= v175) {
          goto LABEL_89;
        }
        unint64_t v148 = v174[v141];
        if (!v148)
        {
          int64_t v141 = v147 + 2;
          if (v147 + 2 >= v175) {
            goto LABEL_89;
          }
          unint64_t v148 = v174[v141];
          if (!v148)
          {
            int64_t v149 = v147 + 3;
            if (v149 >= v175) {
              goto LABEL_89;
            }
            unint64_t v148 = v174[v149];
            if (!v148)
            {
              while (1)
              {
                int64_t v141 = v149 + 1;
                if (__OFADD__(v149, 1)) {
                  goto LABEL_98;
                }
                if (v141 >= v175) {
                  goto LABEL_89;
                }
                unint64_t v148 = v174[v141];
                ++v149;
                if (v148) {
                  goto LABEL_77;
                }
              }
            }
            int64_t v141 = v149;
          }
        }
      }
LABEL_77:
      unint64_t v144 = (v148 - 1) & v148;
      unint64_t v146 = __clz(__rbit64(v148)) + (v141 << 6);
    }
    char v150 = (uint64_t *)(v140[6] + 16 * v146);
    uint64_t v152 = *v150;
    uint64_t v151 = v150[1];
    char v153 = *(unsigned char *)(v140[7] + v146);
    swift_bridgeObjectRetain();
    char v154 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v156 = sub_100072904(v152, v151);
    uint64_t v157 = _swiftEmptyDictionarySingleton[2];
    BOOL v158 = (v155 & 1) == 0;
    uint64_t v159 = v157 + v158;
    if (__OFADD__(v157, v158)) {
      break;
    }
    char v160 = v155;
    if (_swiftEmptyDictionarySingleton[3] >= v159)
    {
      if (v154)
      {
        if (v155) {
          goto LABEL_60;
        }
      }
      else
      {
        sub_10006E378();
        if (v160) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      sub_10006C0B8(v159, v154);
      uint64_t v161 = sub_100072904(v152, v151);
      if ((v160 & 1) != (v162 & 1)) {
        goto LABEL_99;
      }
      unint64_t v156 = v161;
      if (v160)
      {
LABEL_60:
        *(unsigned char *)(_swiftEmptyDictionarySingleton[7] + v156) = v153;
        goto LABEL_61;
      }
    }
    _swiftEmptyDictionarySingleton[(v156 >> 6) + 8] |= 1 << v156;
    v163 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v156);
    uint64_t *v163 = v152;
    v163[1] = v151;
    *(unsigned char *)(_swiftEmptyDictionarySingleton[7] + v156) = v153;
    uint64_t v164 = _swiftEmptyDictionarySingleton[2];
    BOOL v165 = __OFADD__(v164, 1);
    uint64_t v166 = v164 + 1;
    if (v165) {
      goto LABEL_96;
    }
    _swiftEmptyDictionarySingleton[2] = v166;
    swift_bridgeObjectRetain();
LABEL_61:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10007967C(uint64_t a1)
{
  int v2 = _swiftEmptyDictionarySingleton;
  if (a1 != 2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(a1 & 1, v3, v5, isUniquelyReferenced_nonNull_native);
    int v2 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF00) != 0x200)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(BYTE1(a1) & 1, v7, v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF0000) != 0x20000)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(BYTE2(a1) & 1, v11, v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF000000) != 0x2000000)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(BYTE3(a1) & 1, v15, v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF00000000) != 0x200000000)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(BYTE4(a1) & 1, v19, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF0000000000) != 0x20000000000)
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    sub_10006D6F4(BYTE5(a1) & 1, v23, v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (!_swiftEmptyDictionarySingleton[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

id sub_100079920(Class isa)
{
  id v2 = [self sharedConnection];
  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = v2;
  if (isa)
  {
    sub_10007848C((uint64_t)isa);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  id v9 = 0;
  unsigned int v6 = [v3 applyRestrictionDictionary:isa overrideRestrictions:1 clientType:v4 clientUUID:v5 localizedClientDescription:0 localizedWarningMessage:0 outRestrictionChanged:0 outEffectiveSettingsChanged:0 outError:&v9];

  if (v6) {
    return v9;
  }
  id v8 = v9;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t type metadata accessor for AEAConcreteUserDefaultsPrimitives()
{
  return self;
}

void sub_100079AD4()
{
  if (qword_1000AA658 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000B0350;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v2 = String._bridgeToObjectiveC()();
  [v0 setValue:isa forKey:v2];
}

void sub_100079B90()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2) {
    qword_1000B0350 = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

uint64_t sub_100079C08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 dataRepresentation];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  sub_10002981C(v5, v7);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [self auditTokenWithData:isa];
  sub_100006384(v5, v7);

  if (!v9) {
    goto LABEL_7;
  }
  [v9 underlyingToken];
  SecTaskRef v10 = SecTaskCreateWithAuditToken(0, &v25);
  if (!v10)
  {

LABEL_7:
    int v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    sub_100006384(v5, v7);
    goto LABEL_8;
  }
  SecTaskRef v11 = v10;
  uint64_t v12 = type metadata accessor for AEAConcreteSecurityTaskPrimitives.ConcreteSecurityTask();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 24) = xmmword_1000843B0;
  *(void *)(v13 + 16) = v11;
  *((void *)&v27 + 1) = v12;
  int v28 = &off_1000A1678;

  *(void *)&long long v26 = v13;
  sub_100006384(v5, v7);
  if (!v12)
  {
LABEL_8:
    sub_100079EE8((uint64_t)&v26);
    goto LABEL_9;
  }
  sub_1000093C0(&v26, (uint64_t)v29);
  sub_100006340(v29, v29[3]);
  uint64_t v14 = sub_100056C30();
  if (v15)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    uint64_t v18 = type metadata accessor for AEAParticipant.Process(0);
    uint64_t v19 = a2 + *(int *)(v18 + 24);
    uint64_t v20 = v19 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    *(unsigned char *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)a2 = a1;
    *(void *)(a2 + 8) = v16;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = 0;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 0, 1, v18);
    id v22 = a1;
    return sub_1000048E4((uint64_t)v29);
  }
  sub_1000048E4((uint64_t)v29);
LABEL_9:
  uint64_t v24 = type metadata accessor for AEAParticipant.Process(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a2, 1, 1, v24);
}

uint64_t type metadata accessor for AEAiOSOSProcessLift()
{
  return self;
}

uint64_t sub_100079ED0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100079C08(a1, a2);
}

uint64_t sub_100079EE8(uint64_t a1)
{
  uint64_t v2 = sub_1000048A0(&qword_1000AFF60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for AEASingleAppModeToggler()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AEASingleAppModeToggler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AEASingleAppModeToggler(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AEASingleAppModeToggler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AEASingleAppModeToggler(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEASingleAppModeToggler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASingleAppModeToggler()
{
  return &type metadata for AEASingleAppModeToggler;
}

uint64_t sub_10007A110()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1000B0358 = result;
  unk_1000B0360 = v1;
  return result;
}

uint64_t sub_10007A140()
{
  sub_1000048A0(&qword_1000ABFD8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100080BE0;
  if (qword_1000AA660 != -1) {
    swift_once();
  }
  uint64_t v1 = unk_1000B0360;
  *(void *)(inited + 32) = qword_1000B0358;
  *(void *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  Swift::Int v2 = sub_10002D894(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  qword_1000B0368 = v2;
  return result;
}

uint64_t sub_10007A20C()
{
  Swift::Int v0 = sub_10002D894((uint64_t)&off_10009DFE0);
  uint64_t result = swift_arrayDestroy();
  qword_1000B0370 = v0;
  return result;
}

unint64_t sub_10007A25C()
{
  unint64_t result = qword_1000AFF68;
  if (!qword_1000AFF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AFF68);
  }
  return result;
}

uint64_t sub_10007A2B0()
{
  if (qword_1000AA5D8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000B0268;
  swift_bridgeObjectRetain();
  return v0;
}

unsigned char *storeEnumTagSinglePayload for AEAExternalSubsystemRestrictionActionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10007A3B4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAExternalSubsystemRestrictionActionError()
{
  return &type metadata for AEAExternalSubsystemRestrictionActionError;
}

unint64_t sub_10007A3F0()
{
  unint64_t result = qword_1000AFF70;
  if (!qword_1000AFF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AFF70);
  }
  return result;
}

uint64_t destroy for AEAExternalSubsystemRestrictionActivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return sub_1000048E4(a1 + 40);
}

uint64_t initializeWithCopy for AEAExternalSubsystemRestrictionActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = a2 + 40;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v7 = v6;
  id v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 40, v5, v7);
  return a1;
}

void *assignWithCopy for AEAExternalSubsystemRestrictionActivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  sub_10000E5F4(a1 + 5, a2 + 5);
  return a1;
}

__n128 initializeWithTake for AEAExternalSubsystemRestrictionActivation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AEAExternalSubsystemRestrictionActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1000048E4(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for AEAExternalSubsystemRestrictionActivation()
{
  return &type metadata for AEAExternalSubsystemRestrictionActivation;
}

uint64_t sub_10007A658()
{
  *(void *)(v1 + 200) = v0;
  return _swift_task_switch(sub_10007A678, 0, 0);
}

uint64_t sub_10007A678()
{
  uint64_t v1 = qword_1000AA578;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  Swift::Int v2 = (void *)qword_1000B01B0;
  id v3 = objc_allocWithZone((Class)AEAssessmentModeRestrictionEnforcerProxy);
  id v4 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithMachServiceName:v5 queue:v4];
  v0[26] = v6;

  v0[2] = v0;
  v0[3] = sub_10007A810;
  uint64_t v7 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100025220;
  v0[13] = &unk_1000A3380;
  v0[14] = v7;
  [v6 shouldEndRestrictingForAssessmentModeWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10007A810()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    Swift::Int v2 = sub_10007A994;
  }
  else {
    Swift::Int v2 = sub_10007A920;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007A920()
{
  uint64_t v1 = *(void **)(v0 + 208);
  [v1 invalidate];

  Swift::Int v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10007A994()
{
  uint64_t v14 = v0;
  swift_willThrow();
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[25];
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
  sub_10007BAD8(v1, (uint64_t)(v0 + 10));
  swift_errorRetain();
  swift_errorRetain();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v7 = v0[10];
    unint64_t v6 = v0[11];
    swift_bridgeObjectRetain();
    v0[24] = sub_1000722AC(v7, v6, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007BB10((uint64_t)(v0 + 10));
    *(_WORD *)(v5 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v8 = sub_100062820(v0[21]);
    v0[24] = sub_1000722AC(v8, v9, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to deactivate restriction %{public}s. Error: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10007BB10((uint64_t)(v0 + 10));
    swift_errorRelease();
    swift_errorRelease();
  }

  SecTaskRef v10 = (void *)v0[26];
  sub_10007A25C();
  swift_allocError();
  swift_willThrow();
  swift_errorRelease();

  SecTaskRef v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10007AC58()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10001AC9C;
  v2[25] = v0;
  return _swift_task_switch(sub_10007A678, 0, 0);
}

uint64_t sub_10007AD00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v5 = *v1;
  uint64_t v4 = (void *)v1[1];
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  char v7 = sub_10000E230();
  uint64_t result = swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v10 = v2[2];
    uint64_t v9 = v2[3];
    *(void *)(a1 + 24) = &type metadata for AEAExternalSubsystemRestrictionDeactivation;
    *(void *)(a1 + 32) = &off_1000A3360;
    SecTaskRef v11 = (void *)swift_allocObject();
    *(void *)a1 = v11;
    sub_1000091C4((uint64_t)(v2 + 5), (uint64_t)(v11 + 7));
    v11[2] = v5;
    void v11[3] = v4;
    void v11[4] = 4;
    v11[5] = v10;
    v11[6] = v9;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10007AE58(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  return _swift_task_switch(sub_10007AEEC, 0, 0);
}

uint64_t sub_10007AEEC()
{
  uint64_t v1 = *(uint64_t **)(v0 + 216);
  uint64_t v2 = qword_1000AA578;
  swift_bridgeObjectRetain();
  if (v2 != -1)
  {
    swift_once();
    uint64_t v1 = *(uint64_t **)(v0 + 216);
  }
  id v3 = *(void **)(v0 + 208);
  uint64_t v4 = (void *)qword_1000B01B0;
  id v5 = objc_allocWithZone((Class)AEAssessmentModeRestrictionEnforcerProxy);
  id v6 = v4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v5 initWithMachServiceName:v7 queue:v6];
  *(void *)(v0 + 224) = v8;

  swift_getObjectType();
  uint64_t v9 = *v1;
  uint64_t v10 = (void *)v1[1];
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  sub_10000E198(1);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 80) = 0;
  unsigned int v12 = [v3 persistWithError:v0 + 80, 0xD000000000000017, 0x8000000100089B60];
  uint64_t v13 = *(void **)(v0 + 80);
  if (v12)
  {
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_10007B1E4;
    uint64_t v14 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_100025220;
    *(void *)(v0 + 104) = &unk_1000A3280;
    *(void *)(v0 + 112) = v14;
    id v15 = v13;
    [v8 shouldBeginRestrictingForAssessmentModeWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    id v16 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_10007B1E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 232) = v1;
  if (v1) {
    uint64_t v2 = sub_10007B44C;
  }
  else {
    uint64_t v2 = sub_10007B320;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007B320()
{
  uint64_t v2 = (uint64_t *)v0[27];
  uint64_t v1 = (void *)v0[28];
  id v3 = (void *)v0[25];
  [v1 invalidate];

  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v6 = v2[3];
  v3[3] = &type metadata for AEAExternalSubsystemRestrictionDeactivation;
  v3[4] = &off_1000A3360;
  id v8 = (void *)swift_allocObject();
  *id v3 = v8;
  sub_1000091C4((uint64_t)(v2 + 5), (uint64_t)(v8 + 7));
  v8[2] = v5;
  void v8[3] = v4;
  v8[4] = 4;
  void v8[5] = v7;
  void v8[6] = v6;
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v10();
}

uint64_t sub_10007B44C()
{
  uint64_t v13 = v0;
  swift_willThrow();
  if (qword_1000AA560 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000CB7C(v2, (uint64_t)qword_1000B0170);
  sub_100076F3C(v1, v0 + 80);
  swift_errorRetain();
  swift_errorRetain();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v7 = *(void *)(v0 + 80);
    unint64_t v6 = *(void *)(v0 + 88);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 184) = sub_1000722AC(v7, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100076F98(v0 + 80);
    *(_WORD *)(v5 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v8 = sub_100062820(*(void *)(v0 + 168));
    *(void *)(v0 + 184) = sub_1000722AC(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to activate restriction %{public}s. Error: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100076F98(v0 + 80);
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10007A25C();
  swift_allocError();
  swift_willThrow();
  swift_errorRelease();

  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10007B740(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_10000ED6C;
  v6[26] = a2;
  v6[27] = v2;
  v6[25] = a1;
  return _swift_task_switch(sub_10007AEEC, 0, 0);
}

uint64_t sub_10007B7FC()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_10007B804()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048E4(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t destroy for AEAExternalSubsystemRestrictionDeactivation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return sub_1000048E4(a1 + 40);
}

uint64_t initializeWithCopy for AEAExternalSubsystemRestrictionDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = a2 + 40;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(a1 + 40, v4, v6);
  return a1;
}

void *assignWithCopy for AEAExternalSubsystemRestrictionDeactivation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10000E5F4(a1 + 5, a2 + 5);
  return a1;
}

uint64_t assignWithTake for AEAExternalSubsystemRestrictionDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  sub_1000048E4(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t _s15assessmentagent41AEAExternalSubsystemRestrictionActivationVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10007BA74(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAExternalSubsystemRestrictionDeactivation()
{
  return &type metadata for AEAExternalSubsystemRestrictionDeactivation;
}

uint64_t sub_10007BAD8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007BB10(uint64_t a1)
{
  return a1;
}

char *sub_10007BB40(char *a1, char **a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = &v10[(v5 + 16) & ~(unint64_t)v5];
  }
  else
  {
    uint64_t v7 = type metadata accessor for AEAParticipant(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_1000048A0(&qword_1000AFC50);
      memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = a2[1];
      int v38 = *a2;
      *(void *)uint64_t v4 = *a2;
      *((void *)v4 + 1) = v11;
      uint64_t v39 = v8;
      *((void *)v4 + 2) = a2[2];
      v4[24] = *((unsigned char *)a2 + 24);
      uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      uint64_t v13 = &v4[v12];
      uint64_t v14 = (char *)a2 + v12;
      *uint64_t v13 = *((unsigned char *)a2 + v12);
      uint64_t v15 = *(uint64_t *)((char *)a2 + v12 + 16);
      *((void *)v13 + 1) = *(char **)((char *)a2 + v12 + 8);
      *((void *)v13 + 2) = v15;
      uint64_t v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v13[v16];
      uint64_t v17 = &v14[v16];
      uint64_t v18 = type metadata accessor for URL();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      uint64_t v21 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        uint64_t v22 = sub_1000048A0(&qword_1000AB5F8);
        memcpy(__dst, v17, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      uint64_t v23 = *(int *)(v7 + 20);
      uint64_t v24 = &v4[v23];
      audit_token_t v25 = (char *)a2 + v23;
      *uint64_t v24 = *v25;
      *((void *)v24 + 1) = *((void *)v25 + 1);
      long long v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
      swift_bridgeObjectRetain();
      v26(v4, 0, 1, v7);
    }
    uint64_t v27 = a3[6];
    *(void *)&v4[a3[5]] = *(char **)((char *)a2 + a3[5]);
    *(void *)&v4[v27] = *(char **)((char *)a2 + v27);
    uint64_t v28 = a3[7];
    uint64_t v29 = a3[8];
    uint64_t v30 = &v4[v28];
    uint64_t v31 = (char *)a2 + v28;
    *(void *)uint64_t v30 = *(void *)v31;
    uint64_t v32 = *((void *)v31 + 3);
    *(_OWORD *)(v30 + 8) = *(_OWORD *)(v31 + 8);
    *((void *)v30 + 3) = v32;
    int v33 = &v4[v29];
    uint64_t v34 = (char **)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *(void *)int v33 = *v34;
    *((void *)v33 + 1) = v35;
    *(void *)&v4[a3[9]] = *(char **)((char *)a2 + a3[9]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10007BE90(id *a1)
{
  uint64_t v2 = type metadata accessor for AEAParticipant(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2))
  {

    swift_bridgeObjectRelease();
    uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease();
    uint64_t v4 = &v3[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void **sub_10007C01C(void **a1, void **a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AEAParticipant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000048A0(&qword_1000AFC50);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v38 = v7;
    uint64_t v10 = *a2;
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v36 = v10;
    a1[2] = a2[2];
    *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *uint64_t v12 = *((unsigned char *)a2 + v11);
    uint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 16);
    *((void *)v12 + 1) = *(void **)((char *)a2 + v11 + 8);
    *((void *)v12 + 2) = v14;
    uint64_t v15 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v12[v15];
    uint64_t v16 = &v13[v15];
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    id v20 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      uint64_t v21 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(__dst, v16, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    uint64_t v22 = *(int *)(v6 + 20);
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    char *v23 = *v24;
    *((void *)v23 + 1) = *((void *)v24 + 1);
    audit_token_t v25 = *(void (**)(void **, void, uint64_t, uint64_t))(v38 + 56);
    swift_bridgeObjectRetain();
    v25(a1, 0, 1, v6);
  }
  uint64_t v26 = a3[6];
  *(void **)((char *)a1 + a3[5]) = *(void **)((char *)a2 + a3[5]);
  *(void **)((char *)a1 + v26) = *(void **)((char *)a2 + v26);
  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v27;
  uint64_t v30 = (char *)a2 + v27;
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 3);
  *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
  *((void *)v29 + 3) = v31;
  uint64_t v32 = (void **)((char *)a1 + v28);
  int v33 = (void **)((char *)a2 + v28);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  *(void **)((char *)a1 + a3[9]) = *(void **)((char *)a2 + a3[9]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10007C320(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AEAParticipant(0);
  uint64_t v7 = *(void **)(v6 - 8);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[6];
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1000202B4(a1);
      goto LABEL_7;
    }
    uint64_t v22 = *(void **)a2;
    uint64_t v23 = *(void **)a1;
    *(void *)a1 = *(void *)a2;
    id v24 = v22;

    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v25 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v26 = a1 + v25;
    uint64_t v27 = a2 + v25;
    *(unsigned char *)uint64_t v26 = *(unsigned char *)(a2 + v25);
    *(void *)(v26 + 8) = *(void *)(a2 + v25 + 8);
    *(void *)(v26 + 16) = *(void *)(a2 + v25 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v29 = (void *)(v26 + v28);
    uint64_t v30 = (void *)(v27 + v28);
    uint64_t v31 = type metadata accessor for URL();
    uint64_t v32 = *(void *)(v31 - 8);
    int v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
    __dsta = v29;
    LODWORD(v29) = v33(v29, 1, v31);
    int v34 = v33(v30, 1, v31);
    if (v29)
    {
      if (!v34)
      {
        (*(void (**)(void *, void *, uint64_t))(v32 + 16))(__dsta, v30, v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dsta, 0, 1, v31);
        goto LABEL_18;
      }
      size_t v35 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v36 = __dsta;
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(void *, void *, uint64_t))(v32 + 24))(__dsta, v30, v31);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v32 + 8))(__dsta, v31);
      size_t v35 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      uint64_t v36 = __dsta;
    }
    memcpy(v36, v30, v35);
LABEL_18:
    uint64_t v41 = *(int *)(v6 + 20);
    uint64_t v42 = a1 + v41;
    uint64_t v43 = a2 + v41;
    *(unsigned char *)uint64_t v42 = *(unsigned char *)v43;
    *(void *)(v42 + 8) = *(void *)(v43 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v21 = sub_1000048A0(&qword_1000AFC50);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_19;
  }
  __src = v7;
  uint64_t v54 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)uint64_t v12 = *(unsigned char *)(a2 + v11);
  *(void *)(v12 + 8) = *(void *)(a2 + v11 + 8);
  *(void *)(v12 + 16) = *(void *)(a2 + v11 + 16);
  uint64_t v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v12 + v14);
  uint64_t v15 = (const void *)(v13 + v14);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  id v19 = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    uint64_t v20 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(__dst, v15, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  uint64_t v37 = *(int *)(v6 + 20);
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  uint64_t v40 = (void (*)(uint64_t, void, uint64_t, uint64_t))__src[7];
  swift_bridgeObjectRetain();
  v40(a1, 0, 1, v6);
LABEL_19:
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v44 = a3[7];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = a2 + v44;
  uint64_t v47 = *(void *)(a2 + v44 + 8);
  *uint64_t v45 = *(void *)(a2 + v44);
  v45[1] = v47;
  swift_retain();
  swift_release();
  uint64_t v48 = *(void *)(v46 + 24);
  v45[2] = *(void *)(v46 + 16);
  long long v45[3] = v48;
  swift_retain();
  swift_release();
  uint64_t v49 = a3[8];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (void *)(a2 + v49);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

void *sub_10007C8A4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AEAParticipant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000048A0(&qword_1000AFC50);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *int v10 = *((unsigned char *)a2 + v9);
    *(_OWORD *)(v10 + 8) = *(_OWORD *)((char *)a2 + v9 + 8);
    uint64_t v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v13 = &v10[v12];
    uint64_t v14 = &v11[v12];
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_1000048A0(&qword_1000AB5F8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v18 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = a3[8];
  long long v21 = *(_OWORD *)((char *)a2 + v19);
  long long v22 = *(_OWORD *)((char *)a2 + v19 + 16);
  uint64_t v23 = (_OWORD *)((char *)a1 + v19);
  _OWORD *v23 = v21;
  v23[1] = v22;
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_10007CB14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AEAParticipant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1000202B4(a1);
      goto LABEL_7;
    }
    long long v21 = *(void **)a1;
    *(void *)a1 = *(void *)a2;

    uint64_t v22 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v22;
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v23 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    uint64_t v24 = a1 + v23;
    uint64_t v25 = a2 + v23;
    *(unsigned char *)uint64_t v24 = *(unsigned char *)(a2 + v23);
    uint64_t v26 = *(void *)(a2 + v23 + 16);
    *(void *)(v24 + 8) = *(void *)(a2 + v23 + 8);
    *(void *)(v24 + 16) = v26;
    swift_bridgeObjectRelease();
    uint64_t v27 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    uint64_t v28 = (void *)(v24 + v27);
    uint64_t v29 = (void *)(v25 + v27);
    uint64_t v30 = type metadata accessor for URL();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v43 = v28;
    LODWORD(v28) = v32(v28, 1, v30);
    int v33 = v32(v29, 1, v30);
    if (v28)
    {
      if (!v33)
      {
        (*(void (**)(void *, void *, uint64_t))(v31 + 32))(v43, v29, v30);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v43, 0, 1, v30);
        goto LABEL_18;
      }
      size_t v34 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      size_t v35 = v43;
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(void *, void *, uint64_t))(v31 + 40))(v43, v29, v30);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v31 + 8))(v43, v30);
      size_t v34 = *(void *)(*(void *)(sub_1000048A0(&qword_1000AB5F8) - 8) + 64);
      size_t v35 = v43;
    }
    memcpy(v35, v29, v34);
LABEL_18:
    uint64_t v36 = *(int *)(v6 + 20);
    uint64_t v37 = a1 + v36;
    uint64_t v38 = a2 + v36;
    *(unsigned char *)uint64_t v37 = *(unsigned char *)v38;
    *(void *)(v37 + 8) = *(void *)(v38 + 8);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v20 = sub_1000048A0(&qword_1000AFC50);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)uint64_t v12 = *(unsigned char *)(a2 + v11);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + v11 + 8);
  uint64_t v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  uint64_t v15 = (void *)(v12 + v14);
  uint64_t v16 = (const void *)(v13 + v14);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_1000048A0(&qword_1000AB5F8);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_19:
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  uint64_t v39 = a3[7];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(_OWORD *)(a1 + v39) = *(_OWORD *)(a2 + v39);
  swift_release();
  *(_OWORD *)(v40 + 16) = *(_OWORD *)(v41 + 16);
  swift_release();
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t sub_10007CFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007CFF8);
}

uint64_t sub_10007CFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000048A0(&qword_1000AFC50);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10007D0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007D0D0);
}

uint64_t sub_10007D0D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000048A0(&qword_1000AFC50);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AEAPolicyBundleArguments()
{
  uint64_t result = qword_1000AFFF0;
  if (!qword_1000AFFF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10007D1DC()
{
  sub_1000346F4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for AEAConcreteLaunchServicesPrimitives()
{
  return self;
}

uint64_t sub_10007D2B4()
{
  if (qword_1000AA540 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000CB7C(v0, (uint64_t)qword_1000B0110);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error: this is not implemented on iOS: runningApplicationsPublisher", v3, 2u);
    swift_slowDealloc();
  }

  sub_1000048A0(&qword_1000B00E0);
  swift_allocObject();
  PassthroughSubject.init()();
  sub_10007D3E4();
  uint64_t v4 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v4;
}

unint64_t sub_10007D3E4()
{
  unint64_t result = qword_1000B00E8;
  if (!qword_1000B00E8)
  {
    sub_1000054DC(&qword_1000B00E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000B00E8);
  }
  return result;
}

uint64_t static CocoaError.errorDomain.getter()
{
  return static CocoaError.errorDomain.getter();
}

uint64_t static CocoaError.fileNoSuchFile.getter()
{
  return static CocoaError.fileNoSuchFile.getter();
}

uint64_t static CocoaError.fileWriteFileExists.getter()
{
  return static CocoaError.fileWriteFileExists.getter();
}

uint64_t static CocoaError.fileReadNoPermission.getter()
{
  return static CocoaError.fileReadNoPermission.getter();
}

uint64_t CocoaError.Code.rawValue.getter()
{
  return CocoaError.Code.rawValue.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return URLResourceValues.isDirectory.getter();
}

uint64_t URLResourceValues.contentModificationDate.setter()
{
  return URLResourceValues.contentModificationDate.setter();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)()
{
  return _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t CombineIdentifier.init()()
{
  return CombineIdentifier.init()();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return type metadata accessor for CombineIdentifier();
}

uint64_t Publishers.CombineLatest.init(_:_:)()
{
  return Publishers.CombineLatest.init(_:_:)();
}

uint64_t Publishers.Map.map<A>(_:)()
{
  return Publishers.Map.map<A>(_:)();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)()
{
  return dispatch thunk of Subscriber.receive(completion:)();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return dispatch thunk of Subscriber.receive(subscription:)();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return dispatch thunk of Cancellable.cancel()();
}

uint64_t type metadata accessor for Subscribers.Completion()
{
  return type metadata accessor for Subscribers.Completion();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return static Subscribers.Demand.== infix(_:_:)();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return static Subscribers.Demand.none.getter();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return static Subscribers.Demand.unlimited.getter();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return dispatch thunk of Subscription.request(_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

uint64_t AnyCancellable.store<A>(in:)()
{
  return AnyCancellable.store<A>(in:)();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return type metadata accessor for AnyCancellable();
}

uint64_t AnyCancellable.init<A>(_:)()
{
  return AnyCancellable.init<A>(_:)();
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return type metadata accessor for PassthroughSubject();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t CurrentValueSubject.value.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t Just.init(_:)()
{
  return Just.init(_:)();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t Subject<>.send()()
{
  return Subject<>.send()();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published.Publisher()
{
  return type metadata accessor for Published.Publisher();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t dispatch thunk of Publisher.receive<A>(subscriber:)()
{
  return dispatch thunk of Publisher.receive<A>(subscriber:)();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.flatMap<A, B>(maxPublishers:_:)()
{
  return Publisher.flatMap<A, B>(maxPublishers:_:)();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return Publisher.subscribe<A>(_:)();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return Publisher<>.removeDuplicates()();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

Swift::Void __swiftcall CATSerializer.cancelAllTasks()()
{
}

uint64_t CATSerializer.enqueue<A>(respectingCancelAll:_:)()
{
  return CATSerializer.enqueue<A>(respectingCancelAll:_:)();
}

uint64_t CATSerializer.init()()
{
  return CATSerializer.init()();
}

uint64_t type metadata accessor for CATSerializer()
{
  return type metadata accessor for CATSerializer();
}

uint64_t CATAsyncStreamMulticaster.makeStream()()
{
  return CATAsyncStreamMulticaster.makeStream()();
}

uint64_t CATAsyncStreamMulticaster.init(bufferingPolicy:)()
{
  return CATAsyncStreamMulticaster.init(bufferingPolicy:)();
}

uint64_t CATAsyncStreamMulticaster.yield(_:)()
{
  return CATAsyncStreamMulticaster.yield(_:)();
}

Swift::Void __swiftcall CATAsyncStreamMulticaster.finish()()
{
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t Dictionary.init()()
{
  return Dictionary.init()();
}

uint64_t Array.init()()
{
  return Array.init()();
}

uint64_t Set.init()()
{
  return Set.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return Dictionary.removeValue(forKey:)();
}

uint64_t Dictionary.Index._asCocoa.modify()
{
  return Dictionary.Index._asCocoa.modify();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return type metadata accessor for Dictionary();
}

uint64_t Dictionary.subscript.getter()
{
  return Dictionary.subscript.getter();
}

uint64_t Dictionary.subscript.setter()
{
  return Dictionary.subscript.setter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t Sequence.allSatisfy(_:)()
{
  return Sequence.allSatisfy(_:)();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.enumerated()()
{
  return Sequence.enumerated()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t static Array<A>.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t Bool.hashValue.getter()
{
  return Bool.hashValue.getter();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.insert(_:)()
{
  return Set.insert(_:)();
}

uint64_t Set.remove(_:)()
{
  return Set.remove(_:)();
}

Swift::Void __swiftcall Set.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _NativeDictionary.makeIterator()()
{
  return _NativeDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.startIndex.getter()
{
  return __CocoaDictionary.startIndex.getter();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.Index.dictionary.getter()
{
  return __CocoaDictionary.Index.dictionary.getter();
}

uint64_t __CocoaDictionary.Index.handleBitPattern.getter()
{
  return __CocoaDictionary.Index.handleBitPattern.getter();
}

uint64_t __CocoaDictionary.Index.age.getter()
{
  return __CocoaDictionary.Index.age.getter();
}

uint64_t __CocoaDictionary.Index.key.getter()
{
  return __CocoaDictionary.Index.key.getter();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.index(after:)()
{
  return __CocoaDictionary.index(after:)();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.nextKey()()
{
  return __CocoaDictionary.Iterator.nextKey()();
}

uint64_t __CocoaDictionary.formIndex(after:isUnique:)()
{
  return __CocoaDictionary.formIndex(after:isUnique:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return EnumeratedSequence.makeIterator()();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return EnumeratedSequence.Iterator.next()();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return type metadata accessor for EnumeratedSequence.Iterator();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return type metadata accessor for EnumeratedSequence();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)()
{
  return _forceBridgeFromObjectiveC<A>(_:_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return type metadata accessor for Mirror.DisplayStyle();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return type metadata accessor for Mirror.AncestorRepresentation();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t AELocalizedStringFromTableInBundle()
{
  return _AELocalizedStringFromTableInBundle();
}

void CFRunLoopRun(void)
{
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

uint64_t MRMediaRemoteRestrictCommandClients()
{
  return _MRMediaRemoteRestrictCommandClients();
}

uint64_t MRMediaRemoteSendCommandWithReply()
{
  return _MRMediaRemoteSendCommandWithReply();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return __swift_isClassOrObjCExistentialType();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return _audit_token_to_pid(atoken);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return _dispatch_source_testcancel(source);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return _swift_isUniquelyReferenced_nonNull();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return [a1 addPolicy:];
}

id objc_msgSend_ae_dataRepresentation(void *a1, const char *a2, ...)
{
  return [a1 ae_dataRepresentation];
}

id objc_msgSend_ae_map_(void *a1, const char *a2, ...)
{
  return [a1 ae_map:];
}

id objc_msgSend_ae_valueFromData_ofObjCType_(void *a1, const char *a2, ...)
{
  return [a1 ae_valueFromData:x0 ofObjCType:x1];
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 allInterfaces];
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return _[a1 apply];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_copyUUIDsForBundleID_uid_(void *a1, const char *a2, ...)
{
  return [a1 copyUUIDsForBundleID:uid];
}

id objc_msgSend_copyUUIDsForExecutable_(void *a1, const char *a2, ...)
{
  return [a1 copyUUIDsForExecutable:];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return _[a1 drop];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_effectiveApplication_(void *a1, const char *a2, ...)
{
  return [a1 effectiveApplication:];
}

id objc_msgSend_effectivePID_(void *a1, const char *a2, ...)
{
  return [a1 effectivePID:];
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return [a1 endpointWithHostname:port:];
}

id objc_msgSend_fireHandler(void *a1, const char *a2, ...)
{
  return _[a1 fireHandler];
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return [a1 getValue:];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:")];
}

id objc_msgSend_initWithAuditToken_(void *a1, const char *a2, ...)
{
  return [a1 initWithAuditToken:];
}

id objc_msgSend_initWithDuration_queue_handler_(void *a1, const char *a2, ...)
{
  return [a1 initWithDuration:x0 queue:x1 handler:x2];
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:];
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return [a1 initWithOrder:x0 result:x1 conditions:x2];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_invalidAuditToken(void *a1, const char *a2, ...)
{
  return _[a1 invalidAuditToken];
}

id objc_msgSend_ipProtocol_(void *a1, const char *a2, ...)
{
  return [a1 ipProtocol:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return [a1 isMemberOfClass:];
}

id objc_msgSend_loadAllFromPreferencesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 loadAllFromPreferencesWithCompletionHandler:];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_releaseRestrictions(void *a1, const char *a2, ...)
{
  return _[a1 releaseRestrictions];
}

id objc_msgSend_remoteAddress_prefix_(void *a1, const char *a2, ...)
{
  return [a1 remoteAddress:prefix:];
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPolicies];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_setFireHandler_(void *a1, const char *a2, ...)
{
  return [a1 setFireHandler:];
}

id objc_msgSend_setOutputDevice_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setOutputDevice:options:completionHandler:];
}

id objc_msgSend_setTimerSource_(void *a1, const char *a2, ...)
{
  return [a1 setTimerSource:];
}

id objc_msgSend_sharedSystemScreenContext(void *a1, const char *a2, ...)
{
  return _[a1 sharedSystemScreenContext];
}

id objc_msgSend_skipWithOrder_(void *a1, const char *a2, ...)
{
  return [a1 skipWithOrder:];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_targetQueue(void *a1, const char *a2, ...)
{
  return _[a1 targetQueue];
}

id objc_msgSend_timerDidFire(void *a1, const char *a2, ...)
{
  return _[a1 timerDidFire];
}

id objc_msgSend_timerSource(void *a1, const char *a2, ...)
{
  return _[a1 timerSource];
}

id objc_msgSend_underlyingToken(void *a1, const char *a2, ...)
{
  return _[a1 underlyingToken];
}

id objc_msgSend_value_withObjCType_(void *a1, const char *a2, ...)
{
  return [a1 value:withObjCType:];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return [a1 valueForEntitlement:];
}