ValueMetadata *type metadata accessor for InitClientRequestContent.CodingKeys()
{
  return &type metadata for InitClientRequestContent.CodingKeys;
}

unint64_t sub_1000A5F64()
{
  unint64_t result = qword_1003EDA50;
  if (!qword_1003EDA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA50);
  }
  return result;
}

unint64_t sub_1000A5FBC()
{
  unint64_t result = qword_1003EDA58;
  if (!qword_1003EDA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA58);
  }
  return result;
}

unint64_t sub_1000A6014()
{
  unint64_t result = qword_1003EDA60;
  if (!qword_1003EDA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA60);
  }
  return result;
}

uint64_t sub_1000A6068(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000A619C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A61B0);
}

uint64_t sub_1000A61B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000A621C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A6230);
}

uint64_t sub_1000A6230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for InitEndpoint()
{
  uint64_t result = qword_1003EDAC0;
  if (!qword_1003EDAC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A62EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A6300);
}

uint64_t sub_1000A6300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000A636C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A6380);
}

uint64_t sub_1000A6380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000A63F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EDC40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_1000A7FF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v12, &qword_1003ED068);
  sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED068);
  v12[183] = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for RefreshClientRequestContent();
    v11[0] = 1;
    type metadata accessor for ClientContext();
    sub_100047114(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A65EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = type metadata accessor for ClientContext();
  __chkstk_darwin(v21);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100044014(&qword_1003EDC50);
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t refreshed = type metadata accessor for RefreshClientRequestContent();
  __chkstk_darwin(refreshed);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  v23 = a1;
  sub_100042524(a1, v11);
  sub_1000A7FF4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v23);
  }
  uint64_t v18 = refreshed;
  uint64_t v12 = v20;
  uint64_t v13 = (uint64_t)v10;
  v25[183] = 0;
  sub_100036EB0();
  uint64_t v14 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v25, (uint64_t)v24, &qword_1003ED068);
  uint64_t v17 = v13;
  sub_100013B50((uint64_t)v24, v13, &qword_1003ED068);
  v25[182] = 1;
  sub_100047114(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v15 = v17;
  sub_10004E45C((uint64_t)v5, v17 + *(int *)(v18 + 20));
  sub_1000A7BC4(v15, v19, (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
  sub_1000233E4((uint64_t)v23);
  return sub_1000A7C2C(v15, (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
}

uint64_t sub_1000A6958(uint64_t a1)
{
  unint64_t v2 = sub_1000A8048();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_1000A6994(uint64_t a1)
{
  unint64_t v2 = sub_1000A7FF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A69D0(uint64_t a1)
{
  unint64_t v2 = sub_1000A7FF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6A0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A65EC(a1, a2);
}

uint64_t sub_1000A6A24(void *a1)
{
  return sub_1000A63F0(a1);
}

uint64_t sub_1000A6A3C(uint64_t a1)
{
  v1[225] = a1;
  uint64_t v2 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v1[226] = v2;
  v1[227] = *(void *)(v2 - 8);
  v1[228] = swift_task_alloc();
  v1[229] = type metadata accessor for RefreshClientRequestContent();
  v1[230] = swift_task_alloc();
  v1[231] = swift_task_alloc();
  v1[232] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Account();
  v1[233] = v3;
  v1[234] = *(void *)(v3 - 8);
  v1[235] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v1[236] = swift_task_alloc();
  v1[237] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v1[238] = swift_task_alloc();
  v1[239] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v1[240] = swift_task_alloc();
  v1[241] = swift_task_alloc();
  return _swift_task_switch(sub_1000A6C60, 0, 0);
}

uint64_t sub_1000A6C60()
{
  uint64_t v1 = v0[239];
  uint64_t v17 = v0[238];
  uint64_t v2 = v0[237];
  uint64_t v3 = v0[236];
  uint64_t v4 = v0[235];
  uint64_t v5 = v0[234];
  uint64_t v6 = v0[233];
  uint64_t v7 = v0[225];
  v0[242] = sub_10004D088();
  uint64_t v8 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v2, 1, 1, v9);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v10(v4, v7, v6);
  sub_100013210(v2, v3, &qword_1003ED110);
  sub_100013210(v1, v17, &qword_1003F3B30);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[243] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000A6E24;
  uint64_t v12 = v0[241];
  uint64_t v13 = v0[238];
  uint64_t v14 = v0[236];
  uint64_t v15 = v0[235];
  return sub_1000AD580(v12, v15, v14, v13);
}

uint64_t sub_1000A6E24()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1928);
  uint64_t v3 = *(void *)(*v0 + 1920);
  uint64_t v4 = *(void *)(*v0 + 1912);
  uint64_t v5 = *(void *)(*v0 + 1896);
  uint64_t v8 = *v0;
  swift_task_dealloc();
  sub_10000A520(v5, &qword_1003ED110);
  sub_10000A520(v4, &qword_1003F3B30);
  sub_1000A7BC4(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 1952) = v6;
  *uint64_t v6 = v8;
  v6[1] = sub_1000A6FF0;
  return daemon.getter();
}

uint64_t sub_1000A6FF0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1960) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1968) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047114(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047114(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000A71CC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000A71CC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[247] = a1;
  v3[248] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000A7574, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[249] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1000A7360;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000A7360()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1976);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A7470, v1, 0);
}

uint64_t sub_1000A7470()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_1000A76F0, 0, 0);
}

uint64_t sub_1000A7574()
{
  uint64_t v1 = v0[241];
  uint64_t v2 = v0[240];
  uint64_t v3 = v0[234];
  uint64_t v4 = v0[233];
  uint64_t v5 = v0[225];
  swift_release();
  sub_1000A7C2C(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  sub_1000A7C2C(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000A76F0()
{
  v28 = v0;
  uint64_t v1 = v0[240];
  uint64_t v2 = v0[232];
  uint64_t v3 = v0[229];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v2, &qword_1003ED068);
  sub_10004E45C(v1, v2 + *(int *)(v3 + 20));
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v4 = v0[232];
  uint64_t v5 = v0[231];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040B4F8);
  sub_1000A7BC4(v4, v5, (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[231];
  if (v9)
  {
    uint64_t v11 = v0[230];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_1000A7BC4(v10, v11, (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
    uint64_t v13 = String.init<A>(describing:)();
    v0[224] = sub_100037004(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A7C2C(v10, (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Request content: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000A7C2C(v0[231], (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
  }

  uint64_t v15 = v0[248];
  v16 = (void *)v0[228];
  uint64_t v17 = v0[227];
  uint64_t v18 = v0[226];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  void *v16 = sub_1000CA550;
  v16[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v16, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v18);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_100047114(&qword_1003EDB90, (void (*)(uint64_t))type metadata accessor for RefreshClientRequestContent);
  uint64_t v19 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v21 = v20;
  swift_release();
  if (v15)
  {
    swift_errorRelease();
    uint64_t v19 = 0;
    unint64_t v21 = 0xF000000000000000;
  }
  uint64_t v22 = v0[241];
  uint64_t v23 = v0[232];
  (*(void (**)(void, void))(v0[234] + 8))(v0[225], v0[233]);
  sub_1000A7C2C(v23, (uint64_t (*)(void))type metadata accessor for RefreshClientRequestContent);
  sub_1000A7C2C(v22, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRetain();
  sub_1000287E4(v19, v21);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v24 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v25 = v0[242];
  return v24(v25, v19, v21);
}

uint64_t type metadata accessor for RefreshClientRequestContent()
{
  uint64_t result = qword_1003EDBF0;
  if (!qword_1003EDBF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A7BC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A7C2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A7C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A7CA0);
}

uint64_t sub_1000A7CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for ClientContext();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1000A7D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A7D70);
}

uint64_t sub_1000A7D70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 40) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ClientContext();
    os_log_type_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A7E18()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RefreshClientRequest()
{
  return &type metadata for RefreshClientRequest;
}

unint64_t sub_1000A7EC4()
{
  unint64_t result = qword_1003EDC28;
  if (!qword_1003EDC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC28);
  }
  return result;
}

uint64_t sub_1000A7F18(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100047114(&qword_1003EDC30, (void (*)(uint64_t))type metadata accessor for RefreshClientRequestContent);
  uint64_t result = sub_100047114(&qword_1003EDB90, (void (*)(uint64_t))type metadata accessor for RefreshClientRequestContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000A7FA0()
{
  unint64_t result = qword_1003EDC38;
  if (!qword_1003EDC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC38);
  }
  return result;
}

unint64_t sub_1000A7FF4()
{
  unint64_t result = qword_1003EDC48;
  if (!qword_1003EDC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC48);
  }
  return result;
}

unint64_t sub_1000A8048()
{
  unint64_t result = qword_1003EDC58;
  if (!qword_1003EDC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC58);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RefreshClientRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A8168);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RefreshClientRequestContent.CodingKeys()
{
  return &type metadata for RefreshClientRequestContent.CodingKeys;
}

unint64_t sub_1000A81A4()
{
  unint64_t result = qword_1003EDC60;
  if (!qword_1003EDC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC60);
  }
  return result;
}

unint64_t sub_1000A81FC()
{
  unint64_t result = qword_1003EDC68;
  if (!qword_1003EDC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC68);
  }
  return result;
}

unint64_t sub_1000A8254()
{
  unint64_t result = qword_1003EDC70;
  if (!qword_1003EDC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDC70);
  }
  return result;
}

uint64_t sub_1000A82A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A82BC);
}

uint64_t sub_1000A82BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000A8328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A833C);
}

uint64_t sub_1000A833C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000A83AC()
{
  uint64_t v1 = v0[237];
  uint64_t v2 = v0[236];
  uint64_t v3 = v0[230];
  uint64_t v4 = v0[229];
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  uint64_t v5 = type metadata accessor for LocationRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000A8560(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_100044014(&qword_1003EDDF0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000A92D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_100044014(&qword_1003ED418);
  sub_10008FBB8(&qword_1003ED438);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_10008FC1C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000A872C(uint64_t a1)
{
  unint64_t v2 = sub_1000A92D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A8768(uint64_t a1)
{
  unint64_t v2 = sub_1000A92D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A87A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000A9044(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1000A87D4(void *a1)
{
  return sub_1000A8560(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1000A87F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = type metadata accessor for ClientContext();
  __chkstk_darwin(v21);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100044014(&qword_1003EDDD8);
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LegacyLocationServerRequestContext();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v23 = a1;
  sub_100042524(a1, v11);
  sub_10004B778();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v23);
  }
  uint64_t v18 = v8;
  uint64_t v12 = v20;
  uint64_t v13 = (uint64_t)v10;
  v25[183] = 0;
  sub_100036EB0();
  uint64_t v14 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v25, (uint64_t)v24, &qword_1003ED068);
  uint64_t v17 = v13;
  sub_100013B50((uint64_t)v24, v13, &qword_1003ED068);
  v25[182] = 1;
  sub_100004BBC(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v15 = v17;
  sub_10004E45C((uint64_t)v5, v17 + *(int *)(v18 + 20));
  sub_100028734(v15, v19);
  sub_1000233E4((uint64_t)v23);
  return sub_10002814C(v15);
}

uint64_t sub_1000A8B44(uint64_t a1)
{
  unint64_t v2 = sub_10004B778();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A8B80(uint64_t a1)
{
  unint64_t v2 = sub_10004B778();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A8BBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A87F4(a1, a2);
}

uint64_t sub_1000A8BD4()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[3];
  (*(void (**)(void, void))(v0[16] + 8))(v0[4], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_bridgeObjectRelease();
  sub_1000440E8(0, 0xF000000000000000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000A8CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A8CF0);
}

uint64_t sub_1000A8CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for ClientContext();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1000A8DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A8DC0);
}

uint64_t sub_1000A8DC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 40) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ClientContext();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A8E68()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationServerRequest()
{
  return &type metadata for LocationServerRequest;
}

unint64_t sub_1000A8F14()
{
  unint64_t result = qword_1003EDDB0;
  if (!qword_1003EDDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDDB0);
  }
  return result;
}

uint64_t sub_1000A8F68(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100004BBC(&qword_1003EDDB8, (void (*)(uint64_t))type metadata accessor for LegacyLocationServerRequestContext);
  uint64_t result = sub_100004BBC(&qword_1003EDD18, (void (*)(uint64_t))type metadata accessor for LegacyLocationServerRequestContext);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000A8FF0()
{
  unint64_t result = qword_1003EDDC0;
  if (!qword_1003EDDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDDC0);
  }
  return result;
}

uint64_t sub_1000A9044(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EDDE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_100042524(a1, v7);
  sub_1000A92D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
    sub_1000440E8(0, 0xF000000000000000);
  }
  else
  {
    sub_100044014(&qword_1003ED418);
    char v14 = 0;
    sub_10008FBB8((unint64_t *)&qword_1003ED420);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_10008FB64();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    sub_1000287E4(v12, v13);
    sub_1000440E8(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    sub_1000287E4(v9, v10);
    sub_1000440E8(v9, v10);
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_1000440E8(v9, v10);
  }
  return v7;
}

unint64_t sub_1000A92D0()
{
  unint64_t result = qword_1003EDDE8;
  if (!qword_1003EDDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDDE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationServerRequest.CodingKeys()
{
  return &type metadata for LocationServerRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for LegacyLocationServerRequestContext.CodingKeys()
{
  return &type metadata for LegacyLocationServerRequestContext.CodingKeys;
}

unint64_t sub_1000A9370()
{
  unint64_t result = qword_1003EDDF8;
  if (!qword_1003EDDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDDF8);
  }
  return result;
}

unint64_t sub_1000A93C8()
{
  unint64_t result = qword_1003EDE00;
  if (!qword_1003EDE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE00);
  }
  return result;
}

unint64_t sub_1000A9420()
{
  unint64_t result = qword_1003EDE08;
  if (!qword_1003EDE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE08);
  }
  return result;
}

unint64_t sub_1000A9478()
{
  unint64_t result = qword_1003EDE10;
  if (!qword_1003EDE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE10);
  }
  return result;
}

unint64_t sub_1000A94D0()
{
  unint64_t result = qword_1003EDE18;
  if (!qword_1003EDE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE18);
  }
  return result;
}

unint64_t sub_1000A9528()
{
  unint64_t result = qword_1003EDE20;
  if (!qword_1003EDE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE20);
  }
  return result;
}

uint64_t ServerHandleType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x7265776F6C6C6F66;
  }
  if (a1 == 1) {
    return 0x6E69776F6C6C6F66;
  }
  return 0x4F676E69646E6570;
}

uint64_t sub_1000A95F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100102F28(*a1, *a2);
}

Swift::Int sub_1000A95FC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A96B0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000A9750()
{
  return Hasher._finalize()();
}

unint64_t sub_1000A9800@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s13findmylocated16ServerHandleTypeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000A9830(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE900000000000067;
  uint64_t v5 = 0x6E69776F6C6C6F66;
  if (v2 != 1)
  {
    uint64_t v5 = 0x4F676E69646E6570;
    unint64_t v4 = 0xED00007372656666;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7265776F6C6C6F66;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000A98A0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000A9900()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000A9990(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EDE88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100032140();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100013B50((uint64_t)(v3 + 3), (uint64_t)v13, &qword_1003EDE90);
    sub_100013B50((uint64_t)v13, (uint64_t)&v12, &qword_1003EDE90);
    char v11 = 2;
    sub_100044014(&qword_1003EDE78);
    sub_1000321F8(&qword_1003EDE98);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = v3[8];
    char v11 = 5;
    sub_100044014(&qword_1003ED230);
    sub_100032194((unint64_t *)&qword_1003ED238);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = v3[9];
    char v11 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = v3[17];
    char v11 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A9E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AB520(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A9E2C(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1000A9E38(uint64_t a1)
{
  unint64_t v2 = sub_100032140();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A9E74(uint64_t a1)
{
  unint64_t v2 = sub_100032140();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A9EB0(void *a1)
{
  return sub_1000A9990(a1);
}

unint64_t sub_1000A9F0C(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x6449726566666FLL;
      break;
    case 4:
      unint64_t result = 0x6954657461647075;
      break;
    case 5:
      unint64_t result = 0x73657269707865;
      break;
    case 6:
      unint64_t result = 0x644970756F7267;
      break;
    case 7:
      unint64_t result = 0x654D6D6F72467369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000AA028(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EDE48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1000AC428();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000AA278()
{
  return sub_1000A9F0C(*v0);
}

uint64_t sub_1000AA280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000ABBDC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AA2A8(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1000AA2B4(uint64_t a1)
{
  unint64_t v2 = sub_1000AC428();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AA2F0(uint64_t a1)
{
  unint64_t v2 = sub_1000AC428();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000AA32C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000ABF4C(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(unsigned char *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1000AA38C(void *a1)
{
  return sub_1000AA028(a1);
}

unint64_t sub_1000AA3A4(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x6974617469766E69;
      break;
    case 4:
      unint64_t result = 0x6954657461647075;
      break;
    case 5:
      unint64_t result = 0x76456E49796C6E6FLL;
      break;
    case 6:
      unint64_t result = 0x73696D7265506B74;
      break;
    case 7:
      unint64_t result = 0x654D6D6F72467369;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000AA508(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EDE60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_1000ACF44();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100013B50(v3 + 80, (uint64_t)v13, &qword_1003ED258);
    sub_100013B50((uint64_t)v13, (uint64_t)v11, &qword_1003ED258);
    HIBYTE(v10) = 8;
    sub_100044014(&qword_1003ED230);
    sub_100032194((unint64_t *)&qword_1003ED238);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100013B50(v3 + 88, (uint64_t)v12, &qword_1003ED258);
    sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED258);
    HIBYTE(v10) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000AA844()
{
  return sub_1000AA3A4(*v0);
}

uint64_t sub_1000AA84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AC47C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AA874(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1000AA880(uint64_t a1)
{
  unint64_t v2 = sub_1000ACF44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AA8BC(uint64_t a1)
{
  unint64_t v2 = sub_1000ACF44();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000AA8F8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000AC8E4(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1000AA944(void *a1)
{
  return sub_1000AA508(a1);
}

unint64_t _s13findmylocated16ServerHandleTypeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCE50, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000AA9D8()
{
  unint64_t result = qword_1003EDE28;
  if (!qword_1003EDE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerHandleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AAAF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerHandleType()
{
  return &type metadata for ServerHandleType;
}

unint64_t sub_1000AAB30()
{
  unint64_t result = qword_1003EDE30;
  if (!qword_1003EDE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE30);
  }
  return result;
}

uint64_t destroy for ServerPendingOfferFriend()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerPendingOfferFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerPendingOfferFriend(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for ServerPendingOfferFriend(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ServerPendingOfferFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerPendingOfferFriend(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerPendingOfferFriend(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerPendingOfferFriend()
{
  return &type metadata for ServerPendingOfferFriend;
}

uint64_t destroy for ServerFutureFriend()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFutureFriend(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFutureFriend(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFutureFriend()
{
  return &type metadata for ServerFutureFriend;
}

uint64_t assignWithCopy for ServerFriend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
  *(void *)(a1 + 104) = a2[13];
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v5;
  *(void *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  *(unsigned char *)(a1 + 145) = *((unsigned char *)a2 + 145);
  *(unsigned char *)(a1 + 146) = *((unsigned char *)a2 + 146);
  return a1;
}

uint64_t assignWithTake for ServerFriend(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFriend(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 147)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFriend(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 146) = 0;
    *(_WORD *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 147) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 147) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFriend()
{
  return &type metadata for ServerFriend;
}

uint64_t sub_1000AB520(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6954657461657263 && a2 == 0xEF706D617473656DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73657269707865 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100373ED0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7250646E65697266 && a2 == 0xEB00000000736665 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100373EF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100373F10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656369766544656DLL && a2 == 0xEF736C6961746544 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100373F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x8000000100373F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E65644968737570 && a2 == 0xEF73726569666974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100373F80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100373FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x654D6D6F72467369 && a2 == 0xEE00736567617373)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t sub_1000ABBDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100373E50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100373E70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6449726566666FLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73657269707865 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x654D6D6F72467369 && a2 == 0xEE00736567617373)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1000ABF4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EDE38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000AC428();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_1000233E4((uint64_t)a1);
    return v6;
  }
  else
  {
    char v45 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    char v44 = 1;
    swift_bridgeObjectRetain();
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v36 = v9;
    char v43 = 2;
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v37 = v13;
    uint64_t v34 = v14;
    char v42 = 3;
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v33 = v16;
    char v41 = 4;
    uint64_t v18 = v17;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v19;
    char v40 = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v22 = v21;
    char v39 = 6;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
    char v38 = 7;
    uint64_t v32 = v23;
    swift_bridgeObjectRetain();
    char v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000233E4((uint64_t)a1);
    uint64_t v25 = v32;
    swift_bridgeObjectRelease();
    uint64_t v26 = v18;
    swift_bridgeObjectRelease();
    uint64_t v27 = v33;
    swift_bridgeObjectRelease();
    uint64_t v28 = v37;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v36;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v35;
    *(void *)(a2 + 24) = v28;
    *(void *)(a2 + 32) = v34;
    *(void *)(a2 + 40) = v27;
    *(void *)(a2 + 48) = v31;
    *(void *)(a2 + 56) = v26;
    *(void *)(a2 + 64) = v20;
    *(void *)(a2 + 72) = v22;
    *(void *)(a2 + 80) = v30;
    *(void *)(a2 + 88) = v25;
    *(unsigned char *)(a2 + 96) = v24;
  }
  return result;
}

unint64_t sub_1000AC428()
{
  unint64_t result = qword_1003EDE40;
  if (!qword_1003EDE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE40);
  }
  return result;
}

uint64_t sub_1000AC47C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100373E50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100373E70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6974617469766E69 && a2 == 0xEE00747865546E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x76456E49796C6E6FLL && a2 == 0xEB00000000746E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73696D7265506B74 && a2 == 0xEC0000006E6F6973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x654D6D6F72467369 && a2 == 0xEE00736567617373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100373E90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100373EB0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_1000AC8E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EDE50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000ACF44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  LOBYTE(v47) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v47) = 1;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v45 = v11;
  uint64_t v41 = v12;
  uint64_t v42 = v9;
  LOBYTE(v47) = 2;
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v44 = v14;
  uint64_t v16 = v15;
  LOBYTE(v47) = 3;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v43 = v18;
  uint64_t v40 = v19;
  LOBYTE(v47) = 4;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v22;
  uint64_t v39 = v16;
  uint64_t v24 = v21;
  LOBYTE(v47) = 5;
  LODWORD(v21) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v47) = 6;
  int v38 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v47) = 7;
  int v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v25 = sub_100044014(&qword_1003ED230);
  char v46 = 8;
  uint64_t v36 = sub_100032194((unint64_t *)&qword_1003ED618);
  uint64_t v37 = v25;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v33 = v21;
  char v46 = 9;
  uint64_t v34 = v47;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v38 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v26 = v47;
  swift_bridgeObjectRetain();
  sub_1000233E4((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v27 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = v43;
  swift_bridgeObjectRelease();
  uint64_t v29 = v44;
  swift_bridgeObjectRelease();
  uint64_t v30 = v45;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v42;
  *(void *)(a2 + 8) = v30;
  *(void *)(a2 + 16) = v41;
  *(void *)(a2 + 24) = v29;
  *(void *)(a2 + 32) = v39;
  *(void *)(a2 + 40) = v28;
  *(void *)(a2 + 48) = v40;
  *(void *)(a2 + 56) = v24;
  *(void *)(a2 + 64) = v23;
  *(unsigned char *)(a2 + 72) = v33;
  *(unsigned char *)(a2 + 73) = v38;
  *(unsigned char *)(a2 + 74) = v35;
  *(void *)(a2 + 80) = v27;
  *(void *)(a2 + 88) = v26;
  return result;
}

unint64_t sub_1000ACF44()
{
  unint64_t result = qword_1003EDE58;
  if (!qword_1003EDE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE58);
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFriend.CodingKeys()
{
  return &type metadata for ServerFriend.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ServerFutureFriend.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ServerFutureFriend.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AD12CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFutureFriend.CodingKeys()
{
  return &type metadata for ServerFutureFriend.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ServerPendingOfferFriend.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AD230);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerPendingOfferFriend.CodingKeys()
{
  return &type metadata for ServerPendingOfferFriend.CodingKeys;
}

unint64_t sub_1000AD26C()
{
  unint64_t result = qword_1003EDEA0;
  if (!qword_1003EDEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDEA0);
  }
  return result;
}

unint64_t sub_1000AD2C4()
{
  unint64_t result = qword_1003EDEA8;
  if (!qword_1003EDEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDEA8);
  }
  return result;
}

unint64_t sub_1000AD31C()
{
  unint64_t result = qword_1003EDEB0;
  if (!qword_1003EDEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDEB0);
  }
  return result;
}

unint64_t sub_1000AD374()
{
  unint64_t result = qword_1003EDEB8;
  if (!qword_1003EDEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDEB8);
  }
  return result;
}

unint64_t sub_1000AD3CC()
{
  unint64_t result = qword_1003EDEC0;
  if (!qword_1003EDEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDEC0);
  }
  return result;
}

unint64_t sub_1000AD424()
{
  unint64_t result = qword_1003EDEC8;
  if (!qword_1003EDEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDEC8);
  }
  return result;
}

unint64_t sub_1000AD47C()
{
  unint64_t result = qword_1003EDED0;
  if (!qword_1003EDED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDED0);
  }
  return result;
}

unint64_t sub_1000AD4D4()
{
  unint64_t result = qword_1003EDED8;
  if (!qword_1003EDED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDED8);
  }
  return result;
}

unint64_t sub_1000AD52C()
{
  unint64_t result = qword_1003EDEE0;
  if (!qword_1003EDEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003EDEE0);
  }
  return result;
}

uint64_t sub_1000AD580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  sub_100044014(&qword_1003ED110);
  v4[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Account();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000AD70C, 0, 0);
}

uint64_t sub_1000AD70C()
{
  uint64_t v1 = (uint64_t *)v0[6];
  *uint64_t v1 = sub_100013C20(0);
  v1[1] = v2;
  id v3 = [self defaultWorkspace];
  if (!v3)
  {
    __break(1u);
    goto LABEL_18;
  }
  unsigned int v4 = v3;
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[15];
  uint64_t v8 = v0[6];
  NSString v9 = String._bridgeToObjectiveC()();
  unsigned __int8 v10 = [v4 applicationIsInstalled:v9];

  *(unsigned char *)(v8 + 16) = v10 ^ 1;
  *(void *)(v8 + 24) = static SystemInfo.uniqueDeviceID.getter();
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = static SystemInfo.deviceClass.getter();
  *(void *)(v8 + 48) = v12;
  *(unsigned char *)(v8 + 56) = 1;
  *(void *)(v8 + 64) = static SystemInfo.productType.getter();
  *(void *)(v8 + 72) = v13;
  *(void *)(v8 + 80) = static SystemInfo.osVersion.getter();
  *(void *)(v8 + 88) = v14;
  *(void *)(v8 + 96) = static SystemInfo.buildVersion.getter();
  *(void *)(v8 + 104) = v15;
  uint64_t v16 = (int *)type metadata accessor for ClientContext();
  v0[18] = v16;
  static SystemInfo.lockState.getter();
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  double v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  *(double *)(v8 + v16[13]) = v18 * 1000.0;
  uint64_t v19 = sub_10001679C();
  uint64_t v20 = (uint64_t *)(v8 + v16[14]);
  *uint64_t v20 = v19;
  v20[1] = v21;
  *(unsigned char *)(v8 + v16[15]) = 1;
  uint64_t v22 = (void *)(v8 + v16[16]);
  *uint64_t v22 = 3157559;
  v22[1] = 0xE300000000000000;
  uint64_t v23 = static SystemInfo.platform.getter();
  uint64_t v24 = (uint64_t *)(v8 + v16[17]);
  *uint64_t v24 = v23;
  v24[1] = v25;
  id v26 = [self sharedConfiguration];
  if (!v26)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v27 = v26;
  id v28 = [v26 countryCode];

  if (!v28)
  {
LABEL_19:
    __break(1u);
    return daemon.getter();
  }
  uint64_t v29 = v0[14];
  uint64_t v30 = v0[9];
  uint64_t v31 = v0[6];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  int v35 = (uint64_t *)(v31 + v16[18]);
  *int v35 = v32;
  v35[1] = v34;
  uint64_t v36 = static SystemInfo.regionCode.getter();
  uint64_t v37 = (uint64_t *)(v31 + v16[19]);
  *uint64_t v37 = v36;
  v37[1] = v38;
  uint64_t v39 = Account.icloudIdentifier.getter();
  uint64_t v40 = (uint64_t *)(v31 + v16[20]);
  *uint64_t v40 = v39;
  v40[1] = v41;
  sub_100013210(v30, v29, &qword_1003F3B30);
  uint64_t v42 = type metadata accessor for Handle();
  uint64_t v43 = *(void *)(v42 - 8);
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v29, 1, v42);
  uint64_t v45 = v0[14];
  if (v44 == 1)
  {
    sub_10000A520(v0[14], &qword_1003F3B30);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v46 = Handle.identifier.getter();
    uint64_t v47 = v48;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
  }
  (*(void (**)(void, void, void))(v0[12] + 16))(v0[13], v0[7], v0[11]);
  if (!v47)
  {
    uint64_t v46 = Account.icloudIdentifier.getter();
    uint64_t v47 = v49;
  }
  uint64_t v51 = v0[12];
  uint64_t v50 = v0[13];
  uint64_t v53 = v0[10];
  uint64_t v52 = v0[11];
  uint64_t v54 = v0[8];
  uint64_t v55 = v0[6];
  v56 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v0[19] = v56;
  v0[20] = (v51 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v56(v50, v52);
  v57 = (uint64_t *)(v55 + v16[22]);
  uint64_t *v57 = v46;
  v57[1] = v47;
  uint64_t v58 = v55 + v16[24];
  *(void *)uint64_t v58 = 0;
  *(unsigned char *)(v58 + 8) = 1;
  sub_100013210(v54, v53, &qword_1003ED110);
  uint64_t v59 = type metadata accessor for RequestOrigin();
  uint64_t v60 = *(void *)(v59 - 8);
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v53, 1, v59);
  uint64_t v62 = v0[10];
  if (v61 == 1)
  {
    sub_10000A520(v0[10], &qword_1003ED110);
  }
  else
  {
    uint64_t v63 = RequestOrigin.contextBundleApp.getter();
    uint64_t v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v59);
    if (v65)
    {
      uint64_t v66 = v16[23];
      *(void *)(v0[6] + v66) = v63;
      goto LABEL_14;
    }
  }
  uint64_t v67 = v0[6];
  uint64_t v68 = sub_100013C20(3);
  uint64_t v65 = v69;
  uint64_t v66 = v16[23];
  *(void *)(v67 + v66) = v68;
LABEL_14:
  uint64_t v70 = v0[6];
  *(void *)(v70 + v66 + 8) = v65;
  *(unsigned char *)(v70 + v16[25]) = 2;
  *(void *)(v70 + v16[26]) = 0;
  v71 = (void *)(v70 + v16[27]);
  void *v71 = 0;
  v71[1] = 0;
  v72 = (void *)(v70 + v16[28]);
  void *v72 = 0;
  v72[1] = 0;
  v73 = (void *)(v70 + v16[29]);
  void *v73 = 0;
  v73[1] = 0;
  v74 = (void *)swift_task_alloc();
  v0[21] = v74;
  void *v74 = v0;
  v74[1] = sub_1000ADC10;
  return daemon.getter();
}

uint64_t sub_1000ADC10(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 176) = a1;
  swift_task_dealloc();
  id v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 184) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004715C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004715C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *id v3 = v9;
  v3[1] = sub_1000ADDEC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000ADDEC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 192) = a1;
  *(void *)(v4 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000AE144;
    uint64_t v6 = 0;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_1000ADF24;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000ADF24()
{
  uint64_t v1 = (uint64_t *)(v0[24] + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken);
  uint64_t v2 = *v1;
  v0[26] = *v1;
  unint64_t v3 = v1[1];
  v0[27] = v3;
  sub_1000287E4(v2, v3);
  return _swift_task_switch(sub_1000ADFAC, 0, 0);
}

uint64_t sub_1000ADFAC()
{
  unint64_t v1 = v0[27];
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[19];
    uint64_t v3 = v0[11];
    uint64_t v5 = v0[8];
    uint64_t v4 = v0[9];
    uint64_t v6 = v0[7];
    swift_release();
    sub_10000A520(v4, &qword_1003F3B30);
    sub_10000A520(v5, &qword_1003ED110);
    v2(v6, v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    v0[2] = v0[26];
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[19];
    uint64_t v10 = v0[11];
    uint64_t v12 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v13 = v0[7];
    v0[3] = v1;
    sub_10004F4EC();
    uint64_t v7 = DataProtocol.hexString.getter();
    uint64_t v8 = v14;
    swift_release();
    sub_10000A520(v11, &qword_1003F3B30);
    sub_10000A520(v12, &qword_1003ED110);
    v9(v13, v10);
    sub_100044090(v0[2], v0[3]);
  }
  uint64_t v15 = (uint64_t *)(v0[6] + *(int *)(v0[18] + 84));
  *uint64_t v15 = v7;
  v15[1] = v8;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1000AE144()
{
  uint64_t v20 = v0;
  swift_release();
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7F8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[25];
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[7];
  if (v4)
  {
    uint64_t v18 = (void (*)(uint64_t, uint64_t))v0[19];
    uint64_t v17 = v0[11];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    v0[4] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v12 = String.init<A>(describing:)();
    v0[5] = sub_100037004(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ERROR: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_10000A520(v9, &qword_1003F3B30);
    sub_10000A520(v8, &qword_1003ED110);
    v18(v10, v17);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10000A520(v9, &qword_1003F3B30);
    sub_10000A520(v8, &qword_1003ED110);
    v6(v10, v7);
  }
  uint64_t v14 = (void *)(v0[6] + *(int *)(v0[18] + 84));
  *uint64_t v14 = 0;
  v14[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000AE42C()
{
  uint64_t v20 = v0;
  swift_release();
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7F8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[32];
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[26];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[7];
  if (v4)
  {
    uint64_t v18 = (void (*)(uint64_t, uint64_t))v0[26];
    uint64_t v17 = v0[18];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    v0[4] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v12 = String.init<A>(describing:)();
    v0[5] = sub_100037004(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ERROR: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_10000A520(v9, &qword_1003F3B30);
    sub_10000A520(v8, &qword_1003ED110);
    v18(v10, v17);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10000A520(v9, &qword_1003F3B30);
    sub_10000A520(v8, &qword_1003ED110);
    v6(v10, v7);
  }
  uint64_t v14 = (void *)(v0[6] + *(int *)(v0[25] + 84));
  *uint64_t v14 = 0;
  v14[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000AE77C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100044014(&qword_1003EDFF0);
  uint64_t v8 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = (int *)type metadata accessor for ClientContext();
  __chkstk_darwin(v75);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v73 = (uint64_t)a1;
  sub_100042524(a1, v13);
  sub_10004E560();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v74 = v2;
    LODWORD(v72) = 0;
    uint64_t result = sub_1000233E4(v73);
    int v69 = 0;
    LODWORD(v73) = 0;
    uint64_t v70 = 0;
    BOOL v71 = 0;
  }
  else
  {
    LOBYTE(v77) = 0;
    *(void *)uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 1) = v15;
    LOBYTE(v77) = 1;
    v12[16] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v77) = 2;
    *((void *)v12 + 3) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 4) = v16;
    LOBYTE(v77) = 3;
    *((void *)v12 + 5) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 6) = v17;
    LOBYTE(v77) = 4;
    v12[56] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v77) = 5;
    *((void *)v12 + 8) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 9) = v18;
    LOBYTE(v77) = 6;
    *((void *)v12 + 10) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 11) = v19;
    LOBYTE(v77) = 7;
    *((void *)v12 + 12) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 13) = v20;
    LOBYTE(v77) = 8;
    sub_10004715C(&qword_1003EE000, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v12[v75[12]], v7, v68);
    LOBYTE(v77) = 9;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    *(void *)&v12[v75[13]] = v21;
    LOBYTE(v77) = 10;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v23 = (uint64_t *)&v12[v75[14]];
    uint64_t *v23 = v22;
    v23[1] = v24;
    LOBYTE(v77) = 11;
    char v25 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    v12[v75[15]] = v25 & 1;
    LOBYTE(v77) = 12;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v27 = (uint64_t *)&v12[v75[16]];
    *uint64_t v27 = v26;
    v27[1] = v28;
    LOBYTE(v77) = 13;
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v30 = (uint64_t *)&v12[v75[17]];
    *uint64_t v30 = v29;
    v30[1] = v31;
    LOBYTE(v77) = 14;
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v33 = (uint64_t *)&v12[v75[18]];
    *uint64_t v33 = v32;
    v33[1] = v34;
    LOBYTE(v77) = 15;
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v36 = (uint64_t *)&v12[v75[19]];
    *uint64_t v36 = v35;
    v36[1] = v37;
    LOBYTE(v77) = 16;
    uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v39 = (uint64_t *)&v12[v75[20]];
    *uint64_t v39 = v38;
    v39[1] = v40;
    LOBYTE(v77) = 17;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v42 = (uint64_t *)&v12[v75[21]];
    *uint64_t v42 = v41;
    v42[1] = v43;
    LOBYTE(v77) = 18;
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v45 = (uint64_t *)&v12[v75[22]];
    *uint64_t v45 = v44;
    v45[1] = v46;
    LOBYTE(v77) = 19;
    uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v48 = (uint64_t *)&v12[v75[23]];
    *uint64_t v48 = v47;
    v48[1] = v49;
    LOBYTE(v77) = 20;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v74 = 0;
    uint64_t v51 = &v12[v75[24]];
    *(void *)uint64_t v51 = v50;
    v51[8] = v52 & 1;
    LOBYTE(v77) = 21;
    char v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v74 = 0;
    v12[v75[25]] = v53;
    sub_100044014(&qword_1003EDE78);
    char v76 = 22;
    sub_1000321F8(&qword_1003EDE80);
    uint64_t v54 = v74;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    BOOL v71 = v54 == 0;
    uint64_t v74 = v54;
    if (!v54)
    {
      *(void *)&v12[v75[26]] = v77;
      LOBYTE(v77) = 23;
      uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v74 = 0;
      v56 = (uint64_t *)&v12[v75[27]];
      uint64_t *v56 = v55;
      v56[1] = v57;
      LOBYTE(v77) = 24;
      uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v74 = 0;
      uint64_t v59 = (uint64_t *)&v12[v75[28]];
      *uint64_t v59 = v58;
      v59[1] = v60;
      LOBYTE(v77) = 25;
      uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v74 = 0;
      uint64_t v62 = v61;
      uint64_t v64 = v63;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v72);
      uint64_t v65 = &v12[v75[29]];
      *(void *)uint64_t v65 = v62;
      *((void *)v65 + 1) = v64;
      sub_1000B0250((uint64_t)v12, a2);
      sub_1000233E4(v73);
      return sub_1000B02B4((uint64_t)v12);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v72);
    uint64_t v70 = 0;
    sub_1000233E4(v73);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v69 = 1;
    LODWORD(v73) = 1;
    LODWORD(v72) = 1;
    (*(void (**)(char *, uint64_t))(v67 + 8))(&v12[v75[12]], v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v69)
    {
      uint64_t result = swift_bridgeObjectRelease();
      if (v73) {
        goto LABEL_12;
      }
LABEL_5:
      if (!v72) {
        goto LABEL_13;
      }
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      if (v71) {
        goto LABEL_14;
      }
LABEL_7:
      if (!v70) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
  }
  if (!v73) {
    goto LABEL_5;
  }
LABEL_12:
  uint64_t result = swift_bridgeObjectRelease();
  if (v72) {
    goto LABEL_6;
  }
LABEL_13:
  if (!v71) {
    goto LABEL_7;
  }
LABEL_14:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v70 & 1) == 0)
  {
LABEL_15:
    if (!HIDWORD(v70)) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_8:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v70 & 0x100000000) == 0) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AF454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000B0450(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AF47C(unsigned char *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_1000AF488(uint64_t a1)
{
  unint64_t v2 = sub_10004E560();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AF4C4(uint64_t a1)
{
  unint64_t v2 = sub_10004E560();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AF500@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AE77C(a1, a2);
}

void *sub_1000AF518(uint64_t a1, uint64_t *a2, int *a3)
{
  BOOL v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v63 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (void *)(v63 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    uint64_t v13 = a3[12];
    uint64_t v68 = (uint64_t)a2 + v13;
    uint64_t v70 = a1 + v13;
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66(v70, v68, v14);
    uint64_t v15 = a3[14];
    *(void *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v71 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v71;
    uint64_t v22 = a3[17];
    uint64_t v23 = a3[18];
    uint64_t v24 = (void *)((char *)v4 + v22);
    char v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v67 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v67;
    uint64_t v26 = (void *)((char *)v4 + v23);
    uint64_t v27 = (uint64_t *)((char *)a2 + v23);
    uint64_t v69 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v69;
    uint64_t v28 = a3[19];
    uint64_t v29 = a3[20];
    uint64_t v30 = (void *)((char *)v4 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (void *)((char *)v4 + v29);
    uint64_t v34 = (uint64_t *)((char *)a2 + v29);
    uint64_t v65 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v65;
    uint64_t v35 = a3[21];
    uint64_t v36 = a3[22];
    uint64_t v37 = (void *)((char *)v4 + v35);
    uint64_t v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = (void *)((char *)v4 + v36);
    uint64_t v41 = (uint64_t *)((char *)a2 + v36);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = a3[23];
    uint64_t v44 = a3[24];
    uint64_t v45 = (void *)((char *)v4 + v43);
    uint64_t v46 = (uint64_t *)((char *)a2 + v43);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = (char *)v4 + v44;
    uint64_t v49 = (uint64_t)a2 + v44;
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = *(unsigned char *)(v49 + 8);
    uint64_t v50 = a3[26];
    *((unsigned char *)v4 + a3[25]) = *((unsigned char *)a2 + a3[25]);
    *(void *)((char *)v4 + v50) = *(uint64_t *)((char *)a2 + v50);
    uint64_t v51 = a3[27];
    uint64_t v52 = a3[28];
    char v53 = (void *)((char *)v4 + v51);
    uint64_t v54 = (uint64_t *)((char *)a2 + v51);
    uint64_t v55 = v54[1];
    *char v53 = *v54;
    v53[1] = v55;
    v56 = (void *)((char *)v4 + v52);
    uint64_t v57 = (uint64_t *)((char *)a2 + v52);
    uint64_t v58 = v57[1];
    void *v56 = *v57;
    v56[1] = v58;
    uint64_t v59 = a3[29];
    uint64_t v60 = (void *)((char *)v4 + v59);
    uint64_t v61 = (uint64_t *)((char *)a2 + v59);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000AF80C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[12];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  uint64_t v10 = a3[14];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v13 = a3[16];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[17];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[18];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[19];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  void *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[20];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[21];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[22];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[23];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[24];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v40 = *v39;
  *(unsigned char *)(v38 + 8) = *((unsigned char *)v39 + 8);
  *(void *)uint64_t v38 = v40;
  *(unsigned char *)(a1 + a3[25]) = *(unsigned char *)(a2 + a3[25]);
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[27];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[28];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[29];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AFBCC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v7 = a3[12];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v10 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[26];
  *(unsigned char *)(a1 + a3[25]) = *(unsigned char *)(a2 + a3[25]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v20 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  return a1;
}

uint64_t sub_1000AFD44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[12];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[17];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[18];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *uint64_t v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[19];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[20];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[21];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[22];
  uint64_t v52 = (void *)(a1 + v51);
  char v53 = (uint64_t *)(a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[23];
  uint64_t v57 = (void *)(a1 + v56);
  uint64_t v58 = (uint64_t *)(a2 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  void *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[24];
  uint64_t v62 = a3[25];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = a2 + v61;
  *(void *)uint64_t v63 = *(void *)v64;
  *(unsigned char *)(v63 + 8) = *(unsigned char *)(v64 + 8);
  *(unsigned char *)(a1 + v62) = *(unsigned char *)(a2 + v62);
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[27];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (uint64_t *)(a2 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  *uint64_t v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = a3[28];
  uint64_t v71 = (void *)(a1 + v70);
  uint64_t v72 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[29];
  char v76 = (void *)(a1 + v75);
  uint64_t v77 = (uint64_t *)(a2 + v75);
  uint64_t v79 = *v77;
  uint64_t v78 = v77[1];
  *char v76 = v79;
  v76[1] = v78;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AFFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AFFE4);
}

uint64_t sub_1000AFFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B0094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B00A8);
}

uint64_t sub_1000B00A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000B0150()
{
  uint64_t result = type metadata accessor for SystemInfo.DeviceLockState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000B0250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B02B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for ClientContext.CodingKeys()
{
  return &type metadata for ClientContext.CodingKeys;
}

unint64_t sub_1000B034C()
{
  unint64_t result = qword_1003EE018;
  if (!qword_1003EE018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE018);
  }
  return result;
}

unint64_t sub_1000B03A4()
{
  unint64_t result = qword_1003EE020;
  if (!qword_1003EE020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE020);
  }
  return result;
}

unint64_t sub_1000B03FC()
{
  unint64_t result = qword_1003EE028;
  if (!qword_1003EE028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE028);
  }
  return result;
}

uint64_t sub_1000B0450(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D614E707061 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x707041464D467369 && a2 == 0xEF6465766F6D6552 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4455656369766564 && a2 == 0xEA00000000004449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C43656369766564 && a2 == 0xEB00000000737361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100373FC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x54746375646F7270 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x726556646C697562 && a2 == 0xEC0000006E6F6973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x74536B636F6C6E75 && a2 == 0xEB00000000657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x54746E6572727563 && a2 == 0xEB00000000656D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656E6F7A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x45676E69636E6566 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6973726556707061 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6E4964656E676973 && a2 == 0xEA00000000007341 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6E656B6F54737061 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x644972656C6C6163 && a2 == 0xEE00656C646E6148 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100373FE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100374000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100374020 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100374040 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100374060 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 25;
    }
    else {
      return 26;
    }
  }
}

uint64_t sub_1000B0F10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_100044014(&qword_1003EE220);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10002313C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000B1084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000B3F74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B10AC(uint64_t a1)
{
  unint64_t v2 = sub_10002313C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B10E8(uint64_t a1)
{
  unint64_t v2 = sub_10002313C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B1124(void *a1)
{
  return sub_1000B0F10(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000B1144(char *a1, char *a2)
{
  return sub_100103064(*a1, *a2);
}

Swift::Int sub_1000B1150()
{
  return Hasher._finalize()();
}

uint64_t sub_1000B1218()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000B12C8()
{
  return Hasher._finalize()();
}

unint64_t sub_1000B138C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B4048(*a1);
  *a2 = result;
  return result;
}

void sub_1000B13BC(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x6E6F697461636F6CLL;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "locationStatus");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 3:
      *(void *)a1 = 0x737574617473;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t sub_1000B1464@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B4048(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B148C(uint64_t a1)
{
  unint64_t v2 = sub_100030F9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B14C8(uint64_t a1)
{
  unint64_t v2 = sub_100030F9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B1504(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE200);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_100030F9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ServerLocation(0);
    v8[14] = 1;
    type metadata accessor for LegacyLocation(0);
    sub_100030FF0(&qword_1003EE208, (void (*)(uint64_t))type metadata accessor for LegacyLocation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000B1720(char a1)
{
  unint64_t result = 0x73736572646461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6564757469746C61;
      break;
    case 2:
      unint64_t result = 0x76654C726F6F6C66;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 5:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 6:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B1844(char a1)
{
  unint64_t result = 0x73736572646461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6564757469746C61;
      break;
    case 2:
      unint64_t result = 0x76654C726F6F6C66;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 5:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 6:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B1968(void *a1)
{
  return sub_1000B1504(a1);
}

uint64_t sub_1000B1980(unsigned __int8 *a1, char *a2)
{
  return sub_1001031F0(*a1, *a2);
}

Swift::Int sub_1000B198C()
{
  return sub_100103940();
}

uint64_t sub_1000B1998()
{
  return sub_1001036BC();
}

Swift::Int sub_1000B19A0()
{
  return sub_100103940();
}

unint64_t sub_1000B19A8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B4094(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000B19D8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000B1720(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000B1A04()
{
  return sub_1000B1844(*v0);
}

unint64_t sub_1000B1A0C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B4094(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B1A34(uint64_t a1)
{
  unint64_t v2 = sub_1000B1F64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B1A70(uint64_t a1)
{
  unint64_t v2 = sub_1000B1F64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LegacyLocation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = sub_100044014(&qword_1003ECAB8);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003EE030);
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LegacyLocation(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v42 = a1;
  sub_100042524(a1, v13);
  sub_1000B1F64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v42);
  }
  uint64_t v14 = v41;
  char v50 = 4;
  uint64_t v15 = v9;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = (int *)v10;
  uint64_t v17 = *(int *)(v10 + 32);
  uint64_t v18 = (uint64_t)v12;
  *(void *)&v12[v17] = v19;
  char v49 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = v7;
  *(void *)(v18 + v16[9]) = v21;
  char v48 = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v16[10];
  uint64_t v39 = v18;
  *(void *)(v18 + v22) = v23;
  type metadata accessor for PlaceMark();
  char v47 = 0;
  sub_100030FF0(&qword_1003EE040, (void (*)(uint64_t))&type metadata accessor for PlaceMark);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v24 = v39;
  sub_100013B50((uint64_t)v6, v39, &qword_1003ECAB8);
  char v46 = 1;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v26 = v24 + v16[5];
  *(void *)uint64_t v26 = v25;
  *(unsigned char *)(v26 + 8) = v27 & 1;
  char v45 = 2;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v29 = v24 + v16[6];
  *(void *)uint64_t v29 = v28;
  *(unsigned char *)(v29 + 8) = v30 & 1;
  char v44 = 3;
  uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v32 = v24 + v16[7];
  *(void *)uint64_t v32 = v31;
  *(unsigned char *)(v32 + 8) = v33 & 1;
  char v43 = 7;
  uint64_t v34 = v24;
  uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v24) = v36;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v15, v20);
  uint64_t v37 = v34 + v16[11];
  *(void *)uint64_t v37 = v35;
  *(unsigned char *)(v37 + 8) = v24 & 1;
  sub_1000B1FB8(v34, v40);
  sub_1000233E4((uint64_t)v42);
  return sub_1000B201C(v34);
}

unint64_t sub_1000B1F64()
{
  unint64_t result = qword_1003EE038;
  if (!qword_1003EE038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE038);
  }
  return result;
}

uint64_t sub_1000B1FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B201C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LegacyLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t LegacyLocation.description.getter()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014(&qword_1003ECAB8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(124);
  v8._countAndFlagsBits = 0x3A73736572646461;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  sub_100013210(v0, (uint64_t)v7, &qword_1003ECAB8);
  uint64_t v9 = type metadata accessor for PlaceMark();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
  {
    sub_10000A520((uint64_t)v7, &qword_1003ECAB8);
    uint64_t v11 = 0;
    uint64_t v12 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v11 = PlaceMark.description.getter();
    uint64_t v12 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  }
  v14._countAndFlagsBits = v11;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x64757469746C610ALL;
  v15._object = (void *)0xEA00000000003A65;
  String.append(_:)(v15);
  uint64_t v16 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v17 = v0 + v16[5];
  uint64_t v18 = *(void *)v17;
  LOBYTE(v17) = *(unsigned char *)(v17 + 8);
  uint64_t v41 = v18;
  char v42 = v17;
  sub_100044014(&qword_1003EE048);
  v19._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x654C726F6F6C660ALL;
  v20._object = (void *)0xEC0000003A6C6576;
  String.append(_:)(v20);
  uint64_t v21 = v0 + v16[6];
  uint64_t v22 = *(void *)v21;
  LOBYTE(v21) = *(unsigned char *)(v21 + 8);
  uint64_t v41 = v22;
  char v42 = v21;
  sub_100044014(&qword_1003ECD20);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0xD000000000000014;
  v24._object = (void *)0x8000000100374080;
  String.append(_:)(v24);
  uint64_t v25 = v0 + v16[7];
  uint64_t v26 = *(void *)v25;
  LOBYTE(v25) = *(unsigned char *)(v25 + 8);
  uint64_t v41 = v26;
  char v42 = v25;
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x80000001003740A0;
  v28._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v28);
  uint64_t v29 = v0 + v16[11];
  uint64_t v30 = *(void *)v29;
  LOBYTE(v29) = *(unsigned char *)(v29 + 8);
  uint64_t v41 = v30;
  char v42 = v29;
  v31._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0x6475746974616C0ALL;
  v32._object = (void *)0xEA00000000003A65;
  String.append(_:)(v32);
  Double.write<A>(to:)();
  v33._countAndFlagsBits = 0x757469676E6F6C0ALL;
  v33._object = (void *)0xEB000000003A6564;
  String.append(_:)(v33);
  Double.write<A>(to:)();
  v34._object = (void *)0xEB000000003A706DLL;
  v34._countAndFlagsBits = 0x617473656D69740ALL;
  String.append(_:)(v34);
  Double.write<A>(to:)();
  v35._countAndFlagsBits = 0x3A657461640ALL;
  v35._object = (void *)0xE600000000000000;
  String.append(_:)(v35);
  Date.init(timeIntervalSince1970:)();
  uint64_t v36 = Date.localISO8601.getter();
  uint64_t v38 = v37;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v39._countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  return v43;
}

BOOL static LegacyLocation.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyLocation(0);
  return *(double *)(a1 + *(int *)(v4 + 40)) < *(double *)(a2 + *(int *)(v4 + 40));
}

void LegacyLocation.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PlaceMark();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ECAB8);
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013210(v1, (uint64_t)v8, &qword_1003ECAB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    sub_100030FF0(&qword_1003EE050, (void (*)(uint64_t))&type metadata accessor for PlaceMark);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v9 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v10 = v1 + v9[5];
  if (*(unsigned char *)(v10 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v11 = *(void *)v10;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    Hasher._combine(_:)(v12);
  }
  uint64_t v13 = v1 + v9[6];
  if (*(unsigned char *)(v13 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v14 = *(void *)v13;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  uint64_t v15 = v1 + v9[7];
  if (*(unsigned char *)(v15 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v16 = *(void *)v15;
    Hasher._combine(_:)(1u);
    if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v17 = v16;
    }
    else {
      Swift::UInt64 v17 = 0;
    }
    Hasher._combine(_:)(v17);
  }
  if ((*(void *)(v1 + v9[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = *(void *)(v1 + v9[8]);
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((*(void *)(v1 + v9[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *(void *)(v1 + v9[9]);
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((*(void *)(v1 + v9[10]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = *(void *)(v1 + v9[10]);
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  uint64_t v21 = v1 + v9[11];
  if (*(unsigned char *)(v21 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v22 = *(void *)v21;
    Hasher._combine(_:)(1u);
    if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v23 = v22;
    }
    else {
      Swift::UInt64 v23 = 0;
    }
    Hasher._combine(_:)(v23);
  }
}

uint64_t LegacyLocation.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE058);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1000B1F64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for PlaceMark();
  sub_100030FF0(&qword_1003EE060, (void (*)(uint64_t))&type metadata accessor for PlaceMark);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for LegacyLocation(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int LegacyLocation.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B2BA4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000B2BE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LegacyLocation.init(from:)(a1, a2);
}

uint64_t sub_1000B2BF8(void *a1)
{
  return LegacyLocation.encode(to:)(a1);
}

BOOL sub_1000B2C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + *(int *)(a3 + 40)) < *(double *)(a2 + *(int *)(a3 + 40));
}

BOOL sub_1000B2C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + *(int *)(a3 + 40)) >= *(double *)(a1 + *(int *)(a3 + 40));
}

BOOL sub_1000B2C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + *(int *)(a3 + 40)) >= *(double *)(a2 + *(int *)(a3 + 40));
}

BOOL sub_1000B2C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + *(int *)(a3 + 40)) < *(double *)(a1 + *(int *)(a3 + 40));
}

BOOL _s13findmylocated14LegacyLocationV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlaceMark();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v48 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003EE138);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100044014(&qword_1003ECAB8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  Swift::UInt v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  Swift::UInt64 v17 = (char *)&v47 - v16;
  __chkstk_darwin(v15);
  Swift::UInt64 v19 = (char *)&v47 - v18;
  uint64_t v49 = a1;
  sub_100013210(a1, (uint64_t)&v47 - v18, &qword_1003ECAB8);
  uint64_t v50 = a2;
  sub_100013210(a2, (uint64_t)v17, &qword_1003ECAB8);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_100013210((uint64_t)v19, (uint64_t)v10, &qword_1003ECAB8);
  sub_100013210((uint64_t)v17, v20, &qword_1003ECAB8);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) != 1)
  {
    sub_100013210((uint64_t)v10, (uint64_t)v14, &qword_1003ECAB8);
    if (v21(v20, 1, v4) != 1)
    {
      Swift::UInt64 v22 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v48, v20, v4);
      sub_100030FF0(&qword_1003EE140, (void (*)(uint64_t))&type metadata accessor for PlaceMark);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v22, v4);
      sub_10000A520((uint64_t)v17, &qword_1003ECAB8);
      sub_10000A520((uint64_t)v19, &qword_1003ECAB8);
      v24(v14, v4);
      sub_10000A520((uint64_t)v10, &qword_1003ECAB8);
      if ((v23 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
    sub_10000A520((uint64_t)v17, &qword_1003ECAB8);
    sub_10000A520((uint64_t)v19, &qword_1003ECAB8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    sub_10000A520((uint64_t)v10, &qword_1003EE138);
    return 0;
  }
  sub_10000A520((uint64_t)v17, &qword_1003ECAB8);
  sub_10000A520((uint64_t)v19, &qword_1003ECAB8);
  if (v21(v20, 1, v4) != 1) {
    goto LABEL_6;
  }
  sub_10000A520((uint64_t)v10, &qword_1003ECAB8);
LABEL_8:
  uint64_t v25 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v26 = v25[5];
  Swift::String v27 = (double *)(v49 + v26);
  char v28 = *(unsigned char *)(v49 + v26 + 8);
  uint64_t v29 = (double *)(v50 + v26);
  int v30 = *(unsigned __int8 *)(v50 + v26 + 8);
  if (v28)
  {
    if (!v30) {
      return 0;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      return 0;
    }
  }
  uint64_t v31 = v25[6];
  Swift::String v32 = (void *)(v49 + v31);
  char v33 = *(unsigned char *)(v49 + v31 + 8);
  Swift::String v34 = (void *)(v50 + v31);
  int v35 = *(unsigned __int8 *)(v50 + v31 + 8);
  if (v33)
  {
    if (!v35) {
      return 0;
    }
  }
  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if (v35) {
      return 0;
    }
  }
  uint64_t v36 = v25[7];
  uint64_t v37 = (double *)(v49 + v36);
  char v38 = *(unsigned char *)(v49 + v36 + 8);
  Swift::String v39 = (double *)(v50 + v36);
  int v40 = *(unsigned __int8 *)(v50 + v36 + 8);
  if (v38)
  {
    if (!v40) {
      return 0;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      return 0;
    }
  }
  if (*(double *)(v49 + v25[8]) != *(double *)(v50 + v25[8])
    || *(double *)(v49 + v25[9]) != *(double *)(v50 + v25[9])
    || *(double *)(v49 + v25[10]) != *(double *)(v50 + v25[10]))
  {
    return 0;
  }
  uint64_t v41 = v25[11];
  char v42 = (double *)(v49 + v41);
  char v43 = *(unsigned char *)(v49 + v41 + 8);
  unint64_t v44 = (double *)(v50 + v41);
  char v45 = *(unsigned char *)(v50 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44) {
      char v45 = 1;
    }
    return (v45 & 1) == 0;
  }
  return (v45 & 1) != 0;
}

uint64_t sub_1000B314C()
{
  return sub_100030FF0(&qword_1003EE068, (void (*)(uint64_t))type metadata accessor for LegacyLocation);
}

uint64_t *initializeBufferWithCopyOfBuffer for LegacyLocation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PlaceMark();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100044014(&qword_1003ECAB8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v11;
    Swift::UInt v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    unsigned char v13[8] = v14[8];
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    Swift::UInt64 v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)Swift::UInt64 v19 = *(void *)v20;
    v19[8] = v20[8];
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    uint64_t v21 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    uint64_t v22 = a3[11];
    char v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    *(void *)char v23 = *(void *)v24;
    v23[8] = v24[8];
  }
  return a1;
}

uint64_t destroy for LegacyLocation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaceMark();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

char *initializeWithCopy for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PlaceMark();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100044014(&qword_1003ECAB8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  char v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  Swift::UInt v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  unsigned char v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v19 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  uint64_t v20 = a3[11];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  return a1;
}

char *assignWithCopy for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PlaceMark();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100044014(&qword_1003ECAB8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  Swift::UInt v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  unsigned char v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  uint64_t v24 = a3[11];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  return a1;
}

char *initializeWithTake for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PlaceMark();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100044014(&qword_1003ECAB8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  char v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  Swift::UInt v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  unsigned char v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v19 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  uint64_t v20 = a3[11];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  return a1;
}

char *assignWithTake for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PlaceMark();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100044014(&qword_1003ECAB8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  Swift::UInt v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)Swift::UInt v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  uint64_t v22 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}

uint64_t sub_1000B3BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECAB8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000B3C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECAB8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_1000B3CA0()
{
  sub_1000B4F94(319, (unint64_t *)&unk_1003EE0D8, (void (*)(uint64_t))&type metadata accessor for PlaceMark);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for LegacyLocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B3E34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyLocation.CodingKeys()
{
  return &type metadata for LegacyLocation.CodingKeys;
}

unint64_t sub_1000B3E70()
{
  unint64_t result = qword_1003EE120;
  if (!qword_1003EE120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE120);
  }
  return result;
}

unint64_t sub_1000B3EC8()
{
  unint64_t result = qword_1003EE128;
  if (!qword_1003EE128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE128);
  }
  return result;
}

unint64_t sub_1000B3F20()
{
  unint64_t result = qword_1003EE130;
  if (!qword_1003EE130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE130);
  }
  return result;
}

uint64_t sub_1000B3F74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1000B4048(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCF38, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000B4094(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCFB8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void *sub_1000B40E0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  int v9 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1000B201C((uint64_t)v7);
      goto LABEL_7;
    }
    uint64_t v18 = type metadata accessor for PlaceMark();
    uint64_t v62 = *(void *)(v18 - 8);
    uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
    int v20 = v19(v7, 1, v18);
    int v21 = v19(v8, 1, v18);
    if (v20)
    {
      if (!v21)
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v8, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v7, 0, 1, v18);
LABEL_16:
        uint64_t v39 = v9[5];
        int v40 = &v7[v39];
        uint64_t v41 = &v8[v39];
        uint64_t v42 = *(void *)v41;
        v40[8] = v41[8];
        *(void *)int v40 = v42;
        uint64_t v43 = v9[6];
        unint64_t v44 = &v7[v43];
        char v45 = &v8[v43];
        uint64_t v46 = *(void *)v45;
        v44[8] = v45[8];
        *(void *)unint64_t v44 = v46;
        uint64_t v47 = v9[7];
        char v48 = &v7[v47];
        uint64_t v49 = &v8[v47];
        uint64_t v50 = *(void *)v49;
        v48[8] = v49[8];
        *(void *)char v48 = v50;
        *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
        *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
        *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
        uint64_t v51 = v9[11];
        uint64_t v52 = &v7[v51];
        char v53 = &v8[v51];
        uint64_t v54 = *(void *)v53;
        v52[8] = v53[8];
        *(void *)uint64_t v52 = v54;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v21)
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 24))(v7, v8, v18);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v18);
    }
    uint64_t v38 = sub_100044014(&qword_1003ECAB8);
    memcpy(v7, v8, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_16;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v17 = sub_100044014(&qword_1003ECFE0);
    memcpy(v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_17;
  }
  uint64_t v14 = type metadata accessor for PlaceMark();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14))
  {
    uint64_t v16 = sub_100044014(&qword_1003ECAB8);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v7, v8, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  }
  uint64_t v22 = v9[5];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = v9[6];
  uint64_t v27 = &v7[v26];
  char v28 = &v8[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = v9[7];
  uint64_t v31 = &v7[v30];
  Swift::String v32 = &v8[v30];
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)uint64_t v31 = v33;
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  uint64_t v34 = v9[11];
  int v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  uint64_t v37 = *(void *)v36;
  v35[8] = v36[8];
  *(void *)int v35 = v37;
  (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  uint64_t v55 = a3[6];
  uint64_t v56 = (void *)((char *)a1 + v55);
  uint64_t v57 = (void *)((char *)a2 + v55);
  void *v56 = *v57;
  v56[1] = v57[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[7];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000B45E4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  int v9 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100044014(&qword_1003ECFE0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for PlaceMark();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12))
    {
      uint64_t v14 = sub_100044014(&qword_1003ECAB8);
      memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v7, v8, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
    }
    uint64_t v15 = v9[5];
    uint64_t v16 = &v7[v15];
    uint64_t v17 = &v8[v15];
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = v9[6];
    uint64_t v19 = &v7[v18];
    int v20 = &v8[v18];
    v19[8] = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = v9[7];
    uint64_t v22 = &v7[v21];
    uint64_t v23 = &v8[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
    *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
    *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
    uint64_t v24 = v9[11];
    uint64_t v25 = &v7[v24];
    uint64_t v26 = &v8[v24];
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v27 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  return a1;
}

void *sub_1000B4878(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  int v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_1000B201C((uint64_t)v8);
      goto LABEL_7;
    }
    uint64_t v19 = type metadata accessor for PlaceMark();
    uint64_t v59 = *(void *)(v19 - 8);
    int v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
    int v21 = v20(v8, 1, v19);
    int v22 = v20(v9, 1, v19);
    if (v21)
    {
      if (!v22)
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v8, v9, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v8, 0, 1, v19);
LABEL_16:
        uint64_t v36 = v10[5];
        uint64_t v37 = &v8[v36];
        uint64_t v38 = &v9[v36];
        *(void *)uint64_t v37 = *(void *)v38;
        v37[8] = v38[8];
        uint64_t v39 = v10[6];
        int v40 = &v8[v39];
        uint64_t v41 = &v9[v39];
        v40[8] = v41[8];
        *(void *)int v40 = *(void *)v41;
        uint64_t v42 = v10[7];
        uint64_t v43 = &v8[v42];
        unint64_t v44 = &v9[v42];
        *(void *)uint64_t v43 = *(void *)v44;
        v43[8] = v44[8];
        *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
        *(void *)&v8[v10[9]] = *(void *)&v9[v10[9]];
        *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
        uint64_t v45 = v10[11];
        uint64_t v46 = &v8[v45];
        uint64_t v47 = &v9[v45];
        v46[8] = v47[8];
        *(void *)uint64_t v46 = *(void *)v47;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v22)
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v8, v9, v19);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v8, v19);
    }
    uint64_t v35 = sub_100044014(&qword_1003ECAB8);
    memcpy(v8, v9, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v18 = sub_100044014(&qword_1003ECFE0);
    memcpy(v8, v9, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_17;
  }
  uint64_t v15 = type metadata accessor for PlaceMark();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    uint64_t v17 = sub_100044014(&qword_1003ECAB8);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v8, v9, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  uint64_t v23 = v10[5];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = v10[6];
  uint64_t v27 = &v8[v26];
  char v28 = &v9[v26];
  v27[8] = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  uint64_t v29 = v10[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
  *(void *)&v8[v10[9]] = *(void *)&v9[v10[9]];
  *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
  uint64_t v32 = v10[11];
  uint64_t v33 = &v8[v32];
  uint64_t v34 = &v9[v32];
  v33[8] = v34[8];
  *(void *)uint64_t v33 = *(void *)v34;
  (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
LABEL_17:
  uint64_t v48 = a3[6];
  uint64_t v49 = (void *)((char *)a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *uint64_t v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[7];
  uint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B4D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4D60);
}

uint64_t sub_1000B4D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100044014(&qword_1003ECFE0);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B4E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4E28);
}

uint64_t sub_1000B4E28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100044014(&qword_1003ECFE0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000B4ED4()
{
  sub_1000B4F94(319, (unint64_t *)&unk_1003EE1B0, (void (*)(uint64_t))type metadata accessor for LegacyLocation);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000B4F94(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *assignWithCopy for ServerLocationInProgress(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ServerLocationInProgress(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ServerLocationInProgress()
{
  return &type metadata for ServerLocationInProgress;
}

ValueMetadata *type metadata accessor for ServerLocationInProgress.CodingKeys()
{
  return &type metadata for ServerLocationInProgress.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerLocation.CodingKeys()
{
  return &type metadata for ServerLocation.CodingKeys;
}

unint64_t sub_1000B5124()
{
  unint64_t result = qword_1003EE228;
  if (!qword_1003EE228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE228);
  }
  return result;
}

unint64_t sub_1000B517C()
{
  unint64_t result = qword_1003EE230;
  if (!qword_1003EE230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE230);
  }
  return result;
}

unint64_t sub_1000B51D4()
{
  unint64_t result = qword_1003EE238;
  if (!qword_1003EE238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE238);
  }
  return result;
}

unint64_t sub_1000B522C()
{
  unint64_t result = qword_1003EE240;
  if (!qword_1003EE240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE240);
  }
  return result;
}

unint64_t sub_1000B5284()
{
  unint64_t result = qword_1003EE248;
  if (!qword_1003EE248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE248);
  }
  return result;
}

unint64_t sub_1000B52DC()
{
  unint64_t result = qword_1003EE250;
  if (!qword_1003EE250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE250);
  }
  return result;
}

void *sub_1000B5330()
{
  if (v0[68])
  {
    uint64_t v1 = (void *)v0[68];
  }
  else
  {
    sub_100013B50((uint64_t)(v0 + 69), (uint64_t)v9, &qword_1003EE288);
    sub_100013B50((uint64_t)v9, (uint64_t)&v10, &qword_1003EE288);
    if (!v10)
    {
      sub_100013B50((uint64_t)(v0 + 70), (uint64_t)v8, &qword_1003EE288);
      sub_100013B50((uint64_t)v8, (uint64_t)&v11, &qword_1003EE288);
      if (!v11 && !v0[71]) {
        return 0;
      }
    }
    uint64_t v1 = _swiftEmptyArrayStorage;
  }
  if (v0[69]) {
    Swift::String v2 = (void *)v0[69];
  }
  else {
    Swift::String v2 = _swiftEmptyArrayStorage;
  }
  if (v0[70]) {
    unint64_t v3 = (void *)v0[70];
  }
  else {
    unint64_t v3 = _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (void *)v0[71];
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  uint64_t v7 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10012D2F8((uint64_t)v2);
  sub_10012D2F8((uint64_t)v3);
  sub_10012D2F8((uint64_t)v5);
  return v7;
}

uint64_t sub_1000B5494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BBEF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B54BC(uint64_t a1)
{
  unint64_t v2 = sub_1000239F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B54F8(uint64_t a1)
{
  unint64_t v2 = sub_1000239F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B5534(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1000BBCB0((uint64_t)v9, (uint64_t)v10) & 1;
}

uint64_t sub_1000B5590()
{
  return sub_100033B78();
}

uint64_t sub_1000B55D4(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE440);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_10002E5D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000B57C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BC290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B57E8(uint64_t a1)
{
  unint64_t v2 = sub_10002E5D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B5824(uint64_t a1)
{
  unint64_t v2 = sub_10002E5D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B5860(void *a1)
{
  return sub_1000B55D4(a1);
}

uint64_t sub_1000B58CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BC4BC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B58F4(unsigned char *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_1000B5900(uint64_t a1)
{
  unint64_t v2 = sub_1000242C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B593C(uint64_t a1)
{
  unint64_t v2 = sub_1000242C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000B5978(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  char v11[8] = a1[8];
  long long v3 = a1[3];
  v11[2] = a1[2];
  v11[3] = v3;
  long long v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  long long v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  long long v6 = a2[7];
  v12[6] = a2[6];
  v12[7] = v6;
  unsigned char v12[8] = a2[8];
  long long v7 = a2[3];
  void v12[2] = a2[2];
  v12[3] = v7;
  long long v8 = a2[5];
  v12[4] = a2[4];
  v12[5] = v8;
  long long v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  return sub_1000BBB28((uint64_t)v11, (uint64_t)v12);
}

uint64_t sub_1000B59FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BCCD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B5A24(uint64_t a1)
{
  unint64_t v2 = sub_100021E28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B5A60(uint64_t a1)
{
  unint64_t v2 = sub_100021E28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B5A9C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_1000B5B40(unsigned __int8 *a1, char *a2)
{
  return sub_100102AC8(*a1, *a2);
}

Swift::Int sub_1000B5B4C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000B5C34()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000B5D04()
{
  return Hasher._finalize()();
}

unint64_t sub_1000B5DE8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000BCDDC(*a1);
  *a2 = result;
  return result;
}

void sub_1000B5E18(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE900000000000070;
  uint64_t v3 = 0x614D737574617473;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006564;
      uint64_t v3 = 0x6F43737574617473;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "requestTokens");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 3:
      *(void *)a1 = 7107189;
      *(void *)(a1 + 8) = 0xE300000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1000B5EC0()
{
  uint64_t result = 0x614D737574617473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6F43737574617473;
      break;
    case 2:
      uint64_t result = 0x5474736575716572;
      break;
    case 3:
      uint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B5F5C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000BCDDC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B5F84(uint64_t a1)
{
  unint64_t v2 = sub_1000C12F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B5FC0(uint64_t a1)
{
  unint64_t v2 = sub_1000C12F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t *sub_1000B5FFC@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = result[1];
  uint64_t v5 = HIBYTE(v4) & 0xF;
  uint64_t v6 = *result & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(v4) & 0xF;
  }
  else {
    uint64_t v7 = *result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    goto LABEL_48;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)sub_100362910(v3, v4, 10);
    char v11 = v25;
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0) {
      long long v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      long long v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t result = (uint64_t *)sub_1003628F8(v8, v6, 10);
    uint64_t v9 = (uint64_t)result;
    char v11 = v10 & 1;
LABEL_44:
    if ((v11 & 1) == 0)
    {
      unint64_t result = (uint64_t *)sub_100036DB8(v9);
      if (result == 21) {
        char v21 = 0;
      }
      else {
        char v21 = (char)result;
      }
      goto LABEL_49;
    }
LABEL_48:
    char v21 = 11;
LABEL_49:
    *a2 = v21;
    return result;
  }
  v26[0] = *result;
  v26[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v3 == 43)
  {
    if (!v5) {
      goto LABEL_59;
    }
    if (v5 == 1 || (BYTE1(v3) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v9 = (BYTE1(v3) - 48);
    if (v5 != 2)
    {
      if ((BYTE2(v3) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v9 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
      uint64_t v12 = v5 - 3;
      if (v12)
      {
        int v13 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          unsigned int v14 = *v13 - 48;
          if (v14 > 9) {
            goto LABEL_31;
          }
          uint64_t v15 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
            goto LABEL_31;
          }
          uint64_t v9 = v15 + v14;
          if (__OFADD__(v15, v14)) {
            goto LABEL_31;
          }
          char v11 = 0;
          ++v13;
          if (!--v12) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    char v11 = 0;
    goto LABEL_44;
  }
  if (v3 != 45)
  {
    if (!v5 || (v3 - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v9 = (v3 - 48);
    if (v5 != 1)
    {
      if ((BYTE1(v3) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v9 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
      uint64_t v16 = v5 - 2;
      if (v16)
      {
        uint64_t v17 = (unsigned __int8 *)v26 + 2;
        while (1)
        {
          unsigned int v18 = *v17 - 48;
          if (v18 > 9) {
            goto LABEL_31;
          }
          uint64_t v19 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
            goto LABEL_31;
          }
          uint64_t v9 = v19 + v18;
          if (__OFADD__(v19, v18)) {
            goto LABEL_31;
          }
          char v11 = 0;
          ++v17;
          if (!--v16) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(v3) - 48) <= 9u)
    {
      if (v5 == 2)
      {
        char v11 = 0;
        uint64_t v9 = -(uint64_t)(BYTE1(v3) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(v3) - 48) <= 9u)
      {
        uint64_t v9 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
        uint64_t v20 = v5 - 3;
        if (!v20) {
          goto LABEL_43;
        }
        int v22 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            break;
          }
          uint64_t v24 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
            break;
          }
          uint64_t v9 = v24 - v23;
          if (__OFSUB__(v24, v23)) {
            break;
          }
          char v11 = 0;
          ++v22;
          if (!--v20) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = 0;
    char v11 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

unint64_t sub_1000B62F8(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7972746E756F63;
      break;
    case 2:
      unint64_t result = 0x437972746E756F63;
      break;
    case 3:
    case 13:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x726464416C6C7566;
      break;
    case 5:
      unint64_t result = 0x7974696C61636F6CLL;
      break;
    case 6:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 7:
      unint64_t result = 0x65646F4374736F70;
      break;
    case 8:
      unint64_t result = 0x736573696D657270;
      break;
    case 9:
      unint64_t result = 0x64644174726F6873;
      break;
    case 10:
      unint64_t result = 0x646F436574617473;
      break;
    case 11:
      unint64_t result = 0x6441746565727473;
      break;
    case 12:
      unint64_t result = 0x614E746565727473;
      break;
    case 14:
      unint64_t result = 0x6C61636F4C627573;
      break;
    default:
      return result;
  }
  return result;
}

double sub_1000B6500@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000BCE28(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1000B6548()
{
  return sub_1000BBE0C(*(void *)v0, *(unsigned char *)(v0 + 16));
}

unint64_t sub_1000B6554()
{
  return sub_1000B62F8(*v0);
}

uint64_t sub_1000B655C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BD488(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B6584(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1000B6590(uint64_t a1)
{
  unint64_t v2 = sub_1000C0EEC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B65CC(uint64_t a1)
{
  unint64_t v2 = sub_1000C0EEC();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000B6608@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000BDB38(a1, (uint64_t)v11);
  if (!v2)
  {
    long long v5 = v11[13];
    *(_OWORD *)(a2 + 192) = v11[12];
    *(_OWORD *)(a2 + 208) = v5;
    *(void *)(a2 + 224) = v12;
    long long v6 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v6;
    long long v7 = v11[11];
    *(_OWORD *)(a2 + 160) = v11[10];
    *(_OWORD *)(a2 + 176) = v7;
    long long v8 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v8;
    long long v9 = v11[7];
    *(_OWORD *)(a2 + 96) = v11[6];
    *(_OWORD *)(a2 + 112) = v9;
    long long v10 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + 16) = v10;
    __n128 result = (__n128)v11[3];
    *(_OWORD *)(a2 + 32) = v11[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1000B6698(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100044014(&qword_1003EE290);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = (int *)type metadata accessor for FenceRecord();
  uint64_t v8 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B8C1C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_1000B8C84((uint64_t)v6);
  }
  int v40 = v2 + 53;
  sub_1000B8CE4((uint64_t)v6, (uint64_t)v10);
  uint64_t v12 = &v10[v7[5]];
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v2[48] = v14;
  v2[49] = v13;
  uint64_t v15 = &v10[v7[10]];
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *((void *)v15 + 1);
  uint64_t v18 = *((void *)v15 + 2);
  uint64_t v20 = *((void *)v15 + 5);
  uint64_t v19 = *((void *)v15 + 6);
  uint64_t v21 = *((void *)v15 + 8);
  uint64_t v39 = *((void *)v15 + 7);
  uint64_t v22 = *((void *)v15 + 11);
  uint64_t v42 = v18;
  long long v38 = *(_OWORD *)(v15 + 24);
  long long v43 = v38;
  uint64_t v44 = v20;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = v16;
  uint64_t v49 = v17;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v54 = v19;
  uint64_t v55 = v39;
  long long v37 = *(_OWORD *)(v15 + 72);
  long long v57 = v37;
  uint64_t v36 = v21;
  uint64_t v56 = v21;
  uint64_t v58 = v22;
  long long v60 = 0u;
  long long v59 = 0u;
  nullsub_1(&v42);
  sub_100013B50((uint64_t)(v2 + 16), (uint64_t)v61, &qword_1003ECD28);
  uint64_t v23 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000C1220(v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
  sub_100013B50((uint64_t)&v42, (uint64_t)(v2 + 16), &qword_1003ECD28);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v36;
  }
  else
  {
    uint64_t v25 = v2[2];
    uint64_t v26 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t v24 = v26;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v2[2] = v25;
  v2[3] = v24;
  uint64_t v27 = *(void **)&v10[v7[6]];
  [v27 coordinate];
  v2[56] = v28;
  uint64_t v29 = v40;
  v40[32] = 0;
  [v27 coordinate];
  v2[52] = v30;
  *uint64_t v29 = 0;
  [v27 horizontalAccuracy];
  v2[61] = v31;
  v29[72] = 0;
  uint64_t v41 = *(void *)&v10[v7[7]];
  uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v34 = v33;
  sub_1000B8D48((uint64_t)v10);
  uint64_t result = swift_bridgeObjectRelease();
  v2[54] = v32;
  v2[55] = v34;
  return result;
}

uint64_t sub_1000B69F0()
{
  sub_100044014(&qword_1003EE3F0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10036AF40;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v138._countAndFlagsBits = 0xD000000000000013;
  v138._object = (void *)0x8000000100374520;
  uint64_t v2 = v0[1];
  if (v2)
  {
    uint64_t v3 = *v0;
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v3;
    v134[1] = v2;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5._countAndFlagsBits = 7104878;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
  }
  v6._countAndFlagsBits = 39;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  object = v138._object;
  *(void *)(v1 + 32) = v138._countAndFlagsBits;
  *(void *)(v1 + 40) = object;
  v138._countAndFlagsBits = 0x3A73736572646461;
  v138._object = (void *)0xEA00000000002720;
  uint64_t v8 = v0[3];
  if (v8)
  {
    uint64_t v9 = v0[2];
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v9;
    v134[1] = v8;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11._countAndFlagsBits = 7104878;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
  }
  v12._countAndFlagsBits = 39;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = v138._object;
  *(void *)(v1 + 48) = v138._countAndFlagsBits;
  *(void *)(v1 + 56) = v13;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v138._countAndFlagsBits = 0x64726F6365526B63;
  v138._object = (void *)0xEF27203A656D614ELL;
  uint64_t v14 = v0[5];
  if (v14)
  {
    uint64_t v15 = v0[4];
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v15;
    v134[1] = v14;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17._countAndFlagsBits = 7104878;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
  }
  v18._countAndFlagsBits = 39;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v138._object;
  *(void *)(v1 + 64) = v138._countAndFlagsBits;
  *(void *)(v1 + 72) = v19;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v138._countAndFlagsBits = 0xD000000000000018;
  v138._object = (void *)0x8000000100374540;
  uint64_t v20 = v0[7];
  if (v20)
  {
    uint64_t v21 = v0[6];
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v21;
    v134[1] = v20;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23._countAndFlagsBits = 7104878;
    v23._object = (void *)0xE300000000000000;
    String.append(_:)(v23);
  }
  v24._countAndFlagsBits = 39;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  uint64_t v25 = v138._object;
  *(void *)(v1 + 80) = v138._countAndFlagsBits;
  *(void *)(v1 + 88) = v25;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)&v138, "createdById: '");
  HIBYTE(v138._object) = -18;
  uint64_t v26 = v0[9];
  if (v26)
  {
    uint64_t v27 = v0[8];
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v27;
    v134[1] = v26;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v29._countAndFlagsBits = 7104878;
    v29._object = (void *)0xE300000000000000;
    String.append(_:)(v29);
  }
  v30._countAndFlagsBits = 39;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v138._object;
  *(void *)(v1 + 96) = v138._countAndFlagsBits;
  *(void *)(v1 + 104) = v31;
  v138._countAndFlagsBits = 0x203A736C69616D65;
  v138._object = (void *)0xE900000000000027;
  uint64_t v32 = v0[10];
  if (v32)
  {
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v32;
    swift_bridgeObjectRetain_n();
    sub_100044014(&qword_1003ED230);
    _print_unlocked<A, B>(_:_:)();
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    String.append(_:)(v33);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34._countAndFlagsBits = 7104878;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
  }
  v35._countAndFlagsBits = 39;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v138._object;
  *(void *)(v1 + 112) = v138._countAndFlagsBits;
  *(void *)(v1 + 120) = v36;
  v138._countAndFlagsBits = 0x3A644965636E6566;
  v138._object = (void *)0xEA00000000002720;
  uint64_t v37 = v0[12];
  if (v37)
  {
    uint64_t v38 = v0[11];
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v38;
    v134[1] = v37;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    String.append(_:)(v39);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v40._countAndFlagsBits = 7104878;
    v40._object = (void *)0xE300000000000000;
    String.append(_:)(v40);
  }
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  uint64_t v42 = v138._object;
  *(void *)(v1 + 128) = v138._countAndFlagsBits;
  *(void *)(v1 + 136) = v42;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)&v138, "followerIds: '");
  HIBYTE(v138._object) = -18;
  uint64_t v43 = v0[13];
  if (v43)
  {
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    v134[0] = v43;
    swift_bridgeObjectRetain_n();
    sub_100044014(&qword_1003ED230);
    _print_unlocked<A, B>(_:_:)();
    v44._countAndFlagsBits = 0;
    v44._object = (void *)0xE000000000000000;
    String.append(_:)(v44);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45._countAndFlagsBits = 7104878;
    v45._object = (void *)0xE300000000000000;
    String.append(_:)(v45);
  }
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  uint64_t v47 = v138._object;
  *(void *)(v1 + 144) = v138._countAndFlagsBits;
  *(void *)(v1 + 152) = v47;
  uint64_t v139 = 0x6449646E65697266;
  unint64_t v140 = 0xEB0000000027203ALL;
  unint64_t v48 = v0[15];
  if (v48)
  {
    uint64_t v136 = v0[14];
    unint64_t v137 = v48;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v49._countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    String.append(_:)(v49);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v50._countAndFlagsBits = 7104878;
    v50._object = (void *)0xE300000000000000;
    String.append(_:)(v50);
  }
  v51._countAndFlagsBits = 39;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  unint64_t v52 = v140;
  *(void *)(v1 + 160) = v139;
  *(void *)(v1 + 168) = v52;
  v138._countAndFlagsBits = 0;
  v138._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v135, "fullAddress: '");
  HIBYTE(v135[1]) = -18;
  sub_100013B50((uint64_t)(v0 + 16), (uint64_t)&v136, &qword_1003ECD28);
  sub_100013B50((uint64_t)&v136, (uint64_t)&v138, &qword_1003ECD28);
  if (sub_10006289C((uint64_t)&v138) == 1)
  {
    v53._countAndFlagsBits = 7104878;
    v53._object = (void *)0xE300000000000000;
    String.append(_:)(v53);
  }
  else
  {
    sub_100013B50((uint64_t)&v136, (uint64_t)v134, &qword_1003ECD28);
    sub_1000C0F40((uint64_t)v134);
    String.init<A>(describing:)();
    swift_bridgeObjectRetain();
    _print_unlocked<A, B>(_:_:)();
    v54._countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    String.append(_:)(v54);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  v55._countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  uint64_t v56 = v135[1];
  *(void *)(v1 + 176) = v135[0];
  *(void *)(v1 + 184) = v56;
  v134[0] = 0x27203A6469;
  v134[1] = 0xE500000000000000;
  uint64_t v57 = v0[46];
  if (v57)
  {
    v135[0] = v0[45];
    v135[1] = v57;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v58._countAndFlagsBits = 0;
    v58._object = (void *)0xE000000000000000;
    String.append(_:)(v58);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v59._countAndFlagsBits = 7104878;
    v59._object = (void *)0xE300000000000000;
    String.append(_:)(v59);
  }
  v60._countAndFlagsBits = 39;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  uint64_t v61 = v134[1];
  *(void *)(v1 + 192) = v134[0];
  *(void *)(v1 + 200) = v61;
  strcpy((char *)v134, "isOn: '");
  v134[1] = 0xE700000000000000;
  int v62 = *((unsigned __int8 *)v0 + 376);
  if (v62 == 2)
  {
    v63._countAndFlagsBits = 7104878;
    v63._object = (void *)0xE300000000000000;
    String.append(_:)(v63);
  }
  else
  {
    LOBYTE(v135[0]) = v62 & 1;
    _print_unlocked<A, B>(_:_:)();
    v64._countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
  }
  v65._countAndFlagsBits = 39;
  v65._object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  uint64_t v66 = v134[1];
  *(void *)(v1 + 208) = v134[0];
  *(void *)(v1 + 216) = v66;
  strcpy((char *)v134, "label: '");
  BYTE1(v134[1]) = 0;
  WORD1(v134[1]) = 0;
  HIDWORD(v134[1]) = -402653184;
  uint64_t v67 = v0[49];
  if (v67)
  {
    v135[0] = v0[48];
    v135[1] = v67;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v68._countAndFlagsBits = 0;
    v68._object = (void *)0xE000000000000000;
    String.append(_:)(v68);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v69._countAndFlagsBits = 7104878;
    v69._object = (void *)0xE300000000000000;
    String.append(_:)(v69);
  }
  v70._countAndFlagsBits = 39;
  v70._object = (void *)0xE100000000000000;
  String.append(_:)(v70);
  uint64_t v71 = v134[1];
  *(void *)(v1 + 224) = v134[0];
  *(void *)(v1 + 232) = v71;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v134[0] = 0xD000000000000017;
  v134[1] = 0x8000000100374560;
  uint64_t v72 = v0[51];
  if (v72)
  {
    v135[0] = v0[50];
    v135[1] = v72;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v73._countAndFlagsBits = 0;
    v73._object = (void *)0xE000000000000000;
    String.append(_:)(v73);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v74._countAndFlagsBits = 7104878;
    v74._object = (void *)0xE300000000000000;
    String.append(_:)(v74);
  }
  v75._countAndFlagsBits = 39;
  v75._object = (void *)0xE100000000000000;
  String.append(_:)(v75);
  uint64_t v76 = v134[1];
  *(void *)(v1 + 240) = v134[0];
  *(void *)(v1 + 248) = v76;
  strcpy((char *)v134, "latitude: '");
  HIDWORD(v134[1]) = -352321536;
  if (v0[53])
  {
    v77._countAndFlagsBits = 7104878;
    v77._object = (void *)0xE300000000000000;
    String.append(_:)(v77);
  }
  else
  {
    v135[0] = v0[52];
    _print_unlocked<A, B>(_:_:)();
    v78._countAndFlagsBits = 0;
    v78._object = (void *)0xE000000000000000;
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
  }
  v79._countAndFlagsBits = 39;
  v79._object = (void *)0xE100000000000000;
  String.append(_:)(v79);
  uint64_t v80 = v134[1];
  *(void *)(v1 + 256) = v134[0];
  *(void *)(v1 + 264) = v80;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v134[0] = 0x6E6F697461636F6CLL;
  v134[1] = 0xEF27203A65707954;
  uint64_t v81 = v0[55];
  if (v81)
  {
    v135[0] = v0[54];
    v135[1] = v81;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v82._countAndFlagsBits = 0;
    v82._object = (void *)0xE000000000000000;
    String.append(_:)(v82);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v83._countAndFlagsBits = 7104878;
    v83._object = (void *)0xE300000000000000;
    String.append(_:)(v83);
  }
  v84._countAndFlagsBits = 39;
  v84._object = (void *)0xE100000000000000;
  String.append(_:)(v84);
  uint64_t v85 = v134[1];
  *(void *)(v1 + 272) = v134[0];
  *(void *)(v1 + 280) = v85;
  strcpy((char *)v134, "longitude: '");
  BYTE5(v134[1]) = 0;
  HIWORD(v134[1]) = -5120;
  if (v0[57])
  {
    v86._countAndFlagsBits = 7104878;
    v86._object = (void *)0xE300000000000000;
    String.append(_:)(v86);
  }
  else
  {
    v135[0] = v0[56];
    _print_unlocked<A, B>(_:_:)();
    v87._countAndFlagsBits = 0;
    v87._object = (void *)0xE000000000000000;
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
  }
  v88._countAndFlagsBits = 39;
  v88._object = (void *)0xE100000000000000;
  String.append(_:)(v88);
  uint64_t v89 = v134[1];
  *(void *)(v1 + 288) = v134[0];
  *(void *)(v1 + 296) = v89;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v134, "onetimeonly: '");
  HIBYTE(v134[1]) = -18;
  int v90 = *((unsigned __int8 *)v0 + 457);
  if (v90 == 2)
  {
    v91._countAndFlagsBits = 7104878;
    v91._object = (void *)0xE300000000000000;
    String.append(_:)(v91);
  }
  else
  {
    LOBYTE(v135[0]) = v90 & 1;
    _print_unlocked<A, B>(_:_:)();
    v92._countAndFlagsBits = 0;
    v92._object = (void *)0xE000000000000000;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
  }
  v93._countAndFlagsBits = 39;
  v93._object = (void *)0xE100000000000000;
  String.append(_:)(v93);
  uint64_t v94 = v134[1];
  *(void *)(v1 + 304) = v134[0];
  *(void *)(v1 + 312) = v94;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v134[0] = 0x6D754E656E6F6870;
  v134[1] = 0xEF27203A73726562;
  if (v0[58])
  {
    v135[0] = v0[58];
    swift_bridgeObjectRetain_n();
    sub_100044014(&qword_1003ED230);
    _print_unlocked<A, B>(_:_:)();
    v95._countAndFlagsBits = 0;
    v95._object = (void *)0xE000000000000000;
    String.append(_:)(v95);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v96._countAndFlagsBits = 7104878;
    v96._object = (void *)0xE300000000000000;
    String.append(_:)(v96);
  }
  v97._countAndFlagsBits = 39;
  v97._object = (void *)0xE100000000000000;
  String.append(_:)(v97);
  uint64_t v98 = v134[1];
  *(void *)(v1 + 320) = v134[0];
  *(void *)(v1 + 328) = v98;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v134[0] = 0xD000000000000010;
  v134[1] = 0x8000000100374580;
  uint64_t v99 = v0[60];
  if (v99)
  {
    v135[0] = v0[59];
    v135[1] = v99;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v100._countAndFlagsBits = 0;
    v100._object = (void *)0xE000000000000000;
    String.append(_:)(v100);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v101._countAndFlagsBits = 7104878;
    v101._object = (void *)0xE300000000000000;
    String.append(_:)(v101);
  }
  v102._countAndFlagsBits = 39;
  v102._object = (void *)0xE100000000000000;
  String.append(_:)(v102);
  uint64_t v103 = v134[1];
  *(void *)(v1 + 336) = v134[0];
  *(void *)(v1 + 344) = v103;
  strcpy((char *)v134, "radius: '");
  WORD1(v134[1]) = 0;
  HIDWORD(v134[1]) = -385875968;
  if (v0[62])
  {
    v104._countAndFlagsBits = 7104878;
    v104._object = (void *)0xE300000000000000;
    String.append(_:)(v104);
  }
  else
  {
    v135[0] = v0[61];
    _print_unlocked<A, B>(_:_:)();
    v105._countAndFlagsBits = 0;
    v105._object = (void *)0xE000000000000000;
    String.append(_:)(v105);
    swift_bridgeObjectRelease();
  }
  v106._countAndFlagsBits = 39;
  v106._object = (void *)0xE100000000000000;
  String.append(_:)(v106);
  uint64_t v107 = v134[1];
  *(void *)(v1 + 352) = v134[0];
  *(void *)(v1 + 360) = v107;
  strcpy((char *)v134, "status: '");
  WORD1(v134[1]) = 0;
  HIDWORD(v134[1]) = -385875968;
  uint64_t v108 = v0[64];
  if (v108)
  {
    v135[0] = v0[63];
    v135[1] = v108;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v109._countAndFlagsBits = 0;
    v109._object = (void *)0xE000000000000000;
    String.append(_:)(v109);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v110._countAndFlagsBits = 7104878;
    v110._object = (void *)0xE300000000000000;
    String.append(_:)(v110);
  }
  v111._countAndFlagsBits = 39;
  v111._object = (void *)0xE100000000000000;
  String.append(_:)(v111);
  uint64_t v112 = v134[1];
  *(void *)(v1 + 368) = v134[0];
  *(void *)(v1 + 376) = v112;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v134, "streetName: '");
  HIWORD(v134[1]) = -4864;
  uint64_t v113 = v0[66];
  if (v113)
  {
    v135[0] = v0[65];
    v135[1] = v113;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v114._countAndFlagsBits = 0;
    v114._object = (void *)0xE000000000000000;
    String.append(_:)(v114);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v115._countAndFlagsBits = 7104878;
    v115._object = (void *)0xE300000000000000;
    String.append(_:)(v115);
  }
  v116._countAndFlagsBits = 39;
  v116._object = (void *)0xE100000000000000;
  String.append(_:)(v116);
  uint64_t v117 = v134[1];
  *(void *)(v1 + 384) = v134[0];
  *(void *)(v1 + 392) = v117;
  strcpy((char *)v134, "trigger: '");
  BYTE3(v134[1]) = 0;
  HIDWORD(v134[1]) = -369098752;
  uint64_t v118 = v0[68];
  if (v118)
  {
    v135[0] = v0[67];
    v135[1] = v118;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v119._countAndFlagsBits = 0;
    v119._object = (void *)0xE000000000000000;
    String.append(_:)(v119);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v120._countAndFlagsBits = 7104878;
    v120._object = (void *)0xE300000000000000;
    String.append(_:)(v120);
  }
  v121._countAndFlagsBits = 39;
  v121._object = (void *)0xE100000000000000;
  String.append(_:)(v121);
  uint64_t v122 = v134[1];
  *(void *)(v1 + 400) = v134[0];
  *(void *)(v1 + 408) = v122;
  strcpy((char *)v134, "type: '");
  v134[1] = 0xE700000000000000;
  uint64_t v123 = v0[70];
  if (v123)
  {
    v135[0] = v0[69];
    v135[1] = v123;
    swift_bridgeObjectRetain_n();
    _print_unlocked<A, B>(_:_:)();
    v124._countAndFlagsBits = 0;
    v124._object = (void *)0xE000000000000000;
    String.append(_:)(v124);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v125._countAndFlagsBits = 7104878;
    v125._object = (void *)0xE300000000000000;
    String.append(_:)(v125);
  }
  v126._countAndFlagsBits = 39;
  v126._object = (void *)0xE100000000000000;
  String.append(_:)(v126);
  uint64_t v127 = v134[1];
  *(void *)(v1 + 416) = v134[0];
  *(void *)(v1 + 424) = v127;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v134[0] = 0xD000000000000012;
  v134[1] = 0x80000001003745A0;
  if (v0[72])
  {
    v128._countAndFlagsBits = 7104878;
    v128._object = (void *)0xE300000000000000;
    String.append(_:)(v128);
  }
  else
  {
    v135[0] = v0[71];
    _print_unlocked<A, B>(_:_:)();
    v129._countAndFlagsBits = 0;
    v129._object = (void *)0xE000000000000000;
    String.append(_:)(v129);
    swift_bridgeObjectRelease();
  }
  v130._countAndFlagsBits = 39;
  v130._object = (void *)0xE100000000000000;
  String.append(_:)(v130);
  uint64_t v131 = v134[1];
  *(void *)(v1 + 432) = v134[0];
  *(void *)(v1 + 440) = v131;
  v134[0] = v1;
  sub_100044014(&qword_1003ED230);
  sub_1000C129C();
  uint64_t v132 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v132;
}

unint64_t sub_1000B7F00(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73736572646461;
      break;
    case 2:
      unint64_t result = 0x64726F6365526B63;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x4264657461657263;
      break;
    case 5:
      unint64_t result = 0x736C69616D65;
      break;
    case 6:
      unint64_t result = 0x644965636E6566;
      break;
    case 7:
      unint64_t result = 0x7265776F6C6C6F66;
      break;
    case 8:
      unint64_t result = 0x6449646E65697266;
      break;
    case 9:
      unint64_t result = 0x726464416C6C7566;
      break;
    case 10:
      unint64_t result = 25705;
      break;
    case 11:
      unint64_t result = 1850700649;
      break;
    case 12:
      unint64_t result = 0x6C6562616CLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 15:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 16:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 17:
      unint64_t result = 0x6F656D6974656E6FLL;
      break;
    case 18:
      unint64_t result = 0x6D754E656E6F6870;
      break;
    case 19:
      unint64_t result = 0x6441797474657270;
      break;
    case 20:
      unint64_t result = 0x737569646172;
      break;
    case 21:
      unint64_t result = 0x737574617473;
      break;
    case 22:
      unint64_t result = 0x614E746565727473;
      break;
    case 23:
      unint64_t result = 0x72656767697274;
      break;
    case 24:
      unint64_t result = 1701869940;
      break;
    case 25:
      unint64_t result = 0x6954657461647075;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B8228(char a1)
{
  unint64_t result = 0x6F666E49796DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73656369766564;
      break;
    case 2:
      unint64_t result = 0x7366657270;
      break;
    case 3:
      unint64_t result = 0x7265776F6C6C6F66;
      break;
    case 4:
      unint64_t result = 0x6E69776F6C6C6F66;
      break;
    case 5:
    case 6:
      unint64_t result = 0x6F46657275747566;
      break;
    case 7:
      unint64_t result = 0x4F676E69646E6570;
      break;
    case 8:
      unint64_t result = 0x52646E616D6D6F63;
      break;
    case 9:
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 11:
      unint64_t result = 0x6174536863746566;
      break;
    case 12:
      unint64_t result = 0x6F43726576726573;
      break;
    case 13:
      unint64_t result = 0x6769666E6F63;
      break;
    case 15:
      unint64_t result = 0xD000000000000015;
      break;
    case 16:
      unint64_t result = 0x7365636E6546796DLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B84C4()
{
  return sub_1000B7F00(*v0);
}

uint64_t sub_1000B84CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BE92C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B84F4(uint64_t a1)
{
  unint64_t v2 = sub_1000C1178();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8530(uint64_t a1)
{
  unint64_t v2 = sub_1000C1178();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000B856C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000BF40C(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x241uLL);
  }
  return result;
}

uint64_t sub_1000B85C0()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_1000B69F0();
}

uint64_t sub_1000B85FC(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1000B8228(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1000B8228(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000B8688()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000B8228(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000B86EC()
{
  sub_1000B8228(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000B8740()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000B8228(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000B87A0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000C0AF0();
  *a1 = result;
  return result;
}

unint64_t sub_1000B87D0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000B8228(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B87FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000C0AF0();
  *a1 = result;
  return result;
}

void sub_1000B8824(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1000B8830(uint64_t a1)
{
  unint64_t v2 = sub_100036D10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B886C(uint64_t a1)
{
  unint64_t v2 = sub_100036D10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B88A8()
{
  sub_100044014(&qword_1003EE360);
  sub_100044014(&qword_1003EE298);
  sub_10003676C(&qword_1003EE368, &qword_1003EE360, (void (*)(void))sub_1000C0E44);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  return v1;
}

uint64_t sub_1000B8BB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B8BE0()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_10003338C();
}

uint64_t sub_1000B8C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003EE290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B8C84(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EE290);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B8CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B8D48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FenceRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for ServerMyInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ServerMyInfo()
{
  return &type metadata for ServerMyInfo;
}

uint64_t destroy for ServerFence.FullAddress()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ServerFence.FullAddress(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  uint64_t v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  uint64_t v13 = a2[21];
  a1[20] = a2[20];
  a1[21] = v13;
  uint64_t v14 = a2[23];
  a1[22] = a2[22];
  a1[23] = v14;
  uint64_t v15 = a2[25];
  a1[24] = a2[24];
  a1[25] = v15;
  uint64_t v16 = a2[27];
  a1[26] = a2[26];
  a1[27] = v16;
  a1[28] = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ServerFence.FullAddress(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  a1[24] = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ServerFence.FullAddress(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for ServerFence.FullAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFence.FullAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 232)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFence.FullAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 232) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFence.FullAddress()
{
  return &type metadata for ServerFence.FullAddress;
}

uint64_t destroy for ServerBaseResponse(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[22] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerBaseResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v8;
    uint64_t v9 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 176);
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    long long v14 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v14;
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v11;
    *(void *)(a1 + 184) = v15;
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v16 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v17 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v17;
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  uint64_t v18 = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18)
  {
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    uint64_t v19 = *(void *)(a2 + 264);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = v19;
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v18;
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    long long v20 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v20;
    long long v21 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v21;
    uint64_t v22 = *(void *)(a2 + 376);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(void *)(a1 + 376) = v22;
    uint64_t v23 = *(void *)(a2 + 392);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(void *)(a1 + 392) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v24;
    long long v25 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v25;
    long long v26 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v26;
    long long v27 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v27;
    long long v28 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v28;
  }
  long long v29 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v29;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  long long v30 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v30;
  long long v31 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v31;
  long long v32 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v32;
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerBaseResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 104);
  uint64_t v5 = (_OWORD *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v6)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000B9FFC(a1 + 104);
      long long v7 = *(_OWORD *)(a2 + 120);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 120) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 120);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 120) = v8;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (long long *)(a1 + 176);
  uint64_t v11 = (long long *)(a2 + 176);
  uint64_t v10 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) == 1)
  {
    if (v10 == 1)
    {
      long long v12 = *v11;
      long long v13 = *(_OWORD *)(a2 + 192);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *uint64_t v9 = v12;
      *(_OWORD *)(a1 + 192) = v13;
    }
    else
    {
      *(void *)(a1 + 176) = v10;
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v10 == 1)
  {
    sub_1000BA030(a1 + 176);
    uint64_t v14 = *(void *)(a2 + 208);
    long long v15 = *(_OWORD *)(a2 + 192);
    *uint64_t v9 = *v11;
    *(_OWORD *)(a1 + 192) = v15;
    *(void *)(a1 + 208) = v14;
  }
  else
  {
    *(void *)(a1 + 176) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  uint64_t v16 = (_OWORD *)(a1 + 240);
  uint64_t v17 = (_OWORD *)(a2 + 240);
  uint64_t v18 = *(void *)(a2 + 280);
  if (*(void *)(a1 + 280))
  {
    if (v18)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1 + 240);
      long long v19 = *(_OWORD *)(a2 + 256);
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 256) = v19;
      long long v20 = *(_OWORD *)(a2 + 320);
      long long v22 = *(_OWORD *)(a2 + 272);
      long long v21 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 320) = v20;
      *(_OWORD *)(a1 + 272) = v22;
      *(_OWORD *)(a1 + 288) = v21;
      long long v23 = *(_OWORD *)(a2 + 384);
      long long v25 = *(_OWORD *)(a2 + 336);
      long long v24 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 384) = v23;
      *(_OWORD *)(a1 + 336) = v25;
      *(_OWORD *)(a1 + 352) = v24;
    }
  }
  else if (v18)
  {
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 256);
    _OWORD *v16 = *v17;
    *(_OWORD *)(a1 + 256) = v26;
    long long v27 = *(_OWORD *)(a2 + 272);
    long long v28 = *(_OWORD *)(a2 + 288);
    long long v29 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v29;
    *(_OWORD *)(a1 + 272) = v27;
    *(_OWORD *)(a1 + 288) = v28;
    long long v30 = *(_OWORD *)(a2 + 336);
    long long v31 = *(_OWORD *)(a2 + 352);
    long long v32 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v32;
    *(_OWORD *)(a1 + 336) = v30;
    *(_OWORD *)(a1 + 352) = v31;
  }
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  long long v33 = *(_OWORD *)(a2 + 416);
  long long v34 = *(_OWORD *)(a2 + 432);
  long long v35 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v35;
  *(_OWORD *)(a1 + 416) = v33;
  *(_OWORD *)(a1 + 432) = v34;
  long long v36 = *(_OWORD *)(a2 + 480);
  long long v37 = *(_OWORD *)(a2 + 496);
  long long v38 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v38;
  *(_OWORD *)(a1 + 480) = v36;
  *(_OWORD *)(a1 + 496) = v37;
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B9FFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BA030(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for ServerBaseResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x240uLL);
}

uint64_t assignWithTake for ServerBaseResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112))
  {
    uint64_t v8 = *(void *)(a2 + 112);
    if (v8)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000B9FFC(a1 + 104);
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v10;
LABEL_6:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) == 1)
  {
LABEL_9:
    long long v12 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v12;
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    goto LABEL_11;
  }
  if (v11 == 1)
  {
    sub_1000BA030(a1 + 176);
    goto LABEL_9;
  }
  *(void *)(a1 + 176) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  uint64_t v13 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v13;
  swift_bridgeObjectRelease();
LABEL_11:
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  if (!*(void *)(a1 + 280))
  {
LABEL_15:
    long long v19 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v19;
    long long v20 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v20;
    long long v21 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v21;
    long long v22 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v22;
    long long v23 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v23;
    goto LABEL_16;
  }
  if (!*(void *)(a2 + 280))
  {
    sub_10008EE3C(a1 + 240);
    goto LABEL_15;
  }
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v14 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v15 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v15;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  long long v16 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v16;
  uint64_t v17 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v18;
  swift_bridgeObjectRelease();
LABEL_16:
  long long v24 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v24;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  long long v25 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v25;
  long long v26 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v26;
  long long v27 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v27;
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerBaseResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 576)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerBaseResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 576) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 576) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerBaseResponse()
{
  return &type metadata for ServerBaseResponse;
}

uint64_t destroy for ServerFence(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 136) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerFence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  uint64_t v40 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 == 1)
  {
    long long v12 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v12;
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    long long v13 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v13;
    long long v14 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v14;
    long long v15 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v15;
    long long v16 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v16;
    long long v17 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    long long v18 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v18;
  }
  else
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v40;
    uint64_t v19 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v19;
    uint64_t v20 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v20;
    uint64_t v21 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = v21;
    uint64_t v22 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = v22;
    uint64_t v23 = *(void *)(a2 + 216);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = v23;
    uint64_t v24 = *(void *)(a2 + 232);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = v24;
    uint64_t v25 = *(void *)(a2 + 248);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = v25;
    uint64_t v26 = *(void *)(a2 + 264);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = v26;
    uint64_t v27 = *(void *)(a2 + 280);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v27;
    uint64_t v28 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v28;
    uint64_t v29 = *(void *)(a2 + 312);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = v29;
    uint64_t v30 = *(void *)(a2 + 328);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = v30;
    uint64_t v31 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v31;
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v32 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v32;
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  uint64_t v33 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v33;
  uint64_t v34 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v34;
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  uint64_t v35 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v35;
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  uint64_t v36 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v36;
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v37 = *(void *)(a2 + 488);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v37;
  uint64_t v38 = *(void *)(a2 + 512);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v38;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerFence(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 128);
  uint64_t v5 = (long long *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      long long v8 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v8;
      *uint64_t v4 = v7;
      long long v9 = *(_OWORD *)(a2 + 176);
      long long v10 = *(_OWORD *)(a2 + 192);
      long long v11 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = v11;
      *(_OWORD *)(a1 + 176) = v9;
      *(_OWORD *)(a1 + 192) = v10;
      long long v12 = *(_OWORD *)(a2 + 240);
      long long v13 = *(_OWORD *)(a2 + 256);
      long long v14 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v14;
      *(_OWORD *)(a1 + 240) = v12;
      *(_OWORD *)(a1 + 256) = v13;
      long long v15 = *(_OWORD *)(a2 + 304);
      long long v16 = *(_OWORD *)(a2 + 320);
      long long v17 = *(_OWORD *)(a2 + 336);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(_OWORD *)(a1 + 320) = v16;
      *(_OWORD *)(a1 + 336) = v17;
      *(_OWORD *)(a1 + 304) = v15;
    }
    else
    {
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_1000BB014(a1 + 128);
    long long v19 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 160);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 144) = v19;
    *(_OWORD *)(a1 + 160) = v18;
    long long v20 = *(_OWORD *)(a2 + 224);
    long long v22 = *(_OWORD *)(a2 + 176);
    long long v21 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v20;
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 192) = v21;
    long long v23 = *(_OWORD *)(a2 + 288);
    long long v25 = *(_OWORD *)(a2 + 240);
    long long v24 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v23;
    *(_OWORD *)(a1 + 240) = v25;
    *(_OWORD *)(a1 + 256) = v24;
    long long v27 = *(_OWORD *)(a2 + 320);
    long long v26 = *(_OWORD *)(a2 + 336);
    long long v28 = *(_OWORD *)(a2 + 304);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 320) = v27;
    *(_OWORD *)(a1 + 336) = v26;
    *(_OWORD *)(a1 + 304) = v28;
  }
  else
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(a2 + 416);
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  *(void *)(a1 + 416) = v29;
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 448);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(void *)(a1 + 448) = v30;
  *(unsigned char *)(a1 + 457) = *(unsigned char *)(a2 + 457);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 488) = v31;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(a2 + 568);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  *(void *)(a1 + 568) = v32;
  return a1;
}

uint64_t sub_1000BB014(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for ServerFence(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x241uLL);
}

uint64_t assignWithTake for ServerFence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 136) != 1)
  {
    uint64_t v11 = *(void *)(a2 + 136);
    if (v11 != 1)
    {
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v11;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v20;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v21;
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 224);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(a2 + 240);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(a2 + 256);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 272);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = v26;
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(a2 + 288);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = v27;
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(a2 + 320);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(a2 + 336);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(a2 + 352);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = v31;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000BB014(a1 + 128);
  }
  long long v12 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v12;
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  long long v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  long long v14 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v14;
  long long v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v15;
  long long v16 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v16;
  long long v17 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v17;
  long long v18 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v18;
LABEL_6:
  uint64_t v32 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v32;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  uint64_t v33 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v34;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  uint64_t v35 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v35;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v36;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v37 = *(void *)(a2 + 512);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v37;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFence(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 577)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(unsigned char *)(result + 576) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 577) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 577) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFence()
{
  return &type metadata for ServerFence;
}

ValueMetadata *type metadata accessor for ServerConfig()
{
  return &type metadata for ServerConfig;
}

uint64_t destroy for ServerCommandResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerCommandResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerCommandResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ServerCommandResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ServerCommandResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ServerCommandResponse()
{
  return &type metadata for ServerCommandResponse;
}

ValueMetadata *type metadata accessor for ServerPreferences()
{
  return &type metadata for ServerPreferences;
}

uint64_t assignWithCopy for ServerDevice(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ServerDevice(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerDevice()
{
  return &type metadata for ServerDevice;
}

uint64_t sub_1000BB82C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000BB8F4(uint64_t a1)
{
  sub_100044014(&qword_1003EE420);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = (void *)result;
  int64_t v5 = 0;
  uint64_t v28 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v26 = v7;
  int64_t v27 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    long long v18 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = (uint64_t *)(*(void *)(v28 + 56) + 16 * i);
    uint64_t v22 = v21[1];
    v29[0] = *v21;
    v29[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000B5FFC(v29, &v30);
    uint64_t result = swift_bridgeObjectRelease();
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v23 = (void *)(v4[6] + 16 * i);
    void *v23 = v19;
    v23[1] = v20;
    *(unsigned char *)(v4[7] + i) = v30;
    uint64_t v24 = v4[2];
    BOOL v15 = __OFADD__(v24, 1);
    uint64_t v25 = v24 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v25;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_27;
    }
    if (v5 >= v27) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v26 + 8 * v5);
    if (!v16) {
      break;
    }
LABEL_15:
    unint64_t v11 = (v16 - 1) & v16;
  }
  int64_t v17 = v5 + 1;
  if (v5 + 1 >= v27) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v5 + 2;
  if (v5 + 2 >= v27) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v5 + 3;
  if (v5 + 3 >= v27) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v17);
  if (v16)
  {
LABEL_14:
    int64_t v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v27) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v26 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL sub_1000BBB28(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) != 0
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(void *)(a1 + 32) != *(void *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48)
    || ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) != 0
    || *(double *)(a1 + 64) != *(double *)(a2 + 64)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || ((*(unsigned __int8 *)(a1 + 96) ^ *(unsigned __int8 *)(a2 + 96)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 97) ^ *(unsigned __int8 *)(a2 + 97)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 98) ^ *(unsigned __int8 *)(a2 + 98)) & 1) != 0)
  {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 99);
  int v4 = *(unsigned __int8 *)(a2 + 99);
  if (v3 == 2)
  {
    if (v4 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = (v3 & 1) == 0;
    if (v4 == 2 || ((v6 ^ v4) & 1) == 0) {
      return v5;
    }
  }
  if (*(double *)(a1 + 104) != *(double *)(a2 + 104)
    || *(void *)(a1 + 112) != *(void *)(a2 + 112)
    || *(double *)(a1 + 120) != *(double *)(a2 + 120)
    || ((*(unsigned __int8 *)(a1 + 128) ^ *(unsigned __int8 *)(a2 + 128)) & 1) != 0)
  {
    return 0;
  }
  return *(double *)(a1 + 136) == *(double *)(a2 + 136);
}

uint64_t sub_1000BBCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)a1 == *(void *)a2 && v4 == v5;
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a2 + 24);
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32)
      && ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) == 0
      && (sub_1000BB82C(*(void **)(a1 + 48), *(void **)(a2 + 48)) & 1) != 0)
    {
      if (*(void *)(a1 + 56) != *(void *)(a2 + 56) || *(void *)(a1 + 64) != *(void *)(a2 + 64))
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v12 & 1) == 0) {
          return result;
        }
      }
      if (((*(unsigned __int8 *)(a1 + 72) ^ *(unsigned __int8 *)(a2 + 72)) & 1) == 0)
      {
        uint64_t v13 = *(void *)(a1 + 88);
        uint64_t v14 = *(void *)(a2 + 88);
        if (v13)
        {
          if (!v14
            || (*(void *)(a1 + 80) != *(void *)(a2 + 80) || v13 != v14)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            return 0;
          }
        }
        else if (v14)
        {
          return 0;
        }
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000BBE0C(uint64_t a1, char a2)
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100044014(&qword_1003EE428);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x437375746174730ALL;
  v4._object = (void *)0xED0000203A65646FLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = sub_100010CF4(a2);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x614D737574617473;
}

uint64_t sub_1000BBEF8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001003745E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656369766564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6954656369766564 && a2 == 0xEF706D617453656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C626967696C65 && a2 == 0xEE00654D6F747541 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100374600 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656369766544656DLL && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1000BC290(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6143654D6F747561 && a2 == 0xED0000656C626170;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100374890 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6369766544736469 && a2 == 0xEB00000000644965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1000BC4BC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100374620
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6C6C6F4678616DLL && a2 == 0xEC00000073726577 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100374640 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100374660 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6569724678616DLL && a2 == 0xEA00000000007364 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100374680 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001003746A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001003746C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001003746E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100374700 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100374720 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100374740 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x464D466B636F6C62 && a2 == 0xEF6C656E6E616843 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100374760 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x8000000100374780 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001003747A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEB000000004C5454 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003747D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001003747F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100374810 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x5465636172474C65 && a2 == 0xEE006E694D656D69)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 20;
    }
    else {
      return 21;
    }
  }
}

uint64_t sub_1000BCCD4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61636F4C65646968 && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100374830)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1000BCDDC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD098, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000BCE28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE400);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000C12F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  LOBYTE(v40) = 1;
  uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v12 = HIBYTE(v10) & 0xF;
  uint64_t v13 = result & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  if ((v11 & 0x1000000000000000) != 0)
  {
    uint64_t v16 = (uint64_t)sub_100362910(result, v11, 10);
    char v18 = v37;
    goto LABEL_46;
  }
  if ((v11 & 0x2000000000000000) != 0)
  {
    uint64_t v40 = result;
    uint64_t v41 = v11 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v12) {
        goto LABEL_65;
      }
      if (v12 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_33;
      }
      uint64_t v16 = (BYTE1(result) - 48);
      if (v12 != 2)
      {
        if ((BYTE2(result) - 48) > 9u) {
          goto LABEL_33;
        }
        uint64_t v16 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v19 = v12 - 3;
        if (v19)
        {
          uint64_t v20 = (unsigned __int8 *)&v40 + 3;
          while (1)
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              goto LABEL_33;
            }
            uint64_t v22 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
              goto LABEL_33;
            }
            uint64_t v16 = v22 + v21;
            if (__OFADD__(v22, v21)) {
              goto LABEL_33;
            }
            char v18 = 0;
            ++v20;
            if (!--v19) {
              goto LABEL_46;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v12)
        {
          if (v12 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              char v18 = 0;
              uint64_t v16 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_46;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              uint64_t v16 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              uint64_t v27 = v12 - 3;
              if (!v27) {
                goto LABEL_45;
              }
              char v30 = (unsigned __int8 *)&v40 + 3;
              while (1)
              {
                unsigned int v31 = *v30 - 48;
                if (v31 > 9) {
                  break;
                }
                uint64_t v32 = 10 * v16;
                if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
                  break;
                }
                uint64_t v16 = v32 - v31;
                if (__OFSUB__(v32, v31)) {
                  break;
                }
                char v18 = 0;
                ++v30;
                if (!--v27) {
                  goto LABEL_46;
                }
              }
            }
          }
LABEL_33:
          uint64_t v16 = 0;
          char v18 = 1;
          goto LABEL_46;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        return result;
      }
      if (!v12 || (result - 48) > 9u) {
        goto LABEL_33;
      }
      uint64_t v16 = (result - 48);
      if (v12 != 1)
      {
        if ((BYTE1(result) - 48) > 9u) {
          goto LABEL_33;
        }
        uint64_t v16 = 10 * (result - 48) + (BYTE1(result) - 48);
        uint64_t v23 = v12 - 2;
        if (v23)
        {
          uint64_t v24 = (unsigned __int8 *)&v40 + 2;
          while (1)
          {
            unsigned int v25 = *v24 - 48;
            if (v25 > 9) {
              goto LABEL_33;
            }
            uint64_t v26 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
              goto LABEL_33;
            }
            uint64_t v16 = v26 + v25;
            if (__OFADD__(v26, v25)) {
              goto LABEL_33;
            }
            char v18 = 0;
            ++v24;
            if (!--v23) {
              goto LABEL_46;
            }
          }
        }
      }
    }
LABEL_45:
    char v18 = 0;
    goto LABEL_46;
  }
  if ((result & 0x1000000000000000) != 0) {
    BOOL v15 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    BOOL v15 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t v16 = (uint64_t)sub_1003628F8(v15, v13, 10);
  char v18 = v17 & 1;
LABEL_46:
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_57:
    int v29 = 11;
    goto LABEL_58;
  }
  int v28 = sub_100036DB8(v16);
  if (v28 == 21) {
    int v29 = 0;
  }
  else {
    int v29 = v28;
  }
LABEL_58:
  int v43 = v29;
  sub_100044014(&qword_1003ECF78);
  char v42 = 2;
  sub_10003676C(&qword_1003EE410, &qword_1003ECF78, (void (*)(void))sub_1000C134C);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v33 = v40;
  uint64_t v39 = v6;
  sub_100044014(&qword_1003ED120);
  char v42 = 3;
  sub_1000440FC(&qword_1003EE418, &qword_1003ED120);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v34 = v40;
  uint64_t v35 = v41;
  LOBYTE(v40) = 0;
  swift_bridgeObjectRetain();
  if (KeyedDecodingContainer.contains(_:)())
  {
    sub_100044014(&qword_1003ED418);
    char v42 = 0;
    sub_1000C134C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v38 = a2;
    uint64_t v36 = sub_1000BB8F4(v40);
    a2 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = 0;
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v5);
  sub_1000233E4((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v33;
  *(unsigned char *)(a2 + 16) = v43;
  *(void *)(a2 + 24) = v34;
  *(void *)(a2 + 32) = v35;
  return result;
}

uint64_t sub_1000BD488(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100373CB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100373CD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726464416C6C7566 && a2 == 0xEB00000000737365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7974696C61636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xED0000656C746954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65646F4374736F70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x736573696D657270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x64644174726F6873 && a2 == 0xEC00000073736572 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x646F436574617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6441746565727473 && a2 == 0xED00007373657264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100374850 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6C61636F4C627573 && a2 == 0xEB00000000797469)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t sub_1000BDB38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE3C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  Swift::String v84 = a1;
  sub_100042524(a1, v9);
  sub_1000C0EEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v84);
  }
  uint64_t v76 = a2;
  LOBYTE(v100[0]) = 0;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v100[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v75 = v11;
  LOBYTE(v100[0]) = 2;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v83 = v15;
  uint64_t v73 = v16;
  uint64_t v18 = v17;
  sub_100044014(&qword_1003ED230);
  LOBYTE(v85) = 3;
  sub_1000440FC((unint64_t *)&qword_1003ED618, &qword_1003ED230);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v82 = v18;
  uint64_t v19 = v100[0];
  LOBYTE(v100[0]) = 4;
  swift_bridgeObjectRetain();
  uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v72 = v19;
  LOBYTE(v100[0]) = 5;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v81 = v21;
  uint64_t v70 = v22;
  LOBYTE(v100[0]) = 6;
  uint64_t v24 = v23;
  swift_bridgeObjectRetain();
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v80 = v24;
  uint64_t v69 = v25;
  LOBYTE(v100[0]) = 7;
  uint64_t v27 = v26;
  swift_bridgeObjectRetain();
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v79 = v27;
  uint64_t v68 = v28;
  LOBYTE(v100[0]) = 8;
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v78 = v30;
  LOBYTE(v100[0]) = 9;
  uint64_t v77 = v31;
  swift_bridgeObjectRetain();
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v66 = v32;
  LOBYTE(v100[0]) = 10;
  swift_bridgeObjectRetain();
  uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v64 = v33;
  LOBYTE(v100[0]) = 11;
  swift_bridgeObjectRetain();
  uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v61 = v34;
  uint64_t v63 = 0;
  LOBYTE(v100[0]) = 12;
  swift_bridgeObjectRetain();
  uint64_t v35 = v63;
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v60 = v36;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v63) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    LOBYTE(v100[0]) = 13;
    swift_bridgeObjectRetain();
    uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v38 = v37;
    char v101 = 14;
    swift_bridgeObjectRetain();
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v56 = v40;
    uint64_t v41 = v39;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)&long long v85 = v75;
    *((void *)&v85 + 1) = v13;
    *(void *)&long long v86 = v74;
    *((void *)&v86 + 1) = v83;
    *(void *)&long long v87 = v73;
    *((void *)&v87 + 1) = v82;
    *(void *)&long long v88 = v72;
    *((void *)&v88 + 1) = v71;
    *(void *)&long long v89 = v81;
    *((void *)&v89 + 1) = v70;
    *(void *)&long long v90 = v80;
    *((void *)&v90 + 1) = v69;
    *(void *)&long long v91 = v79;
    *((void *)&v91 + 1) = v68;
    *(void *)&long long v92 = v78;
    *((void *)&v92 + 1) = v67;
    *(void *)&long long v93 = v77;
    *((void *)&v93 + 1) = v65;
    *(void *)&long long v94 = v66;
    *((void *)&v94 + 1) = v62;
    *(void *)&long long v95 = v64;
    *((void *)&v95 + 1) = v59;
    *(void *)&long long v96 = v61;
    uint64_t v42 = v61;
    *((void *)&v96 + 1) = v58;
    *(void *)&long long v97 = v60;
    *((void *)&v97 + 1) = v57;
    *(void *)&long long v98 = v38;
    uint64_t v55 = v41;
    *((void *)&v98 + 1) = v41;
    uint64_t v99 = v56;
    sub_1000C0F40((uint64_t)&v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v77;
    swift_bridgeObjectRelease();
    uint64_t v44 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v60;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)v84);
    v100[0] = v75;
    v100[1] = v13;
    v100[2] = v74;
    v100[3] = v83;
    v100[4] = v73;
    v100[5] = v82;
    v100[6] = v72;
    v100[7] = v71;
    v100[8] = v81;
    v100[9] = v70;
    v100[10] = v80;
    v100[11] = v69;
    v100[12] = v79;
    v100[13] = v68;
    v100[14] = v78;
    v100[15] = v67;
    v100[16] = v43;
    v100[17] = v65;
    v100[18] = v44;
    v100[19] = v62;
    v100[20] = v64;
    v100[21] = v59;
    v100[22] = v42;
    v100[23] = v58;
    v100[24] = v45;
    v100[25] = v57;
    v100[26] = v38;
    v100[27] = v55;
    v100[28] = v56;
    uint64_t result = sub_1000C1044((uint64_t)v100);
    long long v46 = v98;
    uint64_t v47 = v76;
    *(_OWORD *)(v76 + 192) = v97;
    *(_OWORD *)(v47 + 208) = v46;
    *(void *)(v47 + 224) = v99;
    long long v48 = v94;
    *(_OWORD *)(v47 + 128) = v93;
    *(_OWORD *)(v47 + 144) = v48;
    long long v49 = v96;
    *(_OWORD *)(v47 + 160) = v95;
    *(_OWORD *)(v47 + 176) = v49;
    long long v50 = v90;
    *(_OWORD *)(v47 + 64) = v89;
    *(_OWORD *)(v47 + 80) = v50;
    long long v51 = v92;
    *(_OWORD *)(v47 + 96) = v91;
    *(_OWORD *)(v47 + 112) = v51;
    long long v52 = v86;
    *(_OWORD *)uint64_t v47 = v85;
    *(_OWORD *)(v47 + 16) = v52;
    long long v53 = v88;
    *(_OWORD *)(v47 + 32) = v87;
    *(_OWORD *)(v47 + 48) = v53;
  }
  return result;
}

uint64_t sub_1000BE92C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100372870
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64726F6365526B63 && a2 == 0xEC000000656D614ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100373C90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4264657461657263 && a2 == 0xEB00000000644979 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x644965636E6566 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7265776F6C6C6F66 && a2 == 0xEB00000000736449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6449646E65697266 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x726464416C6C7566 && a2 == 0xEB00000000737365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 1850700649 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100374870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6F656D6974656E6FLL && a2 == 0xEB00000000796C6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEC00000073726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6441797474657270 && a2 == 0xED00007373657264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x72656767697274 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 25;
    }
    else {
      return 26;
    }
  }
}

void *sub_1000BF40C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v133 = sub_100044014(&qword_1003EE3D8);
  uint64_t v5 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141[3] = 0;
  v141[2] = 0;
  sub_1000C1148((uint64_t)v142);
  v135 = &v141[16];
  sub_100013B50((uint64_t)v142, (uint64_t)&v141[16], &qword_1003ECD28);
  v141[52] = 0;
  v141[49] = 0;
  v141[48] = 0;
  LOBYTE(v141[53]) = 1;
  memset(&v141[54], 0, 24);
  LOBYTE(v141[57]) = 1;
  v141[61] = 0;
  LOBYTE(v141[62]) = 1;
  uint64_t v8 = a1[3];
  v134 = a1;
  sub_100042524(a1, v8);
  sub_1000C1178();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v136 = v2;
    LODWORD(v133) = 0;
    unsigned int v9 = 37378;
    goto LABEL_4;
  }
  uint64_t v131 = a2;
  uint64_t v132 = v5;
  LOBYTE(v138[0]) = 0;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v29 = v28;
  v141[0] = v27;
  v141[1] = v28;
  LOBYTE(v138[0]) = 1;
  swift_bridgeObjectRetain();
  v141[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v141[3] = v30;
  LOBYTE(v138[0]) = 2;
  uint64_t v31 = v141[2];
  uint64_t v32 = v30;
  swift_bridgeObjectRetain();
  uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v129 = v31;
  uint64_t v130 = v32;
  v141[4] = v33;
  v141[5] = v34;
  LOBYTE(v138[0]) = 3;
  uint64_t v35 = v33;
  uint64_t v36 = v34;
  swift_bridgeObjectRetain();
  uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v127 = v35;
  uint64_t v128 = v36;
  v141[6] = v37;
  v141[7] = v38;
  LOBYTE(v138[0]) = 4;
  uint64_t v39 = v37;
  uint64_t v40 = v38;
  swift_bridgeObjectRetain();
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v124 = v39;
  uint64_t v125 = v40;
  v141[8] = v41;
  v141[9] = v42;
  uint64_t v123 = v41;
  uint64_t v43 = v42;
  uint64_t v44 = sub_100044014(&qword_1003ED230);
  LOBYTE(v137[0]) = 5;
  uint64_t v45 = sub_1000440FC((unint64_t *)&qword_1003ED618, &qword_1003ED230);
  uint64_t v126 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v121 = v45;
  uint64_t v122 = v44;
  uint64_t v46 = v138[0];
  v141[10] = v138[0];
  LOBYTE(v138[0]) = 6;
  swift_bridgeObjectRetain();
  uint64_t v119 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v120 = v47;
  v141[11] = v119;
  v141[12] = v47;
  LOBYTE(v137[0]) = 7;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v136 = 0;
  uint64_t v48 = v129;
  uint64_t v117 = v29;
  uint64_t v118 = v46;
  uint64_t v49 = v138[0];
  v141[13] = v138[0];
  LOBYTE(v138[0]) = 8;
  swift_bridgeObjectRetain();
  uint64_t v50 = v136;
  uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v136 = v50;
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v133) = 0;
    unsigned int v9 = 37631;
    goto LABEL_4;
  }
  uint64_t v53 = v51;
  v141[14] = v51;
  v141[15] = v52;
  char v145 = 9;
  uint64_t v54 = v52;
  sub_1000C11CC();
  uint64_t v116 = v54;
  swift_bridgeObjectRetain();
  uint64_t v55 = v136;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v136 = v55;
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v133) = 0;
    unsigned int v9 = 37887;
    goto LABEL_4;
  }
  sub_100013B50((uint64_t)&v140, (uint64_t)v139, &qword_1003ECD28);
  sub_100013B50((uint64_t)v139, (uint64_t)v135, &qword_1003ECD28);
  LOBYTE(v138[0]) = 10;
  sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000623F8);
  uint64_t v56 = v136;
  uint64_t v114 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v115 = v57;
  uint64_t v136 = v56;
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
    goto LABEL_46;
  }
  v141[45] = v114;
  v141[46] = v115;
  LOBYTE(v138[0]) = 11;
  swift_bridgeObjectRetain();
  uint64_t v58 = v136;
  int v143 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v136 = v58;
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
LABEL_50:
    swift_bridgeObjectRelease();
    sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v133) = 0;
    unsigned int v9 = 38911;
    goto LABEL_4;
  }
  LOBYTE(v141[47]) = v143;
  LOBYTE(v138[0]) = 12;
  uint64_t v112 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v113 = v59;
  uint64_t v136 = 0;
  v141[48] = v112;
  v141[49] = v113;
  LOBYTE(v138[0]) = 13;
  swift_bridgeObjectRetain();
  uint64_t v60 = v136;
  uint64_t v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v111 = v61;
  uint64_t v136 = v60;
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  v141[50] = v110;
  v141[51] = v111;
  LOBYTE(v138[0]) = 14;
  swift_bridgeObjectRetain();
  uint64_t v62 = v136;
  uint64_t v109 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v108 = v63;
  uint64_t v136 = v62;
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_56:
    swift_bridgeObjectRelease();
    sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v133) = 0;
    unsigned int v9 = 47103;
    goto LABEL_4;
  }
  v141[52] = v109;
  Swift::String v106 = &v141[53];
  LOBYTE(v141[53]) = v108 & 1;
  LOBYTE(v138[0]) = 15;
  uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v107 = v65;
  uint64_t v136 = 0;
  uint64_t v66 = v64;
  v141[54] = v64;
  v141[55] = v107;
  LOBYTE(v138[0]) = 16;
  swift_bridgeObjectRetain();
  uint64_t v67 = v136;
  uint64_t v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v104 = v68;
  uint64_t v136 = v67;
  if (v67
    || (v141[56] = v105,
        v106[32] = v104 & 1,
        LOBYTE(v138[0]) = 17,
        uint64_t v69 = v136,
        int v103 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(),
        (uint64_t v136 = v69) != 0))
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  BYTE1(v141[57]) = v103;
  LOBYTE(v137[0]) = 18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v136 = 0;
  v141[58] = v138[0];
  LOBYTE(v138[0]) = 19;
  uint64_t v122 = v141[58];
  swift_bridgeObjectRetain();
  uint64_t v70 = v136;
  uint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v121 = v71;
  uint64_t v136 = v70;
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v133) = 0;
    unsigned int v9 = 67418111;
  }
  else
  {
    v141[59] = v102;
    v141[60] = v121;
    LOBYTE(v138[0]) = 20;
    swift_bridgeObjectRetain();
    uint64_t v72 = v136;
    uint64_t v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v100 = v73;
    uint64_t v136 = v72;
    if (!v72)
    {
      v141[61] = v101;
      v106[72] = v100 & 1;
      LOBYTE(v138[0]) = 21;
      uint64_t v74 = v136;
      uint64_t v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v99 = v75;
      uint64_t v136 = v74;
      if (!v74)
      {
        v141[63] = v98;
        v141[64] = v99;
        LOBYTE(v138[0]) = 22;
        swift_bridgeObjectRetain();
        uint64_t v76 = v136;
        uint64_t v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        uint64_t v97 = v77;
        uint64_t v136 = v76;
        if (v76)
        {
          (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000233E4((uint64_t)v134);
          int v15 = 0;
          LODWORD(v134) = 0;
          LODWORD(v132) = 0;
          LOBYTE(v25) = 1;
          int v10 = 1;
          int v11 = 1;
          int v12 = 1;
          LODWORD(v128) = 1;
          LODWORD(v129) = 1;
          LODWORD(v130) = 1;
          int v13 = 1;
          int v14 = 1;
          LODWORD(v131) = 1;
          LODWORD(v133) = 1;
          int v16 = 1;
        }
        else
        {
          v141[65] = v96;
          v141[66] = v97;
          LOBYTE(v138[0]) = 23;
          swift_bridgeObjectRetain();
          uint64_t v78 = v136;
          uint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v95 = v79;
          uint64_t v136 = v78;
          if (v78)
          {
            (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000233E4((uint64_t)v134);
            LODWORD(v134) = 0;
            LODWORD(v132) = 0;
            LOBYTE(v25) = 1;
            int v10 = 1;
            int v11 = 1;
            int v12 = 1;
            LODWORD(v128) = 1;
            LODWORD(v129) = 1;
            LODWORD(v130) = 1;
            int v13 = 1;
            int v14 = 1;
            LODWORD(v131) = 1;
            LODWORD(v133) = 1;
            int v16 = 1;
            int v15 = 1;
          }
          else
          {
            v141[67] = v94;
            v141[68] = v95;
            LOBYTE(v138[0]) = 24;
            swift_bridgeObjectRetain();
            uint64_t v80 = v136;
            uint64_t v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
            uint64_t v93 = v81;
            uint64_t v136 = v80;
            if (v80)
            {
              (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000233E4((uint64_t)v134);
              LODWORD(v132) = 0;
              LOBYTE(v25) = 1;
              int v10 = 1;
              int v11 = 1;
              int v12 = 1;
              LODWORD(v128) = 1;
              LODWORD(v129) = 1;
              LODWORD(v130) = 1;
              int v13 = 1;
              int v14 = 1;
              LODWORD(v131) = 1;
              LODWORD(v133) = 1;
              int v16 = 1;
              int v15 = 1;
              LODWORD(v134) = 1;
            }
            else
            {
              v141[69] = v92;
              v141[70] = v93;
              char v144 = 25;
              swift_bridgeObjectRetain();
              uint64_t v82 = v136;
              uint64_t v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              int v91 = v84;
              uint64_t v136 = v82;
              if (!v82)
              {
                uint64_t v85 = v83;
                long long v88 = &v137[53];
                (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
                uint64_t v89 = v85;
                v141[71] = v85;
                LODWORD(v135) = v91 & 1;
                v106[152] = v91 & 1;
                v137[0] = v27;
                v137[1] = v117;
                v137[2] = v48;
                v137[3] = v130;
                v137[4] = v127;
                v137[5] = v128;
                v137[6] = v124;
                v137[7] = v125;
                v137[8] = v123;
                v137[9] = v126;
                v137[10] = v118;
                v137[11] = v119;
                v137[12] = v120;
                v137[13] = v49;
                uint64_t v90 = v49;
                v137[14] = v53;
                v137[15] = v116;
                sub_100013B50((uint64_t)v139, (uint64_t)&v137[16], &qword_1003ECD28);
                v137[45] = v114;
                v137[46] = v115;
                LOBYTE(v137[47]) = v143;
                v137[48] = v112;
                v137[49] = v113;
                v137[50] = v110;
                v137[51] = v111;
                long long v86 = v88;
                *long long v88 = v108 & 1;
                v137[52] = v109;
                v137[54] = v66;
                v137[55] = v107;
                v137[56] = v105;
                v86[32] = v104 & 1;
                BYTE1(v137[57]) = v103;
                v137[58] = v122;
                v137[59] = v102;
                v137[60] = v121;
                v137[61] = v101;
                v86[72] = v100 & 1;
                v137[63] = v98;
                v137[64] = v99;
                v137[65] = v96;
                v137[66] = v97;
                v137[67] = v94;
                v137[68] = v95;
                v137[69] = v92;
                v137[70] = v93;
                v137[71] = v89;
                v86[152] = (_BYTE)v135;
                sub_1000621F0((uint64_t)v137);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000233E4((uint64_t)v134);
                memcpy(v138, v141, 0x241uLL);
                sub_10006257C((uint64_t)v138);
                return memcpy(v131, v137, 0x241uLL);
              }
              (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000233E4((uint64_t)v134);
              LOBYTE(v25) = 1;
              int v10 = 1;
              int v11 = 1;
              int v12 = 1;
              LODWORD(v128) = 1;
              LODWORD(v129) = 1;
              LODWORD(v130) = 1;
              int v13 = 1;
              int v14 = 1;
              LODWORD(v131) = 1;
              LODWORD(v133) = 1;
              int v16 = 1;
              int v15 = 1;
              LODWORD(v134) = 1;
              LODWORD(v132) = 1;
            }
          }
        }
        goto LABEL_14;
      }
    }
    unsigned int v9 = 833535;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v7, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000C1220(v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v133) = 1;
  }
LABEL_4:
  sub_1000233E4((uint64_t)v134);
  int v10 = (v9 >> 3) & 1;
  int v11 = (v9 >> 4) & 1;
  int v12 = (v9 >> 5) & 1;
  LODWORD(v128) = (v9 >> 6) & 1;
  LODWORD(v129) = (v9 >> 7) & 1;
  LODWORD(v130) = (v9 >> 8) & 1;
  int v13 = (v9 >> 10) & 1;
  int v14 = (v9 >> 13) & 1;
  LODWORD(v131) = (v9 >> 18) & 1;
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    LODWORD(v132) = 0;
    LODWORD(v134) = 0;
    int v15 = 0;
    int v16 = 0;
    if ((v9 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  int v16 = 0;
  int v15 = 0;
  LODWORD(v134) = 0;
  LODWORD(v132) = 0;
  int v25 = (v9 >> 2) & 1;
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
LABEL_6:
    if (v10) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    int v17 = v15;
    if ((v11 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v17 = v15;
  if (!v11)
  {
LABEL_8:
    int v18 = v14;
    int v19 = v13;
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  int v18 = v14;
  int v19 = v13;
  if (v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    int v20 = v16;
    if ((v128 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v20 = v16;
  if (!v128)
  {
LABEL_10:
    int v21 = (int)v131;
    if (v129) {
      goto LABEL_11;
    }
LABEL_20:
    int v22 = v133;
    int v23 = v132;
    int v24 = (int)v134;
    if (!v130) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  int v21 = (int)v131;
  if ((v129 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  int v22 = v133;
  int v23 = v132;
  int v24 = (int)v134;
  if (v130) {
LABEL_21:
  }
    swift_bridgeObjectRelease();
LABEL_22:
  sub_100013B50((uint64_t)v135, (uint64_t)v138, &qword_1003ECD28);
  sub_1000C1220(v138, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062780);
  if (v19) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v18) {
    swift_bridgeObjectRelease();
  }
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v21)
  {
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (!v22)
    {
LABEL_28:
      if (!v20) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else if (!v22)
  {
    goto LABEL_28;
  }
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_29:
    if (!v17) {
      goto LABEL_30;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (!v17)
  {
LABEL_30:
    if (!v24) {
      goto LABEL_31;
    }
LABEL_37:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (!v23) {
      return result;
    }
    return (void *)swift_bridgeObjectRelease();
  }
LABEL_36:
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_37;
  }
LABEL_31:
  if (!v23) {
    return result;
  }
  return (void *)swift_bridgeObjectRelease();
}

uint64_t sub_1000C0AF0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

unint64_t sub_1000C0B44()
{
  unint64_t result = qword_1003EE2C0;
  if (!qword_1003EE2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE2C0);
  }
  return result;
}

uint64_t sub_1000C0B98()
{
  return sub_10003676C(&qword_1003EE2D8, &qword_1003EE2E0, (void (*)(void))sub_1000C0BD4);
}

unint64_t sub_1000C0BD4()
{
  unint64_t result = qword_1003EE2E8;
  if (!qword_1003EE2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE2E8);
  }
  return result;
}

unint64_t sub_1000C0C28()
{
  unint64_t result = qword_1003EE300;
  if (!qword_1003EE300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE300);
  }
  return result;
}

unint64_t sub_1000C0C7C()
{
  unint64_t result = qword_1003EE318;
  if (!qword_1003EE318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE318);
  }
  return result;
}

unint64_t sub_1000C0CD0()
{
  unint64_t result = qword_1003EE338;
  if (!qword_1003EE338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE338);
  }
  return result;
}

unint64_t sub_1000C0D24()
{
  unint64_t result = qword_1003EE348;
  if (!qword_1003EE348)
  {
    sub_10004AE58(&qword_1003EE340);
    sub_1000C0DFC(&qword_1003EE350, (void (*)(uint64_t))type metadata accessor for ServerLocation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE348);
  }
  return result;
}

double sub_1000C0DC8(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return result;
}

uint64_t sub_1000C0DFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C0E44()
{
  unint64_t result = qword_1003EE370;
  if (!qword_1003EE370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE370);
  }
  return result;
}

unint64_t sub_1000C0E98()
{
  unint64_t result = qword_1003EE378;
  if (!qword_1003EE378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE378);
  }
  return result;
}

unint64_t sub_1000C0EEC()
{
  unint64_t result = qword_1003EE3D0;
  if (!qword_1003EE3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE3D0);
  }
  return result;
}

uint64_t sub_1000C0F40(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C1044(uint64_t a1)
{
  return a1;
}

double sub_1000C1148(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_100368320;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  return result;
}

unint64_t sub_1000C1178()
{
  unint64_t result = qword_1003EE3E0;
  if (!qword_1003EE3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE3E0);
  }
  return result;
}

unint64_t sub_1000C11CC()
{
  unint64_t result = qword_1003EE3E8;
  if (!qword_1003EE3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE3E8);
  }
  return result;
}

void *sub_1000C1220(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28]);
  return a1;
}

unint64_t sub_1000C129C()
{
  unint64_t result = qword_1003EE3F8;
  if (!qword_1003EE3F8)
  {
    sub_10004AE58(&qword_1003ED230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE3F8);
  }
  return result;
}

unint64_t sub_1000C12F8()
{
  unint64_t result = qword_1003EE408;
  if (!qword_1003EE408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE408);
  }
  return result;
}

unint64_t sub_1000C134C()
{
  unint64_t result = qword_1003ED420;
  if (!qword_1003ED420)
  {
    sub_10004AE58(&qword_1003ED418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED420);
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerDevice.CodingKeys()
{
  return &type metadata for ServerDevice.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ServerCommandResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C14BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerCommandResponse.CodingKeys()
{
  return &type metadata for ServerCommandResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ServerFence.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *unint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C15C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFence.CodingKeys()
{
  return &type metadata for ServerFence.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ServerFence.FullAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ServerFence.FullAddress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C1754);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFence.FullAddress.CodingKeys()
{
  return &type metadata for ServerFence.FullAddress.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerPreferences.CodingKeys()
{
  return &type metadata for ServerPreferences.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerConfig.CodingKeys()
{
  return &type metadata for ServerConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerMyInfo.CodingKeys()
{
  return &type metadata for ServerMyInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerBaseResponse.CodingKeys()
{
  return &type metadata for ServerBaseResponse.CodingKeys;
}

unint64_t sub_1000C1870()
{
  unint64_t result = qword_1003EE448;
  if (!qword_1003EE448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE448);
  }
  return result;
}

unint64_t sub_1000C18C8()
{
  unint64_t result = qword_1003EE450;
  if (!qword_1003EE450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE450);
  }
  return result;
}

unint64_t sub_1000C1920()
{
  unint64_t result = qword_1003EE458;
  if (!qword_1003EE458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE458);
  }
  return result;
}

unint64_t sub_1000C1978()
{
  unint64_t result = qword_1003EE460;
  if (!qword_1003EE460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE460);
  }
  return result;
}

unint64_t sub_1000C19D0()
{
  unint64_t result = qword_1003EE468;
  if (!qword_1003EE468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE468);
  }
  return result;
}

unint64_t sub_1000C1A28()
{
  unint64_t result = qword_1003EE470;
  if (!qword_1003EE470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE470);
  }
  return result;
}

unint64_t sub_1000C1A80()
{
  unint64_t result = qword_1003EE478;
  if (!qword_1003EE478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE478);
  }
  return result;
}

unint64_t sub_1000C1AD8()
{
  unint64_t result = qword_1003EE480;
  if (!qword_1003EE480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE480);
  }
  return result;
}

unint64_t sub_1000C1B30()
{
  unint64_t result = qword_1003EE488;
  if (!qword_1003EE488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE488);
  }
  return result;
}

unint64_t sub_1000C1B88()
{
  unint64_t result = qword_1003EE490;
  if (!qword_1003EE490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE490);
  }
  return result;
}

unint64_t sub_1000C1BE0()
{
  unint64_t result = qword_1003EE498;
  if (!qword_1003EE498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE498);
  }
  return result;
}

unint64_t sub_1000C1C38()
{
  unint64_t result = qword_1003EE4A0;
  if (!qword_1003EE4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4A0);
  }
  return result;
}

unint64_t sub_1000C1C90()
{
  unint64_t result = qword_1003EE4A8;
  if (!qword_1003EE4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4A8);
  }
  return result;
}

unint64_t sub_1000C1CE8()
{
  unint64_t result = qword_1003EE4B0;
  if (!qword_1003EE4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4B0);
  }
  return result;
}

unint64_t sub_1000C1D40()
{
  unint64_t result = qword_1003EE4B8;
  if (!qword_1003EE4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4B8);
  }
  return result;
}

unint64_t sub_1000C1D98()
{
  unint64_t result = qword_1003EE4C0;
  if (!qword_1003EE4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4C0);
  }
  return result;
}

unint64_t sub_1000C1DF0()
{
  unint64_t result = qword_1003EE4C8;
  if (!qword_1003EE4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4C8);
  }
  return result;
}

unint64_t sub_1000C1E48()
{
  unint64_t result = qword_1003EE4D0;
  if (!qword_1003EE4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4D0);
  }
  return result;
}

unint64_t sub_1000C1EA0()
{
  unint64_t result = qword_1003EE4D8;
  if (!qword_1003EE4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4D8);
  }
  return result;
}

unint64_t sub_1000C1EF8()
{
  unint64_t result = qword_1003EE4E0;
  if (!qword_1003EE4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4E0);
  }
  return result;
}

unint64_t sub_1000C1F50()
{
  unint64_t result = qword_1003EE4E8;
  if (!qword_1003EE4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4E8);
  }
  return result;
}

unint64_t sub_1000C1FA8()
{
  unint64_t result = qword_1003EE4F0;
  if (!qword_1003EE4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4F0);
  }
  return result;
}

unint64_t sub_1000C2000()
{
  unint64_t result = qword_1003EE4F8;
  if (!qword_1003EE4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE4F8);
  }
  return result;
}

uint64_t assignWithCopy for ServerContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ServerContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000C224C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000C269C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000C2274(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_1000C2280(uint64_t a1)
{
  unint64_t v2 = sub_100027C70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C22BC(uint64_t a1)
{
  unint64_t v2 = sub_100027C70();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000C22F8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v13[6] = a1[6];
  v13[7] = v2;
  long long v3 = a1[9];
  unsigned char v13[8] = a1[8];
  v13[9] = v3;
  long long v4 = a1[3];
  v13[2] = a1[2];
  v13[3] = v4;
  long long v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  long long v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  long long v7 = a2[7];
  v14[6] = a2[6];
  v14[7] = v7;
  long long v8 = a2[9];
  v14[8] = a2[8];
  v14[9] = v8;
  long long v9 = a2[3];
  v14[2] = a2[2];
  v14[3] = v9;
  long long v10 = a2[5];
  v14[4] = a2[4];
  v14[5] = v10;
  long long v11 = a2[1];
  v14[0] = *a2;
  v14[1] = v11;
  return sub_1000C2500((uint64_t)v13, (uint64_t)v14) & 1;
}

unint64_t sub_1000C237C(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = 8 * v11;
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + v15);
    uint64_t result = sub_100121F1C(*(void *)(*(void *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v16) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_1000C2500(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && v4 == v5;
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_11:
  if (*(double *)(a1 + 24) != *(double *)(a2 + 24)
    || (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || ((*(unsigned __int8 *)(a1 + 48) ^ *(unsigned __int8 *)(a2 + 48)) & 1) != 0
    || *(double *)(a1 + 56) != *(double *)(a2 + 56)
    || *(double *)(a1 + 64) != *(double *)(a2 + 64)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(void *)(a1 + 88) != *(void *)(a2 + 88)
    || *(double *)(a1 + 96) != *(double *)(a2 + 96)
    || *(double *)(a1 + 104) != *(double *)(a2 + 104)
    || *(double *)(a1 + 112) != *(double *)(a2 + 112)
    || *(double *)(a1 + 120) != *(double *)(a2 + 120)
    || (*(void *)(a1 + 128) != *(void *)(a2 + 128) || *(void *)(a1 + 136) != *(void *)(a2 + 136))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(void *)(a1 + 144) != *(void *)(a2 + 144))
  {
    return 0;
  }
  unint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = *(void *)(a2 + 152);

  return sub_1000C237C(v7, v8);
}

uint64_t sub_1000C269C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100374A70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7562610 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100374A90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001003747A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100374AB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100374AD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x8000000100374AF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100374B20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6449737270 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100374B40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100374B60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100374B80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100374BA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100374BC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6F69746172657469 && a2 == 0xEF7265626D754E6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100374BE0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

uint64_t sub_1000C2CE0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(&qword_1003EE510);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C2D44(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C2D9C(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for ServerContext.CodingKeys()
{
  return &type metadata for ServerContext.CodingKeys;
}

unint64_t sub_1000C2E30()
{
  unint64_t result = qword_1003EE530;
  if (!qword_1003EE530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE530);
  }
  return result;
}

unint64_t sub_1000C2E88()
{
  unint64_t result = qword_1003EE538;
  if (!qword_1003EE538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE538);
  }
  return result;
}

unint64_t sub_1000C2EE0()
{
  unint64_t result = qword_1003EE540;
  if (!qword_1003EE540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE540);
  }
  return result;
}

BOOL sub_1000C2F88(char *a1, char *a2)
{
  return qword_10036BEF0[*a1] == qword_10036BEF0[*a2];
}

Swift::Int sub_1000C2FAC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10036BEF0[v1]);
  return Hasher._finalize()();
}

void sub_1000C2FFC()
{
  Hasher._combine(_:)(qword_10036BEF0[*v0]);
}

Swift::Int sub_1000C3034()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10036BEF0[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000C3080@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100036DB8(*a1);
  *a2 = result;
  return result;
}

void sub_1000C30AC(void *a1@<X8>)
{
  *a1 = qword_10036BEF0[*v1];
}

uint64_t sub_1000C30C4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000C3124()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned char *storeEnumTagSinglePayload for ServerStatusCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *uint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C3498);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerStatusCode()
{
  return &type metadata for ServerStatusCode;
}

unint64_t sub_1000C34D4()
{
  unint64_t result = qword_1003EE548;
  if (!qword_1003EE548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE548);
  }
  return result;
}

unint64_t sub_1000C3528()
{
  unint64_t result = qword_1003EE550;
  if (!qword_1003EE550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE550);
  }
  return result;
}

uint64_t sub_1000C357C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3590);
}

uint64_t sub_1000C3590(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000C35FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3610);
}

uint64_t sub_1000C3610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SavePreferencesEndpoint()
{
  uint64_t result = qword_1003EE5B0;
  if (!qword_1003EE5B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C36CC(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 1856) = a3;
  *(void *)(v3 + 1800) = a2;
  *(void *)(v3 + 1792) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 1808) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000C3768;
  return daemon.getter();
}

uint64_t sub_1000C3768(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1816) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1824) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000471A4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471A4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000C3944;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000C3944(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[229] = a1;
  v3[230] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000C3CEC, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[231] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1000C3AD8;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000C3AD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1832);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000C3BE8, v1, 0);
}

uint64_t sub_1000C3BE8()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_1000C3D70, 0, 0);
}

uint64_t sub_1000C3CEC()
{
  uint64_t v1 = *(void *)(v0 + 1800);
  swift_release();
  sub_1000C6758(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000C3D70()
{
  int v1 = *(unsigned __int8 *)(v0 + 1856);
  uint64_t v2 = *(void *)(v0 + 1800);
  uint64_t v3 = *(void *)(v0 + 1792);
  swift_release();
  sub_100013B50(v0 + 1312, v3, &qword_1003ED068);
  uint64_t v4 = type metadata accessor for SavePreferencesRequestContent(0);
  sub_1000C66F0(v2, v3 + *(int *)(v4 + 20), (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_100044014(&qword_1003EE620);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  strcpy((char *)(v5 + 32), "hideLocation");
  *(unsigned char *)(v5 + 45) = 0;
  *(_WORD *)(v5 + 46) = -5120;
  uint64_t v6 = 28494;
  if (v1) {
    uint64_t v6 = 7562585;
  }
  unint64_t v7 = 0xE200000000000000;
  if (v1) {
    unint64_t v7 = 0xE300000000000000;
  }
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = v7;
  unint64_t v8 = sub_10000F0C0(v5);
  sub_1000C6758(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  *(void *)(v3 + *(int *)(v4 + 24)) = v8;
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000C3EC0(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 1856) = a3;
  *(void *)(v3 + 1800) = a2;
  *(void *)(v3 + 1792) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 1808) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000C3F5C;
  return daemon.getter();
}

uint64_t sub_1000C3F5C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1816) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1824) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000471A4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471A4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000C4138;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000C4138(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[229] = a1;
  v3[230] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000CA548, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[231] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1000C42CC;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000C42CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1832);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000C43DC, v1, 0);
}

uint64_t sub_1000C43DC()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_1000C44E0, 0, 0);
}

uint64_t sub_1000C44E0()
{
  int v1 = *(unsigned __int8 *)(v0 + 1856);
  uint64_t v2 = *(void *)(v0 + 1800);
  uint64_t v3 = *(void *)(v0 + 1792);
  swift_release();
  sub_100013B50(v0 + 1312, v3, &qword_1003ED068);
  uint64_t v4 = type metadata accessor for SavePreferencesRequestContent(0);
  sub_1000C66F0(v2, v3 + *(int *)(v4 + 20), (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_100044014(&qword_1003EE620);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  *(void *)(v5 + 32) = 0xD000000000000013;
  *(void *)(v5 + 40) = 0x8000000100374830;
  uint64_t v6 = 28494;
  if (v1) {
    uint64_t v6 = 7562585;
  }
  unint64_t v7 = 0xE200000000000000;
  if (v1) {
    unint64_t v7 = 0xE300000000000000;
  }
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = v7;
  unint64_t v8 = sub_10000F0C0(v5);
  sub_1000C6758(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  *(void *)(v3 + *(int *)(v4 + 24)) = v8;
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000C462C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EE788);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_1000C9DEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v12, &qword_1003ED068);
  sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED068);
  v12[183] = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for SaveMeDevicePreferencesRequestContent(0);
    v11[0] = 1;
    type metadata accessor for ClientContext();
    sub_1000471A4(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000C485C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003EE7B0);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SaveMeDevicePreferencesRequestContent(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v27 = a1;
  sub_100042524(a1, v12);
  sub_1000C9DEC();
  uint64_t v26 = v8;
  uint64_t v13 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)v27);
  }
  uint64_t v14 = v24;
  uint64_t v28 = v9;
  v31[183] = 0;
  sub_100036EB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v31, (uint64_t)v30, &qword_1003ED068);
  sub_100013B50((uint64_t)v30, (uint64_t)v11, &qword_1003ED068);
  char v29 = 1;
  sub_1000471A4(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  uint64_t v15 = (uint64_t)v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v28;
  sub_10004E45C(v15, (uint64_t)&v11[*(int *)(v28 + 20)]);
  char v29 = 2;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v25);
  int v20 = (uint64_t *)&v11[*(int *)(v16 + 24)];
  *int v20 = v17;
  v20[1] = v19;
  sub_1000C66F0((uint64_t)v11, v23, type metadata accessor for SaveMeDevicePreferencesRequestContent);
  sub_1000233E4((uint64_t)v27);
  return sub_1000C6758((uint64_t)v11, type metadata accessor for SaveMeDevicePreferencesRequestContent);
}

uint64_t sub_1000C4C38(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EE798);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000C9E40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v13, &qword_1003ED068);
  sub_100013B50((uint64_t)v13, (uint64_t)v12, &qword_1003ED068);
  char v14 = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for SavePreferencesRequestContent(0);
    LOBYTE(v12[0]) = 1;
    type metadata accessor for ClientContext();
    sub_1000471A4(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[0] = *(void *)(v3 + *(int *)(v9 + 24));
    char v14 = 2;
    sub_100044014(&qword_1003ED418);
    sub_10008FBB8(&qword_1003ED438);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000C4EAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100044014(&qword_1003EE7A8);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SavePreferencesRequestContent(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v24 = a1;
  sub_100042524(a1, v11);
  sub_1000C9E40();
  uint64_t v22 = v7;
  uint64_t v12 = v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return sub_1000233E4((uint64_t)v24);
  }
  uint64_t v13 = v21;
  uint64_t v25 = v8;
  uint64_t v14 = (uint64_t)v10;
  v28[183] = 0;
  sub_100036EB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v28, (uint64_t)v27, &qword_1003ED068);
  sub_100013B50((uint64_t)v27, (uint64_t)v10, &qword_1003ED068);
  LOBYTE(v26) = 1;
  sub_1000471A4(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  uint64_t v15 = (uint64_t)v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v25;
  sub_10004E45C(v15, v14 + *(int *)(v25 + 20));
  sub_100044014(&qword_1003ED418);
  v28[182] = 2;
  sub_10008FBB8((unint64_t *)&qword_1003ED420);
  uint64_t v17 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v23);
  *(void *)(v14 + *(int *)(v16 + 24)) = v26;
  sub_1000C66F0(v14, v20, type metadata accessor for SavePreferencesRequestContent);
  sub_1000233E4((uint64_t)v24);
  return sub_1000C6758(v14, type metadata accessor for SavePreferencesRequestContent);
}

uint64_t sub_1000C52C8(uint64_t a1)
{
  unint64_t v2 = sub_1000C9E94();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_1000C5304()
{
  uint64_t v1 = 0x6F43746E65696C63;
  if (*v0 != 1) {
    uint64_t v1 = 0x656369766544656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F43726576726573;
  }
}

uint64_t sub_1000C536C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000CA214(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C5394(uint64_t a1)
{
  unint64_t v2 = sub_1000C9DEC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C53D0(uint64_t a1)
{
  unint64_t v2 = sub_1000C9DEC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C540C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C485C(a1, a2);
}

uint64_t sub_1000C5424(void *a1)
{
  return sub_1000C462C(a1);
}

uint64_t sub_1000C543C()
{
  uint64_t v1 = 0x6F43746E65696C63;
  if (*v0 != 1) {
    uint64_t v1 = 0x7366657270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F43726576726573;
  }
}

uint64_t sub_1000C549C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000CA3B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C54C4(uint64_t a1)
{
  unint64_t v2 = sub_1000C9E40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C5500(uint64_t a1)
{
  unint64_t v2 = sub_1000C9E40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C553C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C4EAC(a1, a2);
}

uint64_t sub_1000C5554(void *a1)
{
  return sub_1000C4C38(a1);
}

uint64_t sub_1000C556C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[227] = a3;
  v3[226] = a2;
  v3[225] = a1;
  uint64_t v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v3[228] = v4;
  v3[229] = *(void *)(v4 - 8);
  v3[230] = swift_task_alloc();
  v3[231] = type metadata accessor for SaveMeDevicePreferencesRequestContent(0);
  v3[232] = swift_task_alloc();
  v3[233] = swift_task_alloc();
  v3[234] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Account();
  v3[235] = v5;
  v3[236] = *(void *)(v5 - 8);
  v3[237] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v3[238] = swift_task_alloc();
  v3[239] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v3[240] = swift_task_alloc();
  v3[241] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v3[242] = swift_task_alloc();
  v3[243] = swift_task_alloc();
  return _swift_task_switch(sub_1000C5798, 0, 0);
}

uint64_t sub_1000C5798()
{
  uint64_t v1 = v0[241];
  uint64_t v17 = v0[240];
  uint64_t v2 = v0[239];
  uint64_t v3 = v0[238];
  uint64_t v4 = v0[237];
  uint64_t v5 = v0[236];
  uint64_t v6 = v0[235];
  uint64_t v7 = v0[225];
  v0[244] = sub_10004D088();
  uint64_t v8 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v2, 1, 1, v9);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v10(v4, v7, v6);
  sub_100013210(v2, v3, &qword_1003ED110);
  sub_100013210(v1, v17, &qword_1003F3B30);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[245] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000C595C;
  uint64_t v12 = v0[243];
  uint64_t v13 = v0[240];
  uint64_t v14 = v0[238];
  uint64_t v15 = v0[237];
  return sub_1000AD580(v12, v15, v14, v13);
}

uint64_t sub_1000C595C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1944);
  uint64_t v3 = *(void *)(*v0 + 1936);
  uint64_t v4 = *(void *)(*v0 + 1928);
  uint64_t v5 = *(void *)(*v0 + 1912);
  uint64_t v8 = *v0;
  swift_task_dealloc();
  sub_10000A520(v5, &qword_1003ED110);
  sub_10000A520(v4, &qword_1003F3B30);
  sub_1000C66F0(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 1968) = v6;
  *uint64_t v6 = v8;
  v6[1] = sub_1000C5B28;
  return daemon.getter();
}

uint64_t sub_1000C5B28(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1976) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1984) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000471A4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471A4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000C5D04;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000C5D04(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[249] = a1;
  v3[250] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000C60AC, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[251] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1000C5E98;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000C5E98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1992);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000C5FA8, v1, 0);
}

uint64_t sub_1000C5FA8()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_1000C6234, 0, 0);
}

uint64_t sub_1000C60AC()
{
  uint64_t v1 = v0[243];
  uint64_t v2 = v0[242];
  uint64_t v3 = v0[236];
  uint64_t v4 = v0[235];
  uint64_t v5 = v0[225];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000C6758(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  sub_1000C6758(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000C6234()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[242];
  uint64_t v2 = v0[234];
  uint64_t v3 = v0[231];
  uint64_t v4 = v0[227];
  uint64_t v5 = v0[226];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v2, &qword_1003ED068);
  sub_10004E45C(v1, v2 + *(int *)(v3 + 20));
  uint64_t v6 = (void *)(v2 + *(int *)(v3 + 24));
  *uint64_t v6 = v5;
  v6[1] = v4;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v7 = v0[234];
  uint64_t v8 = v0[233];
  uint64_t v9 = type metadata accessor for Logger();
  sub_100044058(v9, (uint64_t)qword_10040B4F8);
  sub_1000C66F0(v7, v8, type metadata accessor for SaveMeDevicePreferencesRequestContent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[233];
  if (v12)
  {
    uint64_t v14 = v0[232];
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    sub_1000C66F0(v13, v14, type metadata accessor for SaveMeDevicePreferencesRequestContent);
    uint64_t v16 = String.init<A>(describing:)();
    v0[224] = sub_100037004(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C6758(v13, type metadata accessor for SaveMeDevicePreferencesRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request content: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000C6758(v0[233], type metadata accessor for SaveMeDevicePreferencesRequestContent);
  }

  uint64_t v18 = v0[250];
  uint64_t v19 = (void *)v0[230];
  uint64_t v20 = v0[229];
  uint64_t v21 = v0[228];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v19 = sub_1000CA550;
  v19[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v19, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_1000471A4(&qword_1003EE5F0, (void (*)(uint64_t))type metadata accessor for SaveMeDevicePreferencesRequestContent);
  uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v24 = v23;
  swift_release();
  if (v18)
  {
    swift_errorRelease();
    uint64_t v22 = 0;
    unint64_t v24 = 0xF000000000000000;
  }
  uint64_t v25 = v0[243];
  uint64_t v26 = v0[234];
  (*(void (**)(void, void))(v0[236] + 8))(v0[225], v0[235]);
  sub_1000C6758(v26, type metadata accessor for SaveMeDevicePreferencesRequestContent);
  sub_1000C6758(v25, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRetain();
  sub_1000287E4(v22, v24);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v22, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v28 = v0[244];
  return v27(v28, v22, v24);
}

uint64_t type metadata accessor for SaveMeDevicePreferencesRequestContent(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003EE728);
}

uint64_t sub_1000C66F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C6758(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000C67B8(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 208) = a2;
  *(void *)(v2 + 40) = a1;
  uint64_t v3 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = *(void *)(v3 - 8);
  *(void *)(v2 + 64) = swift_task_alloc();
  *(void *)(v2 + 72) = type metadata accessor for SavePreferencesRequestContent(0);
  *(void *)(v2 + 80) = swift_task_alloc();
  *(void *)(v2 + 88) = swift_task_alloc();
  *(void *)(v2 + 96) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Account();
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = *(void *)(v4 - 8);
  *(void *)(v2 + 120) = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  *(void *)(v2 + 128) = swift_task_alloc();
  *(void *)(v2 + 136) = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  *(void *)(v2 + 144) = swift_task_alloc();
  *(void *)(v2 + 152) = swift_task_alloc();
  type metadata accessor for ClientContext();
  *(void *)(v2 + 160) = swift_task_alloc();
  *(void *)(v2 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_1000C69E0, 0, 0);
}

uint64_t sub_1000C69E0()
{
  uint64_t v1 = v0[19];
  uint64_t v17 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[5];
  v0[22] = sub_10004D088();
  uint64_t v8 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v2, 1, 1, v9);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v10(v4, v7, v6);
  sub_100013210(v2, v3, &qword_1003ED110);
  sub_100013210(v1, v17, &qword_1003F3B30);
  os_log_type_t v11 = (void *)swift_task_alloc();
  v0[23] = v11;
  *os_log_type_t v11 = v0;
  v11[1] = sub_1000C6B94;
  uint64_t v12 = v0[21];
  uint64_t v13 = v0[18];
  uint64_t v14 = v0[15];
  uint64_t v15 = v0[16];
  return sub_1000AD580(v12, v14, v15, v13);
}

uint64_t sub_1000C6B94()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168);
  uint64_t v3 = *(void *)(*v0 + 160);
  uint64_t v4 = *(void *)(*v0 + 152);
  uint64_t v5 = *(void *)(*v0 + 136);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  sub_10000A520(v5, &qword_1003ED110);
  sub_10000A520(v4, &qword_1003F3B30);
  sub_1000C66F0(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 192) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000C6D80;
  uint64_t v8 = *(void *)(v1 + 160);
  uint64_t v9 = *(void *)(v1 + 96);
  char v10 = *(unsigned char *)(v1 + 208);
  return sub_1000C36CC(v9, v8, v10);
}

uint64_t sub_1000C6D80()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000C74BC;
  }
  else
  {
    uint64_t v2 = sub_1000C6E9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C6E9C()
{
  uint64_t v40 = v0;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4F8);
  sub_1000C66F0(v2, v1, type metadata accessor for SavePreferencesRequestContent);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[11];
  if (v6)
  {
    uint64_t v8 = v0[10];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_1000C66F0(v7, v8, type metadata accessor for SavePreferencesRequestContent);
    uint64_t v10 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v10, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C6758(v7, type metadata accessor for SavePreferencesRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Request content: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000C6758(v0[11], type metadata accessor for SavePreferencesRequestContent);
  }

  uint64_t v37 = v0[25];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[10];
  uint64_t v15 = v0[7];
  uint64_t v14 = (void *)v0[8];
  uint64_t v16 = v0[6];
  sub_100044014(&qword_1003EE608);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100367D70;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v38 = 0xD00000000000001DLL;
  unint64_t v39 = 0x8000000100374D40;
  sub_1000C66F0(v12, v13, type metadata accessor for SavePreferencesRequestContent);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v38;
  unint64_t v20 = v39;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v20;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v14 = sub_1000CA550;
  v14[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v14, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v16);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_1000471A4(&qword_1003EE610, (void (*)(uint64_t))type metadata accessor for SavePreferencesRequestContent);
  uint64_t v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v37)
  {
    swift_errorRelease();
    uint64_t v23 = 0;
    unint64_t v24 = 0xF000000000000000;
  }
  else
  {
    uint64_t v23 = v21;
    unint64_t v24 = v22;
  }
  uint64_t v25 = v0[21];
  uint64_t v26 = v0[14];
  uint64_t v35 = v0[13];
  uint64_t v36 = v0[12];
  uint64_t v34 = v0[5];
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100367D70;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  sub_1000287E4(v23, v24);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v38 = 0xD000000000000013;
  unint64_t v39 = 0x8000000100374D80;
  v0[2] = v23;
  v0[3] = v24;
  sub_1000287E4(v23, v24);
  sub_100044014(&qword_1003EE618);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v38;
  unint64_t v30 = v39;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 32) = v29;
  *(void *)(v27 + 40) = v30;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v34, v35);
  sub_1000C6758(v36, type metadata accessor for SavePreferencesRequestContent);
  sub_1000C6758(v25, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRetain();
  sub_1000287E4(v23, v24);
  sub_1000440E8(v23, v24);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v32 = v0[22];
  return v31(v32, v23, v24);
}

uint64_t sub_1000C74BC()
{
  uint64_t v1 = v0[21];
  (*(void (**)(void, void))(v0[14] + 8))(v0[5], v0[13]);
  sub_1000C6758(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000C75F0(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 208) = a2;
  *(void *)(v2 + 40) = a1;
  uint64_t v3 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = *(void *)(v3 - 8);
  *(void *)(v2 + 64) = swift_task_alloc();
  *(void *)(v2 + 72) = type metadata accessor for SavePreferencesRequestContent(0);
  *(void *)(v2 + 80) = swift_task_alloc();
  *(void *)(v2 + 88) = swift_task_alloc();
  *(void *)(v2 + 96) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Account();
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = *(void *)(v4 - 8);
  *(void *)(v2 + 120) = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  *(void *)(v2 + 128) = swift_task_alloc();
  *(void *)(v2 + 136) = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  *(void *)(v2 + 144) = swift_task_alloc();
  *(void *)(v2 + 152) = swift_task_alloc();
  type metadata accessor for ClientContext();
  *(void *)(v2 + 160) = swift_task_alloc();
  *(void *)(v2 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_1000C7818, 0, 0);
}

uint64_t sub_1000C7818()
{
  uint64_t v1 = v0[19];
  uint64_t v17 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[5];
  v0[22] = sub_10004D088();
  uint64_t v8 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v2, 1, 1, v9);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v10(v4, v7, v6);
  sub_100013210(v2, v3, &qword_1003ED110);
  sub_100013210(v1, v17, &qword_1003F3B30);
  unint64_t v11 = (void *)swift_task_alloc();
  v0[23] = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1000C79CC;
  uint64_t v12 = v0[21];
  uint64_t v13 = v0[18];
  uint64_t v14 = v0[15];
  uint64_t v15 = v0[16];
  return sub_1000AD580(v12, v14, v15, v13);
}

uint64_t sub_1000C79CC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168);
  uint64_t v3 = *(void *)(*v0 + 160);
  uint64_t v4 = *(void *)(*v0 + 152);
  uint64_t v5 = *(void *)(*v0 + 136);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  sub_10000A520(v5, &qword_1003ED110);
  sub_10000A520(v4, &qword_1003F3B30);
  sub_1000C66F0(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 192) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000C7BB8;
  uint64_t v8 = *(void *)(v1 + 160);
  uint64_t v9 = *(void *)(v1 + 96);
  char v10 = *(unsigned char *)(v1 + 208);
  return sub_1000C3EC0(v9, v8, v10);
}

uint64_t sub_1000C7BB8()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000CA54C;
  }
  else
  {
    uint64_t v2 = sub_1000C7CD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C7CD4()
{
  uint64_t v40 = v0;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4F8);
  sub_1000C66F0(v2, v1, type metadata accessor for SavePreferencesRequestContent);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[11];
  if (v6)
  {
    uint64_t v8 = v0[10];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_1000C66F0(v7, v8, type metadata accessor for SavePreferencesRequestContent);
    uint64_t v10 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v10, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C6758(v7, type metadata accessor for SavePreferencesRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Request content: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000C6758(v0[11], type metadata accessor for SavePreferencesRequestContent);
  }

  uint64_t v37 = v0[25];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[10];
  uint64_t v15 = v0[7];
  uint64_t v14 = (void *)v0[8];
  uint64_t v16 = v0[6];
  sub_100044014(&qword_1003EE608);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100367D70;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v38 = 0xD00000000000001DLL;
  unint64_t v39 = 0x8000000100374D40;
  sub_1000C66F0(v12, v13, type metadata accessor for SavePreferencesRequestContent);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v38;
  unint64_t v20 = v39;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v20;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v14 = sub_1000CA550;
  v14[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v14, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v16);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_1000471A4(&qword_1003EE610, (void (*)(uint64_t))type metadata accessor for SavePreferencesRequestContent);
  uint64_t v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v37)
  {
    swift_errorRelease();
    uint64_t v23 = 0;
    unint64_t v24 = 0xF000000000000000;
  }
  else
  {
    uint64_t v23 = v21;
    unint64_t v24 = v22;
  }
  uint64_t v25 = v0[21];
  uint64_t v26 = v0[14];
  uint64_t v35 = v0[13];
  uint64_t v36 = v0[12];
  uint64_t v34 = v0[5];
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100367D70;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  sub_1000287E4(v23, v24);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v38 = 0xD00000000000001ALL;
  unint64_t v39 = 0x8000000100374D60;
  v0[2] = v23;
  v0[3] = v24;
  sub_1000287E4(v23, v24);
  sub_100044014(&qword_1003EE618);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v38;
  unint64_t v30 = v39;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 32) = v29;
  *(void *)(v27 + 40) = v30;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v34, v35);
  sub_1000C6758(v36, type metadata accessor for SavePreferencesRequestContent);
  sub_1000C6758(v25, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRetain();
  sub_1000287E4(v23, v24);
  sub_1000440E8(v23, v24);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v32 = v0[22];
  return v31(v32, v23, v24);
}

uint64_t type metadata accessor for SavePreferencesRequestContent(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003EE690);
}

void *sub_1000C8314(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    uint64_t v82 = a3;
    *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    unint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v76 = v17 + v25;
    uint64_t v78 = &v16[v25];
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v74(v78, v76, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    Swift::String v28 = &v16[v27];
    uint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)Swift::String v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = (void *)(v17 + v31);
    uint64_t v81 = v33[1];
    *(void *)uint64_t v32 = *v33;
    *((void *)v32 + 1) = v81;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v80 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v80;
    uint64_t v37 = v24[18];
    uint64_t v38 = &v16[v37];
    unint64_t v39 = (void *)(v17 + v37);
    uint64_t v79 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v79;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v77 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v77;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    uint64_t v45 = (void *)(v17 + v43);
    uint64_t v75 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v75;
    uint64_t v46 = v24[21];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v73 = v48[1];
    *(void *)uint64_t v47 = *v48;
    *((void *)v47 + 1) = v73;
    uint64_t v49 = v24[22];
    uint64_t v50 = &v16[v49];
    uint64_t v51 = (void *)(v17 + v49);
    uint64_t v52 = v51[1];
    *(void *)uint64_t v50 = *v51;
    *((void *)v50 + 1) = v52;
    uint64_t v53 = v24[23];
    uint64_t v54 = &v16[v53];
    uint64_t v55 = (void *)(v17 + v53);
    uint64_t v56 = v55[1];
    *(void *)uint64_t v54 = *v55;
    *((void *)v54 + 1) = v56;
    uint64_t v57 = v24[24];
    uint64_t v58 = &v16[v57];
    uint64_t v59 = v17 + v57;
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = *(unsigned char *)(v59 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v60 = v24[27];
    uint64_t v61 = &v16[v60];
    uint64_t v62 = (void *)(v17 + v60);
    uint64_t v63 = v62[1];
    *(void *)uint64_t v61 = *v62;
    *((void *)v61 + 1) = v63;
    uint64_t v64 = v24[28];
    uint64_t v65 = &v16[v64];
    uint64_t v66 = (void *)(v17 + v64);
    uint64_t v67 = v66[1];
    *(void *)uint64_t v65 = *v66;
    *((void *)v65 + 1) = v67;
    uint64_t v68 = v24[29];
    uint64_t v69 = &v16[v68];
    uint64_t v70 = (void *)(v17 + v68);
    uint64_t v71 = v70[1];
    *(void *)uint64_t v69 = *v70;
    *((void *)v69 + 1) = v71;
    *(void *)((char *)v4 + *(int *)(v82 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v82 + 24));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000C8714(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C88D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  uint64_t v80 = a3;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v74 = v15 + v23;
  uint64_t v76 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72(v76, v74, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v79 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v79;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v78 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v78;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = (void *)(v15 + v35);
  uint64_t v77 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v77;
  uint64_t v38 = v22[19];
  unint64_t v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v75 = v40[1];
  *unint64_t v39 = *v40;
  v39[1] = v75;
  uint64_t v41 = v22[20];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  uint64_t v73 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v73;
  uint64_t v44 = v22[21];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  uint64_t v71 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v71;
  uint64_t v47 = v22[22];
  uint64_t v48 = (void *)(v14 + v47);
  uint64_t v49 = (void *)(v15 + v47);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = v22[23];
  uint64_t v52 = (void *)(v14 + v51);
  uint64_t v53 = (void *)(v15 + v51);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = v22[24];
  uint64_t v56 = v14 + v55;
  uint64_t v57 = v15 + v55;
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = *(unsigned char *)(v57 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v58 = v22[27];
  uint64_t v59 = (void *)(v14 + v58);
  uint64_t v60 = (void *)(v15 + v58);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = v22[28];
  uint64_t v63 = (void *)(v14 + v62);
  uint64_t v64 = (void *)(v15 + v62);
  uint64_t v65 = v64[1];
  *uint64_t v63 = *v64;
  v63[1] = v65;
  uint64_t v66 = v22[29];
  uint64_t v67 = (void *)(v14 + v66);
  uint64_t v68 = (void *)(v15 + v66);
  uint64_t v69 = v68[1];
  *uint64_t v67 = *v68;
  v67[1] = v69;
  *(void *)(a1 + *(int *)(v80 + 24)) = *(void *)(a2 + *(int *)(v80 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000C8C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  unint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *unint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  *uint64_t v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  *uint64_t v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000C9298(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  long long v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = *(int *)(a3 + 20);
  long long v12 = (char *)a1 + v11;
  long long v13 = (char *)a2 + v11;
  *(_OWORD *)long long v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((unsigned char *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((unsigned char *)a2 + v11 + 56);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  long long v15 = (int *)type metadata accessor for ClientContext();
  uint64_t v16 = v15[12];
  long long v17 = &v12[v16];
  long long v18 = &v13[v16];
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v12[v15[13]] = *(void *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  uint64_t v20 = v15[24];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(void *)&v12[v15[26]] = *(void *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000C9484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  void *v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  *uint64_t v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  *uint64_t v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  int v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  *int v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000C980C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C9820);
}

uint64_t sub_1000C9820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1000C98E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C98F8);
}

uint64_t sub_1000C98F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000C99B8()
{
  return sub_1000C9B88();
}

uint64_t sub_1000C99C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C99DC);
}

uint64_t sub_1000C99DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1000C9AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C9AB8);
}

uint64_t sub_1000C9AB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000C9B7C()
{
  return sub_1000C9B88();
}

uint64_t sub_1000C9B88()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SavePreferencesRequest()
{
  return &type metadata for SavePreferencesRequest;
}

unint64_t sub_1000C9C38()
{
  unint64_t result = qword_1003EE768;
  if (!qword_1003EE768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE768);
  }
  return result;
}

uint64_t sub_1000C9C8C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000471A4(&qword_1003EE770, (void (*)(uint64_t))type metadata accessor for SaveMeDevicePreferencesRequestContent);
  uint64_t result = sub_1000471A4(&qword_1003EE5F0, (void (*)(uint64_t))type metadata accessor for SaveMeDevicePreferencesRequestContent);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000C9D10(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000471A4(&qword_1003EE778, (void (*)(uint64_t))type metadata accessor for SavePreferencesRequestContent);
  uint64_t result = sub_1000471A4(&qword_1003EE610, (void (*)(uint64_t))type metadata accessor for SavePreferencesRequestContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000C9D98()
{
  unint64_t result = qword_1003EE780;
  if (!qword_1003EE780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE780);
  }
  return result;
}

unint64_t sub_1000C9DEC()
{
  unint64_t result = qword_1003EE790;
  if (!qword_1003EE790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE790);
  }
  return result;
}

unint64_t sub_1000C9E40()
{
  unint64_t result = qword_1003EE7A0;
  if (!qword_1003EE7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7A0);
  }
  return result;
}

unint64_t sub_1000C9E94()
{
  unint64_t result = qword_1003EE7B8;
  if (!qword_1003EE7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SavePreferencesRequestContent.CodingKeys()
{
  return &type metadata for SavePreferencesRequestContent.CodingKeys;
}

unsigned char *_s13findmylocated29SavePreferencesRequestContentV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C9FCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SaveMeDevicePreferencesRequestContent.CodingKeys()
{
  return &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys;
}

unint64_t sub_1000CA008()
{
  unint64_t result = qword_1003EE7C0;
  if (!qword_1003EE7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7C0);
  }
  return result;
}

unint64_t sub_1000CA060()
{
  unint64_t result = qword_1003EE7C8;
  if (!qword_1003EE7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7C8);
  }
  return result;
}

unint64_t sub_1000CA0B8()
{
  unint64_t result = qword_1003EE7D0;
  if (!qword_1003EE7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7D0);
  }
  return result;
}

unint64_t sub_1000CA110()
{
  unint64_t result = qword_1003EE7D8;
  if (!qword_1003EE7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7D8);
  }
  return result;
}

unint64_t sub_1000CA168()
{
  unint64_t result = qword_1003EE7E0;
  if (!qword_1003EE7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7E0);
  }
  return result;
}

unint64_t sub_1000CA1C0()
{
  unint64_t result = qword_1003EE7E8;
  if (!qword_1003EE7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE7E8);
  }
  return result;
}

uint64_t sub_1000CA214(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656369766544656DLL && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000CA3B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7366657270 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000CA550(uint64_t a1, void *a2)
{
  sub_100042524(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  Date.epoch.getter();
  sub_1000CA5F8((uint64_t)v3, v4);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return sub_1000233E4((uint64_t)v3);
}

uint64_t sub_1000CA5F8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000CA648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                                                   + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100018CD0;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_1000CA720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.upload(endpoint:content:credential:)
                                                                   + async function pointer to dispatch thunk of ServerInteractionController.upload(endpoint:content:credential:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10004A274;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_1000CA7F8@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v5 = type metadata accessor for TimeZone();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014((uint64_t *)&unk_1003EE830);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013210(v2, (uint64_t)v11, (uint64_t *)&unk_1003EE830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    uint64_t v12 = type metadata accessor for Fence.Schedule();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v16(v8);
    if (v3)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v14 = type metadata accessor for Fence.Schedule();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 0, 1, v14);
    }
  }
}

uint64_t sub_1000CAA38(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  __chkstk_darwin(v4);
  uint64_t v75 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v74 = v6;
  __chkstk_darwin(v6);
  uint64_t v72 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Fence.TimeOfDay();
  uint64_t v84 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100044014(&qword_1003EE810);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v80 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v71 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v83 = (uint64_t)&v71 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v82 = (uint64_t)&v71 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v81 = (uint64_t)&v71 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v71 - v21;
  uint64_t v23 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = [*a1 encryptedValues];
  swift_getObjectType();
  uint64_t v27 = (int *)type metadata accessor for FenceRecord();
  uint64_t v28 = (uint64_t *)(v2 + v27[5]);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *((void *)&v86 + 1) = &type metadata for String;
  uint64_t v87 = &protocol witness table for String;
  *(void *)&long long v85 = v30;
  *((void *)&v85 + 1) = v29;
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v31 = *(void *)(v2 + v27[6]);
  NSString v32 = String._bridgeToObjectiveC()();
  [v26 setObject:v31 forKeyedSubscript:v32];

  uint64_t v33 = *(void *)(v2 + v27[7]);
  *((void *)&v86 + 1) = &type metadata for Int;
  uint64_t v87 = &protocol witness table for Int;
  *(void *)&long long v85 = v33;
  CKRecordKeyValueSetting.subscript.setter();
  sub_100013210(v2 + v27[9], (uint64_t)v25, (uint64_t *)&unk_1003EE800);
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v25, 1, v34) == 1)
  {
    sub_10000A520((uint64_t)v25, (uint64_t *)&unk_1003EE800);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
  }
  else
  {
    *((void *)&v86 + 1) = v34;
    uint64_t v87 = &protocol witness table for Date;
    uint64_t v36 = sub_10003E0F4((uint64_t *)&v85);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(v36, v25, v34);
  }
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v37 = (uint64_t *)(v2 + v27[10]);
  uint64_t v38 = v37[1];
  if (v38)
  {
    uint64_t v39 = *v37;
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v39;
    *((void *)&v85 + 1) = v38;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v40 = v37[3];
  if (v40)
  {
    uint64_t v41 = v37[2];
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v41;
    *((void *)&v85 + 1) = v40;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v42 = v37[5];
  if (v42)
  {
    uint64_t v43 = v37[4];
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v43;
    *((void *)&v85 + 1) = v42;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v44 = v37[7];
  if (v44)
  {
    uint64_t v45 = v37[6];
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v45;
    *((void *)&v85 + 1) = v44;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v46 = v37[9];
  if (v46)
  {
    uint64_t v47 = v37[8];
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v47;
    *((void *)&v85 + 1) = v46;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v48 = v37[11];
  if (v48)
  {
    uint64_t v49 = v37[10];
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v49;
    *((void *)&v85 + 1) = v48;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v50 = v2 + v27[8];
  sub_100013210(v50, (uint64_t)v22, &qword_1003EE810);
  uint64_t v51 = type metadata accessor for Fence.Schedule();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (v53(v22, 1, v51) == 1)
  {
    sub_10000A520((uint64_t)v22, &qword_1003EE810);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
    uint64_t v54 = v78;
  }
  else
  {
    Fence.Schedule.start.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v51);
    uint64_t v55 = Fence.TimeOfDay.hour.getter();
    uint64_t v54 = v78;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v78);
    *((void *)&v86 + 1) = &type metadata for UInt;
    uint64_t v87 = &protocol witness table for UInt;
    *(void *)&long long v85 = v55;
  }
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v56 = v81;
  sub_100013210(v50, v81, &qword_1003EE810);
  if (v53((char *)v56, 1, v51) == 1)
  {
    sub_10000A520(v56, &qword_1003EE810);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
  }
  else
  {
    Fence.Schedule.start.getter();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v56, v51);
    uint64_t v57 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v54);
    *((void *)&v86 + 1) = &type metadata for UInt;
    uint64_t v87 = &protocol witness table for UInt;
    *(void *)&long long v85 = v57;
  }
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v58 = v82;
  sub_100013210(v50, v82, &qword_1003EE810);
  if (v53((char *)v58, 1, v51) == 1)
  {
    sub_10000A520(v58, &qword_1003EE810);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
  }
  else
  {
    Fence.Schedule.end.getter();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v58, v51);
    uint64_t v59 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v54);
    *((void *)&v86 + 1) = &type metadata for UInt;
    uint64_t v87 = &protocol witness table for UInt;
    *(void *)&long long v85 = v59;
  }
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v60 = v83;
  sub_100013210(v50, v83, &qword_1003EE810);
  if (v53((char *)v60, 1, v51) == 1)
  {
    sub_10000A520(v60, &qword_1003EE810);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
  }
  else
  {
    Fence.Schedule.end.getter();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v60, v51);
    uint64_t v61 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v54);
    *((void *)&v86 + 1) = &type metadata for UInt;
    uint64_t v87 = &protocol witness table for UInt;
    *(void *)&long long v85 = v61;
  }
  uint64_t v62 = (uint64_t)v79;
  CKRecordKeyValueSetting.subscript.setter();
  sub_100013210(v50, v62, &qword_1003EE810);
  if (v53((char *)v62, 1, v51) == 1)
  {
    sub_10000A520(v62, &qword_1003EE810);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v63 = v72;
    Fence.Schedule.daysOfWeek.getter();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v62, v51);
    char v64 = Fence.DaysOfWeek.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v74);
    *((void *)&v86 + 1) = &type metadata for UInt8;
    uint64_t v87 = &protocol witness table for UInt8;
    LOBYTE(v85) = v64;
  }
  uint64_t v65 = (uint64_t)v80;
  CKRecordKeyValueSetting.subscript.setter();
  sub_100013210(v50, v65, &qword_1003EE810);
  if (v53((char *)v65, 1, v51) == 1)
  {
    sub_10000A520(v65, &qword_1003EE810);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v66 = v75;
    Fence.Schedule.timeZone.getter();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v65, v51);
    uint64_t v67 = TimeZone.identifier.getter();
    uint64_t v69 = v68;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v66, v77);
    *((void *)&v86 + 1) = &type metadata for String;
    uint64_t v87 = &protocol witness table for String;
    *(void *)&long long v85 = v67;
    *((void *)&v85 + 1) = v69;
  }
  CKRecordKeyValueSetting.subscript.setter();
  return swift_unknownObjectRelease();
}

unint64_t sub_1000CB700(char a1)
{
  unint64_t result = 0x6C6562616CLL;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 5:
    case 9:
    case 11:
    case 15:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x72616D6563616C70;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0x656C756465686373;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000CB8D8(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = a2;
  v259 = a1;
  uint64_t v248 = type metadata accessor for TimeZone();
  uint64_t v251 = *(void *)(v248 - 8);
  __chkstk_darwin(v248);
  v250 = (char *)&v223 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v255 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  v228 = (char *)&v223 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = sub_100044014(&qword_1003EE958);
  __chkstk_darwin(v244);
  uint64_t v249 = (uint64_t)&v223 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014((uint64_t *)&unk_1003EE960);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v233 = (char *)&v223 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v253 = (uint64_t)&v223 - v11;
  __chkstk_darwin(v10);
  uint64_t v254 = (uint64_t)&v223 - v12;
  uint64_t v13 = type metadata accessor for Fence.TimeOfDay();
  uint64_t v262 = *(void *)(v13 - 8);
  uint64_t v263 = v13;
  __chkstk_darwin(v13);
  v261 = (char *)&v223 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100044014(&qword_1003EE810);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v229 = (uint64_t)&v223 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v247 = (uint64_t)&v223 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v245 = (uint64_t)&v223 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v231 = (uint64_t)&v223 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v243 = (uint64_t)&v223 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v242 = (uint64_t)&v223 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v227 = (uint64_t)&v223 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v241 = (uint64_t)&v223 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v240 = (uint64_t)&v223 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v226 = (uint64_t)&v223 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v239 = (uint64_t)&v223 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v238 = (uint64_t)&v223 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v225 = (uint64_t)&v223 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v237 = (uint64_t)&v223 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v236 = (char *)&v223 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v224 = (uint64_t)&v223 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v235 = (uint64_t)&v223 - v49;
  __chkstk_darwin(v48);
  v252 = (void (**)(uint64_t, uint64_t))((char *)&v223 - v50);
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v260 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  v223 = (char *)&v223 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v234 = sub_100044014(&qword_1003EEEB0);
  __chkstk_darwin(v234);
  uint64_t v54 = (char *)&v223 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v56 = __chkstk_darwin(v55 - 8);
  uint64_t v230 = (uint64_t)&v223 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __chkstk_darwin(v56);
  v232 = (char *)&v223 - v59;
  __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v223 - v60;
  uint64_t v62 = sub_100044014(&qword_1003EE290);
  uint64_t v63 = __chkstk_darwin(v62 - 8);
  uint64_t v65 = (char *)&v223 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = *(void *)(a3 - 8);
  __chkstk_darwin(v63);
  uint64_t v68 = (char *)&v223 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for FenceRecord();
  uint64_t v70 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v72 = (char *)&v223 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v68, ObjectType, a3);
  int v73 = swift_dynamicCast();
  uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
  if (!v73)
  {
    v74(v65, 1, 1, v69);
    sub_10000A520((uint64_t)v65, &qword_1003EE290);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v74(v65, 0, 1, v69);
  sub_1000B8CE4((uint64_t)v65, (uint64_t)v72);
  uint64_t v75 = (id *)[*v259 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v76 = *(int *)(v69 + 20);
  uint64_t v77 = (uint64_t)v264;
  uint64_t v78 = *(void *)&v264[v76];
  uint64_t v79 = *(void *)&v264[v76 + 8];
  uint64_t v80 = &v72[v76];
  uint64_t v82 = *(void *)v80;
  uint64_t v81 = *((void *)v80 + 1);
  if ((v78 != *(void *)v80 || v79 != v81) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v82;
    *((void *)&v265 + 1) = v81;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  v256 = (int *)v69;
  v257 = v72;
  uint64_t v83 = *(int *)(v69 + 24);
  uint64_t v84 = *(void **)(v77 + v83);
  v259 = v75;
  long long v85 = *(void **)&v72[v83];
  sub_10005A548(0, &qword_1003EE970);
  id v86 = v84;
  id v87 = v85;
  uint64_t v88 = v259;
  id v89 = v87;
  char v90 = static NSObject.== infix(_:_:)();

  if ((v90 & 1) == 0)
  {
    id v91 = v89;
    NSString v92 = String._bridgeToObjectiveC()();
    [v88 setObject:v91 forKeyedSubscript:v92];
  }
  uint64_t v94 = v256;
  uint64_t v93 = (uint64_t)v257;
  uint64_t v95 = v256[7];
  uint64_t v96 = (uint64_t)v264;
  uint64_t v97 = *(void *)&v264[v95];
  uint64_t v98 = *(void *)&v257[v95];
  if (v97 != v98)
  {
    *((void *)&v266 + 1) = &type metadata for Int;
    v267 = &protocol witness table for Int;
    *(void *)&long long v265 = v98;
    CKRecordKeyValueSetting.subscript.setter();
  }
  sub_100013210(v96 + v94[9], (uint64_t)v61, (uint64_t *)&unk_1003EE800);
  uint64_t v99 = v93 + v94[9];
  uint64_t v100 = (uint64_t)&v54[*(int *)(v234 + 48)];
  sub_100013210((uint64_t)v61, (uint64_t)v54, (uint64_t *)&unk_1003EE800);
  sub_100013210(v99, v100, (uint64_t *)&unk_1003EE800);
  uint64_t v101 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v260 + 48);
  if (v101((uint64_t)v54, 1, v51) == 1)
  {
    sub_10000A520((uint64_t)v61, (uint64_t *)&unk_1003EE800);
    if (v101(v100, 1, v51) == 1)
    {
      sub_10000A520((uint64_t)v54, (uint64_t *)&unk_1003EE800);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v102 = (uint64_t)v232;
    sub_100013210((uint64_t)v54, (uint64_t)v232, (uint64_t *)&unk_1003EE800);
    if (v101(v100, 1, v51) != 1)
    {
      uint64_t v113 = v260;
      uint64_t v114 = v223;
      (*(void (**)(char *, uint64_t, uint64_t))(v260 + 32))(v223, v100, v51);
      sub_1000D288C(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
      char v115 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v116 = *(void (**)(char *, uint64_t))(v113 + 8);
      v116(v114, v51);
      sub_10000A520((uint64_t)v61, (uint64_t *)&unk_1003EE800);
      v116(v232, v51);
      uint64_t v93 = (uint64_t)v257;
      sub_10000A520((uint64_t)v54, (uint64_t *)&unk_1003EE800);
      if (v115) {
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    sub_10000A520((uint64_t)v61, (uint64_t *)&unk_1003EE800);
    (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v102, v51);
  }
  sub_10000A520((uint64_t)v54, &qword_1003EEEB0);
LABEL_16:
  uint64_t v103 = v230;
  sub_100013210(v99, v230, (uint64_t *)&unk_1003EE800);
  if (v101(v103, 1, v51) == 1)
  {
    sub_10000A520(v103, (uint64_t *)&unk_1003EE800);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    *((void *)&v266 + 1) = v51;
    v267 = &protocol witness table for Date;
    int v104 = sub_10003E0F4((uint64_t *)&v265);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v260 + 32))(v104, v103, v51);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_20:
  uint64_t v105 = v256;
  uint64_t v106 = v256[10];
  uint64_t v107 = (uint64_t)v264;
  int v108 = &v264[v106];
  uint64_t v109 = *(void *)&v264[v106 + 8];
  uint64_t v110 = (void *)(v93 + v106);
  uint64_t v112 = *(void *)(v93 + v106);
  uint64_t v111 = *(void *)(v93 + v106 + 8);
  if (!v109)
  {
    if (!v111) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  if (!v111)
  {
    v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    goto LABEL_31;
  }
  if ((*(void *)v108 != v112 || v109 != v111) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_27:
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v112;
    *((void *)&v265 + 1) = v111;
LABEL_31:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_32:
  uint64_t v117 = *((void *)v108 + 3);
  uint64_t v119 = v110[2];
  uint64_t v118 = v110[3];
  if (!v117)
  {
    if (!v118) {
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  if (!v118)
  {
    v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    goto LABEL_41;
  }
  if ((*((void *)v108 + 2) != v119 || v117 != v118) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_39:
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v119;
    *((void *)&v265 + 1) = v118;
LABEL_41:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_42:
  uint64_t v120 = *((void *)v108 + 5);
  uint64_t v122 = v110[4];
  uint64_t v121 = v110[5];
  if (!v120)
  {
    if (!v121) {
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  if (!v121)
  {
    v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    goto LABEL_51;
  }
  if ((*((void *)v108 + 4) != v122 || v120 != v121) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_49:
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v122;
    *((void *)&v265 + 1) = v121;
LABEL_51:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_52:
  uint64_t v123 = *((void *)v108 + 7);
  uint64_t v125 = v110[6];
  uint64_t v124 = v110[7];
  if (!v123)
  {
    if (!v124) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  if (!v124)
  {
    v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    goto LABEL_61;
  }
  if ((*((void *)v108 + 6) != v125 || v123 != v124) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_59:
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v125;
    *((void *)&v265 + 1) = v124;
LABEL_61:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_62:
  uint64_t v126 = *((void *)v108 + 9);
  uint64_t v128 = v110[8];
  uint64_t v127 = v110[9];
  if (!v126)
  {
    if (!v127) {
      goto LABEL_72;
    }
    goto LABEL_69;
  }
  if (!v127)
  {
    v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    goto LABEL_71;
  }
  if ((*((void *)v108 + 8) != v128 || v126 != v127) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_69:
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v128;
    *((void *)&v265 + 1) = v127;
LABEL_71:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_72:
  uint64_t v129 = *((void *)v108 + 11);
  uint64_t v131 = v110[10];
  uint64_t v130 = v110[11];
  if (!v129)
  {
    uint64_t v133 = (uint64_t)v252;
    if (!v130) {
      goto LABEL_82;
    }
    goto LABEL_79;
  }
  if (!v130)
  {
    v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    uint64_t v133 = (uint64_t)v252;
    goto LABEL_81;
  }
  uint64_t v132 = *((void *)v108 + 10);
  uint64_t v133 = (uint64_t)v252;
  if ((v132 != v131 || v129 != v130) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_79:
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v131;
    *((void *)&v265 + 1) = v130;
LABEL_81:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_82:
  uint64_t v260 = v107 + v105[8];
  sub_100013210(v260, v133, &qword_1003EE810);
  uint64_t v134 = type metadata accessor for Fence.Schedule();
  v135 = *(char **)(v134 - 8);
  uint64_t v136 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v135 + 6);
  unsigned int v137 = v136(v133, 1, v134);
  if (v137 == 1)
  {
    sub_10000A520(v133, &qword_1003EE810);
    uint64_t v140 = 0;
  }
  else
  {
    uint64_t v138 = v133;
    uint64_t v139 = v261;
    Fence.Schedule.start.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v138, v134);
    uint64_t v140 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v139, v263);
  }
  v264 = &v257[v256[8]];
  uint64_t v141 = v235;
  sub_100013210((uint64_t)v264, v235, &qword_1003EE810);
  if (v136(v141, 1, v134) == 1)
  {
    sub_10000A520(v141, &qword_1003EE810);
    uint64_t v142 = (uint64_t)v236;
    if (v137 == 1) {
      goto LABEL_94;
    }
  }
  else
  {
    int v143 = v261;
    Fence.Schedule.start.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v141, v134);
    uint64_t v144 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v143, v263);
    uint64_t v142 = (uint64_t)v236;
    if (v137 != 1 && v140 == v144) {
      goto LABEL_94;
    }
  }
  uint64_t v145 = v224;
  sub_100013210((uint64_t)v264, v224, &qword_1003EE810);
  if (v136(v145, 1, v134) == 1)
  {
    sub_10000A520(v145, &qword_1003EE810);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    v146 = v261;
    Fence.Schedule.start.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v145, v134);
    uint64_t v147 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v146, v263);
    *((void *)&v266 + 1) = &type metadata for UInt;
    v267 = &protocol witness table for UInt;
    *(void *)&long long v265 = v147;
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_94:
  sub_100013210(v260, v142, &qword_1003EE810);
  unsigned int v148 = v136(v142, 1, v134);
  if (v148 == 1)
  {
    sub_10000A520(v142, &qword_1003EE810);
    uint64_t v150 = 0;
  }
  else
  {
    v149 = v261;
    Fence.Schedule.start.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v142, v134);
    uint64_t v150 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v149, v263);
  }
  uint64_t v151 = v246;
  uint64_t v152 = v237;
  sub_100013210((uint64_t)v264, v237, &qword_1003EE810);
  if (v136(v152, 1, v134) == 1)
  {
    sub_10000A520(v152, &qword_1003EE810);
    if (v148 == 1) {
      goto LABEL_106;
    }
  }
  else
  {
    v153 = v261;
    Fence.Schedule.start.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v152, v134);
    uint64_t v154 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v153, v263);
    if (v148 != 1 && v150 == v154) {
      goto LABEL_106;
    }
  }
  uint64_t v155 = v225;
  sub_100013210((uint64_t)v264, v225, &qword_1003EE810);
  if (v136(v155, 1, v134) == 1)
  {
    sub_10000A520(v155, &qword_1003EE810);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    v156 = v261;
    Fence.Schedule.start.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v155, v134);
    uint64_t v157 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v156, v263);
    *((void *)&v266 + 1) = &type metadata for UInt;
    v267 = &protocol witness table for UInt;
    *(void *)&long long v265 = v157;
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_106:
  uint64_t v158 = v238;
  sub_100013210(v260, v238, &qword_1003EE810);
  unsigned int v159 = v136(v158, 1, v134);
  if (v159 == 1)
  {
    sub_10000A520(v158, &qword_1003EE810);
    uint64_t v161 = 0;
  }
  else
  {
    v160 = v261;
    Fence.Schedule.end.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v158, v134);
    uint64_t v161 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v160, v263);
  }
  uint64_t v162 = v239;
  sub_100013210((uint64_t)v264, v239, &qword_1003EE810);
  if (v136(v162, 1, v134) == 1)
  {
    sub_10000A520(v162, &qword_1003EE810);
    if (v159 == 1) {
      goto LABEL_118;
    }
  }
  else
  {
    v163 = v261;
    Fence.Schedule.end.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v162, v134);
    uint64_t v164 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v163, v263);
    if (v159 != 1 && v161 == v164) {
      goto LABEL_118;
    }
  }
  uint64_t v165 = v226;
  sub_100013210((uint64_t)v264, v226, &qword_1003EE810);
  if (v136(v165, 1, v134) == 1)
  {
    sub_10000A520(v165, &qword_1003EE810);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    v166 = v261;
    Fence.Schedule.end.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v165, v134);
    uint64_t v167 = Fence.TimeOfDay.hour.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v166, v263);
    *((void *)&v266 + 1) = &type metadata for UInt;
    v267 = &protocol witness table for UInt;
    *(void *)&long long v265 = v167;
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_118:
  uint64_t v168 = v240;
  sub_100013210(v260, v240, &qword_1003EE810);
  unsigned int v169 = v136(v168, 1, v134);
  if (v169 == 1)
  {
    sub_10000A520(v168, &qword_1003EE810);
    uint64_t v171 = 0;
  }
  else
  {
    v170 = v261;
    Fence.Schedule.end.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v168, v134);
    uint64_t v171 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v170, v263);
  }
  uint64_t v172 = v241;
  sub_100013210((uint64_t)v264, v241, &qword_1003EE810);
  if (v136(v172, 1, v134) == 1)
  {
    sub_10000A520(v172, &qword_1003EE810);
    uint64_t v173 = v254;
    if (v169 == 1) {
      goto LABEL_130;
    }
  }
  else
  {
    v174 = v261;
    Fence.Schedule.end.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v172, v134);
    uint64_t v175 = Fence.TimeOfDay.minute.getter();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v174, v263);
    uint64_t v173 = v254;
    if (v169 != 1 && v171 == v175) {
      goto LABEL_130;
    }
  }
  uint64_t v176 = v227;
  sub_100013210((uint64_t)v264, v227, &qword_1003EE810);
  if (v136(v176, 1, v134) == 1)
  {
    sub_10000A520(v176, &qword_1003EE810);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    v177 = v261;
    Fence.Schedule.end.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v176, v134);
    uint64_t v178 = Fence.TimeOfDay.minute.getter();
    v179 = v177;
    uint64_t v173 = v254;
    (*(void (**)(char *, uint64_t))(v262 + 8))(v179, v263);
    *((void *)&v266 + 1) = &type metadata for UInt;
    v267 = &protocol witness table for UInt;
    *(void *)&long long v265 = v178;
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_130:
  uint64_t v180 = v242;
  sub_100013210(v260, v242, &qword_1003EE810);
  unsigned int v181 = v136(v180, 1, v134);
  v252 = (void (**)(uint64_t, uint64_t))v135;
  if (v181 == 1)
  {
    sub_10000A520(v180, &qword_1003EE810);
    v182 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v255 + 56);
    v182(v173, 1, 1, v151);
  }
  else
  {
    Fence.Schedule.daysOfWeek.getter();
    (*((void (**)(uint64_t, uint64_t))v135 + 1))(v180, v134);
    v182 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v255 + 56);
    v182(v173, 0, 1, v151);
  }
  uint64_t v183 = v243;
  uint64_t v184 = v253;
  sub_100013210((uint64_t)v264, v243, &qword_1003EE810);
  uint64_t v263 = (uint64_t)(v135 + 48);
  unsigned int v185 = v136(v183, 1, v134);
  uint64_t v186 = v249;
  v187 = v136;
  if (v185 == 1)
  {
    sub_10000A520(v183, &qword_1003EE810);
    uint64_t v188 = 1;
  }
  else
  {
    Fence.Schedule.daysOfWeek.getter();
    v252[1](v183, v134);
    uint64_t v188 = 0;
  }
  uint64_t v189 = v255;
  v182(v184, v188, 1, v151);
  uint64_t v190 = v186 + *(int *)(v244 + 48);
  sub_100013210(v173, v186, (uint64_t *)&unk_1003EE960);
  sub_100013210(v184, v190, (uint64_t *)&unk_1003EE960);
  uint64_t v191 = v173;
  uint64_t v192 = v184;
  v193 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  if (v193(v186, 1, v151) == 1)
  {
    sub_10000A520(v192, (uint64_t *)&unk_1003EE960);
    sub_10000A520(v191, (uint64_t *)&unk_1003EE960);
    int v194 = v193(v190, 1, v151);
    uint64_t v195 = v248;
    v196 = v187;
    v197 = v252;
    if (v194 == 1)
    {
      sub_10000A520(v186, (uint64_t *)&unk_1003EE960);
      goto LABEL_146;
    }
  }
  else
  {
    uint64_t v198 = (uint64_t)v233;
    sub_100013210(v186, (uint64_t)v233, (uint64_t *)&unk_1003EE960);
    v196 = v187;
    if (v193(v190, 1, v151) != 1)
    {
      uint64_t v212 = v255;
      v213 = v228;
      (*(void (**)(char *, uint64_t, uint64_t))(v255 + 32))(v228, v190, v151);
      sub_1000D288C(&qword_1003ECAC0, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
      char v214 = dispatch thunk of static Equatable.== infix(_:_:)();
      v215 = *(void (**)(char *, uint64_t))(v212 + 8);
      v215(v213, v151);
      v197 = v252;
      sub_10000A520(v253, (uint64_t *)&unk_1003EE960);
      sub_10000A520(v254, (uint64_t *)&unk_1003EE960);
      v215(v233, v151);
      sub_10000A520(v249, (uint64_t *)&unk_1003EE960);
      uint64_t v195 = v248;
      if (v214) {
        goto LABEL_146;
      }
      goto LABEL_142;
    }
    sub_10000A520(v253, (uint64_t *)&unk_1003EE960);
    sub_10000A520(v254, (uint64_t *)&unk_1003EE960);
    (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v198, v151);
    uint64_t v195 = v248;
    v197 = v252;
  }
  sub_10000A520(v186, &qword_1003EE958);
LABEL_142:
  uint64_t v199 = v231;
  sub_100013210((uint64_t)v264, v231, &qword_1003EE810);
  if (v196(v199, 1, v134) == 1)
  {
    sub_10000A520(v199, &qword_1003EE810);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    v200 = v228;
    Fence.Schedule.daysOfWeek.getter();
    v197[1](v199, v134);
    char v201 = Fence.DaysOfWeek.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v255 + 8))(v200, v151);
    *((void *)&v266 + 1) = &type metadata for UInt8;
    v267 = &protocol witness table for UInt8;
    LOBYTE(v265) = v201;
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_146:
  uint64_t v202 = v245;
  sub_100013210(v260, v245, &qword_1003EE810);
  if (v196(v202, 1, v134) == 1)
  {
    sub_10000A520(v202, &qword_1003EE810);
    uint64_t v203 = 0;
    uint64_t v204 = 0;
  }
  else
  {
    v205 = v250;
    Fence.Schedule.timeZone.getter();
    v197[1](v202, v134);
    uint64_t v203 = TimeZone.identifier.getter();
    uint64_t v204 = v206;
    (*(void (**)(char *, uint64_t))(v251 + 8))(v205, v195);
  }
  uint64_t v207 = v247;
  sub_100013210((uint64_t)v264, v247, &qword_1003EE810);
  if (v196(v207, 1, v134) == 1)
  {
    sub_10000A520(v207, &qword_1003EE810);
    if (!v204) {
      goto LABEL_167;
    }
    goto LABEL_161;
  }
  v208 = v250;
  Fence.Schedule.timeZone.getter();
  v197[1](v207, v134);
  uint64_t v209 = TimeZone.identifier.getter();
  uint64_t v211 = v210;
  (*(void (**)(char *, uint64_t))(v251 + 8))(v208, v195);
  if (v204)
  {
    if (v211)
    {
      if (v203 == v209 && v204 == v211)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v222 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v222 & 1) == 0) {
          goto LABEL_162;
        }
      }
LABEL_167:
      sub_1000B8D48((uint64_t)v257);
      return swift_unknownObjectRelease();
    }
  }
  else if (!v211)
  {
    goto LABEL_167;
  }
LABEL_161:
  swift_bridgeObjectRelease();
LABEL_162:
  uint64_t v216 = v229;
  sub_100013210((uint64_t)v264, v229, &qword_1003EE810);
  if (v196(v216, 1, v134) == 1)
  {
    sub_10000A520(v216, &qword_1003EE810);
    long long v265 = 0u;
    long long v266 = 0u;
    v267 = 0;
  }
  else
  {
    v217 = v250;
    Fence.Schedule.timeZone.getter();
    v197[1](v216, v134);
    uint64_t v218 = TimeZone.identifier.getter();
    uint64_t v220 = v219;
    (*(void (**)(char *, uint64_t))(v251 + 8))(v217, v195);
    *((void *)&v266 + 1) = &type metadata for String;
    v267 = &protocol witness table for String;
    *(void *)&long long v265 = v218;
    *((void *)&v265 + 1) = v220;
  }
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  return sub_1000B8D48((uint64_t)v257);
}

uint64_t sub_1000CDB44()
{
  return 0x65636E6546;
}

unint64_t sub_1000CDB58()
{
  return 0xD000000000000016;
}

CKRecordZoneID sub_1000CDB78()
{
  sub_10005A548(0, (unint64_t *)&qword_1003EE978);
  v0._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1._object = v2;
  v3._countAndFlagsBits = 0x2D65636E6546;
  v3._object = (void *)0xE600000000000000;
  return CKRecordZoneID.init(zoneName:ownerName:)(v3, v1);
}

uint64_t sub_1000CDC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100018CD0;
  return CloudBacked.creationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000CDCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10004A274;
  return CloudBacked.modificationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000CDDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000CDE50;
  return CloudBacked.recordChangeTag(store:)(a1, a2, a3);
}

uint64_t sub_1000CDE50(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

void sub_1000CDF60(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1000CDF78(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v145 = a2;
  uint64_t v3 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v3 - 8);
  uint64_t v140 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v5 - 8);
  uint64_t v138 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimeZone();
  uint64_t v136 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100044014((uint64_t *)&unk_1003EE830);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unsigned int v137 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v123 - v14;
  __chkstk_darwin(v13);
  uint64_t v144 = (uint64_t)&v123 - v16;
  uint64_t v17 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v141 = *(void *)(v17 - 8);
  uint64_t v142 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  int v143 = (char *)&v123 - v21;
  uint64_t v22 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v147 = v25;
  uint64_t v148 = v26;
  __chkstk_darwin(v25);
  v146 = (char *)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x65636E6546 && v28 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      sub_1000D0FE0();
      swift_allocError();
      *uint64_t v60 = 0;
      goto LABEL_23;
    }
  }
  id v30 = [a1 recordID];
  id v31 = [v30 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v33 = v147;
  uint64_t v32 = v148;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v24, 1, v147) == 1)
  {
    sub_10000A520((uint64_t)v24, &qword_1003ECFB8);
    sub_1000D0FE0();
    swift_allocError();
    *uint64_t v34 = 1;
LABEL_23:
    swift_willThrow();

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v146, v24, v33);
  id v35 = [a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  NSString v37 = String._bridgeToObjectiveC()();
  id v135 = v35;
  id v38 = [v35 objectForKeyedSubscript:v37];

  if (!v38 || (v151 = (uint64_t)v38, uint64_t v39 = sub_100044014(&qword_1003EE848), (swift_dynamicCast() & 1) == 0))
  {
    sub_1000D0FE0();
    swift_allocError();
    *uint64_t v59 = 0;
    swift_willThrow();
LABEL_26:
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v148 + 8))(v146, v33);
    return;
  }
  uint64_t v131 = (char *)ObjectType;
  uint64_t v132 = v149;
  uint64_t v133 = v39;
  uint64_t v134 = v150;
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = v135;
  uint64_t v42 = a1;
  id v43 = [v135 objectForKeyedSubscript:v40];

  id v44 = v43;
  a1 = v42;
  if (!v44)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    sub_1000D0FE0();
    swift_allocError();
    *uint64_t v61 = 0;
    swift_willThrow();
    goto LABEL_26;
  }
  self;
  uint64_t v45 = swift_dynamicCastObjCClass();
  if (!v45)
  {
    swift_unknownObjectRelease();
    goto LABEL_25;
  }
  uint64_t v129 = v45;
  id v130 = v44;
  uint64_t v127 = sub_1000CFB4C(2, 0, v41);
  uint64_t v128 = sub_1000CFB4C(10, 0, v41);
  uint64_t v126 = sub_1000CFB4C(11, 0, v41);
  uint64_t v125 = sub_1000CFB4C(12, 0, v41);
  uint64_t v124 = sub_1000CFB4C(13, 0, v41);
  sub_1000CFE78(14, 0, v41);
  uint64_t v46 = v41;
  uint64_t v47 = v143;
  Fence.DaysOfWeek.init(rawValue:)();
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v46 objectForKeyedSubscript:v48];

  if (!v49 || (uint64_t v151 = (uint64_t)v49, (swift_dynamicCast() & 1) == 0))
  {
LABEL_28:
    uint64_t v54 = v144;
    v136[7](v144, 1, 1, v7);
    sub_1000D288C((unint64_t *)&unk_1003EE850, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
    uint64_t v62 = v142;
    dispatch thunk of SetAlgebra.init()();
    sub_1000D288C(&qword_1003ECAC0, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
    char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v20, v62);
    if ((v63 & 1) == 0)
    {
      if (qword_1003EC020 != -1) {
        swift_once();
      }
      uint64_t v64 = type metadata accessor for Logger();
      sub_100044058(v64, (uint64_t)qword_10040B6D8);
      id v65 = v135;
      swift_unknownObjectRetain_n();
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = swift_slowAlloc();
        uint64_t v149 = swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = 136446723;
        uint64_t v151 = sub_100037004(0x526B632874696E69, 0xEF293A64726F6365, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v68 + 12) = 2080;
        uint64_t v151 = sub_100037004(0xD000000000000011, 0x8000000100374DA0, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v68 + 22) = 2081;
        NSString v69 = String._bridgeToObjectiveC()();
        id v70 = [v65 objectForKeyedSubscript:v69];

        uint64_t v151 = (uint64_t)v70;
        sub_100044014(&qword_1003EE860);
        uint64_t v71 = String.init<A>(describing:)();
        uint64_t v151 = sub_100037004(v71, v72, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "%{public}s unrecognized field %s: %{private}s", (uint8_t *)v68, 0x20u);
        swift_arrayDestroy();
        uint64_t v47 = v143;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      uint64_t v54 = v144;
    }
    goto LABEL_35;
  }
  uint64_t v50 = v149;
  unint64_t v51 = v150;
  uint64_t v52 = HIBYTE(v150) & 0xF;
  if ((v150 & 0x2000000000000000) == 0) {
    uint64_t v52 = v149 & 0xFFFFFFFFFFFFLL;
  }
  if (!v52)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  TimeZone.init(identifier:)();
  uint64_t v53 = v136;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v136[6])(v15, 1, v7) == 1)
  {
    uint64_t v131 = (char *)v50;
    sub_10000A520((uint64_t)v15, (uint64_t *)&unk_1003EE830);
    uint64_t v54 = v144;
    v53[7](v144, 1, 1, v7);
    if (qword_1003EC020 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100044058(v55, (uint64_t)qword_10040B6D8);
    swift_bridgeObjectRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v149 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136446466;
      uint64_t v151 = sub_100037004(0x526B632874696E69, 0xEF293A64726F6365, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v58 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v151 = sub_100037004((uint64_t)v131, v51, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%{public}s unknown time zone: %{public}s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      uint64_t v47 = v143;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v122 = (void (*)(void))v53[4];
    ((void (*)(char *, char *, uint64_t))v122)(v9, v15, v7);
    uint64_t v54 = v144;
    v122();
    v53[7](v54, 0, 1, v7);
  }
LABEL_35:
  uint64_t v73 = v145;
  (*(void (**)(uint64_t, char *, uint64_t))(v148 + 16))(v145, v146, v147);
  uint64_t v74 = (int *)type metadata accessor for FenceRecord();
  uint64_t v75 = (uint64_t *)(v73 + v74[5]);
  uint64_t v76 = v134;
  uint64_t *v75 = v132;
  v75[1] = v76;
  *(void *)(v73 + v74[6]) = v129;
  *(void *)(v73 + v74[7]) = v127;
  uint64_t v77 = (uint64_t)v137;
  uint64_t v78 = sub_100013210(v54, (uint64_t)v137, (uint64_t *)&unk_1003EE830);
  __chkstk_darwin(v78);
  uint64_t v79 = v126;
  *(&v123 - 6) = v128;
  *(&v123 - 5) = v79;
  uint64_t v80 = v124;
  *(&v123 - 4) = v125;
  *(&v123 - 3) = v80;
  *(&v123 - 2) = (uint64_t)v47;
  swift_unknownObjectRetain();
  uint64_t v81 = v138;
  sub_1000CA7F8((void (*)(char *))sub_1000D1034, v138);
  sub_10000A520(v77, (uint64_t *)&unk_1003EE830);
  uint64_t v139 = v74;
  sub_100013B50(v81, v73 + v74[8], &qword_1003EE810);
  NSString v82 = String._bridgeToObjectiveC()();
  id v83 = v135;
  id v84 = [v135 objectForKeyedSubscript:v82];

  if (v84)
  {
    uint64_t v149 = (uint64_t)v84;
    uint64_t v85 = type metadata accessor for Date();
    uint64_t v86 = (uint64_t)v140;
    int v87 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v86, v87 ^ 1u, 1, v85);
  }
  else
  {
    uint64_t v88 = type metadata accessor for Date();
    uint64_t v86 = (uint64_t)v140;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v140, 1, 1, v88);
  }
  sub_100013B50(v86, v145 + v139[9], (uint64_t *)&unk_1003EE800);
  NSString v89 = String._bridgeToObjectiveC()();
  id v90 = [v83 objectForKeyedSubscript:v89];

  if (v90)
  {
    uint64_t v151 = (uint64_t)v90;
    int v91 = swift_dynamicCast();
    uint64_t v92 = v149;
    if (!v91) {
      uint64_t v92 = 0;
    }
    uint64_t v140 = (char *)v92;
    if (v91) {
      uint64_t v93 = v150;
    }
    else {
      uint64_t v93 = 0;
    }
    uint64_t v138 = v93;
  }
  else
  {
    uint64_t v140 = 0;
    uint64_t v138 = 0;
  }
  NSString v94 = String._bridgeToObjectiveC()();
  id v95 = [v83 objectForKeyedSubscript:v94];

  if (v95)
  {
    uint64_t v151 = (uint64_t)v95;
    int v96 = swift_dynamicCast();
    if (v96) {
      uint64_t v97 = v149;
    }
    else {
      uint64_t v97 = 0;
    }
    if (v96) {
      unint64_t v98 = v150;
    }
    else {
      unint64_t v98 = 0;
    }
    uint64_t v136 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v98;
    unsigned int v137 = (char *)v97;
  }
  else
  {
    uint64_t v136 = 0;
    unsigned int v137 = 0;
  }
  NSString v99 = String._bridgeToObjectiveC()();
  id v100 = [v83 objectForKeyedSubscript:v99];

  if (v100)
  {
    uint64_t v151 = (uint64_t)v100;
    int v101 = swift_dynamicCast();
    uint64_t v102 = v149;
    if (!v101) {
      uint64_t v102 = 0;
    }
    uint64_t v134 = v102;
    if (v101) {
      uint64_t v103 = v150;
    }
    else {
      uint64_t v103 = 0;
    }
    uint64_t v132 = v103;
  }
  else
  {
    uint64_t v134 = 0;
    uint64_t v132 = 0;
  }
  NSString v104 = String._bridgeToObjectiveC()();
  id v105 = [v83 objectForKeyedSubscript:v104];

  if (v105)
  {
    uint64_t v151 = (uint64_t)v105;
    int v106 = swift_dynamicCast();
    uint64_t v107 = v149;
    if (!v106) {
      uint64_t v107 = 0;
    }
    uint64_t v131 = (char *)v107;
    if (v106) {
      unint64_t v108 = v150;
    }
    else {
      unint64_t v108 = 0;
    }
  }
  else
  {
    uint64_t v131 = 0;
    unint64_t v108 = 0;
  }
  NSString v109 = String._bridgeToObjectiveC()();
  id v110 = [v135 objectForKeyedSubscript:v109];

  if (v110)
  {
    uint64_t v151 = (uint64_t)v110;
    int v111 = swift_dynamicCast();
    if (v111) {
      uint64_t v112 = v149;
    }
    else {
      uint64_t v112 = 0;
    }
    if (v111) {
      unint64_t v113 = v150;
    }
    else {
      unint64_t v113 = 0;
    }
  }
  else
  {
    uint64_t v112 = 0;
    unint64_t v113 = 0;
  }
  NSString v114 = String._bridgeToObjectiveC()();
  char v115 = (char *)[v135 objectForKeyedSubscript:v114];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_10000A520(v144, (uint64_t *)&unk_1003EE830);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v146, v147);
  if (v115)
  {
    uint64_t v151 = (uint64_t)v115;
    int v116 = swift_dynamicCast();
    if (v116) {
      uint64_t v117 = v149;
    }
    else {
      uint64_t v117 = 0;
    }
    if (v116) {
      char v115 = (char *)v150;
    }
    else {
      char v115 = 0;
    }
  }
  else
  {
    uint64_t v117 = 0;
  }
  (*(void (**)(char *, uint64_t))(v141 + 8))(v143, v142);
  uint64_t v118 = (char **)(v145 + v139[10]);
  uint64_t v119 = v138;
  *uint64_t v118 = v140;
  v118[1] = (char *)v119;
  uint64_t v120 = (char *)v136;
  v118[2] = v137;
  v118[3] = v120;
  uint64_t v121 = v132;
  v118[4] = (char *)v134;
  v118[5] = (char *)v121;
  v118[6] = v131;
  v118[7] = (char *)v108;
  v118[8] = (char *)v112;
  v118[9] = (char *)v113;
  v118[10] = (char *)v117;
  v118[11] = v115;
}

uint64_t sub_1000CF308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000CF3B8;
  return CloudBacked.ckRecord(store:)(a1, a2, a3);
}

uint64_t sub_1000CF3B8(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_1000CF4C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_1000CF528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v23 = a1;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v24 = a7;
  uint64_t v21 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Fence.TimeOfDay();
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  __chkstk_darwin(v17);
  if (a2 < 0 || a3 < 0 || (Fence.TimeOfDay.init(hour:minute:)(), v19 < 0) || v20 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Fence.TimeOfDay.init(hour:minute:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v22, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v23, v21);
    return Fence.Schedule.init(start:end:daysOfWeek:timeZone:)();
  }
  return result;
}

uint64_t sub_1000CF7B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v36[0] = 0;
  *((void *)&v36[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  long long v37 = v36[0];
  v5._countAndFlagsBits = 540697705;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x203A6C6562616C0ALL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  uint64_t v8 = (int *)type metadata accessor for FenceRecord();
  uint64_t v9 = (uint64_t *)(v0 + v8[5]);
  uint64_t v10 = *v9;
  uint64_t v11 = (void *)v9[1];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0xEB00000000203A6ELL;
  v13._countAndFlagsBits = 0x6F697461636F6C0ALL;
  String.append(_:)(v13);
  id v14 = [*(id *)(v0 + v8[6]) debugDescription];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x6F697461636F6C0ALL;
  v19._object = (void *)0xEF203A657079546ELL;
  String.append(_:)(v19);
  *(void *)&v36[0] = *(void *)(v1 + v8[7]);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x6C7564656863730ALL;
  v21._object = (void *)0xEB00000000203A65;
  String.append(_:)(v21);
  sub_100013210(v1 + v8[8], (uint64_t)v4, &qword_1003EE810);
  uint64_t v22 = type metadata accessor for Fence.Schedule();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v4, 1, v22) == 1)
  {
    sub_10000A520((uint64_t)v4, &qword_1003EE810);
    uint64_t v24 = (void *)0xE300000000000000;
    uint64_t v25 = 7104878;
  }
  else
  {
    uint64_t v25 = Fence.Schedule.description.getter();
    uint64_t v24 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v22);
  }
  v27._countAndFlagsBits = v25;
  v27._object = v24;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x646E456574756D0ALL;
  v28._object = (void *)0xEE00203A65746144;
  String.append(_:)(v28);
  sub_100044014((uint64_t *)&unk_1003EE800);
  v29._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x616D6563616C700ALL;
  v30._object = (void *)0xEC000000203A6B72;
  String.append(_:)(v30);
  id v31 = (_OWORD *)(v1 + v8[10]);
  long long v32 = v31[1];
  v36[0] = *v31;
  v36[1] = v32;
  long long v33 = v31[3];
  v36[2] = v31[2];
  v36[3] = v33;
  long long v34 = v31[5];
  v36[4] = v31[4];
  v36[5] = v34;
  _print_unlocked<A, B>(_:_:)();
  return v37;
}

uint64_t sub_1000CFB4C(char a1, uint64_t a2, void *a3)
{
  sub_1000CB700(a1);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [a3 objectForKeyedSubscript:v6];

  uint64_t v21 = (uint64_t)v7;
  swift_unknownObjectRetain();
  sub_100044014(&qword_1003EE860);
  if (swift_dynamicCast())
  {
    char v20 = 0;
    swift_unknownObjectRelease();
    return v19;
  }
  else if (v7)
  {
    if (qword_1003EC020 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040B6D8);
    swift_unknownObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      uint64_t v21 = sub_100037004(0xD000000000000029, 0x8000000100374ED0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      unint64_t v12 = sub_1000CB700(a1);
      uint64_t v21 = sub_100037004(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2081;
      sub_1000CB700(a1);
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v15 = [a3 objectForKeyedSubscript:v14];

      uint64_t v21 = (uint64_t)v15;
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v21 = sub_100037004(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s unrecognized field %{public}s: %{private}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
    }
  }
  return a2;
}

uint64_t sub_1000CFE78(char a1, uint64_t a2, void *a3)
{
  sub_1000CB700(a1);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [a3 objectForKeyedSubscript:v6];

  uint64_t v19 = (uint64_t)v7;
  swift_unknownObjectRetain();
  sub_100044014(&qword_1003EE860);
  if (swift_dynamicCast())
  {
    swift_unknownObjectRelease();
    return v18;
  }
  else if (v7)
  {
    if (qword_1003EC020 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040B6D8);
    swift_unknownObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      sub_100037004(0xD000000000000029, 0x8000000100374ED0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      unint64_t v12 = sub_1000CB700(a1);
      sub_100037004(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2081;
      sub_1000CB700(a1);
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a3 objectForKeyedSubscript:v14];

      uint64_t v15 = String.init<A>(describing:)();
      sub_100037004(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s unrecognized field %{public}s: %{private}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
    }
  }
  return a2;
}

uint64_t sub_1000D01A8(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = type metadata accessor for Date();
  uint64_t v121 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  char v115 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v5 - 8);
  uint64_t v116 = (uint64_t)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100044014(&qword_1003EEEB0);
  __chkstk_darwin(v118);
  uint64_t v122 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for Fence.Schedule();
  uint64_t v126 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v117 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v9 - 8);
  uint64_t v120 = (uint64_t)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100044014(&qword_1003EE818);
  __chkstk_darwin(v123);
  uint64_t v124 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for FenceRecord();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v127 = (uint64_t)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v128 = (char *)&v111 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v129 = (uint64_t)&v111 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v130 = (uint64_t)&v111 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v131 = (uint64_t)&v111 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v132 = (uint64_t)&v111 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  Swift::String v27 = (char *)&v111 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  Swift::String v30 = (char *)&v111 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  long long v33 = (char *)&v111 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v111 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v111 - v38;
  __chkstk_darwin(v37);
  id v41 = (char *)&v111 - v40;
  char v42 = static UUID.== infix(_:_:)();
  sub_1000D0F7C(a1, (uint64_t)v41);
  sub_1000D0F7C(a2, (uint64_t)v39);
  if ((v42 & 1) == 0)
  {
    sub_1000B8D48((uint64_t)v41);
    sub_1000B8D48((uint64_t)v39);
    sub_1000D0F7C(a1, (uint64_t)v36);
    sub_1000D0F7C(a2, (uint64_t)v33);
    goto LABEL_16;
  }
  NSString v114 = (int *)v12;
  uint64_t v43 = *(int *)(v12 + 20);
  uint64_t v44 = *(void *)&v41[v43];
  uint64_t v45 = *(void *)&v41[v43 + 8];
  uint64_t v46 = &v39[v43];
  if (v44 != *(void *)v46 || v45 != *((void *)v46 + 1))
  {
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000B8D48((uint64_t)v41);
    sub_1000B8D48((uint64_t)v39);
    sub_1000D0F7C(a1, (uint64_t)v36);
    sub_1000D0F7C(a2, (uint64_t)v33);
    if (v47) {
      goto LABEL_7;
    }
LABEL_16:
    sub_1000B8D48((uint64_t)v33);
    sub_1000B8D48((uint64_t)v36);
LABEL_17:
    sub_1000D0F7C(a1, (uint64_t)v30);
    sub_1000D0F7C(a2, (uint64_t)v27);
    uint64_t v69 = v132;
    goto LABEL_18;
  }
  sub_1000B8D48((uint64_t)v41);
  sub_1000B8D48((uint64_t)v39);
  sub_1000D0F7C(a1, (uint64_t)v36);
  sub_1000D0F7C(a2, (uint64_t)v33);
LABEL_7:
  NSString v48 = v114;
  id v49 = *(id *)&v36[v114[6]];
  [v49 coordinate];
  double v51 = v50;
  [v49 coordinate];
  double v53 = v52;
  [v49 altitude];
  double v55 = v54;
  [v49 horizontalAccuracy];
  double v113 = v56;
  [v49 verticalAccuracy];
  double v112 = v57;

  id v58 = *(id *)&v33[v48[6]];
  [v58 coordinate];
  double v60 = v59;
  [v58 coordinate];
  double v62 = v61;
  [v58 altitude];
  double v64 = v63;
  [v58 horizontalAccuracy];
  double v66 = v65;
  [v58 verticalAccuracy];
  double v68 = v67;

  sub_1000B8D48((uint64_t)v33);
  sub_1000B8D48((uint64_t)v36);
  if (v51 != v60 || v53 != v62 || v55 != v64 || v113 != v66) {
    goto LABEL_17;
  }
  sub_1000D0F7C(a1, (uint64_t)v30);
  sub_1000D0F7C(a2, (uint64_t)v27);
  uint64_t v69 = v132;
  if (v112 != v68)
  {
LABEL_18:
    sub_1000B8D48((uint64_t)v27);
    sub_1000B8D48((uint64_t)v30);
    sub_1000D0F7C(a1, v69);
    uint64_t v73 = v131;
    sub_1000D0F7C(a2, v131);
    goto LABEL_19;
  }
  id v70 = v114;
  uint64_t v71 = *(void *)&v30[v114[7]];
  sub_1000B8D48((uint64_t)v30);
  uint64_t v72 = *(void *)&v27[v70[7]];
  sub_1000B8D48((uint64_t)v27);
  sub_1000D0F7C(a1, v69);
  uint64_t v73 = v131;
  sub_1000D0F7C(a2, v131);
  if (v71 != v72)
  {
LABEL_19:
    sub_1000B8D48(v73);
    sub_1000B8D48(v69);
LABEL_20:
    uint64_t v84 = (uint64_t)v128;
    uint64_t v82 = v130;
    uint64_t v83 = v129;
    sub_1000D0F7C(a1, v130);
    sub_1000D0F7C(a2, v83);
LABEL_21:
    sub_1000B8D48(v83);
    sub_1000B8D48(v82);
LABEL_22:
    sub_1000D0F7C(a1, v84);
    uint64_t v85 = v127;
    sub_1000D0F7C(a2, v127);
    goto LABEL_23;
  }
  uint64_t v74 = v70[8];
  uint64_t v75 = v73 + v74;
  uint64_t v76 = v124;
  uint64_t v77 = v124 + *(int *)(v123 + 48);
  sub_100013210(v69 + v74, v124, &qword_1003EE810);
  sub_100013210(v75, v77, &qword_1003EE810);
  uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
  uint64_t v79 = v125;
  if (v78(v76, 1, v125) == 1)
  {
    sub_1000B8D48(v73);
    sub_1000B8D48(v69);
    int v80 = v78(v77, 1, v79);
    uint64_t v81 = (uint64_t)v122;
    if (v80 == 1)
    {
      sub_10000A520(v76, &qword_1003EE810);
      uint64_t v82 = v130;
      sub_1000D0F7C(a1, v130);
      uint64_t v83 = v129;
      sub_1000D0F7C(a2, v129);
      uint64_t v84 = (uint64_t)v128;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  uint64_t v88 = v120;
  sub_100013210(v76, v120, &qword_1003EE810);
  if (v78(v77, 1, v79) == 1)
  {
    sub_1000B8D48(v131);
    sub_1000B8D48(v132);
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v88, v79);
LABEL_27:
    sub_10000A520(v76, &qword_1003EE818);
    goto LABEL_20;
  }
  uint64_t v89 = v126;
  id v90 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v117, v77, v79);
  sub_1000D288C(&qword_1003EE828, (void (*)(uint64_t))&type metadata accessor for Fence.Schedule);
  char v91 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v92 = *(void (**)(char *, uint64_t))(v89 + 8);
  v92(v90, v79);
  sub_1000B8D48(v131);
  sub_1000B8D48(v132);
  v92((char *)v88, v79);
  sub_10000A520(v76, &qword_1003EE810);
  uint64_t v82 = v130;
  sub_1000D0F7C(a1, v130);
  uint64_t v83 = v129;
  sub_1000D0F7C(a2, v129);
  uint64_t v84 = (uint64_t)v128;
  uint64_t v81 = (uint64_t)v122;
  if ((v91 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_29:
  uint64_t v93 = v70[9];
  uint64_t v94 = v83 + v93;
  uint64_t v95 = v81 + *(int *)(v118 + 48);
  sub_100013210(v82 + v93, v81, (uint64_t *)&unk_1003EE800);
  sub_100013210(v94, v95, (uint64_t *)&unk_1003EE800);
  int v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  uint64_t v97 = v119;
  if (v96(v81, 1, v119) == 1)
  {
    sub_1000B8D48(v83);
    sub_1000B8D48(v82);
    if (v96(v95, 1, v97) == 1)
    {
      sub_10000A520(v81, (uint64_t *)&unk_1003EE800);
      sub_1000D0F7C(a1, v84);
      uint64_t v85 = v127;
      sub_1000D0F7C(a2, v127);
LABEL_36:
      uint64_t v103 = (_OWORD *)(v84 + v114[10]);
      long long v104 = v103[3];
      v133[2] = v103[2];
      v133[3] = v104;
      long long v105 = v103[5];
      v133[4] = v103[4];
      v133[5] = v105;
      long long v106 = v103[1];
      v133[0] = *v103;
      v133[1] = v106;
      uint64_t v107 = (_OWORD *)(v85 + v114[10]);
      long long v108 = v107[1];
      v134[0] = *v107;
      v134[1] = v108;
      long long v109 = v107[5];
      v134[4] = v107[4];
      v134[5] = v109;
      long long v110 = v107[3];
      v134[2] = v107[2];
      v134[3] = v110;
      char v86 = sub_1000D2F64(v133, v134);
      goto LABEL_24;
    }
    goto LABEL_34;
  }
  uint64_t v98 = v116;
  sub_100013210(v81, v116, (uint64_t *)&unk_1003EE800);
  if (v96(v95, 1, v97) == 1)
  {
    sub_1000B8D48(v129);
    sub_1000B8D48(v130);
    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v98, v97);
LABEL_34:
    sub_10000A520(v81, &qword_1003EEEB0);
    goto LABEL_22;
  }
  uint64_t v99 = v121;
  id v100 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 32))(v115, v95, v97);
  sub_1000D288C(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
  char v101 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v102 = *(void (**)(char *, uint64_t))(v99 + 8);
  v102(v100, v97);
  sub_1000B8D48(v129);
  sub_1000B8D48(v130);
  v102((char *)v98, v97);
  sub_10000A520(v81, (uint64_t *)&unk_1003EE800);
  sub_1000D0F7C(a1, v84);
  uint64_t v85 = v127;
  sub_1000D0F7C(a2, v127);
  if (v101) {
    goto LABEL_36;
  }
LABEL_23:
  char v86 = 0;
LABEL_24:
  sub_1000B8D48(v84);
  sub_1000B8D48(v85);
  return v86 & 1;
}

uint64_t type metadata accessor for FenceRecord()
{
  uint64_t result = qword_1003EE8C0;
  if (!qword_1003EE8C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D0F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D0FE0()
{
  unint64_t result = qword_1003EE840;
  if (!qword_1003EE840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE840);
  }
  return result;
}

uint64_t sub_1000D1034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CF528(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t *sub_1000D105C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    __dst = (char *)a1 + v14;
    uint64_t v15 = (char *)a2 + v14;
    uint64_t v16 = type metadata accessor for Fence.Schedule();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    id v19 = v13;
    if (v18(v15, 1, v16))
    {
      uint64_t v20 = sub_100044014(&qword_1003EE810);
      memcpy(__dst, v15, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v22 = a3[9];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for Date();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_100044014((uint64_t *)&unk_1003EE800);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v28 = a3[10];
    uint64_t v29 = (uint64_t *)((char *)a1 + v28);
    Swift::String v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = v30[3];
    uint64_t v29[2] = v30[2];
    v29[3] = v32;
    uint64_t v33 = v30[5];
    v29[4] = v30[4];
    v29[5] = v33;
    uint64_t v34 = v30[7];
    v29[6] = v30[6];
    v29[7] = v34;
    uint64_t v35 = v30[9];
    v29[8] = v30[8];
    v29[9] = v35;
    uint64_t v36 = v30[11];
    v29[10] = v30[10];
    v29[11] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000D13A0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();

  uint64_t v5 = a1 + a2[8];
  uint64_t v6 = type metadata accessor for Fence.Schedule();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + a2[9];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D1578(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v12;
  uint64_t v13 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  __dst = (void *)(a1 + v13);
  uint64_t v14 = (const void *)(a2 + v13);
  uint64_t v15 = type metadata accessor for Fence.Schedule();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  id v18 = v12;
  if (v17(v14, 1, v15))
  {
    uint64_t v19 = sub_100044014(&qword_1003EE810);
    memcpy(__dst, v14, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = v28[3];
  v27[2] = v28[2];
  v27[3] = v30;
  uint64_t v31 = v28[5];
  v27[4] = v28[4];
  v27[5] = v31;
  uint64_t v32 = v28[7];
  v27[6] = v28[6];
  v27[7] = v32;
  uint64_t v33 = v28[9];
  v27[8] = v28[8];
  v27[9] = v33;
  uint64_t v34 = v28[11];
  v27[10] = v28[10];
  v27[11] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000D186C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)(a2 + v10);
  uint64_t v12 = *(void **)(a1 + v10);
  *(void *)(a1 + v10) = v11;
  id v13 = v11;

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Fence.Schedule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_100044014(&qword_1003EE810);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = a3[9];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  uint64_t v32 = a3[10];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  *uint64_t v33 = *(void *)(a2 + v32);
  v33[1] = *(void *)(a2 + v32 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[2] = v34[2];
  v33[3] = v34[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[4] = v34[4];
  v33[5] = v34[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[6] = v34[6];
  v33[7] = v34[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[8] = v34[8];
  v33[9] = v34[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[10] = v34[10];
  v33[11] = v34[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D1C8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Fence.Schedule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100044014(&qword_1003EE810);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = a3[10];
  int v21 = (_OWORD *)(a1 + v20);
  uint64_t v22 = (_OWORD *)(a2 + v20);
  long long v23 = v22[3];
  v21[2] = v22[2];
  v21[3] = v23;
  long long v24 = v22[5];
  v21[4] = v22[4];
  v21[5] = v24;
  long long v25 = v22[1];
  *int v21 = *v22;
  v21[1] = v25;
  return a1;
}

uint64_t sub_1000D1F10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void **)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);

  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Fence.Schedule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_100044014(&qword_1003EE810);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = a3[9];
  long long v24 = (void *)(a1 + v23);
  long long v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  uint64_t v32 = a3[10];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v36 = v34[3];
  v33[2] = v34[2];
  v33[3] = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = v34[5];
  v33[4] = v34[4];
  v33[5] = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = v34[7];
  v33[6] = v34[6];
  v33[7] = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = v34[9];
  v33[8] = v34[8];
  v33[9] = v39;
  swift_bridgeObjectRelease();
  uint64_t v40 = v34[11];
  v33[10] = v34[10];
  v33[11] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D22B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D22CC);
}

uint64_t sub_1000D22CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = sub_100044014(&qword_1003EE810);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[8];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = sub_100044014((uint64_t *)&unk_1003EE800);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[9];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_1000D2458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D246C);
}

uint64_t sub_1000D246C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_100044014(&qword_1003EE810);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[8];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[9];

  return v16(v18, a2, a2, v17);
}

void sub_1000D25F8()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1000D2760(319, &qword_1003EE8D0, (void (*)(uint64_t))&type metadata accessor for Fence.Schedule);
    if (v1 <= 0x3F)
    {
      sub_1000D2760(319, (unint64_t *)&qword_1003EE8D8, (void (*)(uint64_t))&type metadata accessor for Date);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1000D2760(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000D27B4()
{
  return sub_1000D288C(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1000D27FC()
{
  return sub_1000D288C(&qword_1003EE928, (void (*)(uint64_t))type metadata accessor for FenceRecord);
}

uint64_t sub_1000D2844()
{
  return sub_1000D288C(qword_1003EE930, (void (*)(uint64_t))type metadata accessor for FenceRecord);
}

uint64_t sub_1000D288C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000D28D4()
{
  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3]) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5]) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  Hasher._combine(_:)(0);
  if (v0[7])
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[9]) {
      goto LABEL_6;
    }
LABEL_14:
    Hasher._combine(_:)(0);
    if (v0[11]) {
      goto LABEL_7;
    }
LABEL_15:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  if (!v0[9]) {
    goto LABEL_14;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v0[11]) {
    goto LABEL_15;
  }
LABEL_7:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

uint64_t sub_1000D2AAC(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE998);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1000D3BE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000D2CAC()
{
  unint64_t result = 0x7974696C61636F6CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x7972746E756F63;
      break;
    case 3:
      unint64_t result = 0x6574617473;
      break;
    case 4:
      unint64_t result = 0x6441746565727473;
      break;
    case 5:
      unint64_t result = 0x614E746565727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D2D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D34B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2DAC(uint64_t a1)
{
  unint64_t v2 = sub_1000D3BE0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2DE8(uint64_t a1)
{
  unint64_t v2 = sub_1000D3BE0();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000D2E24()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000D2E68()
{
  return Hasher._finalize()();
}

double sub_1000D2EA4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000D3754(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1000D2EF0(void *a1)
{
  return sub_1000D2AAC(a1);
}

uint64_t sub_1000D2F08(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1000D2F64(v9, v10) & 1;
}

uint64_t sub_1000D2F64(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = a1[3];
    uint64_t v10 = a2[3];
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (a1[2] != a2[2] || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    uint64_t v12 = a1[5];
    uint64_t v13 = a2[5];
    if (v12)
    {
      if (!v13) {
        return 0;
      }
      if (a1[4] != a2[4] || v12 != v13)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v13)
    {
      return 0;
    }
    uint64_t v15 = a1[7];
    uint64_t v16 = a2[7];
    if (v15)
    {
      if (!v16) {
        return 0;
      }
      if (a1[6] != a2[6] || v15 != v16)
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v17 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v16)
    {
      return 0;
    }
    uint64_t v18 = a1[9];
    uint64_t v19 = a2[9];
    if (v18)
    {
      if (!v19) {
        return 0;
      }
      if (a1[8] != a2[8] || v18 != v19)
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v20 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v19)
    {
      return 0;
    }
    uint64_t v21 = a1[11];
    uint64_t v22 = a2[11];
    if (v21)
    {
      if (v22 && (a1[10] == a2[10] && v21 == v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v22)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s9PlacemarkVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s9PlacemarkVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s9PlacemarkVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s9PlacemarkVwta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9PlacemarkVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9PlacemarkVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *_s9PlacemarkVMa()
{
  return &_s9PlacemarkVN;
}

unint64_t sub_1000D345C()
{
  unint64_t result = qword_1003EE980;
  if (!qword_1003EE980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE980);
  }
  return result;
}

uint64_t sub_1000D34B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7974696C61636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100373CB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6441746565727473 && a2 == 0xED00007373657264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1000D3754@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE988);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000D3BE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  char v41 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  char v40 = 1;
  swift_bridgeObjectRetain();
  uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v39 = 2;
  uint64_t v35 = v12;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v34 = v14;
  uint64_t v30 = v13;
  char v38 = 3;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v37 = 4;
  uint64_t v32 = v15;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = v16;
  char v36 = 5;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v19 = v18;
  char v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain();
  sub_1000233E4((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v21 = v28;
  swift_bridgeObjectRelease();
  uint64_t v22 = v32;
  swift_bridgeObjectRelease();
  uint64_t v23 = v34;
  swift_bridgeObjectRelease();
  uint64_t v24 = v35;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v33;
  a2[3] = v24;
  a2[4] = v30;
  a2[5] = v23;
  a2[6] = v29;
  a2[7] = v22;
  a2[8] = v27;
  a2[9] = v21;
  a2[10] = v31;
  a2[11] = v19;
  return result;
}

unint64_t sub_1000D3BE0()
{
  unint64_t result = qword_1003EE990;
  if (!qword_1003EE990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE990);
  }
  return result;
}

unsigned char *_s9PlacemarkV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3D00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *_s9PlacemarkV10CodingKeysOMa()
{
  return &_s9PlacemarkV10CodingKeysON;
}

unint64_t sub_1000D3D3C()
{
  unint64_t result = qword_1003EE9A0;
  if (!qword_1003EE9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE9A0);
  }
  return result;
}

unint64_t sub_1000D3D94()
{
  unint64_t result = qword_1003EE9A8;
  if (!qword_1003EE9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE9A8);
  }
  return result;
}

unint64_t sub_1000D3DEC()
{
  unint64_t result = qword_1003EE9B0;
  if (!qword_1003EE9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE9B0);
  }
  return result;
}

uint64_t sub_1000D3E40()
{
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  type metadata accessor for Fence.ID();
  sub_1000D4CE4(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x726567676972740ALL;
  v1._object = (void *)0xEC000000203A4449;
  String.append(_:)(v1);
  type metadata accessor for FenceTriggerRecord();
  type metadata accessor for Fence.TriggerID();
  sub_1000D4CE4(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000100375020;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  type metadata accessor for Fence.TriggerPosition();
  sub_1000D4CE4(&qword_1003EEA60, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerPosition);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x3A444965636E6566;
}

void sub_1000D4030(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (id *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for FenceTriggerRecord();
  (*(void (**)(id *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(v7 + 24), v3);
  int v8 = (*(uint64_t (**)(id *, uint64_t))(v4 + 88))(v6, v3);
  if (v8 == enum case for Fence.TriggerPosition.inside(_:) || v8 == enum case for Fence.TriggerPosition.outside(_:))
  {
    (*(void (**)(id *, uint64_t))(v4 + 96))(v6, v3);
    id v10 = *v6;
    id v11 = [*v6 timestamp];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else if (v8 == enum case for Fence.TriggerPosition.undetermined(_:))
  {
    (*(void (**)(id *, uint64_t))(v4 + 96))(v6, v3);
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(uint64_t, id *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v6, v12);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t type metadata accessor for FenceTriggerRecord()
{
  uint64_t result = qword_1003EEA10;
  if (!qword_1003EEA10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000D42A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Fence.ID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Fence.TriggerPosition();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1000D4400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t sub_1000D44F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000D45F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000D4700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000D4808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000D4910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D4924);
}

uint64_t sub_1000D4924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Fence.TriggerID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_1000D4A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D4A84);
}

uint64_t sub_1000D4A84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Fence.ID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Fence.TriggerID();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t sub_1000D4BDC()
{
  uint64_t result = type metadata accessor for Fence.ID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Fence.TriggerID();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Fence.TriggerPosition();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000D4CE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D4D2C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v31 = a3;
  uint64_t v35 = sub_100044014(&qword_1003EEBF0);
  uint64_t v30 = *(void *)(v35 - 8);
  uint64_t v5 = __chkstk_darwin(v35);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v32 = a2 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = type metadata accessor for Friend();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v9, v21 + *(void *)(*(void *)(v22 - 8) + 72) * i, v22);
    uint64_t v23 = *(void *)(a2 + 56);
    uint64_t v24 = type metadata accessor for FriendshipAction();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(&v9[*(int *)(v35 + 48)], v23 + *(void *)(*(void *)(v24 - 8) + 72) * i, v24);
    sub_100013B50((uint64_t)v9, (uint64_t)v7, &qword_1003EEBF0);
    char v25 = v34(v7);
    if (v3)
    {
      sub_10000A520((uint64_t)v7, &qword_1003EEBF0);
      return swift_release();
    }
    if (v25)
    {
      swift_release();
      uint64_t v26 = v31;
      sub_100013B50((uint64_t)v7, v31, &qword_1003EEBF0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v35);
    }
    uint64_t result = sub_10000A520((uint64_t)v7, &qword_1003EEBF0);
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v15 >= v33) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v15);
    if (!v19) {
      break;
    }
LABEL_17:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v33) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v33) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 >= v33) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 4;
  if (v15 + 4 >= v33)
  {
LABEL_28:
    uint64_t v28 = v30;
    uint64_t v27 = v31;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, 1, 1, v35);
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19)
  {
LABEL_16:
    int64_t v15 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t FriendInfoOption.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HandleType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t FriendInfoOption.origin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FriendInfoOption(0) + 20);
  uint64_t v4 = type metadata accessor for ClientOrigin();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t FriendInfoOption.expiresByGroupId.getter()
{
  type metadata accessor for FriendInfoOption(0);

  return swift_bridgeObjectRetain();
}

uint64_t FriendInfoOption.createAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FriendInfoOption(0);
  return sub_100013210(v1 + *(int *)(v3 + 28), a1, (uint64_t *)&unk_1003EE800);
}

uint64_t FriendInfoOption.expiry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FriendInfoOption(0);
  return sub_100013210(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&unk_1003EE800);
}

uint64_t FriendInfoOption.serverID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FriendInfoOption.ownerHandle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FriendInfoOption(0);
  return sub_100013210(v1 + *(int *)(v3 + 40), a1, &qword_1003F3B30);
}

uint64_t FriendInfoOption.shallowOrLiveSecureLocationsCapable.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 44));
}

uint64_t FriendInfoOption.secureLocationsCapable.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 48));
}

uint64_t FriendInfoOption.fallbackToLegacy.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 52));
}

uint64_t FriendInfoOption.fallbackToLegacyAllowed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 56));
}

uint64_t FriendInfoOption.hash(into:)()
{
  type metadata accessor for HandleType();
  sub_1000424DC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);

  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_1000D5420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DC010(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D5448(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1000D5454(uint64_t a1)
{
  unint64_t v2 = sub_100042644();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D5490(uint64_t a1)
{
  unint64_t v2 = sub_100042644();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FriendInfoOption.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EEA70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_100042644();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for HandleType();
  sub_1000424DC(&qword_1003EEA80, (void (*)(uint64_t))&type metadata accessor for HandleType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FriendInfoOption(0);
    LOBYTE(v12) = 1;
    type metadata accessor for ClientOrigin();
    sub_1000424DC(&qword_1003EEA88, (void (*)(uint64_t))&type metadata accessor for ClientOrigin);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_100044014(&qword_1003EEA90);
    sub_1000D5930();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for Date();
    sub_1000424DC(&qword_1003EEAA8, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 6;
    type metadata accessor for Handle();
    sub_1000424DC(&qword_1003EEAB0, (void (*)(uint64_t))&type metadata accessor for Handle);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000D5930()
{
  unint64_t result = qword_1003EEA98;
  if (!qword_1003EEA98)
  {
    sub_10004AE58(&qword_1003EEA90);
    sub_1000424DC(&qword_1003EEAA0, (void (*)(uint64_t))&type metadata accessor for GroupID);
    sub_1000424DC(&qword_1003EEAA8, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEA98);
  }
  return result;
}

Swift::Int FriendInfoOption.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_1000D5A94(void *a1)
{
  return FriendInfoOption.encode(to:)(a1);
}

Swift::Int sub_1000D5AAC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000D5B30()
{
  return sub_1000424DC(&qword_1003EEAF0, (void (*)(uint64_t))type metadata accessor for FriendInfoOption);
}

uint64_t assignWithCopy for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HandleType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ClientOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  int v23 = v16((void *)(a1 + v20), 1, v14);
  int v24 = v16(v22, 1, v14);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v21, v22, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v21, v14);
LABEL_12:
    uint64_t v25 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v21, v22, v14);
LABEL_13:
  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for Handle();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 24))(v30, v31, v32);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_18:
    uint64_t v37 = sub_100044014(&qword_1003F3B30);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 16))(v30, v31, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_19:
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HandleType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ClientOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v16((const void *)(a2 + v18), 1, v14))
  {
    uint64_t v21 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v19, v20, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  uint64_t v22 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  int v23 = (void *)(a1 + v22);
  int v24 = (const void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for Handle();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_100044014(&qword_1003F3B30);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v28 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v28) = *(unsigned char *)(a2 + v28);
  uint64_t v29 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  return a1;
}

uint64_t assignWithTake for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HandleType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ClientOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  int v23 = v16((void *)(a1 + v20), 1, v14);
  int v24 = v16(v22, 1, v14);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v21, v22, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v21, v14);
LABEL_12:
    uint64_t v25 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v21, v22, v14);
LABEL_13:
  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = type metadata accessor for Handle();
  uint64_t v35 = *(void *)(v34 - 8);
  int v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v32, v33, v34);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_18;
  }
  if (v38)
  {
LABEL_18:
    uint64_t v39 = sub_100044014(&qword_1003F3B30);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v32, v33, v34);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_19:
  uint64_t v40 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v40) = *(unsigned char *)(a2 + v40);
  uint64_t v41 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v41) = *(unsigned char *)(a2 + v41);
  return a1;
}

uint64_t sub_1000D6804(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HandleType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for ClientOrigin();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_11:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_12;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v16 = sub_100044014((uint64_t *)&unk_1003EE800);
    if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
    {
      uint64_t v8 = v16;
      uint64_t v12 = *(void *)(v16 - 8);
      uint64_t v13 = a3[7];
      goto LABEL_11;
    }
    uint64_t v17 = sub_100044014(&qword_1003F3B30);
    int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
    uint64_t v19 = v17;
    uint64_t v20 = a1 + a3[10];
    return v18(v20, a2, v19);
  }
}

uint64_t sub_1000D69D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for HandleType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for ClientOrigin();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v14 = *(void *)(result - 8);
    uint64_t v15 = a4[5];
LABEL_9:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
    return result;
  }
  uint64_t v16 = sub_100044014((uint64_t *)&unk_1003EE800);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_9;
  }
  uint64_t v17 = sub_100044014(&qword_1003F3B30);
  int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[10];

  return v18(v20, a2, a2, v19);
}

void sub_1000D6BAC()
{
  type metadata accessor for HandleType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ClientOrigin();
    if (v1 <= 0x3F)
    {
      sub_1000DDF3C(319, (unint64_t *)&qword_1003EE8D8, (void (*)(uint64_t))&type metadata accessor for Date);
      if (v2 <= 0x3F)
      {
        sub_1000DDF3C(319, (unint64_t *)&qword_1003F3BA0, (void (*)(uint64_t))&type metadata accessor for Handle);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for FriendInfoOption.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FriendInfoOption.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D6EA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendInfoOption.CodingKeys()
{
  return &type metadata for FriendInfoOption.CodingKeys;
}

unint64_t sub_1000D6EE4()
{
  unint64_t result = qword_1003EEBB0;
  if (!qword_1003EEBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEBB0);
  }
  return result;
}

unint64_t sub_1000D6F3C()
{
  unint64_t result = qword_1003EEBB8;
  if (!qword_1003EEBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEBB8);
  }
  return result;
}

unint64_t sub_1000D6F94()
{
  unint64_t result = qword_1003EEBC0;
  if (!qword_1003EEBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEBC0);
  }
  return result;
}

void *sub_1000D6FE8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000D6FF4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000D7054()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1000D70A4(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1000D70AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1000D70C0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1000D70D4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000D70E8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000D7118@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000D7144@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1000D7168(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000D717C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1000D7190(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000D71A4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000D71B8(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000D71CC(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000D71E0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000D71F4()
{
  return *v0 == 0;
}

uint64_t sub_1000D7204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_1000D721C(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1000D7230@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1000DBFD8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1000D7270@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v215 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v211 = (char *)&v188 - v7;
  uint64_t v8 = type metadata accessor for ClientOrigin();
  uint64_t v212 = *(void *)(v8 - 8);
  uint64_t v213 = v8;
  __chkstk_darwin(v8);
  uint64_t v218 = (char *)&v188 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandleType();
  uint64_t v220 = *(void *)(v10 - 8);
  uint64_t v221 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v216 = (char *)&v188 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v217 = (char *)&v188 - v14;
  __chkstk_darwin(v13);
  uint64_t v209 = (char *)&v188 - v15;
  uint64_t v214 = type metadata accessor for FriendInfoOption(0);
  uint64_t v210 = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  uint64_t v219 = (uint64_t)&v188 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100044014(&qword_1003F3B30);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  v208 = (char *)&v188 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v207 = (char *)&v188 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v204 = (char *)&v188 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v203 = (char *)&v188 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v202 = (char *)&v188 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  char v201 = (char *)&v188 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v200 = (char *)&v188 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v199 = (char *)&v188 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v198 = (char *)&v188 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v197 = (char *)&v188 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v196 = (char *)&v188 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v195 = (char *)&v188 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v193 = (char *)&v188 - v43;
  __chkstk_darwin(v42);
  uint64_t v192 = (char *)&v188 - v44;
  uint64_t v45 = sub_100044014(&qword_1003EEBD0);
  uint64_t v46 = __chkstk_darwin(v45 - 8);
  int v194 = (char *)&v188 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v191 = (char *)&v188 - v48;
  uint64_t v49 = type metadata accessor for Handle();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v206 = (char *)&v188 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  double v54 = (char *)&v188 - v53;
  double v55 = (int *)type metadata accessor for FriendRecord(0);
  double v56 = (Swift::String *)((char *)a2 + v55[16]);
  char v222 = v56;
  v223 = (int *)v50;
  v56->_countAndFlagsBits = 0;
  v56->_object = 0;
  double v57 = *(void (**)(void))(v50 + 56);
  uint64_t v205 = (uint64_t)a2 + v55[36];
  v57();
  Friend.handle.getter();
  Handle.identifier.getter();
  double v60 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  uint64_t v59 = v50 + 8;
  id v58 = v60;
  v60((uint64_t)v54, v49);
  Swift::String v61 = String.lowercased()();
  double v62 = a2;
  swift_bridgeObjectRelease();
  *a2 = v61;
  Friend.handle.getter();
  uint64_t v63 = Handle.qualifiedIdentifier.getter();
  double v65 = v64;
  v60((uint64_t)v54, v49);
  a2[1]._countAndFlagsBits = v63;
  a2[1]._object = v65;
  Friend.handle.getter();
  uint64_t v66 = (uint64_t)v191;
  Handle.idsStatus.getter();
  v60((uint64_t)v54, v49);
  sub_100013B50(v66, (uint64_t)v62 + v55[6], &qword_1003EEBD0);
  Friend.handle.getter();
  uint64_t v67 = Handle.dsid.getter();
  uint64_t v69 = v68;
  v60((uint64_t)v54, v49);
  id v70 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[7]);
  *id v70 = v67;
  v70[1] = v69;
  Friend.handle.getter();
  Handle.trackingTimestamp.getter();
  uint64_t v72 = v71;
  v60((uint64_t)v54, v49);
  *(uint64_t *)((char *)&v62->_countAndFlagsBits + v55[8]) = v72;
  Friend.handle.getter();
  uint64_t v73 = Handle.hashedDSID.getter();
  uint64_t v75 = v74;
  v60((uint64_t)v54, v49);
  uint64_t v76 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[9]);
  *uint64_t v76 = v73;
  v76[1] = v75;
  Friend.handle.getter();
  uint64_t v77 = Handle.favoriteOrder.getter();
  uint64_t v79 = v78;
  v60((uint64_t)v54, v49);
  int v80 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[10]);
  *int v80 = v77;
  v80[1] = v79;
  Friend.handle.getter();
  LOBYTE(v77) = Handle.reachable.getter();
  v60((uint64_t)v54, v49);
  *((unsigned char *)&v62->_countAndFlagsBits + v55[11]) = v77;
  Friend.handle.getter();
  uint64_t v81 = Handle.pushIdentifiers.getter();
  v60((uint64_t)v54, v49);
  *(uint64_t *)((char *)&v62->_countAndFlagsBits + v55[12]) = v81;
  Friend.handle.getter();
  uint64_t v82 = Handle.prettyName.getter();
  uint64_t v84 = v83;
  v60((uint64_t)v54, v49);
  uint64_t v85 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[13]);
  *uint64_t v85 = v82;
  v85[1] = v84;
  Friend.handle.getter();
  uint64_t v86 = Handle.contactIdentifier.getter();
  uint64_t v88 = v87;
  v60((uint64_t)v54, v49);
  uint64_t v89 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[14]);
  *uint64_t v89 = v86;
  v89[1] = v88;
  Friend.handle.getter();
  uint64_t v90 = Handle.serverID.getter();
  uint64_t v92 = v91;
  v60((uint64_t)v54, v49);
  p_countAndFlagsBits = &v222->_countAndFlagsBits;
  swift_bridgeObjectRelease();
  uint64_t *p_countAndFlagsBits = v90;
  p_countAndFlagsBits[1] = v92;
  Friend.handle.getter();
  uint64_t v94 = Handle.siblingIdentifiers.getter();
  v60((uint64_t)v54, v49);
  uint64_t v224 = v94;
  sub_100044014(&qword_1003ED230);
  sub_100014FFC((unint64_t *)&qword_1003EE3F8, &qword_1003ED230);
  uint64_t v95 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v97 = v96;
  swift_bridgeObjectRelease();
  uint64_t v98 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[15]);
  *uint64_t v98 = v95;
  v98[1] = v97;
  uint64_t v99 = (uint64_t)v192;
  Friend.ownerHandle.getter();
  char v222 = (Swift::String *)*((void *)v223 + 6);
  v223 += 12;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v99, 1, v49) == 1)
  {
    sub_10000A520(v99, &qword_1003F3B30);
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  else
  {
    uint64_t v100 = Handle.identifier.getter();
    uint64_t v101 = v102;
    v58(v99, v49);
  }
  uint64_t v103 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[17]);
  *uint64_t v103 = v100;
  v103[1] = v101;
  uint64_t v104 = (uint64_t)v193;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v104, 1, v49) == 1)
  {
    sub_10000A520(v104, &qword_1003F3B30);
    uint64_t v105 = 0;
    uint64_t v106 = 0;
  }
  else
  {
    uint64_t v105 = Handle.qualifiedIdentifier.getter();
    uint64_t v106 = v107;
    v58(v104, v49);
  }
  long long v108 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[18]);
  *long long v108 = v105;
  v108[1] = v106;
  uint64_t v109 = (uint64_t)v195;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v109, 1, v49) == 1)
  {
    sub_10000A520(v109, &qword_1003F3B30);
    uint64_t v110 = type metadata accessor for IDSStatus();
    uint64_t v111 = (uint64_t)v194;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v194, 1, 1, v110);
  }
  else
  {
    double v112 = v194;
    Handle.idsStatus.getter();
    uint64_t v111 = (uint64_t)v112;
    v58(v109, v49);
  }
  uint64_t v113 = (uint64_t)v196;
  uint64_t v114 = (uint64_t)v199;
  sub_100013B50(v111, (uint64_t)v62 + v55[19], &qword_1003EEBD0);
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v113, 1, v49) == 1)
  {
    sub_10000A520(v113, &qword_1003F3B30);
    uint64_t v115 = 0;
    uint64_t v116 = 0;
  }
  else
  {
    uint64_t v115 = Handle.dsid.getter();
    uint64_t v117 = v113;
    uint64_t v116 = v118;
    v58(v117, v49);
  }
  uint64_t v119 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[20]);
  *uint64_t v119 = v115;
  v119[1] = v116;
  uint64_t v120 = v197;
  Friend.ownerHandle.getter();
  uint64_t v121 = (uint64_t)v120;
  unsigned int v122 = ((uint64_t (*)(char *, uint64_t, uint64_t))v222)(v120, 1, v49);
  if (v122 == 1)
  {
    sub_10000A520(v121, &qword_1003F3B30);
    uint64_t v123 = 0;
  }
  else
  {
    Handle.trackingTimestamp.getter();
    uint64_t v123 = v124;
    v58(v121, v49);
  }
  uint64_t v125 = (char *)v62 + v55[22];
  *(void *)uint64_t v125 = v123;
  v125[8] = v122 == 1;
  uint64_t v126 = (uint64_t)v198;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v126, 1, v49) == 1)
  {
    sub_10000A520(v126, &qword_1003F3B30);
    uint64_t v127 = 0;
    uint64_t v128 = 0;
  }
  else
  {
    uint64_t v127 = Handle.hashedDSID.getter();
    uint64_t v129 = v126;
    uint64_t v128 = v130;
    v58(v129, v49);
  }
  uint64_t v131 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[23]);
  *uint64_t v131 = v127;
  v131[1] = v128;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v114, 1, v49) == 1)
  {
    sub_10000A520(v114, &qword_1003F3B30);
    uint64_t v132 = 0;
    uint64_t v133 = 0;
  }
  else
  {
    uint64_t v132 = Handle.favoriteOrder.getter();
    uint64_t v133 = v134;
    v58(v114, v49);
  }
  id v135 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[24]);
  uint64_t *v135 = v132;
  v135[1] = v133;
  uint64_t v136 = (uint64_t)v200;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v136, 1, v49) == 1)
  {
    sub_10000A520(v136, &qword_1003F3B30);
    char v137 = 2;
  }
  else
  {
    char v137 = Handle.reachable.getter();
    v58(v136, v49);
  }
  uint64_t v138 = (uint64_t)v202;
  *((unsigned char *)&v62->_countAndFlagsBits + v55[25]) = v137;
  uint64_t v139 = (uint64_t)v201;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v139, 1, v49) == 1)
  {
    sub_10000A520(v139, &qword_1003F3B30);
    uint64_t v140 = 0;
  }
  else
  {
    uint64_t v140 = Handle.pushIdentifiers.getter();
    v58(v139, v49);
  }
  *(uint64_t *)((char *)&v62->_countAndFlagsBits + v55[26]) = v140;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v138, 1, v49) == 1)
  {
    sub_10000A520(v138, &qword_1003F3B30);
    uint64_t v141 = 0;
    uint64_t v142 = 0;
  }
  else
  {
    uint64_t v141 = Handle.prettyName.getter();
    uint64_t v143 = v138;
    uint64_t v142 = v144;
    v58(v143, v49);
  }
  uint64_t v145 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[27]);
  *uint64_t v145 = v141;
  v145[1] = v142;
  uint64_t v146 = (uint64_t)v203;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v146, 1, v49) == 1)
  {
    sub_10000A520(v146, &qword_1003F3B30);
    uint64_t v147 = 0;
    uint64_t v148 = 0;
  }
  else
  {
    uint64_t v147 = Handle.contactIdentifier.getter();
    uint64_t v149 = v146;
    uint64_t v148 = v150;
    v58(v149, v49);
  }
  uint64_t v151 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[28]);
  *uint64_t v151 = v147;
  v151[1] = v148;
  uint64_t v152 = (uint64_t)v204;
  Friend.ownerHandle.getter();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v222)(v152, 1, v49) == 1)
  {
    sub_10000A520(v152, &qword_1003F3B30);
    uint64_t v153 = 0;
    uint64_t v154 = 0;
  }
  else
  {
    uint64_t v153 = Handle.serverID.getter();
    uint64_t v155 = v152;
    uint64_t v154 = v156;
    v58(v155, v49);
  }
  uint64_t v157 = (uint64_t *)((char *)&v62->_countAndFlagsBits + v55[29]);
  *uint64_t v157 = v153;
  v157[1] = v154;
  uint64_t v158 = (uint64_t)v207;
  Friend.ownerHandle.getter();
  unsigned int v159 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v222)(v158, 1, v49);
  uint64_t v190 = v59;
  uint64_t v189 = v58;
  if (v159 == 1)
  {
    sub_10000A520(v158, &qword_1003F3B30);
    uint64_t v160 = 0;
  }
  else
  {
    uint64_t v160 = Handle.expiresByGroupId.getter();
    v58(v158, v49);
  }
  *(uint64_t *)((char *)&v62->_countAndFlagsBits + v55[21]) = v160;
  uint64_t v161 = (uint64_t)v208;
  Friend.ownerHandle.getter();
  uint64_t v162 = v205;
  sub_10004793C(v161, v205);
  *((unsigned char *)&v62->_countAndFlagsBits + v55[30]) = Friend.secureLocationsCapable.getter() & 1;
  *((unsigned char *)&v62->_countAndFlagsBits + v55[31]) = Friend.shallowOrLiveSecureLocationsCapable.getter() & 1;
  *((unsigned char *)&v62->_countAndFlagsBits + v55[32]) = Friend.fallbackToLegacyAllowed.getter() & 1;
  *((unsigned char *)&v62->_countAndFlagsBits + v55[33]) = Friend.fallbackToLegacy.getter() & 1;
  v163 = v209;
  Friend.type.getter();
  char v222 = v62;
  v223 = v55;
  Friend.friendshipOrigin.getter();
  Friend.handle.getter();
  v208 = (char *)Handle.expiresByGroupId.getter();
  uint64_t v164 = (void (*)(char *, uint64_t))v189;
  v189((uint64_t)v54, v49);
  uint64_t v165 = (uint64_t)v211;
  Friend.createdAt.getter();
  uint64_t v166 = (uint64_t)v215;
  Friend.expiry.getter();
  uint64_t v167 = v206;
  Friend.handle.getter();
  uint64_t v207 = (char *)Handle.serverID.getter();
  uint64_t v204 = v168;
  v164(v167, v49);
  unsigned int v169 = (int *)v214;
  uint64_t v170 = v219;
  sub_100013210(v162, v219 + *(int *)(v214 + 40), &qword_1003F3B30);
  LOBYTE(v206) = Friend.shallowOrLiveSecureLocationsCapable.getter() & 1;
  LODWORD(v206) = v206;
  LOBYTE(v205) = Friend.secureLocationsCapable.getter() & 1;
  LODWORD(v205) = v205;
  LOBYTE(v203) = Friend.fallbackToLegacy.getter() & 1;
  LODWORD(v203) = v203;
  LOBYTE(v167) = Friend.fallbackToLegacyAllowed.getter() & 1;
  uint64_t v171 = v220;
  uint64_t v172 = v163;
  uint64_t v173 = v221;
  (*(void (**)(uint64_t, char *, uint64_t))(v220 + 32))(v170, v172, v221);
  v174 = v223;
  (*(void (**)(uint64_t, char *, uint64_t))(v212 + 32))(v170 + v169[5], v218, v213);
  *(void *)(v170 + v169[6]) = v208;
  sub_100013B50(v165, v170 + v169[7], (uint64_t *)&unk_1003EE800);
  sub_100013B50(v166, v170 + v169[8], (uint64_t *)&unk_1003EE800);
  uint64_t v175 = (void *)(v170 + v169[9]);
  uint64_t v176 = v204;
  *uint64_t v175 = v207;
  v175[1] = v176;
  *(unsigned char *)(v170 + v169[11]) = (_BYTE)v206;
  *(unsigned char *)(v170 + v169[12]) = v205;
  *(unsigned char *)(v170 + v169[13]) = (_BYTE)v203;
  *(unsigned char *)(v170 + v169[14]) = (_BYTE)v167;
  sub_100044014(&qword_1003EEBE8);
  unint64_t v177 = (*(unsigned __int8 *)(v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
  uint64_t v178 = swift_allocObject();
  *(_OWORD *)(v178 + 16) = xmmword_100367D70;
  sub_1000456C0(v170, v178 + v177, type metadata accessor for FriendInfoOption);
  uint64_t v179 = sub_1000465B4(v178);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v180 = v222;
  *(uint64_t *)((char *)&v222->_countAndFlagsBits + v174[34]) = v179;
  unsigned int v181 = v217;
  Friend.type.getter();
  v182 = v216;
  (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v216, v181, v173);
  int v183 = (*(uint64_t (**)(char *, uint64_t))(v171 + 88))(v182, v173);
  if (v183 == enum case for HandleType.follower(_:))
  {
    uint64_t v184 = 2;
    unsigned int v185 = v180;
LABEL_50:
    uint64_t v186 = type metadata accessor for Friend();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v186 - 8) + 8))(a1, v186);
    (*(void (**)(char *, uint64_t))(v220 + 8))(v181, v221);
    uint64_t result = sub_100044B7C(v219, type metadata accessor for FriendInfoOption);
    *(uint64_t *)((char *)&v185->_countAndFlagsBits + v174[35]) = v184;
    return result;
  }
  unsigned int v185 = v180;
  if (v183 == enum case for HandleType.following(_:))
  {
    uint64_t v184 = 4;
    goto LABEL_50;
  }
  if (v183 == enum case for HandleType.futureFollower(_:))
  {
    uint64_t v184 = 8;
    goto LABEL_50;
  }
  if (v183 == enum case for HandleType.futureFollowing(_:))
  {
    uint64_t v184 = 16;
    goto LABEL_50;
  }
  if (v183 == enum case for HandleType.pendingOffer(_:))
  {
    uint64_t v184 = 32;
    goto LABEL_50;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D8790(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F3B30);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v98 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v117 = (uint64_t)&v97 - v7;
  uint64_t v119 = type metadata accessor for Friend();
  uint64_t v114 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v113 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003EEBC8);
  __chkstk_darwin(v9 - 8);
  uint64_t v97 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v122 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v105 = (char *)&v97 - v14;
  uint64_t v125 = type metadata accessor for Handle();
  uint64_t v15 = *(void *)(v125 - 8);
  uint64_t v16 = __chkstk_darwin(v125);
  uint64_t v127 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v97 - v18;
  uint64_t v118 = type metadata accessor for ClientOrigin();
  uint64_t v106 = *(uint64_t **)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v104 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for HandleType();
  uint64_t v99 = v21;
  uint64_t v123 = *(void *)(v21 - 8);
  uint64_t v22 = v123;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v110 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v107 = (char *)&v97 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v97 - v27;
  uint64_t v29 = type metadata accessor for FriendInfoOption(0);
  uint64_t v30 = (int *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v112 = (uint64_t)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v111 = (uint64_t)&v97 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v97 - v35;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v115 = a2;
  uint64_t v109 = v22 + 16;
  long long v108 = v37;
  v37(v28, a2, v21);
  Friend.friendshipOrigin.getter();
  Friend.handle.getter();
  uint64_t v103 = (void (*)(char *))Handle.expiresByGroupId.getter();
  uint64_t v116 = v15;
  uint64_t v38 = v15 + 8;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v121 = v19;
  uint64_t v40 = v125;
  v39(v19, v125);
  uint64_t v41 = (uint64_t)v105;
  Friend.createdAt.getter();
  Friend.expiry.getter();
  uint64_t v42 = v127;
  Friend.handle.getter();
  uint64_t v102 = Handle.serverID.getter();
  uint64_t v101 = v43;
  uint64_t v124 = v38;
  uint64_t v120 = v39;
  v39(v42, v40);
  uint64_t v44 = v28;
  uint64_t v45 = v99;
  Friend.ownerHandle.getter();
  LOBYTE(v42) = Friend.shallowOrLiveSecureLocationsCapable.getter() & 1;
  LOBYTE(v100) = Friend.secureLocationsCapable.getter() & 1;
  int v100 = v100;
  LOBYTE(v28) = Friend.fallbackToLegacy.getter() & 1;
  uint64_t v127 = a1;
  uint64_t v46 = v123;
  LOBYTE(a2) = Friend.fallbackToLegacyAllowed.getter() & 1;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v36, v44, v45);
  ((void (*)(char *, char *, uint64_t))v106[4])(&v36[v30[7]], v104, v118);
  *(void *)&v36[v30[8]] = v103;
  sub_100013B50(v41, (uint64_t)&v36[v30[9]], (uint64_t *)&unk_1003EE800);
  sub_100013B50(v122, (uint64_t)&v36[v30[10]], (uint64_t *)&unk_1003EE800);
  uint64_t v47 = (uint64_t *)&v36[v30[11]];
  uint64_t v48 = v101;
  *uint64_t v47 = v102;
  v47[1] = v48;
  v36[v30[13]] = (char)v42;
  v36[v30[14]] = v100;
  v36[v30[15]] = (char)v28;
  v36[v30[16]] = a2;
  uint64_t v122 = type metadata accessor for FriendRecord(0);
  uint64_t v49 = (uint64_t *)(v126 + *(int *)(v122 + 136));
  uint64_t v50 = *v49;
  uint64_t v118 = (uint64_t)v36;
  if (sub_100149270((uint64_t)v36, v50))
  {
    uint64_t v51 = v97;
    sub_1000DB414(v97);
    sub_10000A520(v51, &qword_1003EEBC8);
  }
  uint64_t v106 = v49;
  uint64_t v52 = v127;
  Friend.type.getter();
  uint64_t v53 = *(void (**)(char *))(v46 + 104);
  double v54 = v107;
  LODWORD(v104) = enum case for HandleType.following(_:);
  uint64_t v103 = v53;
  v53(v107);
  char v55 = static HandleType.== infix(_:_:)();
  double v56 = v44;
  double v57 = *(void (**)(char *, uint64_t))(v46 + 8);
  v57(v54, v45);
  v57(v56, v45);
  id v58 = v113;
  uint64_t v59 = v114;
  double v60 = v52;
  uint64_t v61 = v119;
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v113, v60, v119);
  if (v55)
  {
    uint64_t v62 = v45;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v61);
    LODWORD(v105) = enum case for HandleType.follower(_:);
    uint64_t v63 = v126;
    uint64_t v64 = v125;
    uint64_t v65 = v122;
    uint64_t v66 = v118;
  }
  else
  {
    Friend.type.getter();
    LODWORD(v105) = enum case for HandleType.follower(_:);
    v103(v54);
    char v67 = static HandleType.== infix(_:_:)();
    v57(v54, v45);
    uint64_t v68 = v56;
    uint64_t v62 = v45;
    v57(v68, v45);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v119);
    uint64_t v63 = v126;
    uint64_t v64 = v125;
    uint64_t v65 = v122;
    uint64_t v66 = v118;
    if ((v67 & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v69 = v121;
  Friend.handle.getter();
  uint64_t v70 = Handle.serverID.getter();
  uint64_t v72 = v71;
  v120(v69, v64);
  uint64_t v73 = (uint64_t *)(v63 + *(int *)(v65 + 64));
  swift_bridgeObjectRelease();
  uint64_t *v73 = v70;
  v73[1] = v72;
LABEL_7:
  uint64_t v74 = *(int *)(v65 + 140);
  uint64_t v75 = *(void *)(v63 + v74);
  uint64_t v76 = v110;
  v108(v110, v115, v62);
  int v77 = (*(uint64_t (**)(char *, uint64_t))(v123 + 88))(v76, v62);
  if (v77 == v105)
  {
    uint64_t v78 = 2;
    uint64_t v79 = v122;
    uint64_t v80 = v64;
  }
  else
  {
    uint64_t v79 = v122;
    uint64_t v80 = v64;
    if (v77 == v104)
    {
      uint64_t v78 = 4;
    }
    else if (v77 == enum case for HandleType.futureFollower(_:))
    {
      uint64_t v78 = 8;
    }
    else if (v77 == enum case for HandleType.futureFollowing(_:))
    {
      uint64_t v78 = 16;
    }
    else
    {
      if (v77 != enum case for HandleType.pendingOffer(_:))
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v78 = 32;
    }
  }
  *(void *)(v63 + v74) = v78 | v75;
  uint64_t v81 = v112;
  sub_1000456C0(v66, v112, type metadata accessor for FriendInfoOption);
  uint64_t v82 = v111;
  sub_1000467A0(v111, v81);
  sub_100044B7C(v82, type metadata accessor for FriendInfoOption);
  uint64_t v83 = (uint64_t *)(v63 + *(int *)(v79 + 60));
  uint64_t v84 = v83[1];
  uint64_t v130 = *v83;
  uint64_t v131 = v84;
  uint64_t v128 = 44;
  unint64_t v129 = 0xE100000000000000;
  sub_10004650C();
  uint64_t v85 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v86 = sub_1002466DC(v85);
  swift_bridgeObjectRelease();
  uint64_t v87 = v121;
  Friend.handle.getter();
  uint64_t v88 = Handle.siblingIdentifiers.getter();
  v120(v87, v80);
  uint64_t v89 = sub_10022A404(v88, v86);
  swift_bridgeObjectRelease();
  uint64_t v130 = v89;
  sub_100044014(&qword_1003EEBD8);
  sub_100014FFC(&qword_1003EEBE0, &qword_1003EEBD8);
  uint64_t v90 = Sequence<>.joined(separator:)();
  uint64_t v92 = v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v83 = v90;
  v83[1] = v92;
  uint64_t v93 = v63 + *(int *)(v79 + 144);
  uint64_t v94 = v117;
  sub_100013210(v93, v117, &qword_1003F3B30);
  LODWORD(v89) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v94, 1, v80);
  sub_10000A520(v94, &qword_1003F3B30);
  if (v89 != 1) {
    return sub_100044B7C(v66, type metadata accessor for FriendInfoOption);
  }
  uint64_t v95 = (uint64_t)v98;
  Friend.ownerHandle.getter();
  sub_100044B7C(v66, type metadata accessor for FriendInfoOption);
  return sub_10004793C(v95, v93);
}

BOOL sub_1000D93C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HandleType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v12 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v12 - v7, a1, v2);
  Friend.type.getter();
  sub_1000424DC(&qword_1003EEBF8, (void (*)(uint64_t))&type metadata accessor for HandleType);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  v10(v8, v2);
  return (v9 & 1) == 0;
}

unint64_t sub_1000D9550(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x6449656C646E6168;
      break;
    case 3:
      unint64_t result = 0x7344656C646E6168;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0x6552656C646E6168;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0xD000000000000015;
      break;
    case 14:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 15:
      unint64_t result = 0xD000000000000014;
      break;
    case 16:
    case 32:
      unint64_t result = 0x6E614872656E776FLL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 18:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000015;
      break;
    case 20:
      unint64_t result = 0xD000000000000018;
      break;
    case 21:
      unint64_t result = 0xD000000000000014;
      break;
    case 22:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 23:
      unint64_t result = 0xD000000000000015;
      break;
    case 24:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 25:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 26:
      unint64_t result = 0xD000000000000016;
      break;
    case 27:
      unint64_t result = 0xD000000000000023;
      break;
    case 28:
      unint64_t result = 0xD000000000000017;
      break;
    case 30:
      unint64_t result = 0x6E49646E65697266;
      break;
    case 31:
      unint64_t result = 0x7365707974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D986C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EED70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000DDF90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = (int *)type metadata accessor for FriendRecord(0);
    LOBYTE(v14) = 2;
    type metadata accessor for IDSStatus();
    sub_1000424DC(&qword_1003ED660, (void (*)(uint64_t))&type metadata accessor for IDSStatus);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + v9[12]);
    char v13 = 8;
    uint64_t v10 = sub_100044014(&qword_1003ED230);
    v12[1] = sub_100032194((unint64_t *)&qword_1003ED238);
    void v12[2] = v10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + v9[21]);
    char v13 = 17;
    sub_100044014(&qword_1003EEA90);
    sub_1000D5930();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + v9[26]);
    char v13 = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 26;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 27;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 28;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 29;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + v9[34]);
    char v13 = 30;
    sub_100044014(&qword_1003EED50);
    sub_1000DE038((unint64_t *)&qword_1003EED78, &qword_1003EED80);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + v9[35]);
    char v13 = 31;
    sub_1000DE0CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 32;
    type metadata accessor for Handle();
    sub_1000424DC(&qword_1003EEAB0, (void (*)(uint64_t))&type metadata accessor for Handle);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000DA10C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v132 = a2;
  uint64_t v3 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003EEBD0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  char v9 = (char *)v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v129 - v10;
  uint64_t v12 = sub_100044014(&qword_1003EED40);
  uint64_t v133 = *(void *)(v12 - 8);
  uint64_t v134 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FriendRecord(0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (void *)((char *)v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (char *)v18 + *(int *)(v16 + 64);
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  char v137 = (uint64_t *)v19;
  uint64_t v139 = v18;
  uint64_t v140 = (int *)v16;
  uint64_t v20 = (uint64_t)v18 + *(int *)(v16 + 144);
  uint64_t v21 = type metadata accessor for Handle();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  uint64_t v136 = v20;
  v22(v20, 1, 1, v21);
  uint64_t v23 = a1[3];
  unint64_t v135 = (unint64_t)a1;
  sub_100042524(a1, v23);
  sub_1000DDF90();
  uint64_t v24 = v138;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24)
  {
    uint64_t v138 = v24;
    unint64_t v25 = 0x100001000;
    goto LABEL_4;
  }
  unint64_t v130 = (unint64_t)v5;
  unint64_t v131 = (unint64_t)v9;
  LOBYTE(v142) = 0;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v37 = v139;
  *uint64_t v139 = v26;
  v37[1] = v38;
  LOBYTE(v142) = 1;
  v37[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v37[3] = v39;
  uint64_t v40 = type metadata accessor for IDSStatus();
  LOBYTE(v142) = 2;
  uint64_t v41 = sub_1000424DC(&qword_1003ED648, (void (*)(uint64_t))&type metadata accessor for IDSStatus);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v129[2] = v41;
  v129[3] = v40;
  uint64_t v42 = v37;
  uint64_t v43 = v140;
  sub_100013B50((uint64_t)v11, (uint64_t)v42 + v140[6], &qword_1003EEBD0);
  LOBYTE(v142) = 3;
  uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v45 = (uint64_t *)((char *)v42 + v43[7]);
  *uint64_t v45 = v44;
  v45[1] = v46;
  LOBYTE(v142) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(uint64_t *)((char *)v42 + v43[8]) = v47;
  LOBYTE(v142) = 5;
  uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v49 = (uint64_t *)((char *)v42 + v43[9]);
  *uint64_t v49 = v48;
  v49[1] = v50;
  LOBYTE(v142) = 6;
  uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v52 = (uint64_t *)((char *)v42 + v43[10]);
  *uint64_t v52 = v51;
  v52[1] = v53;
  LOBYTE(v142) = 7;
  char v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v56 = v43[11];
  double v57 = v139;
  *((unsigned char *)v139 + v56) = v54;
  uint64_t v58 = sub_100044014(&qword_1003ED230);
  char v141 = 8;
  v129[0] = sub_100032194((unint64_t *)&qword_1003ED618);
  v129[1] = v58;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(uint64_t *)((char *)v57 + v140[12]) = v142;
  LOBYTE(v142) = 9;
  uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = 0;
  uint64_t v61 = (uint64_t *)((char *)v139 + v140[13]);
  *uint64_t v61 = v59;
  v61[1] = v60;
  LOBYTE(v142) = 10;
  uint64_t v62 = v138;
  uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v62;
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v65 = 879;
LABEL_51:
    uint64_t v55 = 4096;
LABEL_52:
    unint64_t v25 = (unint64_t)&_mh_execute_header | v55 & 0xFFFF0000FFFFFFFFLL | v65;
    goto LABEL_4;
  }
  uint64_t v66 = (uint64_t *)((char *)v139 + v140[14]);
  *uint64_t v66 = v63;
  v66[1] = v64;
  LOBYTE(v142) = 11;
  uint64_t v67 = v138;
  uint64_t v68 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v138 = v67;
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v65 = 1903;
    goto LABEL_51;
  }
  uint64_t v70 = (uint64_t *)((char *)v139 + v140[15]);
  *uint64_t v70 = v68;
  v70[1] = v69;
  LOBYTE(v142) = 12;
  uint64_t v71 = v138;
  uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v71;
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v65 = 3951;
    goto LABEL_51;
  }
  uint64_t v74 = v137;
  *char v137 = v72;
  v74[1] = v73;
  LOBYTE(v142) = 13;
  uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = 0;
  int v77 = (uint64_t *)((char *)v139 + v140[17]);
  *int v77 = v75;
  v77[1] = v76;
  LOBYTE(v142) = 14;
  uint64_t v78 = v138;
  uint64_t v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v78;
  if (v78)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v81 = 0x1FFFC4000;
LABEL_68:
    unint64_t v25 = v81 + 0x10003FF6FLL;
    goto LABEL_4;
  }
  uint64_t v82 = (uint64_t *)((char *)v139 + v140[18]);
  *uint64_t v82 = v79;
  v82[1] = v80;
  LOBYTE(v142) = 15;
  uint64_t v83 = v138;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v138 = v83;
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v81 = 0x1FFFC8000;
    goto LABEL_68;
  }
  sub_100013B50(v131, (uint64_t)v139 + v140[19], &qword_1003EEBD0);
  LOBYTE(v142) = 16;
  uint64_t v84 = v138;
  uint64_t v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v84;
  if (v84)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v81 = 0x1FFFD0000;
    goto LABEL_68;
  }
  uint64_t v87 = (uint64_t *)((char *)v139 + v140[20]);
  *uint64_t v87 = v85;
  v87[1] = v86;
  sub_100044014(&qword_1003EEA90);
  char v141 = 17;
  sub_100042568();
  uint64_t v88 = v138;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v138 = v88;
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v81 = 0x1FFFE0000;
    goto LABEL_68;
  }
  *(uint64_t *)((char *)v139 + v140[21]) = v142;
  LOBYTE(v142) = 18;
  uint64_t v89 = v138;
  uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v89;
  if (v89
    || (uint64_t v92 = (char *)v139 + v140[22],
        *(void *)uint64_t v92 = v90,
        v92[8] = v91 & 1,
        LOBYTE(v142) = 19,
        uint64_t v93 = v138,
        uint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(),
        (uint64_t v138 = v93) != 0))
  {
    uint64_t v96 = 261999;
LABEL_72:
    unint64_t v25 = (unint64_t)&_mh_execute_header | v96 & 0xFFFF0000FFFFFFFFLL;
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    goto LABEL_4;
  }
  uint64_t v97 = (uint64_t *)((char *)v139 + v140[23]);
  *uint64_t v97 = v94;
  v97[1] = v95;
  LOBYTE(v142) = 20;
  uint64_t v98 = v138;
  uint64_t v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v98;
  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    unint64_t v25 = 0x1000BFF6FLL;
    goto LABEL_4;
  }
  uint64_t v101 = (uint64_t *)((char *)v139 + v140[24]);
  *uint64_t v101 = v99;
  v101[1] = v100;
  LOBYTE(v142) = 21;
  uint64_t v102 = v138;
  char v103 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v102;
  if (v102
    || (*((unsigned char *)v139 + v140[25]) = v103,
        char v141 = 22,
        uint64_t v104 = v138,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
        (uint64_t v138 = v104) != 0))
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    unint64_t v25 = 0x1001BFF6FLL;
    goto LABEL_4;
  }
  *(uint64_t *)((char *)v139 + v140[26]) = v142;
  LOBYTE(v142) = 23;
  uint64_t v105 = v138;
  uint64_t v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v105;
  if (v105)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v65 = 5767168;
LABEL_82:
    uint64_t v55 = 261999;
    goto LABEL_52;
  }
  long long v108 = (uint64_t *)((char *)v139 + v140[27]);
  *long long v108 = v106;
  v108[1] = v107;
  LOBYTE(v142) = 24;
  uint64_t v109 = v138;
  uint64_t v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v109;
  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    uint64_t v65 = 14155776;
    goto LABEL_82;
  }
  uint64_t v112 = (uint64_t *)((char *)v139 + v140[28]);
  *uint64_t v112 = v110;
  v112[1] = v111;
  LOBYTE(v142) = 25;
  uint64_t v113 = v138;
  uint64_t v114 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v138 = v113;
  if (v113)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    unint64_t v25 = 0x101DBFF6FLL;
LABEL_4:
    uint64_t v27 = v139;
    sub_1000233E4(v135);
    uint64_t v28 = (v25 >> 13) & 1;
    uint64_t v29 = (v25 >> 14) & 1;
    uint64_t v30 = (v25 >> 15) & 1;
    uint64_t v31 = (v25 >> 16) & 1;
    uint64_t v32 = (v25 >> 17) & 1;
    uint64_t v33 = (v25 >> 19) & 1;
    unint64_t v130 = (v25 >> 20) & 1;
    unint64_t v131 = (v25 >> 22) & 1;
    uint64_t v133 = (v25 >> 23) & 1;
    uint64_t v134 = (v25 >> 24) & 1;
    unint64_t v135 = (v25 >> 25) & 1;
    if (v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v140;
      if ((v25 & 2) == 0)
      {
LABEL_6:
        if ((v25 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v34 = v140;
      if ((v25 & 2) == 0) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    if ((v25 & 4) == 0)
    {
LABEL_7:
      if ((v25 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_31;
    }
LABEL_30:
    sub_10000A520((uint64_t)v27 + v34[6], &qword_1003EEBD0);
    if ((v25 & 8) == 0)
    {
LABEL_8:
      if ((v25 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_32;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    if ((v25 & 0x20) == 0)
    {
LABEL_9:
      if ((v25 & 0x40) == 0) {
        goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    if ((v25 & 0x40) == 0)
    {
LABEL_10:
      if ((v25 & 0x100) == 0) {
        goto LABEL_11;
      }
      goto LABEL_34;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    if ((v25 & 0x100) == 0)
    {
LABEL_11:
      if ((v25 & 0x200) == 0) {
        goto LABEL_12;
      }
      goto LABEL_35;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    if ((v25 & 0x200) == 0)
    {
LABEL_12:
      if ((v25 & 0x400) == 0) {
        goto LABEL_13;
      }
      goto LABEL_36;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    if ((v25 & 0x400) == 0)
    {
LABEL_13:
      if ((v25 & 0x800) != 0)
      {
LABEL_14:
        LODWORD(v132) = 0;
        goto LABEL_15;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      LODWORD(v132) = 0;
      if ((v25 & 0x2000) != 0)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_39;
      }
LABEL_38:
      if (!v29)
      {
LABEL_17:
        if (v30) {
          goto LABEL_18;
        }
        goto LABEL_40;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      if (v30)
      {
LABEL_18:
        sub_10000A520((uint64_t)v27 + v34[19], &qword_1003EEBD0);
        if ((v31 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_41;
      }
LABEL_40:
      if (!v31)
      {
LABEL_19:
        if (v32) {
          goto LABEL_20;
        }
        goto LABEL_42;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      if (v32)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_43;
      }
LABEL_42:
      if (!v33)
      {
LABEL_21:
        uint64_t v35 = v136;
        if (v130) {
          goto LABEL_22;
        }
        goto LABEL_44;
      }
LABEL_43:
      swift_bridgeObjectRelease();
      uint64_t v35 = v136;
      if (v130)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        if ((v131 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_45;
      }
LABEL_44:
      if (!v131)
      {
LABEL_23:
        if (v133) {
          goto LABEL_24;
        }
        goto LABEL_46;
      }
LABEL_45:
      swift_bridgeObjectRelease();
      if (v133)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        if ((v134 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_47;
      }
LABEL_46:
      if (!v134)
      {
LABEL_25:
        if (v135) {
          goto LABEL_26;
        }
        goto LABEL_48;
      }
LABEL_47:
      swift_bridgeObjectRelease();
      if (v135)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        if ((v132 & 1) == 0) {
          return sub_10000A520(v35, &qword_1003F3B30);
        }
        goto LABEL_49;
      }
LABEL_48:
      if (!v132) {
        return sub_10000A520(v35, &qword_1003F3B30);
      }
LABEL_49:
      swift_bridgeObjectRelease();
      return sub_10000A520(v35, &qword_1003F3B30);
    }
LABEL_36:
    swift_bridgeObjectRelease();
    if ((v25 & 0x800) != 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
  uint64_t v116 = (uint64_t *)((char *)v139 + v140[29]);
  *uint64_t v116 = v114;
  v116[1] = v115;
  LOBYTE(v142) = 26;
  uint64_t v117 = v138;
  char v118 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v138 = v117;
  if (v117) {
    goto LABEL_88;
  }
  *((unsigned char *)v139 + v140[30]) = v118 & 1;
  LOBYTE(v142) = 27;
  uint64_t v119 = v138;
  char v120 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v138 = v119;
  if (v119
    || (*((unsigned char *)v139 + v140[31]) = v120 & 1,
        LOBYTE(v142) = 28,
        uint64_t v121 = v138,
        char v122 = KeyedDecodingContainer.decode(_:forKey:)(),
        (uint64_t v138 = v121) != 0))
  {
LABEL_88:
    uint64_t v96 = 64749423;
    goto LABEL_72;
  }
  *((unsigned char *)v139 + v140[32]) = v122 & 1;
  LOBYTE(v142) = 29;
  uint64_t v123 = v138;
  char v124 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v138 = v123;
  if (v123
    || (*((unsigned char *)v139 + v140[33]) = v124 & 1,
        sub_100044014(&qword_1003EED50),
        char v141 = 30,
        sub_1000DE038(&qword_1003EED58, &qword_1003EED60),
        uint64_t v125 = v138,
        KeyedDecodingContainer.decode<A>(_:forKey:)(),
        (uint64_t v138 = v125) != 0))
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    LODWORD(v132) = 0;
LABEL_92:
    sub_1000233E4(v135);
    uint64_t v27 = v139;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = v140;
    sub_10000A520((uint64_t)v27 + v140[6], &qword_1003EEBD0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v28) = 1;
    uint64_t v133 = 1;
    uint64_t v134 = 1;
    unint64_t v130 = 1;
    unint64_t v131 = 1;
    LODWORD(v33) = 1;
    LODWORD(v32) = 1;
    LODWORD(v31) = 1;
    LODWORD(v30) = 1;
    LODWORD(v29) = 1;
    unint64_t v135 = 1;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
  *(uint64_t *)((char *)v139 + v140[34]) = v142;
  char v141 = 31;
  sub_1000DDFE4();
  uint64_t v126 = v138;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v138 = v126;
  if (v126
    || (*(uint64_t *)((char *)v139 + v140[35]) = v142,
        LOBYTE(v142) = 32,
        sub_1000424DC(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle),
        uint64_t v127 = v138,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
        (uint64_t v138 = v127) != 0))
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
    LODWORD(v132) = 1;
    goto LABEL_92;
  }
  (*(void (**)(char *, uint64_t))(v133 + 8))(v14, v134);
  sub_10004793C(v130, v136);
  uint64_t v128 = v139;
  sub_1000456C0((uint64_t)v139, v132, type metadata accessor for FriendRecord);
  sub_1000233E4(v135);
  return sub_100044B7C((uint64_t)v128, type metadata accessor for FriendRecord);
}

unint64_t sub_1000DB330()
{
  return sub_1000D9550(*v0);
}

uint64_t sub_1000DB338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DE52C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000DB360(unsigned char *a1@<X8>)
{
  *a1 = 33;
}

uint64_t sub_1000DB36C(uint64_t a1)
{
  unint64_t v2 = sub_1000DDF90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DB3A8(uint64_t a1)
{
  unint64_t v2 = sub_1000DDF90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DB3E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DA10C(a1, a2);
}

uint64_t sub_1000DB3FC(void *a1)
{
  return sub_1000D986C(a1);
}

uint64_t sub_1000DB414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FriendInfoOption(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v1;
  uint64_t v7 = *v1;
  Hasher.init(_seed:)();
  type metadata accessor for HandleType();
  sub_1000424DC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v21 = v3;
    uint64_t v22 = a1;
    uint64_t v11 = ~v9;
    uint64_t v20 = v4;
    uint64_t v12 = *(void *)(v4 + 72);
    while (1)
    {
      sub_1000456C0(*(void *)(v7 + 48) + v12 * v10, (uint64_t)v6, type metadata accessor for FriendInfoOption);
      char v13 = static HandleType.== infix(_:_:)();
      sub_100044B7C((uint64_t)v6, type metadata accessor for FriendInfoOption);
      if (v13) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = 1;
        a1 = v22;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v15;
    uint64_t v24 = *v15;
    *uint64_t v15 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100156CE8();
      uint64_t v17 = v24;
    }
    a1 = v22;
    sub_1000457F4(*(void *)(v17 + 48) + v12 * v10, v22);
    sub_1000DB9C8(v10);
    *uint64_t v15 = v24;
    swift_bridgeObjectRelease();
    uint64_t v14 = 0;
LABEL_10:
    uint64_t v4 = v20;
    uint64_t v3 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v14, 1, v3);
}

uint64_t sub_1000DB6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000424DC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_1000424DC(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100156F24();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_1000DBCEC(v12, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_1000DB9C8(unint64_t a1)
{
  uint64_t v29 = type metadata accessor for FriendInfoOption(0);
  uint64_t v3 = *(void *)(v29 - 8);
  uint64_t result = __chkstk_darwin(v29);
  uint64_t v32 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  uint64_t v7 = *v1 + 56;
  uint64_t v8 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v28 = v1;
    uint64_t v10 = ~v8;
    swift_retain();
    uint64_t v11 = _HashTable.previousHole(before:)();
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v12 = (v11 + 1) & v10;
      uint64_t v13 = *(void *)(v3 + 72);
      uint64_t v30 = v13;
      uint64_t v31 = v7;
      do
      {
        int64_t v14 = v13 * v9;
        uint64_t v15 = *(void *)(v6 + 48) + v13 * v9;
        int64_t v16 = a1;
        uint64_t v17 = v32;
        sub_1000456C0(v15, v32, type metadata accessor for FriendInfoOption);
        uint64_t v18 = v6;
        Hasher.init(_seed:)();
        type metadata accessor for HandleType();
        unint64_t v19 = v12;
        sub_1000424DC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = v17;
        a1 = v16;
        sub_100044B7C(v21, type metadata accessor for FriendInfoOption);
        Swift::Int v22 = v20 & v10;
        unint64_t v12 = v19;
        if (v16 >= (uint64_t)v19)
        {
          if (v22 < v19)
          {
            uint64_t v13 = v30;
            uint64_t v7 = v31;
            uint64_t v6 = v18;
            goto LABEL_6;
          }
          uint64_t v13 = v30;
          uint64_t v7 = v31;
          uint64_t v6 = v18;
          if ((uint64_t)a1 < v22) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v13 = v30;
          uint64_t v7 = v31;
          uint64_t v6 = v18;
          if (v22 < v12 && (uint64_t)a1 < v22) {
            goto LABEL_6;
          }
        }
        unint64_t v23 = v13 * a1;
        if ((uint64_t)(v13 * a1) < v14 || *(void *)(v6 + 48) + v13 * a1 >= *(void *)(v6 + 48) + v14 + v13)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v9;
          if (v23 == v14) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(void *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v28;
  }
  else
  {
    *(void *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v24 = *v1;
  uint64_t v25 = *(void *)(*v1 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v24 + 16) = v27;
    ++*(_DWORD *)(v24 + 36);
  }
  return result;
}

uint64_t sub_1000DBCEC(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v42 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 56;
  uint64_t v14 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    uint64_t v38 = v5;
    uint64_t v16 = ~v14;
    swift_retain();
    uint64_t v17 = _HashTable.previousHole(before:)();
    uint64_t v18 = v12;
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      unint64_t v40 = (v17 + 1) & v16;
      Swift::Int v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v19 = v8 + 16;
      uint64_t v39 = v20;
      uint64_t v45 = *(void *)(v19 + 56);
      uint64_t v41 = v19;
      uint64_t v21 = (void (**)(char *, uint64_t))(v19 - 8);
      do
      {
        uint64_t v22 = v13;
        int64_t v23 = v45 * v15;
        v39(v11, *(void *)(v18 + 48) + v45 * v15, v7);
        uint64_t v24 = v18;
        sub_1000424DC(v42, v43);
        uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v21)(v11, v7);
        unint64_t v26 = v25 & v16;
        if (a1 >= (uint64_t)v40)
        {
          if (v26 >= v40 && a1 >= (uint64_t)v26)
          {
LABEL_16:
            uint64_t v18 = v24;
            uint64_t v29 = *(void *)(v24 + 48);
            int64_t v30 = v45 * a1;
            unint64_t v31 = v29 + v45 * a1;
            unint64_t v32 = v29 + v23 + v45;
            if (v45 * a1 < v23 || v31 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v15;
            }
            else
            {
              a1 = v15;
              if (v30 != v23)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v15;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v40 || a1 >= (uint64_t)v26)
        {
          goto LABEL_16;
        }
        uint64_t v18 = v24;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
        uint64_t v13 = v22;
      }
      while (((*(void *)(v22 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v5 = v38;
  }
  else
  {
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v34 = *v5;
  uint64_t v35 = *(void *)(*v5 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v37;
    ++*(_DWORD *)(v34 + 36);
  }
  return result;
}

uint64_t sub_1000DBFD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000DC010(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E696769726FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100373ED0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7441657461657263 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x797269707865 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4449726576726573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x8000000100373F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100373F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100373FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100373F80)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

void *sub_1000DC44C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for IDSStatus();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v99 = v13;
    uint64_t v97 = v11;
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100044014(&qword_1003EEBD0);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)v4 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    uint64_t v21 = a3[9];
    uint64_t v22 = a3[10];
    int64_t v23 = (void *)((char *)v4 + v21);
    uint64_t v24 = (void *)((char *)a2 + v21);
    uint64_t v90 = v24[1];
    void *v23 = *v24;
    v23[1] = v90;
    uint64_t v25 = (void *)((char *)v4 + v22);
    unint64_t v26 = (void *)((char *)a2 + v22);
    uint64_t v92 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v92;
    uint64_t v27 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)((char *)v4 + v27) = *(void *)((char *)a2 + v27);
    uint64_t v28 = a3[13];
    uint64_t v29 = a3[14];
    int64_t v30 = (void *)((char *)v4 + v28);
    unint64_t v31 = (void *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *int64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (void *)((char *)v4 + v29);
    uint64_t v34 = (void *)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = a3[15];
    uint64_t v37 = a3[16];
    uint64_t v38 = (void *)((char *)v4 + v36);
    uint64_t v39 = (void *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (void *)((char *)v4 + v37);
    uint64_t v42 = (void *)((char *)a2 + v37);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = a3[17];
    uint64_t v45 = a3[18];
    uint64_t v46 = (void *)((char *)v4 + v44);
    uint64_t v47 = (void *)((char *)a2 + v44);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = (void *)((char *)v4 + v45);
    uint64_t v50 = (void *)((char *)a2 + v45);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = a3[19];
    __dsta = (char *)v4 + v52;
    uint64_t v89 = (char *)a2 + v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v99(v89, 1, v97))
    {
      uint64_t v53 = sub_100044014(&qword_1003EEBD0);
      memcpy(__dsta, v89, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dsta, v89, v97);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dsta, 0, 1, v97);
    }
    uint64_t v54 = a3[20];
    uint64_t v55 = a3[21];
    uint64_t v56 = (void *)((char *)v4 + v54);
    double v57 = (void *)((char *)a2 + v54);
    uint64_t v98 = v57[1];
    void *v56 = *v57;
    v56[1] = v98;
    *(void *)((char *)v4 + v55) = *(void *)((char *)a2 + v55);
    uint64_t v58 = a3[22];
    uint64_t v59 = a3[23];
    uint64_t v60 = (char *)v4 + v58;
    uint64_t v61 = (char *)a2 + v58;
    *(void *)uint64_t v60 = *(void *)v61;
    v60[8] = v61[8];
    uint64_t v62 = (void *)((char *)v4 + v59);
    uint64_t v63 = (void *)((char *)a2 + v59);
    __dstb = (void *)v63[1];
    *uint64_t v62 = *v63;
    v62[1] = __dstb;
    uint64_t v64 = a3[24];
    uint64_t v65 = a3[25];
    uint64_t v66 = (void *)((char *)v4 + v64);
    uint64_t v67 = (void *)((char *)a2 + v64);
    uint64_t v68 = v67[1];
    *uint64_t v66 = *v67;
    v66[1] = v68;
    *((unsigned char *)v4 + v65) = *((unsigned char *)a2 + v65);
    uint64_t v69 = a3[27];
    *(void *)((char *)v4 + a3[26]) = *(void *)((char *)a2 + a3[26]);
    uint64_t v70 = (void *)((char *)v4 + v69);
    uint64_t v71 = (void *)((char *)a2 + v69);
    uint64_t v72 = v71[1];
    *uint64_t v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = a3[28];
    uint64_t v74 = a3[29];
    uint64_t v75 = (void *)((char *)v4 + v73);
    uint64_t v76 = (void *)((char *)a2 + v73);
    uint64_t v77 = v76[1];
    void *v75 = *v76;
    v75[1] = v77;
    uint64_t v78 = (void *)((char *)v4 + v74);
    uint64_t v79 = (void *)((char *)a2 + v74);
    uint64_t v80 = v79[1];
    *uint64_t v78 = *v79;
    v78[1] = v80;
    uint64_t v81 = a3[31];
    *((unsigned char *)v4 + a3[30]) = *((unsigned char *)a2 + a3[30]);
    *((unsigned char *)v4 + v81) = *((unsigned char *)a2 + v81);
    uint64_t v82 = a3[33];
    *((unsigned char *)v4 + a3[32]) = *((unsigned char *)a2 + a3[32]);
    *((unsigned char *)v4 + v82) = *((unsigned char *)a2 + v82);
    uint64_t v83 = a3[35];
    *(void *)((char *)v4 + a3[34]) = *(void *)((char *)a2 + a3[34]);
    uint64_t v84 = a3[36];
    uint64_t v100 = (char *)v4 + v84;
    uint64_t v93 = (char *)a2 + v84;
    *(void *)((char *)v4 + v83) = *(void *)((char *)a2 + v83);
    uint64_t v85 = type metadata accessor for Handle();
    uint64_t v86 = *(void *)(v85 - 8);
    char v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v91(v93, 1, v85))
    {
      uint64_t v87 = sub_100044014(&qword_1003F3B30);
      memcpy(v100, v93, *(void *)(*(void *)(v87 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v100, v93, v85);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v100, 0, 1, v85);
    }
  }
  return v4;
}

void *sub_1000DC9EC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IDSStatus();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100044014(&qword_1003EEBD0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[10];
  uint64_t v22 = (void *)((char *)a1 + v21);
  int64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[13];
  uint64_t v25 = (void *)((char *)a1 + v24);
  unint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[14];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  void *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[15];
  unint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  *unint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[16];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[17];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[18];
  uint64_t v40 = (void *)((char *)a1 + v39);
  uint64_t v41 = (void *)((char *)a2 + v39);
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[19];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  int v45 = v11((char *)a1 + v42, 1, v9);
  int v46 = v11(v44, 1, v9);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v43, v9);
LABEL_12:
    uint64_t v47 = sub_100044014(&qword_1003EEBD0);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v43, v44, v9);
LABEL_13:
  uint64_t v48 = a3[20];
  uint64_t v49 = (void *)((char *)a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[21]) = *(void *)((char *)a2 + a3[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[22];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)a2 + v51;
  uint64_t v54 = *(void *)v53;
  v52[8] = v53[8];
  *(void *)uint64_t v52 = v54;
  uint64_t v55 = a3[23];
  uint64_t v56 = (void *)((char *)a1 + v55);
  double v57 = (void *)((char *)a2 + v55);
  void *v56 = *v57;
  v56[1] = v57[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[24];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[27];
  uint64_t v62 = (void *)((char *)a1 + v61);
  uint64_t v63 = (void *)((char *)a2 + v61);
  *uint64_t v62 = *v63;
  v62[1] = v63[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[28];
  uint64_t v65 = (void *)((char *)a1 + v64);
  uint64_t v66 = (void *)((char *)a2 + v64);
  *uint64_t v65 = *v66;
  v65[1] = v66[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[29];
  uint64_t v68 = (void *)((char *)a1 + v67);
  uint64_t v69 = (void *)((char *)a2 + v67);
  *uint64_t v68 = *v69;
  v68[1] = v69[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[30]) = *((unsigned char *)a2 + a3[30]);
  *((unsigned char *)a1 + a3[31]) = *((unsigned char *)a2 + a3[31]);
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + a3[33]) = *((unsigned char *)a2 + a3[33]);
  *(void *)((char *)a1 + a3[34]) = *(void *)((char *)a2 + a3[34]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[35]) = *(void *)((char *)a2 + a3[35]);
  uint64_t v70 = a3[36];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)a2 + v70;
  uint64_t v73 = type metadata accessor for Handle();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  int v76 = v75(v71, 1, v73);
  int v77 = v75(v72, 1, v73);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 24))(v71, v72, v73);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v74 + 8))(v71, v73);
    goto LABEL_18;
  }
  if (v77)
  {
LABEL_18:
    uint64_t v78 = sub_100044014(&qword_1003F3B30);
    memcpy(v71, v72, *(void *)(*(void *)(v78 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  return a1;
}

_OWORD *sub_1000DD15C(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for IDSStatus();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100044014(&qword_1003EEBD0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  uint64_t v16 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  uint64_t v17 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  uint64_t v18 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  uint64_t v19 = a3[18];
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)((char *)a2 + v19);
  uint64_t v20 = a3[19];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  if (v12((char *)a2 + v20, 1, v10))
  {
    uint64_t v23 = sub_100044014(&qword_1003EEBD0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v22, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  }
  uint64_t v24 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  uint64_t v25 = a3[22];
  uint64_t v26 = a3[23];
  uint64_t v27 = (char *)a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  *(_OWORD *)((char *)a1 + v26) = *(_OWORD *)((char *)a2 + v26);
  uint64_t v29 = a3[25];
  *(_OWORD *)((char *)a1 + a3[24]) = *(_OWORD *)((char *)a2 + a3[24]);
  *((unsigned char *)a1 + v29) = *((unsigned char *)a2 + v29);
  uint64_t v30 = a3[27];
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  *(_OWORD *)((char *)a1 + v30) = *(_OWORD *)((char *)a2 + v30);
  uint64_t v31 = a3[29];
  *(_OWORD *)((char *)a1 + a3[28]) = *(_OWORD *)((char *)a2 + a3[28]);
  *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
  uint64_t v32 = a3[31];
  *((unsigned char *)a1 + a3[30]) = *((unsigned char *)a2 + a3[30]);
  *((unsigned char *)a1 + v32) = *((unsigned char *)a2 + v32);
  uint64_t v33 = a3[33];
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  uint64_t v34 = a3[35];
  *(void *)((char *)a1 + a3[34]) = *(void *)((char *)a2 + a3[34]);
  uint64_t v35 = a3[36];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  *(void *)((char *)a1 + v34) = *(void *)((char *)a2 + v34);
  uint64_t v38 = type metadata accessor for Handle();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = sub_100044014(&qword_1003F3B30);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  return a1;
}

void *sub_1000DD524(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for IDSStatus();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100044014(&qword_1003EEBD0);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  void *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v32) = *(void *)((char *)a2 + v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[13];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[14];
  uint64_t v39 = (void *)((char *)a1 + v38);
  uint64_t v40 = (void *)((char *)a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[15];
  uint64_t v44 = (void *)((char *)a1 + v43);
  int v45 = (void *)((char *)a2 + v43);
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  *uint64_t v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[16];
  uint64_t v49 = (void *)((char *)a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *uint64_t v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[17];
  uint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[18];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  *uint64_t v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[19];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  int v66 = v13((char *)a1 + v63, 1, v11);
  int v67 = v13(v65, 1, v11);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v64, v65, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v64, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v64, v11);
LABEL_12:
    uint64_t v68 = sub_100044014(&qword_1003EEBD0);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v64, v65, v11);
LABEL_13:
  uint64_t v69 = a3[20];
  uint64_t v70 = (void *)((char *)a1 + v69);
  uint64_t v71 = (void *)((char *)a2 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  *uint64_t v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[21]) = *(void *)((char *)a2 + a3[21]);
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[22];
  uint64_t v75 = a3[23];
  int v76 = (char *)a1 + v74;
  int v77 = (char *)a2 + v74;
  *(void *)int v76 = *(void *)v77;
  v76[8] = v77[8];
  uint64_t v78 = (void *)((char *)a1 + v75);
  uint64_t v79 = (void *)((char *)a2 + v75);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *uint64_t v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[24];
  uint64_t v83 = (void *)((char *)a1 + v82);
  uint64_t v84 = (void *)((char *)a2 + v82);
  uint64_t v86 = *v84;
  uint64_t v85 = v84[1];
  *uint64_t v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease();
  uint64_t v87 = a3[26];
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  *(void *)((char *)a1 + v87) = *(void *)((char *)a2 + v87);
  swift_bridgeObjectRelease();
  uint64_t v88 = a3[27];
  uint64_t v89 = (void *)((char *)a1 + v88);
  uint64_t v90 = (void *)((char *)a2 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[28];
  uint64_t v94 = (void *)((char *)a1 + v93);
  uint64_t v95 = (void *)((char *)a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  *uint64_t v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  uint64_t v98 = a3[29];
  uint64_t v99 = (void *)((char *)a1 + v98);
  uint64_t v100 = (void *)((char *)a2 + v98);
  uint64_t v102 = *v100;
  uint64_t v101 = v100[1];
  *uint64_t v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease();
  uint64_t v103 = a3[31];
  *((unsigned char *)a1 + a3[30]) = *((unsigned char *)a2 + a3[30]);
  *((unsigned char *)a1 + v103) = *((unsigned char *)a2 + v103);
  uint64_t v104 = a3[33];
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + v104) = *((unsigned char *)a2 + v104);
  *(void *)((char *)a1 + a3[34]) = *(void *)((char *)a2 + a3[34]);
  swift_bridgeObjectRelease();
  uint64_t v105 = a3[36];
  *(void *)((char *)a1 + a3[35]) = *(void *)((char *)a2 + a3[35]);
  uint64_t v106 = (char *)a1 + v105;
  uint64_t v107 = (char *)a2 + v105;
  uint64_t v108 = type metadata accessor for Handle();
  uint64_t v109 = *(void *)(v108 - 8);
  uint64_t v110 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
  int v111 = v110(v106, 1, v108);
  int v112 = v110(v107, 1, v108);
  if (!v111)
  {
    if (!v112)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v106, v107, v108);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v106, v108);
    goto LABEL_18;
  }
  if (v112)
  {
LABEL_18:
    uint64_t v113 = sub_100044014(&qword_1003F3B30);
    memcpy(v106, v107, *(void *)(*(void *)(v113 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v106, v107, v108);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
  return a1;
}

uint64_t sub_1000DDB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100044014(&qword_1003EEBD0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100044014(&qword_1003F3B30);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 144);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000DDC7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100044014(&qword_1003EEBD0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100044014(&qword_1003F3B30);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 144);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000DDDB0()
{
  sub_1000DDF3C(319, (unint64_t *)&unk_1003EEC90, (void (*)(uint64_t))&type metadata accessor for IDSStatus);
  if (v0 <= 0x3F)
  {
    sub_1000DDF3C(319, (unint64_t *)&qword_1003F3BA0, (void (*)(uint64_t))&type metadata accessor for Handle);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000DDF3C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1000DDF90()
{
  unint64_t result = qword_1003EED48;
  if (!qword_1003EED48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EED48);
  }
  return result;
}

unint64_t sub_1000DDFE4()
{
  unint64_t result = qword_1003EED68;
  if (!qword_1003EED68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EED68);
  }
  return result;
}

uint64_t sub_1000DE038(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(&qword_1003EED50);
    sub_1000424DC(a2, (void (*)(uint64_t))type metadata accessor for FriendInfoOption);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000DE0CC()
{
  unint64_t result = qword_1003EED88;
  if (!qword_1003EED88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EED88);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FriendRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE0) {
    goto LABEL_17;
  }
  if (a2 + 32 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 32) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 32;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 32;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 32;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x21;
  int v8 = v6 - 33;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FriendRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 32 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 32) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDF)
  {
    unsigned int v6 = ((a2 - 224) >> 8) + 1;
    *unint64_t result = a2 + 32;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DE27CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 32;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendRecord.CodingKeys()
{
  return &type metadata for FriendRecord.CodingKeys;
}

ValueMetadata *type metadata accessor for TypeOptions()
{
  return &type metadata for TypeOptions;
}

unint64_t sub_1000DE2C8()
{
  unint64_t result = qword_1003EED90;
  if (!qword_1003EED90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EED90);
  }
  return result;
}

unint64_t sub_1000DE320()
{
  unint64_t result = qword_1003EED98;
  if (!qword_1003EED98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EED98);
  }
  return result;
}

unint64_t sub_1000DE378()
{
  unint64_t result = qword_1003EEDA0;
  if (!qword_1003EEDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEDA0);
  }
  return result;
}

unint64_t sub_1000DE3D0()
{
  unint64_t result = qword_1003EEDA8;
  if (!qword_1003EEDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEDA8);
  }
  return result;
}

unint64_t sub_1000DE428()
{
  unint64_t result = qword_1003EEDB0;
  if (!qword_1003EEDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEDB0);
  }
  return result;
}

unint64_t sub_1000DE480()
{
  unint64_t result = qword_1003EEDB8;
  if (!qword_1003EEDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEDB8);
  }
  return result;
}

unint64_t sub_1000DE4D8()
{
  unint64_t result = qword_1003EEDC0;
  if (!qword_1003EEDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEDC0);
  }
  return result;
}

uint64_t sub_1000DE52C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100375090
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001003750B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6449656C646E6168 && a2 == 0xEF73757461745373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7344656C646E6168 && a2 == 0xEA00000000006469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001003750D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003750F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100375110 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6552656C646E6168 && a2 == 0xEF656C6261686361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100375130 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100375150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100375170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100375190 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001003751B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001003751D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001003751F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100375210 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6E614872656E776FLL && a2 == 0xEF64697344656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100375230 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100375250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100375270 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100375290 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001003752B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001003752D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001003752F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100375310 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100375330 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100373F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x8000000100373F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100373F80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100373FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x6E49646E65697266 && a2 == 0xEA00000000006F66 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0x7365707974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 32;
    }
    else {
      return 33;
    }
  }
}

uint64_t sub_1000DF15C(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  BOOL v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v42 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v40 = (char *)&v39 - v14;
  id v15 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = (int *)type metadata accessor for FriendSharedSecretsRecord();
  char v18 = *(unsigned char *)(v2 + v17[5]);
  uint64_t v46 = &type metadata for UInt8;
  uint64_t v47 = &protocol witness table for UInt8;
  LOBYTE(v44) = v18;
  uint64_t v43 = ObjectType;
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v19 = (uint64_t *)(v2 + v17[6]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15)
  {
    uint64_t v21 = v7;
    uint64_t v22 = *v19;
    uint64_t v46 = &type metadata for Data;
    uint64_t v47 = &protocol witness table for Data;
    uint64_t v44 = v22;
    unint64_t v45 = v20;
    sub_100022C64(v22, v20);
    sub_100022C64(v22, v20);
    CKRecordKeyValueSetting.subscript.setter();
    uint64_t v23 = v22;
    BOOL v7 = v21;
    sub_1000440E8(v23, v20);
  }
  sub_1000E2224(v2 + v17[7], (uint64_t)v9);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v25 = v24(v9, 1, v10);
  uint64_t v41 = v11;
  if (v25 == 1)
  {
    sub_10000A520((uint64_t)v9, (uint64_t *)&unk_1003EE800);
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v39 = v24;
    uint64_t v27 = v40;
    v26(v40, v9, v10);
    uint64_t v46 = (void *)v10;
    uint64_t v47 = &protocol witness table for Date;
    uint64_t v28 = sub_10003E0F4(&v44);
    (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(v28, v27, v10);
    CKRecordKeyValueSetting.subscript.setter();
    uint64_t v29 = v27;
    uint64_t v24 = v39;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v29, v10);
  }
  uint64_t v30 = (uint64_t *)(v2 + v17[8]);
  unint64_t v31 = v30[1];
  if (v31 >> 60 != 15)
  {
    uint64_t v32 = v7;
    uint64_t v33 = *v30;
    uint64_t v46 = &type metadata for Data;
    uint64_t v47 = &protocol witness table for Data;
    uint64_t v44 = v33;
    unint64_t v45 = v31;
    sub_100022C64(v33, v31);
    sub_100022C64(v33, v31);
    CKRecordKeyValueSetting.subscript.setter();
    uint64_t v34 = v33;
    BOOL v7 = v32;
    sub_1000440E8(v34, v31);
  }
  sub_1000E2224(v2 + v17[9], (uint64_t)v7);
  if (v24(v7, 1, v10) == 1)
  {
    swift_unknownObjectRelease();
    return sub_10000A520((uint64_t)v7, (uint64_t *)&unk_1003EE800);
  }
  else
  {
    uint64_t v37 = v41;
    uint64_t v36 = v42;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v42, v7, v10);
    uint64_t v46 = (void *)v10;
    uint64_t v47 = &protocol witness table for Date;
    uint64_t v38 = sub_10003E0F4(&v44);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(v38, v36, v10);
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v10);
  }
}

uint64_t sub_1000DF5FC(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = a2;
  uint64_t v102 = a1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v89 = &v85[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v97 = sub_100044014(&qword_1003EEEB0);
  uint64_t v7 = __chkstk_darwin(v97);
  uint64_t v93 = &v85[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v85[-v9];
  uint64_t v11 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v91 = &v85[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v88 = &v85[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v92 = &v85[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v90 = &v85[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v87 = &v85[-v21];
  __chkstk_darwin(v20);
  uint64_t v94 = &v85[-v22];
  uint64_t v23 = sub_100044014(&qword_1003EEEB8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = &v85[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = *(void *)(a3 - 8);
  __chkstk_darwin(v24);
  uint64_t v29 = &v85[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = (int *)type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v31 = *((void *)v30 - 1);
  __chkstk_darwin(v30);
  uint64_t v33 = &v85[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v29, ObjectType, a3);
  int v34 = swift_dynamicCast();
  uint64_t v35 = *(void (**)(unsigned char *, uint64_t, uint64_t, int *))(v31 + 56);
  if (!v34)
  {
    v35(v26, 1, 1, v30);
    sub_10000A520((uint64_t)v26, &qword_1003EEEB8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v35(v26, 0, 1, v30);
  sub_1000E21C0((uint64_t)v26, (uint64_t)v33);
  uint64_t v102 = (id *)[*v102 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v36 = v30[5];
  int v37 = *(unsigned __int8 *)(v3 + v36);
  int v38 = v33[v36];
  if (v37 != v38)
  {
    *((void *)&v104 + 1) = &type metadata for UInt8;
    uint64_t v105 = &protocol witness table for UInt8;
    LOBYTE(v103) = v38;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v39 = v30[6];
  uint64_t v98 = v3;
  uint64_t v99 = v33;
  uint64_t v41 = *(void *)(v3 + v39);
  unint64_t v40 = *(void *)(v3 + v39 + 8);
  uint64_t v42 = (uint64_t *)&v33[v39];
  uint64_t v44 = *(void *)&v33[v39];
  unint64_t v43 = v42[1];
  if (v40 >> 60 == 15)
  {
    if (v43 >> 60 == 15) {
      goto LABEL_12;
    }
    sub_1000287E4(v41, v40);
    sub_1000287E4(v44, v43);
    sub_1000440E8(v41, v40);
    sub_1000440E8(v44, v43);
LABEL_10:
    *((void *)&v104 + 1) = &type metadata for Data;
    uint64_t v105 = &protocol witness table for Data;
    *(void *)&long long v103 = v44;
    *((void *)&v103 + 1) = v43;
    goto LABEL_11;
  }
  sub_1000287E4(v41, v40);
  sub_1000287E4(v44, v43);
  if (v43 >> 60 != 15)
  {
    char v45 = sub_100102018(v41, v40, v44, v43);
    sub_1000440E8(v44, v43);
    sub_1000440E8(v41, v40);
    if (v45) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  sub_1000440E8(v41, v40);
  sub_1000440E8(v44, v43);
  uint64_t v105 = 0;
  long long v103 = 0u;
  long long v104 = 0u;
LABEL_11:
  sub_1000287E4(v44, v43);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_12:
  uint64_t v46 = v98;
  uint64_t v47 = v94;
  sub_1000E2224(v98 + v30[7], (uint64_t)v94);
  uint64_t v48 = (uint64_t)&v99[v30[7]];
  uint64_t v49 = (uint64_t)&v10[*(int *)(v97 + 48)];
  sub_1000E2224((uint64_t)v47, (uint64_t)v10);
  sub_1000E2224(v48, v49);
  uint64_t v50 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v100 + 48);
  unsigned int v51 = v50(v10, 1, v5);
  uint64_t v95 = v5;
  uint64_t v96 = v50;
  if (v51 == 1)
  {
    sub_10000A520((uint64_t)v47, (uint64_t *)&unk_1003EE800);
    unsigned int v52 = v50((unsigned char *)v49, 1, v5);
    uint64_t v53 = v92;
    if (v52 == 1)
    {
      sub_10000A520((uint64_t)v10, (uint64_t *)&unk_1003EE800);
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v54 = v87;
    sub_1000E2224((uint64_t)v10, (uint64_t)v87);
    if (v50((unsigned char *)v49, 1, v5) != 1)
    {
      uint64_t v77 = v100;
      uint64_t v78 = v89;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v100 + 32))(v89, v49, v5);
      sub_1000E22E8(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
      int v86 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v79 = *(void (**)(unsigned char *, uint64_t))(v77 + 8);
      v79(v78, v5);
      sub_10000A520((uint64_t)v94, (uint64_t *)&unk_1003EE800);
      v79(v54, v5);
      uint64_t v46 = v98;
      sub_10000A520((uint64_t)v10, (uint64_t *)&unk_1003EE800);
      uint64_t v53 = v92;
      uint64_t v50 = v96;
      if (v86) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    sub_10000A520((uint64_t)v94, (uint64_t *)&unk_1003EE800);
    (*(void (**)(unsigned char *, uint64_t))(v100 + 8))(v54, v5);
    uint64_t v53 = v92;
    uint64_t v50 = v96;
  }
  sub_10000A520((uint64_t)v10, &qword_1003EEEB0);
LABEL_18:
  uint64_t v55 = v90;
  sub_1000E2224(v48, (uint64_t)v90);
  uint64_t v56 = v95;
  if (v50(v55, 1, v95) == 1)
  {
    sub_10000A520((uint64_t)v55, (uint64_t *)&unk_1003EE800);
    long long v103 = 0u;
    long long v104 = 0u;
    uint64_t v105 = 0;
  }
  else
  {
    *((void *)&v104 + 1) = v56;
    uint64_t v105 = &protocol witness table for Date;
    uint64_t v57 = sub_10003E0F4((uint64_t *)&v103);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v100 + 32))(v57, v55, v56);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_22:
  uint64_t v58 = (uint64_t *)(v46 + v30[8]);
  uint64_t v59 = *v58;
  unint64_t v60 = v58[1];
  uint64_t v61 = *v42;
  unint64_t v62 = v42[1];
  if (v60 >> 60 == 15)
  {
    uint64_t v63 = (uint64_t)v99;
    uint64_t v64 = (uint64_t)v53;
    uint64_t v65 = v95;
    if (v62 >> 60 == 15) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v63 = (uint64_t)v99;
    uint64_t v64 = (uint64_t)v53;
    uint64_t v65 = v95;
    if (v62 >> 60 != 15)
    {
      sub_1000287E4(v59, v60);
      sub_1000287E4(v61, v62);
      char v80 = sub_100102018(v59, v60, v61, v62);
      sub_1000440E8(v61, v62);
      sub_1000440E8(v59, v60);
      if (v80) {
        goto LABEL_31;
      }
      goto LABEL_27;
    }
  }
  sub_1000287E4(v59, v60);
  sub_1000287E4(v61, v62);
  sub_1000440E8(v59, v60);
  sub_1000440E8(v61, v62);
LABEL_27:
  int v66 = (uint64_t *)(v63 + v30[8]);
  uint64_t v67 = *v66;
  unint64_t v68 = v66[1];
  if (v68 >> 60 == 15)
  {
    uint64_t v105 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
  }
  else
  {
    *((void *)&v104 + 1) = &type metadata for Data;
    uint64_t v105 = &protocol witness table for Data;
    *(void *)&long long v103 = v67;
    *((void *)&v103 + 1) = v68;
  }
  sub_1000287E4(v67, v68);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_31:
  sub_1000E2224(v98 + v30[9], v64);
  uint64_t v69 = v63 + v30[9];
  uint64_t v70 = v93;
  uint64_t v71 = (uint64_t)&v93[*(int *)(v97 + 48)];
  sub_1000E2224(v64, (uint64_t)v93);
  sub_1000E2224(v69, v71);
  uint64_t v72 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v96;
  if (v96(v70, 1, v65) == 1)
  {
    sub_10000A520(v64, (uint64_t *)&unk_1003EE800);
    if (v72(v71, 1, v65) == 1)
    {
      sub_10000A520((uint64_t)v70, (uint64_t *)&unk_1003EE800);
LABEL_46:
      sub_1000E228C(v63);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v73 = v88;
    sub_1000E2224((uint64_t)v70, (uint64_t)v88);
    if (v72(v71, 1, v65) != 1)
    {
      uint64_t v81 = v100;
      uint64_t v82 = v89;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v100 + 32))(v89, v71, v65);
      sub_1000E22E8(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
      char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v84 = *(void (**)(unsigned char *, uint64_t))(v81 + 8);
      v84(v82, v65);
      sub_10000A520(v64, (uint64_t *)&unk_1003EE800);
      v84(v73, v65);
      uint64_t v63 = (uint64_t)v99;
      uint64_t v72 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v96;
      sub_10000A520((uint64_t)v70, (uint64_t *)&unk_1003EE800);
      if (v83) {
        goto LABEL_46;
      }
      goto LABEL_37;
    }
    sub_10000A520(v64, (uint64_t *)&unk_1003EE800);
    (*(void (**)(unsigned char *, uint64_t))(v100 + 8))(v73, v65);
  }
  sub_10000A520((uint64_t)v70, &qword_1003EEEB0);
LABEL_37:
  uint64_t v74 = v91;
  sub_1000E2224(v69, (uint64_t)v91);
  if (v72((uint64_t)v74, 1, v65) == 1)
  {
    sub_10000A520((uint64_t)v74, (uint64_t *)&unk_1003EE800);
    long long v103 = 0u;
    long long v104 = 0u;
    uint64_t v105 = 0;
  }
  else
  {
    *((void *)&v104 + 1) = v65;
    uint64_t v105 = &protocol witness table for Date;
    uint64_t v75 = sub_10003E0F4((uint64_t *)&v103);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v100 + 32))(v75, v74, v65);
  }
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  return sub_1000E228C(v63);
}

unint64_t sub_1000E0294()
{
  return 0xD000000000000019;
}

uint64_t sub_1000E02B0()
{
  return 0x6553646572616853;
}

uint64_t sub_1000E02D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E02F0(a1, a2);
}

uint64_t sub_1000E02F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v72 = &v65[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  unint64_t v68 = &v65[-v7];
  uint64_t v8 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v73 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (int *)type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v13 = a2 + v12[6];
  long long v77 = xmmword_10036CD90;
  *(_OWORD *)uint64_t v13 = xmmword_10036CD90;
  uint64_t v14 = a2 + v12[7];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v18 = v16 + 56;
  v17(v14, 1, 1, v15);
  uint64_t v75 = a2 + v12[8];
  *(_OWORD *)uint64_t v75 = v77;
  uint64_t v19 = v12[9];
  uint64_t v67 = a2;
  *(void *)&long long v77 = a2 + v19;
  uint64_t v70 = v17;
  uint64_t v71 = v15;
  uint64_t v69 = v18;
  ((void (*)(void))v17)();
  uint64_t v20 = CKRecord.recordType.getter();
  uint64_t v76 = v14;
  if (v20 == 0xD000000000000019 && v21 == 0x800000010036CD80)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      sub_1000D0FE0();
      swift_allocError();
      *int v38 = 0;
      swift_willThrow();

      goto LABEL_15;
    }
  }
  uint64_t v23 = a1;
  id v24 = [a1 recordID];
  id v25 = [v24 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = v78;
  uint64_t v27 = v74;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48))(v10, 1, v74) == 1)
  {
    sub_10000A520((uint64_t)v10, &qword_1003ECFB8);
    sub_1000D0FE0();
    swift_allocError();
    unsigned char *v28 = 1;
    swift_willThrow();

LABEL_15:
    sub_1000440E8(*(void *)v13, *(void *)(v13 + 8));
    sub_10000A520(v76, (uint64_t *)&unk_1003EE800);
    sub_1000440E8(*(void *)v75, *(void *)(v75 + 8));
    return sub_10000A520(v77, (uint64_t *)&unk_1003EE800);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 32))(v73, v10, v27);
  id v29 = [a1 encryptedValues];
  NSString v30 = String._bridgeToObjectiveC()();
  uint64_t v31 = [v29 objectForKeyedSubscript:v30];

  if (!v31 || (uint64_t v79 = v31, sub_100044014(&qword_1003EE848), (swift_dynamicCast() & 1) == 0))
  {
    sub_1000D0FE0();
    swift_allocError();
    *int v37 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v73, v27);
    goto LABEL_15;
  }
  int v66 = v81;
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v29 objectForKeyedSubscript:v32];

  if (v33)
  {
    id v81 = v33;
    if (swift_dynamicCast())
    {
      uint64_t v34 = (uint64_t)v79;
      unint64_t v35 = v80;
      switch(v80 >> 62)
      {
        case 1uLL:
          LODWORD(v36) = HIDWORD(v79) - v79;
          if (__OFSUB__(HIDWORD(v79), v79))
          {
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
            JUMPOUT(0x1000E0B84);
          }
          uint64_t v36 = (int)v36;
LABEL_20:
          if (v36 == 32) {
            goto LABEL_23;
          }
LABEL_21:
          sub_100044090((uint64_t)v79, v80);
          break;
        case 2uLL:
          uint64_t v41 = v79[2];
          uint64_t v40 = v79[3];
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v36 = v40 - v41;
          if (!v42) {
            goto LABEL_20;
          }
          goto LABEL_41;
        case 3uLL:
          goto LABEL_21;
        default:
          uint64_t v36 = BYTE6(v80);
          goto LABEL_20;
      }
    }
  }
  uint64_t v34 = 0;
  unint64_t v35 = 0xF000000000000000;
LABEL_23:
  sub_1000440E8(*(void *)v13, *(void *)(v13 + 8));
  *(void *)uint64_t v13 = v34;
  *(void *)(v13 + 8) = v35;
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v29 objectForKeyedSubscript:v43];

  if (v44)
  {
    id v81 = v44;
    if (swift_dynamicCast())
    {
      uint64_t v46 = (uint64_t)v79;
      unint64_t v45 = v80;
      switch(v80 >> 62)
      {
        case 1uLL:
          LODWORD(v47) = HIDWORD(v79) - v79;
          if (__OFSUB__(HIDWORD(v79), v79)) {
            goto LABEL_42;
          }
          uint64_t v47 = (int)v47;
LABEL_30:
          if (v47 == 32) {
            goto LABEL_33;
          }
LABEL_31:
          sub_100044090((uint64_t)v79, v80);
          break;
        case 2uLL:
          uint64_t v49 = v79[2];
          uint64_t v48 = v79[3];
          BOOL v42 = __OFSUB__(v48, v49);
          uint64_t v47 = v48 - v49;
          if (!v42) {
            goto LABEL_30;
          }
          goto LABEL_43;
        case 3uLL:
          goto LABEL_31;
        default:
          uint64_t v47 = BYTE6(v80);
          goto LABEL_30;
      }
    }
  }
  uint64_t v46 = 0;
  unint64_t v45 = 0xF000000000000000;
LABEL_33:
  uint64_t v50 = (uint64_t *)v75;
  sub_1000440E8(*(void *)v75, *(void *)(v75 + 8));
  *uint64_t v50 = v46;
  v50[1] = v45;
  uint64_t v51 = v67;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v78 + 16))(v67, v73, v74);
  *(unsigned char *)(v51 + v12[5]) = v66 == 1;
  NSString v52 = String._bridgeToObjectiveC()();
  uint64_t v53 = v29;
  uint64_t v54 = [v29 objectForKeyedSubscript:v52];

  if (v54)
  {
    uint64_t v79 = v54;
    uint64_t v55 = (uint64_t)v68;
    uint64_t v56 = v71;
    uint64_t v57 = swift_dynamicCast() ^ 1;
    uint64_t v58 = (unsigned char *)v55;
  }
  else
  {
    uint64_t v55 = (uint64_t)v68;
    uint64_t v58 = v68;
    uint64_t v57 = 1;
    uint64_t v56 = v71;
  }
  uint64_t v59 = v70;
  v70((uint64_t)v58, v57, 1, v56);
  sub_1000E0BF0(v55, v77);
  NSString v60 = String._bridgeToObjectiveC()();
  uint64_t v61 = [v53 objectForKeyedSubscript:v60];
  swift_unknownObjectRelease();

  (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v73, v74);
  if (v61)
  {
    uint64_t v79 = v61;
    uint64_t v62 = (uint64_t)v72;
    uint64_t v63 = swift_dynamicCast() ^ 1;
    uint64_t v64 = (unsigned char *)v62;
  }
  else
  {
    uint64_t v62 = (uint64_t)v72;
    uint64_t v64 = v72;
    uint64_t v63 = 1;
  }
  v59((uint64_t)v64, v63, 1, v56);
  return sub_1000E0BF0(v62, v76);
}

uint64_t type metadata accessor for FriendSharedSecretsRecord()
{
  uint64_t result = qword_1003EEE28;
  if (!qword_1003EEE28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E0BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_1000E0C58(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (void *)((char *)a2 + v8);
    unint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *v10;
      sub_100022C64(*v10, v11);
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v19(v16, 1, v17))
    {
      uint64_t v20 = sub_100044014((uint64_t *)&unk_1003EE800);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v21 = a3[8];
    char v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    unint64_t v24 = *((void *)v23 + 1);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)char v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v25 = *(void *)v23;
      sub_100022C64(*(void *)v23, *((void *)v23 + 1));
      *(void *)char v22 = v25;
      *((void *)v22 + 1) = v24;
    }
    uint64_t v26 = a3[9];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    if (v19(v28, 1, v17))
    {
      uint64_t v29 = sub_100044014((uint64_t *)&unk_1003EE800);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v28, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_1000E0F38(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + a2[6]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100044090(*v5, v6);
  }
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (!v9(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v7, v8);
  }
  uint64_t v10 = (uint64_t *)(a1 + a2[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_100044090(*v10, v11);
  }
  uint64_t v12 = a1 + a2[9];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v12, 1, v8);
  if (!result)
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
    return v14(v12, v8);
  }
  return result;
}

uint64_t sub_1000E10E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_100022C64(*v9, v10);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    uint64_t v18 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  }
  else
  {
    uint64_t v23 = *v21;
    sub_100022C64(*v21, v21[1]);
    *(void *)uint64_t v20 = v23;
    *(void *)(v20 + 8) = v22;
  }
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  if (v17(v26, 1, v15))
  {
    uint64_t v27 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v25, v26, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_1000E1374(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_100022C64(v11, v10);
      uint64_t *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_1000E174C((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  sub_100022C64(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  uint64_t *v8 = v12;
  v8[1] = v10;
  sub_100044090(v13, v14);
LABEL_8:
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_13:
    uint64_t v23 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_14:
  uint64_t v24 = a3[8];
  uint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  unint64_t v27 = *(void *)(a2 + v24 + 8);
  if (*(void *)(a1 + v24 + 8) >> 60 == 15)
  {
    if (v27 >> 60 != 15)
    {
      uint64_t v28 = *v26;
      sub_100022C64(v28, v27);
      *uint64_t v25 = v28;
      v25[1] = v27;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v27 >> 60 == 15)
  {
    sub_1000E174C((uint64_t)v25);
LABEL_19:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    goto LABEL_21;
  }
  uint64_t v29 = *v26;
  sub_100022C64(v29, v27);
  uint64_t v30 = *v25;
  unint64_t v31 = v25[1];
  *uint64_t v25 = v29;
  v25[1] = v27;
  sub_100044090(v30, v31);
LABEL_21:
  uint64_t v32 = a3[9];
  id v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  int v35 = v20((void *)(a1 + v32), 1, v18);
  int v36 = v20(v34, 1, v18);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v33, v34, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v33, v18);
    goto LABEL_26;
  }
  if (v36)
  {
LABEL_26:
    uint64_t v37 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v33, v34, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v33, 0, 1, v18);
  return a1;
}

uint64_t sub_1000E174C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E17A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  if (v13(v17, 1, v11))
  {
    uint64_t v18 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v16, v17, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_1000E19B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_1000E174C(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  sub_100044090(v12, v10);
LABEL_6:
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_11:
    uint64_t v21 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_12:
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  unint64_t v25 = *(void *)(a1 + v22 + 8);
  if (v25 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_17;
  }
  unint64_t v26 = *(void *)(v24 + 8);
  if (v26 >> 60 == 15)
  {
    sub_1000E174C(v23);
    goto LABEL_15;
  }
  uint64_t v27 = *(void *)v23;
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v23 + 8) = v26;
  sub_100044090(v27, v25);
LABEL_17:
  uint64_t v28 = a3[9];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  int v31 = v18((void *)(a1 + v28), 1, v16);
  int v32 = v18(v30, 1, v16);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v29, v30, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v29, v16);
    goto LABEL_22;
  }
  if (v32)
  {
LABEL_22:
    uint64_t v33 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v29, v30, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v16);
  return a1;
}

uint64_t sub_1000E1D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E1D40);
}

uint64_t sub_1000E1D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return v10 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = sub_100044014((uint64_t *)&unk_1003EE800);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000E1E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E1E7C);
}

uint64_t sub_1000E1E7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = sub_100044014((uint64_t *)&unk_1003EE800);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000E1FA8()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1000E2088();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000E2088()
{
  if (!qword_1003EE8D8)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003EE8D8);
    }
  }
}

uint64_t sub_1000E20E0()
{
  return sub_1000E22E8(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1000E2130()
{
  return sub_1000E22E8(&qword_1003EEE80, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
}

uint64_t sub_1000E2178()
{
  return sub_1000E22E8(qword_1003EEE88, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
}

uint64_t sub_1000E21C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FriendSharedSecretsRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E228C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FriendSharedSecretsRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E22E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_1000E2330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100044014(&qword_1003EEEB0);
  uint64_t v8 = __chkstk_darwin(v79);
  unsigned int v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v68 - v11;
  uint64_t v13 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v76 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v77 = (uint64_t)&v68 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v78 = (uint64_t)&v68 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v68 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unint64_t v25 = (char *)&v68 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v68 - v26;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v28 = (int *)type metadata accessor for FriendSharedSecretsRecord();
  if (*(unsigned __int8 *)(a1 + v28[5]) != *(unsigned __int8 *)(a2 + v28[5])) {
    return 0;
  }
  uint64_t v72 = v10;
  uint64_t v73 = v7;
  uint64_t v74 = v4;
  uint64_t v75 = v5;
  uint64_t v29 = v28[6];
  uint64_t v30 = *(void *)(a1 + v29);
  unint64_t v31 = *(void *)(a1 + v29 + 8);
  int v32 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  if (v31 >> 60 == 15)
  {
    if (v34 >> 60 == 15) {
      goto LABEL_10;
    }
LABEL_7:
    sub_1000287E4(v30, v31);
    sub_1000287E4(v33, v34);
    sub_1000440E8(v30, v31);
    uint64_t v35 = v33;
    unint64_t v36 = v34;
LABEL_8:
    sub_1000440E8(v35, v36);
    return 0;
  }
  if (v34 >> 60 == 15) {
    goto LABEL_7;
  }
  uint64_t v71 = v28;
  sub_1000287E4(v30, v31);
  sub_1000287E4(v33, v34);
  LODWORD(v70) = sub_100102018(v30, v31, v33, v34);
  sub_1000440E8(v33, v34);
  sub_1000440E8(v30, v31);
  uint64_t v28 = v71;
  if ((v70 & 1) == 0) {
    return 0;
  }
LABEL_10:
  uint64_t v37 = v28;
  sub_1000E2224(a1 + v28[7], (uint64_t)v27);
  uint64_t v71 = v37;
  sub_1000E2224(a2 + v37[7], (uint64_t)v25);
  uint64_t v38 = (uint64_t)&v12[*(int *)(v79 + 48)];
  sub_1000E2224((uint64_t)v27, (uint64_t)v12);
  uint64_t v39 = v38;
  sub_1000E2224((uint64_t)v25, v38);
  uint64_t v40 = v74;
  uint64_t v42 = v75 + 48;
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v41((uint64_t)v12, 1, v74) == 1)
  {
    uint64_t v70 = v41;
    sub_10000A520((uint64_t)v25, (uint64_t *)&unk_1003EE800);
    sub_10000A520((uint64_t)v27, (uint64_t *)&unk_1003EE800);
    if (v70(v39, 1, v40) == 1)
    {
      sub_10000A520((uint64_t)v12, (uint64_t *)&unk_1003EE800);
      goto LABEL_19;
    }
LABEL_15:
    uint64_t v43 = (uint64_t)v12;
LABEL_16:
    sub_10000A520(v43, &qword_1003EEEB0);
    return 0;
  }
  sub_1000E2224((uint64_t)v12, (uint64_t)v22);
  if (v41(v39, 1, v40) == 1)
  {
    sub_10000A520((uint64_t)v25, (uint64_t *)&unk_1003EE800);
    sub_10000A520((uint64_t)v27, (uint64_t *)&unk_1003EE800);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v22, v40);
    goto LABEL_15;
  }
  uint64_t v70 = v41;
  unint64_t v45 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v73, v39, v40);
  sub_1000E22E8(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
  int v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v68 = v42;
  uint64_t v46 = *(void (**)(char *, uint64_t))(v75 + 8);
  v46(v45, v40);
  sub_10000A520((uint64_t)v25, (uint64_t *)&unk_1003EE800);
  sub_10000A520((uint64_t)v27, (uint64_t *)&unk_1003EE800);
  v46(v22, v40);
  sub_10000A520((uint64_t)v12, (uint64_t *)&unk_1003EE800);
  if ((v69 & 1) == 0) {
    return 0;
  }
LABEL_19:
  uint64_t v47 = v71;
  uint64_t v48 = v71[8];
  uint64_t v49 = *(void *)(a1 + v48);
  unint64_t v50 = *(void *)(a1 + v48 + 8);
  uint64_t v51 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v51;
  unint64_t v53 = v51[1];
  if (v50 >> 60 == 15)
  {
    if (v53 >> 60 == 15) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (v53 >> 60 == 15)
  {
LABEL_23:
    sub_1000287E4(v49, v50);
    sub_1000287E4(v52, v53);
    sub_1000440E8(v49, v50);
    uint64_t v35 = v52;
    unint64_t v36 = v53;
    goto LABEL_8;
  }
  sub_1000287E4(v49, v50);
  sub_1000287E4(v52, v53);
  char v54 = sub_100102018(v49, v50, v52, v53);
  sub_1000440E8(v52, v53);
  sub_1000440E8(v49, v50);
  uint64_t v47 = v71;
  if ((v54 & 1) == 0) {
    return 0;
  }
LABEL_25:
  uint64_t v55 = v47;
  uint64_t v56 = a1 + v47[9];
  uint64_t v57 = v78;
  sub_1000E2224(v56, v78);
  uint64_t v58 = v77;
  sub_1000E2224(a2 + v55[9], v77);
  uint64_t v59 = (uint64_t)v72;
  uint64_t v60 = (uint64_t)&v72[*(int *)(v79 + 48)];
  sub_1000E2224(v57, (uint64_t)v72);
  sub_1000E2224(v58, v60);
  uint64_t v61 = v74;
  uint64_t v62 = v70;
  if (v70(v59, 1, v74) != 1)
  {
    uint64_t v63 = v76;
    sub_1000E2224(v59, v76);
    if (v62(v60, 1, v61) == 1)
    {
      sub_10000A520(v58, (uint64_t *)&unk_1003EE800);
      sub_10000A520(v57, (uint64_t *)&unk_1003EE800);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v63, v61);
      goto LABEL_30;
    }
    uint64_t v64 = v75;
    uint64_t v65 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v73, v60, v61);
    sub_1000E22E8(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
    char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v67 = *(void (**)(char *, uint64_t))(v64 + 8);
    v67(v65, v61);
    sub_10000A520(v58, (uint64_t *)&unk_1003EE800);
    sub_10000A520(v57, (uint64_t *)&unk_1003EE800);
    v67((char *)v63, v61);
    sub_10000A520(v59, (uint64_t *)&unk_1003EE800);
    return (v66 & 1) != 0;
  }
  sub_10000A520(v58, (uint64_t *)&unk_1003EE800);
  sub_10000A520(v57, (uint64_t *)&unk_1003EE800);
  if (v62(v60, 1, v61) != 1)
  {
LABEL_30:
    uint64_t v43 = (uint64_t)v72;
    goto LABEL_16;
  }
  sub_10000A520((uint64_t)v72, (uint64_t *)&unk_1003EE800);
  return 1;
}

void *sub_1000E2B74(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = *(void *)((char *)a2 + v8);
    unint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    sub_100022C64(v10, v11);
    *uint64_t v9 = v10;
    v9[1] = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1000E2CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_100044090(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1000E2D64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = *(void *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  sub_100022C64(v9, v10);
  uint64_t *v8 = v9;
  v8[1] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000E2E4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_100022C64(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  uint64_t *v8 = v10;
  v8[1] = v11;
  sub_100044090(v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_1000E2F40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000E300C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100044090(v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000E30E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E30F8);
}

uint64_t sub_1000E30F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return v10 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000E321C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E3230);
}

uint64_t sub_1000E3230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for OwnerSharedSecretsRecord()
{
  uint64_t result = qword_1003EEF18;
  if (!qword_1003EEF18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E33A4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

Swift::Int sub_1000E3480()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000E34C8()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000E34F4()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *sub_1000E3538@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1000E3558(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000E3564()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E35C4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000E3614(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EEF80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000E3FD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_1000E4234(&qword_1003EEF88, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for OwnerSharedSecretsRecord();
    LOBYTE(v11) = *(unsigned char *)(v3 + *(int *)(v9 + 20));
    char v12 = 1;
    sub_1000E418C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    char v12 = 2;
    sub_1000E41E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    type metadata accessor for Date();
    sub_1000E4234(&qword_1003EEAA8, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E38A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v25 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100044014(&qword_1003EEF58);
  uint64_t v22 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for OwnerSharedSecretsRecord();
  __chkstk_darwin(v9);
  long long v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000E3FD0();
  uint64_t v27 = v8;
  uint64_t v12 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return sub_1000233E4((uint64_t)a1);
  }
  uint64_t v19 = v4;
  uint64_t v28 = a1;
  uint64_t v14 = v23;
  uint64_t v13 = v24;
  LOBYTE(v29) = 0;
  sub_1000E4234(&qword_1003EEF68, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v15, v5);
  char v30 = 1;
  sub_1000E4024();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v11[v9[5]] = v29;
  char v30 = 2;
  sub_1000E4078();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v11[v9[6]] = v29;
  LOBYTE(v29) = 3;
  sub_1000E4234(&qword_1003EEAE0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v17 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v16);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v11[v9[7]], v17, v13);
  sub_1000E40CC((uint64_t)v11, v21);
  sub_1000233E4((uint64_t)v28);
  return sub_1000E4130((uint64_t)v11);
}

uint64_t sub_1000E3D7C()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x6553646572616873;
      break;
    case 3:
      uint64_t result = 0x6574614465736162;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E3E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E4638(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E3E28(uint64_t a1)
{
  unint64_t v2 = sub_1000E3FD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E3E64(uint64_t a1)
{
  unint64_t v2 = sub_1000E3FD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3EA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E38A0(a1, a2);
}

uint64_t sub_1000E3EBC(void *a1)
{
  return sub_1000E3614(a1);
}

uint64_t sub_1000E3ED4(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for OwnerSharedSecretsRecord();
  if (*(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(int *)(v4 + 24);
  uint64_t v7 = *(void *)(a1 + v6);
  unint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (uint64_t *)(a2 + v6);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_100022C64(v7, v8);
  sub_100022C64(v10, v11);
  char v12 = sub_100102018(v7, v8, v10, v11);
  sub_100044090(v10, v11);
  sub_100044090(v7, v8);
  if ((v12 & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *(int *)(v5 + 28);

  return static Date.== infix(_:_:)(a1 + v13, a2 + v13);
}

unint64_t sub_1000E3FD0()
{
  unint64_t result = qword_1003EEF60;
  if (!qword_1003EEF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEF60);
  }
  return result;
}

unint64_t sub_1000E4024()
{
  unint64_t result = qword_1003EEF70;
  if (!qword_1003EEF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEF70);
  }
  return result;
}

unint64_t sub_1000E4078()
{
  unint64_t result = qword_1003EEF78;
  if (!qword_1003EEF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEF78);
  }
  return result;
}

uint64_t sub_1000E40CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnerSharedSecretsRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E4130(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnerSharedSecretsRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000E418C()
{
  unint64_t result = qword_1003EEF90;
  if (!qword_1003EEF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEF90);
  }
  return result;
}

unint64_t sub_1000E41E0()
{
  unint64_t result = qword_1003EEF98;
  if (!qword_1003EEF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEF98);
  }
  return result;
}

uint64_t sub_1000E4234(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnerSharedSecretsRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E4348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerSharedSecretsRecord.CodingKeys()
{
  return &type metadata for OwnerSharedSecretsRecord.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SharedSecretType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E444CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedSecretType()
{
  return &type metadata for SharedSecretType;
}

unint64_t sub_1000E4488()
{
  unint64_t result = qword_1003EEFA0;
  if (!qword_1003EEFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFA0);
  }
  return result;
}

unint64_t sub_1000E44E0()
{
  unint64_t result = qword_1003EEFA8;
  if (!qword_1003EEFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFA8);
  }
  return result;
}

unint64_t sub_1000E4538()
{
  unint64_t result = qword_1003EEFB0;
  if (!qword_1003EEFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFB0);
  }
  return result;
}

unint64_t sub_1000E4590()
{
  unint64_t result = qword_1003EEFB8;
  if (!qword_1003EEFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFB8);
  }
  return result;
}

unint64_t sub_1000E45E4()
{
  unint64_t result = qword_1003EEFC0;
  if (!qword_1003EEFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFC0);
  }
  return result;
}

uint64_t sub_1000E4638(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574614465736162 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t assignWithCopy for ServerSettingsRecord(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (_OWORD *)(a1 + 96);
  uint64_t v5 = (_OWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136))
  {
    if (v6)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1 + 96);
      long long v7 = *(_OWORD *)(a2 + 112);
      *unsigned int v4 = *v5;
      *(_OWORD *)(a1 + 112) = v7;
      long long v8 = *(_OWORD *)(a2 + 176);
      long long v10 = *(_OWORD *)(a2 + 128);
      long long v9 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v8;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 144) = v9;
      long long v11 = *(_OWORD *)(a2 + 240);
      long long v13 = *(_OWORD *)(a2 + 192);
      long long v12 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v11;
      *(_OWORD *)(a1 + 192) = v13;
      *(_OWORD *)(a1 + 208) = v12;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 112);
    *unsigned int v4 = *v5;
    *(_OWORD *)(a1 + 112) = v14;
    long long v15 = *(_OWORD *)(a2 + 128);
    long long v16 = *(_OWORD *)(a2 + 144);
    long long v17 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v17;
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 144) = v16;
    long long v18 = *(_OWORD *)(a2 + 192);
    long long v19 = *(_OWORD *)(a2 + 208);
    long long v20 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v20;
    *(_OWORD *)(a1 + 192) = v18;
    *(_OWORD *)(a1 + 208) = v19;
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  long long v21 = *(_OWORD *)(a2 + 272);
  long long v22 = *(_OWORD *)(a2 + 288);
  long long v23 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v23;
  *(_OWORD *)(a1 + 272) = v21;
  *(_OWORD *)(a1 + 288) = v22;
  long long v24 = *(_OWORD *)(a2 + 336);
  long long v25 = *(_OWORD *)(a2 + 352);
  long long v26 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 336) = v24;
  *(_OWORD *)(a1 + 352) = v25;
  uint64_t v27 = (_OWORD *)(a1 + 400);
  uint64_t v28 = (_OWORD *)(a2 + 400);
  uint64_t v29 = *(void *)(a2 + 408);
  if (*(void *)(a1 + 408))
  {
    if (v29)
    {
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      *(void *)(a1 + 408) = *(void *)(a2 + 408);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(void *)(a1 + 424) = *(void *)(a2 + 424);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000B9FFC(a1 + 400);
      long long v30 = *(_OWORD *)(a2 + 416);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 416) = v30;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 416);
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 416) = v31;
  }
  return a1;
}

uint64_t assignWithTake for ServerSettingsRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 136))
  {
    uint64_t v8 = *(void *)(a2 + 136);
    if (v8)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      uint64_t v9 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v9;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v8;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      long long v10 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v10;
      uint64_t v11 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 248);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10008EE3C(a1 + 96);
  }
  long long v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  long long v14 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v14;
  long long v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v15;
  long long v16 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v16;
  long long v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v17;
LABEL_6:
  long long v18 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v18;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  long long v19 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v19;
  long long v20 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v20;
  long long v21 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v21;
  if (!*(void *)(a1 + 408))
  {
LABEL_10:
    long long v24 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v24;
    return a1;
  }
  uint64_t v22 = *(void *)(a2 + 408);
  if (!v22)
  {
    sub_1000B9FFC(a1 + 400);
    goto LABEL_10;
  }
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v23;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ServerSettingsRecord()
{
  return &type metadata for ServerSettingsRecord;
}

uint64_t sub_1000E4D9C(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EEFD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000E5F6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[3];
  v13[2] = v3[2];
  v13[3] = v9;
  long long v10 = v3[5];
  v13[4] = v3[4];
  v13[5] = v10;
  long long v11 = v3[1];
  v13[0] = *v3;
  v13[1] = v11;
  char v17 = 0;
  sub_10004E5CC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_100013B50((uint64_t)(v3 + 6), (uint64_t)v16, &qword_1003ED068);
    sub_100013B50((uint64_t)v16, (uint64_t)v13, &qword_1003ED068);
    char v17 = 1;
    sub_10004E2E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100013B50((uint64_t)(v3 + 16), (uint64_t)v15, &qword_1003ECCD8);
    sub_100013B50((uint64_t)v15, (uint64_t)v13, &qword_1003ECCD8);
    char v17 = 2;
    sub_1000E602C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100013B50((uint64_t)(v3 + 25), (uint64_t)v14, &qword_1003EE258);
    sub_100013B50((uint64_t)v14, (uint64_t)v13, &qword_1003EE258);
    char v17 = 3;
    sub_1000E6080();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E5028()
{
  uint64_t result = 0x6F666E49796DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x747865746E6F63;
      break;
    case 2:
      uint64_t result = 0x6769666E6F63;
      break;
    case 3:
      uint64_t result = 0x7366657270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E50A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E57A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E50D0(uint64_t a1)
{
  unint64_t v2 = sub_1000E5F6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E510C(uint64_t a1)
{
  unint64_t v2 = sub_1000E5F6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000E5148@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000E594C(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x1B0uLL);
  }
  return result;
}

uint64_t sub_1000E519C(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_1000E4D9C(a1);
}

BOOL sub_1000E51F0(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_1000E5248((uint64_t)v4, (uint64_t)__dst);
}

BOOL sub_1000E5248(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 48);
  v43[2] = *(_OWORD *)(a1 + 32);
  v43[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v43[4] = *(_OWORD *)(a1 + 64);
  v43[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v43[0] = *(_OWORD *)a1;
  v43[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v42[2] = *(_OWORD *)(a2 + 32);
  v42[3] = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  v42[4] = *(_OWORD *)(a2 + 64);
  v42[5] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v42[0] = *(_OWORD *)a2;
  v42[1] = v9;
  if ((sub_1000BBCB0((uint64_t)v43, (uint64_t)v42) & 1) == 0) {
    return 0;
  }
  sub_100013B50(a1 + 96, (uint64_t)v39, &qword_1003ED068);
  sub_100013B50(a2 + 96, (uint64_t)v40, &qword_1003ED068);
  sub_100013B50((uint64_t)v39, (uint64_t)v41, &qword_1003ED068);
  if (sub_100085654((uint64_t)v41) == 1)
  {
    sub_100013B50((uint64_t)v40, (uint64_t)v37, &qword_1003ED068);
    if (sub_100085654((uint64_t)v37) == 1) {
      goto LABEL_9;
    }
LABEL_6:
    sub_100013B50((uint64_t)v39, (uint64_t)v37, &qword_1003ED068);
    sub_100013B50((uint64_t)v40, (uint64_t)&v38, &qword_1003ED068);
    sub_1000E5FC0(v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_1000E5FC0(v39, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_1000E60D4((uint64_t *)v37);
    return 0;
  }
  sub_100013B50((uint64_t)v40, (uint64_t)v31, &qword_1003ED068);
  if (sub_100085654((uint64_t)v31) == 1) {
    goto LABEL_6;
  }
  sub_100013B50((uint64_t)v39, (uint64_t)v20, &qword_1003ED068);
  v44[6] = v20[6];
  v44[7] = v20[7];
  v44[8] = v20[8];
  v44[9] = v20[9];
  v44[2] = v20[2];
  v44[3] = v20[3];
  v44[4] = v20[4];
  v44[5] = v20[5];
  v44[0] = v20[0];
  v44[1] = v20[1];
  sub_100013B50((uint64_t)v40, (uint64_t)&v21, &qword_1003ED068);
  v37[6] = v27;
  v37[7] = v28;
  v37[8] = v29;
  v37[9] = v30;
  v37[2] = v23;
  v37[3] = v24;
  v37[4] = v25;
  v37[5] = v26;
  v37[0] = v21;
  v37[1] = v22;
  if ((sub_1000C2500((uint64_t)v44, (uint64_t)v37) & 1) == 0) {
    return 0;
  }
LABEL_9:
  sub_100013B50(a1 + 256, (uint64_t)v35, &qword_1003ECCD8);
  sub_100013B50(a2 + 256, (uint64_t)v36, &qword_1003ECCD8);
  sub_100013B50((uint64_t)v35, (uint64_t)v20, &qword_1003ECCD8);
  if (sub_10005F088((uint64_t)v20) == 1)
  {
    sub_100013B50((uint64_t)v36, (uint64_t)v31, &qword_1003ECCD8);
    if (sub_10005F088((uint64_t)v31) != 1) {
      return 0;
    }
  }
  else
  {
    sub_100013B50((uint64_t)v36, (uint64_t)v34, &qword_1003ECCD8);
    if (sub_10005F088((uint64_t)v34) == 1) {
      return 0;
    }
    sub_100013B50((uint64_t)v35, (uint64_t)v32, &qword_1003ECCD8);
    long long v27 = v32[6];
    long long v28 = v32[7];
    long long v29 = v32[8];
    long long v23 = v32[2];
    long long v24 = v32[3];
    long long v25 = v32[4];
    long long v26 = v32[5];
    long long v21 = v32[0];
    long long v22 = v32[1];
    sub_100013B50((uint64_t)v36, (uint64_t)v33, &qword_1003ECCD8);
    v31[6] = v33[6];
    v31[7] = v33[7];
    v31[8] = v33[8];
    v31[2] = v33[2];
    v31[3] = v33[3];
    v31[4] = v33[4];
    v31[5] = v33[5];
    v31[0] = v33[0];
    v31[1] = v33[1];
    if (!sub_1000BBB28((uint64_t)&v21, (uint64_t)v31)) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 400);
  uint64_t v11 = *(void *)(a1 + 408);
  uint64_t v14 = *(void *)(a1 + 416);
  uint64_t v13 = *(void *)(a1 + 424);
  uint64_t v16 = *(void *)(a2 + 400);
  uint64_t v15 = *(void *)(a2 + 408);
  uint64_t v18 = *(void *)(a2 + 416);
  uint64_t v17 = *(void *)(a2 + 424);
  if (!v11)
  {
    if (!v15) {
      return 1;
    }
    goto LABEL_23;
  }
  if (!v15)
  {
LABEL_23:
    sub_1000372F0(v12, v11);
    sub_1000372F0(v16, v15);
    sub_100037334(v12, v11);
    sub_100037334(v16, v15);
    return 0;
  }
  if ((v12 != v16 || v11 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    sub_1000372F0(v12, v11);
    sub_1000372F0(v12, v11);
    sub_1000372F0(v16, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037334(v12, v11);
    return 0;
  }
  if (v14 != v18 || v13 != v17)
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000372F0(v12, v11);
    sub_1000372F0(v12, v11);
    sub_1000372F0(v16, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037334(v12, v11);
    return (v19 & 1) != 0;
  }
  sub_1000372F0(v12, v11);
  sub_1000372F0(v12, v11);
  sub_1000372F0(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037334(v12, v11);
  return 1;
}

uint64_t sub_1000E57A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F666E49796DLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6769666E6F63 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7366657270 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void *sub_1000E594C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EEFC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v40 = a1;
  sub_100042524(a1, v9);
  sub_1000E5F6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)sub_1000233E4((uint64_t)v40);
  }
  uint64_t v38 = a2;
  uint64_t v39 = v6;
  LOBYTE(v41[0]) = 0;
  sub_10003EFC8();
  uint64_t v10 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v42[1];
  uint64_t v12 = v42[3];
  uint64_t v13 = v42[4];
  uint64_t v14 = v42[6];
  uint64_t v15 = v42[8];
  uint64_t v16 = v42[11];
  uint64_t v35 = v42[10];
  uint64_t v36 = v42[0];
  v53[0] = v42[0];
  v53[1] = v42[1];
  uint64_t v34 = v42[2];
  v53[2] = v42[2];
  v53[3] = v42[3];
  v53[4] = v42[4];
  int v33 = LOBYTE(v42[5]);
  LOBYTE(v53[5]) = v42[5];
  v53[6] = v42[6];
  uint64_t v32 = v42[7];
  v53[7] = v42[7];
  v53[8] = v42[8];
  int v31 = LOBYTE(v42[9]);
  LOBYTE(v53[9]) = v42[9];
  v53[10] = v42[10];
  v53[11] = v42[11];
  char v51 = 1;
  sub_100036EB0();
  uint64_t v37 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v27 = v16;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  uint64_t v30 = v12;
  sub_100013B50((uint64_t)&v52, (uint64_t)v50, &qword_1003ED068);
  sub_100013B50((uint64_t)v50, (uint64_t)&v53[12], &qword_1003ED068);
  v48[151] = 2;
  sub_1000E5FC0(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  sub_100036F04();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)&v49, (uint64_t)v48, &qword_1003ECCD8);
  sub_100013B50((uint64_t)v48, (uint64_t)&v53[32], &qword_1003ECCD8);
  char v43 = 3;
  sub_100036D64();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v17 = v28;
  uint64_t v18 = v29;
  uint64_t v19 = v27;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v10);
  uint64_t v20 = v44;
  uint64_t v21 = v18;
  uint64_t v22 = v17;
  uint64_t v23 = v45;
  uint64_t v24 = v46;
  uint64_t v25 = v47;
  v53[50] = v44;
  v53[51] = v45;
  v53[52] = v46;
  v53[53] = v47;
  v41[0] = v36;
  v41[1] = v37;
  v41[2] = v34;
  v41[3] = v30;
  v41[4] = v13;
  LOBYTE(v41[5]) = v33;
  v41[6] = v21;
  v41[7] = v32;
  v41[8] = v22;
  LOBYTE(v41[9]) = v31;
  v41[10] = v35;
  v41[11] = v19;
  sub_100013B50((uint64_t)v50, (uint64_t)&v41[12], &qword_1003ED068);
  sub_100013B50((uint64_t)v48, (uint64_t)&v41[32], &qword_1003ECCD8);
  v41[50] = v20;
  v41[51] = v23;
  v41[52] = v24;
  v41[53] = v25;
  sub_100035384(v41);
  sub_1000E5FC0(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000233E4((uint64_t)v40);
  memcpy(v42, v53, sizeof(v42));
  sub_100035258(v42);
  return memcpy(v38, v41, 0x1B0uLL);
}

unint64_t sub_1000E5F6C()
{
  unint64_t result = qword_1003EEFD0;
  if (!qword_1003EEFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFD0);
  }
  return result;
}

void *sub_1000E5FC0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

unint64_t sub_1000E602C()
{
  unint64_t result = qword_1003EEFE8;
  if (!qword_1003EEFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFE8);
  }
  return result;
}

unint64_t sub_1000E6080()
{
  unint64_t result = qword_1003EEFF0;
  if (!qword_1003EEFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFF0);
  }
  return result;
}

uint64_t *sub_1000E60D4(uint64_t *a1)
{
  uint64_t v2 = a1[21];
  uint64_t v8 = a1[20];
  uint64_t v3 = a1[22];
  uint64_t v4 = a1[23];
  uint64_t v5 = a1[24];
  uint64_t v6 = a1[25];
  sub_100037504(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  sub_100037504(v8, v2, v3, v4, v5, v6);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ServerSettingsRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E62A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerSettingsRecord.CodingKeys()
{
  return &type metadata for ServerSettingsRecord.CodingKeys;
}

unint64_t sub_1000E62E4()
{
  unint64_t result = qword_1003EEFF8;
  if (!qword_1003EEFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFF8);
  }
  return result;
}

unint64_t sub_1000E633C()
{
  unint64_t result = qword_1003EF000;
  if (!qword_1003EF000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF000);
  }
  return result;
}

unint64_t sub_1000E6394()
{
  unint64_t result = qword_1003EF008;
  if (!qword_1003EF008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF008);
  }
  return result;
}

uint64_t *sub_1000E63E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_100022C64(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t sub_1000E64C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_100044090(v6, v7);
}

uint64_t sub_1000E6540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_100022C64(*v9, v11);
  uint64_t *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t sub_1000E65D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_100022C64(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  uint64_t *v8 = v10;
  v8[1] = v11;
  sub_100044090(v12, v13);
  return a1;
}

uint64_t sub_1000E6668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000E66E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100044090(v8, v9);
  return a1;
}

uint64_t sub_1000E676C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E6780);
}

uint64_t sub_1000E6780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1000E6854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E6868);
}

uint64_t sub_1000E6868(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *unint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t type metadata accessor for ShareInvitationRecord()
{
  uint64_t result = qword_1003EF068;
  if (!qword_1003EF068) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E6980()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000E6A14()
{
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_10004F540();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000100375460;
  v1._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v1);
  type metadata accessor for ShareInvitationRecord();
  Swift::String v2 = Data.base64EncodedString(options:)(0);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x4C52556572616873;
}

uint64_t sub_1000E6B08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_1003EF0A8);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_1003EF0A8);
  if (qword_1003EC020 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B6D8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000E6BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DatabaseState();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_1000E6C40(uint64_t a1)
{
  return sub_1000E6C80(a1, qword_10040B510);
}

uint64_t sub_1000E6C5C(uint64_t a1)
{
  return sub_1000E6C80(a1, qword_10040B528);
}

uint64_t sub_1000E6C80(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Table();
  sub_100052FAC(v3, a2);
  sub_100044058(v3, (uint64_t)a2);
  return Table.init(_:database:)();
}

uint64_t sub_1000E6CE8(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  v3[2] = a1;
  v3[3] = v2;
  uint64_t v7 = type metadata accessor for DatabaseState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = swift_task_alloc();
  v3[4] = v9;
  swift_defaultActor_initialize();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v9, enum case for DatabaseState.unavailable(_:), v7);
  sub_100044014(&qword_1003EF2D8);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v10 + 16), v9, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
  *(void *)(v4 + 112) = v10;
  sub_100044014(&qword_1003EF2E0);
  swift_allocObject();
  *(void *)(v4 + 120) = AsyncStreamProvider.init()();
  uint64_t v11 = OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_logger;
  if (qword_1003EC020 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100044058(v12, (uint64_t)qword_10040B6D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v4 + v11, v13, v12);
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair) = 0;
  *(_DWORD *)(v4 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_currentVersion) = 2;
  uint64_t v14 = v4 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_baseContainerURL;
  uint64_t v15 = type metadata accessor for URL();
  v3[5] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[6] = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, a1, v15);
  *(unsigned char *)(v4 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_temporary) = a2 & 1;
  return _swift_task_switch(sub_1000E7014, v4, 0);
}

uint64_t sub_1000E7014()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[2], v0[5]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[3];
  return v1(v2);
}

uint64_t sub_1000E7098()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_baseContainerURL;
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000E7178()
{
  return type metadata accessor for CloudStorageDatabase();
}

uint64_t type metadata accessor for CloudStorageDatabase()
{
  uint64_t result = qword_1003EF0E8;
  if (!qword_1003EF0E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E71CC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1000E72D0()
{
  return sub_1000EA63C((unint64_t *)&unk_1003EF1D0);
}

uint64_t sub_1000E7304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_baseContainerURL;
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000E7378()
{
  return swift_retain();
}

uint64_t sub_1000E73C4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_1000E7418())()
{
  return j__swift_endAccess;
}

void sub_1000E7478(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16);
  int v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1000E6BD0(v4, a1);

  os_unfair_lock_unlock(v5);
}

uint64_t sub_1000E7528()
{
  sub_100044014(&qword_1003EF2C0);
  uint64_t v1 = *(void *)(type metadata accessor for DatabaseState() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100367D70;
  uint64_t v4 = v3 + v2;
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1000E6BD0(v6, v4);
  os_unfair_lock_unlock(v7);
  AsyncStreamProvider.stream(initialEvents:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E7684()
{
  return 2;
}

uint64_t sub_1000E768C()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_temporary);
}

uint64_t sub_1000E769C()
{
  return sub_1000EA41C();
}

uint64_t sub_1000E76B4()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

void sub_1000E7760()
{
}

uint64_t sub_1000E7798()
{
  uint64_t v1 = type metadata accessor for DatabaseState();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1000E808C(v6);
  os_unfair_lock_unlock(v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DatabaseState.available(_:), v1);
  AsyncStreamProvider.yield(value:transaction:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1000E7910(int a1, int a2)
{
}

void sub_1000E7928(int a1, int a2)
{
  uint64_t v20 = *v2;
  uint64_t v21 = v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EBF88 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100044058(v10, (uint64_t)qword_1003EF0A8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109376;
    LODWORD(v22) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 1024;
    LODWORD(v22) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Migrate schema %d -> %d", (uint8_t *)v13, 0xEu);
    swift_slowDealloc();
  }

  if (a2 == 2) {
    goto LABEL_6;
  }
  if (a2 == 1)
  {
    v15._countAndFlagsBits = 0xD00000000000001FLL;
    v15._object = (void *)0x8000000100375570;
    Connection.execute(_:)(v15);
    if (!v16)
    {
      v17._countAndFlagsBits = 0xD000000000000018;
      v17._object = (void *)0x8000000100375590;
      Connection.execute(_:)(v17);
      if (!v18)
      {
LABEL_6:
        __chkstk_darwin(v14);
        UUID.init()();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        Connection.savepoint(_:block:)();
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD000000000000013;
    unint64_t v23 = 0x8000000100375550;
    int v24 = a2;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_1000E7D50()
{
}

void sub_1000E7D88()
{
}

void sub_1000E7DC0()
{
}

uint64_t sub_1000E7DF8()
{
  return Database.description.getter();
}

uint64_t sub_1000E7E50()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = type metadata accessor for CloudStorageDatabase();
  uint64_t v3 = sub_1000EA63C(&qword_1003EF2C8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000E7F20;
  return Database.isolatedDescription.getter(v2, v3);
}

uint64_t sub_1000E7F20(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_1000E8024()
{
  return sub_1000EA63C(&qword_1003EF1E0);
}

uint64_t sub_1000E8058()
{
  return sub_1000EA63C(&qword_1003EF1E8);
}

uint64_t sub_1000E808C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatabaseState();
  uint64_t v3 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 104))(a1, enum case for DatabaseState.available(_:), v2);
}

uint64_t sub_1000E8148()
{
  if (qword_1003EBF90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Table();
  sub_100044058(v1, (uint64_t)qword_10040B510);
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1003EBF98 != -1) {
    swift_once();
  }
  sub_100044058(v1, (uint64_t)qword_10040B528);
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000E82D4()
{
  uint64_t v0 = sub_100044014(&qword_1003EF258);
  __chkstk_darwin(v0 - 8);
  unint64_t v23 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100044014(&qword_1003EF2B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014(&qword_1003EF268);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003EF270);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EBFA0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_100044014(&qword_1003EF240);
  uint64_t v12 = sub_100044058(v11, (uint64_t)qword_10040B540);
  uint64_t v13 = sub_100044014(&qword_1003EF278);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v10, 1, 1, v13);
  uint64_t v15 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v7, 1, 1, v11);
  type metadata accessor for UUID();
  uint64_t v22 = v12;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  sub_10000A520((uint64_t)v7, &qword_1003EF268);
  sub_10000A520((uint64_t)v10, &qword_1003EF270);
  if (qword_1003EBFA8 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100044014(&qword_1003EF230);
  sub_100044058(v16, (uint64_t)qword_10040B558);
  v14(v10, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520((uint64_t)v4, &qword_1003EF2B0);
  sub_10000A520((uint64_t)v10, &qword_1003EF270);
  if (qword_1003EBFB0 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100044014(&qword_1003EF1F0);
  sub_100044058(v17, (uint64_t)qword_10040B570);
  v14(v10, 1, 1, v13);
  uint64_t v18 = (uint64_t)v23;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v23, 1, 1, v17);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520(v18, &qword_1003EF258);
  sub_10000A520((uint64_t)v10, &qword_1003EF270);
  sub_100044014(&qword_1003EF298);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_100367D70;
  *(void *)(v19 + 56) = v11;
  *(void *)(v19 + 64) = sub_100014FFC(&qword_1003EF2A0, &qword_1003EF240);
  uint64_t v20 = sub_10003E0F4((uint64_t *)(v19 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v20, v22, v11);
  TableBuilder.unique(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E87D4()
{
  uint64_t v0 = sub_100044014(&qword_1003EF250);
  __chkstk_darwin(v0 - 8);
  uint64_t v44 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100044014(&qword_1003EF258);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014(&qword_1003EF260);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003EF268);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100044014(&qword_1003EF270);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EBFA0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100044014(&qword_1003EF240);
  uint64_t v15 = sub_100044058(v14, (uint64_t)qword_10040B540);
  uint64_t v16 = sub_100044014(&qword_1003EF278);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v13, 1, 1, v16);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  uint64_t v43 = v14;
  v18(v10, 1, 1, v14);
  type metadata accessor for UUID();
  uint64_t v42 = v15;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  sub_10000A520((uint64_t)v10, &qword_1003EF268);
  sub_10000A520((uint64_t)v13, &qword_1003EF270);
  if (qword_1003EBFD8 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_100044014(&qword_1003EF280);
  sub_100044058(v19, (uint64_t)qword_10040B5E8);
  v17(v13, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 1, 1, v19);
  sub_1000EA3C8();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520((uint64_t)v7, &qword_1003EF260);
  sub_10000A520((uint64_t)v13, &qword_1003EF270);
  if (qword_1003EBFE0 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_100044014(&qword_1003EF200);
  sub_100044058(v39, (uint64_t)qword_10040B600);
  v17(v13, 1, 1, v16);
  uint64_t v20 = sub_100044014(&qword_1003EF1F0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v37 = v21 + 56;
  uint64_t v38 = v22;
  v22(v4, 1, 1, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  uint64_t v41 = v4;
  sub_10000A520((uint64_t)v4, &qword_1003EF258);
  sub_10000A520((uint64_t)v13, &qword_1003EF270);
  if (qword_1003EBFE8 != -1) {
    swift_once();
  }
  uint64_t v36 = sub_100044014(&qword_1003EF210);
  sub_100044058(v36, (uint64_t)qword_10040B618);
  v17(v13, 1, 1, v16);
  uint64_t v23 = sub_100044014(&qword_1003EF290);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  long long v26 = v17;
  uint64_t v27 = (uint64_t)v44;
  v34[1] = v24 + 56;
  uint64_t v35 = v25;
  v25(v44, 1, 1, v23);
  type metadata accessor for Date();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520(v27, &qword_1003EF250);
  sub_10000A520((uint64_t)v13, &qword_1003EF270);
  if (qword_1003EBFF0 != -1) {
    swift_once();
  }
  sub_100044058(v39, (uint64_t)qword_10040B630);
  v26(v13, 1, 1, v16);
  uint64_t v28 = (uint64_t)v41;
  v38(v41, 1, 1, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520(v28, &qword_1003EF258);
  sub_10000A520((uint64_t)v13, &qword_1003EF270);
  if (qword_1003EBFF8 != -1) {
    swift_once();
  }
  sub_100044058(v36, (uint64_t)qword_10040B648);
  v26(v13, 1, 1, v16);
  uint64_t v29 = (uint64_t)v44;
  v35(v44, 1, 1, v23);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520(v29, &qword_1003EF250);
  sub_10000A520((uint64_t)v13, &qword_1003EF270);
  sub_100044014(&qword_1003EF298);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100367D70;
  uint64_t v31 = v43;
  *(void *)(v30 + 56) = v43;
  *(void *)(v30 + 64) = sub_100014FFC(&qword_1003EF2A0, &qword_1003EF240);
  uint64_t v32 = sub_10003E0F4((uint64_t *)(v30 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v40 + 16))(v32, v42, v31);
  TableBuilder.unique(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E8FDC()
{
  if (qword_1003EBF90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Table();
  sub_100044058(v1, (uint64_t)qword_10040B510);
  SchemaType.drop(ifExists:)(0);
  Connection.run(_:_:)();
  if (v0)
  {
    swift_bridgeObjectRelease();
    if (qword_1003EBF88 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_1003EF0A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v6 = String.init<A>(describing:)();
      sub_100037004(v6, v7, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Couldn't drop fence table: %{public}s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000E92E8()
{
  uint64_t v0 = sub_100044014(&qword_1003EF250);
  __chkstk_darwin(v0 - 8);
  uint64_t v39 = (char *)v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100044014(&qword_1003EF2B8);
  __chkstk_darwin(v2 - 8);
  uint64_t v38 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014(&qword_1003EF258);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003EF2B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100044014(&qword_1003EF268);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100044014(&qword_1003EF270);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EBFA0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100044014(&qword_1003EF240);
  uint64_t v17 = sub_100044058(v16, (uint64_t)qword_10040B540);
  uint64_t v18 = sub_100044014(&qword_1003EF278);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v15, 1, 1, v18);
  uint64_t v40 = *(void *)(v16 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  uint64_t v42 = v16;
  v20(v12, 1, 1, v16);
  type metadata accessor for UUID();
  uint64_t v41 = v17;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  sub_10000A520((uint64_t)v12, &qword_1003EF268);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  if (qword_1003EBFA8 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100044014(&qword_1003EF230);
  sub_100044058(v21, (uint64_t)qword_10040B558);
  v19(v15, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520((uint64_t)v9, &qword_1003EF2B0);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  if (qword_1003EBFB0 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_100044014(&qword_1003EF1F0);
  sub_100044058(v22, (uint64_t)qword_10040B570);
  v19(v15, 1, 1, v18);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v36[1] = v23 + 56;
  uint64_t v37 = v24;
  v24(v6, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520((uint64_t)v6, &qword_1003EF258);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  if (qword_1003EBFB8 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_100044014(&qword_1003EF220);
  sub_100044058(v25, (uint64_t)qword_10040B588);
  v19(v15, 1, 1, v18);
  uint64_t v26 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v38, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520(v26, &qword_1003EF2B8);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  if (qword_1003EBFC0 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_100044014(&qword_1003EF210);
  sub_100044058(v27, (uint64_t)qword_10040B5A0);
  v19(v15, 1, 1, v18);
  uint64_t v28 = sub_100044014(&qword_1003EF290);
  uint64_t v29 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v39, 1, 1, v28);
  type metadata accessor for Date();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520(v29, &qword_1003EF250);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  uint64_t v30 = v37;
  if (qword_1003EBFC8 != -1) {
    swift_once();
  }
  sub_100044058(v22, (uint64_t)qword_10040B5B8);
  v19(v15, 1, 1, v18);
  v30(v6, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520((uint64_t)v6, &qword_1003EF258);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  if (qword_1003EBFD0 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_100044014(&qword_1003EF200);
  sub_100044058(v31, (uint64_t)qword_10040B5D0);
  v19(v15, 1, 1, v18);
  v30(v6, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10000A520((uint64_t)v6, &qword_1003EF258);
  sub_10000A520((uint64_t)v15, &qword_1003EF270);
  sub_100044014(&qword_1003EF298);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100367D70;
  uint64_t v33 = v42;
  *(void *)(v32 + 56) = v42;
  *(void *)(v32 + 64) = sub_100014FFC(&qword_1003EF2A0, &qword_1003EF240);
  uint64_t v34 = sub_10003E0F4((uint64_t *)(v32 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v40 + 16))(v34, v41, v33);
  TableBuilder.unique(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E9BF8()
{
  uint64_t v0 = sub_100044014(&qword_1003EF240);
  sub_100052FAC(v0, qword_10040B540);
  sub_100044058(v0, (uint64_t)qword_10040B540);
  sub_100014FFC(&qword_1003EF248, &qword_1003EF240);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000E9C8C()
{
  uint64_t v0 = sub_100044014(&qword_1003EF230);
  sub_100052FAC(v0, qword_10040B558);
  sub_100044058(v0, (uint64_t)qword_10040B558);
  sub_100014FFC(&qword_1003EF238, &qword_1003EF230);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000E9D28()
{
  uint64_t v0 = sub_100044014(&qword_1003EF1F0);
  sub_100052FAC(v0, qword_10040B570);
  sub_100044058(v0, (uint64_t)qword_10040B570);
  sub_100014FFC(&qword_1003EF1F8, &qword_1003EF1F0);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000E9DC8()
{
  uint64_t v0 = sub_100044014(&qword_1003EF220);
  sub_100052FAC(v0, qword_10040B588);
  sub_100044058(v0, (uint64_t)qword_10040B588);
  sub_100014FFC(&qword_1003EF228, &qword_1003EF220);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000E9E70()
{
  uint64_t v0 = sub_100044014(&qword_1003EF210);
  sub_100052FAC(v0, qword_10040B5A0);
  sub_100044058(v0, (uint64_t)qword_10040B5A0);
  sub_100014FFC(&qword_1003EF218, &qword_1003EF210);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000E9F18()
{
  uint64_t v0 = sub_100044014(&qword_1003EF1F0);
  sub_100052FAC(v0, qword_10040B5B8);
  sub_100044058(v0, (uint64_t)qword_10040B5B8);
  sub_100014FFC(&qword_1003EF1F8, &qword_1003EF1F0);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000E9FBC()
{
  uint64_t v0 = sub_100044014(&qword_1003EF200);
  sub_100052FAC(v0, qword_10040B5D0);
  sub_100044058(v0, (uint64_t)qword_10040B5D0);
  sub_100014FFC(&qword_1003EF208, &qword_1003EF200);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000EA05C()
{
  return sub_1000E8FDC();
}

uint64_t sub_1000EA078()
{
  return sub_1000E8148();
}

uint64_t sub_1000EA094()
{
  uint64_t v0 = sub_100044014(&qword_1003EF280);
  sub_100052FAC(v0, qword_10040B5E8);
  sub_100044058(v0, (uint64_t)qword_10040B5E8);
  sub_100014FFC(&qword_1003EF2A8, &qword_1003EF280);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000EA138()
{
  uint64_t v0 = sub_100044014(&qword_1003EF200);
  sub_100052FAC(v0, qword_10040B600);
  sub_100044058(v0, (uint64_t)qword_10040B600);
  sub_100014FFC(&qword_1003EF208, &qword_1003EF200);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000EA1DC()
{
  uint64_t v0 = sub_100044014(&qword_1003EF210);
  sub_100052FAC(v0, qword_10040B618);
  sub_100044058(v0, (uint64_t)qword_10040B618);
  sub_100014FFC(&qword_1003EF218, &qword_1003EF210);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000EA280()
{
  uint64_t v0 = sub_100044014(&qword_1003EF200);
  sub_100052FAC(v0, qword_10040B630);
  sub_100044058(v0, (uint64_t)qword_10040B630);
  sub_100014FFC(&qword_1003EF208, &qword_1003EF200);
  return ExpressionType.init(_:)();
}

uint64_t sub_1000EA324()
{
  uint64_t v0 = sub_100044014(&qword_1003EF210);
  sub_100052FAC(v0, qword_10040B648);
  sub_100044058(v0, (uint64_t)qword_10040B648);
  sub_100014FFC(&qword_1003EF218, &qword_1003EF210);
  return ExpressionType.init(_:)();
}

unint64_t sub_1000EA3C8()
{
  unint64_t result = qword_1003EF288;
  if (!qword_1003EF288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF288);
  }
  return result;
}

uint64_t sub_1000EA41C()
{
  uint64_t v2 = type metadata accessor for Keychain.DataProtectionClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = static Keychain.data(account:service:)();
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      uint64_t v0 = static Data.random(bytes:)();
      unint64_t v9 = v8;
      v11[0] = v0;
      v11[1] = v8;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_100022C64(v0, v9);
      sub_10004F4EC();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_100044090(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_1000EA63C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CloudStorageDatabase();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EA680(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_10005A548(0, &qword_1003EF490);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000EA808()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B688);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B688);
  if (qword_1003EC008 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B6A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000EA8D0()
{
  uint64_t v2 = v0;
  v1[2] = v0;
  uint64_t v3 = type metadata accessor for URL();
  v1[3] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[4] = swift_task_alloc();
  uint64_t v5 = swift_task_alloc();
  v1[5] = v5;
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = 0xD000000000000013;
  *(void *)(v2 + 120) = 0x800000010036D5D0;
  if (qword_1003EC4C8 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100044058(v3, (uint64_t)qword_10040C478);
  v1[6] = v6;
  char v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[7] = v7;
  v1[8] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v5, v6, v3);
  type metadata accessor for CloudStorageDatabase();
  swift_allocObject();
  unint64_t v8 = (void *)swift_task_alloc();
  v1[9] = v8;
  void *v8 = v1;
  v8[1] = sub_1000EAA98;
  return sub_1000E6CE8(v5, 0);
}

uint64_t sub_1000EAA98(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for CloudStorageService();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    type metadata accessor for CloudStorageStore(0);
    uint64_t v8 = swift_allocObject();
    *(void *)(v4 + 80) = v8;
    swift_defaultActor_initialize();
    strcpy((char *)(v8 + 120), "CloudStorage");
    *(unsigned char *)(v8 + 133) = 0;
    *(_WORD *)(v8 + 134) = -5120;
    type metadata accessor for CloudStorageStore.State(0);
    swift_storeEnumTagMultiPayload();
    *(void *)(v8 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations) = _swiftEmptyDictionarySingleton;
    *(void *)(v8 + 112) = a1;
    return _swift_task_switch(sub_1000EACA8, v8, 0);
  }
}

uint64_t sub_1000EACA8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[7];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  *(void *)(v0[2] + 128) = v0[10];
  v0[11] = type metadata accessor for CloudKitStorage();
  v1(v3, v2, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000EAD7C;
  return daemon.getter();
}

uint64_t sub_1000EAD7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_1000F46A4(&qword_1003EF4B8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v4 = ActorDaemon.bundleIdentifier.getter();
  uint64_t v18 = v5;
  uint64_t v19 = v4;
  swift_release();
  uint64_t v6 = *(void *)(v2 + 128);
  uint64_t v17 = sub_1000F46A4(&qword_1003EF4C0, 255, (void (*)(uint64_t))type metadata accessor for CloudStorageStore);
  sub_100044014(&qword_1003EF4C8);
  uint64_t v7 = type metadata accessor for CloudKitCoordinator.Database();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1003677A0;
  unint64_t v12 = v11 + v10;
  id v13 = *(void (**)(unint64_t, void, uint64_t))(v8 + 104);
  v13(v12, enum case for CloudKitCoordinator.Database.private(_:), v7);
  v13(v12 + v9, enum case for CloudKitCoordinator.Database.shared(_:), v7);
  swift_retain();
  char v14 = (void *)swift_task_alloc();
  *(void *)(v1 + 104) = v14;
  *char v14 = v3;
  v14[1] = sub_1000EB0C0;
  uint64_t v15 = *(void *)(v1 + 32);
  return CloudKitStorage.__allocating_init(containerURL:containerIdentifier:bundleIdentifier:dataStore:databases:containerEnvironment:)(v15, 0xD00000000000001ALL, 0x80000001003756B0, v19, v18, v6, v17, v11);
}

uint64_t sub_1000EB0C0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for CloudStorageService();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(*(void *)(v4 + 16) + 136) = a1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v5 + 8);
    uint64_t v9 = *(void *)(v4 + 16);
    return v8(v9);
  }
}

uint64_t sub_1000EB274()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_1000EB294, v0, 0);
}

uint64_t sub_1000EB294()
{
  id v1 = objc_allocWithZone((Class)CKContainerID);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithContainerIdentifier:v2 environment:1];
  v0[17] = v3;

  id v4 = [objc_allocWithZone((Class)CKContainer) initWithContainerID:v3];
  v0[18] = v4;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000EB410;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000EB614;
  v0[13] = &unk_1003E0780;
  v0[14] = v5;
  [v4 fetchUserRecordIDWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000EB410()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v2;
  uint64_t v3 = *(void *)(v1 + 128);
  if (v2) {
    id v4 = sub_1000EB59C;
  }
  else {
    id v4 = sub_1000EB530;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EB530()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000EB59C()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000EB614(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_1000EB6D4(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_1000EB6F8, v2, 0);
}

uint64_t sub_1000EB6F8()
{
  char v14 = v0;
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B688);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100037004(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Deleting CloudKit zone: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
  id v8 = (void *)swift_task_alloc();
  v0[6] = v8;
  void *v8 = v0;
  v8[1] = sub_1000F4818;
  uint64_t v10 = v0[3];
  uint64_t v9 = v0[4];
  return v12(v10, v9);
}

uint64_t sub_1000EB940(uint64_t a1)
{
  v2[30] = a1;
  v2[31] = v1;
  sub_100044014(&qword_1003ECFB8);
  v2[32] = swift_task_alloc();
  v2[33] = *(void *)(type metadata accessor for FenceRecord() - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[41] = v3;
  v2[42] = *(void *)(v3 - 8);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_1000EBAF0, 0, 0);
}

uint64_t sub_1000EBAF0()
{
  v0[46] = *(void *)(v0[31] + 128);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[47] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EBB88;
  return sub_1000F5FA8();
}

uint64_t sub_1000EBB88(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 384) = a1;
    return _swift_task_switch(sub_1000EBD64, 0, 0);
  }
}

uint64_t sub_1000EBD64()
{
  uint64_t v1 = *(void *)(v0 + 248);
  *(void *)(v0 + 392) = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  return _swift_task_switch(sub_1000EBDDC, v1, 0);
}

uint64_t sub_1000EBDDC()
{
  uint64_t v1 = *(void *)(v0 + 392);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v4 = *(void *)(v0 + 264);
    char v51 = _swiftEmptyArrayStorage;
    sub_100245E08(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v49 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = *(void *)(v0 + 360);
      uint64_t v9 = *(void *)(v0 + 320);
      uint64_t v8 = *(void *)(v0 + 328);
      sub_1000D0F7C(v5, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v9, v8);
      sub_1000B8D48(v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100245E08(0, v6[2] + 1, 1);
        uint64_t v6 = v51;
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_100245E08(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v51;
      }
      uint64_t v12 = *(void *)(v0 + 360);
      uint64_t v13 = *(void *)(v0 + 328);
      _OWORD v6[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v12, v13);
      char v51 = v6;
      v5 += v49;
      --v2;
    }
    while (v2);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = *(void *)(v0 + 240);
  *(void *)(v0 + 400) = sub_100246774((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
    uint64_t v17 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v19 = *v16;
      if (*v16)
      {
        uint64_t v20 = *(v16 - 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = sub_10004AFDC(0, v17[2] + 1, 1, v17);
        }
        unint64_t v22 = v17[2];
        unint64_t v21 = v17[3];
        if (v22 >= v21 >> 1) {
          uint64_t v17 = sub_10004AFDC((void *)(v21 > 1), v22 + 1, 1, v17);
        }
        v17[2] = v22 + 1;
        uint64_t v18 = &v17[2 * v22];
        v18[4] = v20;
        v18[5] = v19;
      }
      v16 += 73;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    uint64_t v23 = v17[2];
    if (v23) {
      goto LABEL_20;
    }
LABEL_31:
    uint64_t v27 = _swiftEmptyArrayStorage;
    goto LABEL_32;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v23 = _swiftEmptyArrayStorage[2];
  if (!v23) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v24 = *(void *)(v0 + 336);
  uint64_t v48 = v24;
  unint64_t v50 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v25 = (void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
  swift_bridgeObjectRetain();
  uint64_t v26 = v17 + 5;
  uint64_t v27 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v28 = *(void *)(v0 + 328);
    uint64_t v29 = *(void *)(v0 + 256);
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*v50)(v29, 1, v28) == 1)
    {
      sub_10000A520(*(void *)(v0 + 256), &qword_1003ECFB8);
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 344);
      uint64_t v30 = *(void *)(v0 + 352);
      uint64_t v32 = *(void *)(v0 + 328);
      uint64_t v33 = *v25;
      (*v25)(v30, *(void *)(v0 + 256), v32);
      v33(v31, v30, v32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = (void *)sub_10013E1AC(0, v27[2] + 1, 1, (unint64_t)v27);
      }
      unint64_t v35 = v27[2];
      unint64_t v34 = v27[3];
      if (v35 >= v34 >> 1) {
        uint64_t v27 = (void *)sub_10013E1AC(v34 > 1, v35 + 1, 1, (unint64_t)v27);
      }
      uint64_t v36 = *(void *)(v0 + 344);
      uint64_t v37 = *(void *)(v0 + 328);
      v27[2] = v35 + 1;
      v33((uint64_t)v27+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v35, v36, v37);
    }
    v26 += 2;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 408) = sub_100246774((uint64_t)v27);
  swift_bridgeObjectRelease();
  id v38 = objc_allocWithZone((Class)CKContainerID);
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = [v38 initWithContainerIdentifier:v39 environment:1];
  *(void *)(v0 + 416) = v40;

  id v41 = [objc_allocWithZone((Class)CKContainer) initWithContainerID:v40];
  *(void *)(v0 + 424) = v41;
  id v42 = [self predicateWithValue:1];
  *(void *)(v0 + 432) = v42;
  sub_10005A548(0, &qword_1003EF4A0);
  uint64_t v43 = (NSPredicate *)v42;
  v44._countAndFlagsBits = 0x65636E6546;
  v44._object = (void *)0xE500000000000000;
  v45.super.isa = CKQuery.init(recordType:predicate:)(v44, v43).super.isa;
  *(CKQuery *)(v0 + 440) = v45;
  *(void *)(v0 + 448) = [v41 privateCloudDatabase];
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_1000EC37C;
  return CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(v45.super.isa, 0, 0, CKQueryOperationMaximumResults);
}

uint64_t sub_1000EC37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 464) = a1;
  *(void *)(v4 + 472) = a2;
  *(void *)(v4 + 480) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = *(void *)(v4 + 248);
    uint64_t v6 = sub_1000EEE40;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 248);

    uint64_t v6 = sub_1000EC4A8;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000EC4A8()
{
  uint64_t v55 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 488) = v2;
  if (!v2)
  {
LABEL_18:
    id v39 = [*(id *)(v0 + 424) sharedCloudDatabase];
    *(void *)(v0 + 552) = v39;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 208;
    *(void *)(v0 + 24) = sub_1000ED4E4;
    uint64_t v40 = swift_continuation_init();
    *(void *)(v0 + 160) = _NSConcreteStackBlock;
    *(void *)(v0 + 168) = 0x40000000;
    *(void *)(v0 + 176) = sub_1000EF474;
    *(void *)(v0 + 184) = &unk_1003E0768;
    *(void *)(v0 + 192) = v40;
    [v39 fetchAllRecordZonesWithCompletionHandler:v0 + 160];
    return _swift_continuation_await(v0 + 16);
  }
  uint64_t v3 = *(void *)(v0 + 480);
  *(void *)(v0 + 496) = 0;
  uint64_t v4 = *(void **)(v1 + 32);
  *(void *)(v0 + 504) = v4;
  uint64_t v5 = *(void **)(v1 + 40);
  *(void *)(v0 + 512) = v5;
  char v6 = *(unsigned char *)(v1 + 48);
  swift_bridgeObjectRetain();
  if (v6)
  {
LABEL_3:
    uint64_t v7 = v5;
    uint64_t v8 = *(void **)(v0 + 472);
    unint64_t v10 = *(void **)(v0 + 432);
    uint64_t v9 = *(void **)(v0 + 440);
    unint64_t v11 = *(void **)(v0 + 416);
    unint64_t v53 = *(void **)(v0 + 424);
    *(void *)(v0 + 224) = v7;
    sub_1000F468C(v7, 1);
    sub_1000F468C(v7, 1);
    id v12 = v4;
    sub_100044014(&qword_1003F4B30);
    swift_willThrowTypedImpl();

    swift_bridgeObjectRelease();
    sub_1000F4698(v7, 1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  uint64_t v13 = *(void *)(v0 + 312);
  sub_1000F468C(v5, 0);
  sub_1000F468C(v5, 0);
  sub_1000F468C(v5, 0);
  id v14 = v4;
  sub_1000CDF78(v5, v13);
  if (v3)
  {
    uint64_t v15 = v5;
    uint64_t v16 = *(void **)(v0 + 472);
    uint64_t v18 = *(void **)(v0 + 432);
    uint64_t v17 = *(void **)(v0 + 440);
    uint64_t v20 = *(void **)(v0 + 416);
    uint64_t v19 = *(void **)(v0 + 424);
    swift_bridgeObjectRelease_n();

    sub_1000F4698(v15, 0);
    sub_1000F4698(v15, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v24 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 312);
  char v25 = sub_100012DDC(v23, *(void *)(v0 + 400));
  sub_1000D0F7C(v23, v24);
  if (v25)
  {
    sub_1000B8D48(*(void *)(v0 + 304));
LABEL_16:
    sub_1000B8D48(*(void *)(v0 + 312));

    sub_1000F4698(v5, 0);
    sub_1000F4698(v5, 0);
    for (uint64_t i = *(void *)(v0 + 496) + 1; i != *(void *)(v0 + 488); uint64_t i = *(void *)(v0 + 496) + 1)
    {
      *(void *)(v0 + 496) = i;
      uint64_t v41 = *(void *)(v0 + 464) + 24 * i;
      uint64_t v4 = *(void **)(v41 + 32);
      *(void *)(v0 + 504) = v4;
      uint64_t v5 = *(void **)(v41 + 40);
      *(void *)(v0 + 512) = v5;
      if (*(unsigned char *)(v41 + 48)) {
        goto LABEL_3;
      }
      uint64_t v42 = *(void *)(v0 + 312);
      sub_1000F468C(v5, 0);
      sub_1000F468C(v5, 0);
      sub_1000F468C(v5, 0);
      id v43 = v4;
      sub_1000CDF78(v5, v42);
      uint64_t v45 = *(void *)(v0 + 304);
      uint64_t v44 = *(void *)(v0 + 312);
      char v46 = sub_100012DDC(v44, *(void *)(v0 + 400));
      sub_1000D0F7C(v44, v45);
      if (v46)
      {
        sub_1000B8D48(*(void *)(v0 + 304));
      }
      else
      {
        uint64_t v47 = *(void *)(v0 + 304);
        char v48 = sub_100012DDC(v47, *(void *)(v0 + 408));
        sub_1000B8D48(v47);
        if (v48) {
          goto LABEL_12;
        }
      }
      sub_1000B8D48(*(void *)(v0 + 312));

      sub_1000F4698(v5, 0);
      sub_1000F4698(v5, 0);
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v26 = *(void *)(v0 + 304);
  char v27 = sub_100012DDC(v26, *(void *)(v0 + 408));
  sub_1000B8D48(v26);
  if ((v27 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_12:
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v0 + 312);
  uint64_t v29 = *(void *)(v0 + 296);
  uint64_t v30 = type metadata accessor for Logger();
  sub_100044058(v30, (uint64_t)qword_10040B688);
  sub_1000D0F7C(v28, v29);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 296);
  if (v33)
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)unint64_t v35 = 136642819;
    uint64_t v36 = sub_1000CF7B0();
    *(void *)(v0 + 232) = sub_100037004(v36, v37, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B8D48(v34);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Found new CKFence in private db: %{sensitive}s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B8D48(*(void *)(v0 + 296));
  }

  sub_100044014(&qword_1003F4B20);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 520) = inited;
  *(_OWORD *)(inited + 16) = xmmword_10036D5A0;
  *(void *)(inited + 32) = v5;
  uint64_t v54 = inited;
  specialized Array._endMutation()();
  uint64_t v50 = v54;
  *(void *)(v0 + 528) = v54;
  id v51 = v5;
  uint64_t v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_1000ECBEC;
  return sub_1000F4ED4((uint64_t)_swiftEmptyArrayStorage, v50, 0);
}

uint64_t sub_1000ECBEC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EEF68;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000ECD78;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000ECD78()
{
  uint64_t v57 = v0;
  uint64_t v2 = *(void **)(v0 + 504);
  uint64_t v1 = *(void **)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 312);
  sub_1000F4698(v1, 0);

  sub_1000F4698(v1, 0);
  sub_1000B8D48(v3);
  uint64_t v4 = *(void *)(v0 + 496) + 1;
  if (v4 == *(void *)(v0 + 488))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    id v5 = [*(id *)(v0 + 424) sharedCloudDatabase];
    *(void *)(v0 + 552) = v5;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 208;
    *(void *)(v0 + 24) = sub_1000ED4E4;
    uint64_t v6 = swift_continuation_init();
    *(void *)(v0 + 160) = _NSConcreteStackBlock;
    *(void *)(v0 + 168) = 0x40000000;
    *(void *)(v0 + 176) = sub_1000EF474;
    *(void *)(v0 + 184) = &unk_1003E0768;
    *(void *)(v0 + 192) = v6;
    [v5 fetchAllRecordZonesWithCompletionHandler:v0 + 160];
    return _swift_continuation_await(v0 + 16);
  }
  uint64_t v7 = *(void *)(v0 + 544);
  *(void *)(v0 + 496) = v4;
  uint64_t v8 = *(void *)(v0 + 464) + 24 * v4;
  uint64_t v9 = *(void **)(v8 + 32);
  *(void *)(v0 + 504) = v9;
  unint64_t v10 = *(void **)(v8 + 40);
  *(void *)(v0 + 512) = v10;
  if (*(unsigned char *)(v8 + 48)) {
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v0 + 312);
  sub_1000F468C(v10, 0);
  sub_1000F468C(v10, 0);
  sub_1000F468C(v10, 0);
  id v18 = v9;
  sub_1000CDF78(v10, v17);
  if (v7)
  {
    uint64_t v19 = v10;
    uint64_t v20 = *(void **)(v0 + 472);
    unint64_t v22 = *(void **)(v0 + 432);
    unint64_t v21 = *(void **)(v0 + 440);
    uint64_t v24 = *(void **)(v0 + 416);
    uint64_t v23 = *(void **)(v0 + 424);
    swift_bridgeObjectRelease_n();

    sub_1000F4698(v19, 0);
    sub_1000F4698(v19, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v27 = *(void *)(v0 + 304);
  uint64_t v26 = *(void *)(v0 + 312);
  char v28 = sub_100012DDC(v26, *(void *)(v0 + 400));
  sub_1000D0F7C(v26, v27);
  if (v28)
  {
    sub_1000B8D48(*(void *)(v0 + 304));
LABEL_19:
    sub_1000B8D48(*(void *)(v0 + 312));

    sub_1000F4698(v10, 0);
    sub_1000F4698(v10, 0);
    uint64_t v41 = *(void *)(v0 + 496) + 1;
    if (v41 == *(void *)(v0 + 488)) {
      goto LABEL_2;
    }
    while (1)
    {
      *(void *)(v0 + 496) = v41;
      uint64_t v42 = *(void *)(v0 + 464) + 24 * v41;
      uint64_t v9 = *(void **)(v42 + 32);
      *(void *)(v0 + 504) = v9;
      unint64_t v10 = *(void **)(v42 + 40);
      *(void *)(v0 + 512) = v10;
      if (*(unsigned char *)(v42 + 48)) {
        break;
      }
      uint64_t v43 = *(void *)(v0 + 312);
      sub_1000F468C(v10, 0);
      sub_1000F468C(v10, 0);
      sub_1000F468C(v10, 0);
      id v44 = v9;
      sub_1000CDF78(v10, v43);
      uint64_t v46 = *(void *)(v0 + 304);
      uint64_t v45 = *(void *)(v0 + 312);
      char v47 = sub_100012DDC(v45, *(void *)(v0 + 400));
      sub_1000D0F7C(v45, v46);
      if (v47)
      {
        sub_1000B8D48(*(void *)(v0 + 304));
      }
      else
      {
        uint64_t v48 = *(void *)(v0 + 304);
        char v49 = sub_100012DDC(v48, *(void *)(v0 + 408));
        sub_1000B8D48(v48);
        if (v49) {
          goto LABEL_15;
        }
      }
      sub_1000B8D48(*(void *)(v0 + 312));

      sub_1000F4698(v10, 0);
      sub_1000F4698(v10, 0);
      uint64_t v41 = *(void *)(v0 + 496) + 1;
      if (v41 == *(void *)(v0 + 488)) {
        goto LABEL_2;
      }
    }
LABEL_6:
    unint64_t v11 = v10;
    id v12 = *(void **)(v0 + 472);
    id v14 = *(void **)(v0 + 432);
    uint64_t v13 = *(void **)(v0 + 440);
    uint64_t v15 = *(void **)(v0 + 416);
    uint64_t v55 = *(void **)(v0 + 424);
    *(void *)(v0 + 224) = v11;
    sub_1000F468C(v11, 1);
    sub_1000F468C(v11, 1);
    id v16 = v9;
    sub_100044014(&qword_1003F4B30);
    swift_willThrowTypedImpl();

    swift_bridgeObjectRelease();
    sub_1000F4698(v11, 1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  uint64_t v29 = *(void *)(v0 + 304);
  char v30 = sub_100012DDC(v29, *(void *)(v0 + 408));
  sub_1000B8D48(v29);
  if ((v30 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_15:
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v31 = *(void *)(v0 + 312);
  uint64_t v32 = *(void *)(v0 + 296);
  uint64_t v33 = type metadata accessor for Logger();
  sub_100044058(v33, (uint64_t)qword_10040B688);
  sub_1000D0F7C(v31, v32);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = *(void *)(v0 + 296);
  if (v36)
  {
    id v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)id v38 = 136642819;
    uint64_t v39 = sub_1000CF7B0();
    *(void *)(v0 + 232) = sub_100037004(v39, v40, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B8D48(v37);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Found new CKFence in private db: %{sensitive}s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B8D48(*(void *)(v0 + 296));
  }

  sub_100044014(&qword_1003F4B20);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 520) = inited;
  *(_OWORD *)(inited + 16) = xmmword_10036D5A0;
  *(void *)(inited + 32) = v10;
  uint64_t v56 = inited;
  specialized Array._endMutation()();
  uint64_t v51 = v56;
  *(void *)(v0 + 528) = v56;
  id v52 = v10;
  unint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v53;
  *unint64_t v53 = v0;
  v53[1] = sub_1000ECBEC;
  return sub_1000F4ED4((uint64_t)_swiftEmptyArrayStorage, v51, 0);
}

uint64_t sub_1000ED4E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 560) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 248);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EF0B0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 248);
    uint64_t v4 = sub_1000ED614;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000ED614()
{
  uint64_t v1 = *(void **)(v0 + 552);
  unint64_t v2 = *(void *)(v0 + 208);
  *(void *)(v0 + 568) = v2;

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v0 + 576) = v7;
  uint64_t v8 = *(void *)(v0 + 568);
  if (v7)
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(v3, v4, v5, v6);
      }
      id v9 = *(id *)(v8 + 32);
    }
    uint64_t v15 = v9;
    *(void *)(v0 + 584) = v9;
    *(void *)(v0 + 592) = 1;
    *(void *)(v0 + 600) = [*(id *)(v0 + 424) sharedCloudDatabase];
    id v16 = [v15 zoneID];
    *(void *)(v0 + 608) = v16;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 616) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000ED8D4;
    uint64_t v3 = *(void *)(v0 + 440);
    id v4 = v16;
    uint64_t v5 = 0;
    uint64_t v6 = 10;
    return CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(v3, v4, v5, v6);
  }
  unint64_t v10 = *(void **)(v0 + 440);
  id v12 = *(void **)(v0 + 416);
  unint64_t v11 = *(void **)(v0 + 424);
  id v18 = *(void **)(v0 + 472);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1000ED8D4(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[78] = a1;
  v5[79] = a2;
  v5[80] = v2;
  swift_task_dealloc();
  uint64_t v6 = (void *)v4[76];
  uint64_t v7 = (void *)v4[75];
  if (v2)
  {
    uint64_t v8 = v5[31];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v9 = sub_1000EF1DC;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v11 = v5[31];

    id v9 = sub_1000EDA70;
    uint64_t v10 = v11;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_1000EDA70()
{
  uint64_t v70 = v0;
  uint64_t v2 = *(void *)(v0 + 624);
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 648) = v3;
  if (!v3)
  {
    id v12 = *(void **)(v0 + 584);
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(v0 + 640);
  *(void *)(v0 + 656) = 0;
  uint64_t v5 = *(void **)(v2 + 32);
  *(void *)(v0 + 664) = v5;
  uint64_t v1 = *(void **)(v2 + 40);
  *(void *)(v0 + 672) = v1;
  char v6 = *(unsigned char *)(v2 + 48);
  swift_bridgeObjectRetain();
  if (v6)
  {
LABEL_3:
    uint64_t v7 = *(void **)(v0 + 632);
    uint64_t v8 = *(void **)(v0 + 472);
    id v9 = *(void **)(v0 + 432);
    uint64_t v62 = *(void **)(v0 + 440);
    uint64_t v63 = *(void **)(v0 + 584);
    uint64_t v10 = *(void **)(v0 + 416);
    uint64_t v65 = *(void **)(v0 + 424);
    *(void *)(v0 + 200) = v1;
    sub_1000F468C(v1, 1);
    sub_1000F468C(v1, 1);
    id v11 = v5;
    sub_100044014(&qword_1003F4B30);
    swift_willThrowTypedImpl();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000F4698(v1, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_10;
  }
  uint64_t v20 = *(void *)(v0 + 288);
  sub_1000F468C(v1, 0);
  sub_1000F468C(v1, 0);
  sub_1000F468C(v1, 0);
  id v21 = v5;
  sub_1000CDF78(v1, v20);
  if (v4)
  {
    unint64_t v22 = v1;
    uint64_t v67 = *(void **)(v0 + 472);
    uint64_t v68 = *(void **)(v0 + 632);
    uint64_t v23 = *(void **)(v0 + 440);
    uint64_t v64 = *(void **)(v0 + 432);
    uint64_t v24 = *(void **)(v0 + 424);
    char v66 = *(void **)(v0 + 416);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F4698(v22, 0);

    sub_1000F4698(v22, 0);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v30 = *(void *)(v0 + 280);
  uint64_t v29 = *(void *)(v0 + 288);
  char v31 = sub_100012DDC(v29, *(void *)(v0 + 400));
  sub_1000D0F7C(v29, v30);
  if (v31)
  {
    sub_1000B8D48(*(void *)(v0 + 280));
LABEL_27:
    sub_1000B8D48(*(void *)(v0 + 288));

    sub_1000F4698(v1, 0);
    sub_1000F4698(v1, 0);
    for (uint64_t i = *(void *)(v0 + 656) + 1; i != *(void *)(v0 + 648); uint64_t i = *(void *)(v0 + 656) + 1)
    {
      *(void *)(v0 + 656) = i;
      uint64_t v49 = *(void *)(v0 + 624) + 24 * i;
      uint64_t v5 = *(void **)(v49 + 32);
      *(void *)(v0 + 664) = v5;
      uint64_t v1 = *(void **)(v49 + 40);
      *(void *)(v0 + 672) = v1;
      if (*(unsigned char *)(v49 + 48)) {
        goto LABEL_3;
      }
      uint64_t v50 = *(void *)(v0 + 288);
      sub_1000F468C(v1, 0);
      sub_1000F468C(v1, 0);
      sub_1000F468C(v1, 0);
      id v51 = v5;
      sub_1000CDF78(v1, v50);
      uint64_t v53 = *(void *)(v0 + 280);
      uint64_t v52 = *(void *)(v0 + 288);
      char v54 = sub_100012DDC(v52, *(void *)(v0 + 400));
      sub_1000D0F7C(v52, v53);
      if (v54)
      {
        sub_1000B8D48(*(void *)(v0 + 280));
      }
      else
      {
        uint64_t v55 = *(void *)(v0 + 280);
        char v56 = sub_100012DDC(v55, *(void *)(v0 + 408));
        sub_1000B8D48(v55);
        if (v56) {
          goto LABEL_24;
        }
      }
      sub_1000B8D48(*(void *)(v0 + 288));

      sub_1000F4698(v1, 0);
      sub_1000F4698(v1, 0);
    }
    id v12 = *(void **)(v0 + 584);
    swift_bridgeObjectRelease();
LABEL_5:

    uint64_t v13 = *(void **)(v0 + 632);
    uint64_t v14 = *(void *)(v0 + 592);
    uint64_t v15 = *(void *)(v0 + 576);
    swift_bridgeObjectRelease();

    if (v14 == v15)
    {
      id v16 = *(void **)(v0 + 440);
      id v18 = *(void **)(v0 + 416);
      uint64_t v17 = *(void **)(v0 + 424);
      uint64_t v61 = *(void **)(v0 + 472);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
LABEL_10:
      return v19();
    }
    unint64_t v26 = *(void *)(v0 + 592);
    uint64_t v27 = *(void *)(v0 + 568);
    if ((v27 & 0xC000000000000001) != 0)
    {
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v26 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      id v28 = *(id *)(v27 + 8 * v26 + 32);
    }
    uint64_t v32 = v28;
    *(void *)(v0 + 584) = v28;
    *(void *)(v0 + 592) = v26 + 1;
    if (!__OFADD__(v26, 1))
    {
      *(void *)(v0 + 600) = [*(id *)(v0 + 424) sharedCloudDatabase];
      id v33 = [v32 zoneID];
      *(void *)(v0 + 608) = v33;
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 616) = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_1000ED8D4;
      uint64_t v35 = *(void *)(v0 + 440);
      return CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(v35, v33, 0, 10);
    }
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v36 = *(void *)(v0 + 280);
  char v37 = sub_100012DDC(v36, *(void *)(v0 + 408));
  sub_1000B8D48(v36);
  if ((v37 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (qword_1003EC000 != -1) {
LABEL_42:
  }
    swift_once();
  uint64_t v38 = *(void *)(v0 + 288);
  uint64_t v39 = *(void *)(v0 + 272);
  uint64_t v40 = type metadata accessor for Logger();
  sub_100044058(v40, (uint64_t)qword_10040B688);
  sub_1000D0F7C(v38, v39);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v44 = *(void *)(v0 + 272);
  if (v43)
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 136642819;
    uint64_t v46 = sub_1000CF7B0();
    *(void *)(v0 + 216) = sub_100037004(v46, v47, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B8D48(v44);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Found new CKFence in shared db: %{sensitive}s", v45, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B8D48(*(void *)(v0 + 272));
  }

  sub_100044014(&qword_1003F4B20);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 680) = inited;
  *(_OWORD *)(inited + 16) = xmmword_10036D5A0;
  *(void *)(inited + 32) = v1;
  uint64_t v69 = inited;
  specialized Array._endMutation()();
  uint64_t v58 = v69;
  *(void *)(v0 + 688) = v69;
  id v59 = v1;
  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 696) = v60;
  *uint64_t v60 = v0;
  v60[1] = sub_1000EE378;
  return sub_1000F4ED4((uint64_t)_swiftEmptyArrayStorage, v58, 0);
}

uint64_t sub_1000EE378()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EF300;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EE50C;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000EE50C()
{
  uint64_t v72 = v0;
  uint64_t v2 = *(void **)(v0 + 672);
  uint64_t v3 = *(void **)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 288);
  sub_1000F4698(v2, 0);

  sub_1000F4698(v2, 0);
  sub_1000B8D48(v4);
  uint64_t v5 = *(void *)(v0 + 656) + 1;
  if (v5 == *(void *)(v0 + 648))
  {
LABEL_2:
    uint64_t v6 = *(void **)(v0 + 584);
    swift_bridgeObjectRelease();

    uint64_t v7 = *(void **)(v0 + 632);
    uint64_t v8 = *(void *)(v0 + 592);
    uint64_t v9 = *(void *)(v0 + 576);
    swift_bridgeObjectRelease();

    if (v8 == v9)
    {
      uint64_t v10 = *(void **)(v0 + 440);
      id v12 = *(void **)(v0 + 416);
      id v11 = *(void **)(v0 + 424);
      uint64_t v63 = *(void **)(v0 + 472);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
      return v13();
    }
    unint64_t v22 = *(void *)(v0 + 592);
    uint64_t v23 = *(void *)(v0 + 568);
    if ((v23 & 0xC000000000000001) != 0)
    {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v22 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      id v24 = *(id *)(v23 + 8 * v22 + 32);
    }
    char v31 = v24;
    *(void *)(v0 + 584) = v24;
    *(void *)(v0 + 592) = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      *(void *)(v0 + 600) = [*(id *)(v0 + 424) sharedCloudDatabase];
      id v32 = [v31 zoneID];
      *(void *)(v0 + 608) = v32;
      id v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 616) = v33;
      *id v33 = v0;
      v33[1] = sub_1000ED8D4;
      uint64_t v34 = *(void *)(v0 + 440);
      return CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(v34, v32, 0, 10);
    }
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)(v0 + 704);
  *(void *)(v0 + 656) = v5;
  uint64_t v15 = *(void *)(v0 + 624) + 24 * v5;
  id v16 = *(void **)(v15 + 32);
  *(void *)(v0 + 664) = v16;
  uint64_t v1 = *(void **)(v15 + 40);
  *(void *)(v0 + 672) = v1;
  if (*(unsigned char *)(v15 + 48)) {
    goto LABEL_5;
  }
  uint64_t v25 = *(void *)(v0 + 288);
  sub_1000F468C(v1, 0);
  sub_1000F468C(v1, 0);
  sub_1000F468C(v1, 0);
  id v26 = v16;
  sub_1000CDF78(v1, v25);
  if (v14)
  {
    uint64_t v27 = v1;
    uint64_t v69 = *(void **)(v0 + 472);
    uint64_t v70 = *(void **)(v0 + 632);
    id v28 = *(void **)(v0 + 440);
    char v66 = *(void **)(v0 + 432);
    uint64_t v29 = *(void **)(v0 + 424);
    uint64_t v68 = *(void **)(v0 + 416);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F4698(v27, 0);

    sub_1000F4698(v27, 0);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v36 = *(void *)(v0 + 280);
  uint64_t v35 = *(void *)(v0 + 288);
  char v37 = sub_100012DDC(v35, *(void *)(v0 + 400));
  sub_1000D0F7C(v35, v36);
  if (v37)
  {
    sub_1000B8D48(*(void *)(v0 + 280));
LABEL_26:
    sub_1000B8D48(*(void *)(v0 + 288));

    sub_1000F4698(v1, 0);
    sub_1000F4698(v1, 0);
    uint64_t v50 = *(void *)(v0 + 656) + 1;
    if (v50 == *(void *)(v0 + 648)) {
      goto LABEL_2;
    }
    while (1)
    {
      *(void *)(v0 + 656) = v50;
      uint64_t v51 = *(void *)(v0 + 624) + 24 * v50;
      id v16 = *(void **)(v51 + 32);
      *(void *)(v0 + 664) = v16;
      uint64_t v1 = *(void **)(v51 + 40);
      *(void *)(v0 + 672) = v1;
      if (*(unsigned char *)(v51 + 48)) {
        break;
      }
      uint64_t v52 = *(void *)(v0 + 288);
      sub_1000F468C(v1, 0);
      sub_1000F468C(v1, 0);
      sub_1000F468C(v1, 0);
      id v53 = v16;
      sub_1000CDF78(v1, v52);
      uint64_t v55 = *(void *)(v0 + 280);
      uint64_t v54 = *(void *)(v0 + 288);
      char v56 = sub_100012DDC(v54, *(void *)(v0 + 400));
      sub_1000D0F7C(v54, v55);
      if (v56)
      {
        sub_1000B8D48(*(void *)(v0 + 280));
      }
      else
      {
        uint64_t v57 = *(void *)(v0 + 280);
        char v58 = sub_100012DDC(v57, *(void *)(v0 + 408));
        sub_1000B8D48(v57);
        if (v58) {
          goto LABEL_23;
        }
      }
      sub_1000B8D48(*(void *)(v0 + 288));

      sub_1000F4698(v1, 0);
      sub_1000F4698(v1, 0);
      uint64_t v50 = *(void *)(v0 + 656) + 1;
      if (v50 == *(void *)(v0 + 648)) {
        goto LABEL_2;
      }
    }
LABEL_5:
    uint64_t v17 = *(void **)(v0 + 632);
    id v18 = *(void **)(v0 + 472);
    uint64_t v19 = *(void **)(v0 + 432);
    uint64_t v64 = *(void **)(v0 + 440);
    uint64_t v65 = *(void **)(v0 + 584);
    uint64_t v20 = *(void **)(v0 + 416);
    uint64_t v67 = *(void **)(v0 + 424);
    *(void *)(v0 + 200) = v1;
    sub_1000F468C(v1, 1);
    sub_1000F468C(v1, 1);
    id v21 = v16;
    sub_100044014(&qword_1003F4B30);
    swift_willThrowTypedImpl();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000F4698(v1, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  uint64_t v38 = *(void *)(v0 + 280);
  char v39 = sub_100012DDC(v38, *(void *)(v0 + 408));
  sub_1000B8D48(v38);
  if ((v39 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (qword_1003EC000 != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t v40 = *(void *)(v0 + 288);
  uint64_t v41 = *(void *)(v0 + 272);
  uint64_t v42 = type metadata accessor for Logger();
  sub_100044058(v42, (uint64_t)qword_10040B688);
  sub_1000D0F7C(v40, v41);
  BOOL v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v46 = *(void *)(v0 + 272);
  if (v45)
  {
    unint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    *(_DWORD *)unint64_t v47 = 136642819;
    uint64_t v48 = sub_1000CF7B0();
    *(void *)(v0 + 216) = sub_100037004(v48, v49, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B8D48(v46);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Found new CKFence in shared db: %{sensitive}s", v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B8D48(*(void *)(v0 + 272));
  }

  sub_100044014(&qword_1003F4B20);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 680) = inited;
  *(_OWORD *)(inited + 16) = xmmword_10036D5A0;
  *(void *)(inited + 32) = v1;
  uint64_t v71 = inited;
  specialized Array._endMutation()();
  uint64_t v60 = v71;
  *(void *)(v0 + 688) = v71;
  id v61 = v1;
  uint64_t v62 = (void *)swift_task_alloc();
  *(void *)(v0 + 696) = v62;
  *uint64_t v62 = v0;
  v62[1] = sub_1000EE378;
  return sub_1000F4ED4((uint64_t)_swiftEmptyArrayStorage, v60, 0);
}

uint64_t sub_1000EEE40()
{
  uint64_t v1 = *(void **)(v0 + 440);
  uint64_t v3 = *(void **)(v0 + 424);
  uint64_t v2 = *(void **)(v0 + 432);
  uint64_t v4 = *(void **)(v0 + 416);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000EEF68()
{
  uint64_t v2 = *(void **)(v0 + 504);
  uint64_t v1 = *(void **)(v0 + 512);
  uint64_t v3 = *(void **)(v0 + 472);
  uint64_t v4 = *(void **)(v0 + 432);
  uint64_t v6 = *(void **)(v0 + 416);
  uint64_t v5 = *(void **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 312);

  sub_1000F4698(v1, 0);
  sub_1000F4698(v1, 0);
  swift_bridgeObjectRelease();

  sub_1000B8D48(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000EF0B0()
{
  uint64_t v1 = (void *)v0[69];
  uint64_t v2 = (void *)v0[59];
  uint64_t v4 = (void *)v0[54];
  uint64_t v3 = (void *)v0[55];
  uint64_t v6 = (void *)v0[52];
  uint64_t v5 = (void *)v0[53];
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000EF1DC()
{
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v2 = *(void **)(v0 + 472);
  uint64_t v4 = *(void **)(v0 + 432);
  uint64_t v3 = *(void **)(v0 + 440);
  uint64_t v5 = *(void **)(v0 + 424);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000EF300()
{
  uint64_t v1 = *(void **)(v0 + 672);
  uint64_t v2 = *(void **)(v0 + 664);
  uint64_t v10 = *(void **)(v0 + 632);
  id v11 = *(void **)(v0 + 472);
  uint64_t v4 = *(void **)(v0 + 432);
  uint64_t v3 = *(void **)(v0 + 440);
  uint64_t v6 = *(void **)(v0 + 416);
  uint64_t v5 = *(void **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 288);

  sub_1000F4698(v1, 0);
  sub_1000F4698(v1, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1000B8D48(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000EF474(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_10005A548(0, &qword_1003EF4A8);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000EF550()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000EF570, v0, 0);
}

uint64_t sub_1000EF570()
{
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable()
                         + async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EF618;
  return v3();
}

uint64_t sub_1000EF618(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(unsigned char *)(*(void *)v1 + 36) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EF730, v2, 0);
}

uint64_t sub_1000EF730()
{
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B688);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 36);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67240192;
    *(_DWORD *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Current isManateeAvailable: %{BOOL,public}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 36);
  return v6(v7);
}

uint64_t sub_1000EF888()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudStorageService()
{
  return self;
}

uint64_t sub_1000EF8F4(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  *int v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_1000EF99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CloudStorageService();
  void *v8 = v4;
  v8[1] = sub_10004A274;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_1000EFA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1000EFB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_1000EFBB0()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000EFC44;
  return daemon.getter();
}

uint64_t sub_1000EFC44(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 32) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t UnlockService = type metadata accessor for FirstUnlockService();
  uint64_t v6 = sub_1000F46A4(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000F46A4(&qword_1003EF448, 255, (void (*)(uint64_t))&type metadata accessor for FirstUnlockService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1000EFE28;
  return ActorServiceDaemon.getService<A>()(v4, UnlockService, v6, v7);
}

uint64_t sub_1000EFE28(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[6] = a1;
  v3[7] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[2];
    return _swift_task_switch(sub_1000F02B0, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                           + async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock());
    uint64_t v6 = (void *)swift_task_alloc();
    v3[8] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1000EFFCC;
    return v8();
  }
}

uint64_t sub_1000EFFCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F00DC, v1, 0);
}

uint64_t sub_1000F00DC()
{
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.startup()
                         + async function pointer to dispatch thunk of CloudKitStorage.startup());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F0184;
  return v3();
}

uint64_t sub_1000F0184()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = sub_1000F0378;
  }
  else {
    uint64_t v4 = sub_1000F0314;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F02B0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F0314()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F0378()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F03DC()
{
  type metadata accessor for CloudStorageService();
  sub_1000F46A4(&qword_1003EF450, v0, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_1000F0444(uint64_t a1, uint64_t a2)
{
  return sub_1000F46A4(&qword_1003EF400, a2, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
}

uint64_t sub_1000F048C(uint64_t a1, uint64_t a2)
{
  return sub_1000F46A4(qword_1003EF408, a2, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
}

uint64_t sub_1000F04D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for CloudKitCoordinator.Database();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v4[9] = swift_task_alloc();
  sub_100044014(&qword_1003EE290);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000F05F8, 0, 0);
}

uint64_t sub_1000F05F8()
{
  v0[11] = *(void *)(v0[5] + 136);
  v0[12] = sub_10005A548(0, (unint64_t *)&qword_1003EE978);
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v0[13] = CKCurrentUserDefaultName;
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2._object = v3;
  v4._countAndFlagsBits = 0x2D65636E6546;
  v4._object = (void *)0xE600000000000000;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v4, v2).super.isa;
  id v6 = [(objc_class *)isa zoneName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v0[14] = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:));
  uint64_t v10 = (void *)swift_task_alloc();
  v0[15] = v10;
  void *v10 = v0;
  v10[1] = sub_1000F0778;
  return v12(v7, v9);
}

uint64_t sub_1000F0778()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    Swift::String v2 = sub_1000F2144;
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::String v2 = sub_1000F0894;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F0894()
{
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2._object = v3;
  v4._countAndFlagsBits = 0x2D65636E6546;
  v4._object = (void *)0xE600000000000000;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v4, v2).super.isa;
  id v6 = [(objc_class *)isa zoneName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 136) = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.isShared(zoneName:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.isShared(zoneName:));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  void *v10 = v0;
  v10[1] = sub_1000F09E0;
  return v12(v7, v9);
}

uint64_t sub_1000F09E0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000F21CC;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 352) = a1 & 1;
    uint64_t v5 = sub_1000F0B14;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F0B14()
{
  if (*(unsigned char *)(v0 + 352))
  {
    char v1 = Handle.isPhoneNumber.getter();
    uint64_t v2 = Handle.identifier.getter();
    uint64_t v4 = v3;
    *(void *)(v0 + 184) = v3;
    if (v1)
    {
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forPhoneNumber:)
                                                     + async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forPhoneNumber:));
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v5;
      *uint64_t v5 = v0;
      id v6 = sub_1000F0F80;
    }
    else
    {
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forEmailAddress:)
                                                     + async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forEmailAddress:));
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v5;
      *uint64_t v5 = v0;
      id v6 = sub_1000F10B0;
    }
    v5[1] = v6;
    uint64_t v17 = v2;
    uint64_t v18 = v4;
  }
  else
  {
    v7._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8._object = v9;
    v10._countAndFlagsBits = 0x2D65636E6546;
    v10._object = (void *)0xE600000000000000;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v10, v8).super.isa;
    id v12 = [(objc_class *)isa zoneName];

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    *(void *)(v0 + 160) = v15;
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.share(zoneName:)
                                                   + async function pointer to dispatch thunk of CloudKitStorage.share(zoneName:));
    id v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v16;
    void *v16 = v0;
    v16[1] = sub_1000F0D3C;
    uint64_t v17 = v13;
    uint64_t v18 = v15;
  }
  return v20(v17, v18);
}

uint64_t sub_1000F0D3C()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F2254;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000F0E58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F0E58()
{
  char v1 = Handle.isPhoneNumber.getter();
  uint64_t v2 = Handle.identifier.getter();
  uint64_t v4 = v3;
  v0[23] = v3;
  if (v1)
  {
    Swift::String v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forPhoneNumber:)
                                                  + async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forPhoneNumber:));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[24] = v5;
    *uint64_t v5 = v0;
    id v6 = sub_1000F0F80;
  }
  else
  {
    Swift::String v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forEmailAddress:)
                                                  + async function pointer to dispatch thunk of CloudKitStorage.shareParticipant(forEmailAddress:));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[26] = v5;
    *uint64_t v5 = v0;
    id v6 = sub_1000F10B0;
  }
  v5[1] = v6;
  return v8(v2, v4);
}

uint64_t sub_1000F0F80(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000F11E0;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 224) = a1;
    uint64_t v5 = sub_1000F1268;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F10B0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000F14E4;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 224) = a1;
    uint64_t v5 = sub_1000F1268;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F11E0()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F1268()
{
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2._object = v3;
  v4._countAndFlagsBits = 0x2D65636E6546;
  v4._object = (void *)0xE600000000000000;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v4, v2).super.isa;
  id v6 = [(objc_class *)isa zoneName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 232) = v9;
  id v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.shareParticipants(zoneName:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.shareParticipants(zoneName:));
  Swift::String v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v10;
  void *v10 = v0;
  v10[1] = sub_1000F13B4;
  return v12(v7, v9);
}

uint64_t sub_1000F13B4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000F22DC;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 256) = a1;
    uint64_t v5 = sub_1000F156C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F14E4()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F156C()
{
  char v1 = sub_1000EA680(v0[28], v0[32]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    Swift::String v2 = (void *)v0[28];
    sub_1000F4638();
    swift_allocError();
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[33] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000F16B4;
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[3];
    return sub_1000F62B0(v6, v7);
  }
}

uint64_t sub_1000F16B4()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v2 = sub_1000F1A38;
  }
  else {
    Swift::String v2 = sub_1000F17C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F17C8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = type metadata accessor for FenceRecord();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10000A520(v1, &qword_1003EE290);
  if (v3 == 1)
  {
    uint64_t v4 = v0[3];
    uint64_t v5 = swift_task_alloc();
    v0[35] = v5;
    *(void *)(v5 + 16) = v4;
    uint64_t v21 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                           + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[36] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000F1AC0;
    uint64_t v7 = v0[9];
    return v21(v7, &unk_1003EF478, v5);
  }
  else
  {
    v9._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10._object = v11;
    v12._countAndFlagsBits = 0x2D65636E6546;
    v12._object = (void *)0xE600000000000000;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v12, v10).super.isa;
    id v14 = [(objc_class *)isa zoneName];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    v0[40] = v17;
    unint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.add(shareParticipant:zoneName:)
                                                                     + async function pointer to dispatch thunk of CloudKitStorage.add(shareParticipant:zoneName:));
    uint64_t v18 = (void *)swift_task_alloc();
    v0[41] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1000F1F84;
    uint64_t v19 = v0[28];
    uint64_t v20 = v0[2];
    return v22(v20, v19, v15, v17);
  }
}

uint64_t sub_1000F1A38()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F1AC0()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F2368;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000F1BDC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F1BDC()
{
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for CloudKitCoordinator.Database.private(_:), v0[6]);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[38] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F1CAC;
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  return v5(v3, v2);
}

uint64_t sub_1000F1CAC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  uint64_t v4 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1000F23FC;
  }
  else {
    uint64_t v5 = sub_1000F1E1C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F1E1C()
{
  sub_10000A520(v0[9], &qword_1003EF468);
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2._object = v3;
  v4._countAndFlagsBits = 0x2D65636E6546;
  v4._object = (void *)0xE600000000000000;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v4, v2).super.isa;
  id v6 = [(objc_class *)isa zoneName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v0[40] = v9;
  id v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.add(shareParticipant:zoneName:)
                                                                   + async function pointer to dispatch thunk of CloudKitStorage.add(shareParticipant:zoneName:));
  Swift::String v10 = (void *)swift_task_alloc();
  v0[41] = v10;
  void *v10 = v0;
  v10[1] = sub_1000F1F84;
  uint64_t v11 = v0[28];
  uint64_t v12 = v0[2];
  return v14(v12, v11, v7, v9);
}

uint64_t sub_1000F1F84(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 336) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000F2498;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 344) = a1;
    uint64_t v5 = sub_1000F20B4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F20B4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 344);
  return v1(v2);
}

uint64_t sub_1000F2144()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F21CC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F2254()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F22DC()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F2368()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F23FC()
{
  uint64_t v1 = *(void *)(v0 + 72);

  sub_10000A520(v1, &qword_1003EF468);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F2498()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F2528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FenceRecord();
  uint64_t v6 = sub_1000F46A4(&qword_1003EF488, 255, (void (*)(uint64_t))type metadata accessor for FenceRecord);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return CloudKitChangeSet.Adaptor.create<A>(record:)(a2, v5, v6);
}

uint64_t sub_1000F2620(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000F26E4, 0, 0);
}

uint64_t sub_1000F26E4()
{
  uint64_t v21 = v0;
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  uint64_t v11 = v0[8];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[2] = sub_100037004(0xD000000000000022, 0x8000000100375680, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_1000F46A4((unint64_t *)&qword_1003EF0A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s with url: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[10], v0[8]);
  }

  v0[11] = *(void *)(v0[7] + 136);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.shareMetadata(for:token:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.shareMetadata(for:token:));
  uint64_t v15 = (void *)swift_task_alloc();
  v0[12] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000F2A14;
  uint64_t v17 = v0[5];
  uint64_t v16 = v0[6];
  return v19(v17, v16);
}

uint64_t sub_1000F2A14(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 104) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.accept(metadata:)
                                         + async function pointer to dispatch thunk of CloudKitStorage.accept(metadata:));
    BOOL v8 = (void *)swift_task_alloc();
    *(void *)(v4 + 112) = v8;
    void *v8 = v5;
    v8[1] = sub_1000F2BB4;
    return v9(a1);
  }
}

uint64_t sub_1000F2BB4()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F2D38;
  }
  else {
    uint64_t v2 = sub_1000F2CC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F2CC8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F2D38()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F2DA4(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1000F2DC4, v1, 0);
}

uint64_t sub_1000F2DC4()
{
  uint64_t v22 = v0;
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[5] = sub_100044058(v1, (uint64_t)qword_10040B688);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[2] = sub_100037004(v5, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Purging zones: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)v0[3];
  uint64_t v8 = v0[4];
  uint64_t v10 = v9[2];
  v0[6] = v10;
  if (v10)
  {
    v0[7] = *(void *)(v8 + 136);
    v0[8] = 0;
    uint64_t v11 = v9[4];
    v0[9] = v11;
    unint64_t v12 = v9[5];
    v0[10] = v12;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v15 + 4) = sub_100037004(v11, v12, &v21);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Deleting zone %s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v20 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    uint64_t v18 = (void *)swift_task_alloc();
    v0[11] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1000F31E0;
    return v20(v11, v12);
  }
  else
  {
    uint64_t v19 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    uint64_t v16 = (void *)swift_task_alloc();
    v0[15] = v16;
    void *v16 = v0;
    v16[1] = sub_1000F3878;
    return v19();
  }
}

uint64_t sub_1000F31E0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_1000F396C;
  }
  else {
    uint64_t v4 = sub_1000F330C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F330C()
{
  uint64_t v13 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[10];
  if (v3)
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v6 + 4) = sub_100037004(v5, v4, &v12);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Recreating zone: %s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:));
  unint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_1000F34D0;
  uint64_t v9 = v0[9];
  uint64_t v8 = v0[10];
  return v11(v9, v8);
}

uint64_t sub_1000F34D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    unint64_t v4 = sub_1000F3D94;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 32);
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_1000F35F8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F35F8()
{
  uint64_t v14 = v0;
  uint64_t v1 = v0[8] + 1;
  if (v1 == v0[6])
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    uint64_t v2 = (void *)swift_task_alloc();
    v0[15] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000F3878;
    return v11();
  }
  else
  {
    v0[8] = v1;
    uint64_t v4 = v0[3] + 16 * v1;
    uint64_t v5 = *(void *)(v4 + 32);
    v0[9] = v5;
    unint64_t v6 = *(void *)(v4 + 40);
    v0[10] = v6;
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v9 + 4) = sub_100037004(v5, v6, &v13);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting zone %s", (uint8_t *)v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v12 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    uint64_t v10 = (void *)swift_task_alloc();
    v0[11] = v10;
    void *v10 = v0;
    v10[1] = sub_1000F31E0;
    return v12(v5, v6);
  }
}

uint64_t sub_1000F3878()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000F396C()
{
  uint64_t v22 = v0;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[10];
  if (v3)
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v6 + 4) = sub_100037004(v5, v4, &v21);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2114;
    uint64_t v8 = _convertErrorToNSError(_:)();
    *(void *)(v6 + 14) = v8;
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error purging zone %{public}s: %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = v0[8] + 1;
  if (v9 == v0[6])
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    uint64_t v10 = (void *)swift_task_alloc();
    v0[15] = v10;
    void *v10 = v0;
    v10[1] = sub_1000F3878;
    return v19();
  }
  else
  {
    v0[8] = v9;
    uint64_t v12 = v0[3] + 16 * v9;
    uint64_t v13 = *(void *)(v12 + 32);
    v0[9] = v13;
    unint64_t v14 = *(void *)(v12 + 40);
    v0[10] = v14;
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v17 + 4) = sub_100037004(v13, v14, &v21);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Deleting zone %s", (uint8_t *)v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v20 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    uint64_t v18 = (void *)swift_task_alloc();
    v0[11] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1000F31E0;
    return v20(v13, v14);
  }
}

uint64_t sub_1000F3D94()
{
  uint64_t v22 = v0;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[10];
  if (v3)
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v6 + 4) = sub_100037004(v5, v4, &v21);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2114;
    uint64_t v8 = _convertErrorToNSError(_:)();
    *(void *)(v6 + 14) = v8;
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error purging zone %{public}s: %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = v0[8] + 1;
  if (v9 == v0[6])
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    uint64_t v10 = (void *)swift_task_alloc();
    v0[15] = v10;
    void *v10 = v0;
    v10[1] = sub_1000F3878;
    return v19();
  }
  else
  {
    v0[8] = v9;
    uint64_t v12 = v0[3] + 16 * v9;
    uint64_t v13 = *(void *)(v12 + 32);
    v0[9] = v13;
    unint64_t v14 = *(void *)(v12 + 40);
    v0[10] = v14;
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v17 + 4) = sub_100037004(v13, v14, &v21);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Deleting zone %s", (uint8_t *)v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v20 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    uint64_t v18 = (void *)swift_task_alloc();
    v0[11] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1000F31E0;
    return v20(v13, v14);
  }
}

uint64_t sub_1000F41BC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_1000F41E0, v2, 0);
}

uint64_t sub_1000F41E0()
{
  unint64_t v14 = v0;
  if (qword_1003EC000 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B688);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100037004(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Creating CloudKit zone: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
                                                 + async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[6] = v8;
  void *v8 = v0;
  v8[1] = sub_1000F4428;
  uint64_t v10 = v0[3];
  uint64_t v9 = v0[4];
  return v12(v10, v9);
}

uint64_t sub_1000F4428()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000F451C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B6A0);
  sub_100044058(v0, (uint64_t)qword_10040B6A0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000F459C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_100018CD0;
  return sub_1000F2528(a1, v4);
}

unint64_t sub_1000F4638()
{
  unint64_t result = qword_1003EF480;
  if (!qword_1003EF480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF480);
  }
  return result;
}

id sub_1000F468C(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_1000F4698(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_1000F46A4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CloudStorageService.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000F4788);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageService.Error()
{
  return &type metadata for CloudStorageService.Error;
}

unint64_t sub_1000F47C4()
{
  unint64_t result = qword_1003EF4D0;
  if (!qword_1003EF4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF4D0);
  }
  return result;
}

unint64_t sub_1000F481C(uint64_t a1)
{
  uint64_t v60 = sub_100044014(&qword_1003EF7E0);
  uint64_t v3 = __chkstk_darwin(v60);
  uint64_t v55 = (void **)((char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v54 = (void *)((char *)v44 - v6);
  __chkstk_darwin(v5);
  id v53 = (char *)v44 - v7;
  uint64_t v52 = type metadata accessor for CloudKitCoordinator.Deletion();
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (!v11) {
    return (unint64_t)v12;
  }
  v44[1] = v1;
  id v61 = _swiftEmptyArrayStorage;
  sub_100245E48(0, v11, 0);
  unint64_t result = sub_1000FF0C0(a1);
  uint64_t v15 = 0;
  uint64_t v16 = a1 + 64;
  uint64_t v48 = v8 + 32;
  unint64_t v49 = v10;
  uint64_t v56 = a1 + 80;
  uint64_t v50 = v8;
  uint64_t v51 = a1;
  int64_t v45 = v11;
  uint64_t v46 = v14;
  uint64_t v47 = a1 + 64;
  uint64_t v17 = v53;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v20 = result >> 6;
    if ((*(void *)(v16 + 8 * (result >> 6)) & (1 << result)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_26;
    }
    uint64_t v57 = v15;
    uint64_t v58 = 1 << result;
    uint64_t v21 = (char *)v17 + *(int *)(v60 + 48);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void **)(*(void *)(a1 + 48) + 8 * result);
    unint64_t v24 = result;
    uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
    uint64_t v28 = *(void *)(v26 + 72);
    int64_t v59 = v24;
    v27(v21, v22 + v28 * v24, v25);
    *uint64_t v17 = v23;
    uint64_t v29 = (uint64_t)v54;
    *uint64_t v54 = v23;
    v27((char *)(v29 + *(int *)(v60 + 48)), (unint64_t)v21, v25);
    uint64_t v30 = v55;
    sub_100013B50(v29, (uint64_t)v55, &qword_1003EF7E0);
    id v31 = v23;
    id v32 = v49;
    id v33 = v31;
    sub_10000A520((uint64_t)v17, &qword_1003EF7E0);
    uint64_t v34 = *v30;
    CloudKitChangeSet.TombstoneInfo.recordType.getter();
    id v35 = v34;
    CloudKitCoordinator.Deletion.init(recordType:recordID:)();
    sub_10000A520((uint64_t)v30, &qword_1003EF7E0);
    uint64_t v12 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100245E48(0, v12[2] + 1, 1);
      uint64_t v12 = v61;
    }
    uint64_t v36 = v50;
    a1 = v51;
    unint64_t v38 = v12[2];
    unint64_t v37 = v12[3];
    if (v38 >= v37 >> 1)
    {
      sub_100245E48(v37 > 1, v38 + 1, 1);
      uint64_t v12 = v61;
    }
    void v12[2] = v38 + 1;
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v38, v32, v52);
    id v61 = v12;
    int64_t v18 = 1 << *(unsigned char *)(a1 + 32);
    if (v59 >= v18) {
      goto LABEL_27;
    }
    uint64_t v16 = v47;
    uint64_t v39 = *(void *)(v47 + 8 * v20);
    if ((v39 & v58) == 0) {
      goto LABEL_28;
    }
    LODWORD(v14) = v46;
    if (*(_DWORD *)(a1 + 36) != v46) {
      goto LABEL_29;
    }
    unint64_t v40 = v39 & (-2 << (v59 & 0x3F));
    if (v40)
    {
      int64_t v18 = __clz(__rbit64(v40)) | v59 & 0xFFFFFFFFFFFFFFC0;
      int64_t v19 = v45;
    }
    else
    {
      unint64_t v41 = v20 + 1;
      unint64_t v42 = (unint64_t)(v18 + 63) >> 6;
      int64_t v19 = v45;
      if (v20 + 1 < v42)
      {
        unint64_t v43 = *(void *)(v47 + 8 * v41);
        if (v43)
        {
LABEL_22:
          int64_t v18 = __clz(__rbit64(v43)) + (v41 << 6);
        }
        else
        {
          while (v42 - 2 != v20)
          {
            unint64_t v43 = *(void *)(v56 + 8 * v20++);
            if (v43)
            {
              unint64_t v41 = v20 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v15 = v57 + 1;
    unint64_t result = v18;
    if (v57 + 1 == v19) {
      return (unint64_t)v12;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *sub_1000F4C9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t result = (void *)sub_1000FF0C0(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    uint64_t v19 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v11 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_25;
      }
      uint64_t v12 = *(void *)(a1 + 56) + 16 * v4;
      uint64_t v13 = *(void **)v12;
      if (*(unsigned char *)(v12 + 8))
      {
        sub_1000F468C(v13, 1);
        sub_100044014(&qword_1003F4B30);
        swift_willThrowTypedImpl();
        return (void *)swift_release();
      }
      uint64_t v20 = v7;
      sub_1000F468C(v13, 0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_26;
      }
      uint64_t v14 = *(void *)(v8 + 8 * v11);
      if ((v14 & (1 << v4)) == 0) {
        goto LABEL_27;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_28;
      }
      unint64_t v15 = v14 & (-2 << (v4 & 0x3F));
      if (v15)
      {
        int64_t v9 = __clz(__rbit64(v15)) | v4 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v10 = v19;
      }
      else
      {
        unint64_t v16 = v11 + 1;
        unint64_t v17 = (unint64_t)(v9 + 63) >> 6;
        uint64_t v10 = v19;
        if (v11 + 1 < v17)
        {
          unint64_t v18 = *(void *)(v8 + 8 * v16);
          if (v18)
          {
LABEL_19:
            int64_t v9 = __clz(__rbit64(v18)) + (v16 << 6);
          }
          else
          {
            while (v17 - 2 != v11)
            {
              unint64_t v18 = *(void *)(a1 + 80 + 8 * v11++);
              if (v18)
              {
                unint64_t v16 = v11 + 1;
                goto LABEL_19;
              }
            }
          }
        }
      }
      uint64_t v7 = v20 + 1;
      uint64_t v4 = v9;
      if (v20 + 1 == v10) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F4ED4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 136) = a3;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 40) = *v3;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v4 + 48) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CloudKitCoordinator.Deletion();
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = *(void *)(v5 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  sub_100044014(&qword_1003EF728);
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v4 + 96) = v6;
  *(void *)(v4 + 104) = *(void *)(v6 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1000F5090, v3, 0);
}

uint64_t sub_1000F5090()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_1000F50B4, v1, 0);
}

uint64_t sub_1000F50B4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  *(void *)(v0 + 128) = Database.writeConnection.getter();
  return _swift_task_switch(sub_1000F5174, v1, 0);
}

uint64_t sub_1000F5174()
{
  uint64_t v66 = v0;
  if (!*(void *)(v0 + 128))
  {
    uint64_t v10 = type metadata accessor for DatabaseError();
    sub_1000FEFF0(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, enum case for DatabaseError.notConnected(_:), v10);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_76;
  }
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v59 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  LODWORD(v7) = v6;
  int8x16_t v8 = *(int8x16_t *)(v0 + 24);
  v6[1].i64[0] = v5;
  v6[1].i64[1] = v59;
  _OWORD v6[2] = vextq_s8(v8, v8, 8uLL);
  v6[3].i64[0] = v4;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  Connection.savepoint(_:block:)();
  unint64_t v9 = 0;
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v60 = v13;
  unint64_t v15 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  unint64_t v16 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  uint64_t v63 = (void (**)(uint64_t, void, uint64_t))(v13 + 32);
  uint64_t v62 = (void (**)(uint64_t, uint64_t))(v13 + 8);
  unint64_t v17 = *(void *)(v14 + 16);
  swift_bridgeObjectRetain_n();
  unint64_t v61 = v17;
  while (1)
  {
    if (v9 == v17)
    {
      uint64_t v18 = 1;
      unint64_t v9 = v17;
    }
    else
    {
      if (v9 >= v17)
      {
        __break(1u);
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        __break(1u);
        __break(1u);
        goto LABEL_68;
      }
      (*(void (**)(void, unint64_t, void))(v60 + 16))(*(void *)(v0 + 88), *(void *)(v0 + 16)+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v9, *(void *)(v0 + 56));
      uint64_t v18 = 0;
      ++v9;
    }
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 56);
    (*v15)(v20, v18, 1, v7);
    sub_100013B50(v20, v19, &qword_1003EF728);
    LODWORD(v7) = (*v16)(v19, 1, v7);
    if (v7 == 1) {
      break;
    }
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v22 = *(void *)(v0 + 56);
    (*v63)(v21, *(void *)(v0 + 80), v22);
    uint64_t v23 = CloudKitCoordinator.Deletion.recordType.getter();
    uint64_t v25 = v24;
    (*v62)(v21, v22);
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = v23;
    v26._object = v25;
    Swift::Int v27 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, v26);
    swift_bridgeObjectRelease();
    if (v27 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14)
      {
        swift_bridgeObjectRelease();
LABEL_26:
        uint64_t v14 = *(void *)(v0 + 24);
        swift_bridgeObjectRelease();
        if ((v14 & 0x8000000000000000) == 0) {
          goto LABEL_27;
        }
LABEL_68:
        if (*(uint64_t *)(v0 + 24) < 0) {
          uint64_t v14 = *(void *)(v0 + 24);
        }
        else {
          v14 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        if (v30) {
          goto LABEL_29;
        }
LABEL_72:
        char v54 = *(unsigned char *)(v0 + 136);
        swift_bridgeObjectRelease_n();
        if v7 != 1 && (v54) {
          goto LABEL_74;
        }
        goto LABEL_75;
      }
    }
    else
    {
      if (!v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_26;
      }
      uint64_t v14 = 1;
      unint64_t v17 = v61;
      if (*(void *)"cloudkit.share" == v23 && *(void **)".share" == v25
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_arrayDestroy();
        if (qword_1003EC010 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        sub_100044058(v28, (uint64_t)qword_10040B6B8);
        swift_bridgeObjectRetain_n();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v14, v29))
        {
          uint64_t v7 = swift_slowAlloc();
          v65[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)(v7 + 4) = sub_100037004(v23, (unint64_t)v25, v65);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v29, "Unable to find table for %{public}s", (uint8_t *)v7, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
        unint64_t v17 = v61;
      }
    }
  }
  uint64_t v14 = *(void *)(v0 + 24);
  swift_bridgeObjectRelease_n();
  if (v14 < 0) {
    goto LABEL_68;
  }
LABEL_27:
  if ((v14 & 0x4000000000000000) != 0) {
    goto LABEL_68;
  }
  uint64_t v30 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v30) {
    goto LABEL_72;
  }
LABEL_29:
  uint64_t v31 = *(void *)(v0 + 24);
  uint64_t v64 = v30;
  if ((v31 & 0xC000000000000001) != 0)
  {
    uint64_t v32 = 0;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (__OFADD__(v32++, 1)) {
        goto LABEL_66;
      }
      uint64_t v34 = CKRecord.recordType.getter();
      uint64_t v36 = v35;
      swift_unknownObjectRelease();
      swift_bridgeObjectRetain();
      v37._countAndFlagsBits = v34;
      v37._object = v36;
      Swift::Int v38 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, v37);
      swift_bridgeObjectRelease();
      if (v38 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_63;
        }
        goto LABEL_32;
      }
      if (!v38) {
        goto LABEL_62;
      }
      uint64_t v14 = 1;
      if (*(void *)"cloudkit.share" == v34 && *(void **)".share" == v36
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_arrayDestroy();
      }
      else
      {
        swift_arrayDestroy();
        if (qword_1003EC010 != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        sub_100044058(v39, (uint64_t)qword_10040B6B8);
        swift_bridgeObjectRetain_n();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled((os_log_t)v14, v40))
        {
          swift_bridgeObjectRelease_n();

          goto LABEL_32;
        }
        uint64_t v41 = swift_slowAlloc();
        v65[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v41 + 4) = sub_100037004(v34, (unint64_t)v36, v65);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v40, "Unable to find table for %{public}s", (uint8_t *)v41, 0xCu);
        swift_arrayDestroy();
        uint64_t v30 = v64;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      swift_bridgeObjectRelease();
LABEL_32:
      if (v32 == v30) {
        goto LABEL_72;
      }
    }
  }
  uint64_t v42 = 0;
  uint64_t v43 = v31 + 32;
  while (1)
  {
    uint64_t v44 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      goto LABEL_67;
    }
    id v45 = *(id *)(v43 + 8 * v42);
    uint64_t v46 = CKRecord.recordType.getter();
    uint64_t v48 = v47;

    swift_bridgeObjectRetain();
    v49._countAndFlagsBits = v46;
    v49._object = v48;
    Swift::Int v50 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, v49);
    swift_bridgeObjectRelease();
    if (v50 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_63;
      }
      goto LABEL_48;
    }
    if (!v50) {
      break;
    }
    uint64_t v14 = 1;
    if (*(void *)"cloudkit.share" == v46 && *(void **)".share" == v48
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_arrayDestroy();
    }
    else
    {
      swift_arrayDestroy();
      if (qword_1003EC010 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_100044058(v51, (uint64_t)qword_10040B6B8);
      swift_bridgeObjectRetain_n();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v14, v52))
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_48;
      }
      uint64_t v53 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v53 + 4) = sub_100037004(v46, (unint64_t)v48, v65);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v52, "Unable to find table for %{public}s", (uint8_t *)v53, 0xCu);
      swift_arrayDestroy();
      uint64_t v30 = v64;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_bridgeObjectRelease();
LABEL_48:
    uint64_t v42 = v44;
    if (v44 == v30) {
      goto LABEL_72;
    }
  }
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_63:
  swift_bridgeObjectRelease_n();
  if (*(unsigned char *)(v0 + 136) == 1)
  {
LABEL_74:
    uint64_t v55 = *(void *)(v0 + 48);
    uint64_t v56 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = 0;
    *(void *)(v57 + 24) = 0;
    sub_10012EDF8(v55, (uint64_t)&unk_1003EF738, v57);
    swift_release();
  }
LABEL_75:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
LABEL_76:
  return v12();
}

uint64_t sub_1000F5FA8()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_1000F5FC8, 0, 0);
}

uint64_t sub_1000F5FC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_1000F5FEC, v1, 0);
}

uint64_t sub_1000F5FEC()
{
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  *(void *)(v0 + 72) = Database.readConnection.getter();
  return _swift_task_switch(sub_1000F60A0, 0, 0);
}

uint64_t sub_1000F60A0()
{
  if (v0[9])
  {
    if (qword_1003EBF90 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Table();
    uint64_t v2 = sub_100044058(v1, (uint64_t)qword_10040B510);
    v0[5] = v1;
    v0[6] = &protocol witness table for Table;
    uint64_t v3 = sub_10003E0F4(v0 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(v3, v2, v1);
    uint64_t v4 = sub_1000FF6F8();
    swift_release();
    sub_1000233E4((uint64_t)(v0 + 2));
    uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
    return v5(v4);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DatabaseError();
    sub_1000FEFF0(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for DatabaseError.notConnected(_:), v7);
    swift_willThrow();
    unint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1000F62B0(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = sub_100044014(&qword_1003EF278);
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000F63E4, 0, 0);
}

uint64_t sub_1000F63E4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 112);
  *(void *)(v0 + 136) = v1;
  return _swift_task_switch(sub_1000F6408, v1, 0);
}

uint64_t sub_1000F6408()
{
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  *(void *)(v0 + 144) = Database.readConnection.getter();
  return _swift_task_switch(sub_1000F64BC, 0, 0);
}

uint64_t sub_1000F64BC()
{
  if (v0[18])
  {
    if (qword_1003EBF90 != -1) {
      swift_once();
    }
    uint64_t v22 = v0 + 2;
    uint64_t v1 = v0[14];
    uint64_t v2 = v0[15];
    uint64_t v3 = v0[13];
    uint64_t v4 = sub_100044058(v3, (uint64_t)qword_10040B510);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v21(v2, v4, v3);
    if (qword_1003EBFA0 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[16];
    uint64_t v8 = v0[13];
    uint64_t v7 = v0[14];
    uint64_t v10 = v0[11];
    uint64_t v9 = v0[12];
    uint64_t v20 = v0[10];
    uint64_t v11 = sub_100044014(&qword_1003EF240);
    sub_100044058(v11, (uint64_t)qword_10040B540);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    QueryType.filter(_:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v20);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v12(v5, v8);
    v0[5] = v8;
    v0[6] = &protocol witness table for Table;
    uint64_t v13 = sub_10003E0F4(v22);
    v21((uint64_t)v13, v6, v8);
    sub_1000FF6F8();
    uint64_t v14 = v0[16];
    uint64_t v17 = v0[13];
    sub_1000233E4((uint64_t)v22);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    swift_release();
    v12(v14, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v15 = type metadata accessor for DatabaseError();
    sub_1000FEFF0(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for DatabaseError.notConnected(_:), v15);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
  }
  return v18();
}

uint64_t sub_1000F6838()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_1000F6858, 0, 0);
}

uint64_t sub_1000F6858()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_1000F687C, v1, 0);
}

uint64_t sub_1000F687C()
{
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  *(void *)(v0 + 72) = Database.readConnection.getter();
  return _swift_task_switch(sub_1000F6930, 0, 0);
}

uint64_t sub_1000F6930()
{
  if (v0[9])
  {
    if (qword_1003EBF98 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Table();
    uint64_t v2 = sub_100044058(v1, (uint64_t)qword_10040B528);
    v0[5] = v1;
    v0[6] = &protocol witness table for Table;
    uint64_t v3 = sub_10003E0F4(v0 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(v3, v2, v1);
    uint64_t v4 = sub_100100550();
    swift_release();
    sub_1000233E4((uint64_t)(v0 + 2));
    uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
    return v5(v4);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DatabaseError();
    sub_1000FEFF0(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for DatabaseError.notConnected(_:), v7);
    swift_willThrow();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1000F6B40(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = sub_100044014(&qword_1003EF278);
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000F6C74, 0, 0);
}

uint64_t sub_1000F6C74()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 112);
  *(void *)(v0 + 136) = v1;
  return _swift_task_switch(sub_1000F6C98, v1, 0);
}

uint64_t sub_1000F6C98()
{
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  *(void *)(v0 + 144) = Database.readConnection.getter();
  return _swift_task_switch(sub_1000F6D4C, 0, 0);
}

uint64_t sub_1000F6D4C()
{
  if (v0[18])
  {
    if (qword_1003EBF98 != -1) {
      swift_once();
    }
    uint64_t v22 = v0 + 2;
    uint64_t v1 = v0[14];
    uint64_t v2 = v0[15];
    uint64_t v3 = v0[13];
    uint64_t v4 = sub_100044058(v3, (uint64_t)qword_10040B528);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v21(v2, v4, v3);
    if (qword_1003EBFA0 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[16];
    uint64_t v8 = v0[13];
    uint64_t v7 = v0[14];
    uint64_t v10 = v0[11];
    uint64_t v9 = v0[12];
    uint64_t v20 = v0[10];
    uint64_t v11 = sub_100044014(&qword_1003EF240);
    sub_100044058(v11, (uint64_t)qword_10040B540);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    QueryType.filter(_:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v20);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v12(v5, v8);
    v0[5] = v8;
    v0[6] = &protocol witness table for Table;
    uint64_t v13 = sub_10003E0F4(v22);
    v21((uint64_t)v13, v6, v8);
    sub_100100550();
    uint64_t v14 = v0[16];
    uint64_t v17 = v0[13];
    sub_1000233E4((uint64_t)v22);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    swift_release();
    v12(v14, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v15 = type metadata accessor for DatabaseError();
    sub_1000FEFF0(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for DatabaseError.notConnected(_:), v15);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
  }
  return v18();
}

uint64_t sub_1000F70C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B6B8);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B6B8);
  if (qword_1003EC020 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B6D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000F7190()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CloudStorageStore.State(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (long long *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001003C0(v1, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      int v10 = *(unsigned __int8 *)v8;
      uint64_t v11 = sub_100044014(&qword_1003EF5E8);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      uint64_t v24 = 0;
      unint64_t v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      uint64_t v24 = 0x646574656C65642ELL;
      unint64_t v25 = 0xEF203A6570797428;
      if (v10) {
        unint64_t v12 = 0xD000000000000014;
      }
      else {
        unint64_t v12 = 0x65636E65662ELL;
      }
      if (v10) {
        unint64_t v13 = 0x8000000100375790;
      }
      else {
        unint64_t v13 = 0xE600000000000000;
      }
      unint64_t v14 = v13;
      String.append(_:)(*(Swift::String *)&v12);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 0x203A6469202CLL;
      v15._object = (void *)0xE600000000000000;
      String.append(_:)(v15);
      sub_1000FEFF0(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = v24;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      return 0x6E776F6E6B6E752ELL;
    }
  }
  else
  {
    sub_100022CC0(v8, (uint64_t)&v24);
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    v18._countAndFlagsBits = 0x65696669646F6D2ELL;
    v18._object = (void *)0xEA00000000002864;
    String.append(_:)(v18);
    sub_100044014(&qword_1003EF7A0);
    _print_unlocked<A, B>(_:_:)();
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v17 = v22;
    sub_1000233E4((uint64_t)&v24);
  }
  return v17;
}

uint64_t sub_1000F7494()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_100100488(v0 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_state, type metadata accessor for CloudStorageStore.State);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000F7508()
{
  return type metadata accessor for CloudStorageStore(0);
}

uint64_t type metadata accessor for CloudStorageStore(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003EF510);
}

uint64_t sub_1000F7530()
{
  uint64_t result = type metadata accessor for CloudStorageStore.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CloudStorageStore.State(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003EF660);
}

uint64_t *sub_1000F7610(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v10 = *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
      uint64_t v11 = (char *)a1 + v10;
      unint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v8;
      (**(void (***)(uint64_t *, uint64_t *))(v8 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1000F7780(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = a1 + *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
    uint64_t v4 = type metadata accessor for UUID();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  else if (!result)
  {
    return sub_1000233E4(a1);
  }
  return result;
}

unsigned char *sub_1000F7834(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(unsigned char *, unsigned char *))(v7 - 8))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000F7960(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100100488((uint64_t)a1, type metadata accessor for CloudStorageStore.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v8 = *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = a2[3];
      a1[3] = v7;
      a1[4] = a2[4];
      (**(void (***)(void *, void *))(v7 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

unsigned char *sub_1000F7AB4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_1000F7B8C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100100488((uint64_t)a1, type metadata accessor for CloudStorageStore.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
      uint64_t v7 = &a1[v6];
      uint64_t v8 = &a2[v6];
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000F7C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1000F7CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000F7CDC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000F7CEC()
{
  v2[4] = "(";
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1000F7D94(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = sub_100044014(&qword_1003EF790);
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003EF798);
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  type metadata accessor for CloudStorageStore.State(0);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1000F7F04, v1, 0);
}

uint64_t sub_1000F7F04()
{
  uint64_t v51 = v0;
  uint64_t v1 = v0 + 11;
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[12] + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_state;
  swift_beginAccess();
  sub_1001003C0(v4, v3);
  LOBYTE(v2) = sub_1000FF148(v3, v2);
  sub_100100488(v3, type metadata accessor for CloudStorageStore.State);
  if ((v2 & 1) == 0)
  {
    if (qword_1003EC010 != -1) {
LABEL_38:
    }
      swift_once();
    uint64_t v5 = v0[20];
    uint64_t v6 = v0[11];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B6B8);
    sub_1001003C0(v6, v5);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    Swift::String v49 = v0;
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = v0[21];
      uint64_t v43 = v0[20];
      uint64_t v11 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      sub_1001003C0(v4, v10);
      os_log_type_t type = v9;
      uint64_t v12 = sub_1000F7190();
      unint64_t v14 = v13;
      sub_100100488(v10, type metadata accessor for CloudStorageStore.State);
      v0[9] = sub_100037004(v12, v14, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v11 + 12) = 2080;
      uint64_t v15 = sub_1000F7190();
      v0[10] = sub_100037004(v15, v16, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100100488(v43, type metadata accessor for CloudStorageStore.State);
      _os_log_impl((void *)&_mh_execute_header, v8, type, "State: %s -> %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = v0[20];
      swift_release_n();
      sub_100100488(v17, type metadata accessor for CloudStorageStore.State);
    }

    uint64_t v18 = v0[11];
    uint64_t v19 = v0[12];
    swift_beginAccess();
    sub_100100424(v18, v4);
    swift_endAccess();
    uint64_t v20 = OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations;
    uint64_t v21 = *(void *)(v19 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations);
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      unint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v25 = 134217984;
        *(v1 - 3) = v22;
        v1 -= 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Publishing State change event to %ld subscribers", v25, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v21 = *(void *)(v19 + v20);
    }
    uint64_t v42 = v21 + 64;
    uint64_t v26 = -1;
    uint64_t v27 = -1 << *(unsigned char *)(v21 + 32);
    if (-v27 < 64) {
      uint64_t v26 = ~(-1 << -(char)v27);
    }
    unint64_t v28 = v26 & *(void *)(v21 + 64);
    os_log_t log = (os_log_t)(v0[14] + 8);
    uint64_t v47 = v0[17];
    uint64_t v48 = v21;
    int64_t v44 = (unint64_t)(63 - v27) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    while (1)
    {
      if (v28)
      {
        unint64_t v29 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        unint64_t v30 = v29 | (v4 << 6);
        uint64_t v0 = v49;
      }
      else
      {
        int64_t v37 = v4 + 1;
        uint64_t v0 = v49;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        if (v37 >= v44) {
          goto LABEL_32;
        }
        unint64_t v38 = *(void *)(v42 + 8 * v37);
        ++v4;
        if (!v38)
        {
          uint64_t v4 = v37 + 1;
          if (v37 + 1 >= v44) {
            goto LABEL_32;
          }
          unint64_t v38 = *(void *)(v42 + 8 * v4);
          if (!v38)
          {
            uint64_t v4 = v37 + 2;
            if (v37 + 2 >= v44) {
              goto LABEL_32;
            }
            unint64_t v38 = *(void *)(v42 + 8 * v4);
            if (!v38)
            {
              uint64_t v4 = v37 + 3;
              if (v37 + 3 >= v44) {
                goto LABEL_32;
              }
              unint64_t v38 = *(void *)(v42 + 8 * v4);
              if (!v38)
              {
                int64_t v39 = v37 + 4;
                if (v39 >= v44)
                {
LABEL_32:
                  swift_release();
                  break;
                }
                unint64_t v38 = *(void *)(v42 + 8 * v39);
                if (!v38)
                {
                  while (1)
                  {
                    uint64_t v4 = v39 + 1;
                    if (__OFADD__(v39, 1)) {
                      goto LABEL_37;
                    }
                    if (v4 >= v44) {
                      goto LABEL_32;
                    }
                    unint64_t v38 = *(void *)(v42 + 8 * v4);
                    ++v39;
                    if (v38) {
                      goto LABEL_31;
                    }
                  }
                }
                uint64_t v4 = v39;
              }
            }
          }
        }
LABEL_31:
        unint64_t v28 = (v38 - 1) & v38;
        unint64_t v30 = __clz(__rbit64(v38)) + (v4 << 6);
      }
      uint64_t v31 = v0[21];
      uint64_t v32 = v0[18];
      uint64_t v1 = (void *)v0[19];
      uint64_t v34 = v0[15];
      uint64_t v33 = v0[16];
      uint64_t v35 = v0[13];
      uint64_t v36 = v0[11];
      (*(void (**)(void *, unint64_t, uint64_t))(v47 + 16))(v1, *(void *)(v48 + 56) + *(void *)(v47 + 72) * v30, v33);
      (*(void (**)(uint64_t, void *, uint64_t))(v47 + 32))(v32, v1, v33);
      sub_1001003C0(v36, v31);
      AsyncStream.Continuation.yield(_:)();
      ((void (*)(uint64_t, uint64_t))log->isa)(v34, v35);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v32, v33);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

uint64_t sub_1000F8580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v4 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005A548(0, &qword_1003EF6E8);
  sub_10005A548(0, &qword_1003EE970);
  if (qword_1003EBFB0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100044014(&qword_1003EF1F0);
  sub_100044058(v7, (uint64_t)qword_10040B570);
  Row.subscript.getter();
  long long v8 = v45;
  uint64_t v9 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v2)
  {
    uint64_t v10 = type metadata accessor for Row();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    return sub_100044090(v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    uint64_t v12 = (void *)v9;
    sub_100044090(v8, *((unint64_t *)&v8 + 1));
    if (v12)
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      uint64_t v41 = PropertyListDecoder.init()();
      if (qword_1003EBFA0 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_100044014(&qword_1003EF240);
      sub_100044058(v13, (uint64_t)qword_10040B540);
      uint64_t v14 = type metadata accessor for UUID();
      uint64_t v15 = v51;
      uint64_t v39 = v14;
      Row.subscript.getter();
      if (qword_1003EBFA8 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_100044014(&qword_1003EF230);
      sub_100044058(v16, (uint64_t)qword_10040B558);
      Row.subscript.getter();
      long long v17 = v45;
      uint64_t v18 = (int *)type metadata accessor for FenceRecord();
      uint64_t v19 = (_OWORD *)(v15 + v18[5]);
      *uint64_t v19 = v17;
      v37[2] = v19;
      uint64_t v38 = v18[6];
      *(void *)(v15 + v38) = v12;
      uint64_t v20 = qword_1003EBFB8;
      id v40 = v12;
      if (v20 != -1) {
        swift_once();
      }
      uint64_t v21 = sub_100044014(&qword_1003EF220);
      sub_100044058(v21, (uint64_t)qword_10040B588);
      Row.subscript.getter();
      *(void *)(v15 + v18[7]) = v45;
      if (qword_1003EBFC0 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_100044014(&qword_1003EF210);
      sub_100044058(v22, (uint64_t)qword_10040B5A0);
      uint64_t v42 = v18;
      uint64_t v23 = v15 + v18[9];
      type metadata accessor for Date();
      v37[1] = v23;
      Row.subscript.getter();
      if (qword_1003EBFD0 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_100044014(&qword_1003EF200);
      sub_100044058(v24, (uint64_t)qword_10040B5D0);
      Row.subscript.getter();
      long long v25 = v45;
      uint64_t v26 = type metadata accessor for Fence.Schedule();
      uint64_t v27 = v26;
      if (*((void *)&v25 + 1) >> 60 == 15)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
      }
      else
      {
        sub_100022C64(v25, *((unint64_t *)&v25 + 1));
        sub_1000FEFF0(&qword_1003EF700, (void (*)(uint64_t))&type metadata accessor for Fence.Schedule);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        sub_1000440E8(v25, *((unint64_t *)&v25 + 1));
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 0, 1, v27);
        sub_1000440E8(v25, *((unint64_t *)&v25 + 1));
      }
      uint64_t v29 = v51;
      sub_100013B50((uint64_t)v6, v51 + v42[8], &qword_1003EE810);
      if (qword_1003EBFC8 != -1) {
        swift_once();
      }
      sub_100044058(v7, (uint64_t)qword_10040B5B8);
      Row.subscript.getter();
      uint64_t v30 = v43;
      unint64_t v31 = v44;
      sub_1000FFD88();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      uint64_t v32 = type metadata accessor for Row();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
      swift_release();

      uint64_t result = sub_100044090(v30, v31);
      uint64_t v33 = (_OWORD *)(v29 + v42[10]);
      long long v34 = v46;
      *uint64_t v33 = v45;
      v33[1] = v34;
      long long v35 = v48;
      v33[2] = v47;
      v33[3] = v35;
      long long v36 = v50;
      v33[4] = v49;
      v33[5] = v36;
    }
    else
    {
      sub_1000FFD34();
      swift_allocError();
      swift_willThrow();
      uint64_t v28 = type metadata accessor for Row();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a1, v28);
    }
  }
  return result;
}

uint64_t sub_1000F8DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v4 - 8);
  unint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v7 = a2 + v6[6];
  long long v32 = xmmword_10036CD90;
  *(_OWORD *)uint64_t v7 = xmmword_10036CD90;
  uint64_t v8 = a2 + v6[7];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 56);
  uint64_t v30 = v8;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(v8, 1, 1, v9);
  uint64_t v11 = a2 + v6[8];
  *(_OWORD *)uint64_t v11 = v32;
  *(void *)&long long v32 = a2 + v6[9];
  v10();
  if (qword_1003EBFE0 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100044014(&qword_1003EF200);
  sub_100044058(v12, (uint64_t)qword_10040B600);
  Row.subscript.getter();
  unint64_t v13 = v34;
  if (v34 >> 60 != 15)
  {
    uint64_t v14 = v33;
    switch(v34 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(v33) - v33;
        if (__OFSUB__(HIDWORD(v33), v33))
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          JUMPOUT(0x1000F92B8);
        }
        uint64_t v15 = (int)v15;
LABEL_9:
        if (v15 == 32) {
          goto LABEL_12;
        }
LABEL_10:
        sub_1000440E8(v33, v34);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v33 + 16);
        uint64_t v16 = *(void *)(v33 + 24);
        BOOL v18 = __OFSUB__(v16, v17);
        uint64_t v15 = v16 - v17;
        if (!v18) {
          goto LABEL_9;
        }
        goto LABEL_33;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v15 = BYTE6(v34);
        goto LABEL_9;
    }
  }
  uint64_t v14 = 0;
  unint64_t v13 = 0xF000000000000000;
LABEL_12:
  sub_1000440E8(*(void *)v7, *(void *)(v7 + 8));
  *(void *)uint64_t v7 = v14;
  *(void *)(v7 + 8) = v13;
  if (qword_1003EBFF0 != -1) {
    swift_once();
  }
  sub_100044058(v12, (uint64_t)qword_10040B630);
  Row.subscript.getter();
  unint64_t v19 = v34;
  if (v34 >> 60 != 15)
  {
    uint64_t v20 = v33;
    switch(v34 >> 62)
    {
      case 1uLL:
        LODWORD(v21) = HIDWORD(v33) - v33;
        if (__OFSUB__(HIDWORD(v33), v33)) {
          goto LABEL_34;
        }
        uint64_t v21 = (int)v21;
LABEL_20:
        if (v21 == 32) {
          goto LABEL_23;
        }
LABEL_21:
        sub_1000440E8(v33, v34);
        break;
      case 2uLL:
        uint64_t v23 = *(void *)(v33 + 16);
        uint64_t v22 = *(void *)(v33 + 24);
        BOOL v18 = __OFSUB__(v22, v23);
        uint64_t v21 = v22 - v23;
        if (!v18) {
          goto LABEL_20;
        }
        goto LABEL_35;
      case 3uLL:
        goto LABEL_21;
      default:
        uint64_t v21 = BYTE6(v34);
        goto LABEL_20;
    }
  }
  uint64_t v20 = 0;
  unint64_t v19 = 0xF000000000000000;
LABEL_23:
  sub_1000440E8(*(void *)v11, *(void *)(v11 + 8));
  *(void *)uint64_t v11 = v20;
  *(void *)(v11 + 8) = v19;
  if (qword_1003EBFA0 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_100044014(&qword_1003EF240);
  sub_100044058(v24, (uint64_t)qword_10040B540);
  type metadata accessor for UUID();
  Row.subscript.getter();
  uint64_t v25 = (uint64_t)v31;
  if (qword_1003EBFD8 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_100044014(&qword_1003EF280);
  sub_100044058(v26, (uint64_t)qword_10040B5E8);
  sub_1000EA3C8();
  Row.subscript.getter();
  *(unsigned char *)(a2 + v6[5]) = v33 == 1;
  if (qword_1003EBFE8 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_100044014(&qword_1003EF210);
  sub_100044058(v27, (uint64_t)qword_10040B618);
  Row.subscript.getter();
  sub_1000E0BF0(v25, v30);
  if (qword_1003EBFF8 != -1) {
    swift_once();
  }
  sub_100044058(v27, (uint64_t)qword_10040B648);
  Row.subscript.getter();
  uint64_t v28 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a1, v28);
  return sub_1000E0BF0(v25, v32);
}

uint64_t sub_1000F92D8()
{
  sub_10003CB84(0, 2, 0);
  unint64_t v1 = _swiftEmptyArrayStorage[2];
  unint64_t v0 = _swiftEmptyArrayStorage[3];
  unint64_t v2 = v0 >> 1;
  unint64_t v3 = v1 + 1;
  if (v0 >> 1 <= v1)
  {
    sub_10003CB84(v0 > 1, v1 + 1, 1);
    unint64_t v0 = _swiftEmptyArrayStorage[3];
    unint64_t v2 = v0 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v3;
  uint64_t v4 = &_swiftEmptyArrayStorage[2 * v1];
  v4[4] = 0xD000000000000016;
  v4[5] = 0x8000000100374F80;
  int64_t v5 = v1 + 2;
  if (v2 <= v3) {
    sub_10003CB84(v0 > 1, v5, 1);
  }
  _swiftEmptyArrayStorage[2] = v5;
  uint64_t v6 = (char *)&_swiftEmptyArrayStorage[2 * v3];
  strcpy(v6 + 32, "SharedSecrets");
  *((_WORD *)v6 + 23) = -4864;
  uint64_t v7 = Array<A>.uniqued()();
  uint64_t result = swift_release();
  qword_10040B6D0 = v7;
  return result;
}

uint64_t sub_1000F940C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for CloudKitCoordinator.Deletion();
  v2[5] = v3;
  void v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CloudKitStateChange();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000F9538, v1, 0);
}

uint64_t sub_1000F9538()
{
  uint64_t v38 = v0;
  if (qword_1003EC010 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B6B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v11 = v0[9];
  long long v36 = v0;
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    int64_t v37 = (char *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_1000FEFF0(&qword_1003EF7F0, (void (*)(uint64_t))&type metadata accessor for CloudKitStateChange);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v13, v14, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ingest:stateChange %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }

  uint64_t v15 = CloudKitStateChange.deleted.getter();
  int64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = v36;
    uint64_t v18 = v36[6];
    int64_t v37 = (char *)_swiftEmptyArrayStorage;
    sub_100245E48(0, v16, 0);
    unint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
    v18 += 16;
    unint64_t v34 = (*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64);
    long long v35 = v19;
    unint64_t v20 = v15 + v34;
    uint64_t v33 = *(void *)(v18 + 56);
    uint64_t v21 = (void (**)(uint64_t, uint64_t))(v18 - 8);
    uint64_t v22 = (void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v23 = v37;
    do
    {
      uint64_t v24 = v17[7];
      uint64_t v25 = v17[5];
      v35(v24, v20, v25);
      CloudKitCoordinator.Deletion.recordType.getter();
      CloudKitCoordinator.Deletion.recordID.getter();
      CloudKitCoordinator.Deletion.init(recordType:recordID:)();
      (*v21)(v24, v25);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100245E48(0, *((void *)v23 + 2) + 1, 1);
        uint64_t v23 = v37;
      }
      unint64_t v27 = *((void *)v23 + 2);
      unint64_t v26 = *((void *)v23 + 3);
      uint64_t v17 = v36;
      if (v27 >= v26 >> 1)
      {
        sub_100245E48(v26 > 1, v27 + 1, 1);
        uint64_t v23 = v37;
      }
      uint64_t v28 = v36[8];
      uint64_t v29 = v36[5];
      *((void *)v23 + 2) = v27 + 1;
      (*v22)(&v23[v34 + v27 * v33], v28, v29);
      int64_t v37 = v23;
      v20 += v33;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = (char *)_swiftEmptyArrayStorage;
    uint64_t v17 = v36;
  }
  v17[12] = v23;
  uint64_t v30 = CloudKitStateChange.modified.getter();
  v17[13] = v30;
  unint64_t v31 = (void *)swift_task_alloc();
  v17[14] = v31;
  *unint64_t v31 = v17;
  v31[1] = sub_1000F9978;
  return sub_1000F4ED4((uint64_t)v23, v30, 1);
}

uint64_t sub_1000F9978()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_1000F9B38;
  }
  else {
    uint64_t v4 = sub_1000F9AA4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F9AA4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F9B38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F9BCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v139 = a5;
  unint64_t v157 = a4;
  uint64_t v169 = a3;
  uint64_t v163 = a2;
  uint64_t v145 = type metadata accessor for Insert();
  uint64_t v130 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v9 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100044014((uint64_t *)&unk_1003F3C10);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v138 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v148 = (char *)&v129 - v13;
  uint64_t v155 = sub_100044014(&qword_1003EF278);
  uint64_t v178 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v154 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for Table();
  uint64_t v15 = *(void *)(v165 - 8);
  uint64_t v16 = __chkstk_darwin(v165);
  uint64_t v149 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v153 = (char *)&v129 - v19;
  __chkstk_darwin(v18);
  uint64_t v152 = (char *)&v129 - v20;
  uint64_t v150 = type metadata accessor for Delete();
  uint64_t v21 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v166 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v23 - 8);
  uint64_t v167 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = (void (**)(void, void, void))type metadata accessor for UUID();
  uint64_t v25 = (uint64_t)*(v174 - 1);
  uint64_t v26 = __chkstk_darwin(v174);
  uint64_t v146 = (char *)&v129 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = v27;
  __chkstk_darwin(v26);
  uint64_t v164 = (char *)&v129 - v28;
  unint64_t v177 = type metadata accessor for CloudKitCoordinator.Deletion();
  uint64_t v29 = *(void *)(v177 - 8);
  uint64_t v30 = __chkstk_darwin(v177);
  uint64_t v151 = (char *)&v129 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v168 = (char *)&v129 - v32;
  uint64_t v33 = *(void (***)(char *, uint64_t))(a1 + 16);
  uint64_t v156 = v9;
  uint64_t v173 = v33;
  uint64_t v132 = v15;
  if (!v33) {
    goto LABEL_44;
  }
  long long v35 = *(void (**)(char *, char *, unint64_t))(v29 + 16);
  uint64_t v34 = v29 + 16;
  uint64_t v176 = v35;
  uint64_t v172 = (char *)(a1 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64)));
  uint64_t v162 = (unsigned int (**)(uint64_t, uint64_t, void))(v25 + 48);
  uint64_t v161 = (void (**)(char *, uint64_t, void))(v25 + 32);
  uint64_t v144 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v143 = (void (**)(char *, uint64_t))(v178 + 8);
  uint64_t v142 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v136 = v25 + 16;
  uint64_t v140 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v137 = v25;
  char v141 = (void (**)(void, void))(v25 + 8);
  *(void *)&long long v170 = v34 - 8;
  unint64_t v171 = *(void *)(v34 + 56);
  uint64_t v129 = a1;
  swift_bridgeObjectRetain();
  long long v36 = 0;
  *(void *)&long long v37 = 136315138;
  long long v134 = v37;
  uint64_t v133 = (char *)&type metadata for Any + 8;
  unint64_t v135 = (char *)&type metadata for () + 8;
  *(void *)&long long v37 = 136446210;
  long long v131 = v37;
  unint64_t v38 = v177;
  uint64_t v39 = v34;
  id v40 = v168;
  uint64_t v158 = v34;
  do
  {
    v176(v40, &v172[v171 * (void)v36], v38);
    uint64_t v41 = CloudKitCoordinator.Deletion.recordType.getter();
    uint64_t v43 = v42;
    swift_bridgeObjectRetain();
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    Swift::Int v45 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, v44);
    swift_bridgeObjectRelease();
    if (v45)
    {
      if (v45 != 1)
      {
        if (*(void *)"cloudkit.share" == v41 && *(void **)".share" == v43
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_arrayDestroy();
          swift_bridgeObjectRelease();
          unint64_t v38 = v177;
        }
        else
        {
          swift_arrayDestroy();
          if (qword_1003EC010 != -1) {
            swift_once();
          }
          uint64_t v64 = type metadata accessor for Logger();
          sub_100044058(v64, (uint64_t)qword_10040B6B8);
          swift_bridgeObjectRetain_n();
          uint64_t v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v65, v66))
          {
            uint64_t v67 = v6;
            uint64_t v68 = swift_slowAlloc();
            uint64_t v187 = swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = v131;
            swift_bridgeObjectRetain();
            *(void *)(v68 + 4) = sub_100037004(v41, (unint64_t)v43, &v187);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unable to find table for %{public}s", (uint8_t *)v68, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v6 = v67;
            swift_slowDealloc();
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          unint64_t v38 = v177;
          id v40 = v168;
          uint64_t v39 = v158;
        }
        (*(void (**)(char *, unint64_t))v170)(v40, v38);
        goto LABEL_5;
      }
      uint64_t v175 = v36;
      int v46 = 1;
    }
    else
    {
      uint64_t v175 = v36;
      int v46 = 0;
    }
    swift_bridgeObjectRelease();
    long long v47 = (void *)CloudKitCoordinator.Deletion.recordID.getter();
    id v48 = [v47 recordName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = (uint64_t)v167;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    long long v50 = v174;
    if ((*v162)(v49, 1, v174) == 1)
    {
      sub_10000A520(v49, &qword_1003ECFB8);
      if (qword_1003EC010 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_100044058(v51, (uint64_t)qword_10040B6B8);
      uint64_t v52 = v151;
      id v40 = v168;
      unint64_t v38 = v177;
      v176(v151, v168, v177);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v178 = v6;
        uint64_t v160 = v56;
        uint64_t v187 = v56;
        *(_DWORD *)uint64_t v55 = v134;
        uint64_t v57 = (void *)CloudKitCoordinator.Deletion.recordID.getter();
        uint64_t v58 = v39;
        id v59 = [v57 recordName];

        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v62 = v61;

        uint64_t v39 = v58;
        *(void *)(v55 + 4) = sub_100037004(v60, v62, &v187);
        swift_bridgeObjectRelease();
        uint64_t v63 = *(void (**)(char *, unint64_t))v170;
        (*(void (**)(char *, unint64_t))v170)(v52, v177);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Record name is not a UUID: %s", (uint8_t *)v55, 0xCu);
        swift_arrayDestroy();
        uint64_t v6 = v178;
        swift_slowDealloc();
        unint64_t v38 = v177;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v63 = *(void (**)(char *, unint64_t))v170;
        (*(void (**)(char *, unint64_t))v170)(v52, v38);
      }
      v63(v40, v38);
      long long v36 = v175;
    }
    else
    {
      uint64_t v69 = v164;
      unsigned int v159 = *v161;
      v159(v164, v49, v50);
      uint64_t v70 = v153;
      LODWORD(v160) = v46;
      uint64_t v178 = v6;
      if (v46)
      {
        uint64_t v71 = qword_10040B528;
        uint64_t v72 = v165;
        if (qword_1003EBF98 != -1)
        {
          swift_once();
          uint64_t v71 = qword_10040B528;
        }
      }
      else
      {
        uint64_t v71 = qword_10040B510;
        uint64_t v72 = v165;
        if (qword_1003EBF90 != -1)
        {
          swift_once();
          uint64_t v71 = qword_10040B510;
        }
      }
      uint64_t v73 = sub_100044058(v72, (uint64_t)v71);
      (*v144)(v70, v73, v72);
      if (qword_1003EBFA0 != -1) {
        swift_once();
      }
      uint64_t v74 = sub_100044014(&qword_1003EF240);
      sub_100044058(v74, (uint64_t)qword_10040B540);
      uint64_t v75 = v154;
      == infix<A>(_:_:)();
      uint64_t v76 = v152;
      QueryType.filter(_:)();
      (*v143)(v75, v155);
      uint64_t v77 = v50;
      uint64_t v78 = *v142;
      (*v142)(v70, v72);
      QueryType.delete()();
      v78(v76, v72);
      uint64_t v79 = v178;
      Connection.run(_:)();
      if (v79)
      {
        (*v140)(v166, v150);
        (*v141)(v69, v77);
        (*(void (**)(char *, unint64_t))v170)(v168, v177);
        return swift_bridgeObjectRelease();
      }
      uint64_t v178 = 0;
      unint64_t v80 = v69;
      uint64_t v81 = type metadata accessor for TaskPriority();
      uint64_t v82 = *(void *)(v81 - 8);
      uint64_t v83 = (uint64_t)v148;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v148, 1, 1, v81);
      uint64_t v84 = v137;
      uint64_t v85 = v146;
      (*(void (**)(char *, char *, void))(v137 + 16))(v146, v80, v77);
      uint64_t v86 = sub_1000FEFF0(&qword_1003EF758, (void (*)(uint64_t))type metadata accessor for CloudStorageStore);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      uint64_t v89 = v169;
      *(void *)(v88 + 16) = v169;
      *(void *)(v88 + 24) = v86;
      *(void *)(v88 + 32) = v89;
      *(unsigned char *)(v88 + 40) = v160;
      v159((char *)(v88 + v87), (uint64_t)v85, v77);
      int v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v83, 1, v81);
      swift_retain_n();
      if (v90 == 1)
      {
        sub_10000A520(v83, (uint64_t *)&unk_1003F3C10);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v81);
      }
      uint64_t v6 = v178;
      uint64_t v91 = v174;
      uint64_t v39 = v158;
      if (*(void *)(v88 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v92 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v94 = v93;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v92 = 0;
        uint64_t v94 = 0;
      }
      uint64_t v95 = v164;
      uint64_t v96 = swift_allocObject();
      *(void *)(v96 + 16) = &unk_1003EF778;
      *(void *)(v96 + 24) = v88;
      if (v94 | v92)
      {
        uint64_t v179 = 0;
        uint64_t v180 = 0;
        uint64_t v181 = v92;
        uint64_t v182 = v94;
      }
      long long v36 = v175;
      swift_task_create();
      swift_release();
      (*v140)(v166, v150);
      (*v141)(v95, v91);
      id v40 = v168;
      unint64_t v38 = v177;
      (*(void (**)(char *, unint64_t))v170)(v168, v177);
    }
LABEL_5:
    long long v36 = (void (**)(uint64_t, uint64_t))((char *)v36 + 1);
  }
  while (v36 != (void (**)(uint64_t, uint64_t))v173);
  swift_bridgeObjectRelease();
  uint64_t v9 = v156;
LABEL_44:
  if (v157 >> 62) {
    goto LABEL_86;
  }
  uint64_t v97 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_46:
  if (v97)
  {
    uint64_t v99 = 0;
    unint64_t v177 = v157 & 0xC000000000000001;
    unint64_t v171 = v157 + 32;
    v174 = (void (**)(void, void, void))(v132 + 16);
    uint64_t v175 = (void (**)(uint64_t, uint64_t))(v132 + 8);
    uint64_t v172 = (char *)&type metadata for () + 8;
    uint64_t v173 = (void (**)(char *, uint64_t))(v130 + 8);
    *(void *)&long long v98 = 136446210;
    long long v170 = v98;
    uint64_t v168 = (char *)&type metadata for Any + 8;
    uint64_t v176 = (void (*)(char *, char *, unint64_t))v97;
    do
    {
      if (v177) {
        id v100 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v100 = *(id *)(v171 + 8 * v99);
      }
      uint64_t v101 = v100;
      if (__OFADD__(v99++, 1))
      {
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_86:
        swift_bridgeObjectRetain();
        uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_46;
      }
      uint64_t v103 = CKRecord.recordType.getter();
      uint64_t v105 = v104;
      swift_bridgeObjectRetain();
      v106._countAndFlagsBits = v103;
      v106._object = v105;
      Swift::Int v107 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, v106);
      swift_bridgeObjectRelease();
      if (v107)
      {
        if (v107 != 1)
        {
          if (*(void *)"cloudkit.share" == v103 && *(void **)".share" == v105
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_arrayDestroy();

            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v178 = v6;
            swift_arrayDestroy();
            if (qword_1003EC010 != -1) {
              swift_once();
            }
            uint64_t v124 = type metadata accessor for Logger();
            sub_100044058(v124, (uint64_t)qword_10040B6B8);
            swift_bridgeObjectRetain_n();
            uint64_t v125 = Logger.logObject.getter();
            os_log_type_t v126 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v125, v126))
            {
              uint64_t v127 = swift_slowAlloc();
              uint64_t v187 = swift_slowAlloc();
              *(_DWORD *)uint64_t v127 = v170;
              swift_bridgeObjectRetain();
              *(void *)(v127 + 4) = sub_100037004(v103, (unint64_t)v105, &v187);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v125, v126, "Unable to find table for %{public}s", (uint8_t *)v127, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_bridgeObjectRelease();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            uint64_t v6 = v178;
            uint64_t v97 = (uint64_t)v176;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t v108 = (uint64_t)v149;
        if (qword_1003EBF98 != -1) {
          swift_once();
        }
        char v109 = 1;
        uint64_t v110 = qword_10040B528;
      }
      else
      {
        swift_bridgeObjectRelease();
        if (qword_1003EBF90 != -1) {
          swift_once();
        }
        char v109 = 0;
        uint64_t v110 = qword_10040B510;
        uint64_t v108 = (uint64_t)v149;
      }
      uint64_t v111 = v165;
      uint64_t v112 = sub_100044058(v165, (uint64_t)v110);
      (*v174)(v108, v112, v111);
      sub_1000FB768(v109, v108, v101, (uint64_t)v9);
      if (v6)
      {

        (*v175)(v108, v111);
        return swift_bridgeObjectRelease();
      }
      (*v175)(v108, v111);
      Connection.run(_:)();
      uint64_t v178 = 0;
      uint64_t v113 = type metadata accessor for TaskPriority();
      uint64_t v114 = *(void *)(v113 - 8);
      uint64_t v115 = (uint64_t)v138;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v114 + 56))(v138, 1, 1, v113);
      uint64_t v116 = sub_1000FEFF0(&qword_1003EF758, (void (*)(uint64_t))type metadata accessor for CloudStorageStore);
      uint64_t v117 = swift_allocObject();
      uint64_t v118 = v169;
      *(void *)(v117 + 16) = v169;
      *(void *)(v117 + 24) = v116;
      *(unsigned char *)(v117 + 32) = v109;
      *(void *)(v117 + 40) = v101;
      *(void *)(v117 + 48) = v118;
      *(void *)(v117 + 56) = v139;
      LODWORD(v116) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v115, 1, v113);
      swift_retain_n();
      id v119 = v101;
      if (v116 == 1)
      {
        sub_10000A520(v115, (uint64_t *)&unk_1003F3C10);
        if (!*(void *)(v117 + 16)) {
          goto LABEL_72;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v115, v113);
        if (!*(void *)(v117 + 16))
        {
LABEL_72:
          uint64_t v120 = 0;
          uint64_t v122 = 0;
          goto LABEL_73;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v120 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v122 = v121;
      swift_unknownObjectRelease();
LABEL_73:
      uint64_t v123 = swift_allocObject();
      *(void *)(v123 + 16) = &unk_1003EF760;
      *(void *)(v123 + 24) = v117;
      if (v122 | v120)
      {
        uint64_t v183 = 0;
        uint64_t v184 = 0;
        uint64_t v185 = v120;
        uint64_t v186 = v122;
      }
      uint64_t v97 = (uint64_t)v176;
      swift_task_create();

      swift_release();
      uint64_t v9 = v156;
      (*v173)(v156, v145);
      uint64_t v6 = v178;
    }
    while (v99 != v97);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FB484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 56) = a5;
  *(void *)(v6 + 16) = a4;
  *(void *)(v6 + 24) = a6;
  *(void *)(v6 + 32) = type metadata accessor for CloudStorageStore.State(0);
  *(void *)(v6 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_1000FB520, a4, 0);
}

uint64_t sub_1000FB520()
{
  uint64_t v1 = *(unsigned char **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 56) & 1;
  uint64_t v4 = &v1[*(int *)(sub_100044014(&qword_1003EF5E8) + 48)];
  *uint64_t v1 = v3;
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v4, v2, v5);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000FB63C;
  uint64_t v7 = *(void *)(v0 + 40);
  return sub_1000F7D94(v7);
}

uint64_t sub_1000FB63C()
{
  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_100100488(v1, type metadata accessor for CloudStorageStore.State);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

void sub_1000FB768(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v96 = a4;
  uint64_t v97 = a2;
  uint64_t v100 = sub_100044014(&qword_1003EF200);
  uint64_t v103 = *(void *)(v100 - 8);
  uint64_t v7 = __chkstk_darwin(v100);
  uint64_t v94 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v86 - v9;
  uint64_t v95 = (int *)type metadata accessor for FriendSharedSecretsRecord();
  __chkstk_darwin(v95);
  uint64_t v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OnConflict();
  uint64_t v101 = *(void *)(v13 - 8);
  uint64_t v102 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v99 = (unint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v93 = (char *)&v86 - v16;
  uint64_t v17 = type metadata accessor for Fence.Schedule();
  uint64_t v92 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v98 = (int *)type metadata accessor for FenceRecord();
  __chkstk_darwin(v98);
  uint64_t v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = a3;
  if (a1)
  {
    sub_1000E02F0(v25, (uint64_t)v12);
    if (v4) {
      return;
    }
    (*(void (**)(unint64_t, void, uint64_t))(v101 + 104))(v99, enum case for OnConflict.replace(_:), v102);
    sub_100044014(&qword_1003EF7C8);
    id v40 = *(char **)(*(void *)(type metadata accessor for Setter() - 8) + 72);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_100367F20;
    long long v98 = (int *)v41;
    if (qword_1003EBFA0 != -1) {
      swift_once();
    }
    uint64_t v91 = 0;
    uint64_t v42 = sub_100044014(&qword_1003EF240);
    sub_100044058(v42, (uint64_t)qword_10040B540);
    type metadata accessor for UUID();
    <- infix<A>(_:_:)();
    uint64_t v43 = v95;
    if (qword_1003EBFD8 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_100044014(&qword_1003EF280);
    sub_100044058(v44, (uint64_t)qword_10040B5E8);
    LOBYTE(v104) = v12[v43[5]];
    sub_1000EA3C8();
    <- infix<A>(_:_:)();
    if (qword_1003EBFE0 != -1) {
      swift_once();
    }
    uint64_t v45 = v100;
    uint64_t v46 = sub_100044058(v100, (uint64_t)qword_10040B600);
    uint64_t v47 = v103;
    uint64_t v92 = *(void *)(v103 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v92)(v10, v46, v45);
    id v48 = &v12[v43[6]];
    long long v50 = *(int **)v48;
    unint64_t v49 = *((void *)v48 + 1);
    if (v49 >> 60 == 15) {
      long long v50 = 0;
    }
    unint64_t v51 = 0xF000000000000000;
    if (v49 >> 60 != 15) {
      unint64_t v51 = v49;
    }
    long long v104 = v50;
    *(void *)&long long v105 = v51;
    <- infix<A>(_:_:)();
    uint64_t v52 = *(int **)(v47 + 8);
    uint64_t v103 = v47 + 8;
    int v90 = v52;
    ((void (*)(char *, uint64_t))v52)(v10, v45);
    uint64_t v93 = v40;
    if (qword_1003EBFE8 != -1) {
      swift_once();
    }
    uint64_t v53 = sub_100044014(&qword_1003EF210);
    sub_100044058(v53, (uint64_t)qword_10040B618);
    type metadata accessor for Date();
    <- infix<A>(_:_:)();
    if (qword_1003EBFF0 != -1) {
      swift_once();
    }
    uint64_t v54 = v100;
    uint64_t v55 = sub_100044058(v100, (uint64_t)qword_10040B630);
    uint64_t v56 = v94;
    ((void (*)(char *, uint64_t, uint64_t))v92)(v94, v55, v54);
    uint64_t v57 = &v12[v43[8]];
    id v59 = *(int **)v57;
    unint64_t v58 = *((void *)v57 + 1);
    if (v58 >> 60 == 15) {
      id v59 = 0;
    }
    unint64_t v60 = 0xF000000000000000;
    if (v58 >> 60 != 15) {
      unint64_t v60 = v58;
    }
    long long v104 = v59;
    *(void *)&long long v105 = v60;
    <- infix<A>(_:_:)();
    ((void (*)(char *, uint64_t))v90)(v56, v54);
    if (qword_1003EBFF8 != -1) {
      swift_once();
    }
    sub_100044058(v53, (uint64_t)qword_10040B648);
    <- infix<A>(_:_:)();
    type metadata accessor for Table();
    unint64_t v61 = v99;
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v101 + 8))(v61, v102);
    unint64_t v62 = type metadata accessor for FriendSharedSecretsRecord;
    uint64_t v63 = (uint64_t)v12;
  }
  else
  {
    sub_1000CDF78(v25, (uint64_t)v24);
    if (v4) {
      return;
    }
    uint64_t v26 = self;
    uint64_t v27 = v98;
    uint64_t v28 = *(void *)&v24[v98[6]];
    long long v104 = 0;
    id v29 = [v26 archivedDataWithRootObject:v28 requiringSecureCoding:1 error:&v104];
    uint64_t v30 = v104;
    if (!v29)
    {
      uint64_t v64 = v30;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100100488((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for FenceRecord);
      return;
    }
    uint64_t v95 = (int *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v99 = v31;

    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v103 = PropertyListEncoder.init()();
    uint64_t v32 = &v24[v27[10]];
    uint64_t v33 = *(int **)v32;
    uint64_t v94 = v24;
    uint64_t v34 = *((void *)v32 + 11);
    long long v104 = v33;
    long long v105 = *(_OWORD *)(v32 + 8);
    long long v106 = *(_OWORD *)(v32 + 24);
    long long v107 = *(_OWORD *)(v32 + 40);
    long long v108 = *(_OWORD *)(v32 + 56);
    long long v35 = (int *)v105;
    long long v109 = *(_OWORD *)(v32 + 72);
    uint64_t v110 = v34;
    uint64_t v91 = 0;
    unint64_t v36 = v108;
    sub_100100B8C();
    int v90 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v89 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = v91;
    unint64_t v38 = (int *)dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v91 = v37;
    if (v37)
    {
      swift_release();
      sub_100044090((uint64_t)v95, v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v87 = v38;
      unint64_t v88 = v39;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = (uint64_t)v94;
      sub_100013210((uint64_t)&v94[v98[8]], (uint64_t)v22, &qword_1003EE810);
      uint64_t v66 = v92;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v22, 1, v17) == 1)
      {
        int v90 = 0;
        unint64_t v89 = 0xF000000000000000;
        unint64_t v67 = v99;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v19, v22, v17);
        sub_1000FEFF0(&qword_1003EF7D8, (void (*)(uint64_t))&type metadata accessor for Fence.Schedule);
        uint64_t v68 = v91;
        uint64_t v69 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        unint64_t v67 = v99;
        if (v68)
        {
          (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v17);
          sub_100044090((uint64_t)v87, v88);
          sub_100044090((uint64_t)v95, v67);
          sub_100100488(v65, (uint64_t (*)(void))type metadata accessor for FenceRecord);
          swift_release();
          return;
        }
        unint64_t v89 = v70;
        int v90 = (int *)v69;
        uint64_t v91 = 0;
        (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v17);
      }
      (*(void (**)(char *, void, uint64_t))(v101 + 104))(v93, enum case for OnConflict.replace(_:), v102);
      sub_100044014(&qword_1003EF7C8);
      type metadata accessor for Setter();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1003677D0;
      if (qword_1003EBFA0 != -1) {
        swift_once();
      }
      uint64_t v71 = sub_100044014(&qword_1003EF240);
      sub_100044058(v71, (uint64_t)qword_10040B540);
      type metadata accessor for UUID();
      <- infix<A>(_:_:)();
      uint64_t v72 = v95;
      if (qword_1003EBFA8 != -1) {
        swift_once();
      }
      uint64_t v73 = sub_100044014(&qword_1003EF230);
      sub_100044058(v73, (uint64_t)qword_10040B558);
      uint64_t v74 = v65 + v98[5];
      uint64_t v76 = *(int **)v74;
      uint64_t v75 = *(void *)(v74 + 8);
      long long v104 = v76;
      *(void *)&long long v105 = v75;
      <- infix<A>(_:_:)();
      if (qword_1003EBFB0 != -1) {
        swift_once();
      }
      uint64_t v77 = sub_100044014(&qword_1003EF1F0);
      sub_100044058(v77, (uint64_t)qword_10040B570);
      long long v104 = v72;
      *(void *)&long long v105 = v67;
      <- infix<A>(_:_:)();
      if (qword_1003EBFB8 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_100044014(&qword_1003EF220);
      sub_100044058(v78, (uint64_t)qword_10040B588);
      long long v104 = *(int **)(v65 + v98[7]);
      <- infix<A>(_:_:)();
      if (qword_1003EBFC0 != -1) {
        swift_once();
      }
      uint64_t v79 = sub_100044014(&qword_1003EF210);
      sub_100044058(v79, (uint64_t)qword_10040B5A0);
      type metadata accessor for Date();
      <- infix<A>(_:_:)();
      if (qword_1003EBFC8 != -1) {
        swift_once();
      }
      sub_100044058(v77, (uint64_t)qword_10040B5B8);
      uint64_t v80 = (uint64_t)v87;
      unint64_t v81 = v88;
      long long v104 = v87;
      *(void *)&long long v105 = v88;
      <- infix<A>(_:_:)();
      uint64_t v82 = (uint64_t)v95;
      if (qword_1003EBFD0 != -1) {
        swift_once();
      }
      sub_100044058(v100, (uint64_t)qword_10040B5D0);
      uint64_t v83 = (uint64_t)v90;
      unint64_t v84 = v89;
      long long v104 = v90;
      *(void *)&long long v105 = v89;
      <- infix<A>(_:_:)();
      type metadata accessor for Table();
      uint64_t v85 = v93;
      QueryType.insert(or:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1000440E8(v83, v84);
      sub_100044090(v80, v81);
      sub_100044090(v82, v99);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v85, v102);
    }
    unint64_t v62 = type metadata accessor for FenceRecord;
    uint64_t v63 = (uint64_t)v94;
  }
  sub_100100488(v63, (uint64_t (*)(void))v62);
}

uint64_t sub_1000FC7D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 232) = a5;
  *(void *)(v6 + 240) = a6;
  *(unsigned char *)(v6 + 368) = a4;
  *(void *)(v6 + 248) = type metadata accessor for CloudStorageStore.State(0);
  *(void *)(v6 + 256) = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  *(void *)(v6 + 264) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendSharedSecretsRecord();
  *(void *)(v6 + 272) = v8;
  *(void *)(v6 + 280) = *(void *)(v8 - 8);
  *(void *)(v6 + 288) = swift_task_alloc();
  sub_100044014(&qword_1003EE290);
  *(void *)(v6 + 296) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FenceRecord();
  *(void *)(v6 + 304) = v9;
  *(void *)(v6 + 312) = *(void *)(v9 - 8);
  *(void *)(v6 + 320) = swift_task_alloc();
  return _swift_task_switch(sub_1000FC98C, a6, 0);
}

uint64_t sub_1000FC98C()
{
  char v1 = *(unsigned char *)(v0 + 368);
  id v2 = *(id *)(v0 + 232);
  if (v1)
  {
    sub_1000E02F0(v2, *(void *)(v0 + 288));
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000FD230;
    uint64_t v8 = *(void *)(v0 + 288);
    uint64_t v9 = *(void *)(v0 + 264);
    return sub_1000F6B40(v9, v8);
  }
  else
  {
    sub_1000CDF78(v2, *(void *)(v0 + 320));
    char v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v3;
    *char v3 = v0;
    v3[1] = sub_1000FCCF8;
    uint64_t v4 = *(void *)(v0 + 320);
    uint64_t v5 = *(void *)(v0 + 296);
    return sub_1000F62B0(v5, v4);
  }
}

uint64_t sub_1000FCCF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  if (v0) {
    uint64_t v4 = sub_1000FD954;
  }
  else {
    uint64_t v4 = sub_1000FCE24;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FCE24()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 296);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 312) + 48))(v2, 1, v1);
  uint64_t v4 = *(void *)(v0 + 320);
  if (v3 == 1)
  {
    sub_100100488(*(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for FenceRecord);
    sub_10000A520(v2, &qword_1003EE290);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(void *)(v0 + 88) = 0;
  }
  else
  {
    *(void *)(v0 + 80) = v1;
    *(void *)(v0 + 88) = sub_1000FEFF0(&qword_1003EF488, (void (*)(uint64_t))type metadata accessor for FenceRecord);
    uint64_t v5 = sub_10003E0F4((uint64_t *)(v0 + 56));
    sub_1001004E8(v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    sub_100100488(v4, (uint64_t (*)(void))type metadata accessor for FenceRecord);
  }
  sub_100013B50(v0 + 56, v0 + 16, &qword_1003EF7B8);
  sub_100013210(v0 + 16, v0 + 176, &qword_1003EF7B8);
  if (*(void *)(v0 + 200))
  {
    uint64_t v6 = *(void *)(v0 + 256);
    sub_100022CC0((long long *)(v0 + 176), v0 + 136);
    sub_100050C1C(v0 + 136, v6);
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000FD768;
    uint64_t v8 = *(void *)(v0 + 256);
    return sub_1000F7D94(v8);
  }
  else
  {
    sub_10000A520(v0 + 176, &qword_1003EF7B8);
    if (qword_1003EC010 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100044058(v10, (uint64_t)qword_10040B6B8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = *(unsigned char *)(v0 + 368);
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v19 = v15;
      if (v13) {
        uint64_t v16 = 0xD000000000000014;
      }
      else {
        uint64_t v16 = 0x65636E65662ELL;
      }
      if (v13) {
        unint64_t v17 = 0x8000000100375790;
      }
      else {
        unint64_t v17 = 0xE600000000000000;
      }
      *(void *)(v0 + 216) = sub_100037004(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to convert %s to CloudBacked!", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10000A520(v0 + 16, &qword_1003EF7B8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_1000FD230()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  if (v0) {
    uint64_t v4 = sub_1000FDB9C;
  }
  else {
    uint64_t v4 = sub_1000FD35C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FD35C()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 264);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 280) + 48))(v2, 1, v1);
  uint64_t v4 = *(void *)(v0 + 288);
  if (v3 == 1)
  {
    sub_100100488(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    sub_10000A520(v2, &qword_1003EEEB8);
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *(void *)(v0 + 128) = 0;
  }
  else
  {
    *(void *)(v0 + 120) = v1;
    *(void *)(v0 + 128) = sub_1000FEFF0(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v5 = sub_10003E0F4((uint64_t *)(v0 + 96));
    sub_1001004E8(v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    sub_100100488(v4, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  }
  sub_100013B50(v0 + 96, v0 + 16, &qword_1003EF7B8);
  sub_100013210(v0 + 16, v0 + 176, &qword_1003EF7B8);
  if (*(void *)(v0 + 200))
  {
    uint64_t v6 = *(void *)(v0 + 256);
    sub_100022CC0((long long *)(v0 + 176), v0 + 136);
    sub_100050C1C(v0 + 136, v6);
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000FD768;
    uint64_t v8 = *(void *)(v0 + 256);
    return sub_1000F7D94(v8);
  }
  else
  {
    sub_10000A520(v0 + 176, &qword_1003EF7B8);
    if (qword_1003EC010 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100044058(v10, (uint64_t)qword_10040B6B8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = *(unsigned char *)(v0 + 368);
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v19 = v15;
      if (v13) {
        uint64_t v16 = 0xD000000000000014;
      }
      else {
        uint64_t v16 = 0x65636E65662ELL;
      }
      if (v13) {
        unint64_t v17 = 0x8000000100375790;
      }
      else {
        unint64_t v17 = 0xE600000000000000;
      }
      *(void *)(v0 + 216) = sub_100037004(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to convert %s to CloudBacked!", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10000A520(v0 + 16, &qword_1003EF7B8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_1000FD768()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256);
  uint64_t v2 = *(void *)(*(void *)v0 + 240);
  swift_task_dealloc();
  sub_100100488(v1, type metadata accessor for CloudStorageStore.State);
  return _swift_task_switch(sub_1000FD8A8, v2, 0);
}

uint64_t sub_1000FD8A8()
{
  sub_1000233E4(v0 + 136);
  sub_10000A520(v0 + 16, &qword_1003EF7B8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FD954()
{
  sub_100100488(v0[40], (uint64_t (*)(void))type metadata accessor for FenceRecord);
  if (qword_1003EC010 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B6B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[28] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to update modifiedRecord: %@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000FDB9C()
{
  sub_100100488(v0[36], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  if (qword_1003EC010 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B6B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[28] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to update modifiedRecord: %@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000FDDE4()
{
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v0 + 16) = swift_task_alloc();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FDEA4;
  return daemon.getter();
}

uint64_t sub_1000FDEA4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 32) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for FenceService(0);
  uint64_t v6 = sub_1000FEFF0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000FEFF0(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  *uint64_t v3 = v9;
  v3[1] = sub_1000FE080;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000FE080(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000FE364;
    uint64_t v6 = 0;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 56) = a1;
    uint64_t v5 = sub_1000FE1BC;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000FE1BC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = sub_1000FEFF0(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v1;
  swift_retain_n();
  sub_10012EDF8(v2, (uint64_t)&unk_1003EF748, (uint64_t)v5);
  swift_release();
  return _swift_task_switch(sub_1000FE2F4, 0, 0);
}

uint64_t sub_1000FE2F4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FE364()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FE3D4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000FE3F4, v0, 0);
}

uint64_t sub_1000FE3F4()
{
  if (qword_1003EC010 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B6B8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Purging DB", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  uint64_t v6 = *(void *)(v5 + 112);
  *(void *)(v0 + 24) = v6;
  return _swift_task_switch(sub_1000FE518, v6, 0);
}

uint64_t sub_1000FE518()
{
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  Database.purge()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double sub_1000FE5DC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = CKRecord.recordType.getter();
  uint64_t v6 = v5;
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  Swift::Int v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, v7);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    uint64_t v9 = type metadata accessor for FenceRecord();
    uint64_t v10 = &qword_1003EF488;
    uint64_t v11 = type metadata accessor for FenceRecord;
    goto LABEL_5;
  }
  if (v8 == 1)
  {
    uint64_t v9 = type metadata accessor for FriendSharedSecretsRecord();
    uint64_t v10 = (unint64_t *)&unk_1003EF710;
    uint64_t v11 = type metadata accessor for FriendSharedSecretsRecord;
LABEL_5:
    uint64_t v12 = sub_1000FEFF0(v10, (void (*)(uint64_t))v11);
    *(void *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = v12;
    sub_10003E0F4((uint64_t *)a2);
    id v13 = a1;
    dispatch thunk of CloudBacked.init(ckRecord:)();
    return result;
  }
  if (qword_1003EC010 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100044058(v15, (uint64_t)qword_10040B6B8);
  id v16 = a1;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446210;
    uint64_t v20 = CKRecord.recordType.getter();
    sub_100037004(v20, v21, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unexpected recordType: %{public}s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  *(void *)(a2 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_1000FE894()
{
  return _swift_task_switch(sub_1000FE8B0, v0, 0);
}

uint64_t sub_1000FE8B0()
{
  if (qword_1003EC018 != -1) {
    swift_once();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_1000FE94C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000FE97C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_1000F940C(a1);
}

uint64_t sub_1000FEA10(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_1000FEA34, v2, 0);
}

uint64_t sub_1000FEA34()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = CloudKitChangeSet.recordIDsToDelete.getter();
  unint64_t v3 = sub_1000F481C(v2);
  v0[6] = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1000F4C9C(v1);
  v0[7] = v4;
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000FEB70;
  return sub_1000F4ED4(v3, v5, 1);
}

uint64_t sub_1000FEB70()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_1000FED08;
  }
  else {
    uint64_t v4 = sub_1000FEC9C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FEC9C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FED08()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FED74(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1000F4ED4(a1, a2, 1);
}

uint64_t sub_1000FEE1C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000FEE3C, v0, 0);
}

uint64_t sub_1000FEE3C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112);
  *(void *)(v0 + 24) = v1;
  return _swift_task_switch(sub_1000FEE60, v1, 0);
}

uint64_t sub_1000FEE60()
{
  type metadata accessor for CloudStorageDatabase();
  sub_1000FEFF0(&qword_1003EF2C8, (void (*)(uint64_t))type metadata accessor for CloudStorageDatabase);
  Database.startup()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FEF24()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100018CD0;
  v2[2] = v0;
  return _swift_task_switch(sub_1000FE3F4, v0, 0);
}

double sub_1000FEFC8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FE5DC(a1, a2);
}

uint64_t sub_1000FEFF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FF038()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B6D8);
  sub_100044058(v0, (uint64_t)qword_10040B6D8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000FF0C0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000FF148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v59 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v58 = (char *)&v55 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v57 = (char *)&v55 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v55 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v55 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v55 - v16;
  uint64_t v18 = type metadata accessor for CloudStorageStore.State(0);
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v21 = (unsigned __int8 *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (long long *)((char *)&v55 - v22);
  uint64_t v24 = sub_100044014(&qword_1003EF7A8);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = (long long *)&v27[*(int *)(v25 + 56)];
  sub_1001003C0(a1, (uint64_t)v27);
  sub_1001003C0(a2, (uint64_t)v28);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1001003C0((uint64_t)v27, (uint64_t)v23);
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_100022CC0(v23, (uint64_t)v62);
      sub_100022CC0(v28, (uint64_t)v61);
      sub_100042524(v62, v62[3]);
      dispatch thunk of CloudBacked.id.getter();
      sub_100042524(v61, v61[3]);
      dispatch thunk of CloudBacked.id.getter();
      char v50 = static UUID.== infix(_:_:)();
      unint64_t v51 = *(void (**)(char *, uint64_t))(v60 + 8);
      v51(v15, v4);
      v51(v17, v4);
      sub_1000233E4((uint64_t)v61);
      sub_1000233E4((uint64_t)v62);
LABEL_32:
      sub_100100488((uint64_t)v27, type metadata accessor for CloudStorageStore.State);
      return v50 & 1;
    }
    sub_1000233E4((uint64_t)v23);
    goto LABEL_27;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1001003C0((uint64_t)v27, (uint64_t)v21);
    uint64_t v30 = *(int *)(sub_100044014(&qword_1003EF5E8) + 48);
    unint64_t v31 = &v21[v30];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v32 = *v21;
      int v33 = *(unsigned __int8 *)v28;
      uint64_t v34 = (char *)v28 + v30;
      uint64_t v35 = v60;
      unint64_t v36 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v60 + 32);
      uint64_t v37 = v56;
      v36(v56, v31, v4);
      unint64_t v38 = v57;
      v36(v57, (unsigned __int8 *)v34, v4);
      if (v32) {
        unint64_t v39 = 0xD000000000000019;
      }
      else {
        unint64_t v39 = 0x65636E6546;
      }
      if (v32) {
        unint64_t v40 = 0x8000000100372D80;
      }
      else {
        unint64_t v40 = 0xE500000000000000;
      }
      BOOL v41 = v33 == 0;
      uint64_t v42 = v38;
      if (v41) {
        unint64_t v43 = 0x65636E6546;
      }
      else {
        unint64_t v43 = 0xD000000000000019;
      }
      if (v41) {
        unint64_t v44 = 0xE500000000000000;
      }
      else {
        unint64_t v44 = 0x8000000100372D80;
      }
      BOOL v45 = v39 == v43 && v40 == v44;
      uint64_t v47 = v58;
      uint64_t v46 = v59;
      if (v45)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
        v52(v47, v37, v4);
        v52(v46, v42, v4);
      }
      else
      {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v49 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
        v49(v47, v37, v4);
        v49(v46, v42, v4);
        char v50 = 0;
        if ((v48 & 1) == 0) {
          goto LABEL_31;
        }
      }
      char v50 = static UUID.== infix(_:_:)();
LABEL_31:
      uint64_t v53 = *(void (**)(char *, uint64_t))(v35 + 8);
      v53(v46, v4);
      v53(v47, v4);
      v53(v42, v4);
      v53(v37, v4);
      goto LABEL_32;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v60 + 8))(&v21[v30], v4);
    goto LABEL_27;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_27:
    sub_10000A520((uint64_t)v27, &qword_1003EF7A8);
    char v50 = 0;
    return v50 & 1;
  }
  sub_100100488((uint64_t)v27, type metadata accessor for CloudStorageStore.State);
  char v50 = 1;
  return v50 & 1;
}

uint64_t sub_1000FF6F8()
{
  uint64_t v0 = type metadata accessor for FenceRecord();
  uint64_t v53 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v52 = (uint64_t *)((char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v43 - v3;
  uint64_t v5 = sub_100044014(&qword_1003EF6D8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = type metadata accessor for Row();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (void (*)(void))((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = v54;
  uint64_t result = Connection.prepare(_:)();
  if (!v20)
  {
    uint64_t v22 = result;
    uint64_t v46 = v17;
    uint64_t v47 = v4;
    unint64_t v51 = v14;
    BOOL v45 = v19;
    char v48 = v10;
    swift_retain();
    uint64_t v23 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    uint64_t v55 = &_swiftEmptyArrayStorage;
    sub_100245D88(0, v23 & ~(v23 >> 63), 0);
    swift_retain();
    uint64_t v54 = dispatch thunk of _AnySequenceBox._makeIterator()();
    uint64_t v43 = v22;
    uint64_t result = swift_release();
    if (v23 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v23)
    {
      uint64_t v24 = (void (**)(void (*)(void), char *, uint64_t))(v44 + 16);
      unint64_t v49 = (void (**)(char *, uint64_t))(v44 + 8);
      char v50 = (uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
      uint64_t v25 = (unsigned int (*)(void, void, void))v52;
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t result = (*v50)(v8, 1, v11);
        if (result == 1) {
          goto LABEL_22;
        }
        uint64_t v26 = (uint64_t)v51;
        (*v24)(v51, v8, v11);
        sub_1000F8580(v26, (uint64_t)v25);
        (*v49)(v8, v11);
        uint64_t v27 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100245D88(0, v27[2] + 1, 1);
          uint64_t v27 = v55;
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          sub_100245D88(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v55;
        }
        v27[2] = v29 + 1;
        uint64_t v25 = (unsigned int (*)(void, void, void))v52;
        sub_1001004E8((uint64_t)v52, (uint64_t)v27+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v29, (uint64_t (*)(void))type metadata accessor for FenceRecord);
      }
      while (--v23);
    }
    uint64_t v30 = (uint64_t)v48;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v31 = v44;
    uint64_t v52 = *(void **)(v44 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52)(v30, 1, v11) != 1)
    {
      uint64_t v34 = *(void (**)(void))(v31 + 32);
      uint64_t v33 = v31 + 32;
      unint64_t v51 = v34;
      uint64_t v35 = (void (**)(char *, char *, uint64_t))(v33 - 16);
      unint64_t v36 = (void (**)(char *, uint64_t))(v33 - 24);
      uint64_t v37 = (uint64_t)v47;
      do
      {
        unint64_t v38 = v45;
        v51();
        uint64_t v39 = (uint64_t)v46;
        (*v35)(v46, v38, v11);
        sub_1000F8580(v39, v37);
        (*v36)(v38, v11);
        unint64_t v40 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100245D88(0, v40[2] + 1, 1);
          unint64_t v40 = v55;
        }
        unint64_t v42 = v40[2];
        unint64_t v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_100245D88(v41 > 1, v42 + 1, 1);
          unint64_t v40 = v55;
        }
        v40[2] = v42 + 1;
        uint64_t v37 = (uint64_t)v47;
        sub_1001004E8((uint64_t)v47, (uint64_t)v40+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v42, (uint64_t (*)(void))type metadata accessor for FenceRecord);
        uint64_t v30 = (uint64_t)v48;
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52)(v30, 1, v11) != 1);
    }
    swift_release();
    sub_10000A520(v30, &qword_1003EF6D8);
    swift_release_n();
    int v32 = v55;
    sub_100044014(&qword_1003EF6E0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v32;
  }
  return result;
}

unint64_t sub_1000FFD34()
{
  unint64_t result = qword_1003EF6F0;
  if (!qword_1003EF6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF6F0);
  }
  return result;
}

unint64_t sub_1000FFD88()
{
  unint64_t result = qword_1003EF6F8;
  if (!qword_1003EF6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF6F8);
  }
  return result;
}

uint64_t sub_1000FFDDC()
{
  return sub_1000F9BCC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1000FFE00()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FFE38()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_1000FDDE4();
}

uint64_t sub_1000FFEE4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FFF24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100018CD0;
  return sub_10016DEA0(a1, v4, v5, v6);
}

uint64_t sub_1000FFFD8()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100100020(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100018CD0;
  return sub_1000FC7D8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001000F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100100130(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003EFE50 + dword_1003EFE50);
  return v6(a1, v4);
}

uint64_t sub_1001001E8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001002BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  uint64_t v9 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10004A274;
  return sub_1000FB484(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1001003C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudStorageStore.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100100424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudStorageStore.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100100488(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001004E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100100550()
{
  uint64_t v0 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v53 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v52 = (uint64_t *)((char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v43 - v3;
  uint64_t v5 = sub_100044014(&qword_1003EF6D8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  char v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = type metadata accessor for Row();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (void (*)(void))((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = v54;
  uint64_t result = Connection.prepare(_:)();
  if (!v20)
  {
    uint64_t v22 = result;
    uint64_t v46 = v17;
    uint64_t v47 = v4;
    unint64_t v51 = v14;
    BOOL v45 = v19;
    char v48 = v10;
    swift_retain();
    uint64_t v23 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    uint64_t v55 = _swiftEmptyArrayStorage;
    sub_100245E28(0, v23 & ~(v23 >> 63), 0);
    swift_retain();
    uint64_t v54 = dispatch thunk of _AnySequenceBox._makeIterator()();
    uint64_t v43 = v22;
    uint64_t result = swift_release();
    if (v23 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v23)
    {
      uint64_t v24 = (void (**)(void (*)(void), char *, uint64_t))(v44 + 16);
      unint64_t v49 = (void (**)(char *, uint64_t))(v44 + 8);
      char v50 = (uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
      uint64_t v25 = (unsigned int (*)(void, void, void))v52;
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t result = (*v50)(v8, 1, v11);
        if (result == 1) {
          goto LABEL_22;
        }
        uint64_t v26 = (uint64_t)v51;
        (*v24)(v51, v8, v11);
        sub_1000F8DA4(v26, (uint64_t)v25);
        (*v49)(v8, v11);
        uint64_t v27 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100245E28(0, v27[2] + 1, 1);
          uint64_t v27 = v55;
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          sub_100245E28(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v55;
        }
        v27[2] = v29 + 1;
        uint64_t v25 = (unsigned int (*)(void, void, void))v52;
        sub_1001004E8((uint64_t)v52, (uint64_t)v27+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v29, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      }
      while (--v23);
    }
    uint64_t v30 = (uint64_t)v48;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v31 = v44;
    uint64_t v52 = *(void **)(v44 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52)(v30, 1, v11) != 1)
    {
      uint64_t v34 = *(void (**)(void))(v31 + 32);
      uint64_t v33 = v31 + 32;
      unint64_t v51 = v34;
      uint64_t v35 = (void (**)(char *, char *, uint64_t))(v33 - 16);
      unint64_t v36 = (void (**)(char *, uint64_t))(v33 - 24);
      uint64_t v37 = (uint64_t)v47;
      do
      {
        unint64_t v38 = v45;
        v51();
        uint64_t v39 = (uint64_t)v46;
        (*v35)(v46, v38, v11);
        sub_1000F8DA4(v39, v37);
        (*v36)(v38, v11);
        unint64_t v40 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100245E28(0, v40[2] + 1, 1);
          unint64_t v40 = v55;
        }
        unint64_t v42 = v40[2];
        unint64_t v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_100245E28(v41 > 1, v42 + 1, 1);
          unint64_t v40 = v55;
        }
        v40[2] = v42 + 1;
        uint64_t v37 = (uint64_t)v47;
        sub_1001004E8((uint64_t)v47, (uint64_t)v40+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v42, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
        uint64_t v30 = (uint64_t)v48;
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52)(v30, 1, v11) != 1);
    }
    swift_release();
    sub_10000A520(v30, &qword_1003EF6D8);
    swift_release_n();
    int v32 = v55;
    sub_100044014(&qword_1003EF7C0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v32;
  }
  return result;
}

unint64_t sub_100100B8C()
{
  unint64_t result = qword_1003EF7D0;
  if (!qword_1003EF7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF7D0);
  }
  return result;
}

unsigned char *_s5ErrorOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100100C7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

unint64_t sub_100100CB8()
{
  unint64_t result = qword_1003EF800;
  if (!qword_1003EF800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF800);
  }
  return result;
}

unsigned char *_s15KnownRecordTypeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100100DDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s15KnownRecordTypeOMa()
{
  return &_s15KnownRecordTypeON;
}

uint64_t sub_100100E14(char *a1, char *a2)
{
  return sub_100102E80(*a1, *a2);
}

Swift::Int sub_100100E20()
{
  return Hasher._finalize()();
}

uint64_t sub_100100EA4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100100F14()
{
  return Hasher._finalize()();
}

uint64_t sub_100100F94@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD2E8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100100FF4(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x65636E6546;
  if (*v1) {
    unint64_t v2 = 0xD000000000000019;
  }
  unint64_t v3 = 0x8000000100372D80;
  if (!*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100101034(void *a1@<X8>)
{
  *a1 = &off_1003DD368;
}

uint64_t sub_100101044()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x65636E65662ELL;
  }
}

unint64_t sub_100101084()
{
  unint64_t result = qword_1003EF808;
  if (!qword_1003EF808)
  {
    sub_10004AE58(&qword_1003EF810);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF808);
  }
  return result;
}

unint64_t sub_1001010E4()
{
  unint64_t result = qword_1003EF818;
  if (!qword_1003EF818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF818);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100101204);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversionError()
{
  return &type metadata for ConversionError;
}

unint64_t sub_100101240()
{
  unint64_t result = qword_1003EF820;
  if (!qword_1003EF820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF820);
  }
  return result;
}

unint64_t sub_100101294(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFF48);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100013210(v6, (uint64_t)&v15, &qword_1003EFF50);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10003B888(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100022CC0(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001013D8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFF58);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100013210(v6, (uint64_t)v13, &qword_1003EFF60);
    char v7 = v13[0];
    unint64_t result = sub_100121F60(v13[0]);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v7;
    unint64_t result = sub_100022CC0(&v14, v3[7] + 40 * result);
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010150C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFFB8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100013210(v6, (uint64_t)v13, &qword_1003EFFC0);
    char v7 = v13[0];
    unint64_t result = sub_100121FE8(v13[0]);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v7;
    unint64_t result = sub_100022CC0(&v14, v3[7] + 40 * result);
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101640(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFFC8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100013210(v6, (uint64_t)&v15, &qword_1003EFFD0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10003B888(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100058DA0(v17, (_OWORD *)(v3[7] + 48 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 64;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101784(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F0008);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFFF0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100013210(v12, (uint64_t)v5, &qword_1003F0008);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_10003B888(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for Handle();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101984(uint64_t a1)
{
  return sub_1001019D4(a1, &qword_1003EFFF8, &qword_1003F0000, (uint64_t (*)(uint64_t *, unint64_t))sub_100023434);
}

unint64_t sub_1001019AC(uint64_t a1)
{
  return sub_1001019D4(a1, &qword_1003EFFA0, &qword_1003EFFA8, (uint64_t (*)(uint64_t *, unint64_t))sub_100023434);
}

unint64_t sub_1001019D4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100013210(v11, (uint64_t)&v20, a3);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    unint64_t result = sub_10003B888(v20, v21);
    if (v15) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v8[6] + 16 * result);
    uint64_t *v16 = v12;
    v16[1] = v13;
    unint64_t result = a4(&v22, v8[7] + 32 * result);
    uint64_t v17 = v8[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v8[2] = v19;
    v11 += 48;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101B14(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFF70);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003B888(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101C28(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003F00E8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    char v5 = *((unsigned char *)v4 - 8);
    long long v11 = *v4;
    swift_retain();
    unint64_t result = sub_100122290(v5);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    uint64_t v8 = v2[2];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    uint64_t v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101D3C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFFD8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100013210(v6, (uint64_t)&v15, &qword_1003EFFE0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10003B888(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100058CFC(v17, (_OWORD *)(v3[7] + 48 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 64;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100101E80(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 12400;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 12656;
      break;
    case 2:
      unint64_t v3 = 0x8000000100372B30;
      unint64_t v4 = 0xD000000000000015;
      break;
    case 3:
      unint64_t v3 = 0xE100000000000000;
      unint64_t v4 = 118;
      break;
    case 4:
      unint64_t v4 = 0x64726F6365526B63;
      unint64_t v3 = 0xEC000000656D614ELL;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 12400;
  switch(a2)
  {
    case 1:
      if (v4 == 12656) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0x8000000100372B30;
      if (v4 != 0xD000000000000015) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 118;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xEC000000656D614ELL;
      if (v4 != 0x64726F6365526B63) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100102018(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 62;
  uint64_t v9 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100022C64(a1, a2);
LABEL_7:
      unint64_t v12 = a4 >> 62;
      switch(a4 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_62;
          }
          if (v9 == HIDWORD(a3) - a3) {
            goto LABEL_17;
          }
          goto LABEL_26;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v15 = __OFSUB__(v13, v14);
          uint64_t v16 = v13 - v14;
          if (v15) {
            goto LABEL_61;
          }
          if (v9 != v16) {
            goto LABEL_26;
          }
LABEL_17:
          if (v9 >= 1)
          {
            switch((int)v4)
            {
              case 1:
                if (a1 >> 32 < (int)a1) {
                  goto LABEL_63;
                }
                sub_100022C64(a3, a4);
                sub_100022C64(a3, a4);
                char v22 = sub_1001292D0((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
LABEL_39:
                sub_100044090(a1, a2);
                sub_100044090(a3, a4);
                sub_100044090(a3, a4);
                return v22 & 1;
              case 2:
                uint64_t v23 = *(void *)(a1 + 16);
                uint64_t v24 = *(void *)(a1 + 24);
                sub_100022C64(a3, a4);
                sub_100022C64(a3, a4);
                swift_retain();
                swift_retain();
                char v22 = sub_1001292D0(v23, v24, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                swift_release();
                swift_release();
                goto LABEL_39;
              case 3:
                memset(__s1, 0, 14);
                if (!v12) {
                  goto LABEL_40;
                }
                if (v12 != 1)
                {
                  uint64_t v31 = *(void *)(a3 + 16);
                  uint64_t v32 = *(void *)(a3 + 24);
                  sub_100022C64(a3, a4);
                  sub_100022C64(a3, a4);
                  swift_retain();
                  swift_retain();
                  uint64_t v33 = (char *)__DataStorage._bytes.getter();
                  if (v33)
                  {
                    uint64_t v34 = __DataStorage._offset.getter();
                    if (__OFSUB__(v31, v34))
                    {
LABEL_69:
                      __break(1u);
LABEL_70:
                      __break(1u);
                    }
                    v33 += v31 - v34;
                  }
                  BOOL v15 = __OFSUB__(v32, v31);
                  int64_t v35 = v32 - v31;
                  if (!v15)
                  {
                    uint64_t v36 = __DataStorage._length.getter();
                    if (!v33)
                    {
                      sub_100044090(a3, a4);
                      __break(1u);
LABEL_48:
                      uint64_t v37 = *(void *)(a3 + 16);
                      uint64_t v38 = *(void *)(a3 + 24);
                      sub_100022C64(a3, a4);
                      sub_100022C64(a3, a4);
                      swift_retain();
                      swift_retain();
                      uint64_t v33 = (char *)__DataStorage._bytes.getter();
                      if (v33)
                      {
                        uint64_t v39 = __DataStorage._offset.getter();
                        if (__OFSUB__(v37, v39)) {
                          goto LABEL_70;
                        }
                        v33 += v37 - v39;
                      }
                      BOOL v15 = __OFSUB__(v38, v37);
                      int64_t v35 = v38 - v37;
                      if (v15) {
                        goto LABEL_67;
                      }
                      uint64_t v36 = __DataStorage._length.getter();
                      if (!v33)
                      {
LABEL_73:
                        sub_100044090(a3, a4);
                        __break(1u);
                        sub_100044090(a3, a4);
                        swift_release();
                        swift_release();
                        __break(1u);
                        sub_100044090(a3, a4);
                        __break(1u);
                        JUMPOUT(0x100102614);
                      }
                    }
                    if (v36 >= v35) {
                      size_t v40 = v35;
                    }
                    else {
                      size_t v40 = v36;
                    }
                    int v30 = memcmp(__s1, v33, v40);
                    swift_release();
                    swift_release();
                    goto LABEL_57;
                  }
LABEL_66:
                  __break(1u);
LABEL_67:
                  __break(1u);
LABEL_68:
                  __break(1u);
                  goto LABEL_69;
                }
                uint64_t v17 = (a3 >> 32) - (int)a3;
                if (a3 >> 32 >= (int)a3)
                {
                  sub_100022C64(a3, a4);
                  sub_100022C64(a3, a4);
                  uint64_t v25 = __DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v19 = v25;
                    uint64_t v26 = __DataStorage._offset.getter();
                    uint64_t v21 = (int)a3 - v26;
                    if (!__OFSUB__((int)a3, v26)) {
                      goto LABEL_34;
                    }
                    goto LABEL_68;
                  }
                  goto LABEL_72;
                }
                break;
              default:
                __s1[0] = a1;
                LOWORD(__s1[1]) = a2;
                BYTE2(__s1[1]) = BYTE2(a2);
                BYTE3(__s1[1]) = BYTE3(a2);
                BYTE4(__s1[1]) = BYTE4(a2);
                BYTE5(__s1[1]) = BYTE5(a2);
                if (!v12)
                {
LABEL_40:
                  uint64_t __s2 = a3;
                  __int16 v43 = a4;
                  char v44 = BYTE2(a4);
                  char v45 = BYTE3(a4);
                  char v46 = BYTE4(a4);
                  char v47 = BYTE5(a4);
                  sub_100022C64(a3, a4);
                  sub_100022C64(a3, a4);
                  p_s2 = &__s2;
                  size_t v29 = BYTE6(a4);
LABEL_41:
                  int v30 = memcmp(__s1, p_s2, v29);
LABEL_57:
                  sub_100044090(a1, a2);
                  sub_100044090(a3, a4);
                  sub_100044090(a3, a4);
                  char v22 = v30 == 0;
                  return v22 & 1;
                }
                if (v12 != 1) {
                  goto LABEL_48;
                }
                uint64_t v17 = (a3 >> 32) - (int)a3;
                if (a3 >> 32 < (int)a3) {
                  goto LABEL_64;
                }
                sub_100022C64(a3, a4);
                sub_100022C64(a3, a4);
                uint64_t v18 = __DataStorage._bytes.getter();
                if (!v18)
                {
                  __DataStorage._length.getter();
                  sub_100044090(a3, a4);
                  __break(1u);
LABEL_72:
                  __DataStorage._length.getter();
                  sub_100044090(a3, a4);
                  __break(1u);
                  goto LABEL_73;
                }
                uint64_t v19 = v18;
                uint64_t v20 = __DataStorage._offset.getter();
                uint64_t v21 = (int)a3 - v20;
                if (!__OFSUB__((int)a3, v20))
                {
LABEL_34:
                  uint64_t v27 = __DataStorage._length.getter();
                  p_s2 = (uint64_t *)(v19 + v21);
                  if (v27 >= v17) {
                    size_t v29 = v17;
                  }
                  else {
                    size_t v29 = v27;
                  }
                  goto LABEL_41;
                }
                __break(1u);
LABEL_26:
                sub_100044090(a1, a2);
                char v22 = 0;
                return v22 & 1;
            }
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
LABEL_27:
          sub_100044090(a1, a2);
          char v22 = 1;
          return v22 & 1;
        case 3uLL:
          if (!v9) {
            goto LABEL_27;
          }
          goto LABEL_26;
        default:
          if (v9 != BYTE6(a4)) {
            goto LABEL_26;
          }
          goto LABEL_17;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_60;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100102644(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x546567617373656DLL;
  }
  else {
    uint64_t v3 = 0x7265646E65537369;
  }
  if (v2) {
    unint64_t v4 = 0xED000064696C6156;
  }
  else {
    unint64_t v4 = 0xEB00000000657079;
  }
  if (a2) {
    uint64_t v5 = 0x546567617373656DLL;
  }
  else {
    uint64_t v5 = 0x7265646E65537369;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000657079;
  }
  else {
    unint64_t v6 = 0xED000064696C6156;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100102700(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000015;
  unint64_t v3 = 0x8000000100372B30;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000015;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1684632949;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x444965636E6566;
      break;
    case 3:
      unint64_t v5 = 0x5372656767697274;
      unint64_t v3 = 0xED00007375746174;
      break;
    case 4:
      unint64_t v3 = 0xE100000000000000;
      unint64_t v5 = 118;
      break;
    case 5:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1702125924;
      break;
    case 6:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x6E6F697461636F6CLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x8000000100372B30;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684632949) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x444965636E6566) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xED00007375746174;
      if (v5 != 0x5372656767697274) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE100000000000000;
      if (v5 != 118) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v2 = 1702125924;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x6E6F697461636F6CLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100102928(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 28265;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 7632239;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x7265746E65;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1953069157;
      break;
    case 4:
      uint64_t v4 = 0x6D72657465646E75;
      unint64_t v3 = 0xEC00000064656E69;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 28265;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE300000000000000;
      if (v4 == 7632239) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x7265746E65) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1953069157;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xEC00000064656E69;
      if (v4 != 0x6D72657465646E75) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100102AC8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000070;
  uint64_t v3 = 0x614D737574617473;
  uint64_t v4 = a1;
  uint64_t v5 = 0x614D737574617473;
  unint64_t v6 = 0xE900000000000070;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6F43737574617473;
      unint64_t v6 = 0xEA00000000006564;
      break;
    case 2:
      uint64_t v5 = 0x5474736575716572;
      unint64_t v6 = 0xED0000736E656B6FLL;
      break;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v5 = 7107189;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006564;
      if (v5 == 0x6F43737574617473) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x5474736575716572;
      unint64_t v2 = 0xED0000736E656B6FLL;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE300000000000000;
      if (v5 == 7107189) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100102C70(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD000000000000015;
    }
    else {
      unint64_t v3 = 0x64726F6365526B63;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x8000000100372B30;
    }
    else {
      unint64_t v4 = 0xEA00000000004449;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000015;
      }
      else {
        unint64_t v6 = 0x64726F6365526B63;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x8000000100372B30;
      }
      else {
        unint64_t v7 = 0xEA00000000004449;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    unint64_t v3 = 0x444965636E6566;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x444965636E6566)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100102D94(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD000000000000015;
    }
    else {
      unint64_t v3 = 118;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x8000000100372B30;
    }
    else {
      unint64_t v4 = 0xE100000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000015;
      }
      else {
        unint64_t v6 = 118;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x8000000100372B30;
      }
      else {
        unint64_t v7 = 0xE100000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE100000000000000;
    unint64_t v3 = 112;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE100000000000000;
  if (v3 != 112)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100102E80(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000019;
  }
  else {
    unint64_t v3 = 0x65636E6546;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0x8000000100372D80;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000019;
  }
  else {
    unint64_t v5 = 0x65636E6546;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100372D80;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100102F28(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6E69776F6C6C6F66;
    }
    else {
      uint64_t v3 = 0x4F676E69646E6570;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE900000000000067;
    }
    else {
      unint64_t v4 = 0xED00007372656666;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6E69776F6C6C6F66;
      }
      else {
        uint64_t v6 = 0x4F676E69646E6570;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE900000000000067;
      }
      else {
        unint64_t v7 = 0xED00007372656666;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x7265776F6C6C6F66;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x7265776F6C6C6F66)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100103064(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v4 = 0x6E6F697461636F6CLL;
      break;
    case 2:
      uint64_t v4 = 0x6E6F697461636F6CLL;
      unint64_t v3 = 0xEE00737574617453;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x737574617473;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE800000000000000;
      if (v4 == 0x6E6F697461636F6CLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v6 = 0x6E6F697461636F6CLL;
      unint64_t v5 = 0xEE00737574617453;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xE600000000000000;
      if (v4 == 0x737574617473) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1001031F0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x73736572646461;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x73736572646461;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6564757469746C61;
      unint64_t v3 = 0xE800000000000000;
      break;
    case 2:
      unint64_t v5 = 0x76654C726F6F6C66;
      unint64_t v3 = 0xEA00000000006C65;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000012;
      unint64_t v3 = 0x8000000100372C10;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x656475746974616CLL;
      break;
    case 5:
      unint64_t v5 = 0x64757469676E6F6CLL;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 6:
      unint64_t v5 = 0x6D617473656D6974;
      unint64_t v3 = 0xE900000000000070;
      break;
    case 7:
      unint64_t v3 = 0x8000000100372C40;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x6564757469746C61) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xEA00000000006C65;
      if (v5 != 0x76654C726F6F6C66) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0x8000000100372C10;
      if (v5 != 0xD000000000000012) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x656475746974616CLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE900000000000065;
      if (v5 != 0x64757469676E6F6CLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v2 = 0x6D617473656D6974;
      unint64_t v6 = 0xE900000000000070;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0x8000000100372C40;
      if (v5 != 0xD000000000000010) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1001034BC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000031;
  unint64_t v3 = 0x8000000100372DF0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000002FLL;
    }
    else {
      unint64_t v5 = 0xD00000000000002ELL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000100372E30;
    }
    else {
      unint64_t v6 = 0x8000000100372E60;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000031;
  unint64_t v6 = 0x8000000100372DF0;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000002FLL;
    }
    else {
      unint64_t v2 = 0xD00000000000002ELL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x8000000100372E30;
    }
    else {
      unint64_t v3 = 0x8000000100372E60;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1001035AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001036BC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100103814()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001038A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_100103940()
{
  return Hasher._finalize()();
}

Swift::Int sub_100103AA8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100103BC8()
{
  return Hasher._finalize()();
}

uint64_t sub_100103CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[78] = v4;
  v5[77] = a4;
  v5[76] = a3;
  v5[75] = a2;
  v5[74] = a1;
  v5[79] = *v4;
  return _swift_task_switch(sub_100103CF8, v4, 0);
}

uint64_t sub_100103CF8()
{
  uint64_t v1 = *(void *)(v0 + 632);
  uint64_t v2 = *(void *)(v0 + 624);
  uint64_t v3 = *(void *)(v0 + 616);
  uint64_t v4 = sub_1000256E8(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 640) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 600);
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v3;
  *(void *)(v5 + 48) = v1;
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 648) = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100103E54;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v2, v4, 0xD000000000000025, 0x8000000100375960, sub_1001122FC, v5, &type metadata for ServerBaseResponse);
}

uint64_t sub_100103E54()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 656) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 624);
  if (v0) {
    uint64_t v4 = sub_100103FF8;
  }
  else {
    uint64_t v4 = sub_100103F80;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100103F80()
{
  memcpy(*(void **)(v0 + 592), (const void *)(v0 + 16), 0x240uLL);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100103FF8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010405C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A520(a1, (uint64_t *)&unk_1003F3C10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100104208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104258(a1, a2, a3, (uint64_t)&unk_1003E0B78, &qword_1003F0068);
}

uint64_t sub_100104230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104258(a1, a2, a3, (uint64_t)&unk_1003E0BA0, &qword_1003F00C0);
}

uint64_t sub_100104258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A520(a1, (uint64_t *)&unk_1003F3C10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  sub_100044014(a5);
  return swift_task_create();
}

BOOL sub_100104408(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  sub_100129BB8(a2, (uint64_t)&v18 - v8, type metadata accessor for DataManager.State);
  unint64_t v10 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
      unint64_t v10 = 3;
      break;
    case 2u:
      uint64_t v12 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
      unint64_t v10 = 4;
      break;
    case 3u:
      unint64_t v10 = 6;
      break;
    case 4u:
      unint64_t v10 = 7;
      break;
    case 5u:
      break;
    case 6u:
      unint64_t v10 = 1;
      break;
    case 7u:
      unint64_t v10 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v9, &qword_1003EFCD0);
      unint64_t v10 = 2;
      break;
  }
  sub_100129BB8(a1, (uint64_t)v7, type metadata accessor for DataManager.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v14 = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v15 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v7, v15);
      unint64_t v14 = 3;
      break;
    case 2:
      uint64_t v16 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v7, v16);
      unint64_t v14 = 4;
      break;
    case 3:
      unint64_t v14 = 6;
      break;
    case 4:
      unint64_t v14 = 7;
      break;
    case 5:
      return v10 >= v14;
    case 6:
      unint64_t v14 = 1;
      break;
    case 7:
      unint64_t v14 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v7, &qword_1003EFCD0);
      unint64_t v14 = 2;
      break;
  }
  return v10 >= v14;
}

BOOL sub_100104704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  sub_100129BB8(a2, (uint64_t)&v18 - v8, type metadata accessor for DataManager.State);
  unint64_t v10 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
      unint64_t v10 = 3;
      break;
    case 2u:
      uint64_t v12 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
      unint64_t v10 = 4;
      break;
    case 3u:
      unint64_t v10 = 6;
      break;
    case 4u:
      unint64_t v10 = 7;
      break;
    case 5u:
      break;
    case 6u:
      unint64_t v10 = 1;
      break;
    case 7u:
      unint64_t v10 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v9, &qword_1003EFCD0);
      unint64_t v10 = 2;
      break;
  }
  sub_100129BB8(a1, (uint64_t)v7, type metadata accessor for DataManager.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v14 = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v15 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v7, v15);
      unint64_t v14 = 3;
      break;
    case 2:
      uint64_t v16 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v7, v16);
      unint64_t v14 = 4;
      break;
    case 3:
      unint64_t v14 = 6;
      break;
    case 4:
      unint64_t v14 = 7;
      break;
    case 5:
      return v10 < v14;
    case 6:
      unint64_t v14 = 1;
      break;
    case 7:
      unint64_t v14 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v7, &qword_1003EFCD0);
      unint64_t v14 = 2;
      break;
  }
  return v10 < v14;
}

uint64_t sub_100104A00()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B6F0);
  sub_100044058(v0, (uint64_t)qword_10040B6F0);
  return Logger.init(subsystem:category:)();
}

Swift::Int sub_100104A80()
{
  return Hasher._finalize()();
}

uint64_t sub_100104AD8()
{
  return String.hash(into:)();
}

Swift::Int sub_100104AF4()
{
  return Hasher._finalize()();
}

uint64_t sub_100104B48@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD390, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100104B9C(void *a1@<X8>)
{
  *a1 = 0x54646E6553706174;
  a1[1] = 0xE900000000000053;
}

uint64_t sub_100104BBC@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD3C8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_100104C14(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100104C20(uint64_t a1)
{
  unint64_t v2 = sub_10004E408();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100104C5C(uint64_t a1)
{
  unint64_t v2 = sub_10004E408();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100104C98(void *a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100044014(&qword_1003F02F0);
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10004E408();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v9 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v9 setLocale:isa];

  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setDateFormat:v11];

  Class v12 = Date._bridgeToObjectiveC()().super.isa;
  id v13 = [v9 stringFromDate:v12];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v17;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100104F54(void *a1)
{
  return sub_100104C98(a1);
}

uint64_t sub_100104F6C()
{
  v0._countAndFlagsBits = Date.localISO8601.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x54646E6553706174;
}

uint64_t sub_100104FCC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B708);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B708);
  if (qword_1003EC028 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B6F0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100105094()
{
  uint64_t v1 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014(&qword_1003EFCD0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)v33 - v9;
  uint64_t v11 = type metadata accessor for DataManager.State(0);
  __chkstk_darwin(v11);
  id v13 = (unsigned __int8 *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100129BB8(v0, (uint64_t)v13, type metadata accessor for DataManager.State);
  uint64_t v14 = 0x6E776F6E6B6E752ELL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v13, v1);
      v33[0] = 0;
      v33[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      uint64_t v19 = 0x724664656464612ELL;
      unint64_t v20 = 0xED000028646E6569;
      goto LABEL_6;
    case 2u:
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v13, v1);
      v33[0] = 0;
      v33[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      uint64_t v19 = 0x6465766F6D65722ELL;
      unint64_t v20 = 0xEF28646E65697246;
LABEL_6:
      v33[0] = v19;
      v33[1] = v20;
      sub_1000256E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      uint64_t v14 = v33[0];
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return v14;
    case 3u:
      int v23 = *v13;
      strcpy((char *)v33, ".myLocation(");
      BYTE5(v33[1]) = 0;
      HIWORD(v33[1]) = -5120;
      if (v23) {
        uint64_t v24 = 1702195828;
      }
      else {
        uint64_t v24 = 0x65736C6166;
      }
      if (v23) {
        unint64_t v25 = 0xE400000000000000;
      }
      else {
        unint64_t v25 = 0xE500000000000000;
      }
      goto LABEL_21;
    case 4u:
      int v26 = *v13;
      v33[0] = 0;
      v33[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v33[0] = 0xD000000000000010;
      v33[1] = 0x80000001003759B0;
      if (v26) {
        uint64_t v24 = 1702195828;
      }
      else {
        uint64_t v24 = 0x65736C6166;
      }
      if (v26) {
        unint64_t v25 = 0xE400000000000000;
      }
      else {
        unint64_t v25 = 0xE500000000000000;
      }
LABEL_21:
      unint64_t v27 = v25;
      String.append(_:)(*(Swift::String *)&v24);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      uint64_t v14 = v33[0];
      break;
    case 5u:
      return v14;
    case 6u:
      uint64_t v14 = 0x6C616974696E692ELL;
      break;
    case 7u:
      uint64_t v14 = 0x736563697665642ELL;
      break;
    default:
      sub_100013B50((uint64_t)v13, (uint64_t)v10, &qword_1003EFCD0);
      v33[0] = 0;
      v33[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v33[0] = 0xD000000000000011;
      v33[1] = 0x80000001003759D0;
      sub_100013210((uint64_t)v10, (uint64_t)v8, &qword_1003EFCD0);
      uint64_t v15 = type metadata accessor for Device();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15) == 1)
      {
        sub_10000A520((uint64_t)v8, &qword_1003EFCD0);
        uint64_t v17 = (void *)0xE300000000000000;
        uint64_t v18 = 7104878;
      }
      else
      {
        uint64_t v18 = Device.description.getter();
        uint64_t v17 = v29;
        (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
      }
      v30._countAndFlagsBits = v18;
      v30._object = v17;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 41;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      uint64_t v14 = v33[0];
      sub_10000A520((uint64_t)v10, &qword_1003EFCD0);
      break;
  }
  return v14;
}

unint64_t sub_100105648(unint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
    case 6uLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 4uLL:
      unint64_t result = 0xD000000000000013;
      break;
    case 5uLL:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7uLL:
      unint64_t result = 0xD000000000000016;
      break;
    case 8uLL:
      unint64_t result = 0xD000000000000014;
      break;
    case 9uLL:
      unint64_t result = 0xD000000000000017;
      break;
    case 0xAuLL:
      unint64_t result = 0xD000000000000019;
      break;
    case 0xBuLL:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      strcpy((char *)v6, ".underlying(");
      BYTE5(v6[1]) = 0;
      HIWORD(v6[1]) = -5120;
      sub_10012BA58(a1);
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      v4._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      sub_10012BA68(a1);
      unint64_t result = v6[0];
      break;
  }
  return result;
}

unint64_t sub_10010587C()
{
  return sub_100105648(*v0);
}

uint64_t sub_100105884()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_100052FAC(v0, qword_1003EF828);
  sub_100044058(v0, (uint64_t)qword_1003EF828);
  return PrefixedDefaults.init(prefix:)();
}

uint64_t sub_1001058EC()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_100052FAC(v0, qword_10040B720);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B720);
  if (qword_1003EC038 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_1003EF828);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001059B4()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014(&qword_1003F0100);
  sub_100052FAC(v4, qword_1003EF840);
  sub_100044058(v4, (uint64_t)qword_1003EF840);
  if (qword_1003EC040 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100044058(v0, (uint64_t)qword_10040B720);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  type metadata accessor for Date();
  return ManagedDefault.init(prefixedDefaults:key:)();
}

uint64_t sub_100105B20()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014(&qword_1003EFE58);
  sub_100052FAC(v4, qword_1003EF858);
  sub_100044058(v4, (uint64_t)qword_1003EF858);
  if (qword_1003EC040 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100044058(v0, (uint64_t)qword_10040B720);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return ManagedDefault.init(prefixedDefaults:key:)();
}

uint64_t sub_100105C90(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Device();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  void v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  sub_100044014(&qword_1003EFCD0);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[10] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100105DCC;
  return sub_100005F58();
}

uint64_t sub_100105DCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 88) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100105EE4, v2, 0);
}

uint64_t sub_100105EE4()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[5];
    uint64_t v6 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v8 = *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v5(v0[7], v7, v0[4]);
      if (Device.isThisDevice.getter()) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(v0[7], v0[4]);
      v7 += v8;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v10 = v0[9];
    uint64_t v11 = v0[7];
    uint64_t v12 = v0[4];
    uint64_t v13 = v0[5];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v10, v11, v12);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v9(v10, 0, 1, v12);
  }
  else
  {
LABEL_6:
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[5] + 56);
    v9(v0[9], 1, 1, v0[4]);
  }
  v0[12] = v9;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[13] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100106090;
  return sub_100005F58();
}

uint64_t sub_100106090(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001061A8, v2, 0);
}

uint64_t sub_1001061A8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v6 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v8 = *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v5(*(void *)(v0 + 48), v7, *(void *)(v0 + 32));
      if (Device.isCompanion.getter()) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
      v7 += v8;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v10, v11, v13);
    uint64_t v9 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v9 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 96))(*(void *)(v0 + 64), v9, 1, *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  DeviceWithCompanion.init(thisDevice:companion:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10010633C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  __chkstk_darwin(v8 - 8);
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(unsigned char *)(v3 + 136) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 144) = 0x616E614D61746144;
  *(void *)(v3 + 152) = 0xEB00000000726567;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v3 + 160) = WorkItemQueue.__allocating_init(name:identifier:)();
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = _swiftEmptyArrayStorage;
  uint64_t v9 = v3 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream;
  uint64_t v10 = sub_100044014((uint64_t *)&unk_1003EF920);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations) = _swiftEmptyDictionarySingleton;
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps) = _swiftEmptyArrayStorage;
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp) = 0;
  *(_OWORD *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken) = xmmword_10036CD90;
  type metadata accessor for DataManager.State(0);
  swift_storeEnumTagMultiPayload();
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager_handlesSharingLocation) = _swiftEmptyArrayStorage;
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles) = _swiftEmptyDictionarySingleton;
  *(void *)(v4 + 168) = a1;
  *(void *)(v4 + 176) = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_100013210(a3, (uint64_t)&v14, &qword_1003F0248);
  if (v15)
  {
    swift_unknownObjectRelease();
    sub_10000A520(a3, &qword_1003F0248);
    sub_100022CC0(&v14, (uint64_t)&v16);
  }
  else
  {
    uint64_t v11 = type metadata accessor for ServerInteractionController();
    sub_100013C20(3);
    uint64_t v12 = ServerInteractionController.__allocating_init(bundleIdentifier:)();
    uint64_t v17 = v11;
    uint64_t v18 = &protocol witness table for ServerInteractionController;
    swift_unknownObjectRelease();
    *(void *)&long long v16 = v12;
    sub_10000A520(a3, &qword_1003F0248);
    sub_10000A520((uint64_t)&v14, &qword_1003F0248);
  }
  sub_100022CC0(&v16, v4 + OBJC_IVAR____TtC13findmylocated11DataManager_sic);
  return v4;
}

uint64_t sub_1001065E8()
{
  v1[2] = v0;
  v1[3] = *v0;
  type metadata accessor for DispatchQoS();
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_1001066A0, v0, 0);
}

uint64_t sub_1001066A0()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    swift_slowDealloc();
  }
  uint64_t v5 = v0[3];

  type metadata accessor for XPCActivity();
  static DispatchQoS.background.getter();
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[5] = v8;
  void *v8 = v0;
  v8[1] = sub_100106894;
  uint64_t v9 = v0[4];
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD00000000000002BLL, 0x8000000100375D30, v9, &unk_1003F0220, 0, &unk_1003F0230, v7);
}

uint64_t sub_100106894(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001069AC, v2, 0);
}

uint64_t sub_1001069AC()
{
  *(void *)(v0[2] + 128) = v0[6];
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100106A28(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100106A48, 0, 0);
}

uint64_t sub_100106A48()
{
  sub_100013210(v0[3], v0[2], &qword_1003F0240);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100106AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[79] = a3;
  v3[78] = a2;
  v3[77] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State();
  v3[80] = v4;
  v3[81] = *(void *)(v4 - 8);
  v3[82] = swift_task_alloc();
  return _swift_task_switch(sub_100106B78, 0, 0);
}

uint64_t sub_100106B78()
{
  uint64_t v1 = v0[82];
  uint64_t v2 = v0[81];
  uint64_t v3 = v0[80];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[78], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040B708);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    v0[83] = Strong;
    if (Strong)
    {
      uint64_t v10 = (void *)swift_task_alloc();
      v0[84] = v10;
      void *v10 = v0;
      v10[1] = sub_100106F70;
      return sub_10010B8B8((uint64_t)(v0 + 2));
    }
    type metadata accessor for XPCActivity();
    sub_1000256E8(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v18 = v21;
    uint64_t v19 = sub_10010711C;
    goto LABEL_20;
  }
  if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B708);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      swift_slowDealloc();
    }

    type metadata accessor for XPCActivity();
    sub_1000256E8(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v18 = v17;
    uint64_t v19 = sub_1001071E4;
LABEL_20:
    return _swift_task_switch(v19, v16, v18);
  }
  (*(void (**)(void, void))(v0[81] + 8))(v0[82], v0[80]);
  swift_task_dealloc();
  unint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_100106F70()
{
  uint64_t v1 = *v0 + 16;
  swift_task_dealloc();
  sub_10012A634(v1, sub_10012A3AC);
  swift_release();
  type metadata accessor for XPCActivity();
  sub_1000256E8(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10010711C, v3, v2);
}

uint64_t sub_10010711C()
{
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100107184, 0, 0);
}

uint64_t sub_100107184()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001071E4()
{
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_10012BBB8, 0, 0);
}

uint64_t sub_10010724C()
{
  v1[95] = v0;
  uint64_t v2 = sub_100044014(&qword_1003F0208);
  v1[101] = v2;
  v1[102] = *(void *)(v2 - 8);
  v1[103] = swift_task_alloc();
  sub_100044014(&qword_1003F0120);
  v1[104] = swift_task_alloc();
  v1[105] = swift_task_alloc();
  return _swift_task_switch(sub_100107350, v0, 0);
}

uint64_t sub_100107350()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager: run", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 848) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10010749C;
  return daemon.getter();
}

uint64_t sub_10010749C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[107] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[108] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[109] = v4;
  uint64_t UnlockService = type metadata accessor for FirstUnlockService();
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[110] = v6;
  uint64_t v7 = sub_1000256E8(&qword_1003EF448, (void (*)(uint64_t))&type metadata accessor for FirstUnlockService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10010767C;
  return ActorServiceDaemon.getService<A>()(v4, UnlockService, v6, v7);
}

uint64_t sub_10010767C(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[111] = a1;
  v3[112] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[95];
    return _swift_task_switch(sub_1001080F4, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                           + async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock());
    uint64_t v6 = (void *)swift_task_alloc();
    v3[113] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100107824;
    return v8();
  }
}

uint64_t sub_100107824()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 912) = v3;
  *os_log_type_t v3 = v2;
  v3[1] = sub_100107964;
  return sub_1001082DC();
}

uint64_t sub_100107964()
{
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 920) = v2;
  *uint64_t v2 = v4;
  v2[1] = sub_100107A90;
  return daemon.getter();
}

uint64_t sub_100107A90(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 928) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 936) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_1000256E8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_100107C44;
  uint64_t v8 = *(void *)(v2 + 880);
  uint64_t v9 = *(void *)(v2 + 872);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100107C44(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[118] = a1;
  v4[119] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[95];
    uint64_t v6 = sub_100108180;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100107D80;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100107D80()
{
  uint64_t v1 = v0[103];
  uint64_t v2 = v0[102];
  uint64_t v3 = v0[101];
  uint64_t v4 = v0[95];
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for AccountService.State(0);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  return _swift_task_switch(sub_100107E98, v4, 0);
}

uint64_t sub_100107E98()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[104];
  uint64_t v3 = v0[95];
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EF920);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_100013B50(v1, v2, &qword_1003F0120);
  uint64_t v5 = v3 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream;
  swift_beginAccess();
  sub_10012B278(v2, v5);
  swift_endAccess();
  swift_retain_n();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 2);
}

uint64_t sub_100107FE8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 960) = v2;
  if (v2)
  {
    uint64_t v4 = v3 + 720;
    uint64_t v5 = sub_100108218;
  }
  else
  {
    uint64_t v4 = v3 + 768;
    uint64_t v5 = sub_100108024;
  }
  return _swift_asyncLet_finish(v3 + 16, a2, v5, v4);
}

uint64_t sub_100108024()
{
  return _swift_task_switch(sub_100108040, *(void *)(v0 + 760), 0);
}

uint64_t sub_100108040()
{
  swift_release();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001080F4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100108180()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100108218()
{
  return _swift_task_switch(sub_100108234, *(void *)(v0 + 760), 0);
}

uint64_t sub_100108234()
{
  swift_release();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001082DC()
{
  v1[7] = v0;
  v1[8] = *v0;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v1[9] = swift_task_alloc();
  v1[10] = type metadata accessor for DataManager.State(0);
  v1[11] = swift_task_alloc();
  uint64_t v2 = sub_100044014(&qword_1003EFE58);
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100108428, v0, 0);
}

uint64_t sub_100108428()
{
  uint64_t v17 = v0;
  if (qword_1003EC050 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = sub_100044058(v3, (uint64_t)qword_1003EF858);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  char v5 = *(unsigned char *)(v0 + 156);
  *(unsigned char *)(v0 + 157) = v5;
  int v6 = v5 & 1;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v0 + 120) = sub_100044058(v7, (uint64_t)qword_10040B708);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v0 + 48) = sub_100037004(0x65696C4374696E69, 0xEC0000002928746ELL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v0 + 152) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s isInitialized:%{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 128) = v13;
  *(void *)(v13 + 16) = v11;
  *(unsigned char *)(v13 + 24) = v6;
  *(void *)(v13 + 32) = v12;
  swift_retain();
  os_log_type_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v14;
  *os_log_type_t v14 = v0;
  v14[1] = sub_100108760;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_100108760()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = sub_100108900;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_release();
    uint64_t v4 = sub_100108888;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100108888()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100108900()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Init client failed due to %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  char v6 = *(unsigned char *)(v0 + 157);

  if (v6)
  {
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Daemon has already initialized, updating DataManager state so we can respond to incoming requests", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 56);

    swift_storeEnumTagMultiPayload();
    sub_10000D3F0(v10);
    sub_100030644(v10, type metadata accessor for DataManager.State);
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
    uint64_t v15 = sub_1000256E8(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v13;
    v16[3] = v15;
    v16[4] = v13;
    v16[5] = v12;
    swift_retain_n();
    sub_10010405C(v11, (uint64_t)&unk_1003F01D0, (uint64_t)v16);
    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100108C64()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_100108CF4();
}

uint64_t sub_100108CF4()
{
  v1[20] = v0;
  v1[21] = *v0;
  type metadata accessor for UUID();
  v1[22] = swift_task_alloc();
  uint64_t v2 = sub_100044014(&qword_1003EFE58);
  v1[23] = v2;
  v1[24] = *(void *)(v2 - 8);
  v1[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Account();
  v1[26] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[27] = v4;
  v1[28] = *(void *)(v4 + 64);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AccountService.State(0);
  v1[32] = v5;
  v1[33] = *(void *)(v5 - 8);
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  sub_100044014(&qword_1003F0110);
  v1[42] = swift_task_alloc();
  uint64_t v6 = sub_100044014(&qword_1003F0118);
  v1[43] = v6;
  v1[44] = *(void *)(v6 - 8);
  v1[45] = swift_task_alloc();
  sub_100044014(&qword_1003F0120);
  v1[46] = swift_task_alloc();
  uint64_t v7 = sub_100044014((uint64_t *)&unk_1003EF920);
  v1[47] = v7;
  v1[48] = *(void *)(v7 - 8);
  v1[49] = swift_task_alloc();
  return _swift_task_switch(sub_100109060, v0, 0);
}

uint64_t sub_100109060()
{
  if (static SystemInfo.underTest.getter())
  {
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[50] = sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Monitoring AccountState stream", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[47];
  uint64_t v6 = v0[48];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[20];

  uint64_t v9 = v8 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream;
  swift_beginAccess();
  sub_100013210(v9, v7, &qword_1003F0120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    sub_10000A520(v0[46], &qword_1003F0120);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "accountStateStream should be available by now!", v12, 2u);
      swift_slowDealloc();
    }

    goto LABEL_10;
  }
  (*(void (**)(void, void, void))(v0[48] + 32))(v0[49], v0[46], v0[47]);
  AsyncStream.makeAsyncIterator()();
  uint64_t v15 = sub_1000256E8(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
  v0[51] = v15;
  v0[52] = 0;
  uint64_t v16 = v0[20];
  uint64_t v17 = (void *)swift_task_alloc();
  v0[53] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100109440;
  uint64_t v18 = v0[42];
  uint64_t v19 = v0[43];
  return AsyncStream.Iterator.next(isolation:)(v18, v16, v15, v19);
}

uint64_t sub_100109440()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  return _swift_task_switch(sub_100109550, v1, 0);
}

uint64_t sub_100109550()
{
  uint64_t v1 = *(void *)(v0 + 336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 264) + 48))(v1, 1, *(void *)(v0 + 256)) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 352) + 8))(*(void *)(v0 + 360), *(void *)(v0 + 344));
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stopped processing accountStateStream!", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = *(void *)(v0 + 384);
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v7 = *(void *)(v0 + 376);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(v0 + 416);
  sub_10012A9D0(v1, *(void *)(v0 + 328), type metadata accessor for AccountService.State);
  static Task<>.checkCancellation()();
  *(void *)(v0 + 432) = v9;
  if (v9)
  {
    uint64_t v10 = *(void *)(v0 + 384);
    uint64_t v11 = *(void *)(v0 + 392);
    uint64_t v12 = *(void *)(v0 + 376);
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v13 = *(void *)(v0 + 360);
    uint64_t v15 = *(void *)(v0 + 344);
    sub_100030644(*(void *)(v0 + 328), type metadata accessor for AccountService.State);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
    return v8();
  }
  sub_100129BB8(*(void *)(v0 + 328), *(void *)(v0 + 320), type metadata accessor for AccountService.State);
  uint64_t v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, (os_log_type_t)v18);
  uint64_t v20 = *(void *)(v0 + 320);
  if (v19)
  {
    uint64_t v21 = 0x6E776F6E6B6E752ELL;
    uint64_t v23 = *(void *)(v0 + 304);
    uint64_t v22 = *(void *)(v0 + 312);
    uint64_t v24 = swift_slowAlloc();
    *(void *)(v0 + 144) = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    sub_100129BB8(v20, v22, type metadata accessor for AccountService.State);
    sub_100129BB8(v22, v23, type metadata accessor for AccountService.State);
    uint64_t v25 = sub_100044014(&qword_1003EFE18);
    unint64_t v26 = 0xE800000000000000;
    switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v23, 3, v25))
    {
      case 1u:
        break;
      case 2u:
        uint64_t v21 = 0x6C696176616E752ELL;
        unint64_t v26 = 0xEC000000656C6261;
        break;
      case 3u:
        uint64_t v21 = 0x756F6363416F6E2ELL;
        unint64_t v26 = 0xEA0000000000746ELL;
        break;
      default:
        uint64_t v27 = *(void *)(v0 + 248);
        uint64_t v29 = *(void *)(v0 + 208);
        uint64_t v28 = *(void *)(v0 + 216);
        (*(void (**)(uint64_t, void, uint64_t))(v28 + 32))(v27, *(void *)(v0 + 304), v29);
        *(void *)(v0 + 112) = 0;
        *(void *)(v0 + 120) = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        uint64_t v30 = *(void *)(v0 + 120);
        *(void *)(v0 + 96) = *(void *)(v0 + 112);
        *(void *)(v0 + 104) = v30;
        v31._object = (void *)0x8000000100375C60;
        v31._countAndFlagsBits = 0xD000000000000014;
        String.append(_:)(v31);
        _print_unlocked<A, B>(_:_:)();
        v32._countAndFlagsBits = 41;
        v32._object = (void *)0xE100000000000000;
        String.append(_:)(v32);
        uint64_t v21 = *(void *)(v0 + 96);
        unint64_t v26 = *(void *)(v0 + 104);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
        break;
    }
    uint64_t v33 = *(void *)(v0 + 320);
    sub_100030644(*(void *)(v0 + 312), type metadata accessor for AccountService.State);
    *(void *)(v24 + 4) = sub_100037004(v21, v26, (uint64_t *)(v0 + 144));
    swift_bridgeObjectRelease();
    sub_100030644(v33, type metadata accessor for AccountService.State);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "accountStateStream event: %s", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100030644(*(void *)(v0 + 320), type metadata accessor for AccountService.State);
  }

  uint64_t v34 = *(void *)(v0 + 296);
  sub_100129BB8(*(void *)(v0 + 328), v34, type metadata accessor for AccountService.State);
  uint64_t v35 = sub_100044014(&qword_1003EFE18);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48);
  int v37 = v36(v34, 3, v35);
  if ((v37 - 1) < 2)
  {
    sub_100129BB8(*(void *)(v0 + 328), *(void *)(v0 + 288), type metadata accessor for AccountService.State);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t v92 = v39;
      uint64_t v40 = 0x6E776F6E6B6E752ELL;
      uint64_t v42 = *(void *)(v0 + 280);
      uint64_t v41 = *(void *)(v0 + 288);
      uint64_t v43 = *(void *)(v0 + 272);
      uint64_t v44 = swift_slowAlloc();
      *(void *)(v0 + 152) = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315138;
      sub_100129BB8(v41, v42, type metadata accessor for AccountService.State);
      sub_100129BB8(v42, v43, type metadata accessor for AccountService.State);
      int v45 = v36(v43, 3, v35);
      unint64_t v46 = 0xE800000000000000;
      switch(v45)
      {
        case 1:
          break;
        case 2:
          uint64_t v40 = 0x6C696176616E752ELL;
          unint64_t v46 = 0xEC000000656C6261;
          break;
        case 3:
          uint64_t v40 = 0x756F6363416F6E2ELL;
          unint64_t v46 = 0xEA0000000000746ELL;
          break;
        default:
          uint64_t v47 = *(void *)(v0 + 248);
          uint64_t v49 = *(void *)(v0 + 208);
          uint64_t v48 = *(void *)(v0 + 216);
          (*(void (**)(uint64_t, void, uint64_t))(v48 + 32))(v47, *(void *)(v0 + 272), v49);
          *(void *)(v0 + 80) = 0;
          *(void *)(v0 + 88) = 0xE000000000000000;
          _StringGuts.grow(_:)(23);
          uint64_t v50 = *(void *)(v0 + 88);
          *(void *)(v0 + 64) = *(void *)(v0 + 80);
          *(void *)(v0 + 72) = v50;
          v51._object = (void *)0x8000000100375C60;
          v51._countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v51);
          _print_unlocked<A, B>(_:_:)();
          v52._countAndFlagsBits = 41;
          v52._object = (void *)0xE100000000000000;
          String.append(_:)(v52);
          uint64_t v40 = *(void *)(v0 + 64);
          unint64_t v46 = *(void *)(v0 + 72);
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
          break;
      }
      uint64_t v85 = *(void *)(v0 + 328);
      uint64_t v86 = *(void *)(v0 + 288);
      sub_100030644(*(void *)(v0 + 280), type metadata accessor for AccountService.State);
      *(void *)(v44 + 4) = sub_100037004(v40, v46, (uint64_t *)(v0 + 152));
      swift_bridgeObjectRelease();
      sub_100030644(v86, type metadata accessor for AccountService.State);
      _os_log_impl((void *)&_mh_execute_header, v38, v92, "Ignoring %s", (uint8_t *)v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v69 = v85;
    }
    else
    {
      uint64_t v67 = *(void *)(v0 + 328);
      uint64_t v68 = *(void *)(v0 + 288);

      sub_100030644(v68, type metadata accessor for AccountService.State);
      uint64_t v69 = v67;
    }
LABEL_44:
    sub_100030644(v69, type metadata accessor for AccountService.State);
    *(void *)(v0 + 416) = 0;
    uint64_t v87 = *(void *)(v0 + 408);
    uint64_t v88 = *(void *)(v0 + 160);
    unint64_t v89 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v89;
    *unint64_t v89 = v0;
    v89[1] = sub_100109440;
    uint64_t v90 = *(void *)(v0 + 336);
    uint64_t v91 = *(void *)(v0 + 344);
    return AsyncStream.Iterator.next(isolation:)(v90, v88, v87, v91);
  }
  if (v37)
  {
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Account is .noAccount. Resetting localDB and removing UserDefaults.", v72, 2u);
      swift_slowDealloc();
    }
    uint64_t v73 = *(void *)(v0 + 328);

    sub_10012AA38();
    sub_10010B180();
    type metadata accessor for WorkItemQueue.WorkItem();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    uint64_t v69 = v73;
    goto LABEL_44;
  }
  uint64_t v53 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v0 + 216) + 32);
  v53(*(void *)(v0 + 240), *(void *)(v0 + 296), *(void *)(v0 + 208));
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Account is available", v56, 2u);
    swift_slowDealloc();
  }

  if (qword_1003EC050 != -1) {
    swift_once();
  }
  uint64_t v58 = *(void *)(v0 + 192);
  uint64_t v57 = *(void *)(v0 + 200);
  uint64_t v59 = *(void *)(v0 + 184);
  uint64_t v60 = sub_100044058(v59, (uint64_t)qword_1003EF858);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v60, v59);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
  char v61 = *(unsigned char *)(v0 + 480);
  unint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  BOOL v64 = os_log_type_enabled(v62, v63);
  if (v61)
  {
    uint64_t v93 = v53;
    if (v64)
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Already initialized.", v74, 2u);
      swift_slowDealloc();
    }
    uint64_t v76 = *(void *)(v0 + 232);
    uint64_t v75 = *(void *)(v0 + 240);
    uint64_t v78 = *(void *)(v0 + 216);
    uint64_t v77 = *(void *)(v0 + 224);
    uint64_t v79 = *(void *)(v0 + 208);
    uint64_t v80 = *(void *)(v0 + 160);
    uint64_t v81 = *(void *)(v0 + 168);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v76, v75, v79);
    unint64_t v82 = (*(unsigned __int8 *)(v78 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    uint64_t v83 = swift_allocObject();
    *(void *)(v0 + 448) = v83;
    *(void *)(v83 + 16) = v80;
    v93(v83 + v82, v76, v79);
    *(void *)(v83 + ((v77 + v82 + 7) & 0xFFFFFFFFFFFFFFF8)) = v81;
    uint64_t v94 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                  + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
    swift_retain();
    unint64_t v84 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v84;
    *unint64_t v84 = v0;
    v84[1] = sub_10010A6A4;
    return v94(&unk_1003F0150, v83);
  }
  else
  {
    if (v64)
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Account is available and need to initClient", v65, 2u);
      swift_slowDealloc();
    }

    uint64_t v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v66;
    *uint64_t v66 = v0;
    v66[1] = sub_10010A4A0;
    return sub_1001082DC();
  }
}

uint64_t sub_10010A4A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  return _swift_task_switch(sub_10010A5B0, v1, 0);
}

uint64_t sub_10010A5B0()
{
  uint64_t v1 = v0[41];
  (*(void (**)(void, void))(v0[27] + 8))(v0[30], v0[26]);
  sub_100030644(v1, type metadata accessor for AccountService.State);
  v0[52] = v0[54];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[20];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100109440;
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[43];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v2, v6);
}

uint64_t sub_10010A6A4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 160);
    swift_release();
    uint64_t v5 = sub_10010AA34;
    uint64_t v6 = v4;
  }
  else
  {
    swift_release();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v2 + 472) = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_10010A830;
    uint64_t v6 = *(void *)(v2 + 160);
    v7[548] = v6;
    uint64_t v5 = sub_10010D5D8;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10010A830()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  return _swift_task_switch(sub_10010A940, v1, 0);
}

uint64_t sub_10010A940()
{
  uint64_t v1 = v0[41];
  (*(void (**)(void, void))(v0[27] + 8))(v0[30], v0[26]);
  sub_100030644(v1, type metadata accessor for AccountService.State);
  v0[52] = v0[58];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[20];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100109440;
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[43];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v2, v6);
}

uint64_t sub_10010AA34()
{
  uint64_t v22 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[30];
    uint64_t v20 = v0[41];
    uint64_t v17 = v0[27];
    uint64_t v18 = v0[26];
    uint64_t v3 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[16] = sub_100037004(0xD000000000000015, 0x8000000100375C80, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v16 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s failed to setup APNS account %{public}@", (uint8_t *)v3, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    uint64_t v5 = v20;
  }
  else
  {
    uint64_t v6 = v0[41];
    uint64_t v7 = v0[30];
    uint64_t v8 = v0[26];
    uint64_t v9 = v0[27];

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v5 = v6;
  }
  sub_100030644(v5, type metadata accessor for AccountService.State);
  v0[52] = 0;
  uint64_t v10 = v0[51];
  uint64_t v11 = v0[20];
  uint64_t v12 = (void *)swift_task_alloc();
  v0[53] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100109440;
  uint64_t v13 = v0[42];
  uint64_t v14 = v0[43];
  return AsyncStream.Iterator.next(isolation:)(v13, v11, v10, v14);
}

uint64_t sub_10010AD5C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  uint64_t v3 = type metadata accessor for Account();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_10010AE4C, v1, 0);
}

uint64_t sub_10010AE4C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[2], v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  v0[9] = v9;
  *(void *)(v9 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(void *)(v9 + v8) = v6;
  uint64_t v12 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[10] = v10;
  void *v10 = v0;
  v10[1] = sub_10010AFB8;
  return v12(&unk_1003F0200, v9);
}

uint64_t sub_10010AFB8()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_10010B11C, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_10010B11C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10010B180()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040B708);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      sub_100037004(0x29287261656C63, 0xE700000000000000, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s UserDefaults clear all", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v6 = [(id)swift_getObjCClassFromMetadata() standardUserDefaults];
    [v6 removePersistentDomainForName:v1];
  }
  else
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B708);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      sub_100037004(0x29287261656C63, 0xE700000000000000, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "%{public}s UserDefaults failed with no bundle identifier", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_10010B4E0(uint64_t a1, uint64_t a2)
{
  v3[4] = a1;
  v3[5] = a2;
  uint64_t v4 = type metadata accessor for SystemVersionNumber();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10010B5B0, v2, 0);
}

uint64_t sub_10010B5B0()
{
  uint64_t v27 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100044058(v7, (uint64_t)qword_10040B708);
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v8(v3, v6, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v14 = v0[6];
  uint64_t v15 = v0[7];
  if (v11)
  {
    uint64_t v25 = v0[8];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_1000256E8(&qword_1003F0108, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v19(v12, v14);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v25, v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "DataManager: migrate from %s to %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v0[9], v0[6]);
    v22(v13, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10010B8B8(uint64_t a1)
{
  v2[532] = v1;
  v2[531] = a1;
  v2[533] = *v1;
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[534] = swift_task_alloc();
  v2[535] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLComponents();
  v2[536] = v3;
  v2[537] = *(void *)(v3 - 8);
  v2[538] = swift_task_alloc();
  v2[539] = type metadata accessor for RefreshClientEndpoint();
  v2[540] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v2[541] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Account();
  v2[542] = v4;
  v2[543] = *(void *)(v4 - 8);
  v2[544] = swift_task_alloc();
  v2[545] = swift_task_alloc();
  v2[546] = swift_task_alloc();
  return _swift_task_switch(sub_10010BABC, v1, 0);
}

uint64_t sub_10010BABC()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 4376) = sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Refresh client", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 4384) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10010BC0C;
  return daemon.getter();
}

uint64_t sub_10010BC0C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 4392) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 4400) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000256E8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10010BDE8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10010BDE8(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[551] = a1;
  v3[552] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[532];
    return _swift_task_switch(sub_10010D32C, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[553] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10010BF78;
    uint64_t v7 = v3[541];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_10010BF78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 4256);
  swift_task_dealloc();
  return _swift_task_switch(sub_10010C088, v1, 0);
}

uint64_t sub_10010C088()
{
  uint64_t v1 = v0[543];
  uint64_t v2 = v0[542];
  uint64_t v3 = v0[541];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary account to send refresh client!", v6, 2u);
      swift_slowDealloc();
    }

    swift_release();
    sub_10012A9B8(v0 + 362);
    sub_100013B50((uint64_t)(v0 + 362), (uint64_t)(v0 + 74), &qword_1003ECDF0);
    sub_100013B50((uint64_t)(v0 + 74), v0[531], &qword_1003ECDF0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[546];
    uint64_t v10 = v0[545];
    uint64_t v20 = v0[540];
    uint64_t v21 = v0[544];
    uint64_t v11 = v0[538];
    uint64_t v12 = v0[537];
    uint64_t v19 = v0[536];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v9, v3, v2);
    unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v18(v10, v9, v2);
    sub_10004C1DC(v10);
    uint64_t v13 = (void (*)(void *, void))URLComponents.path.modify();
    v14._countAndFlagsBits = 0x4368736572666572;
    v14._object = (void *)0xED0000746E65696CLL;
    String.append(_:)(v14);
    v13(v0 + 521, 0);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v0[554] = v15;
    v0[555] = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v10, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v20, v11, v19);
    v18(v21, v9, v2);
    uint64_t v22 = (uint64_t (*)(uint64_t))((char *)&dword_1003EDB88 + dword_1003EDB88);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[556] = v16;
    void *v16 = v0;
    v16[1] = sub_10010C40C;
    uint64_t v17 = v0[544];
    return v22(v17);
  }
}

uint64_t sub_10010C40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[557] = a1;
  v6[558] = a2;
  v6[559] = a3;
  v6[560] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[532];
  if (v3) {
    os_log_type_t v8 = sub_10010C8D8;
  }
  else {
    os_log_type_t v8 = sub_10010C54C;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10010C54C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 506;
  uint64_t v16 = v0 + 511;
  uint64_t v17 = v0 + 434;
  uint64_t v3 = v0 + 516;
  unint64_t v4 = v0[559];
  uint64_t v5 = v0[558];
  uint64_t v6 = v0[557];
  uint64_t v7 = v0[540];
  uint64_t v8 = v0[539];
  uint64_t v9 = v0[533];
  uint64_t v10 = v1[532];
  v1[509] = v8;
  v1[510] = sub_1000256E8(&qword_1003F00F8, (void (*)(uint64_t))type metadata accessor for RefreshClientEndpoint);
  uint64_t v11 = sub_10003E0F4(v2);
  sub_100129BB8(v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RefreshClientEndpoint);
  v1[514] = &type metadata for RefreshClientRequest;
  v1[515] = sub_1000A8048();
  v1[511] = v6;
  v1[512] = v5;
  v1[513] = v4;
  swift_bridgeObjectRetain();
  sub_1000287E4(v5, v4);
  Account.dsid.getter();
  Account.appToken.getter();
  v1[519] = type metadata accessor for BasicCredential();
  v1[520] = &protocol witness table for BasicCredential;
  sub_10003E0F4(v3);
  BasicCredential.init(username:password:)();
  uint64_t v12 = sub_1000256E8(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
  uint64_t v13 = (void *)swift_task_alloc();
  v1[561] = v13;
  v13[2] = v2;
  v13[3] = v16;
  v13[4] = v10;
  v13[5] = v3;
  v13[6] = v9;
  Swift::String v14 = (void *)swift_task_alloc();
  v1[562] = v14;
  *Swift::String v14 = v1;
  v14[1] = sub_10010C7C0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v17, v10, v12, 0xD000000000000025, 0x8000000100375960, sub_1001122FC, v13, &type metadata for ServerBaseResponse);
}

uint64_t sub_10010C7C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 4504) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 4256);
  if (v0) {
    unint64_t v4 = sub_10010CFFC;
  }
  else {
    unint64_t v4 = sub_10010CBA0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10010C8D8()
{
  Swift::String v14 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[554];
  uint64_t v2 = v0[546];
  uint64_t v3 = v0[542];
  uint64_t v4 = v0[540];
  swift_release();
  sub_100030644(v4, (uint64_t (*)(void))type metadata accessor for RefreshClientEndpoint);
  v1(v2, v3);
  uint64_t v5 = v0[560];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    v0[528] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v9 = String.init<A>(describing:)();
    v0[529] = sub_100037004(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Refresh client failed due to %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10012A9B8(v0 + 146);
  sub_100013B50((uint64_t)(v0 + 146), (uint64_t)(v0 + 74), &qword_1003ECDF0);
  sub_100013B50((uint64_t)(v0 + 74), v0[531], &qword_1003ECDF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10010CBA0()
{
  uint64_t v22 = v0;
  uint64_t v20 = v0 + 218;
  memcpy(v0 + 2, v0 + 434, 0x240uLL);
  memcpy(v0 + 290, v0 + 434, 0x240uLL);
  sub_10000A520((uint64_t)(v0 + 516), &qword_1003ECD18);
  sub_1000233E4((uint64_t)(v0 + 511));
  sub_1000233E4((uint64_t)(v0 + 506));
  sub_100036A4C(v0 + 2);
  sub_100036A4C(v0 + 2);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_100036A4C(v0 + 2);
    uint64_t v4 = sub_10003338C();
    unint64_t v6 = v5;
    sub_1000367D8(v0 + 2);
    v0[530] = sub_100037004(v4, v6, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000367D8(v0 + 2);
    sub_1000367D8(v0 + 2);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received refresh client response: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000367D8(v0 + 2);
    sub_1000367D8(v0 + 2);
  }

  uint64_t v7 = v0[535];
  static Date.trustedNow.getter(v7);
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  if (qword_1003EC048 != -1) {
    swift_once();
  }
  uint64_t v9 = v0[558];
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[554];
  uint64_t v18 = v0[546];
  unint64_t v16 = v0[559];
  uint64_t v17 = v0[542];
  uint64_t v15 = v0[540];
  uint64_t v10 = v0[535];
  uint64_t v11 = v0[534];
  uint64_t v12 = sub_100044014(&qword_1003F0100);
  sub_100044058(v12, (uint64_t)qword_1003EF840);
  sub_100013210(v10, v11, (uint64_t *)&unk_1003EE800);
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  swift_endAccess();
  sub_10000A520(v10, (uint64_t *)&unk_1003EE800);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v9, v16);
  sub_100030644(v15, (uint64_t (*)(void))type metadata accessor for RefreshClientEndpoint);
  v19(v18, v17);
  memcpy(v20, v0 + 290, 0x240uLL);
  nullsub_1(v20);
  sub_100013B50((uint64_t)v20, (uint64_t)(v0 + 74), &qword_1003ECDF0);
  swift_task_dealloc();
  sub_100013B50((uint64_t)(v0 + 74), v0[531], &qword_1003ECDF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10010CFFC()
{
  unint64_t v16 = v0;
  unint64_t v1 = v0[559];
  uint64_t v2 = v0[558];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[554];
  uint64_t v4 = v0[546];
  uint64_t v5 = v0[542];
  uint64_t v6 = v0[540];
  swift_task_dealloc();
  sub_10000A520((uint64_t)(v0 + 516), &qword_1003ECD18);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100030644(v6, (uint64_t (*)(void))type metadata accessor for RefreshClientEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 511));
  sub_1000233E4((uint64_t)(v0 + 506));
  uint64_t v7 = v0[563];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    v0[528] = v7;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v11 = String.init<A>(describing:)();
    v0[529] = sub_100037004(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Refresh client failed due to %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10012A9B8(v0 + 146);
  sub_100013B50((uint64_t)(v0 + 146), (uint64_t)(v0 + 74), &qword_1003ECDF0);
  sub_100013B50((uint64_t)(v0 + 74), v0[531], &qword_1003ECDF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10010D32C()
{
  uint64_t v10 = v0;
  swift_release();
  uint64_t v1 = v0[552];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[528] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[529] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Refresh client failed due to %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10012A9B8(v0 + 146);
  sub_100013B50((uint64_t)(v0 + 146), (uint64_t)(v0 + 74), &qword_1003ECDF0);
  sub_100013B50((uint64_t)(v0 + 74), v0[531], &qword_1003ECDF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10010D5B8()
{
  *(void *)(v1 + 4384) = v0;
  return _swift_task_switch(sub_10010D5D8, v0, 0);
}

uint64_t sub_10010D5D8()
{
  uint64_t v8 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[549] = sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[547] = sub_100037004(0xD00000000000003DLL, 0x8000000100375C00, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[550] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10010D7D8;
  return sub_10000E400((uint64_t)(v0 + 434));
}

uint64_t sub_10010D7D8()
{
  uint64_t v1 = *(void *)v0 + 2176;
  uint64_t v2 = *(void *)v0 + 3472;
  uint64_t v3 = *(void *)(*(void *)v0 + 4384);
  swift_task_dealloc();
  sub_100013B50(v2, v1, &qword_1003ECCD0);
  return _swift_task_switch(sub_10010D90C, v3, 0);
}

uint64_t sub_10010D90C()
{
  uint64_t v13 = v0;
  sub_100013B50((uint64_t)(v0 + 434), (uint64_t)(v0 + 218), &qword_1003ECCD0);
  if (sub_10005F070((uint64_t)(v0 + 218)) == 1) {
    goto LABEL_2;
  }
  memcpy(v0 + 326, v0 + 218, 0x1B0uLL);
  sub_100013B50((uint64_t)(v0 + 358), (uint64_t)(v0 + 526), &qword_1003ECCD8);
  sub_100013B50((uint64_t)(v0 + 526), (uint64_t)(v0 + 508), &qword_1003ECCD8);
  if (sub_10005F088((uint64_t)(v0 + 508)) == 1
    && (sub_100013B50((uint64_t)(v0 + 272), (uint64_t)(v0 + 380), &qword_1003ECCD0),
        sub_100013B50((uint64_t)(v0 + 392), (uint64_t)(v0 + 488), &qword_1003ED068),
        sub_100085654((uint64_t)(v0 + 488)) == 1))
  {
    uint64_t v6 = v0[430];
    uint64_t v7 = v0[431];
    sub_1000372F0(v6, v7);
    sub_10001F3E0((uint64_t)(v0 + 434), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    if (!v7)
    {
LABEL_2:
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v1, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, v2, "Force refreshClient, since we have nil server settings in local DB.", v3, 2u);
        swift_slowDealloc();
      }

      uint64_t v4 = (void *)swift_task_alloc();
      v0[551] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10010DCA4;
      return sub_10010B8B8((uint64_t)(v0 + 74));
    }
    sub_100037334(v6, v7);
  }
  else
  {
    sub_10001F3E0((uint64_t)(v0 + 434), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
  }
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    v0[546] = sub_100037004(0xD00000000000003DLL, 0x8000000100375C00, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s not eligible, since we have non-nil serverSettings already.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10010DCA4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 4384);
  swift_task_dealloc();
  return _swift_task_switch(sub_10010DDB4, v1, 0);
}

uint64_t sub_10010DDB4()
{
  uint64_t v15 = v0;
  sub_100013B50(v0 + 592, v0 + 16, &qword_1003ECDF0);
  if (sub_10005F070(v0 + 16) == 1 || *(unsigned char *)(v0 + 248) != 1)
  {
    sub_10012A634(v0 + 592, sub_10012A72C);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      sub_100013B50(v0 + 592, v0 + 1168, &qword_1003ECDF0);
      int v9 = sub_10005F070(v0 + 1168);
      char v10 = *(unsigned char *)(v0 + 1400);
      if (v9 == 1) {
        char v10 = 21;
      }
      *(unsigned char *)(v0 + 4424) = v10;
      sub_100044014(&qword_1003EE280);
      uint64_t v11 = String.init<A>(describing:)();
      *(void *)(v0 + 4352) = sub_100037004(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10012A634(v0 + 592, sub_10012A3AC);
      sub_10012A634(v0 + 592, sub_10012A3AC);
      *(_WORD *)(v8 + 12) = 2050;
      *(void *)(v0 + 4360) = 0x40AC200000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Force refreshClient call failed with %{public}s\nre-register an XPC activity fired after %{public}f", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10012A634(v0 + 592, sub_10012A3AC);
      sub_10012A634(v0 + 592, sub_10012A3AC);
    }

    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 4416) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10010E150;
    return sub_100160B54();
  }
  else
  {
    sub_10012A634(v0 + 592, sub_10012A3AC);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Force refreshClient call succeed, terminate scheduling XPC Activity to force refreshClient.", v3, 2u);
      swift_slowDealloc();
    }

    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_10010E150()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10010E244(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 688) = v4;
  *(unsigned char *)(v5 + 852) = a4;
  *(void *)(v5 + 680) = a3;
  *(void *)(v5 + 672) = a2;
  *(void *)(v5 + 664) = a1;
  uint64_t v6 = type metadata accessor for Handle();
  *(void *)(v5 + 696) = v6;
  *(void *)(v5 + 704) = *(void *)(v6 - 8);
  *(void *)(v5 + 712) = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  *(void *)(v5 + 720) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  *(void *)(v5 + 728) = v7;
  *(void *)(v5 + 736) = *(void *)(v7 - 8);
  *(void *)(v5 + 744) = swift_task_alloc();
  *(void *)(v5 + 752) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for HandleType();
  *(void *)(v5 + 760) = v8;
  *(void *)(v5 + 768) = *(void *)(v8 - 8);
  *(void *)(v5 + 776) = swift_task_alloc();
  *(void *)(v5 + 784) = swift_task_alloc();
  return _swift_task_switch(sub_10010E41C, v4, 0);
}

uint64_t sub_10010E41C()
{
  uint64_t v24 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 784);
  uint64_t v2 = *(void *)(v0 + 768);
  uint64_t v3 = *(void *)(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 680);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 792) = sub_100044058(v5, (uint64_t)qword_10040B708);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 800) = v6;
  *(void *)(v0 + 808) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 784);
  uint64_t v11 = *(void *)(v0 + 768);
  uint64_t v12 = *(void *)(v0 + 760);
  if (v9)
  {
    int v22 = *(unsigned __int8 *)(v0 + 852);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446722;
    *(void *)(v0 + 648) = sub_100037004(0xD00000000000002BLL, 0x8000000100375BD0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 656) = sub_100037004(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
    *(_WORD *)(v13 + 22) = 1026;
    *(_DWORD *)(v0 + 848) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s type: %{public}s shouldRefresh: %{BOOL,public}d", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(*(void *)(v0 + 784), *(void *)(v0 + 760));
  }

  *(void *)(v0 + 816) = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10010E754;
  uint64_t v18 = *(void *)(v0 + 720);
  uint64_t v19 = *(void *)(v0 + 680);
  uint64_t v20 = *(void *)(v0 + 672);
  return sub_10014BECC(v18, v20, v19);
}

uint64_t sub_10010E754()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 688);
  swift_task_dealloc();
  return _swift_task_switch(sub_10010E864, v1, 0);
}

uint64_t sub_10010E864()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void *)(v0 + 736);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 720);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    int v4 = *(unsigned __int8 *)(v0 + 852);
    sub_10000A520(v3, &qword_1003ECFE8);
    if (v4 == 1)
    {
      uint64_t v5 = v0 + 16;
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
      uint64_t v7 = *(void *)(v0 + 776);
      uint64_t v8 = *(void *)(v0 + 760);
      uint64_t v9 = *(void *)(v0 + 680);
      (*(void (**)(void, void, void))(*(void *)(v0 + 704) + 16))(*(void *)(v0 + 712), *(void *)(v0 + 672), *(void *)(v0 + 696));
      v6(v7, v9, v8);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
      uint64_t v14 = *(void *)(v0 + 776);
      uint64_t v15 = *(void *)(v0 + 760);
      uint64_t v16 = *(void *)(v0 + 712);
      uint64_t v17 = *(void *)(v0 + 704);
      uint64_t v18 = *(void *)(v0 + 696);
      if (v12)
      {
        uint64_t v41 = *(void *)(v0 + 760);
        uint64_t v19 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 141558787;
        *(void *)(v0 + 592) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v19 + 12) = 2081;
        sub_1000256E8(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
        uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 600) = sub_100037004(v20, v21, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v5 = v0 + 16;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
        *(_WORD *)(v19 + 22) = 2160;
        *(void *)(v0 + 608) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v19 + 32) = 2081;
        sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 616) = sub_100037004(v22, v23, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v13(v14, v41);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handle %{private,mask.hash}s\nwith type: %{private,mask.hash}s not found. Refreshing...", (uint8_t *)v19, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v17 + 8))(*(void *)(v0 + 712), *(void *)(v0 + 696));
        v13(v14, v15);
      }
      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 832) = v40;
      *uint64_t v40 = v0;
      v40[1] = sub_10010EF9C;
      return sub_10010B8B8(v5);
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 736) + 56))(*(void *)(v0 + 664), 1, 1, *(void *)(v0 + 728));
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 752);
    uint64_t v25 = *(void *)(v0 + 744);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v42(v24, v3, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v25, v24, v2);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void *)(v0 + 744);
    uint64_t v30 = *(void *)(v0 + 736);
    uint64_t v31 = *(void *)(v0 + 728);
    if (v28)
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446723;
      *(void *)(v0 + 624) = sub_100037004(0xD00000000000002BLL, 0x8000000100375BD0, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2160;
      *(void *)(v0 + 632) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 22) = 2081;
      sub_1000256E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 640) = sub_100037004(v33, v34, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s found friend:%{private,mask.hash}s", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v30 + 8))(*(void *)(v0 + 744), *(void *)(v0 + 728));
    }

    uint64_t v35 = *(void *)(v0 + 736);
    uint64_t v36 = *(void *)(v0 + 728);
    uint64_t v37 = *(void *)(v0 + 664);
    v42(v37, *(void *)(v0 + 752), v36);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v36);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_10010EF9C()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  sub_10012A634(v1 + 2, sub_10012A3AC);
  uint64_t v3 = (void *)swift_task_alloc();
  v1[105] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10010F148;
  uint64_t v4 = v1[85];
  uint64_t v5 = v1[84];
  uint64_t v6 = v1[83];
  return sub_10010E244(v6, v5, v4, 0);
}

uint64_t sub_10010F148()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10010F2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 696) = v5;
  *(unsigned char *)(v6 + 884) = a5;
  *(void *)(v6 + 688) = a4;
  *(void *)(v6 + 680) = a3;
  *(void *)(v6 + 672) = a2;
  *(void *)(v6 + 664) = a1;
  uint64_t v7 = type metadata accessor for Handle();
  *(void *)(v6 + 704) = v7;
  *(void *)(v6 + 712) = *(void *)(v7 - 8);
  *(void *)(v6 + 720) = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  *(void *)(v6 + 728) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Friend();
  *(void *)(v6 + 736) = v8;
  *(void *)(v6 + 744) = *(void *)(v8 - 8);
  *(void *)(v6 + 752) = swift_task_alloc();
  *(void *)(v6 + 760) = swift_task_alloc();
  *(void *)(v6 + 768) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for HandleType();
  *(void *)(v6 + 776) = v9;
  *(void *)(v6 + 784) = *(void *)(v9 - 8);
  *(void *)(v6 + 792) = swift_task_alloc();
  *(void *)(v6 + 800) = swift_task_alloc();
  return _swift_task_switch(sub_10010F4DC, v5, 0);
}

uint64_t sub_10010F4DC()
{
  uint64_t v27 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  unint64_t v1 = *(void *)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 784);
  uint64_t v3 = *(void *)(v0 + 776);
  uint64_t v4 = *(void *)(v0 + 688);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 808) = sub_100044058(v5, (uint64_t)qword_10040B708);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 816) = v6;
  *(void *)(v0 + 824) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 800);
  uint64_t v11 = *(void *)(v0 + 784);
  uint64_t v12 = *(void *)(v0 + 776);
  if (v9)
  {
    int v24 = *(unsigned __int8 *)(v0 + 884);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446722;
    uint64_t v26 = v25;
    *(void *)(v0 + 648) = sub_100037004(0xD000000000000020, 0x8000000100375BA0, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2080;
    sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 656) = sub_100037004(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
    *(_WORD *)(v13 + 22) = 1026;
    *(_DWORD *)(v0 + 880) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s type: %s shouldRefresh: %{BOOL,public}d", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(*(void *)(v0 + 800), *(void *)(v0 + 776));
  }

  *(void *)(v0 + 832) = v16;
  uint64_t v17 = *(void *)(v0 + 784);
  uint64_t v18 = *(void *)(v0 + 776);
  uint64_t v19 = *(void *)(v0 + 688);
  sub_100044014(&qword_1003ECF40);
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v0 + 840) = v21;
  *(_OWORD *)(v21 + 16) = xmmword_100367D70;
  v6(v21 + v20, v19, v18);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 848) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_10010F880;
  return sub_100021584(v21, 1);
}

uint64_t sub_10010F880(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 696);
  *(void *)(*(void *)v1 + 856) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10010F9B4, v2, 0);
}

uint64_t sub_10010F9B4()
{
  uint64_t v64 = v0;
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_12:
    unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 744) + 56);
    v15(*(void *)(v0 + 728), 1, 1, *(void *)(v0 + 736));
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)(v0 + 744);
  uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
  uint64_t v4 = v3 + 16;
  unint64_t v62 = v5;
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
  uint64_t v7 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 712) + 8);
  uint64_t v59 = *(void *)(v0 + 680);
  *(void *)os_log_type_t type = *(void *)(v4 + 56);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v8 = *(void *)(v0 + 720);
    uint64_t v9 = *(void *)(v0 + 704);
    v62(*(void *)(v0 + 760), v6, *(void *)(v0 + 736));
    Friend.handle.getter();
    uint64_t v10 = Handle.serverID.getter();
    uint64_t v12 = v11;
    (*v7)(v8, v9);
    if (!v12) {
      goto LABEL_3;
    }
    if (v10 == *(void *)(v0 + 672) && v12 == v59) {
      break;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_14;
    }
LABEL_3:
    (*(void (**)(void, void))(v4 - 8))(*(void *)(v0 + 760), *(void *)(v0 + 736));
    v6 += *(void *)type;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v0 + 744);
  uint64_t v17 = *(void *)(v0 + 736);
  uint64_t v18 = *(void *)(v0 + 728);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 32))(v18, *(void *)(v0 + 760), v17);
  unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v15(v18, 0, 1, v17);
LABEL_15:
  uint64_t v19 = *(void *)(v0 + 744);
  uint64_t v20 = *(void *)(v0 + 736);
  uint64_t v21 = *(void *)(v0 + 728);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v20) == 1)
  {
    int v22 = *(unsigned __int8 *)(v0 + 884);
    sub_10000A520(*(void *)(v0 + 728), &qword_1003ECFE8);
    if (v22 == 1)
    {
      uint64_t v23 = v0 + 16;
      (*(void (**)(void, void, void))(v0 + 816))(*(void *)(v0 + 792), *(void *)(v0 + 688), *(void *)(v0 + 776));
      swift_bridgeObjectRetain_n();
      int v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
      uint64_t v28 = *(void *)(v0 + 792);
      uint64_t v29 = *(void *)(v0 + 776);
      unint64_t v30 = *(void *)(v0 + 680);
      if (v26)
      {
        uint64_t v31 = *(void *)(v0 + 672);
        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
        uint64_t v32 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 141558787;
        *(void *)(v0 + 592) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v33 = v31;
        uint64_t v23 = v0 + 16;
        *(void *)(v0 + 600) = sub_100037004(v33, v30, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v32 + 22) = 2160;
        *(void *)(v0 + 608) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 32) = 2081;
        sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 616) = sub_100037004(v34, v35, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v58(v28, v29);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Handle.serverID %{private,mask.hash}s\nwith type: %{private,mask.hash}s not found. Refreshing...", (uint8_t *)v32, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v27(v28, v29);
      }

      uint64_t v57 = (void *)swift_task_alloc();
      *(void *)(v0 + 864) = v57;
      void *v57 = v0;
      v57[1] = sub_100110208;
      return sub_10010B8B8(v23);
    }
    uint64_t v50 = *(void *)(v0 + 736);
    uint64_t v51 = *(void *)(v0 + 664);
    uint64_t v52 = 1;
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 768);
    uint64_t v37 = *(void *)(v0 + 752);
    uint64_t v38 = *(void *)(v0 + 744);
    uint64_t v39 = *(void *)(v0 + 736);
    uint64_t v40 = *(void (**)(uint64_t, void, uint64_t))(v38 + 32);
    v40(v36, *(void *)(v0 + 728), v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v36, v39);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = *(void *)(v0 + 752);
    uint64_t v45 = *(void *)(v0 + 744);
    uint64_t v46 = *(void *)(v0 + 736);
    if (v43)
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446723;
      uint64_t v63 = v60;
      *(void *)(v0 + 624) = sub_100037004(0xD000000000000020, 0x8000000100375BA0, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2160;
      *(void *)(v0 + 632) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 22) = 2081;
      sub_1000256E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 640) = sub_100037004(v48, v49, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s found friend:%{private,mask.hash}s", (uint8_t *)v47, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v45 + 8))(*(void *)(v0 + 752), *(void *)(v0 + 736));
    }

    uint64_t v53 = *(void *)(v0 + 736);
    uint64_t v54 = *(void *)(v0 + 664);
    v40(v54, *(void *)(v0 + 768), v53);
    uint64_t v51 = v54;
    uint64_t v52 = 0;
    uint64_t v50 = v53;
  }
  v15(v51, v52, 1, v50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v55 = *(uint64_t (**)(void))(v0 + 8);
  return v55();
}

uint64_t sub_100110208()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  sub_10012A634(v1 + 2, sub_10012A3AC);
  uint64_t v3 = (void *)swift_task_alloc();
  v1[109] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1001103C8;
  uint64_t v4 = v1[86];
  uint64_t v5 = v1[85];
  uint64_t v6 = v1[84];
  uint64_t v7 = v1[83];
  return sub_10010F2F4(v7, v6, v5, v4, 0);
}

uint64_t sub_1001103C8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100110598(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 108) = a4;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 56) = v4;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  sub_100044014(&qword_1003ECFE8);
  *(void *)(v5 + 64) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HandleType();
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = *(void *)(v6 - 8);
  *(void *)(v5 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100110690, v4, 0);
}

uint64_t sub_100110690()
{
  uint64_t v23 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 72);
  if (v8)
  {
    int v21 = *(unsigned __int8 *)(v0 + 108);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    *(void *)(v0 + 16) = sub_100037004(0xD00000000000002BLL, 0x8000000100375B70, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_100037004(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 1026;
    *(_DWORD *)(v0 + 104) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s type: %s shouldRefresh: %{BOOL,public}d", (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  }

  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1001109A4;
  uint64_t v16 = *(void *)(v0 + 64);
  char v17 = *(unsigned char *)(v0 + 108);
  uint64_t v18 = *(void *)(v0 + 40);
  uint64_t v19 = *(void *)(v0 + 48);
  return sub_10010E244(v16, v18, v19, v17);
}

uint64_t sub_1001109A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_100110AB4, v1, 0);
}

uint64_t sub_100110AB4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = type metadata accessor for Friend();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10000A520(v1, &qword_1003ECFE8);
    uint64_t v4 = 1;
  }
  else
  {
    Friend.handle.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    uint64_t v4 = 0;
  }
  uint64_t v5 = v0[4];
  uint64_t v6 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, v4, 1, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100110C24()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream, &qword_1003F0120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000440E8(*(void *)(v0 + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken), *(void *)(v0 + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken + 8));
  sub_100030644(v0 + OBJC_IVAR____TtC13findmylocated11DataManager_state, type metadata accessor for DataManager.State);
  sub_1000233E4(v0 + OBJC_IVAR____TtC13findmylocated11DataManager_sic);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100110D14()
{
  sub_100110C24();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100110D40()
{
  return type metadata accessor for DataManager(0);
}

void sub_100110D48()
{
  sub_100110E98();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DataManager.State(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100110E98()
{
  if (!qword_1003EF918)
  {
    sub_10004AE58((uint64_t *)&unk_1003EF920);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003EF918);
    }
  }
}

uint64_t *sub_100110EF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for Friend();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for Device();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = sub_100044014(&qword_1003EFCD0);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_100111148(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100030644((uint64_t)a1, type metadata accessor for DataManager.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for Friend();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for Device();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_100044014(&qword_1003EFCD0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100111374(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for Friend();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
LABEL_10:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for Device();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100044014(&qword_1003EFCD0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    goto LABEL_10;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_10011157C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100030644((uint64_t)a1, type metadata accessor for DataManager.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for Friend();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for Device();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_100044014(&qword_1003EFCD0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1001117A8()
{
  sub_100111878();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Friend();
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void sub_100111878()
{
  if (!qword_1003EFD58)
  {
    type metadata accessor for Device();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003EFD58);
    }
  }
}

uint64_t sub_1001118D0()
{
  return sub_1000256E8(&qword_1003EFD88, (void (*)(uint64_t))type metadata accessor for DataManager.State);
}

uint64_t sub_100111918()
{
  return _swift_task_switch(sub_100111934, v0, 0);
}

uint64_t sub_100111934()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager: initialLaunchProcessing", v4, 2u);
    swift_slowDealloc();
  }

  int v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100111A48(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *int v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10010B4E0(a1, a2);
}

uint64_t sub_100111AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_100111B98()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_1001065E8();
}

uint64_t sub_100111C24()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100018CD0;
  return sub_10010724C();
}

uint64_t sub_100111CB0()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_100111D1C()
{
  return sub_1000256E8(&qword_1003EFD90, (void (*)(uint64_t))type metadata accessor for DataManager);
}

uint64_t sub_100111D64()
{
  return sub_1000256E8(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
}

uint64_t sub_100111DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100044014(&qword_1003EFDD0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  char v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v40 = a2;
  sub_100050C1C(a2, (uint64_t)v43);
  sub_100050C1C(a3, (uint64_t)v42);
  sub_100013210(a5, (uint64_t)v41, &qword_1003ECD18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v19 = (v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  sub_100022CC0(v43, v20 + 16);
  sub_100022CC0(v42, v20 + 56);
  *(void *)(v20 + 96) = a4;
  sub_100013B50((uint64_t)v41, v20 + 104, &qword_1003ECD18);
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v18, v17, v14);
  *(void *)(v20 + v19) = v39;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100044058(v21, (uint64_t)qword_10040B708);
  sub_100050C1C(v40, (uint64_t)v43);
  swift_retain_n();
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    v41[0] = v40;
    *(_DWORD *)uint64_t v25 = 136446722;
    LODWORD(v39) = v24;
    sub_100050C1C((uint64_t)v43, (uint64_t)v42);
    sub_100044014(&qword_1003EFDF0);
    uint64_t v26 = String.init<A>(describing:)();
    *(void *)&v42[0] = sub_100037004(v26, v27, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)v43);
    *(_WORD *)(v25 + 12) = 2082;
    uint64_t v28 = WorkItemQueue.name.getter();
    *(void *)&v42[0] = sub_100037004(v28, v29, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v25 + 22) = 2082;
    WorkItemQueue.WorkItem.id.getter();
    sub_1000256E8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = v37;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v30);
    *(void *)&v42[0] = sub_100037004(v31, v33, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v39, "Scheduling command to %{public}s on %{public}s.\nWorkItem: %{public}s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000233E4((uint64_t)v43);
    swift_release_n();
    swift_release();
    swift_release();
  }

  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100112300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[263] = a6;
  v6[262] = a5;
  v6[261] = a4;
  v6[260] = a3;
  v6[259] = a2;
  v6[258] = a1;
  uint64_t v7 = type metadata accessor for Date();
  v6[264] = v7;
  v6[265] = *(void *)(v7 - 8);
  v6[266] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v6[267] = v8;
  v6[268] = *(void *)(v8 - 8);
  v6[269] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v6[270] = v9;
  v6[271] = *(void *)(v9 - 8);
  v6[272] = swift_task_alloc();
  v6[273] = type metadata accessor for RefreshClientEndpoint();
  v6[274] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  v6[275] = v10;
  v6[276] = *(void *)(v10 - 8);
  v6[277] = swift_task_alloc();
  v6[278] = swift_task_alloc();
  v6[279] = swift_task_alloc();
  v6[280] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ContinuousClock();
  v6[281] = v11;
  v6[282] = *(void *)(v11 - 8);
  v6[283] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Response();
  v6[284] = v12;
  v6[285] = *(void *)(v12 - 8);
  v6[286] = swift_task_alloc();
  v6[287] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  v6[288] = v13;
  v6[289] = *(void *)(v13 - 8);
  v6[290] = swift_task_alloc();
  return _swift_task_switch(sub_100112664, 0, 0);
}

uint64_t sub_100112664()
{
  uint64_t v20 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[260];
  uint64_t v2 = v0[259];
  v0[291] = sub_100044058(v0[270], (uint64_t)qword_10040B708);
  sub_100050C1C(v2, (uint64_t)(v0 + 228));
  sub_100050C1C(v1, (uint64_t)(v0 + 243));
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v5 = v0[290];
    uint64_t v6 = v0[289];
    uint64_t v7 = v0[288];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446722;
    sub_100050C1C((uint64_t)(v0 + 228), (uint64_t)(v0 + 223));
    sub_100044014(&qword_1003EFDF0);
    uint64_t v9 = String.init<A>(describing:)();
    v0[255] = sub_100037004(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)(v0 + 228));
    *(_WORD *)(v8 + 12) = 2082;
    WorkItemQueue.WorkItem.id.getter();
    sub_1000256E8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v0[256] = sub_100037004(v11, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 22) = 2080;
    sub_100042524(v0 + 243, v0[246]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[257] = sub_100037004(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)(v0 + 243));
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Sending command to %{public}s\nWorkItem: %{public}s\n%s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000233E4((uint64_t)(v0 + 228));
    swift_release_n();
    sub_1000233E4((uint64_t)(v0 + 243));
  }

  uint64_t v16 = v0[261];
  return _swift_task_switch(sub_100112A00, v16, 0);
}

uint64_t sub_100112A00()
{
  sub_100050C1C(*(void *)(v0 + 2088) + OBJC_IVAR____TtC13findmylocated11DataManager_sic, v0 + 1744);
  return _swift_task_switch(sub_100112A78, 0, 0);
}

uint64_t sub_100112A78()
{
  uint64_t v1 = v0[221];
  uint64_t v2 = v0[222];
  sub_100042524(v0 + 218, v1);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8)
                                                                                    + **(int **)(v2 + 8));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[292] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100112B90;
  uint64_t v4 = v0[287];
  uint64_t v5 = v0[262];
  uint64_t v6 = v0[260];
  uint64_t v7 = v0[259];
  return v9(v4, v7, v6, v5, v1, v2);
}

uint64_t sub_100112B90()
{
  *(void *)(*(void *)v1 + 2344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100113D2C;
  }
  else {
    uint64_t v2 = sub_100112CA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100112CA4()
{
  sub_1000233E4((uint64_t)(v0 + 218));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[294] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100112D50;
  uint64_t v2 = v0[287];
  uint64_t v3 = v0[286];
  uint64_t v4 = v0[260];
  uint64_t v5 = v0[259];
  return sub_100114494(v3, v5, v4, v2);
}

uint64_t sub_100112D50()
{
  *(void *)(*(void *)v1 + 2360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100113FB8;
  }
  else {
    uint64_t v2 = sub_100112E64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100112E64()
{
  uint64_t v1 = v0[259];
  ContinuousClock.init()();
  ContinuousClock.now.getter();
  sub_100050C1C(v1, (uint64_t)(v0 + 238));
  sub_100044014(&qword_1003EFDF0);
  int v2 = swift_dynamicCast();
  if (v2) {
    sub_100030644(v0[274], (uint64_t (*)(void))type metadata accessor for RefreshClientEndpoint);
  }
  uint64_t v3 = (void *)swift_task_alloc();
  v0[296] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100112F8C;
  uint64_t v4 = v0[286];
  return sub_100115E58(v4, v2);
}

uint64_t sub_100112F8C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100113088, 0, 0);
}

uint64_t sub_100113088()
{
  uint64_t v80 = v0;
  uint64_t v1 = *(void *)(v0 + 2328);
  uint64_t v73 = *(void *)(v0 + 2240);
  uint64_t v2 = *(void *)(v0 + 2232);
  uint64_t v3 = *(void *)(v0 + 2224);
  uint64_t v76 = *(void *)(v0 + 2216);
  uint64_t v4 = *(void *)(v0 + 2208);
  uint64_t v5 = *(void *)(v0 + 2200);
  uint64_t v6 = *(void *)(v0 + 2176);
  uint64_t v7 = *(void *)(v0 + 2168);
  uint64_t v8 = *(void *)(v0 + 2160);
  ContinuousClock.now.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v1, v8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v3, v73, v5);
  v9(v76, v2, v5);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v63 = *(void *)(v0 + 2224);
    uint64_t v64 = *(void *)(v0 + 2216);
    uint64_t v12 = *(void *)(v0 + 2208);
    os_log_t log = v10;
    uint64_t v13 = *(void *)(v0 + 2200);
    uint64_t v70 = *(void *)(v0 + 2168);
    uint64_t v74 = *(void *)(v0 + 2160);
    uint64_t v77 = *(void *)(v0 + 2176);
    uint64_t v14 = *(void *)(v0 + 2152);
    uint64_t v15 = *(void *)(v0 + 2144);
    uint64_t v65 = *(void *)(v0 + 2136);
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v79[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_1000256E8(&qword_1003EFE10, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v17 = static Duration.description<A>(_:_:units:)();
    unint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v65);
    *(void *)(v0 + 2024) = sub_100037004(v17, v19, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v20(v63, v13);
    v20(v64, v13);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "updateData Duration: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v77, v74);
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 2216);
    uint64_t v22 = *(void *)(v0 + 2200);
    uint64_t v23 = *(void *)(v0 + 2176);
    uint64_t v24 = *(void *)(v0 + 2168);
    uint64_t v25 = *(void *)(v0 + 2160);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 2208) + 8);
    v20(*(void *)(v0 + 2224), v22);
    v20(v21, v22);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  *(void *)(v0 + 2376) = v20;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Start decoding command response", v28, 2u);
    swift_slowDealloc();
  }
  uint64_t v29 = *(void *)(v0 + 2360);

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v30 = Response.body.getter();
  unint64_t v32 = v31;
  sub_10004C188();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v29)
  {
    uint64_t v72 = *(void *)(v0 + 2288);
    uint64_t v75 = *(void *)(v0 + 2296);
    unint64_t v33 = v20;
    uint64_t v34 = *(void *)(v0 + 2280);
    os_log_t loga = *(os_log_t *)(v0 + 2264);
    uint64_t v71 = *(void *)(v0 + 2272);
    uint64_t v78 = v29;
    uint64_t v35 = *(void *)(v0 + 2256);
    uint64_t v66 = *(void *)(v0 + 2240);
    uint64_t v67 = *(void *)(v0 + 2248);
    uint64_t v36 = *(void *)(v0 + 2232);
    uint64_t v37 = *(void *)(v0 + 2200);
    sub_100044090(v30, v32);
    swift_release();
    v33(v36, v37);
    v33(v66, v37);
    (*(void (**)(os_log_t, uint64_t))(v35 + 8))(loga, v67);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v38(v72, v71);
    v38(v75, v71);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136446210;
      *(void *)(v0 + 1992) = v78;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v42 = String.init<A>(describing:)();
      *(void *)(v0 + 1984) = sub_100037004(v42, v43, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "sendCommand error: %{public}s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *(void *)(v0 + 2032) = v78;
    sub_100044014(&qword_1003EFDD0);
    CheckedContinuation.resume(throwing:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    return v53();
  }
  uint64_t v44 = *(void *)(v0 + 2080);
  sub_100044090(v30, v32);
  swift_release();
  memcpy((void *)(v0 + 16), (const void *)(v0 + 1168), 0x240uLL);
  sub_100050C1C(v44, v0 + 1864);
  sub_100036A4C((void *)(v0 + 16));
  sub_100036A4C((void *)(v0 + 16));
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    v79[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315394;
    sub_100042524((void *)(v0 + 1864), *(void *)(v0 + 1888));
    swift_getDynamicType();
    uint64_t v48 = _typeName(_:qualified:)();
    *(void *)(v0 + 2008) = sub_100037004(v48, v49, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000233E4(v0 + 1864);
    *(_WORD *)(v47 + 12) = 2080;
    sub_100036A4C((void *)(v0 + 16));
    uint64_t v50 = sub_10003338C();
    unint64_t v52 = v51;
    sub_1000367D8((void *)(v0 + 16));
    *(void *)(v0 + 2016) = sub_100037004(v50, v52, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000367D8((void *)(v0 + 16));
    sub_1000367D8((void *)(v0 + 16));
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s decoded response: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000233E4(v0 + 1864);
    sub_1000367D8((void *)(v0 + 16));
    sub_1000367D8((void *)(v0 + 16));
  }

  int v55 = *(unsigned __int8 *)(v0 + 248);
  if (v55 == 21)
  {
    if (*(void *)(v0 + 192) == 1)
    {
LABEL_21:
      uint64_t v62 = *(void *)(v0 + 2088);
      char v61 = sub_100113A6C;
      goto LABEL_22;
    }
    int v55 = *(unsigned __int8 *)(v0 + 208);
  }
  if (v55 != 1) {
    goto LABEL_21;
  }
  uint64_t v56 = *(void *)(v0 + 2128);
  uint64_t v57 = *(void *)(v0 + 2120);
  uint64_t v58 = *(void *)(v0 + 2112);
  uint64_t v59 = *(void *)(v0 + 2088);
  static Date.trustedNow.getter(v56);
  Date.timeIntervalSince1970.getter();
  *(void *)(v0 + 2384) = v60;
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  char v61 = sub_100113A3C;
  uint64_t v62 = v59;
LABEL_22:
  return _swift_task_switch(v61, v62, 0);
}

uint64_t sub_100113A3C()
{
  *(void *)(*(void *)(v0 + 2088) + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp) = *(void *)(v0 + 2384);
  return _swift_task_switch(sub_100113A6C, *(void *)(v0 + 2088), 0);
}

uint64_t sub_100113A6C()
{
  *(void *)(v0 + 2392) = *(void *)(*(void *)(v0 + 2088)
                                     + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp);
  return _swift_task_switch(sub_100113A9C, 0, 0);
}

uint64_t sub_100113A9C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[299];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134349056;
    v0[250] = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CommandManager: lastSuccessfulResponseTimestamp: %{public}f", v4, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[297];
  uint64_t v17 = v0[286];
  uint64_t v18 = v0[287];
  uint64_t v6 = v0[285];
  uint64_t v15 = v0[283];
  uint64_t v16 = v0[284];
  uint64_t v7 = v0[282];
  uint64_t v13 = v0[280];
  uint64_t v14 = v0[281];
  uint64_t v8 = v0[279];
  uint64_t v9 = v0[275];

  memcpy(v0 + 74, v0 + 2, 0x240uLL);
  sub_100044014(&qword_1003EFDD0);
  CheckedContinuation.resume(returning:)();
  v5(v8, v9);
  v5(v13, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v14);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v17, v16);
  v10(v18, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100113D2C()
{
  uint64_t v10 = v0;
  sub_1000233E4((uint64_t)(v0 + 218));
  uint64_t v1 = v0[293];
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[249] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[248] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "sendCommand error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v0[254] = v1;
  sub_100044014(&qword_1003EFDD0);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100113FB8()
{
  uint64_t v10 = v0;
  (*(void (**)(void, void))(v0[285] + 8))(v0[287], v0[284]);
  uint64_t v1 = v0[295];
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[249] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[248] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "sendCommand error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v0[254] = v1;
  sub_100044014(&qword_1003EFDD0);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100114258()
{
  uint64_t v1 = sub_100044014(&qword_1003EFDD0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  sub_1000233E4(v0 + 16);
  sub_1000233E4(v0 + 56);
  swift_release();
  if (*(void *)(v0 + 128)) {
    sub_1000233E4(v0 + 104);
  }
  uint64_t v5 = (v3 + 144) & ~v3;
  unint64_t v6 = ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  return _swift_deallocObject(v0, v6, v3 | 7);
}

uint64_t sub_100114354(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100044014(&qword_1003EFDD0) - 8);
  uint64_t v5 = *(void *)(v1 + 96);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_100112300(a1, v1 + 16, v1 + 56, v5, v1 + 104, v6);
}

uint64_t sub_100114494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[49] = a4;
  v5[50] = v4;
  v5[47] = a2;
  v5[48] = a3;
  v5[46] = a1;
  uint64_t v6 = type metadata accessor for Response();
  v5[51] = v6;
  v5[52] = *(void *)(v6 - 8);
  v5[53] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v5[54] = v7;
  v5[55] = *(void *)(v7 - 8);
  v5[56] = swift_task_alloc();
  return _swift_task_switch(sub_1001145B8, v4, 0);
}

uint64_t sub_1001145B8()
{
  uint64_t v65 = v0;
  uint64_t v1 = v0 + 43;
  uint64_t v2 = (void *)Response.response.getter();
  id v3 = [v2 statusCode];

  char v4 = sub_100036DB8((uint64_t)v3);
  if (v4 == 21)
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v6 = v0[52];
    uint64_t v5 = v0[53];
    uint64_t v7 = v0[51];
    uint64_t v8 = v0[49];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040B708);
    uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v63(v5, v8, v7);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[52];
    uint64_t v13 = v0[53];
    uint64_t v15 = v0[51];
    if (v12)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134217984;
      uint64_t v17 = (void *)Response.response.getter();
      id v62 = [v17 statusCode];

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      v0[42] = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid status code: %ld", v16, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(v0[53], v0[51]);
    }

    v63(v0[46], v0[49], v0[51]);
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v31 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    char v18 = v4;
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v19 = (uint64_t)(v0 + 7);
    uint64_t v20 = type metadata accessor for Logger();
    v0[57] = sub_100044058(v20, (uint64_t)qword_10040B708);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446466;
      v0[44] = sub_100037004(0xD000000000000036, 0x8000000100375A70, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v24 = sub_100010CF4(v18);
      v0[45] = sub_100037004(v24, v25, v64);
      uint64_t v19 = (uint64_t)(v0 + 7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s statusCode: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      uint64_t v1 = v0 + 43;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    switch(v18)
    {
      case 1:
        sub_100050C1C(v0[47], v19);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v32))
        {
          unint64_t v33 = (uint8_t *)swift_slowAlloc();
          v64[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v33 = 136315138;
          sub_100050C1C(v19, (uint64_t)(v0 + 2));
          sub_100044014(&qword_1003EFDF0);
          uint64_t v34 = String.init<A>(describing:)();
          *uint64_t v1 = sub_100037004(v34, v35, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000233E4(v19);
          _os_log_impl((void *)&_mh_execute_header, v26, v32, "%s succeeded!", v33, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          goto LABEL_13;
        }
        sub_1000233E4(v19);
        goto LABEL_14;
      case 5:
        swift_retain();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        BOOL v38 = os_log_type_enabled(v36, v37);
        uint64_t v39 = v0[50];
        if (v38)
        {
          os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v40 = 134217984;
          v0[40] = *(void *)(v39 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Need to renew credentials. Retry count: %ld", v40, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_release();
        }

        uint64_t v55 = v0[50];
        uint64_t v56 = *(void *)(v55 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount);
        if (v56 <= 0)
        {
          *(void *)(v55 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount) = v56 + 1;
          char v61 = (void *)swift_task_alloc();
          v0[58] = v61;
          *char v61 = v0;
          v61[1] = sub_1001152E4;
          return daemon.getter();
        }
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = 134217984;
          v0[37] = 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Exceeded retry limit: %ld", v59, 0xCu);
          swift_slowDealloc();
        }

        sub_10012A1B0();
        swift_allocError();
        *uint64_t v60 = 3;
LABEL_33:
        swift_willThrow();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v31 = (uint64_t (*)(void))v0[1];
        break;
      case 9:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v42;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.fenceCannotBeSet(_:);
        goto LABEL_32;
      case 12:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v45;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.upgradeNeeded(_:);
        goto LABEL_32;
      case 13:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v46;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.appUpgradeNeeded(_:);
        goto LABEL_32;
      case 14:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v47;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.geoFencingDisabled(_:);
        goto LABEL_32;
      case 15:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v48;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.deviceUpgradeNeeded(_:);
        goto LABEL_32;
      case 16:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v49;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.noMeDevice(_:);
        goto LABEL_32;
      case 17:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v50;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.phoneNumberOutOfNetwork(_:);
        goto LABEL_32;
      case 18:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v51;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.regionNotAvailable(_:);
        goto LABEL_32;
      case 19:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v52;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.fenceMaxLimitNotifyOthers(_:);
        goto LABEL_32;
      case 20:
        uint64_t v41 = type metadata accessor for Fence.Error();
        sub_1000256E8(&qword_1003EFF88, (void (*)(uint64_t))&type metadata accessor for Fence.Error);
        swift_allocError();
        uint64_t v43 = v53;
        uint64_t v44 = (unsigned int *)&enum case for Fence.Error.fenceMaxLimit(_:);
LABEL_32:
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *v44, v41);
        goto LABEL_33;
      default:
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          v64[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136446210;
          uint64_t v29 = sub_100010CF4(v18);
          v0[41] = sub_100037004(v29, v30, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unhandled status: %{public}s", v28, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
LABEL_13:
          swift_slowDealloc();
        }
LABEL_14:

        (*(void (**)(void, void, void))(v0[52] + 16))(v0[46], v0[49], v0[51]);
        goto LABEL_17;
    }
  }
  return v31();
}

uint64_t sub_1001152E4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 472) = a1;
  swift_task_dealloc();
  id v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 480) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000256E8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *id v3 = v9;
  v3[1] = sub_1001154C0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001154C0(uint64_t a1)
{
  id v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[61] = a1;
  v3[62] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[50];
    return _swift_task_switch(sub_100115CBC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[63] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10011564C;
    uint64_t v7 = v3[56];
    return sub_100352504(v7);
  }
}

uint64_t sub_10011564C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 512) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 400);
  if (v0) {
    uint64_t v4 = sub_100115D34;
  }
  else {
    uint64_t v4 = sub_100115778;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100115778()
{
  char v18 = v0;
  uint64_t v1 = v0[48];
  sub_100050C1C(v0[47], (uint64_t)(v0 + 17));
  sub_100050C1C(v1, (uint64_t)(v0 + 22));
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    sub_100050C1C((uint64_t)(v0 + 17), (uint64_t)(v0 + 12));
    sub_100044014(&qword_1003EFDF0);
    uint64_t v5 = String.init<A>(describing:)();
    v0[38] = sub_100037004(v5, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)(v0 + 17));
    *(_WORD *)(v4 + 12) = 2080;
    sub_100042524(v0 + 22, v0[25]);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[39] = sub_100037004(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)(v0 + 22));
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retry sending command to %s %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000233E4((uint64_t)(v0 + 17));
    sub_1000233E4((uint64_t)(v0 + 22));
  }

  sub_100050C1C(v0[50] + OBJC_IVAR____TtC13findmylocated11DataManager_sic, (uint64_t)(v0 + 27));
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[31];
  sub_100042524(v0 + 27, v9);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[35] = type metadata accessor for BasicCredential();
  v0[36] = &protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 32);
  BasicCredential.init(username:password:)();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)(v10 + 8)
                                                                                      + **(int **)(v10 + 8));
  os_log_type_t v11 = (void *)swift_task_alloc();
  v0[65] = v11;
  *os_log_type_t v11 = v0;
  v11[1] = sub_100115ACC;
  uint64_t v12 = v0[47];
  uint64_t v13 = v0[48];
  uint64_t v14 = v0[46];
  return v16(v14, v12, v13, v0 + 32, v9, v10);
}

uint64_t sub_100115ACC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 256;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v2 + 400);
  sub_10000A520(v3, &qword_1003ECD18);
  if (v0) {
    uint64_t v5 = sub_100115DAC;
  }
  else {
    uint64_t v5 = sub_100115C10;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100115C10()
{
  uint64_t v2 = v0[55];
  uint64_t v1 = v0[56];
  uint64_t v3 = v0[54];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000233E4((uint64_t)(v0 + 27));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100115CBC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100115D34()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100115DAC()
{
  uint64_t v2 = v0[55];
  uint64_t v1 = v0[56];
  uint64_t v3 = v0[54];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000233E4((uint64_t)(v0 + 27));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100115E58(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 192) = a2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v2;
  *(void *)(v3 + 72) = *v2;
  uint64_t v4 = type metadata accessor for Response();
  *(void *)(v3 + 80) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 88) = v5;
  *(void *)(v3 + 96) = *(void *)(v5 + 64);
  *(void *)(v3 + 104) = swift_task_alloc();
  type metadata accessor for AccountService.State(0);
  *(void *)(v3 + 112) = swift_task_alloc();
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 128) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100115FB8;
  return daemon.getter();
}

uint64_t sub_100115FB8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 136) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 144) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000256E8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v3 = v9;
  v3[1] = sub_100116194;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100116194(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[19] = a1;
  v4[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = sub_100116880;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_1001162CC;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001162CC()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[19] + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  swift_beginAccess();
  sub_100129BB8(v3, v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_100116384, v2, 0);
}

uint64_t sub_100116384()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = sub_100044014(&qword_1003EFE18);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 3, 3, v3);
  char v4 = sub_100357AD4(v2, v1);
  sub_100030644(v1, type metadata accessor for AccountService.State);
  sub_100030644(v2, type metadata accessor for AccountService.State);
  if (v4)
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040B708);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "DataManager: should not updateData when state == .noAccount", v8, 2u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v9 + 120);
    uint64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 96);
      uint64_t v12 = *(void *)(v0 + 104);
      uint64_t v14 = *(void *)(v0 + 80);
      uint64_t v15 = *(void *)(v0 + 88);
      uint64_t v25 = *(void *)(v0 + 72);
      char v24 = *(unsigned char *)(v0 + 192);
      uint64_t v16 = *(void *)(v0 + 56);
      *(void *)(v9 + 120) = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v12, v16, v14);
      unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v18 = v17 + v13;
      unint64_t v19 = (v17 + v13) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v20 = swift_allocObject();
      *(void *)(v0 + 168) = v20;
      *(void *)(v20 + 16) = v11;
      *(void *)(v20 + 24) = v9;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))(v20 + v17, v12, v14);
      *(unsigned char *)(v20 + v18) = v24;
      *(void *)(v19 + v20 + 8) = v25;
      swift_retain();
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_1001166DC;
    }
    return withTimeout<A>(_:block:)();
  }
}

uint64_t sub_1001166DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    char v4 = sub_100116AC4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_release();
    char v4 = sub_100116804;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100116804()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100116880()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[20];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[5] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[6] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager updateData error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100116AC4()
{
  uint64_t v11 = v0;
  swift_release();
  swift_release();
  uint64_t v1 = v0[23];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[5] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[6] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager updateData error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100116D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Account();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100116DE0, 0, 0);
}

uint64_t sub_100116DE0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[2];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[3], v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  v0[9] = v9;
  *(void *)(v9 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(void *)(v9 + v8) = v5;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[10] = v10;
  void *v10 = v0;
  v10[1] = sub_100116F4C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_100116F4C()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001170CC;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100117068;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100117068()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001170CC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100117138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  return _swift_task_switch(sub_100117158, a2, 0);
}

uint64_t sub_100117158()
{
  *(unsigned char *)(v0 + 152) = *(unsigned char *)(*(void *)(v0 + 32) + 136);
  return _swift_task_switch(sub_100117180, 0, 0);
}

uint64_t sub_100117180()
{
  uint64_t v17 = v0;
  if (*(unsigned char *)(v0 + 152))
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040B708);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 24) = sub_100037004(0xD000000000000013, 0x8000000100375CC0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s APNS has already been set up", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B708);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000013, 0x8000000100375CC0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (static SystemInfo.underTest.getter())
    {
      uint64_t v11 = *(void *)(v0 + 32);
      return _swift_task_switch(sub_100117584, v11, 0);
    }
    else
    {
      type metadata accessor for APNSManager();
      uint64_t v12 = Account.apsEnvironment.getter();
      uint64_t v14 = v13;
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_1001177CC;
      return APNSManager.__allocating_init(environmentName:delegatePort:)(v12, v14, 0xD000000000000019, 0x8000000100375CA0);
    }
  }
}

uint64_t sub_100117584()
{
  uint64_t v1 = v0[4];
  v0[7] = *(void *)(v1 + 168);
  v0[8] = *(void *)(v1 + 176);
  swift_unknownObjectRetain();
  return _swift_task_switch(sub_100117600, 0, 0);
}

uint64_t sub_100117600()
{
  uint64_t v1 = v0[7];
  if (v1)
  {
    uint64_t v2 = v0[8];
    v0[11] = v1;
    v0[12] = v2;
    uint64_t v3 = v0[6];
    uint64_t v4 = v0[4];
    uint64_t ObjectType = swift_getObjectType();
    v0[13] = ObjectType;
    uint64_t v6 = swift_allocObject();
    v0[14] = v6;
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v3;
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[15] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001179E8;
    return dispatch thunk of APNSConnector.setDidReceive(block:)(&unk_1003F0170, v6, ObjectType, v2);
  }
  else
  {
    type metadata accessor for APNSManager();
    uint64_t v8 = Account.apsEnvironment.getter();
    uint64_t v10 = v9;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[9] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1001177CC;
    return APNSManager.__allocating_init(environmentName:delegatePort:)(v8, v10, 0xD000000000000019, 0x8000000100375CA0);
  }
}

uint64_t sub_1001177CC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001178CC, 0, 0);
}

uint64_t sub_1001178CC()
{
  v0[11] = v0[10];
  v0[12] = &protocol witness table for APNSManager;
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t ObjectType = swift_getObjectType();
  v0[13] = ObjectType;
  uint64_t v4 = swift_allocObject();
  v0[14] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001179E8;
  return dispatch thunk of APNSConnector.setDidReceive(block:)(&unk_1003F0170, v4, ObjectType, &protocol witness table for APNSManager);
}

uint64_t sub_1001179E8()
{
  swift_task_dealloc();
  swift_release();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100117B1C, 0, 0);
}

uint64_t sub_100117B1C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = swift_allocObject();
  v0[16] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100117C14;
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  return dispatch thunk of APNSConnector.setDidReceivePublicToken(block:)(&unk_1003F0180, v3, v5, v6);
}

uint64_t sub_100117C14()
{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100117D48, 0, 0);
}

uint64_t sub_100117D48()
{
  swift_unknownObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[18] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100117DF8;
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  return dispatch thunk of APNSConnector.set(enabledTopics:)(&off_1003DD400, v2, v3);
}

uint64_t sub_100117DF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100117F24, v1, 0);
}

uint64_t sub_100117F24()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(_OWORD *)(v1 + 168) = *(_OWORD *)(v0 + 88);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(v1 + 136) = 1;
  return _swift_task_switch(sub_100117FAC, 0, 0);
}

uint64_t sub_100117FAC()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100118010(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for APNSManager.IncomingMessage();
  v2[5] = v3;
  void v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001180D0, 0, 0);
}

uint64_t sub_1001180D0()
{
  unint64_t v19 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    sub_1000256E8(&qword_1003F0190, (void (*)(uint64_t))&type metadata accessor for APNSManager.IncomingMessage);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Did receive push: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[7], v0[5]);
  }

  uint64_t v15 = (void *)swift_task_alloc();
  v0[8] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10011836C;
  uint64_t v16 = v0[3];
  return sub_10011847C(v16);
}

uint64_t sub_10011836C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10011847C(uint64_t a1)
{
  v2[5] = a1;
  void v2[6] = v1;
  v2[7] = type metadata accessor for FMFAPSMessage(0);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100118560, v1, 0);
}

uint64_t sub_100118560()
{
  uint64_t v32 = v0;
  if (APNSManager.IncomingMessage.topic.getter() == 0xD000000000000017 && v1 == 0x8000000100372DD0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
  }
  uint64_t v3 = self;
  APNSManager.IncomingMessage.userInfo.getter();
  sub_100044014(&qword_1003ECF00);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0;
  id v5 = [v3 dataWithJSONObject:isa options:0 error:v0 + 16];

  id v6 = *(id *)(v0 + 16);
  if (v5)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    *(void *)(v0 + 88) = v7;
    *(void *)(v0 + 96) = v9;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1000256E8(&qword_1003F0198, (void (*)(uint64_t))type metadata accessor for FMFAPSMessage);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100044058(v21, (uint64_t)qword_10040B708);
    sub_100129BB8(v19, v20, type metadata accessor for FMFAPSMessage);
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = *(void *)(v0 + 72);
    if (v24)
    {
      uint64_t v26 = *(void *)(v0 + 64);
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v27 = 136315138;
      sub_100129BB8(v25, v26, type metadata accessor for FMFAPSMessage);
      v28._countAndFlagsBits = Date.localISO8601.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      sub_100030644(v26, type metadata accessor for FMFAPSMessage);
      *(void *)(v0 + 32) = sub_100037004(0x54646E6553706174, 0xEB00000000203A53, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100030644(v25, type metadata accessor for FMFAPSMessage);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "APNS message: %s.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100030644(*(void *)(v0 + 72), type metadata accessor for FMFAPSMessage);
    }

    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_100118C3C;
    uint64_t v30 = *(void *)(v0 + 80);
    return sub_10000B4B0(v30);
  }
  uint64_t v10 = v6;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v14 = 138543362;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to decode APNS message due to %{public}@", v14, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100118C3C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  return _swift_task_switch(sub_100118D78, v1, 0);
}

uint64_t sub_100118D78()
{
  uint64_t v1 = v0[10];
  sub_100044090(v0[11], v0[12]);
  sub_100030644(v1, type metadata accessor for FMFAPSMessage);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100118E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return _swift_task_switch(sub_100118E6C, 0, 0);
}

uint64_t sub_100118E6C()
{
  uint64_t v15 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B708);
  sub_100022C64(v1, v2);
  sub_100022C64(v1, v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[4];
  unint64_t v7 = v0[5];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    v0[2] = v8;
    v0[3] = v7;
    sub_10004F4EC();
    uint64_t v10 = DataProtocol.hexString.getter();
    v0[2] = sub_100037004(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044090(v8, v7);
    sub_100044090(v8, v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Did receive APNS public token: %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100044090(v0[4], v0[5]);
    sub_100044090(v8, v7);
  }

  uint64_t v12 = v0[6];
  return _swift_task_switch(sub_1001190B4, v12, 0);
}

uint64_t sub_1001190B4()
{
  unint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  uint64_t v3 = (uint64_t *)(v0[6] + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken);
  uint64_t v5 = *v3;
  unint64_t v4 = v3[1];
  *uint64_t v3 = v2;
  v3[1] = v1;
  sub_100022C64(v2, v1);
  sub_1000440E8(v5, v4);
  BOOL v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100119138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[84] = a4;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[85] = v6;
  v4[86] = *(void *)(v6 - 8);
  v4[87] = swift_task_alloc();
  return _swift_task_switch(sub_1001191FC, a4, 0);
}

uint64_t sub_1001191FC()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1003F0B58 + dword_1003F0B58);
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 704) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_1001192C4;
  return v3(1000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1001192C4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 696);
  uint64_t v4 = *(void *)(*v1 + 688);
  uint64_t v5 = *(void *)(*v1 + 680);
  *(void *)(*v1 + 712) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 672);
  if (v0) {
    unint64_t v7 = sub_1001199A4;
  }
  else {
    unint64_t v7 = sub_10011944C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10011944C()
{
  uint64_t v17 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = Duration.description.getter();
    v0[83] = sub_100037004(v5, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "refreshClientWithThrottle after sleeping for %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_retain_n();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v16 = v10;
    swift_beginAccess();
    type metadata accessor for Date();
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[82] = sub_100037004(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Refreshing with triggers: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v14 = (void *)swift_task_alloc();
  v0[90] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1001197D8;
  return sub_10010B8B8((uint64_t)(v0 + 2));
}

uint64_t sub_1001197D8()
{
  uint64_t v1 = *(void *)v0 + 16;
  uint64_t v2 = *(void *)(*(void *)v0 + 672);
  swift_task_dealloc();
  sub_10012A634(v1, sub_10012A3AC);
  return _swift_task_switch(sub_100119908, v2, 0);
}

uint64_t sub_100119908()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 672) + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps);
  swift_beginAccess();
  *uint64_t v1 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001199A4()
{
  uint64_t v14 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[89];
  if (v4)
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136446210;
    uint64_t v13 = v7;
    v0[81] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v8 = String.init<A>(describing:)();
    v0[80] = sub_100037004(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "refreshIfNeeded error: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = (void *)(v0[84] + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps);
  swift_beginAccess();
  void *v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100119C10(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 1416) = a4;
  *(unsigned char *)(v4 + 1777) = a3;
  *(void *)(v4 + 1408) = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v4 + 1424) = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003F0100);
  *(void *)(v4 + 1432) = v5;
  *(void *)(v4 + 1440) = *(void *)(v5 - 8);
  *(void *)(v4 + 1448) = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  *(void *)(v4 + 1456) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v4 + 1464) = v6;
  *(void *)(v4 + 1472) = *(void *)(v6 - 8);
  *(void *)(v4 + 1480) = swift_task_alloc();
  *(void *)(v4 + 1488) = swift_task_alloc();
  *(void *)(v4 + 1496) = type metadata accessor for DataManager.State(0);
  *(void *)(v4 + 1504) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URLComponents();
  *(void *)(v4 + 1512) = v7;
  *(void *)(v4 + 1520) = *(void *)(v7 - 8);
  *(void *)(v4 + 1528) = swift_task_alloc();
  *(void *)(v4 + 1536) = type metadata accessor for InitEndpoint();
  *(void *)(v4 + 1544) = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  *(void *)(v4 + 1552) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Account();
  *(void *)(v4 + 1560) = v8;
  *(void *)(v4 + 1568) = *(void *)(v8 - 8);
  *(void *)(v4 + 1576) = swift_task_alloc();
  *(void *)(v4 + 1584) = swift_task_alloc();
  *(void *)(v4 + 1592) = swift_task_alloc();
  *(void *)(v4 + 1600) = swift_task_alloc();
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 1608) = v9;
  *unint64_t v9 = v4;
  v9[1] = sub_100119F48;
  return daemon.getter();
}

uint64_t sub_100119F48(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1616) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1624) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000256E8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10011A124;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10011A124(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[204] = a1;
  v3[205] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10011BF64, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[206] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_10011A2B4;
    uint64_t v6 = v3[194];
    return sub_1000078BC(v6);
  }
}

uint64_t sub_10011A2B4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10011A3B0, 0, 0);
}

uint64_t sub_10011A3B0()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[196];
  uint64_t v2 = v0[195];
  uint64_t v3 = v0[194];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B708);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to send init client!", v7, 2u);
      swift_slowDealloc();
    }

    sub_10012A1B0();
    swift_allocError();
    void *v8 = 7;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[200], v3, v2);
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v11 = v0[200];
    uint64_t v12 = v0[199];
    uint64_t v13 = v0[196];
    uint64_t v14 = v0[195];
    uint64_t v15 = type metadata accessor for Logger();
    v0[207] = sub_100044058(v15, (uint64_t)qword_10040B708);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v0[208] = v16;
    v0[209] = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v16(v12, v11, v14);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[199];
    if (v19)
    {
      uint64_t v21 = v0[198];
      os_log_t log = v17;
      uint64_t v22 = v0[196];
      uint64_t v23 = v0[195];
      BOOL v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)BOOL v24 = 136315138;
      v16(v21, v20, v23);
      uint64_t v25 = String.init<A>(describing:)();
      v0[173] = sub_100037004(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v27(v20, v23);
      uint64_t v17 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v18, "Successfully retrieved account info: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      os_log_type_t v27 = *(void (**)(uint64_t, uint64_t))(v0[196] + 8);
      v27(v0[199], v0[195]);
    }

    v0[210] = v27;
    Swift::String v28 = (void *)swift_task_alloc();
    v0[211] = v28;
    void *v28 = v0;
    v28[1] = sub_10011A894;
    uint64_t v29 = v0[200];
    return sub_10010AD5C(v29);
  }
}

uint64_t sub_10011A894()
{
  *(void *)(*(void *)v1 + 1696) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10011C08C;
  }
  else {
    uint64_t v2 = sub_10011A9A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011A9A8()
{
  if (*(unsigned char *)(v0 + 1777))
  {
    uint64_t v1 = *(void *)(v0 + 1408);
    swift_storeEnumTagMultiPayload();
    return _swift_task_switch(sub_10011BC80, v1, 0);
  }
  else
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "First launch Daemon, need to InitClient", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1664);
    uint64_t v6 = *(void *)(v0 + 1600);
    uint64_t v7 = *(void *)(v0 + 1584);
    BOOL v19 = *(void (**)(uint64_t, uint64_t))(v0 + 1680);
    uint64_t v20 = *(void *)(v0 + 1576);
    uint64_t v16 = *(void *)(v0 + 1568);
    uint64_t v8 = *(void *)(v0 + 1560);
    uint64_t v9 = *(void *)(v0 + 1528);
    uint64_t v10 = *(void *)(v0 + 1520);
    uint64_t v17 = *(void *)(v0 + 1512);
    uint64_t v18 = *(void *)(v0 + 1544);

    v5(v7, v6, v8);
    sub_10004C1DC(v7);
    uint64_t v11 = (void (*)(uint64_t, void))URLComponents.path.modify();
    v12._countAndFlagsBits = 0x65696C4374696E69;
    v12._object = (void *)0xEA0000000000746ELL;
    String.append(_:)(v12);
    v11(v0 + 1288, 0);
    *(void *)(v0 + 1704) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v19(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v18, v9, v17);
    v5(v20, v6, v8);
    uint64_t v21 = (uint64_t (*)(uint64_t))((char *)&dword_1003ED978 + dword_1003ED978);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 1712) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10011AC3C;
    uint64_t v14 = *(void *)(v0 + 1576);
    return v21(v14);
  }
}

uint64_t sub_10011AC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[215] = a1;
  v5[216] = a2;
  v5[217] = a3;
  v5[218] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_10011B0C8;
  }
  else {
    uint64_t v6 = sub_10011AD5C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10011AD5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 74;
  uint64_t v3 = v0 + 146;
  unint64_t v4 = v1[217];
  uint64_t v5 = v1[216];
  uint64_t v6 = v1[215];
  uint64_t v7 = v1[193];
  v1[149] = v1[192];
  v1[150] = sub_1000256E8(&qword_1003F01E0, (void (*)(uint64_t))type metadata accessor for InitEndpoint);
  uint64_t v8 = sub_10003E0F4(v3);
  sub_100129BB8(v7, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InitEndpoint);
  v1[154] = &type metadata for InitClientRequest;
  v1[155] = sub_1000A5E08();
  v1[151] = v6;
  v1[152] = v5;
  v1[153] = v4;
  swift_bridgeObjectRetain();
  sub_1000287E4(v5, v4);
  Account.dsid.getter();
  Account.appToken.getter();
  v1[159] = type metadata accessor for BasicCredential();
  v1[160] = &protocol witness table for BasicCredential;
  sub_10003E0F4(v1 + 156);
  BasicCredential.init(username:password:)();
  uint64_t v9 = (void *)swift_task_alloc();
  v1[219] = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10011AF70;
  uint64_t v10 = (void *)v1[176];
  v9[78] = v10;
  v9[77] = v1 + 156;
  v9[76] = v1 + 151;
  v9[75] = v3;
  v9[74] = v2;
  v9[79] = *v10;
  return _swift_task_switch(sub_100103CF8, v10, 0);
}

uint64_t sub_10011AF70()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 1248;
  *(void *)(*v1 + 1760) = v0;
  swift_task_dealloc();
  sub_10000A520(v3, &qword_1003ECD18);
  if (v0)
  {
    unint64_t v4 = sub_10011C1DC;
  }
  else
  {
    sub_1000233E4(v2 + 1208);
    sub_1000233E4(v2 + 1168);
    unint64_t v4 = sub_10011B22C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10011B0C8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[210];
  uint64_t v2 = v0[200];
  uint64_t v3 = v0[195];
  uint64_t v4 = v0[193];
  swift_release();
  sub_100030644(v4, (uint64_t (*)(void))type metadata accessor for InitEndpoint);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10011B22C()
{
  uint64_t v11 = v0;
  sub_100036A4C((void *)(v0 + 592));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_100036A4C((void *)(v0 + 592));
    uint64_t v4 = sub_10003338C();
    unint64_t v6 = v5;
    sub_1000367D8((void *)(v0 + 592));
    *(void *)(v0 + 1400) = sub_100037004(v4, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000367D8((void *)(v0 + 592));
    sub_1000367D8((void *)(v0 + 592));
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received init client response: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000367D8((void *)(v0 + 592));
    sub_1000367D8((void *)(v0 + 592));
  }

  if (qword_1003EC050 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 1408);
  uint64_t v8 = sub_100044014(&qword_1003EFE58);
  sub_100044058(v8, (uint64_t)qword_1003EF858);
  *(unsigned char *)(v0 + 1776) = 1;
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  swift_endAccess();
  swift_storeEnumTagMultiPayload();
  return _swift_task_switch(sub_10011B498, v7, 0);
}

uint64_t sub_10011B498()
{
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_10000D3F0(v1);
  sub_100030644(v1, type metadata accessor for DataManager.State);
  return _swift_task_switch(sub_10011B524, 0, 0);
}

uint64_t sub_10011B524()
{
  static Date.trustedNow.getter(*(void *)(v0 + 1488));
  if (qword_1003EC048 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 1472);
  uint64_t v2 = *(void *)(v0 + 1464);
  uint64_t v3 = *(void *)(v0 + 1456);
  uint64_t v4 = *(void *)(v0 + 1448);
  uint64_t v5 = *(void *)(v0 + 1440);
  uint64_t v6 = *(void *)(v0 + 1432);
  uint64_t v7 = sub_100044058(v6, (uint64_t)qword_1003EF840);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1456);
    static Date.distantPast.getter();
    sub_10000A520(v8, (uint64_t *)&unk_1003EE800);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 1472) + 32))(*(void *)(v0 + 1480), *(void *)(v0 + 1456), *(void *)(v0 + 1464));
  }
  uint64_t v9 = *(void *)(v0 + 1488);
  uint64_t v10 = *(void *)(v0 + 1480);
  uint64_t v11 = *(void *)(v0 + 1472);
  uint64_t v12 = *(void *)(v0 + 1464);
  Date.timeIntervalSince(_:)();
  double v14 = v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v15(v10, v12);
  v15(v9, v12);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  if (v14 <= 5.0)
  {
    if (v18)
    {
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 134349312;
      *(double *)(v0 + 1376) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2050;
      *(void *)(v0 + 1368) = 0x4014000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Time since last refreshClient : %{public}f. Threshold: %{public}f. Not sending.", (uint8_t *)v22, 0x16u);
      swift_slowDealloc();
    }
    unint64_t v23 = *(void *)(v0 + 1736);
    uint64_t v24 = *(void *)(v0 + 1728);
    uint64_t v25 = *(void *)(v0 + 1544);

    swift_release();
    swift_bridgeObjectRelease();
    sub_1000440E8(v24, v23);
    sub_100030644(v25, (uint64_t (*)(void))type metadata accessor for InitEndpoint);
    (*(void (**)(void, void))(v0 + 1680))(*(void *)(v0 + 1600), *(void *)(v0 + 1560));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    if (v18)
    {
      BOOL v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v19 = 134349056;
      *(double *)(v0 + 1392) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Send refreshClient during InitClient: %{public}f for future friends data", v19, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 1768) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10011B9E8;
    return sub_10010B8B8(v0 + 16);
  }
}

uint64_t sub_10011B9E8()
{
  uint64_t v1 = *v0 + 16;
  swift_task_dealloc();
  sub_10012A634(v1, sub_10012A3AC);
  return _swift_task_switch(sub_10011BB04, 0, 0);
}

uint64_t sub_10011BB04()
{
  unint64_t v1 = *(void *)(v0 + 1736);
  uint64_t v2 = *(void *)(v0 + 1728);
  uint64_t v3 = *(void *)(v0 + 1544);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100030644(v3, (uint64_t (*)(void))type metadata accessor for InitEndpoint);
  (*(void (**)(void, void))(v0 + 1680))(*(void *)(v0 + 1600), *(void *)(v0 + 1560));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10011BC80()
{
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_10000D3F0(v1);
  sub_100030644(v1, type metadata accessor for DataManager.State);
  return _swift_task_switch(sub_10011BD0C, 0, 0);
}

uint64_t sub_10011BD0C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Daemon has already initialized, no need to InitClient", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 1424);
  long long v9 = *(_OWORD *)(v0 + 1408);

  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(_OWORD *)(v6 + 32) = v9;
  swift_retain();
  sub_10010405C(v4, (uint64_t)&unk_1003F01F0, v6);
  swift_release();
  swift_release();
  (*(void (**)(void, void))(v0 + 1680))(*(void *)(v0 + 1600), *(void *)(v0 + 1560));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10011BF64()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011C08C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[210];
  uint64_t v2 = v0[200];
  uint64_t v3 = v0[195];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011C1DC()
{
  unint64_t v1 = v0[217];
  uint64_t v2 = v0[216];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[210];
  uint64_t v4 = v0[200];
  uint64_t v5 = v0[195];
  uint64_t v6 = v0[193];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100030644(v6, (uint64_t (*)(void))type metadata accessor for InitEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 151));
  sub_1000233E4((uint64_t)(v0 + 146));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10011C37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10011C39C, 0, 0);
}

uint64_t sub_10011C39C()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "check if settings From Storage is nil", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10005EE38;
  uint64_t v6 = *(void *)(v0 + 16);
  v5[548] = v6;
  return _swift_task_switch(sub_10010D5D8, v6, 0);
}

uint64_t sub_10011C500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_10011C520, a4, 0);
}

uint64_t sub_10011C520()
{
  uint64_t v9 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[2] = sub_100037004(0x65696C4374696E69, 0xEC0000002928746ELL, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Checking if settings from DB is nil", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[4] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10011C724;
  uint64_t v6 = v0[3];
  v5[548] = v6;
  return _swift_task_switch(sub_10010D5D8, v6, 0);
}

uint64_t sub_10011C724()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10011C818(uint64_t a1, char a2)
{
  *(void *)(v3 + 6880) = v2;
  *(unsigned char *)(v3 + 7120) = a2;
  *(void *)(v3 + 6872) = a1;
  *(void *)(v3 + 6888) = type metadata accessor for DataManager.State(0);
  *(void *)(v3 + 6896) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Response();
  *(void *)(v3 + 6904) = v4;
  *(void *)(v3 + 6912) = *(void *)(v4 - 8);
  *(void *)(v3 + 6920) = swift_task_alloc();
  return _swift_task_switch(sub_10011C914, v2, 0);
}

uint64_t sub_10011C914()
{
  uint64_t v97 = v0;
  uint64_t v1 = (const void *)(v0 + 3192);
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 6920);
  uint64_t v3 = *(void *)(v0 + 6912);
  uint64_t v4 = *(void *)(v0 + 6904);
  uint64_t v5 = *(void *)(v0 + 6872);
  uint64_t v93 = type metadata accessor for Logger();
  sub_100044058(v93, (uint64_t)qword_10040B4F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 6920);
  uint64_t v10 = *(void *)(v0 + 6912);
  uint64_t v11 = *(void *)(v0 + 6904);
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_1000256E8(&qword_1003EFF30, (void (*)(uint64_t))&type metadata accessor for Response);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 6864) = sub_100037004(v13, v14, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "response dict: %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = (const void *)(v0 + 3192);
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v15 = Response.body.getter();
  unint64_t v17 = v16;
  sub_10004C188();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v94 = (void *)(v0 + 5656);
  uint64_t v89 = v0 + 6264;
  sub_100044090(v15, v17);
  swift_release();
  uint64_t v91 = v0 + 2616;
  memcpy((void *)(v0 + 2616), v1, 0x240uLL);
  if (*(void *)(*(void *)(v0 + 2712) + 16))
  {
    uint64_t v18 = *(void *)(v0 + 6896);
    swift_storeEnumTagMultiPayload();
    sub_10000D3F0(v18);
    sub_100030644(v18, type metadata accessor for DataManager.State);
  }
  *(void *)(v0 + 6928) = sub_1000B5330();
  uint64_t v19 = *(void *)(v0 + 2616);
  *(void *)(v0 + 6936) = v19;
  uint64_t v20 = *(void *)(v0 + 2624);
  *(void *)(v0 + 6944) = v20;
  uint64_t v21 = *(void *)(v0 + 2632);
  *(void *)(v0 + 6952) = v21;
  uint64_t v22 = *(void *)(v0 + 2640);
  *(void *)(v0 + 6960) = v22;
  uint64_t v23 = *(void *)(v0 + 2648);
  *(void *)(v0 + 6968) = v23;
  char v24 = *(unsigned char *)(v0 + 2656);
  *(unsigned char *)(v0 + 7121) = v24;
  uint64_t v25 = *(void *)(v0 + 2664);
  *(void *)(v0 + 6976) = v25;
  uint64_t v26 = *(void *)(v0 + 2672);
  *(void *)(v0 + 6984) = v26;
  uint64_t v27 = *(void *)(v0 + 2680);
  *(void *)(v0 + 6992) = v27;
  char v28 = *(unsigned char *)(v0 + 2688);
  *(unsigned char *)(v0 + 7122) = v28;
  uint64_t v29 = *(void *)(v0 + 2696);
  *(void *)(v0 + 7000) = v29;
  uint64_t v30 = *(void *)(v0 + 2704);
  *(void *)(v0 + 7008) = v30;
  *(void *)(v0 + 6408) = v19;
  *(void *)(v0 + 6416) = v20;
  *(void *)(v0 + 6424) = v21;
  *(void *)(v0 + 6432) = v22;
  *(void *)(v0 + 6440) = v23;
  *(unsigned char *)(v0 + 6448) = v24;
  *(void *)(v0 + 6456) = v25;
  *(void *)(v0 + 6464) = v26;
  *(void *)(v0 + 6472) = v27;
  *(unsigned char *)(v0 + 6480) = v28;
  *(void *)(v0 + 6488) = v29;
  *(void *)(v0 + 6496) = v30;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = sub_100129C20(v31, (uint64_t *)(v0 + 6408));
  *(void *)(v0 + 7016) = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v35 = 136315138;
    type metadata accessor for Device();
    swift_bridgeObjectRetain();
    uint64_t v36 = Array.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 6856) = sub_100037004(v36, v38, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Devices: %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v39 = *(void *)(v0 + 6880);
  char v40 = *(unsigned char *)(v0 + 7120);
  uint64_t v41 = swift_task_alloc();
  *(void *)(v0 + 7024) = v41;
  *(void *)(v41 + 16) = v39;
  *(void *)(v41 + 24) = v91;
  swift_asyncLet_begin();
  uint64_t v42 = swift_task_alloc();
  *(void *)(v0 + 7032) = v42;
  *(void *)(v42 + 16) = v39;
  *(void *)(v42 + 24) = v32;
  swift_asyncLet_begin();
  uint64_t v43 = swift_task_alloc();
  *(void *)(v0 + 7040) = v43;
  *(void *)(v43 + 16) = v39;
  *(void *)(v43 + 24) = v91;
  *(unsigned char *)(v43 + 32) = v40;
  sub_10004AE58(&qword_1003EFF18);
  swift_asyncLet_begin();
  sub_100013B50(v0 + 2856, (uint64_t)v94, &qword_1003ED068);
  sub_100013B50(v0 + 3016, v89, &qword_1003ECCD8);
  uint64_t v44 = *(void *)(v0 + 2720);
  *(void *)(v0 + 7048) = v44;
  uint64_t v45 = *(void *)(v0 + 2728);
  *(void *)(v0 + 7056) = v45;
  uint64_t v95 = *(void *)(v0 + 2736);
  *(void *)(v0 + 7064) = v95;
  os_log_type_t v92 = *(void **)(v0 + 2744);
  *(void *)(v0 + 7072) = v92;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  uint64_t v88 = v44;
  uint64_t v90 = (void *)v45;
  sub_1000372F0(v44, v45);
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    os_log_type_t type = v47;
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    buf = v48;
    *(_DWORD *)uint64_t v48 = 136315138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_100033B78();
    unint64_t v51 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 6848) = sub_100037004(v49, v51, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, type, "myInfo: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    sub_100013B50((uint64_t)v94, v0 + 5496, &qword_1003ED068);
    if (sub_100085654(v0 + 5496) == 1)
    {
      uint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
    }
    else
    {
      long long v57 = *(_OWORD *)(v0 + 5608);
      *(_OWORD *)(v0 + 5912) = *(_OWORD *)(v0 + 5592);
      *(_OWORD *)(v0 + 5928) = v57;
      long long v58 = *(_OWORD *)(v0 + 5640);
      *(_OWORD *)(v0 + 5944) = *(_OWORD *)(v0 + 5624);
      *(_OWORD *)(v0 + 5960) = v58;
      long long v59 = *(_OWORD *)(v0 + 5544);
      *(_OWORD *)(v0 + 5848) = *(_OWORD *)(v0 + 5528);
      *(_OWORD *)(v0 + 5864) = v59;
      long long v60 = *(_OWORD *)(v0 + 5576);
      *(_OWORD *)(v0 + 5880) = *(_OWORD *)(v0 + 5560);
      *(_OWORD *)(v0 + 5896) = v60;
      long long v61 = *(_OWORD *)(v0 + 5512);
      *(_OWORD *)(v0 + 5816) = *(_OWORD *)(v0 + 5496);
      *(_OWORD *)(v0 + 5832) = v61;
      uint64_t v55 = sub_100032EB4();
      unint64_t v56 = v62;
    }
    *(void *)(v0 + 6840) = sub_100037004(v55, v56, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "serverContext: %s", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    sub_100013BB4(v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
  }

  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v65 = 136315138;
    sub_100013B50(v89, v0 + 5976, &qword_1003ECCD8);
    uint64_t v66 = v88;
    if (sub_10005F088(v0 + 5976) == 1)
    {
      uint64_t v67 = 0;
      unint64_t v68 = 0xE000000000000000;
    }
    else
    {
      long long v71 = *(_OWORD *)(v0 + 6088);
      *(_OWORD *)(v0 + 6216) = *(_OWORD *)(v0 + 6072);
      *(_OWORD *)(v0 + 6232) = v71;
      *(_OWORD *)(v0 + 6248) = *(_OWORD *)(v0 + 6104);
      long long v72 = *(_OWORD *)(v0 + 6024);
      *(_OWORD *)(v0 + 6152) = *(_OWORD *)(v0 + 6008);
      *(_OWORD *)(v0 + 6168) = v72;
      long long v73 = *(_OWORD *)(v0 + 6056);
      *(_OWORD *)(v0 + 6184) = *(_OWORD *)(v0 + 6040);
      *(_OWORD *)(v0 + 6200) = v73;
      long long v74 = *(_OWORD *)(v0 + 5992);
      *(_OWORD *)(v0 + 6120) = *(_OWORD *)(v0 + 5976);
      *(_OWORD *)(v0 + 6136) = v74;
      uint64_t v67 = sub_100028F78();
      unint64_t v68 = v75;
    }
    uint64_t v70 = v90;
    *(void *)(v0 + 6744) = sub_100037004(v67, v68, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "serverConfig: %s", v65, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v69 = &unk_100368000;
  }
  else
  {

    uint64_t v69 = (void *)&unk_100368000;
    uint64_t v66 = v88;
    uint64_t v70 = v90;
  }
  uint64_t v76 = v0 + 3768;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  *(void *)(v0 + 7080) = sub_100044058(v93, (uint64_t)qword_10040B708);
  sub_1000372F0(v66, (uint64_t)v70);
  sub_1000372F0(v66, (uint64_t)v70);
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v79 = v69[58];
    if (v70)
    {
      uint64_t v80 = sub_100011570(v66, v70, v95, v92);
      unint64_t v82 = v81;
      uint64_t v83 = (uint64_t)v70;
    }
    else
    {
      uint64_t v80 = 0;
      unint64_t v82 = 0xE000000000000000;
      uint64_t v83 = 0;
    }
    *(void *)(v0 + 6648) = sub_100037004(v80, v82, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037334(v66, v83);
    sub_100037334(v66, v83);
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "serverPreferences: %s", v79, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v76 = v0 + 3768;
  }
  else
  {
    sub_100037334(v66, (uint64_t)v70);
    sub_100037334(v66, (uint64_t)v70);
  }
  unint64_t v84 = (void *)swift_task_alloc();
  *(void *)(v0 + 7088) = v84;
  *unint64_t v84 = v0;
  v84[1] = sub_10011D954;
  return sub_10000E400(v76);
}

uint64_t sub_10011D954()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 6880);
  swift_task_dealloc();
  return _swift_task_switch(sub_10011DA64, v1, 0);
}

uint64_t sub_10011DA64()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0 + 579;
  sub_10001F3E0((uint64_t)(v0 + 471), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446723;
    v0[819] = sub_100037004(0xD000000000000025, 0x80000001003759F0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2160;
    v0[813] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2081;
    sub_100013B50((uint64_t)(v0 + 471), (uint64_t)(v0 + 525), &qword_1003ECCD0);
    sub_10001F3E0((uint64_t)(v0 + 471), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
    sub_100044014(&qword_1003ECCD0);
    uint64_t v5 = String.init<A>(describing:)();
    v0[825] = sub_100037004(v5, v6, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001F3E0((uint64_t)(v0 + 471), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_10001F3E0((uint64_t)(v0 + 471), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s, cached settings: %{private,mask.hash}s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v0 + 579;
    swift_slowDealloc();
  }
  else
  {
    sub_10001F3E0((uint64_t)(v0 + 471), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_10001F3E0((uint64_t)(v0 + 471), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
  }

  uint64_t v7 = v0[884];
  uint64_t v8 = v0[883];
  long long v24 = *(_OWORD *)(v0 + 881);
  uint64_t v9 = v0[876];
  uint64_t v10 = v0[875];
  char v11 = *((unsigned char *)v0 + 7122);
  uint64_t v12 = v0[874];
  long long v13 = *((_OWORD *)v0 + 436);
  char v14 = *((unsigned char *)v0 + 7121);
  uint64_t v15 = v0[871];
  uint64_t v16 = v0[870];
  uint64_t v17 = v0[866];
  uint64_t v18 = v0[860];
  v0[633] = v0[867];
  *((_OWORD *)v0 + 317) = *((_OWORD *)v0 + 434);
  v0[636] = v16;
  v0[637] = v15;
  *((unsigned char *)v0 + 5104) = v14;
  *(_OWORD *)(v0 + 639) = v13;
  v0[641] = v12;
  *((unsigned char *)v0 + 5136) = v11;
  v0[643] = v10;
  v0[644] = v9;
  sub_100013B50((uint64_t)(v0 + 707), (uint64_t)(v0 + 645), &qword_1003ED068);
  sub_100013B50((uint64_t)(v0 + 783), (uint64_t)(v0 + 665), &qword_1003ECCD8);
  *(_OWORD *)(v0 + 683) = v24;
  v0[685] = v8;
  v0[686] = v7;
  memcpy(v1, v0 + 633, 0x1B0uLL);
  uint64_t v19 = swift_task_alloc();
  v0[887] = v19;
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = v1;
  swift_asyncLet_begin();
  if (v17)
  {
    uint64_t v21 = v0[866];
    uint64_t v22 = (void *)swift_task_alloc();
    v0[888] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10011DEFC;
    return sub_10013584C(v21);
  }
  else
  {
    return _swift_asyncLet_get(v0 + 162, v20, sub_10011E028, v0 + 850);
  }
}

uint64_t sub_10011DEFC()
{
  uint64_t v1 = *v0 + 1296;
  uint64_t v2 = *v0 + 6800;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_asyncLet_get(v1, v3, sub_10011E028, v2);
}

uint64_t sub_10011E028()
{
  return _swift_asyncLet_get(v0 + 656, v0 + 6696, sub_10011E04C, v0 + 2576);
}

uint64_t sub_10011E04C()
{
  *(void *)(v0 + 7112) = *(void *)(v0 + 6696);
  swift_bridgeObjectRetain();
  return _swift_asyncLet_get(v0 + 16, v1, sub_10011E0C4, v0 + 6512);
}

uint64_t sub_10011E0C4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 1936, a2, sub_10011E0E4, v2 + 6560);
}

uint64_t sub_10011E0E4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_10011E104, v2 + 6608);
}

uint64_t sub_10011E104()
{
  return _swift_task_switch(sub_10011E120, *(void *)(v0 + 6880), 0);
}

uint64_t sub_10011E120()
{
  sub_100035258((void *)(v0 + 5064));
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 656, v0 + 6696, sub_10011E1B8, v0 + 6656);
}

uint64_t sub_10011E1B8()
{
  return _swift_task_switch(sub_10011E1D4, *(void *)(v0 + 6880), 0);
}

uint64_t sub_10011E1D4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 1296, a2, sub_10011E1F4, v2 + 6704);
}

uint64_t sub_10011E1F4()
{
  return _swift_task_switch(sub_10011E210, *(void *)(v0 + 6880), 0);
}

uint64_t sub_10011E210()
{
  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 1936, v1, sub_10011E284, v0 + 6752);
}

uint64_t sub_10011E284()
{
  return _swift_task_switch(sub_10011E2A0, *(void *)(v0 + 6880), 0);
}

uint64_t sub_10011E2A0()
{
  sub_1000367D8(v0 + 327);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[889];
  return v1(v2);
}

uint64_t sub_10011E354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_10011E374, 0, 0);
}

uint64_t sub_10011E374()
{
  uint64_t v1 = *(void **)(v0[3] + 224);
  v0[4] = v1;
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10011E434;
  return sub_10001E398((uint64_t)v2);
}

uint64_t sub_10011E434()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10011E558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10012BBD4;
  return sub_10004F3B0(a3);
}

uint64_t sub_10011E5F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_10011E6A4;
  return sub_10001B408(a3, a4);
}

uint64_t sub_10011E6A4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10011E7A4, 0, 0);
}

uint64_t sub_10011E7A4()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011E7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10012BBD4;
  return sub_10004E878(a3);
}

uint64_t sub_10011E864()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_100007F1C, v0, 0);
}

uint64_t sub_10011E884()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_100275580(*(void *)(v0 + 112));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10004F444, v1, 0);
}

uint64_t sub_10011E904()
{
  uint64_t v12 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[12];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[5] = sub_100037004(0xD000000000000021, 0x8000000100375A40, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    v0[6] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v7 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10011EB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 2984) = a6;
  *(unsigned char *)(v6 + 3084) = a5;
  *(void *)(v6 + 2976) = a4;
  *(void *)(v6 + 2968) = a3;
  *(void *)(v6 + 2960) = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v6 + 2992) = swift_task_alloc();
  sub_100044014(&qword_1003EFCD0);
  *(void *)(v6 + 3000) = swift_task_alloc();
  return _swift_task_switch(sub_10011EC48, 0, 0);
}

uint64_t sub_10011EC48()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[376] = sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[370];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    v0[369] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager: start updateData. Counter: %ld", v5, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  v0[377] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10011EDE0;
  uint64_t v7 = v0[375];
  return sub_100007CFC(v7);
}

uint64_t sub_10011EDE0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 3024) = v3;
  *os_log_type_t v3 = v2;
  v3[1] = sub_10011EF2C;
  return sub_10000E400(v1 + 448);
}

uint64_t sub_10011EF2C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2968);
  swift_task_dealloc();
  return _swift_task_switch(sub_10011F03C, v1, 0);
}

uint64_t sub_10011F03C()
{
  sub_100013B50(v0 + 448, v0 + 2176, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 2176) == 1
    || (memcpy((void *)(v0 + 1744), (const void *)(v0 + 2176), 0x1B0uLL),
        sub_100013B50(v0 + 2144, v0 + 2704, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 2704)),
        sub_10001F3E0(v0 + 448, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378), sub_100013B50(v0 + 2704, v0 + 2608, &qword_1003EE258), !*(void *)(v0 + 2616)))
  {
    BOOL v4 = 0;
  }
  else
  {
    long long v1 = *(_OWORD *)(v0 + 2608);
    long long v2 = *(_OWORD *)(v0 + 2624);
    *(_OWORD *)(v0 + 2736) = v1;
    *(_OWORD *)(v0 + 2752) = v2;
    *(_OWORD *)(v0 + 2816) = v1;
    *(_OWORD *)(v0 + 2880) = v1;
    *(void *)(v0 + 2864) = 28494;
    *(void *)(v0 + 2872) = 0xE200000000000000;
    sub_10004650C();
    uint64_t v3 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    sub_10001FA28(v0 + 2816);
    BOOL v4 = v3 == 0;
    *(_OWORD *)(v0 + 2832) = *(_OWORD *)(v0 + 2752);
    sub_10001FA28(v0 + 2832);
  }
  *(unsigned char *)(v0 + 3085) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 3032) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10011F1FC;
  return sub_10000E400(v0 + 880);
}

uint64_t sub_10011F1FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2968);
  swift_task_dealloc();
  return _swift_task_switch(sub_10011F30C, v1, 0);
}

uint64_t sub_10011F30C()
{
  sub_100013B50(v0 + 880, v0 + 1312, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 1312) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 1312), 0x1B0uLL),
        sub_100013B50(v0 + 416, v0 + 2672, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 2672)),
        sub_10001F3E0(v0 + 880, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378), sub_100013B50(v0 + 2672, v0 + 2640, &qword_1003EE258), !*(void *)(v0 + 2648)))
  {
    BOOL v3 = 0;
  }
  else
  {
    long long v1 = *(_OWORD *)(v0 + 2656);
    *(_OWORD *)(v0 + 2768) = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2784) = v1;
    long long v2 = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2848) = v2;
    *(_OWORD *)(v0 + 2912) = v2;
    *(void *)(v0 + 2896) = 7562585;
    *(void *)(v0 + 2904) = 0xE300000000000000;
    sub_10004650C();
    BOOL v3 = StringProtocol.caseInsensitiveCompare<A>(_:)() == 0;
    *(_OWORD *)(v0 + 2800) = *(_OWORD *)(v0 + 2768);
    sub_10001FA28(v0 + 2800);
    sub_10001FA28(v0 + 2848);
  }
  *(unsigned char *)(v0 + 3086) = v3;
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 3040) = v4;
  *BOOL v4 = v0;
  v4[1] = sub_10011F4E4;
  char v5 = *(unsigned char *)(v0 + 3084);
  uint64_t v6 = *(void *)(v0 + 2976);
  return sub_10011C818(v6, v5);
}

uint64_t sub_10011F4E4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 3048) = v1;
  swift_task_dealloc();
  if (v1)
  {
    char v5 = sub_10011FA84;
  }
  else
  {
    *(void *)(v4 + 3056) = a1;
    char v5 = sub_10011F60C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011F60C()
{
  *(void *)(v0 + 3064) = *(void *)(v0 + 3056);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 2960);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v0 + 2944) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DataManager: finish updateData. Counter: %ld", v4, 0xCu);
    swift_slowDealloc();
  }

  char v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 3072) = v5;
  *char v5 = v0;
  v5[1] = sub_10011F76C;
  char v6 = *(unsigned char *)(v0 + 3086);
  char v7 = *(unsigned char *)(v0 + 3085);
  uint64_t v8 = *(void *)(v0 + 3000);
  return sub_100015380(v8, v7, v6);
}

uint64_t sub_10011F76C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10011F868, 0, 0);
}

uint64_t sub_10011F868()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 3064);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 3080) = *(void *)(v3 + 16) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DataManager updatedFriends isEmpty: %{BOOL}d ", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v5 = *(void *)(v0 + 3064);
  uint64_t v6 = *(void *)(v0 + 3000);
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = *(void *)(v0 + 2992);
    uint64_t v8 = *(void *)(v0 + 2984);
    uint64_t v9 = *(void *)(v0 + 2968);
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = 0;
    v11[3] = 0;
    v11[4] = v9;
    v11[5] = v5;
    v11[6] = v8;
    swift_retain();
    sub_10010405C(v7, (uint64_t)&unk_1003EFE48, (uint64_t)v11);
    swift_release();
    sub_10000A520(v6, &qword_1003EFCD0);
  }
  else
  {
    sub_10000A520(*(void *)(v0 + 3000), &qword_1003EFCD0);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10011FA84()
{
  uint64_t v18 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 3048);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 2936) = v3;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    *(void *)(v0 + 2928) = sub_100037004(v5, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Process response error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  unint64_t v7 = sub_10004B52C((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease();
  *(void *)(v0 + 3064) = v7;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 2960);
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    *(void *)(v0 + 2944) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "DataManager: finish updateData. Counter: %ld", v11, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 3072) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10011F76C;
  char v13 = *(unsigned char *)(v0 + 3086);
  char v14 = *(unsigned char *)(v0 + 3085);
  uint64_t v15 = *(void *)(v0 + 3000);
  return sub_100015380(v15, v14, v13);
}

uint64_t sub_10011FD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[273] = a5;
  v5[267] = a4;
  uint64_t v6 = sub_100044014(&qword_1003EFE58);
  v5[279] = v6;
  v5[285] = *(void *)(v6 - 8);
  v5[291] = swift_task_alloc();
  return _swift_task_switch(sub_10011FE28, 0, 0);
}

uint64_t sub_10011FE28()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 2184);
  uint64_t v3 = *(void *)(v0 + 2136);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 2336) = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_asyncLet_begin();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 2344) = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  swift_asyncLet_begin();
  if (qword_1003EC050 != -1) {
    swift_once();
  }
  uint64_t v6 = *(void *)(v0 + 2328);
  uint64_t v7 = *(void *)(v0 + 2280);
  uint64_t v8 = *(void *)(v0 + 2232);
  uint64_t v9 = sub_100044058(v8, (uint64_t)qword_1003EF858);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  int v10 = *(unsigned char *)(v0 + 2364) & 1;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 2184);
  if (v14)
  {
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558531;
    *(void *)(v0 + 2088) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 1025;
    *(_DWORD *)(v0 + 2360) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 18) = 2048;
    *(void *)(v0 + 2040) = *(void *)(v15 + 16);
    uint64_t v1 = v0 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "DataManager shouldUpdateFriends to clients:\n%{BOOL,private,mask.hash}d\nupdated friends count: %ld", (uint8_t *)v16, 0x1Cu);
    swift_slowDealloc();

    if (v10)
    {
LABEL_7:
      uint64_t v18 = *(void *)(v0 + 2184);
      uint64_t v19 = *(void *)(v0 + 2136);
      uint64_t v20 = swift_task_alloc();
      *(void *)(v0 + 2352) = v20;
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = v18;
      swift_asyncLet_begin();
      uint64_t v21 = sub_1001201BC;
      uint64_t v22 = v1;
      uint64_t v23 = v0 + 1936;
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

    if (v10) {
      goto LABEL_7;
    }
  }
  uint64_t v23 = v0 + 2000;
  uint64_t v21 = sub_10012029C;
  uint64_t v22 = v1;
LABEL_10:
  return _swift_asyncLet_get(v22, v17, v21, v23);
}

uint64_t sub_1001201BC(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 656, a2, sub_1001201D8, v2 + 2288);
}

uint64_t sub_1001201D8(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 1296, a2, sub_1001201F4, v2 + 2192);
}

uint64_t sub_1001201F4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 1296, a2, sub_100120210, v2 + 2240);
}

uint64_t sub_100120210()
{
  return _swift_task_switch(sub_10012022C, 0, 0);
}

uint64_t sub_10012022C()
{
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 656, v1, sub_1001202D4, v0 + 2096);
}

uint64_t sub_10012029C(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 656, a2, sub_1001202B8, v2 + 2048);
}

uint64_t sub_1001202B8(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_1001202D4, v2 + 2096);
}

uint64_t sub_1001202D4()
{
  return _swift_task_switch(sub_1001202F0, 0, 0);
}

uint64_t sub_1001202F0()
{
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 16, v1, sub_100120360, v0 + 2144);
}

uint64_t sub_100120360()
{
  return _swift_task_switch(sub_10012037C, 0, 0);
}

uint64_t sub_10012037C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001203E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10012BBD4;
  return sub_10014D920(a3);
}

uint64_t sub_100120484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000801A4;
  return sub_100120520(a3);
}

uint64_t sub_100120520(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Handle();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  sub_100044014(&qword_1003EFE98);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for HandleType();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for DataManager.State(0);
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FriendshipAction();
  v2[20] = v5;
  v2[21] = *(void *)(v5 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Friend();
  v2[25] = v6;
  v2[26] = *(void *)(v6 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  sub_100044014(&qword_1003EFEA0);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_100120800, v1, 0);
}

uint64_t sub_100120800()
{
  uint64_t v161 = v0;
  if (qword_1003EC030 != -1) {
LABEL_67:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v160[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446723;
    v0[5] = sub_100037004(0xD000000000000018, 0x8000000100375990, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2160;
    v0[6] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2081;
    sub_1000256E8(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
    swift_bridgeObjectRetain();
    uint64_t v5 = Dictionary.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[7] = sub_100037004(v5, v7, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %{private,mask.hash}s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[8];
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v136 = v11 + 64;
  uint64_t v13 = -1;
  uint64_t v14 = -1 << *(unsigned char *)(v11 + 32);
  if (-v14 < 64) {
    uint64_t v13 = ~(-1 << -(char)v14);
  }
  unint64_t v15 = v13 & v12;
  uint64_t v127 = (uint64_t *)(v0[9] + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  unsigned int v159 = (void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v16 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  uint64_t v154 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  uint64_t v155 = (void (**)(void, void, void))(v8 + 32);
  uint64_t v153 = (uint64_t (**)(uint64_t, uint64_t))(v9 + 88);
  int v152 = enum case for FriendshipAction.add(_:);
  int v143 = enum case for FriendshipAction.remove(_:);
  uint64_t v145 = v0[21];
  uint64_t v146 = v0[26];
  unint64_t v157 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v151 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v138 = (uint64_t (**)(uint64_t, uint64_t))(v10 + 88);
  uint64_t v139 = (void (**)(uint64_t, uint64_t))(v10 + 8);
  int v137 = enum case for HandleType.follower(_:);
  int v128 = enum case for HandleType.following(_:);
  int v126 = enum case for HandleType.futureFollower(_:);
  int v125 = enum case for HandleType.futureFollowing(_:);
  int v124 = enum case for HandleType.pendingOffer(_:);
  uint64_t v123 = v0[11];
  int64_t v142 = (unint64_t)(63 - v14) >> 6;
  uint64_t v144 = v0[8];
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v156 = 0;
  uint64_t v147 = v16;
  while (1)
  {
    if (v15)
    {
      unint64_t v24 = __clz(__rbit64(v15));
      uint64_t v25 = (v15 - 1) & v15;
      unint64_t v26 = v24 | (v156 << 6);
LABEL_14:
      uint64_t v27 = v0[33];
      uint64_t v28 = v0[20];
      (*(void (**)(uint64_t, unint64_t, void))(v146 + 16))(v27, *(void *)(v144 + 48) + *(void *)(v146 + 72) * v26, v0[25]);
      unint64_t v29 = *(void *)(v144 + 56) + *(void *)(v145 + 72) * v26;
      uint64_t v30 = sub_100044014(&qword_1003EEBF0);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v145 + 16))(v27 + *(int *)(v30 + 48), v29, v28);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v27, 0, 1, v30);
      goto LABEL_33;
    }
    int64_t v31 = v156 + 1;
    if (__OFADD__(v156, 1))
    {
      __break(1u);
      goto LABEL_67;
    }
    if (v31 < v142)
    {
      unint64_t v32 = *(void *)(v136 + 8 * v31);
      if (v32) {
        goto LABEL_18;
      }
      int64_t v33 = v156 + 2;
      ++v156;
      if (v31 + 1 < v142)
      {
        unint64_t v32 = *(void *)(v136 + 8 * v33);
        if (v32) {
          goto LABEL_21;
        }
        int64_t v156 = v31 + 1;
        if (v31 + 2 < v142)
        {
          unint64_t v32 = *(void *)(v136 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_18;
          }
          int64_t v33 = v31 + 3;
          int64_t v156 = v31 + 2;
          if (v31 + 3 < v142) {
            break;
          }
        }
      }
    }
LABEL_32:
    uint64_t v34 = v0[33];
    uint64_t v35 = sub_100044014(&qword_1003EEBF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    uint64_t v25 = 0;
LABEL_33:
    uint64_t v36 = v0[34];
    sub_100013B50(v0[33], v36, &qword_1003EFEA0);
    uint64_t v37 = sub_100044014(&qword_1003EEBF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v36, 1, v37) == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v122 = (uint64_t (*)(void))v0[1];
      return v122();
    }
    uint64_t v38 = v0[24];
    uint64_t v39 = v0[23];
    uint64_t v40 = v0[20];
    uint64_t v41 = v0[34] + *(int *)(v37 + 48);
    (*v155)(v0[32], v0[34], v0[25]);
    (*v154)(v38, v41, v40);
    uint64_t v42 = *v16;
    (*v16)(v39, v38, v40);
    int v43 = (*v153)(v39, v40);
    uint64_t v44 = v0[25];
    unint64_t v158 = v25;
    if (v43 == v152)
    {
      uint64_t v148 = *v159;
      (*v159)(v0[31], v0[32], v44);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      BOOL v47 = os_log_type_enabled(v45, v46);
      uint64_t v48 = v0[31];
      uint64_t v49 = v0[25];
      if (v47)
      {
        uint64_t v50 = swift_slowAlloc();
        v160[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 141558275;
        *(void *)(v50 + 4) = 1752392040;
        *(_WORD *)(v50 + 12) = 2081;
        sub_1000256E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v50 + 14) = sub_100037004(v51, v52, v160);
        swift_bridgeObjectRelease();
        uint64_t v18 = *v157;
        (*v157)(v48, v49);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Added a friend: %{private,mask.hash}s", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v18 = *v157;
        (*v157)(v0[31], v0[25]);
      }

      uint64_t v19 = v0[32];
      uint64_t v21 = v0[24];
      uint64_t v20 = v0[25];
      uint64_t v23 = v0[19];
      uint64_t v22 = v0[20];
      v148(v23, v19, v20);
      swift_storeEnumTagMultiPayload();
      sub_10000D3F0(v23);
      sub_100030644(v23, type metadata accessor for DataManager.State);
      (*v151)(v21, v22);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v18)(v19, v20);
LABEL_10:
      uint64_t v16 = v147;
      goto LABEL_11;
    }
    uint64_t v53 = v0[32];
    if (v43 == v143)
    {
      uint64_t v54 = *v159;
      (*v159)(v0[30], v0[32], v44);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = v0[30];
      uint64_t v59 = v0[25];
      if (v57)
      {
        uint64_t v60 = swift_slowAlloc();
        v160[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 141558275;
        *(void *)(v60 + 4) = 1752392040;
        *(_WORD *)(v60 + 12) = 2081;
        sub_1000256E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v60 + 14) = sub_100037004(v61, v62, v160);
        swift_bridgeObjectRelease();
        uint64_t v63 = *v157;
        (*v157)(v58, v59);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Removed a friend: %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v63 = *v157;
        (*v157)(v0[30], v0[25]);
      }

      uint64_t v80 = v0[17];
      uint64_t v81 = v0[14];
      Friend.type.getter();
      int v82 = (*v138)(v80, v81);
      if (v82 != v137)
      {
        if (v82 == v128)
        {
          v54(v0[29], v0[32], v0[25]);
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.default.getter();
          BOOL v85 = os_log_type_enabled(v83, v84);
          uint64_t v86 = v0[29];
          uint64_t v87 = v0[25];
          if (v85)
          {
            uint64_t v88 = swift_slowAlloc();
            v160[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v88 = 141558275;
            *(void *)(v88 + 4) = 1752392040;
            *(_WORD *)(v88 + 12) = 2081;
            sub_1000256E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
            uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v88 + 14) = sub_100037004(v89, v90, v160);
            swift_bridgeObjectRelease();
            v63(v86, v87);
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Clear legacy location for removed following: %{private,mask.hash}s if any", (uint8_t *)v88, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v63(v0[29], v0[25]);
          }

          uint64_t v104 = v0[12];
          Friend.handle.getter();
          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v105 = sub_100025614(v104);
          char v107 = v106;
          swift_bridgeObjectRelease();
          if (v107)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v109 = *v127;
            v160[0] = *v127;
            *uint64_t v127 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100126894((uint64_t (*)(void))&type metadata accessor for Location, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFEC0);
              uint64_t v109 = v160[0];
            }
            uint64_t v150 = v0[13];
            uint64_t v110 = *(void (**)(unint64_t, void))(v123 + 8);
            v110(*(void *)(v109 + 48) + *(void *)(v123 + 72) * v105, v0[10]);
            uint64_t v111 = *(void *)(v109 + 56);
            uint64_t v112 = type metadata accessor for Location();
            uint64_t v113 = *(void *)(v112 - 8);
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v113 + 32))(v150, v111 + *(void *)(v113 + 72) * v105, v112);
            sub_100123A58(v105, v109);
            *uint64_t v127 = v109;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v150, 0, 1, v112);
          }
          else
          {
            uint64_t v114 = v0[13];
            uint64_t v115 = type metadata accessor for Location();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v114, 1, 1, v115);
            uint64_t v110 = *(void (**)(unint64_t, void))(v123 + 8);
          }
          uint64_t v116 = v0[13];
          v110(v0[12], v0[10]);
          sub_10000A520(v116, &qword_1003EFE98);
          swift_endAccess();
        }
        else if (v82 != v126 && v82 != v125 && v82 != v124)
        {
          v54(v0[28], v0[32], v0[25]);
          os_log_type_t v92 = Logger.logObject.getter();
          os_log_type_t v93 = static os_log_type_t.error.getter();
          BOOL v94 = os_log_type_enabled(v92, v93);
          uint64_t v95 = v0[28];
          if (v94)
          {
            uint64_t v96 = v0[16];
            uint64_t v97 = v0[14];
            uint64_t v141 = v0[25];
            uint64_t v98 = swift_slowAlloc();
            v160[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v98 = 136446466;
            *(void *)(v98 + 4) = sub_100037004(0xD000000000000018, 0x8000000100375990, v160);
            *(_WORD *)(v98 + 12) = 2080;
            unint64_t v135 = v92;
            Friend.type.getter();
            sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
            uint64_t v132 = v95;
            uint64_t v99 = v97;
            uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v102 = v101;
            os_log_type_t loga = v93;
            uint64_t v103 = *v139;
            (*v139)(v96, v99);
            *(void *)(v98 + 14) = sub_100037004(v100, v102, v160);
            swift_bridgeObjectRelease();
            v63(v132, v141);
            _os_log_impl((void *)&_mh_execute_header, v135, loga, "%{public}s Unknown friend.type %s!", (uint8_t *)v98, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v103(v0[17], v0[14]);
          }
          else
          {
            v63(v0[28], v0[25]);

            (*v139)(v0[17], v0[14]);
          }
        }
      }
      uint64_t v117 = v0[32];
      uint64_t v119 = v0[24];
      uint64_t v118 = v0[25];
      uint64_t v121 = v0[19];
      uint64_t v120 = v0[20];
      v54(v121, v117, v118);
      swift_storeEnumTagMultiPayload();
      sub_10000D3F0(v121);
      sub_100030644(v121, type metadata accessor for DataManager.State);
      (*v151)(v119, v120);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v63)(v117, v118);
      goto LABEL_10;
    }
    uint64_t v64 = v0[27];
    v42(v0[22], v0[24], v0[20]);
    (*v159)(v64, v53, v44);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    BOOL v67 = os_log_type_enabled(v65, v66);
    uint64_t v149 = v0[32];
    uint64_t v68 = v0[27];
    uint64_t v69 = v0[25];
    uint64_t v140 = v0[24];
    uint64_t v70 = v0[22];
    uint64_t v71 = v0[20];
    if (v67)
    {
      uint64_t v129 = v0[16];
      uint64_t v131 = v0[14];
      os_log_t log = v65;
      uint64_t v72 = swift_slowAlloc();
      v160[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446722;
      *(void *)(v72 + 4) = sub_100037004(0xD000000000000018, 0x8000000100375990, v160);
      *(_WORD *)(v72 + 12) = 2082;
      sub_1000256E8(&qword_1003EFEA8, (void (*)(uint64_t))&type metadata accessor for FriendshipAction);
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_type_t type = v66;
      *(void *)(v72 + 14) = sub_100037004(v73, v74, v160);
      swift_bridgeObjectRelease();
      unint64_t v75 = *v151;
      (*v151)(v70, v71);
      *(_WORD *)(v72 + 22) = 2082;
      Friend.type.getter();
      sub_1000256E8(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v78 = v77;
      uint64_t v16 = v147;
      (*v139)(v129, v131);
      *(void *)(v72 + 24) = sub_100037004(v76, v78, v160);
      swift_bridgeObjectRelease();
      uint64_t v79 = *v157;
      (*v157)(v68, v69);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s ignoring %{public}s %{public}s", (uint8_t *)v72, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v75(v140, v71);
      v79(v149, v69);
    }
    else
    {

      uint64_t v91 = *v157;
      (*v157)(v68, v69);
      unint64_t v75 = *v151;
      (*v151)(v70, v71);
      v75(v140, v71);
      v91(v149, v69);
    }
    uint64_t result = ((uint64_t (*)(void, void))v75)(v0[23], v0[20]);
LABEL_11:
    unint64_t v15 = v158;
  }
  unint64_t v32 = *(void *)(v136 + 8 * v33);
  if (v32)
  {
LABEL_21:
    int64_t v31 = v33;
LABEL_18:
    uint64_t v25 = (v32 - 1) & v32;
    unint64_t v26 = __clz(__rbit64(v32)) + (v31 << 6);
    int64_t v156 = v31;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v142)
    {
      int64_t v156 = v142 - 1;
      goto LABEL_32;
    }
    unint64_t v32 = *(void *)(v136 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100121DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10012BBD4;
  return sub_10014F7BC(a3);
}

uint64_t sub_100121E40(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10012BBD4;
  return v6(a1);
}

unint64_t sub_100121F1C(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10012242C(a1, v2);
}

unint64_t sub_100121F60(char a1)
{
  Hasher.init(_seed:)();
  sub_10004F724(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1001224C8(a1, v2);
}

unint64_t sub_100121FE8(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100122640(a1 & 1, v2);
}

unint64_t sub_1001220A4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1000256E8(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100025730(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100122178(unsigned __int8 a1)
{
  Swift::Int v2 = sub_100103AA8();

  return sub_100122798(a1, v2);
}

unint64_t sub_1001221BC(uint64_t a1)
{
  type metadata accessor for Friend();
  sub_1000256E8(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100025730(a1, v2, (uint64_t (*)(void))&type metadata accessor for Friend, &qword_1003EEC08, (void (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
}

unint64_t sub_100122290(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100122A44(a1, v2);
}

unint64_t sub_100122358(uint64_t a1)
{
  type metadata accessor for GroupID();
  sub_1000256E8(&qword_1003F0018, (void (*)(uint64_t))&type metadata accessor for GroupID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100025730(a1, v2, (uint64_t (*)(void))&type metadata accessor for GroupID, &qword_1003F0020, (void (*)(uint64_t))&type metadata accessor for GroupID, (uint64_t)&protocol conformance descriptor for GroupID);
}

unint64_t sub_10012242C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1001224C8(char a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    unint64_t v7 = sub_10004F724(*(unsigned char *)(*(void *)(v2 + 48) + v5));
    uint64_t v9 = v8;
    if (v7 == sub_10004F724(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v4;
      unint64_t v5 = (v5 + 1) & v13;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          unint64_t v14 = sub_10004F724(*(unsigned char *)(*(void *)(v2 + 48) + v5));
          uint64_t v16 = v15;
          if (v14 == sub_10004F724(a1) && v16 == v17) {
            break;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v13;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100122640(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x546567617373656DLL;
    }
    else {
      uint64_t v6 = 0x7265646E65537369;
    }
    if (a1) {
      unint64_t v7 = 0xEB00000000657079;
    }
    else {
      unint64_t v7 = 0xED000064696C6156;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x546567617373656DLL : 0x7265646E65537369;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xEB00000000657079 : 0xED000064696C6156;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_100122798(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0x8000000100372B30;
      unint64_t v8 = 0xD000000000000015;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1684632949;
          break;
        case 2:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x444965636E6566;
          break;
        case 3:
          unint64_t v8 = 0x5372656767697274;
          unint64_t v7 = 0xED00007375746174;
          break;
        case 4:
          unint64_t v7 = 0xE100000000000000;
          unint64_t v8 = 118;
          break;
        case 5:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1702125924;
          break;
        case 6:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x6E6F697461636F6CLL;
          break;
        default:
          break;
      }
      unint64_t v9 = 0x8000000100372B30;
      unint64_t v10 = 0xD000000000000015;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE400000000000000;
          if (v8 == 1684632949) {
            goto LABEL_21;
          }
          goto LABEL_22;
        case 2:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x444965636E6566) {
            goto LABEL_22;
          }
          goto LABEL_21;
        case 3:
          unint64_t v9 = 0xED00007375746174;
          if (v8 != 0x5372656767697274) {
            goto LABEL_22;
          }
          goto LABEL_21;
        case 4:
          unint64_t v9 = 0xE100000000000000;
          if (v8 != 118) {
            goto LABEL_22;
          }
          goto LABEL_21;
        case 5:
          unint64_t v9 = 0xE400000000000000;
          unint64_t v10 = 1702125924;
          goto LABEL_20;
        case 6:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x6E6F697461636F6CLL) {
            goto LABEL_22;
          }
          goto LABEL_21;
        default:
LABEL_20:
          if (v8 != v10) {
            goto LABEL_22;
          }
LABEL_21:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_22:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100122A44(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v14 = ~v3;
    while (1)
    {
      int v5 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v4);
      if (v5 == 1) {
        unint64_t v6 = 0xD00000000000002FLL;
      }
      else {
        unint64_t v6 = 0xD00000000000002ELL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x8000000100372E30;
      }
      else {
        unint64_t v7 = 0x8000000100372E60;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = 0xD000000000000031;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = 0x8000000100372DF0;
      }
      if (a1)
      {
        if (a1 == 1) {
          unint64_t v10 = 0xD00000000000002FLL;
        }
        else {
          unint64_t v10 = 0xD00000000000002ELL;
        }
        if (a1 == 1) {
          unint64_t v11 = 0x8000000100372E30;
        }
        else {
          unint64_t v11 = 0x8000000100372E60;
        }
        if (v8 != v10) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v11 = 0x8000000100372DF0;
        if (v8 != 0xD000000000000031) {
          goto LABEL_26;
        }
      }
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_26:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v14;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

double sub_100122BD8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10003B888(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10012563C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100058DA0((long long *)(*(void *)(v11 + 56) + 48 * v8), (_OWORD *)a3);
    sub_100123860(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 40) = -1;
  }
  return result;
}

double sub_100122CCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001232CC(a1, (void (*)(unint64_t, uint64_t))sub_100022CC0, &qword_1003F00E0, (uint64_t (*)(unsigned char *, uint64_t))sub_100022CC0, a2);
}

uint64_t sub_100122CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100025614(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100126894((uint64_t (*)(void))&type metadata accessor for Location, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFEC0);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for Handle();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Location();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_100123A58(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Location();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100122EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001221BC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100126894((uint64_t (*)(void))&type metadata accessor for FriendshipAction, (uint64_t (*)(void))&type metadata accessor for Friend, &qword_1003EFEE0);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for Friend();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for FriendshipAction();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_100123DA0(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for FriendshipAction();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1001230F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10003B888(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100126C44();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for FenceRecord();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10012A9D0(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    sub_1001240E8(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for FenceRecord();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100123294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100123674(a1, &qword_1003F0090, &qword_1003F0098, a2);
}

double sub_1001232A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001232CC(a1, (void (*)(unint64_t, uint64_t))sub_100022CC0, &qword_1003F00D8, (uint64_t (*)(unsigned char *, uint64_t))sub_100022CC0, a2);
}

double sub_1001232CC@<D0>(uint64_t a1@<X0>, void (*a2)(unint64_t, uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(unsigned char *, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  char v9 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1001220A4(a1);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v9;
    uint64_t v19 = *v9;
    *char v9 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001271D0(a3, a4);
      uint64_t v15 = v19;
    }
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v12, v17);
    a2(*(void *)(v15 + 56) + 40 * v12, a5);
    sub_1001242F8(v12, v15);
    *char v9 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a5 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100123424(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1001220A4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100127484();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_100124614(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100123540(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100025614(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100127A44();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for Handle();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100124C4C(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100123638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100123674(a1, &qword_1003F00A0, &qword_1003F00A8, a2);
}

uint64_t sub_10012364C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100123674(a1, &qword_1003F0080, &qword_1003F0088, a2);
}

uint64_t sub_100123660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100123674(a1, &qword_1003F0070, &qword_1003F0078, a2);
}

uint64_t sub_100123674@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1001220A4(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v25 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100127ED4(a2, a3);
      uint64_t v13 = v25;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v10, v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = sub_100044014(a2);
    uint64_t v24 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 32))(a4, v16 + *(void *)(v24 + 72) * v10, v17);
    sub_10012511C(v10, v13, a2);
    *uint64_t v7 = v13;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v19 = a4;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v22 = sub_100044014(a2);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v21 = v22;
    uint64_t v19 = a4;
    uint64_t v20 = 1;
  }

  return v18(v19, v20, 1, v21);
}

unint64_t sub_100123860(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (long long *)(v16 + 48 * v3);
          uint64_t v18 = (long long *)(v16 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v17 >= v18 + 3 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            long long v9 = *v18;
            long long v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *uint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100123A58(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Handle();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1000256E8(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for Location() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *unint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100123DA0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Friend();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1000256E8(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for FriendshipAction() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *unint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001240E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for FenceRecord() - 8) + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001242F8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v37 = (result + 1) & v12;
      uint64_t v38 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v39 = v5 + 16;
      uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v38(v8, *(void *)(a2 + 48) + v14 * v11, v4);
        sub_1000256E8(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v36)(v8, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 40 * a1;
            unint64_t v27 = (long long *)(v25 + 40 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 40))
            {
              long long v28 = *v27;
              long long v29 = v27[1];
              *(void *)(v26 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v26 = v28;
              *(_OWORD *)(v26 + 16) = v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100124614(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v36 = (result + 1) & v12;
      unint64_t v37 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v38 = v5 + 16;
      uint64_t v35 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v37(v8, *(void *)(a2 + 48) + v14 * v11, v4);
        sub_1000256E8(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v35)(v8, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v36)
        {
          if (v21 >= v36 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 24 * a1;
            unint64_t v27 = (long long *)(v25 + 24 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 24))
            {
              long long v28 = *v27;
              *(void *)(v26 + 16) = *((void *)v27 + 2);
              *(_OWORD *)unint64_t v26 = v28;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v36 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    long long v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    long long v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *long long v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100124930(int64_t a1, uint64_t a2)
{
  uint64_t Priority = type metadata accessor for LocatePriority();
  uint64_t v5 = *(void *)(Priority - 8);
  unint64_t result = __chkstk_darwin(Priority);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v36 = (result + 1) & v12;
      unint64_t v37 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v38 = v5 + 16;
      uint64_t v35 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v37(v8, *(void *)(a2 + 48) + v14 * v11, Priority);
        sub_1000256E8(&qword_1003F0048, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v35)(v8, Priority);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v36)
        {
          if (v21 >= v36 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 24 * a1;
            unint64_t v27 = (long long *)(v25 + 24 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 24))
            {
              long long v28 = *v27;
              *(void *)(v26 + 16) = *((void *)v27 + 2);
              *(_OWORD *)unint64_t v26 = v28;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v36 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    long long v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    long long v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *long long v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100124C4C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Handle();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1000256E8(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              void *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100124F44(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012511C(int64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  Swift::Int v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      uint64_t v39 = v15;
      uint64_t v36 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v5);
        sub_1000256E8(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v38)(v9, v5);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(sub_100044014(v37) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v36;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v36;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_100125468()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EFF48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_26:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_28;
    }
    if (v9 >= v13)
    {
LABEL_24:
      unint64_t result = (void *)swift_release();
      uint64_t v1 = v25;
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    if (!v23) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100050C1C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_100022CC0(v26, *(void *)(v4 + 56) + v20);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012563C()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EFFC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_100058D68(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_100058DA0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100125828()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EFFD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_100058CC4(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_100058CFC(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100125A14()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EC800);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100125BC8()
{
  return sub_1001271D0(&qword_1003F00E0, (uint64_t (*)(unsigned char *, uint64_t))sub_100022CC0);
}

void *sub_100125BE8()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EFF98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100125DA4()
{
  return sub_100125E18((uint64_t (*)(void))&type metadata accessor for IDSStatus, &qword_1003F0010);
}

void *sub_100125DC4()
{
  return sub_100126894((uint64_t (*)(void))&type metadata accessor for FriendshipRequestStatus, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFFE8);
}

void *sub_100125DF8()
{
  return sub_100125E18((uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFFF0);
}

void *sub_100125E18(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v33 - v5;
  sub_100044014(a2);
  BOOL v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    uint64_t v32 = v40;
    uint64_t v31 = v34;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }
  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v40;
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  uint64_t v35 = v7 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  uint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    uint64_t v26 = v40;
    int64_t v27 = (void *)(*(void *)(v40 + 48) + v21);
    *int64_t v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v31 = v34;
    uint64_t v32 = v40;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001260DC()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EFFB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_1000370D8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    id result = sub_100023434(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012629C()
{
  return sub_1001262DC(&qword_1003EFFA0, (void (*)(unsigned char *, uint64_t))sub_100023434);
}

void *sub_1001262BC()
{
  return sub_1001262DC(&qword_1003EFFF8, (void (*)(unsigned char *, uint64_t))sub_100023434);
}

void *sub_1001262DC(uint64_t *a1, void (*a2)(unsigned char *, uint64_t))
{
  uint64_t v4 = v2;
  sub_100044014(a1);
  uint64_t v5 = *v2;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v7;
    return result;
  }
  int64_t v27 = v4;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    int64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = 32 * v17;
    sub_1000370D8(*(void *)(v5 + 56) + 32 * v17, (uint64_t)v29);
    uint64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    void *v23 = v20;
    v23[1] = v21;
    a2(v29, *(void *)(v7 + 56) + v22);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001264CC()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003F0030);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012667C()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003EFF70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012682C()
{
  return sub_100126894((uint64_t (*)(void))&type metadata accessor for Location, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFEC0);
}

void *sub_100126860()
{
  return sub_100126894((uint64_t (*)(void))&type metadata accessor for FriendshipAction, (uint64_t (*)(void))&type metadata accessor for Friend, &qword_1003EFEE0);
}

void *sub_100126894(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v47 = a1(0);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  os_log_type_t v46 = (char *)&v37 - v6;
  uint64_t v45 = a2(0);
  uint64_t v49 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v37 - v7;
  sub_100044014(a3);
  uint64_t v37 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v51 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v36 = v51;
    uint64_t v35 = v37;
LABEL_25:
    *uint64_t v35 = v36;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v51;
  }
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  uint64_t v48 = v8;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v8 + 64;
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v50;
  uint64_t v19 = v49;
  uint64_t v42 = v50 + 16;
  uint64_t v43 = v49 + 16;
  uint64_t v40 = v50 + 32;
  uint64_t v41 = v49 + 32;
  uint64_t v20 = v44;
  uint64_t v21 = v45;
  uint64_t v22 = v47;
  uint64_t v23 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v52 = v14;
      unint64_t v25 = v24 | (v14 << 6);
      uint64_t v26 = v48;
      goto LABEL_9;
    }
    int64_t v31 = v14 + 1;
    uint64_t v26 = v48;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v31);
    int64_t v33 = v14 + 1;
    if (!v32)
    {
      int64_t v33 = v31 + 1;
      if (v31 + 1 >= v39) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v38 + 8 * v33);
      if (!v32) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v32 - 1) & v32;
    int64_t v52 = v33;
    unint64_t v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    unint64_t v27 = *(void *)(v19 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v20, *(void *)(v26 + 48) + v27, v21);
    unint64_t v28 = *(void *)(v18 + 72) * v25;
    unint64_t v29 = *(void *)(v26 + 56) + v28;
    int64_t v30 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v46, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v23 + 48) + v27, v20, v21);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v23 + 56) + v28, v30, v22);
    int64_t v14 = v52;
  }
  int64_t v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v35 = v37;
    uint64_t v36 = v51;
    goto LABEL_25;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100126C44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FenceRecord();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003EFF40);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  unint64_t v27 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_100129BB8(*(void *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_10012A9D0((uint64_t)v4, *(void *)(v7 + 56) + v21, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100126ED8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003EFF38);
  uint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v22 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v23 = v5 + 64;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  uint64_t v26 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 584 * v15;
    memcpy(v27, (const void *)(*(void *)(v5 + 56) + v17), 0x241uLL);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    memcpy((void *)(*(void *)(v7 + 56) + v17), v27, 0x241uLL);
    id result = (void *)sub_1000621F0((uint64_t)v27);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100127190()
{
  return sub_100127CE8(&qword_1003EFF68);
}

void *sub_10012719C()
{
  return sub_100127ED4(&qword_1003F0090, &qword_1003F0098);
}

void *sub_1001271B0()
{
  return sub_1001271D0(&qword_1003F00D8, (uint64_t (*)(unsigned char *, uint64_t))sub_100022CC0);
}

void *sub_1001271D0(uint64_t *a1, uint64_t (*a2)(unsigned char *, uint64_t))
{
  int64_t v30 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(a1);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t v26 = v4;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v27 = v9 + 64;
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v29 = v6 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v15);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t v22 = 40 * v20;
    sub_100050C1C(*(void *)(v9 + 56) + v22, (uint64_t)v31);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
    id result = (void *)v30(v31, *(void *)(v11 + 56) + v22);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v15 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_100127484()
{
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003F00C8);
  uint64_t v35 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v44 = v3;
  if (!v4)
  {
    id result = (char *)swift_release();
    uint64_t v33 = v44;
    unint64_t v32 = v35;
LABEL_25:
    *unint64_t v32 = v33;
    return result;
  }
  uint64_t v5 = v3;
  id result = (char *)(v3 + 64);
  uint64_t v7 = (char *)(v2 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v36 = v2 + 64;
  if (v5 != v2 || result >= &v7[8 * v8])
  {
    id result = (char *)memmove(result, v7, 8 * v8);
    uint64_t v5 = v44;
  }
  int64_t v9 = 0;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v42 = v2;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = v44;
  uint64_t v39 = v43 + 16;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v43 + 32;
  uint64_t v14 = v43;
  int64_t v15 = v40;
  uint64_t v16 = v41;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v45 = v9;
      unint64_t v18 = v17 | (v9 << 6);
      uint64_t v19 = v42;
      goto LABEL_9;
    }
    int64_t v28 = v9 + 1;
    uint64_t v19 = v42;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v37) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v36 + 8 * v28);
    int64_t v30 = v9 + 1;
    if (!v29)
    {
      int64_t v30 = v28 + 1;
      if (v28 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v36 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v29 - 1) & v29;
    int64_t v45 = v30;
    unint64_t v18 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v14 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v19 + 48) + v20, v16);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 24 * v18;
    int64_t v23 = (uint64_t *)(v21 + 24 * v18);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = v23[2];
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v13 + 48) + v20, v15, v16);
    uint64_t v27 = (void *)(*(void *)(v13 + 56) + v22);
    *uint64_t v27 = v24;
    v27[1] = v25;
    v27[2] = v26;
    swift_retain();
    swift_bridgeObjectRetain();
    id result = (char *)swift_bridgeObjectRetain();
    int64_t v9 = v45;
  }
  int64_t v31 = v28 + 2;
  if (v31 >= v37)
  {
LABEL_23:
    id result = (char *)swift_release();
    unint64_t v32 = v35;
    uint64_t v33 = v44;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v36 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v37) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v36 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100127788()
{
  uint64_t Priority = type metadata accessor for LocatePriority();
  uint64_t v2 = *(void *)(Priority - 8);
  __chkstk_darwin(Priority);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003F0038);
  uint64_t v27 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v27 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v28 = v5 + 64;
  int64_t v29 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v30 = v2 + 32;
  uint64_t v31 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v29) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, Priority);
    uint64_t v17 = 24 * v15;
    uint64_t v18 = *(void *)(v5 + 56) + 24 * v15;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v7 + 48) + v16;
    uint64_t v21 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    long long v32 = *(_OWORD *)(v18 + 8);
    v21(v20, v4, Priority);
    uint64_t v22 = *(void *)(v7 + 56) + v17;
    *(void *)uint64_t v22 = v19;
    *(_OWORD *)(v22 + 8) = v32;
    swift_retain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_23;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100127A44()
{
  uint64_t v1 = type metadata accessor for Handle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003F0040);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100127CDC()
{
  return sub_100127CE8(&qword_1003F00D0);
}

void *sub_100127CE8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100044014(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100127E98()
{
  return sub_100127ED4(&qword_1003F00A0, &qword_1003F00A8);
}

void *sub_100127EAC()
{
  return sub_100127ED4(&qword_1003F0080, &qword_1003F0088);
}

void *sub_100127EC0()
{
  return sub_100127ED4(&qword_1003F0070, &qword_1003F0078);
}

void *sub_100127ED4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v45 = sub_100044014(a1);
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(a2);
  uint64_t v35 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v49 = v7;
  if (!v8)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v49;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v9 = v7;
  id result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    uint64_t v9 = v49;
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  uint64_t v46 = v6;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v36 = v6 + 64;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v48;
  uint64_t v17 = v47;
  uint64_t v40 = v48 + 16;
  uint64_t v41 = v47 + 16;
  uint64_t v38 = v48 + 32;
  uint64_t v39 = v47 + 32;
  uint64_t v18 = v42;
  uint64_t v19 = v43;
  uint64_t v20 = v45;
  uint64_t v21 = v49;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v50 = v12;
      unint64_t v23 = v22 | (v12 << 6);
      uint64_t v24 = v46;
      goto LABEL_9;
    }
    int64_t v29 = v12 + 1;
    uint64_t v24 = v46;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v12 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v30 - 1) & v30;
    int64_t v50 = v31;
    unint64_t v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v17 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, *(void *)(v24 + 48) + v25, v19);
    unint64_t v26 = *(void *)(v16 + 72) * v23;
    unint64_t v27 = *(void *)(v24 + 56) + v26;
    uint64_t v28 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v44, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v21 + 48) + v25, v18, v19);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v21 + 56) + v26, v28, v20);
    int64_t v12 = v50;
  }
  int64_t v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v49;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100128278@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100022C64(a2, a3);
      int64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1001284DCLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100044090(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1001284EC(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1001285CC;
  return v5(v2 + 32);
}

uint64_t sub_1001285CC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1001286E0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100128770;
  return daemon.getter();
}

uint64_t sub_100128770(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 48) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000256E8(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10012894C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10012894C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100128DC8;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100128A68;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100128A68()
{
  uint64_t v8 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 32) = sub_100037004(0xD000000000000013, 0x8000000100375D10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s reset all local DB", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100128C50;
  return sub_1002229D8();
}

uint64_t sub_100128C50()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10012904C;
  }
  else {
    uint64_t v2 = sub_100128D64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100128D64()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100128DC8()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000013, 0x8000000100375D10, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed with error %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10012904C()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000013, 0x8000000100375D10, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed with error %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1001292D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = __DataStorage._bytes.getter();
  if (v10)
  {
    uint64_t v11 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v11))
    {
LABEL_9:
      __break(1u);
      JUMPOUT(0x100129388);
    }
    v10 += a1 - v11;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_100128278(v10, a4, a5, &v14);
  if (!v5) {
    char v12 = v14;
  }
  return v12 & 1;
}

BOOL sub_1001293A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  sub_100129BB8(a1, (uint64_t)&v18 - v8, type metadata accessor for DataManager.State);
  unint64_t v10 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
      unint64_t v10 = 3;
      break;
    case 2u:
      uint64_t v12 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
      unint64_t v10 = 4;
      break;
    case 3u:
      unint64_t v10 = 6;
      break;
    case 4u:
      unint64_t v10 = 7;
      break;
    case 5u:
      break;
    case 6u:
      unint64_t v10 = 1;
      break;
    case 7u:
      unint64_t v10 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v9, &qword_1003EFCD0);
      unint64_t v10 = 2;
      break;
  }
  sub_100129BB8(a2, (uint64_t)v7, type metadata accessor for DataManager.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v14 = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v15 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v7, v15);
      unint64_t v14 = 3;
      break;
    case 2:
      uint64_t v16 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v7, v16);
      unint64_t v14 = 4;
      break;
    case 3:
      unint64_t v14 = 6;
      break;
    case 4:
      unint64_t v14 = 7;
      break;
    case 5:
      return v10 < v14;
    case 6:
      unint64_t v14 = 1;
      break;
    case 7:
      unint64_t v14 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v7, &qword_1003EFCD0);
      unint64_t v14 = 2;
      break;
  }
  return v10 < v14;
}

uint64_t sub_1001296A4()
{
  uint64_t v1 = type metadata accessor for Response();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100129778(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Response() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  char v11 = *(unsigned char *)(v1 + v6);
  uint64_t v12 = *(void *)(v7 + 8);
  size_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *size_t v13 = v2;
  v13[1] = sub_100018CD0;
  return sub_10011EB74(a1, v8, v9, v10, v11, v12);
}

uint64_t sub_1001298A4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001298EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100018CD0;
  return sub_10011FD60(a1, v4, v5, v6, v7);
}

uint64_t sub_1001299B4(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10004A274;
  return sub_1001203E8(a1, v5, v4);
}

uint64_t sub_100129A60(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10004A274;
  return sub_100120484(a1, v5, v4);
}

uint64_t sub_100129B0C(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10004A274;
  return sub_100121DA4(a1, v5, v4);
}

uint64_t sub_100129BB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_100129C20(uint64_t a1, uint64_t *a2)
{
  uint64_t v34 = type metadata accessor for Device();
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v27 = v2;
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_100032E40(0, v8, 0);
    uint64_t v9 = v41;
    uint64_t v10 = a2[11];
    uint64_t v12 = a2[2];
    uint64_t v11 = a2[3];
    uint64_t v28 = a2[10];
    uint64_t v29 = v5 + 32;
    uint64_t v13 = a1 + 80;
    uint64_t v36 = *a2;
    uint64_t v37 = v11;
    uint64_t v35 = a2[1];
    int64_t v32 = v7;
    uint64_t v33 = v5;
    uint64_t v30 = v12;
    uint64_t v31 = v10;
    do
    {
      int v14 = *(unsigned __int8 *)(v13 - 48);
      uint64_t v15 = *(void *)(v13 - 40);
      uint64_t v16 = *(void *)(v13 - 32);
      uint64_t v17 = *(void *)(v13 - 24);
      uint64_t v39 = *(void *)(v13 - 8);
      uint64_t v40 = v17;
      int v38 = v14;
      if (v10)
      {
        if (v15 != v28 || v10 != v16) {
          _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
      uint64_t v19 = v36;
      uint64_t v20 = v35;
      if (v37)
      {
        if (v15 == v12 && v37 == v16)
        {
          if (v35)
          {
LABEL_17:
            if (v15 != v19 || v20 != v16) {
              _stringCompareWithSmolCheck(_:_:expecting:)();
            }
          }
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v20 = v35;
          uint64_t v19 = v36;
          if (v35) {
            goto LABEL_17;
          }
        }
      }
      else if (v35)
      {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v23 = v32;
      Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)();
      uint64_t v41 = v9;
      unint64_t v25 = v9[2];
      unint64_t v24 = v9[3];
      if (v25 >= v24 >> 1)
      {
        sub_100032E40(v24 > 1, v25 + 1, 1);
        uint64_t v9 = v41;
      }
      v9[2] = v25 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v25, v23, v34);
      v13 += 56;
      --v8;
      uint64_t v12 = v30;
      uint64_t v10 = v31;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_100129EF8()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10004A274;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_10011E374, 0, 0);
}

uint64_t sub_100129FA4(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10004A274;
  return sub_10011E558(a1, v5, v4);
}

uint64_t sub_10012A050(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_10011E5F4(a1, v4, v5, v6);
}

uint64_t sub_10012A104(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *char v6 = v2;
  v6[1] = sub_10004A274;
  return sub_10011E7C8(a1, v5, v4);
}

unint64_t sub_10012A1B0()
{
  unint64_t result = qword_1003EFF90;
  if (!qword_1003EFF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EFF90);
  }
  return result;
}

uint64_t sub_10012A204()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012A23C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003F0058 + dword_1003F0058);
  return v6(a1, v4);
}

uint64_t sub_10012A2F4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003F00B0 + dword_1003F00B0);
  return v6(a1, v4);
}

uint64_t sub_10012A3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037334(a14, a15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000369FC(a23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037504(a31, a32, a33, a34, a35, a36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

#error "10012A704: call analysis failed (funcsize=62)"

uint64_t sub_10012A72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000372F0(a14, a15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100036C68(a23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000376F4(a31, a32, a33, a34, a35, a36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10012A9B8(void *a1)
{
}

uint64_t sub_10012A9C0(uint64_t a1)
{
  return sub_100111DAC(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10012A9D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10012AA38()
{
  unint64_t result = qword_1003F0128;
  if (!qword_1003F0128)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003F0128);
  }
  return result;
}

uint64_t sub_10012AA7C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Account() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_100116D14(v4, v5, v6);
}

uint64_t sub_10012AB8C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Account() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  v7[5] = v5;
  _OWORD v7[6] = v6;
  v7[4] = v4;
  return _swift_task_switch(sub_100117158, v4, 0);
}

uint64_t sub_10012ACAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012ACE4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_100118010(a1, v4);
}

uint64_t sub_10012AD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10004A274;
  v7[5] = a2;
  _OWORD v7[6] = v6;
  v7[4] = a1;
  return _swift_task_switch(sub_100118E6C, 0, 0);
}

uint64_t sub_10012AE50(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_100119138(a1, v4, v5, v6);
}

uint64_t sub_10012AF10()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012AF48(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_100119C10(a1, v4, v5, v6);
}

uint64_t sub_10012B004()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  v3[3] = v2;
  return _swift_task_switch(sub_10011C520, v2, 0);
}

uint64_t sub_10012B0B4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  v3[2] = v2;
  return _swift_task_switch(sub_10011C39C, 0, 0);
}

uint64_t sub_10012B160()
{
  uint64_t v1 = type metadata accessor for Account();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10012B238()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012B270(uint64_t a1)
{
  return sub_100350278(a1);
}

uint64_t sub_10012B278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F0120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012B2E0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_100108C64();
}

uint64_t sub_10012B37C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10004A274;
  return sub_100106AB0(a1, a2, v6);
}

uint64_t sub_10012B42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_10012B498(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10012B4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012B6A0);
}

uint64_t sub_10012B6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10012B70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012B720);
}

uint64_t sub_10012B720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_10012B790()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DataManager.Error(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for DataManager.Error(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for DataManager.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

void *initializeWithTake for DataManager.Error(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for DataManager.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataManager.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF3 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483636);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 11;
  if (v4 >= 0xD) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DataManager.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF4)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483636;
    if (a3 >= 0x7FFFFFF4) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF4) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 11;
    }
  }
  return result;
}

uint64_t sub_10012BA10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10012BA28(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DataManager.Error()
{
  return &type metadata for DataManager.Error;
}

unint64_t sub_10012BA58(unint64_t result)
{
  if (result >= 0xC) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_10012BA68(unint64_t result)
{
  if (result >= 0xC) {
    return swift_errorRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFAPSMessage.CodingKeys()
{
  return &type metadata for FMFAPSMessage.CodingKeys;
}

unint64_t sub_10012BAB4()
{
  unint64_t result = qword_1003F02F8;
  if (!qword_1003F02F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F02F8);
  }
  return result;
}

unint64_t sub_10012BB0C()
{
  unint64_t result = qword_1003F0300;
  if (!qword_1003F0300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F0300);
  }
  return result;
}

unint64_t sub_10012BB64()
{
  unint64_t result = qword_1003F0308;
  if (!qword_1003F0308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F0308);
  }
  return result;
}

uint64_t sub_10012BBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    sub_10000A520(a1, &qword_1003ECA48);
    sub_100122BD8(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_10000A520((uint64_t)v9, &qword_1003ECA48);
  }
  else
  {
    sub_100058DA0((long long *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100142544(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10012BCB8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100022CC0((long long *)a1, (uint64_t)&v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *unsigned int v2 = 0x8000000000000000;
    sub_1001427DC(&v9, a2, isUniquelyReferenced_nonNull_native);
    *unsigned int v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_100122CCC(a2, (uint64_t)&v9);
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    if (v10) {
      return sub_1000233E4((uint64_t)&v9);
    }
  }
  return result;
}

uint64_t sub_10012BDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100044014(&qword_1003EFE98);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Location();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000A520(a1, &qword_1003EFE98);
    sub_100122CF0(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for Handle();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000A520((uint64_t)v8, &qword_1003EFE98);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100143090((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for Handle();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10012BFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_100044014(&qword_1003EE290);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FenceRecord();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10000A520(a1, &qword_1003EE290);
    sub_1001230F0(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10000A520((uint64_t)v10, &qword_1003EE290);
  }
  else
  {
    sub_100148A24(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_100143504((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10012C1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100044014(&qword_1003F0448);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003F0090);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000A520(a1, &qword_1003F0448);
    sub_100123294(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000A520((uint64_t)v8, &qword_1003F0448);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100143BB8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10012719C, &qword_1003F0090, &qword_1003F0098);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10012C41C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100022CC0((long long *)a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *unsigned int v2 = 0x8000000000000000;
    uint64_t v5 = sub_1000CA5F8((uint64_t)v13, v14);
    __chkstk_darwin(v5);
    uint64_t v7 = (uint64_t *)&v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    sub_100146870(*v7, a2, isUniquelyReferenced_nonNull_native, &v12);
    sub_1000233E4((uint64_t)v13);
    *unsigned int v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t v9 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a2, v9);
  }
  else
  {
    sub_1001232A8(a2, (uint64_t)v13);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a2, v11);
    if (v14) {
      return sub_1000233E4((uint64_t)v13);
    }
  }
  return result;
}

uint64_t sub_10012C5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100044014(&qword_1003F0450);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003F00A0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000A520(a1, &qword_1003F0450);
    sub_100123638(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000A520((uint64_t)v8, &qword_1003F0450);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100143BB8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100127E98, &qword_1003F00A0, &qword_1003F00A8);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10012C830(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100044014(&qword_1003F0430);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003F0080);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000A520(a1, &qword_1003F0430);
    sub_10012364C(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000A520((uint64_t)v8, &qword_1003F0430);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100143BB8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100127EAC, &qword_1003F0080, &qword_1003F0088);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10012CA84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100044014(&qword_1003F0428);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003F0070);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000A520(a1, &qword_1003F0428);
    sub_100123660(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000A520((uint64_t)v8, &qword_1003F0428);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100143BB8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100127EC0, &qword_1003F0070, &qword_1003F0078);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

Class sub_10012CCD8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10005A548(0, &qword_1003ECA70);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

unint64_t *sub_10012CD74(uint64_t a1)
{
  uint64_t v15 = type metadata accessor for Handle();
  uint64_t v3 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v6)
  {
    v13[1] = v1;
    uint64_t v16 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_100020D44(0, v6, 0);
    uint64_t v7 = v16;
    uint64_t v8 = *(void *)(type metadata accessor for Friend() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v14 = *(void *)(v8 + 72);
    do
    {
      Friend.handle.getter();
      uint64_t v16 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_100020D44(v10 > 1, v11 + 1, 1);
        uint64_t v7 = v16;
      }
      v7[2] = v11 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v5, v15);
      v9 += v14;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_10012CF5C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v15[0] = v1;
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_100245E08(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v9 = *(void *)(type metadata accessor for FenceRecord() - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v17 = *(void *)(v9 + 72);
    unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v15[1] = v4 + 32;
    uint64_t v16 = v11;
    do
    {
      v16(v6, v10, v3);
      uint64_t v18 = v8;
      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_100245E08(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13, v6, v3);
      v10 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_10012D164(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  return sub_10002BD24(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Handle, (void (*)(BOOL, uint64_t, uint64_t))sub_100020D44);
}

uint64_t sub_10012D1A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10004AFDC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012D2F8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_10013DCAC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[73 * v9 + 4];
  if (a1 + 32 < v10 + 584 * v8 && v10 < a1 + 32 + 584 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012D458(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_10013DE08(isUniquelyReferenced_nonNull_native, v23, 1, v3, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for PersonHandle() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012D638(uint64_t a1)
{
  return sub_10012D680(a1, &qword_1003F03E8, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10012D680(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *v5;
  int64_t v8 = *(void *)(*v5 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v9 <= *(void *)(v7 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v8 <= v9) {
    int64_t v30 = v8 + v6;
  }
  else {
    int64_t v30 = v8;
  }
  unint64_t v7 = sub_10013DE08(isUniquelyReferenced_nonNull_native, v30, 1, v7, a2, a3, a4);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v6) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v16 = *(void *)(v7 + 16);
  uint64_t v17 = (*(void *)(v7 + 24) >> 1) - v16;
  uint64_t v18 = *(void *)(a5(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  if (v17 < v6)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v21 = v7 + v20 + v19 * v16;
  unint64_t v22 = a1 + v20;
  uint64_t v23 = v19 * v6;
  unint64_t v24 = v21 + v23;
  unint64_t v25 = v22 + v23;
  if (v22 < v24 && v21 < v25) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *int64_t v5 = v7;
    return result;
  }
  uint64_t v27 = *(void *)(v7 + 16);
  BOOL v28 = __OFADD__(v27, v6);
  uint64_t v29 = v27 + v6;
  if (!v28)
  {
    *(void *)(v7 + 16) = v29;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012D854(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  int64_t v4 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void (**)(uint64_t, unint64_t, uint64_t))((char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100044014(&qword_1003ECFB8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v85 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  uint64_t v83 = (uint64_t)&v68 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = *v1;
  int64_t v17 = *(void *)(*v1 + 16);
  int64_t v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  os_log_type_t v84 = v6;
  uint64_t v82 = v11;
  uint64_t v6 = (void (**)(uint64_t, unint64_t, uint64_t))v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v16;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v20 = *(void *)(v16 + 24) >> 1, v20 < v18))
  {
    if (v17 <= v18) {
      int64_t v21 = v17 + v15;
    }
    else {
      int64_t v21 = v17;
    }
    unint64_t v16 = sub_10013DE08(isUniquelyReferenced_nonNull_native, v21, 1, v16, &qword_1003F03E8, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
    *uint64_t v1 = v16;
    int64_t v20 = *(void *)(v16 + 24) >> 1;
  }
  uint64_t v22 = *(void *)(v16 + 16);
  int64_t v17 = (v4[80] + 32) & ~(unint64_t)v4[80];
  int64_t v18 = *((void *)v4 + 9);
  int64_t v23 = v20 - v22;
  uint64_t v24 = sub_10015D17C(&v86, (char *)(v16 + v17 + v18 * v22), v20 - v22, a1);
  if (v24 < v15) {
    goto LABEL_17;
  }
  if (v24)
  {
    uint64_t v27 = *(void *)(v16 + 16);
    BOOL v28 = __OFADD__(v27, v24);
    uint64_t v29 = v27 + v24;
    if (v28)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v16 + 16) = v29;
  }
  if (v24 == v23)
  {
LABEL_18:
    a1 = *(void *)(v16 + 16);
    uint64_t v15 = v86;
    uint64_t v26 = v87;
    uint64_t v25 = v88;
    int64_t v23 = v89;
    uint64_t v79 = v86;
    uint64_t v80 = v88;
    uint64_t v81 = v87;
    if (v90)
    {
      unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))((v90 - 1) & v90);
      unint64_t v31 = __clz(__rbit64(v90)) | (v89 << 6);
LABEL_20:
      unint64_t v32 = *(void *)(v15 + 48) + v31 * v18;
      uint64_t v33 = v83;
      uint64_t v34 = v3;
      v6[2](v83, v32, v3);
      uint64_t v72 = v6[7];
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v72)(v33, 0, 1, v3);
      uint64_t v35 = (unsigned int (*)(void, void, void))v23;
      uint64_t v36 = v34;
      unint64_t v37 = (unint64_t)v78;
      uint64_t v15 = v79;
LABEL_43:
      uint64_t v86 = v15;
      uint64_t v87 = v81;
      uint64_t v88 = v80;
      int64_t v89 = (int64_t)v35;
      unint64_t v90 = v37;
      uint64_t v43 = v82;
      sub_100013210(v33, v82, &qword_1003ECFB8);
      unint64_t v78 = v6[6];
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v78)(v43, 1, v36) == 1)
      {
LABEL_82:
        sub_10000A520(v83, &qword_1003ECFB8);
        sub_1001491B4();
        return sub_10000A520(v82, &qword_1003ECFB8);
      }
      uint64_t v76 = (void (**)(void, void, void))(v4 + 32);
      uint64_t v70 = v4 + 56;
      uint64_t v69 = (void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
      uint64_t v68 = (void (**)(char *, uint64_t))(v4 + 8);
      uint64_t v44 = v82;
      uint64_t v45 = v83;
      uint64_t v71 = v36;
      int64_t v73 = v17;
      while (1)
      {
        sub_10000A520(v44, &qword_1003ECFB8);
        uint64_t v47 = *v1;
        unint64_t v48 = *(void *)(*v1 + 24);
        int64_t v49 = v48 >> 1;
        if ((uint64_t)(v48 >> 1) < a1 + 1)
        {
          uint64_t v47 = sub_10013DE08(v48 > 1, a1 + 1, 1, *v1, &qword_1003F03E8, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
          *uint64_t v1 = v47;
          int64_t v49 = *(void *)(v47 + 24) >> 1;
        }
        uint64_t v50 = v85;
        sub_100013210(v45, v85, &qword_1003ECFB8);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v78)(v50, 1, v36) != 1) {
          break;
        }
        uint64_t v51 = v85;
LABEL_51:
        sub_10000A520(v51, &qword_1003ECFB8);
        uint64_t v46 = a1;
LABEL_46:
        *(void *)(*v1 + 16) = v46;
        uint64_t v44 = v82;
        sub_100013210(v45, v82, &qword_1003ECFB8);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v78)(v44, 1, v36) == 1)
        {
          uint64_t v81 = v87;
          uint64_t v79 = v86;
          uint64_t v80 = v88;
          goto LABEL_82;
        }
      }
      uint64_t v75 = v47 + v17;
      int64_t v52 = *v76;
      if (a1 <= v49) {
        uint64_t v53 = v49;
      }
      else {
        uint64_t v53 = a1;
      }
      uint64_t v77 = v53;
      uint64_t v54 = (char *)v84;
      uint64_t v51 = v85;
      unint64_t v74 = v52;
      while (1)
      {
        uint64_t v57 = v45;
        uint64_t v58 = (uint64_t (*)(uint64_t, char *, uint64_t))v52;
        v52(v54, v51, v36);
        if (a1 == v77)
        {
          (*v68)(v54, v36);
          uint64_t v46 = v77;
          a1 = v77;
          uint64_t v45 = v57;
          int64_t v17 = v73;
          goto LABEL_46;
        }
        sub_10000A520(v57, &qword_1003ECFB8);
        uint64_t v81 = a1;
        uint64_t result = v58(v75 + a1 * v18, v54, v36);
        uint64_t v59 = v86;
        int64_t v60 = v89;
        uint64_t v79 = v88;
        uint64_t v80 = v87;
        if (v90) {
          break;
        }
        int64_t v63 = v89 + 1;
        if (__OFADD__(v89, 1))
        {
          __break(1u);
          return result;
        }
        int64_t v64 = (unint64_t)(v88 + 64) >> 6;
        int64_t v62 = v89;
        uint64_t v45 = v57;
        int64_t v17 = v73;
        if (v63 < v64)
        {
          unint64_t v65 = *(void *)(v87 + 8 * v63);
          if (v65) {
            goto LABEL_66;
          }
          int64_t v66 = v89 + 2;
          int64_t v62 = v89 + 1;
          if (v89 + 2 < v64)
          {
            unint64_t v65 = *(void *)(v87 + 8 * v66);
            if (v65) {
              goto LABEL_69;
            }
            int64_t v62 = v89 + 2;
            if (v89 + 3 < v64)
            {
              unint64_t v65 = *(void *)(v87 + 8 * (v89 + 3));
              if (v65)
              {
                int64_t v63 = v89 + 3;
                goto LABEL_66;
              }
              int64_t v66 = v89 + 4;
              int64_t v62 = v89 + 3;
              if (v89 + 4 < v64)
              {
                unint64_t v65 = *(void *)(v87 + 8 * v66);
                if (v65)
                {
LABEL_69:
                  int64_t v63 = v66;
                  goto LABEL_66;
                }
                int64_t v63 = v89 + 5;
                int64_t v62 = v89 + 4;
                uint64_t v45 = v83;
                if (v89 + 5 < v64)
                {
                  unint64_t v65 = *(void *)(v87 + 8 * v63);
                  if (!v65)
                  {
                    int64_t v62 = v64 - 1;
                    int64_t v67 = v89 + 6;
                    do
                    {
                      if (v64 == v67)
                      {
                        uint64_t v45 = v83;
                        int64_t v17 = v73;
                        goto LABEL_57;
                      }
                      unint64_t v65 = *(void *)(v87 + 8 * v67++);
                    }
                    while (!v65);
                    int64_t v63 = v67 - 1;
                    int64_t v17 = v73;
                  }
LABEL_66:
                  unint64_t v55 = (v65 - 1) & v65;
                  unint64_t v61 = __clz(__rbit64(v65)) + (v63 << 6);
                  int64_t v60 = v63;
LABEL_62:
                  uint64_t v45 = v83;
                  uint64_t v36 = v71;
                  (*v69)(v83, *(void *)(v86 + 48) + v61 * v18, v71);
                  ((void (*)(uint64_t, void, uint64_t, uint64_t))v72)(v45, 0, 1, v36);
                  int64_t v62 = v60;
                  goto LABEL_58;
                }
              }
            }
          }
        }
LABEL_57:
        uint64_t v36 = v71;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(v45, 1, 1, v71);
        unint64_t v55 = 0;
LABEL_58:
        a1 = v81 + 1;
        uint64_t v86 = v59;
        uint64_t v87 = v80;
        uint64_t v88 = v79;
        int64_t v89 = v62;
        unint64_t v90 = v55;
        uint64_t v51 = v85;
        sub_100013210(v45, v85, &qword_1003ECFB8);
        unsigned int v56 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v78)(v51, 1, v36);
        uint64_t v54 = (char *)v84;
        int64_t v52 = v74;
        if (v56 == 1) {
          goto LABEL_51;
        }
      }
      unint64_t v55 = (v90 - 1) & v90;
      unint64_t v61 = __clz(__rbit64(v90)) | (v89 << 6);
      int64_t v17 = v73;
      goto LABEL_62;
    }
LABEL_22:
    int64_t v38 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_41:
      uint64_t v15 = v11;
      a1 = v12;
      int64_t v17 = v13;
    }
    else
    {
      int64_t v39 = (unint64_t)(v25 + 64) >> 6;
      unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))v23;
      if (v38 < v39)
      {
        unint64_t v40 = *(void *)(v26 + 8 * v38);
        if (v40)
        {
LABEL_25:
          unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))((v40 - 1) & v40);
          unint64_t v31 = __clz(__rbit64(v40)) + (v38 << 6);
          int64_t v23 = v38;
          goto LABEL_20;
        }
        int64_t v41 = v23 + 2;
        unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))(v23 + 1);
        if (v23 + 2 < v39)
        {
          int64_t v13 = v17;
          uint64_t v12 = a1;
          uint64_t v11 = v15;
          unint64_t v40 = *(void *)(v26 + 8 * v41);
          if (v40)
          {
LABEL_28:
            int64_t v38 = v41;
            goto LABEL_25;
          }
          unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))(v23 + 2);
          if (v23 + 3 < v39)
          {
            unint64_t v40 = *(void *)(v81 + 8 * (v23 + 3));
            if (v40)
            {
              int64_t v38 = v23 + 3;
              goto LABEL_25;
            }
            int64_t v41 = v23 + 4;
            unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))(v23 + 3);
            if (v23 + 4 < v39)
            {
              unint64_t v40 = *(void *)(v81 + 8 * v41);
              if (v40) {
                goto LABEL_28;
              }
              int64_t v38 = v23 + 5;
              unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))(v23 + 4);
              if (v23 + 5 < v39)
              {
                unint64_t v40 = *(void *)(v81 + 8 * v38);
                if (!v40)
                {
                  unint64_t v78 = (void (*)(uint64_t, unint64_t, uint64_t))(v39 - 1);
                  int64_t v42 = v23 + 6;
                  do
                  {
                    if (v39 == v42) {
                      goto LABEL_41;
                    }
                    unint64_t v40 = *(void *)(v81 + 8 * v42++);
                  }
                  while (!v40);
                  int64_t v38 = v42 - 1;
                }
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    uint64_t v33 = v83;
    uint64_t v36 = v3;
    uint64_t v72 = v6[7];
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(v83, 1, 1, v3);
    unint64_t v37 = 0;
    uint64_t v35 = (unsigned int (*)(void, void, void))v78;
    goto LABEL_43;
  }

  return sub_1001491B4();
}

uint64_t sub_10012E194(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_100146418(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

void *sub_10012E360(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F0380);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PersonHandle();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v25 = (char *)v22 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return &_swiftEmptyArrayStorage;
  }
  v22[1] = v1;
  uint64_t v27 = (void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v24 = v10;
  BOOL v13 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  swift_bridgeObjectRetain();
  v22[0] = a1;
  uint64_t v14 = a1 + 40;
  uint64_t v15 = &_swiftEmptyArrayStorage;
  int64_t v23 = v9;
  do
  {
    swift_bridgeObjectRetain_n();
    PersonHandle.init(id:)();
    (*v27)(v5, 0, 1, v6);
    swift_bridgeObjectRelease();
    if ((*v26)(v5, 1, v6) == 1)
    {
      sub_10000A520((uint64_t)v5, &qword_1003F0380);
    }
    else
    {
      unint64_t v16 = *v13;
      int64_t v17 = v25;
      (*v13)(v25, v5, v6);
      v16(v9, v17, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = (void *)sub_10013DE08(0, v15[2] + 1, 1, (unint64_t)v15, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
      }
      unint64_t v19 = v15[2];
      unint64_t v18 = v15[3];
      if (v19 >= v18 >> 1) {
        uint64_t v15 = (void *)sub_10013DE08(v18 > 1, v19 + 1, 1, (unint64_t)v15, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
      }
      void v15[2] = v19 + 1;
      unint64_t v20 = (unint64_t)v15
          + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
          + *(void *)(v24 + 72) * v19;
      uint64_t v9 = v23;
      v16((char *)v20, v23, v6);
    }
    v14 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v15;
}

void *sub_10012E6B4(void (*a1)(unsigned char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100044014(&qword_1003F0350);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Fence();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v33 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  BOOL v28 = (char *)&v24 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  memcpy(v36, (const void *)(a3 + 32), 0x241uLL);
  memcpy(v35, v36, 0x241uLL);
  sub_1000621F0((uint64_t)v36);
  a1(v35);
  if (v3)
  {
    sub_10006257C((uint64_t)v36);
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  uint64_t v34 = v10;
  int64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  unint64_t v31 = (void (**)(char *, char *, uint64_t))(v29 + 32);
  unint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v15 = 616;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  unint64_t v37 = v9;
  uint64_t v25 = a3;
  while (1)
  {
    sub_10006257C((uint64_t)v36);
    uint64_t v16 = v34;
    if ((*v30)(v9, 1, v34) != 1) {
      break;
    }
    sub_10000A520((uint64_t)v9, &qword_1003F0350);
    if (!--v14) {
      goto LABEL_15;
    }
LABEL_14:
    memcpy(v36, (const void *)(a3 + v15), 0x241uLL);
    memcpy(v35, v36, 0x241uLL);
    sub_1000621F0((uint64_t)v36);
    a1(v35);
    v15 += 584;
    uint64_t v9 = v37;
  }
  int64_t v17 = *v31;
  unint64_t v18 = v28;
  (*v31)(v28, v9, v16);
  v17(v33, v18, v16);
  unint64_t v19 = (unint64_t)v32;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v19 = sub_10013DE08(0, *(void *)(v19 + 16) + 1, 1, v19, &qword_1003F0358, (uint64_t (*)(void))&type metadata accessor for Fence, (uint64_t (*)(void))&type metadata accessor for Fence);
  }
  unint64_t v21 = *(void *)(v19 + 16);
  unint64_t v20 = *(void *)(v19 + 24);
  if (v21 >= v20 >> 1) {
    unint64_t v19 = sub_10013DE08(v20 > 1, v21 + 1, 1, v19, &qword_1003F0358, (uint64_t (*)(void))&type metadata accessor for Fence, (uint64_t (*)(void))&type metadata accessor for Fence);
  }
  *(void *)(v19 + 16) = v21 + 1;
  unint64_t v22 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v32 = (void *)v19;
  v17((char *)(v19 + v22 + *(void *)(v29 + 72) * v21), v33, v34);
  a3 = v25;
  a1 = v26;
  if (--v14) {
    goto LABEL_14;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return v32;
}

char *sub_10012EAAC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v6 = sub_100044014(&qword_1003F0350);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Fence();
  uint64_t v9 = __chkstk_darwin(v29);
  unint64_t v32 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  BOOL v28 = (char *)v24 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v26 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = a3 + v26;
  uint64_t v15 = *(void *)(v11 + 72);
  int64_t v30 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  unint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v24[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  uint64_t v27 = a1;
  uint64_t v17 = v29;
  uint64_t v25 = v15;
  do
  {
    a1(v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*v31)(v8, 1, v17) == 1)
    {
      sub_10000A520((uint64_t)v8, &qword_1003F0350);
    }
    else
    {
      unint64_t v18 = *v30;
      unint64_t v19 = v28;
      (*v30)(v28, v8, v17);
      v18(v32, v19, v17);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (char *)sub_10013DE08(0, *((void *)v16 + 2) + 1, 1, (unint64_t)v16, &qword_1003F0358, (uint64_t (*)(void))&type metadata accessor for Fence, (uint64_t (*)(void))&type metadata accessor for Fence);
      }
      unint64_t v21 = *((void *)v16 + 2);
      unint64_t v20 = *((void *)v16 + 3);
      if (v21 >= v20 >> 1) {
        uint64_t v16 = (char *)sub_10013DE08(v20 > 1, v21 + 1, 1, (unint64_t)v16, &qword_1003F0358, (uint64_t (*)(void))&type metadata accessor for Fence, (uint64_t (*)(void))&type metadata accessor for Fence);
      }
      *((void *)v16 + 2) = v21 + 1;
      uint64_t v22 = v25;
      uint64_t v17 = v29;
      v18(&v16[v26 + v21 * v25], v32, v29);
      uint64_t v15 = v22;
      a1 = v27;
    }
    v14 += v15;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10012EDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000A520(a1, (uint64_t *)&unk_1003F3C10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10012EF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A520(a1, (uint64_t *)&unk_1003F3C10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_100044014(&qword_1003F03F8);
  return swift_task_create();
}

uint64_t sub_10012F108()
{
  v1[156] = v0;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v1[157] = swift_task_alloc();
  v1[158] = *(void *)(type metadata accessor for FenceRecord() - 8);
  v1[159] = swift_task_alloc();
  v1[160] = swift_task_alloc();
  v1[161] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v1[162] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Account();
  v1[163] = v2;
  v1[164] = *(void *)(v2 - 8);
  v1[165] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[166] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10012F2CC;
  return daemon.getter();
}

uint64_t sub_10012F2CC(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[167] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[168] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[169] = v4;
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1001491BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[170] = v6;
  uint64_t v7 = sub_1001491BC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10012F4AC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10012F4AC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[171] = a1;
  v3[172] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[156];
    return _swift_task_switch(sub_100131D38, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[173] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_10012F624;
    return daemon.getter();
  }
}

uint64_t sub_10012F624(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1392) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1400) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1001491BC(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_10012F7D8;
  uint64_t v8 = *(void *)(v2 + 1360);
  uint64_t v9 = *(void *)(v2 + 1352);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10012F7D8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[176] = a1;
  v3[177] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[156];
    return _swift_task_switch(sub_1001320AC, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[178] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_10012F950;
    return daemon.getter();
  }
}

uint64_t sub_10012F950(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1432) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1440) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_1001491BC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_10012FB04;
  uint64_t v8 = *(void *)(v2 + 1360);
  uint64_t v9 = *(void *)(v2 + 1352);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10012FB04(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[181] = a1;
  v3[182] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[156];
    return _swift_task_switch(sub_10013242C, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[183] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_10012FC7C;
    return sub_100005710();
  }
}

uint64_t sub_10012FC7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1248);
  *(void *)(*(void *)v1 + 1472) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10012FD94, v2, 0);
}

uint64_t sub_10012FD94()
{
  v0[185] = sub_10012CD74(v0[184]);
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[186] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10012FE54;
  uint64_t v2 = v0[162];
  return sub_1000078BC(v2);
}

uint64_t sub_10012FE54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1248);
  swift_task_dealloc();
  return _swift_task_switch(sub_10012FF64, v1, 0);
}

uint64_t sub_10012FF64()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[164];
  uint64_t v2 = v0[163];
  uint64_t v3 = v0[162];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = type metadata accessor for GenericError();
    sub_1001491BC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = 0xD00000000000002BLL;
    v6[1] = 0x8000000100375F00;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, enum case for GenericError.error(_:), v4);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    sub_100044014(&qword_1003EC580);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100367D70;
    *(unsigned char *)(v7 + 32) = 35;
    uint64_t v8 = sub_100050768(v5);
    *(void *)(v7 + 64) = &type metadata for String;
    *(void *)(v7 + 72) = &off_1003DDA78;
    *(void *)(v7 + 40) = v8;
    *(void *)(v7 + 48) = v9;
    unint64_t v10 = sub_1001013D8(v7);
    uint64_t v11 = sub_100050320(3, v10);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v11, v13, v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100044058(v16, (uint64_t)qword_10040B708);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      unint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446466;
      v0[152] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2114;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      v0[150] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v20 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s failed: %{public}@", (uint8_t *)v19, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void *))v0[1];
    return v22(_swiftEmptyArrayStorage);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[165], v3, v2);
    return _swift_task_switch(sub_10013045C, 0, 0);
  }
}

uint64_t sub_10013045C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1496) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001304F0;
  return sub_1000F5FA8();
}

uint64_t sub_1001304F0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1504) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001308E8;
  }
  else
  {
    *(void *)(v4 + 1512) = a1;
    uint64_t v5 = sub_100130618;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100130618()
{
  uint64_t v1 = *(void *)(v0 + 1368);
  *(void *)(v0 + 1520) = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  return _swift_task_switch(sub_100130690, v1, 0);
}

uint64_t sub_100130690()
{
  uint64_t v1 = *(void *)(v0 + 1368);
  uint64_t v2 = sub_1001491BC(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 1528) = v3;
  uint64_t v4 = sub_100044014(&qword_1003EE360);
  *uint64_t v3 = v0;
  v3[1] = sub_1001307BC;
  uint64_t v5 = *(void *)(v0 + 1368);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 1192, v1, v2, 0x65636E65466C6C61, 0xEB00000000292873, sub_100146B34, v5, v4);
}

uint64_t sub_1001307BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1536) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1368);
  if (v0) {
    uint64_t v4 = sub_100131910;
  }
  else {
    uint64_t v4 = sub_100130D04;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001308E8()
{
  uint64_t v1 = *(void *)(v0 + 1248);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100130954, v1, 0);
}

uint64_t sub_100130954()
{
  int64_t v23 = v0;
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  uint64_t v3 = v0[163];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[188];
  sub_100044014(&qword_1003EC580);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  *(unsigned char *)(v5 + 32) = 35;
  uint64_t v6 = sub_100050768(v4);
  *(void *)(v5 + 64) = &type metadata for String;
  *(void *)(v5 + 72) = &off_1003DDA78;
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 48) = v7;
  unint64_t v8 = sub_1001013D8(v5);
  uint64_t v9 = sub_100050320(3, v8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v9, v11, v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    os_log_type_t v18 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    v0[152] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2114;
    swift_errorRetain();
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[150] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v18 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s failed: %{public}@", (uint8_t *)v17, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v20 = (uint64_t (*)(void *))v0[1];
  return v20(_swiftEmptyArrayStorage);
}

uint64_t sub_100130D04()
{
  uint64_t v1 = v0[156];
  v0[193] = v0[149];
  return _swift_task_switch(sub_100130D28, v1, 0);
}

uint64_t sub_100130D28()
{
  unint64_t v90 = v0;
  uint64_t v1 = v0[190];
  uint64_t v2 = _swiftEmptyDictionarySingleton;
  __dst[0] = _swiftEmptyDictionarySingleton;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v87 = v1;
  if (v3)
  {
    uint64_t v4 = v0[158];
    unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v6 = v1 + v5;
    uint64_t v7 = *(void *)(v4 + 72);
    uint64_t v8 = v0[192];
    uint64_t v9 = v0[161];
    swift_retain();
    sub_100148858(v6, v9, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    sub_1001479AC((uint64_t *)__dst, v9);
    if (v8)
    {
      uint64_t v10 = v0[161];
      swift_bridgeObjectRelease();
      sub_100148A8C(v10, (uint64_t (*)(void))type metadata accessor for FenceRecord);
      return swift_release();
    }
    sub_100148A8C(v0[161], (uint64_t (*)(void))type metadata accessor for FenceRecord);
    uint64_t v12 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v13 = v87 + v7 + v5;
      do
      {
        uint64_t v14 = v0[161];
        sub_100148858(v13, v14, (uint64_t (*)(void))type metadata accessor for FenceRecord);
        sub_1001479AC((uint64_t *)__dst, v14);
        sub_100148A8C(v0[161], (uint64_t (*)(void))type metadata accessor for FenceRecord);
        v13 += v7;
        --v12;
      }
      while (v12);
    }
    swift_release();
    uint64_t v11 = 0;
    uint64_t v83 = __dst[0];
  }
  else
  {
    uint64_t v11 = v0[192];
    uint64_t v83 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v15 = (void *)v0[193];
  uint64_t v88 = _swiftEmptyDictionarySingleton;
  uint64_t v16 = v15[2];
  if (v16)
  {
    swift_bridgeObjectRetain();
    memcpy(v0 + 75, v15 + 4, 0x241uLL);
    memcpy(__dst, v15 + 4, 0x241uLL);
    sub_1000621F0((uint64_t)(v0 + 75));
    sub_100147F70((uint64_t)&v88, __dst);
    if (v11)
    {
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)(v0 + 75));
      return swift_bridgeObjectRelease();
    }
    uint64_t v17 = (char *)(v15 + 77);
    uint64_t v18 = v16;
    while (1)
    {
      sub_10006257C((uint64_t)(v0 + 75));
      if (!--v18) {
        break;
      }
      memcpy(v0 + 75, v17, 0x241uLL);
      memcpy(__dst, v17, 0x241uLL);
      sub_1000621F0((uint64_t)(v0 + 75));
      sub_100147F70((uint64_t)&v88, __dst);
      v17 += 584;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = 0;
    uint64_t v2 = v88;
  }
  uint64_t v82 = v16;
  if (v3)
  {
    uint64_t v84 = v11;
    uint64_t v20 = v0[158];
    unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v22 = v0[190] + v21;
    uint64_t v23 = *(void *)(v20 + 72);
    swift_retain();
    uint64_t v24 = _swiftEmptyArrayStorage;
    do
    {
      sub_100148858(v22, v0[160], (uint64_t (*)(void))type metadata accessor for FenceRecord);
      if (!v2[2] || (sub_1001220A4(v0[160]), (v26 & 1) == 0))
      {
        sub_100148858(v0[160], v0[159], (uint64_t (*)(void))type metadata accessor for FenceRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = (void *)sub_10013DE08(0, v24[2] + 1, 1, (unint64_t)v24, &qword_1003F03A0, (uint64_t (*)(void))type metadata accessor for FenceRecord, (uint64_t (*)(void))type metadata accessor for FenceRecord);
        }
        unint64_t v28 = v24[2];
        unint64_t v27 = v24[3];
        if (v28 >= v27 >> 1) {
          uint64_t v24 = (void *)sub_10013DE08(v27 > 1, v28 + 1, 1, (unint64_t)v24, &qword_1003F03A0, (uint64_t (*)(void))type metadata accessor for FenceRecord, (uint64_t (*)(void))type metadata accessor for FenceRecord);
        }
        uint64_t v25 = v0[159];
        void v24[2] = v28 + 1;
        sub_100148A24(v25, (uint64_t)v24 + v21 + v28 * v23, (uint64_t (*)(void))type metadata accessor for FenceRecord);
      }
      sub_100148A8C(v0[160], (uint64_t (*)(void))type metadata accessor for FenceRecord);
      v22 += v23;
      --v3;
    }
    while (v3);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = v84;
    uint64_t v16 = v82;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = v24[2];
  int64_t v30 = &loc_100367000;
  if (v29)
  {
    sub_100044014(&qword_1003EC580);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1003677A0;
    *(unsigned char *)(v31 + 32) = 31;
    *(void *)(v31 + 64) = &type metadata for String;
    *(void *)(v31 + 72) = &off_1003DDA78;
    *(void *)(v31 + 40) = 0xD000000000000023;
    *(void *)(v31 + 48) = 0x8000000100375F30;
    *(unsigned char *)(v31 + 80) = 33;
    *(void *)(v31 + 112) = &type metadata for Int;
    *(void *)(v31 + 120) = &off_1003DDA88;
    *(void *)(v31 + 88) = v29;
    unint64_t v32 = sub_1001013D8(v31);
    uint64_t v33 = sub_100050320(3, v32);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v33, v35, v37);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v38 = swift_bridgeObjectRetain();
    sub_10012CF5C(v38);
    swift_bridgeObjectRelease();
    uint64_t v39 = v29;
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100044058(v40, (uint64_t)qword_10040B708);
    swift_bridgeObjectRetain();
    int64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v85 = v11;
      uint64_t v43 = swift_slowAlloc();
      __dst[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446722;
      v0[153] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, (uint64_t *)__dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 12) = 2050;
      v0[154] = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 22) = 2082;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      uint64_t v44 = Array.description.getter();
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v47 = v44;
      uint64_t v11 = v85;
      v0[155] = sub_100037004(v47, v46, (uint64_t *)__dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s no fmsFence for %{public}ld CKFence : %{public}s", (uint8_t *)v43, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v16 = v82;
    int64_t v30 = &loc_100367000;
  }
  uint64_t v86 = v11;
  if (v16)
  {
    unint64_t v48 = (char *)(v0[193] + 32);
    swift_bridgeObjectRetain();
    uint64_t v49 = v16 - 1;
    uint64_t v50 = _swiftEmptyArrayStorage;
    while (1)
    {
      memcpy(v0 + 2, v48, 0x241uLL);
      unint64_t v51 = v0[7];
      if (v51)
      {
        if ((v51 & 0x2000000000000000) != 0 ? HIBYTE(v51) & 0xF : v0[6] & 0xFFFFFFFFFFFFLL)
        {
          sub_1000621F0((uint64_t)(v0 + 2));
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          __dst[0] = v50;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100245E68(0, v50[2] + 1, 1);
            uint64_t v50 = __dst[0];
          }
          unint64_t v55 = v50[2];
          unint64_t v54 = v50[3];
          if (v55 >= v54 >> 1)
          {
            sub_100245E68(v54 > 1, v55 + 1, 1);
            uint64_t v50 = __dst[0];
          }
          v50[2] = v55 + 1;
          memcpy(&v50[73 * v55 + 4], v0 + 2, 0x241uLL);
        }
      }
      if (!v49) {
        break;
      }
      --v49;
      v48 += 584;
    }
    swift_bridgeObjectRelease();
    int64_t v30 = (_OWORD *)&loc_100367000;
  }
  else
  {
    uint64_t v50 = _swiftEmptyArrayStorage;
  }
  uint64_t v56 = v50[2];
  uint64_t v57 = *(void *)(v87 + 16);
  swift_release();
  if (v56 != v57)
  {
    uint64_t v58 = v0[193];
    uint64_t v59 = v0[157];
    uint64_t v60 = v0[156];
    uint64_t v61 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v59, 1, 1, v61);
    uint64_t v62 = sub_1001491BC(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
    int64_t v63 = (void *)swift_allocObject();
    v63[2] = v60;
    v63[3] = v62;
    v63[4] = v50;
    v63[5] = v83;
    v63[6] = v60;
    v63[7] = v58;
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10010405C(v59, (uint64_t)&unk_1003F0348, (uint64_t)v63);
  }
  swift_release();
  uint64_t v64 = v0[193];
  uint64_t v65 = v0[185];
  uint64_t v66 = v0[165];
  int64_t v67 = (void *)swift_task_alloc();
  v67[2] = v83;
  v67[3] = v66;
  v67[4] = v65;
  uint64_t v68 = sub_10012E6B4((void (*)(unsigned char *))sub_100148758, (uint64_t)v67, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v69 = v68[2];
  sub_100044014(&qword_1003EC580);
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = v30[122];
  *(unsigned char *)(v70 + 32) = 36;
  *(void *)(v70 + 64) = &type metadata for Int;
  *(void *)(v70 + 72) = &off_1003DDA88;
  *(void *)(v70 + 40) = v69;
  *(unsigned char *)(v70 + 80) = 35;
  *(void *)(v70 + 112) = &type metadata for String;
  *(void *)(v70 + 120) = &off_1003DDA78;
  *(void *)(v70 + 88) = 1701736270;
  *(void *)(v70 + 96) = 0xE400000000000000;
  unint64_t v71 = sub_1001013D8(v70);
  uint64_t v72 = sub_100050320(3, v71);
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v72, v74, v76);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  __dst[0] = v68;
  swift_bridgeObjectRetain();
  sub_10014459C(__dst);
  if (v86) {
    return swift_release();
  }
  uint64_t v77 = v0[165];
  uint64_t v78 = v0[164];
  uint64_t v79 = v0[163];
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v80 = __dst[0];
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v81 = (uint64_t (*)(void *))v0[1];
  return v81(v80);
}

uint64_t sub_100131910()
{
  uint64_t v1 = *(void *)(v0 + 1248);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100131988, v1, 0);
}

uint64_t sub_100131988()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  uint64_t v3 = v0[163];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[192];
  sub_100044014(&qword_1003EC580);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  *(unsigned char *)(v5 + 32) = 35;
  uint64_t v6 = sub_100050768(v4);
  *(void *)(v5 + 64) = &type metadata for String;
  *(void *)(v5 + 72) = &off_1003DDA78;
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 48) = v7;
  unint64_t v8 = sub_1001013D8(v5);
  uint64_t v9 = sub_100050320(3, v8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v9, v11, v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    v0[152] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2114;
    swift_errorRetain();
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[150] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s failed: %{public}@", (uint8_t *)v17, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void *))v0[1];
  return v20(_swiftEmptyArrayStorage);
}

uint64_t sub_100131D38()
{
  uint64_t v20 = v0;
  swift_release();
  uint64_t v1 = v0[172];
  sub_100044014(&qword_1003EC580);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100367D70;
  *(unsigned char *)(v2 + 32) = 35;
  uint64_t v3 = sub_100050768(v1);
  *(void *)(v2 + 64) = &type metadata for String;
  *(void *)(v2 + 72) = &off_1003DDA78;
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = v4;
  unint64_t v5 = sub_1001013D8(v2);
  uint64_t v6 = sub_100050320(3, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    v0[152] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[150] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s failed: %{public}@", (uint8_t *)v14, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void *))v0[1];
  return v17(_swiftEmptyArrayStorage);
}

uint64_t sub_1001320AC()
{
  uint64_t v20 = v0;
  swift_release();
  swift_release();
  uint64_t v1 = v0[177];
  sub_100044014(&qword_1003EC580);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100367D70;
  *(unsigned char *)(v2 + 32) = 35;
  uint64_t v3 = sub_100050768(v1);
  *(void *)(v2 + 64) = &type metadata for String;
  *(void *)(v2 + 72) = &off_1003DDA78;
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = v4;
  unint64_t v5 = sub_1001013D8(v2);
  uint64_t v6 = sub_100050320(3, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    v0[152] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[150] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s failed: %{public}@", (uint8_t *)v14, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void *))v0[1];
  return v17(_swiftEmptyArrayStorage);
}

uint64_t sub_10013242C()
{
  uint64_t v20 = v0;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0[182];
  sub_100044014(&qword_1003EC580);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100367D70;
  *(unsigned char *)(v2 + 32) = 35;
  uint64_t v3 = sub_100050768(v1);
  *(void *)(v2 + 64) = &type metadata for String;
  *(void *)(v2 + 72) = &off_1003DDA78;
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = v4;
  unint64_t v5 = sub_1001013D8(v2);
  uint64_t v6 = sub_100050320(3, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    v0[152] = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[150] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s failed: %{public}@", (uint8_t *)v14, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void *))v0[1];
  return v17(_swiftEmptyArrayStorage);
}

uint64_t sub_1001327B8(uint64_t a1, uint64_t a2)
{
  v3[301] = v2;
  v3[300] = a2;
  v3[299] = a1;
  sub_100044014(&qword_1003ECFB8);
  v3[302] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[303] = v4;
  v3[304] = *(void *)(v4 - 8);
  v3[305] = swift_task_alloc();
  sub_100044014(&qword_1003EE290);
  v3[306] = swift_task_alloc();
  v3[307] = swift_task_alloc();
  v3[308] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[309] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Account();
  v3[310] = v5;
  v3[311] = *(void *)(v5 - 8);
  v3[312] = swift_task_alloc();
  v3[313] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[314] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1001329C8;
  return daemon.getter();
}

uint64_t sub_1001329C8(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[315] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[316] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[317] = v4;
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1001491BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[318] = v6;
  uint64_t v7 = sub_1001491BC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100132BA8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100132BA8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[319] = a1;
  v3[320] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[301];
    return _swift_task_switch(sub_100134EBC, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[321] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_100132D20;
    return daemon.getter();
  }
}

uint64_t sub_100132D20(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 2576) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 2584) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1001491BC(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_100132ED4;
  uint64_t v8 = *(void *)(v2 + 2544);
  uint64_t v9 = *(void *)(v2 + 2536);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100132ED4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[324] = a1;
  v3[325] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[301];
    return _swift_task_switch(sub_1001351E0, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[326] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_10013304C;
    return daemon.getter();
  }
}

uint64_t sub_10013304C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 2616) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 2624) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_1001491BC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_100133200;
  uint64_t v8 = *(void *)(v2 + 2544);
  uint64_t v9 = *(void *)(v2 + 2536);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100133200(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[329] = a1;
  v3[330] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[301];
    return _swift_task_switch(sub_100135510, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[331] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_100133378;
    return sub_100005710();
  }
}

uint64_t sub_100133378(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2408);
  *(void *)(*(void *)v1 + 2656) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100133490, v2, 0);
}

uint64_t sub_100133490()
{
  v0[333] = sub_10012CD74(v0[332]);
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[334] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100133550;
  uint64_t v2 = v0[309];
  return sub_1000078BC(v2);
}

uint64_t sub_100133550()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2408);
  swift_task_dealloc();
  return _swift_task_switch(sub_100133660, v1, 0);
}

uint64_t sub_100133660()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0[311];
  uint64_t v2 = v0[310];
  uint64_t v3 = v0[309];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = type metadata accessor for GenericError();
    sub_1001491BC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    *uint64_t v5 = 0xD00000000000002BLL;
    v5[1] = 0x8000000100375F00;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for GenericError.error(_:), v4);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100044058(v6, (uint64_t)qword_10040B708);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446466;
      v0[296] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2114;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      v0[295] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s failed: %{public}@", (uint8_t *)v9, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v13 = v0[299];
    uint64_t v14 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    uint64_t v12 = v0[319];
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[313], v3, v2);
    return _swift_task_switch(sub_100133B0C, v12, 0);
  }
}

uint64_t sub_100133B0C()
{
  uint64_t v1 = v0[319];
  uint64_t v2 = v0[300];
  uint64_t v3 = sub_1001491BC(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[335] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[336] = v5;
  uint64_t v6 = sub_100044014(&qword_1003F03D0);
  *uint64_t v5 = v0;
  v5[1] = sub_100133C54;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 221, v1, v3, 0x64692865636E6566, 0xEA0000000000293ALL, sub_100148AEC, v4, v6);
}

uint64_t sub_100133C54()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2696) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 2552);
  if (v0) {
    uint64_t v4 = sub_100134340;
  }
  else {
    uint64_t v4 = sub_100133D6C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100133D6C()
{
  uint64_t v1 = *(void *)(v0 + 2408);
  sub_100013B50(v0 + 1768, v0 + 600, &qword_1003F03D0);
  return _swift_task_switch(sub_100133DE4, v1, 0);
}

uint64_t sub_100133DE4()
{
  unint64_t v28 = v0;
  sub_100013B50((uint64_t)(v0 + 75), (uint64_t)(v0 + 148), &qword_1003F03D0);
  if (sub_10006289C((uint64_t)(v0 + 148)) == 1)
  {
    uint64_t v1 = v0[299];
    (*(void (**)(void, void))(v0[311] + 8))(v0[313], v0[310]);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  memcpy(v0 + 2, v0 + 148, 0x241uLL);
  unint64_t v3 = v0[153];
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = v0[152];
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
LABEL_12:
    uint64_t v26 = (uint64_t)(v0 + 2);
LABEL_13:
    uint64_t v13 = v0[308];
    uint64_t v14 = type metadata accessor for FenceRecord();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    uint64_t v15 = v0[313];
    uint64_t v16 = v0[312];
    uint64_t v17 = v0[311];
    uint64_t v18 = v0[310];
    uint64_t v19 = v0[308];
    sub_100013210(v19, v0[306], &qword_1003EE290);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
    sub_100136D04(v26);
    swift_release();
    swift_release();
    swift_release();
    sub_10000A520(v19, &qword_1003EE290);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
    goto LABEL_14;
  }
  uint64_t v6 = v0[304];
  uint64_t v7 = v0[303];
  uint64_t v8 = v0[302];
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
  {
    uint64_t v26 = (uint64_t)(v0 + 2);
    sub_10000A520(v0[302], &qword_1003ECFB8);
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040B708);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      v0[297] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[298] = sub_100037004(v4, v3, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s failed ckRecordName is invalid: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    goto LABEL_13;
  }
  uint64_t v22 = v0[305];
  uint64_t v23 = v0[304];
  uint64_t v24 = v0[303];
  uint64_t v25 = v0[302];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v25, v24);
  return _swift_task_switch(sub_100134718, 0, 0);
}

uint64_t sub_100134340()
{
  uint64_t v1 = *(void *)(v0 + 2408);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001343B8, v1, 0);
}

uint64_t sub_1001343B8()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[313];
  uint64_t v2 = v0[311];
  uint64_t v3 = v0[310];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100044058(v4, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[296] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2114;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[295] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed: %{public}@", (uint8_t *)v7, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[299];
  uint64_t v11 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100134718()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[338] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001347B8;
  uint64_t v2 = v0[307];
  uint64_t v3 = v0[305];
  return sub_1000F62B0(v2, v3);
}

uint64_t sub_1001347B8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100134AB4;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 2408);
    uint64_t v3 = sub_1001348D4;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1001348D4()
{
  uint64_t v1 = v0[308];
  uint64_t v2 = v0[307];
  (*(void (**)(void, void))(v0[304] + 8))(v0[305], v0[303]);
  sub_100013B50(v2, v1, &qword_1003EE290);
  uint64_t v3 = v0[313];
  uint64_t v4 = v0[312];
  uint64_t v5 = v0[311];
  uint64_t v6 = v0[310];
  uint64_t v7 = v0[308];
  sub_100013210(v7, v0[306], &qword_1003EE290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  sub_100136D04((uint64_t)(v0 + 2));
  swift_release();
  swift_release();
  swift_release();
  sub_10000A520(v7, &qword_1003EE290);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100134AB4()
{
  uint64_t v1 = *(void *)(v0 + 2408);
  swift_bridgeObjectRelease();
  sub_100148AF4((uint64_t *)(v0 + 600));
  return _swift_task_switch(sub_100134B2C, v1, 0);
}

uint64_t sub_100134B2C()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0[313];
  uint64_t v2 = v0[311];
  uint64_t v3 = v0[310];
  uint64_t v4 = v0[305];
  uint64_t v5 = v0[304];
  uint64_t v6 = v0[303];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100044058(v7, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    v0[296] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[295] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s failed: %{public}@", (uint8_t *)v10, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = v0[299];
  uint64_t v14 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100134EBC()
{
  uint64_t v12 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[296] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[295] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[299];
  uint64_t v8 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001351E0()
{
  uint64_t v12 = v0;
  swift_release();
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[296] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[295] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[299];
  uint64_t v8 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100135510()
{
  uint64_t v12 = v0;
  swift_release();
  swift_release();
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[296] = sub_100037004(0xD00000000000001ELL, 0x8000000100376150, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[295] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[299];
  uint64_t v8 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10013584C(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1001358E0, v1, 0);
}

uint64_t sub_1001358E0()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1001491BC(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.fencesMigration(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  if (My)
  {
    os_log_type_t v3 = (void *)swift_task_alloc();
    v0[12] = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_100135A4C;
    return daemon.getter();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100135A4C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  os_log_type_t v9 = (void *)*v1;
  v2[13] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[14] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[15] = v4;
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1001491BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[16] = v6;
  uint64_t v7 = sub_1001491BC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_100135C2C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100135C2C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[17] = a1;
  v4[18] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[10];
    uint64_t v6 = sub_1001367EC;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100135D64;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100135D64()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[9];
  uint64_t v3 = sub_1001491BC(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[19] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100135E9C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v1, v3, 0x6566286574697277, 0xEE00293A7365636ELL, sub_10013E5C8, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100135E9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = sub_100136344;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    swift_task_dealloc();
    uint64_t v4 = sub_100135FC4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100135FC4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100136054;
  return daemon.getter();
}

uint64_t sub_100136054(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 184) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 192) = v5;
  uint64_t v6 = type metadata accessor for FenceService(0);
  uint64_t v7 = sub_1001491BC(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  *uint64_t v5 = v4;
  v5[1] = sub_100136208;
  uint64_t v8 = *(void *)(v2 + 128);
  uint64_t v9 = *(void *)(v2 + 120);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100136208(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 80);
    uint64_t v6 = sub_100136A74;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 208) = a1;
    uint64_t v6 = sub_100136638;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100136344()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001363B0, v1, 0);
}

uint64_t sub_1001363B0()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[7] = sub_100037004(0xD000000000000019, 0x8000000100375EC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100136638()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = sub_1001491BC(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n();
  sub_10012EDF8(v3, (uint64_t)&unk_1003EF748, (uint64_t)v6);
  swift_release();
  return _swift_task_switch(sub_100136778, v2, 0);
}

uint64_t sub_100136778()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001367EC()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[7] = sub_100037004(0xD000000000000019, 0x8000000100375EC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100136A74()
{
  uint64_t v10 = v0;
  swift_release();
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[7] = sub_100037004(0xD000000000000019, 0x8000000100375EC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100136D04(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  *(void *)&long long v505 = v2;
  uint64_t v508 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = (const void *)v1;
  uint64_t v8 = v7;
  uint64_t v459 = type metadata accessor for Date();
  uint64_t v458 = *(void *)(v459 - 8);
  uint64_t v9 = __chkstk_darwin(v459);
  v456 = &v415[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  *(void *)&long long v471 = &v415[-v11];
  uint64_t v12 = sub_100044014(&qword_1003ECFB8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v455 = &v415[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  *(void *)&long long v479 = &v415[-v15];
  uint64_t v16 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  v453 = &v415[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  *(void *)&long long v478 = &v415[-v19];
  uint64_t v472 = type metadata accessor for PersonHandle();
  uint64_t v460 = *(void *)(v472 - 8);
  __chkstk_darwin(v472);
  *(void *)&long long v470 = &v415[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v469 = type metadata accessor for PlaceMark();
  uint64_t v454 = *(void *)(v469 - 8);
  uint64_t v21 = __chkstk_darwin(v469);
  v451 = &v415[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  *(void *)&long long v477 = &v415[-v23];
  uint64_t v468 = type metadata accessor for Fence.MonitorRegion();
  uint64_t v452 = *(void *)(v468 - 8);
  uint64_t v24 = __chkstk_darwin(v468);
  v450 = &v415[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  *(void *)&long long v476 = &v415[-v26];
  uint64_t v27 = sub_100044014(&qword_1003F0360);
  __chkstk_darwin(v27 - 8);
  v461 = &v415[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v475 = type metadata accessor for Fence.MonitorRegion.Source();
  *(void *)&long long v474 = *(void *)(v475 - 8);
  uint64_t v29 = __chkstk_darwin(v475);
  *(void *)&long long v447 = &v415[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v29);
  v467 = &v415[-v31];
  uint64_t v32 = sub_100044014(&qword_1003ECD30);
  __chkstk_darwin(v32 - 8);
  *(void *)&long long v483 = &v415[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v486 = type metadata accessor for Fence.AcceptanceStatus();
  uint64_t v487 = *(void *)(v486 - 8);
  uint64_t v34 = __chkstk_darwin(v486);
  v466 = &v415[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v34);
  v484 = &v415[-v36];
  uint64_t v37 = sub_100044014(&qword_1003EE810);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  *(void *)&long long v491 = &v415[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v38);
  *(void *)&long long v492 = &v415[-v40];
  uint64_t v41 = sub_100044014(&qword_1003F0368);
  uint64_t v42 = __chkstk_darwin(v41 - 8);
  *(void *)&long long v493 = &v415[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v42);
  *(void *)&long long v494 = &v415[-v44];
  uint64_t v497 = type metadata accessor for Fence.Variant();
  uint64_t v496 = *(void *)(v497 - 8);
  uint64_t v45 = __chkstk_darwin(v497);
  v465 = &v415[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v45);
  v495 = &v415[-v47];
  uint64_t v48 = sub_100044014(&qword_1003F0370);
  __chkstk_darwin(v48 - 8);
  v498 = &v415[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v501 = type metadata accessor for Fence.Participant();
  uint64_t v502 = *(void *)(v501 - 8);
  uint64_t v50 = __chkstk_darwin(v501);
  v464 = &v415[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v52 = __chkstk_darwin(v50);
  v463 = &v415[-v53];
  uint64_t v54 = __chkstk_darwin(v52);
  v499 = &v415[-v55];
  __chkstk_darwin(v54);
  v503 = &v415[-v56];
  uint64_t v57 = sub_100044014(&qword_1003ECD38);
  __chkstk_darwin(v57 - 8);
  uint64_t v59 = &v415[-((v58 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v507 = type metadata accessor for Fence.ID();
  uint64_t v506 = *(void *)(v507 - 8);
  uint64_t v60 = __chkstk_darwin(v507);
  v462 = &v415[-((v61 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v60);
  v504 = &v415[-v62];
  uint64_t v510 = type metadata accessor for Logger();
  unint64_t v509 = *(void *)(v510 - 8);
  uint64_t v63 = __chkstk_darwin(v510);
  *(void *)&long long v480 = &v415[-((v64 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = __chkstk_darwin(v63);
  *(void *)&long long v445 = &v415[-v66];
  uint64_t v67 = __chkstk_darwin(v65);
  v449 = &v415[-v68];
  uint64_t v69 = __chkstk_darwin(v67);
  *(void *)&long long v444 = &v415[-v70];
  uint64_t v71 = __chkstk_darwin(v69);
  *(void *)&long long v446 = &v415[-v72];
  uint64_t v73 = __chkstk_darwin(v71);
  *(void *)&long long v457 = &v415[-v74];
  uint64_t v75 = __chkstk_darwin(v73);
  v473 = &v415[-v76];
  uint64_t v77 = __chkstk_darwin(v75);
  *(void *)&long long v481 = &v415[-v78];
  uint64_t v79 = __chkstk_darwin(v77);
  *(void *)&long long v482 = &v415[-v80];
  uint64_t v81 = __chkstk_darwin(v79);
  *(void *)&long long v485 = &v415[-v82];
  uint64_t v83 = __chkstk_darwin(v81);
  *(void *)&long long v490 = &v415[-v84];
  uint64_t v85 = __chkstk_darwin(v83);
  uint64_t v87 = &v415[-v86];
  uint64_t v88 = __chkstk_darwin(v85);
  unint64_t v90 = &v415[-v89];
  __chkstk_darwin(v88);
  os_log_type_t v92 = &v415[-v91];
  uint64_t v93 = sub_100044014(&qword_1003EE290);
  uint64_t v94 = __chkstk_darwin(v93 - 8);
  *(void *)&long long v448 = &v415[-((v95 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v96 = __chkstk_darwin(v94);
  v489 = &v415[-v97];
  __chkstk_darwin(v96);
  uint64_t v99 = &v415[-v98];
  sub_100013B50((uint64_t)v6 + 32, (uint64_t)v521, &qword_1003ED120);
  memcpy(v520, v6, sizeof(v520));
  sub_100013B50((uint64_t)v521, (uint64_t)&v522, &qword_1003ED120);
  if (v523)
  {
    if ((v523 & 0x2000000000000000) != 0) {
      uint64_t v100 = HIBYTE(v523) & 0xF;
    }
    else {
      uint64_t v100 = v522 & 0xFFFFFFFFFFFFLL;
    }
    sub_100013210(v5, (uint64_t)v99, &qword_1003EE290);
    if (v100)
    {
      uint64_t v101 = type metadata accessor for FenceRecord();
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v101 - 8) + 48))(v99, 1, v101) == 1)
      {
        sub_10000A520((uint64_t)v99, &qword_1003EE290);
        swift_bridgeObjectRelease();
        if (qword_1003EC058 != -1) {
          swift_once();
        }
        uint64_t v102 = v510;
        uint64_t v103 = sub_100044058(v510, (uint64_t)qword_1003F0310);
        unint64_t v104 = v509;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v509 + 16))(v92, v103, v102);
        memcpy(v519, v520, sizeof(v519));
        sub_1000621F0((uint64_t)v519);
        unint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v105, v106))
        {
          uint64_t v107 = swift_slowAlloc();
          uint64_t v507 = swift_slowAlloc();
          *(void *)&v518[0] = v507;
          *(_DWORD *)uint64_t v107 = 136446466;
          uint64_t v488 = v8;
          *(void *)v517 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v518);
          uint64_t v500 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v107 + 12) = 2082;
          if (*(void *)&v519[368]) {
            uint64_t v108 = *(void *)&v519[360];
          }
          else {
            uint64_t v108 = 0x3E6C696E3CLL;
          }
          if (*(void *)&v519[368]) {
            unint64_t v109 = *(void *)&v519[368];
          }
          else {
            unint64_t v109 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v110 = v108;
          uint64_t v8 = v488;
          *(void *)v517 = sub_100037004(v110, v109, (uint64_t *)v518);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006257C((uint64_t)v519);
          sub_10006257C((uint64_t)v519);
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "%{public}s missing a fenceRecord for fence: %{public}s", (uint8_t *)v107, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v111 = type metadata accessor for Account();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v508, v111);
          sub_10000A520(v500, &qword_1003EE290);
          (*(void (**)(unsigned char *, uint64_t))(v104 + 8))(v92, v510);
        }
        else
        {

          sub_10006257C((uint64_t)v519);
          sub_10006257C((uint64_t)v519);
          uint64_t v142 = type metadata accessor for Account();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v142 - 8) + 8))(v508, v142);
          sub_10000A520(v5, &qword_1003EE290);
          (*(void (**)(unsigned char *, uint64_t))(v104 + 8))(v92, v102);
        }
        goto LABEL_148;
      }
    }
  }
  else
  {
    sub_100013210(v5, (uint64_t)v99, &qword_1003EE290);
  }
  sub_10000A520((uint64_t)v99, &qword_1003EE290);
  sub_1000B6698(v5);
  uint64_t v112 = *(void *)&v520[360];
  unint64_t v113 = *(void *)&v520[368];
  swift_bridgeObjectRetain();
  Fence.ID.init(string:)();
  uint64_t v114 = v506;
  uint64_t v115 = v507;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v506 + 48))(v59, 1, v507) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A520((uint64_t)v59, &qword_1003ECD38);
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v116 = v510;
    uint64_t v117 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v118 = v509;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v509 + 16))(v90, v117, v116);
    memcpy(v519, v520, sizeof(v519));
    sub_1000621F0((uint64_t)v519);
    uint64_t v119 = Logger.logObject.getter();
    os_log_type_t v120 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v119, v120))
    {
      uint64_t v121 = swift_slowAlloc();
      uint64_t v507 = swift_slowAlloc();
      *(void *)&v518[0] = v507;
      *(_DWORD *)uint64_t v121 = 136446466;
      *(void *)v517 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v518);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v121 + 12) = 2082;
      if (*(void *)&v519[368]) {
        uint64_t v122 = *(void *)&v519[360];
      }
      else {
        uint64_t v122 = 0x3E6C696E3CLL;
      }
      uint64_t v500 = v5;
      if (*(void *)&v519[368]) {
        unint64_t v123 = *(void *)&v519[368];
      }
      else {
        unint64_t v123 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      *(void *)v517 = sub_100037004(v122, v123, (uint64_t *)v518);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v519);
      sub_10006257C((uint64_t)v519);
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "%{public}s missing fence ID: %{public}s", (uint8_t *)v121, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v124 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v124 - 8) + 8))(v508, v124);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(unsigned char *, uint64_t))(v509 + 8))(v90, v510);
    }
    else
    {

      sub_10006257C((uint64_t)v519);
      sub_10006257C((uint64_t)v519);
      uint64_t v131 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v131 - 8) + 8))(v508, v131);
      sub_10000A520(v5, &qword_1003EE290);
      (*(void (**)(unsigned char *, uint64_t))(v118 + 8))(v90, v116);
    }
    goto LABEL_148;
  }
  v442 = &v520[424];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v114 + 32))(v504, v59, v115);
  uint64_t v125 = *(void *)&v520[384];
  uint64_t v126 = *(void *)&v520[392];
  if (*(void *)&v520[392]) {
    uint64_t v127 = *(void *)&v520[384];
  }
  else {
    uint64_t v127 = 0;
  }
  if (*(void *)&v520[392]) {
    unint64_t v128 = *(void *)&v520[392];
  }
  else {
    unint64_t v128 = 0xE000000000000000;
  }
  uint64_t v129 = HIBYTE(v128) & 0xF;
  uint64_t v441 = v127;
  uint64_t v130 = v127 & 0xFFFFFFFFFFFFLL;
  unint64_t v443 = v128;
  if ((v128 & 0x2000000000000000) == 0) {
    uint64_t v129 = v130;
  }
  uint64_t v488 = v8;
  uint64_t v500 = v5;
  if (v129)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v132 = qword_1003EC058;
    swift_bridgeObjectRetain();
    if (v132 != -1) {
      swift_once();
    }
    uint64_t v133 = v510;
    uint64_t v134 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v509 + 16))(v87, v134, v133);
    long long v421 = *(_OWORD *)&v520[16];
    long long v422 = *(_OWORD *)v520;
    long long v419 = *(_OWORD *)&v520[48];
    long long v420 = *(_OWORD *)&v520[32];
    long long v417 = *(_OWORD *)&v520[80];
    long long v418 = *(_OWORD *)&v520[64];
    long long v440 = *(_OWORD *)&v520[96];
    uint64_t v135 = *(void *)&v520[112];
    uint64_t v136 = *(void *)&v520[120];
    sub_100013B50((uint64_t)&v520[128], (uint64_t)v518, &qword_1003ECD28);
    int v416 = v520[376];
    long long v438 = *(_OWORD *)&v520[400];
    *(void *)&long long v439 = *(void *)&v520[416];
    LODWORD(v437) = *v442;
    long long v436 = *(_OWORD *)&v520[432];
    *(void *)&long long v435 = *(void *)&v520[448];
    int v137 = v442[32];
    int v433 = v520[457];
    LODWORD(v434) = v137;
    long long v432 = *(_OWORD *)&v520[464];
    uint64_t v430 = *(void *)&v520[488];
    uint64_t v431 = *(void *)&v520[480];
    int v429 = v442[72];
    long long v427 = *(_OWORD *)&v520[520];
    long long v428 = *(_OWORD *)&v520[504];
    long long v425 = *(_OWORD *)&v520[552];
    long long v426 = *(_OWORD *)&v520[536];
    uint64_t v424 = *(void *)&v520[568];
    int v423 = v442[152];
    *(_OWORD *)v519 = v422;
    *(_OWORD *)&v519[16] = v421;
    *(_OWORD *)&v519[32] = v420;
    *(_OWORD *)&v519[48] = v419;
    *(_OWORD *)&v519[64] = v418;
    *(_OWORD *)&v519[80] = v417;
    *(void *)&v519[112] = v135;
    *(void *)&v519[120] = v136;
    *(_OWORD *)&v519[96] = v440;
    sub_100013B50((uint64_t)v518, (uint64_t)&v519[128], &qword_1003ECD28);
    *(void *)&v519[360] = v112;
    *(void *)&v519[368] = v113;
    v519[376] = v416;
    *(void *)&v519[384] = v125;
    *(void *)&v519[392] = v126;
    *(_OWORD *)&v519[400] = v438;
    v519[424] = v437;
    *(_OWORD *)&v519[432] = v436;
    *(void *)&v519[416] = v439;
    *(void *)&v519[448] = v435;
    v519[456] = v434;
    v519[457] = v433;
    *(_OWORD *)&v519[464] = v432;
    *(void *)&v519[480] = v431;
    *(void *)&v519[488] = v430;
    v519[496] = v429;
    *(_OWORD *)&v519[504] = v428;
    *(_OWORD *)&v519[520] = v427;
    *(_OWORD *)&v519[536] = v426;
    *(_OWORD *)&v519[552] = v425;
    *(void *)&v519[568] = v424;
    v519[576] = v423;
    sub_1000621F0((uint64_t)v519);
    sub_1000621F0((uint64_t)v519);
    uint64_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v138, v139))
    {
      uint64_t v140 = swift_slowAlloc();
      *(void *)&long long v440 = swift_slowAlloc();
      *(void *)v517 = v440;
      *(_DWORD *)uint64_t v140 = 136446466;
      v516[0] = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v140 + 12) = 2082;
      if (v113)
      {
        unint64_t v141 = v113;
      }
      else
      {
        uint64_t v112 = 0x3E6C696E3CLL;
        unint64_t v141 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v516[0] = sub_100037004(v112, v141, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v519);
      sub_10006257C((uint64_t)v519);
      _os_log_impl((void *)&_mh_execute_header, v138, v139, "%{public}s fence with empty label: %{public}s", (uint8_t *)v140, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10006257C((uint64_t)v519);
      sub_10006257C((uint64_t)v519);
    }

    (*(void (**)(unsigned char *, uint64_t))(v509 + 8))(v87, v510);
    uint64_t v8 = v488;
    uint64_t v5 = v500;
    uint64_t v115 = v507;
  }
  uint64_t v143 = v501;
  uint64_t v144 = (uint64_t)v498;
  swift_beginAccess();
  uint64_t v145 = *(void *)&v520[64];
  uint64_t v146 = *(void *)&v520[72];
  swift_bridgeObjectRetain();
  uint64_t v147 = Account.dsid.getter();
  uint64_t v149 = v502;
  if (v146)
  {
    if (v145 == v147 && v146 == v148)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_56:
      uint64_t v151 = (unsigned int *)&enum case for Fence.Participant.me(_:);
      goto LABEL_58;
    }
    char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v150) {
      goto LABEL_56;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v151 = (unsigned int *)&enum case for Fence.Participant.other(_:);
LABEL_58:
  uint64_t v152 = (uint64_t)v503;
  (*(void (**)(unsigned char *, void, uint64_t))(v149 + 104))(v503, *v151, v143);
  uint64_t v153 = *(void *)&v520[552];
  uint64_t v154 = *(void *)&v520[560];
  swift_bridgeObjectRetain();
  sub_10013D32C(v152, v153, v154, v144);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v144, 1, v143) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520(v144, &qword_1003F0370);
    unint64_t v155 = v509;
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v156 = v510;
    uint64_t v157 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    uint64_t v158 = v490;
    (*(void (**)(void, uint64_t, uint64_t))(v155 + 16))(v490, v157, v156);
    memcpy(v518, v520, 0x241uLL);
    memcpy(v519, v520, sizeof(v519));
    sub_1000621F0((uint64_t)v518);
    sub_1000621F0((uint64_t)v518);
    sub_1000621F0((uint64_t)v519);
    unsigned int v159 = Logger.logObject.getter();
    os_log_type_t v160 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = swift_slowAlloc();
      *(void *)v517 = swift_slowAlloc();
      *(_DWORD *)uint64_t v161 = 136446722;
      v516[0] = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v161 + 12) = 2082;
      if (*(void *)&v518[23]) {
        uint64_t v162 = *((void *)&v518[22] + 1);
      }
      else {
        uint64_t v162 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v518[23]) {
        unint64_t v163 = *(void *)&v518[23];
      }
      else {
        unint64_t v163 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v516[0] = sub_100037004(v162, v163, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      *(_WORD *)(v161 + 22) = 2082;
      if (*(void *)&v519[560]) {
        uint64_t v164 = *(void *)&v519[552];
      }
      else {
        uint64_t v164 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v519[560]) {
        unint64_t v165 = *(void *)&v519[560];
      }
      else {
        unint64_t v165 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v516[0] = sub_100037004(v164, v165, (uint64_t *)v517);
      uint64_t v8 = v488;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v519);
      sub_10006257C((uint64_t)v519);
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "%{public}s fence with invalid finder: %{public}s, type: %{public}s", (uint8_t *)v161, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v166 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v166 - 8) + 8))(v508, v166);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(uint64_t, uint64_t))(v509 + 8))(v158, v510);
      (*(void (**)(unsigned char *, uint64_t))(v502 + 8))(v503, v501);
      goto LABEL_147;
    }

    sub_10006257C((uint64_t)v519);
    sub_10006257C((uint64_t)v519);
    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v518);
    uint64_t v173 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v173 - 8) + 8))(v508, v173);
    sub_10000A520(v5, &qword_1003EE290);
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v158, v510);
    (*(void (**)(unsigned char *, uint64_t))(v149 + 8))(v503, v143);
    (*(void (**)(unsigned char *, uint64_t))(v506 + 8))(v504, v115);
LABEL_148:
    uint64_t v265 = type metadata accessor for Fence();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v265 - 8) + 56))(v8, 1, 1, v265);
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v149 + 32))(v499, v144, v143);
  memcpy(v519, v520, sizeof(v519));
  uint64_t v167 = v489;
  sub_100013210(v5, (uint64_t)v489, &qword_1003EE290);
  uint64_t v168 = type metadata accessor for FenceRecord();
  uint64_t v169 = *(void *)(v168 - 8);
  long long v170 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v169 + 48);
  v498 = (unsigned char *)(v169 + 48);
  if (v170(v167, 1, v168) == 1)
  {
    sub_1000621F0((uint64_t)v519);
    sub_10000A520((uint64_t)v167, &qword_1003EE290);
    uint64_t v171 = type metadata accessor for Fence.Schedule();
    uint64_t v172 = v492;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56))(v492, 1, 1, v171);
  }
  else
  {
    uint64_t v172 = v492;
    sub_100013210((uint64_t)&v167[*(int *)(v168 + 32)], v492, &qword_1003EE810);
    sub_1000621F0((uint64_t)v519);
    sub_100148A8C((uint64_t)v167, (uint64_t (*)(void))type metadata accessor for FenceRecord);
  }
  uint64_t v174 = *(void *)&v519[536];
  uint64_t v175 = *(void *)&v519[544];
  unsigned __int8 v176 = v519[457];
  uint64_t v177 = v491;
  sub_100013210(v172, v491, &qword_1003EE810);
  swift_bridgeObjectRetain();
  uint64_t v178 = v493;
  sub_10013D6D4(v176, v174, v175, v177, (char *)v493);
  sub_10006257C((uint64_t)v519);
  sub_10000A520(v172, &qword_1003EE810);
  uint64_t v179 = v496;
  uint64_t v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v496 + 48);
  uint64_t v181 = v497;
  if (v180(v178, 1, v497))
  {
    sub_10000A520(v178, &qword_1003F0368);
    uint64_t v182 = 1;
    uint64_t v183 = v494;
  }
  else
  {
    uint64_t v184 = v178;
    uint64_t v183 = v494;
    (*(void (**)(void, uint64_t, uint64_t))(v179 + 32))(v494, v184, v181);
    uint64_t v182 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v183, v182, 1, v181);
  unsigned int v185 = v180(v183, 1, v181);
  uint64_t v186 = v502;
  if (v185 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520(v183, &qword_1003F0368);
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v187 = v510;
    uint64_t v188 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v189 = v509;
    uint64_t v190 = v485;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v485, v188, v187);
    memcpy(v517, v520, sizeof(v517));
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v518);
    uint64_t v191 = Logger.logObject.getter();
    os_log_type_t v192 = static os_log_type_t.error.getter();
    BOOL v193 = os_log_type_enabled(v191, v192);
    uint64_t v8 = v488;
    if (v193)
    {
      uint64_t v194 = swift_slowAlloc();
      v516[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v194 = 136446722;
      uint64_t v514 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, v516);
      uint64_t v195 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v194 + 12) = 2082;
      if (*(void *)&v517[368]) {
        uint64_t v196 = *(void *)&v517[360];
      }
      else {
        uint64_t v196 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v517[368]) {
        unint64_t v197 = *(void *)&v517[368];
      }
      else {
        unint64_t v197 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v514 = sub_100037004(v196, v197, v516);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v517);
      sub_10006257C((uint64_t)v517);
      *(_WORD *)(v194 + 22) = 2082;
      if (*(void *)&v518[34]) {
        uint64_t v198 = *((void *)&v518[33] + 1);
      }
      else {
        uint64_t v198 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v518[34]) {
        unint64_t v199 = *(void *)&v518[34];
      }
      else {
        unint64_t v199 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v200 = v198;
      uint64_t v8 = v488;
      uint64_t v514 = sub_100037004(v200, v199, v516);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v191, v192, "%{public}s fence with invalid trigger: %{public}s, trigger: %{public}s", (uint8_t *)v194, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v201 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v201 - 8) + 8))(v508, v201);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(void, uint64_t))(v509 + 8))(v485, v510);
      goto LABEL_117;
    }

    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v517);
    sub_10006257C((uint64_t)v517);
    uint64_t v224 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v224 - 8) + 8))(v508, v224);
    sub_10000A520(v500, &qword_1003EE290);
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v190, v187);
LABEL_146:
    uint64_t v263 = *(void (**)(unsigned char *, uint64_t))(v186 + 8);
    uint64_t v264 = v501;
    v263(v499, v501);
    v263(v503, v264);
    goto LABEL_147;
  }
  *(void *)&long long v494 = v170;
  *(void *)&long long v493 = v168;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v179 + 32))(v495, v183, v181);
  uint64_t v202 = *(void *)v520;
  uint64_t v203 = *(void *)&v520[8];
  swift_bridgeObjectRetain();
  uint64_t v204 = v483;
  sub_1001646A0(v202, v203, v483);
  uint64_t v205 = v487;
  uint64_t v206 = v486;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v487 + 48))(v204, 1, v486) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520(v204, &qword_1003ECD30);
    uint64_t v8 = v488;
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v207 = v510;
    uint64_t v208 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v209 = v509;
    uint64_t v210 = v482;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v482, v208, v207);
    memcpy(v517, v520, sizeof(v517));
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v518);
    uint64_t v211 = Logger.logObject.getter();
    os_log_type_t v212 = static os_log_type_t.error.getter();
    BOOL v213 = os_log_type_enabled(v211, v212);
    uint64_t v214 = v500;
    if (v213)
    {
      uint64_t v215 = swift_slowAlloc();
      v516[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v215 = 136446722;
      uint64_t v514 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, v516);
      uint64_t v195 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v215 + 12) = 2082;
      if (*(void *)&v517[368]) {
        uint64_t v216 = *(void *)&v517[360];
      }
      else {
        uint64_t v216 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v517[368]) {
        unint64_t v217 = *(void *)&v517[368];
      }
      else {
        unint64_t v217 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v514 = sub_100037004(v216, v217, v516);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v517);
      sub_10006257C((uint64_t)v517);
      *(_WORD *)(v215 + 22) = 2082;
      if (*((void *)&v518[0] + 1)) {
        uint64_t v218 = *(void *)&v518[0];
      }
      else {
        uint64_t v218 = 0x3E6C696E3CLL;
      }
      if (*((void *)&v518[0] + 1)) {
        unint64_t v219 = *((void *)&v518[0] + 1);
      }
      else {
        unint64_t v219 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v220 = v218;
      uint64_t v8 = v488;
      uint64_t v514 = sub_100037004(v220, v219, v516);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v211, v212, "%{public}s fence with invalid acceptanceStatus: %{public}s, acceptanceStatus: %{public}s", (uint8_t *)v215, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v221 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v508, v221);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(void, uint64_t))(v509 + 8))(v482, v510);
      goto LABEL_116;
    }

    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v517);
    sub_10006257C((uint64_t)v517);
    uint64_t v245 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v245 - 8) + 8))(v508, v245);
    sub_10000A520(v214, &qword_1003EE290);
    (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v210, v207);
LABEL_145:
    (*(void (**)(unsigned char *, uint64_t))(v179 + 8))(v495, v497);
    goto LABEL_146;
  }
  *(void *)&long long v492 = &v517[424];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v205 + 32))(v484, v204, v206);
  uint64_t v225 = v442;
  uint64_t v8 = v488;
  if (v442[72])
  {
    v498 = *(unsigned char **)&v520[488];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v226 = v510;
    uint64_t v227 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    uint64_t v228 = v481;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v481, v227, v226);
    long long v485 = *(_OWORD *)&v520[16];
    long long v482 = *(_OWORD *)&v520[48];
    long long v483 = *(_OWORD *)&v520[32];
    long long v479 = *(_OWORD *)&v520[80];
    long long v480 = *(_OWORD *)&v520[64];
    long long v478 = *(_OWORD *)&v520[96];
    *(void *)&long long v477 = *(void *)&v520[112];
    *(void *)&long long v476 = *(void *)&v520[120];
    sub_100013B50((uint64_t)&v520[128], (uint64_t)v516, &qword_1003ECD28);
    uint64_t v229 = *(void *)&v520[360];
    unint64_t v230 = *(void *)&v520[368];
    char v231 = v520[376];
    long long v474 = *(_OWORD *)&v520[400];
    long long v475 = *(_OWORD *)&v520[384];
    v473 = *(unsigned char **)&v520[416];
    LODWORD(v472) = *v225;
    long long v471 = *(_OWORD *)&v520[432];
    *(void *)&long long v470 = *(void *)&v520[448];
    unsigned __int8 v232 = v225[32];
    v233 = v225;
    char v234 = v520[457];
    long long v469 = *(_OWORD *)&v520[464];
    long long v505 = *(_OWORD *)&v520[504];
    long long v493 = *(_OWORD *)&v520[536];
    long long v494 = *(_OWORD *)&v520[520];
    long long v491 = *(_OWORD *)&v520[552];
    uint64_t v235 = *(void *)&v520[480];
    *(void *)&long long v490 = *(void *)&v520[568];
    LODWORD(v489) = v233[152];
    *(void *)v517 = v202;
    *(void *)&v517[8] = v203;
    *(_OWORD *)&v517[16] = v485;
    *(_OWORD *)&v517[32] = v483;
    *(_OWORD *)&v517[48] = v482;
    *(_OWORD *)&v517[64] = v480;
    *(_OWORD *)&v517[80] = v479;
    *(_OWORD *)&v517[96] = v478;
    *(void *)&v517[112] = v477;
    *(void *)&v517[120] = v476;
    sub_100013B50((uint64_t)v516, (uint64_t)&v517[128], &qword_1003ECD28);
    *(void *)&long long v485 = v229;
    *(void *)&v517[360] = v229;
    unint64_t v236 = v230;
    *(void *)&v517[368] = v230;
    v517[376] = v231;
    *(_OWORD *)&v517[384] = v475;
    *(_OWORD *)&v517[400] = v474;
    *(void *)&v517[416] = v473;
    uint64_t v237 = (unsigned char *)v492;
    *(unsigned char *)long long v492 = v472;
    *(_OWORD *)&v517[432] = v471;
    *(void *)&v517[448] = v470;
    v237[32] = v232;
    v517[457] = v234;
    *(_OWORD *)&v517[464] = v469;
    *(void *)&v517[480] = v235;
    *(void *)&v517[488] = v498;
    v237[72] = 1;
    *(_OWORD *)&v517[504] = v505;
    *(_OWORD *)&v517[520] = v494;
    *(_OWORD *)&v517[536] = v493;
    *(_OWORD *)&v517[552] = v491;
    *(void *)&v517[568] = v490;
    v237[152] = (_BYTE)v489;
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v518);
    uint64_t v238 = Logger.logObject.getter();
    os_log_type_t v239 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v238, v239))
    {
      uint64_t v240 = swift_slowAlloc();
      v513[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v240 = 136446722;
      uint64_t v514 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, v513);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v240 + 12) = 2082;
      if (v230) {
        uint64_t v241 = v485;
      }
      else {
        uint64_t v241 = 0x3E6C696E3CLL;
      }
      if (!v230) {
        unint64_t v236 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v514 = sub_100037004(v241, v236, v513);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v517);
      sub_10006257C((uint64_t)v517);
      *(_WORD *)(v240 + 22) = 2082;
      uint64_t v514 = *((void *)&v518[30] + 1);
      char v515 = v518[31];
      sub_100044014(&qword_1003EE048);
      uint64_t v242 = String.init<A>(describing:)();
      uint64_t v514 = sub_100037004(v242, v243, v513);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v238, v239, "%{public}s fence with invalid radius: %{public}s, radius: %{public}s", (uint8_t *)v240, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v244 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v244 - 8) + 8))(v508, v244);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(void, uint64_t))(v509 + 8))(v481, v510);
    }
    else
    {

      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v517);
      sub_10006257C((uint64_t)v517);
      uint64_t v259 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v259 - 8) + 8))(v508, v259);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(uint64_t, uint64_t))(v509 + 8))(v228, v510);
    }
LABEL_143:
    (*(void (**)(unsigned char *, uint64_t))(v487 + 8))(v484, v486);
    (*(void (**)(unsigned char *, uint64_t))(v496 + 8))(v495, v497);
    uint64_t v260 = *(void (**)(unsigned char *, uint64_t))(v502 + 8);
    uint64_t v261 = v501;
    v260(v499, v501);
    v260(v503, v261);
    (*(void (**)(unsigned char *, uint64_t))(v506 + 8))(v504, v507);
    uint64_t v8 = v488;
    goto LABEL_148;
  }
  uint64_t v246 = v500;
  if (*v442 & 1) != 0 || (v442[32])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v247 = v510;
    uint64_t v248 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v249 = v509;
    uint64_t v250 = v480;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v480, v248, v247);
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v518);
    uint64_t v251 = Logger.logObject.getter();
    os_log_type_t v252 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v251, v252))
    {
      uint64_t v253 = swift_slowAlloc();
      *(void *)v517 = swift_slowAlloc();
      *(_DWORD *)uint64_t v253 = 136446466;
      v516[0] = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v253 + 12) = 2082;
      if (*(void *)&v518[23]) {
        uint64_t v254 = *((void *)&v518[22] + 1);
      }
      else {
        uint64_t v254 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v518[23]) {
        unint64_t v255 = *(void *)&v518[23];
      }
      else {
        unint64_t v255 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v516[0] = sub_100037004(v254, v255, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v251, v252, "%{public}s fence with invalid coordinates: %{public}s", (uint8_t *)v253, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v256 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v256 - 8) + 8))(v508, v256);
      sub_10000A520(v500, &qword_1003EE290);
      (*(void (**)(void, uint64_t))(v509 + 8))(v480, v510);
      (*(void (**)(unsigned char *, uint64_t))(v487 + 8))(v484, v486);
      (*(void (**)(unsigned char *, uint64_t))(v496 + 8))(v495, v497);
      v257 = *(void (**)(unsigned char *, uint64_t))(v502 + 8);
      uint64_t v258 = v501;
      v257(v499, v501);
      v257(v503, v258);
      goto LABEL_147;
    }

    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v518);
    uint64_t v262 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v262 - 8) + 8))(v508, v262);
    sub_10000A520(v246, &qword_1003EE290);
    (*(void (**)(uint64_t, uint64_t))(v249 + 8))(v250, v247);
    (*(void (**)(unsigned char *, uint64_t))(v487 + 8))(v484, v486);
    goto LABEL_145;
  }
  *(void *)&long long v490 = *(void *)&v520[416];
  uint64_t v267 = *(void *)&v520[432];
  *(void *)&long long v491 = *(void *)&v520[448];
  uint64_t v268 = *(void *)&v520[440];
  if (!*(void *)&v520[440])
  {
    v498 = *(unsigned char **)&v520[488];
    v489 = (char *)&v518[26] + 8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v285 = v510;
    uint64_t v286 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v509 + 16))(v473, v286, v285);
    long long v479 = *(_OWORD *)&v520[32];
    long long v480 = *(_OWORD *)&v520[16];
    long long v477 = *(_OWORD *)&v520[64];
    long long v478 = *(_OWORD *)&v520[48];
    long long v475 = *(_OWORD *)&v520[96];
    long long v476 = *(_OWORD *)&v520[80];
    *(void *)&long long v474 = *(void *)&v520[112];
    uint64_t v472 = *(void *)&v520[120];
    sub_100013B50((uint64_t)&v520[128], (uint64_t)v517, &qword_1003ECD28);
    uint64_t v287 = *(void *)&v520[360];
    unint64_t v288 = *(void *)&v520[368];
    LODWORD(v471) = v520[376];
    long long v470 = *(_OWORD *)&v520[384];
    uint64_t v289 = *(void *)&v520[400];
    uint64_t v290 = *(void *)&v520[408];
    LODWORD(v482) = v520[457];
    long long v481 = *(_OWORD *)&v520[464];
    long long v505 = *(_OWORD *)&v520[504];
    long long v493 = *(_OWORD *)&v520[536];
    long long v494 = *(_OWORD *)&v520[520];
    long long v492 = *(_OWORD *)&v520[552];
    uint64_t v291 = *(void *)&v520[480];
    *(void *)&long long v485 = *(void *)&v520[568];
    LODWORD(v483) = v442[152];
    *(void *)&v518[0] = v202;
    *((void *)&v518[0] + 1) = v203;
    v518[1] = v480;
    v518[2] = v479;
    v518[3] = v478;
    v518[4] = v477;
    v518[5] = v476;
    v518[6] = v475;
    *(void *)&v518[7] = v474;
    *((void *)&v518[7] + 1) = v472;
    sub_100013B50((uint64_t)v517, (uint64_t)&v518[8], &qword_1003ECD28);
    *(void *)&long long v480 = v287;
    *((void *)&v518[22] + 1) = v287;
    unint64_t v292 = v288;
    *(void *)&v518[23] = v288;
    BYTE8(v518[23]) = v471;
    v518[24] = v470;
    *(void *)&v518[25] = v289;
    *((void *)&v518[25] + 1) = v290;
    v293 = v489;
    unsigned char *v489 = 0;
    *(void *)&v518[26] = v490;
    v518[27] = (unint64_t)v267;
    *(void *)&v518[28] = v491;
    v293[32] = 0;
    BYTE9(v518[28]) = v482;
    v518[29] = v481;
    v294 = v473;
    *(void *)&v518[30] = v291;
    *((void *)&v518[30] + 1) = v498;
    v293[72] = 0;
    *(_OWORD *)((char *)&v518[31] + 8) = v505;
    *(_OWORD *)((char *)&v518[32] + 8) = v494;
    *(_OWORD *)((char *)&v518[33] + 8) = v493;
    *(_OWORD *)((char *)&v518[34] + 8) = v492;
    *((void *)&v518[35] + 1) = v485;
    v293[152] = v483;
    sub_1000621F0((uint64_t)v518);
    v295 = Logger.logObject.getter();
    os_log_type_t v296 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v295, v296))
    {
      uint64_t v297 = swift_slowAlloc();
      v516[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v297 = 136446466;
      uint64_t v514 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, v516);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v297 + 12) = 2082;
      if (v288) {
        uint64_t v298 = v480;
      }
      else {
        uint64_t v298 = 0x3E6C696E3CLL;
      }
      if (!v288) {
        unint64_t v292 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v514 = sub_100037004(v298, v292, v516);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v295, v296, "%{public}s fence with nil locationType: %{public}s", (uint8_t *)v297, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
    }
    uint64_t v302 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v302 - 8) + 8))(v508, v302);
    sub_10000A520(v500, &qword_1003EE290);
    (*(void (**)(unsigned char *, uint64_t))(v509 + 8))(v294, v510);
    goto LABEL_143;
  }
  swift_bridgeObjectRetain();
  v269 = v461;
  sub_100164D24(v267, v268, (uint64_t)v461);
  uint64_t v270 = v474;
  uint64_t v271 = v475;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, void))(v474 + 48))(v269, 1, v475) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520((uint64_t)v269, &qword_1003F0360);
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v272 = v510;
    uint64_t v273 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v274 = v509;
    uint64_t v275 = v457;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v457, v273, v272);
    memcpy(v517, v520, sizeof(v517));
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v517);
    sub_1000621F0((uint64_t)v518);
    v276 = Logger.logObject.getter();
    os_log_type_t v277 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v276, v277))
    {

      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v517);
      sub_10006257C((uint64_t)v517);
      uint64_t v303 = type metadata accessor for Account();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v303 - 8) + 8))(v508, v303);
      sub_10000A520(v246, &qword_1003EE290);
      (*(void (**)(uint64_t, uint64_t))(v274 + 8))(v275, v272);
      (*(void (**)(unsigned char *, uint64_t))(v487 + 8))(v484, v486);
      (*(void (**)(unsigned char *, uint64_t))(v496 + 8))(v495, v497);
      goto LABEL_146;
    }
    uint64_t v278 = swift_slowAlloc();
    v516[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v278 = 136446722;
    uint64_t v514 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, v516);
    uint64_t v195 = v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v278 + 12) = 2082;
    if (*(void *)&v517[368]) {
      uint64_t v279 = *(void *)&v517[360];
    }
    else {
      uint64_t v279 = 0x3E6C696E3CLL;
    }
    if (*(void *)&v517[368]) {
      unint64_t v280 = *(void *)&v517[368];
    }
    else {
      unint64_t v280 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v514 = sub_100037004(v279, v280, v516);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006257C((uint64_t)v517);
    sub_10006257C((uint64_t)v517);
    *(_WORD *)(v278 + 22) = 2082;
    if (*((void *)&v518[27] + 1)) {
      uint64_t v281 = *(void *)&v518[27];
    }
    else {
      uint64_t v281 = 0x3E6C696E3CLL;
    }
    if (*((void *)&v518[27] + 1)) {
      unint64_t v282 = *((void *)&v518[27] + 1);
    }
    else {
      unint64_t v282 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v283 = v281;
    uint64_t v8 = v488;
    uint64_t v514 = sub_100037004(v283, v282, v516);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006257C((uint64_t)v518);
    sub_10006257C((uint64_t)v518);
    _os_log_impl((void *)&_mh_execute_header, v276, v277, "%{public}s fence with invalid source: %{public}s, locationType: %{public}s", (uint8_t *)v278, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v284 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v284 - 8) + 8))(v508, v284);
    sub_10000A520(v500, &qword_1003EE290);
    (*(void (**)(void, uint64_t))(v509 + 8))(v457, v510);
    (*(void (**)(unsigned char *, uint64_t))(v487 + 8))(v484, v486);
LABEL_116:
    (*(void (**)(unsigned char *, uint64_t))(v496 + 8))(v495, v497);
LABEL_117:
    char v222 = *(void (**)(unsigned char *, uint64_t))(v195 + 8);
    uint64_t v223 = v501;
    v222(v499, v501);
    v222(v503, v223);
LABEL_147:
    (*(void (**)(unsigned char *, uint64_t))(v506 + 8))(v504, v507);
    goto LABEL_148;
  }
  v489 = (char *)&v518[26] + 8;
  CLLocationDegrees v299 = *(double *)&v490;
  CLLocationDegrees v300 = *(double *)&v491;
  v301 = v467;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v270 + 32))(v467, v269, v271);
  CLLocationCoordinate2DMake(v299, v300);
  (*(void (**)(void, unsigned char *, uint64_t))(v270 + 16))(v447, v301, v271);
  Fence.MonitorRegion.init(center:radius:source:)();
  *(void *)&long long v491 = &v520[128];
  sub_100013B50((uint64_t)&v520[128], (uint64_t)&v514, &qword_1003ECD28);
  sub_100013B50((uint64_t)&v514, (uint64_t)v516, &qword_1003ECD28);
  if (sub_10006289C((uint64_t)v516) != 1)
  {
    *(void *)&long long v490 = v516[9];
    sub_100013B50((uint64_t)&v514, (uint64_t)v518, &qword_1003ECD28);
    *(void *)&long long v485 = *(void *)&v518[0];
    *(void *)&long long v483 = *(void *)&v518[1];
    *(void *)&long long v482 = *((void *)&v518[10] + 1);
    *(void *)&long long v481 = *((void *)&v518[11] + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v304 = v470;
  uint64_t v414 = 0;
  long long v413 = 0u;
  long long v412 = 0u;
  PlaceMark.init(locality:administrativeArea:country:stateCode:streetAddress:streetName:formattedAddressLines:formattedAddressLinesWithoutCountry:coarseAddress:poiAddress:smallAddress:mediumAddress:largeAddress:)();
  if (*(void *)&v520[80])
  {
    uint64_t v305 = swift_bridgeObjectRetain();
    v306 = sub_10012E360(v305);
    swift_bridgeObjectRelease();
  }
  else
  {
    v306 = &_swiftEmptyArrayStorage;
  }
  if (*(void *)&v520[464])
  {
    uint64_t v307 = swift_bridgeObjectRetain();
    v308 = sub_10012E360(v307);
    swift_bridgeObjectRelease();
  }
  else
  {
    v308 = &_swiftEmptyArrayStorage;
  }
  uint64_t v309 = v505;
  uint64_t v310 = *(void *)&v520[120];
  if (*(void *)&v520[120])
  {
    uint64_t v311 = *(void *)&v520[112];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v312 = sub_1001470F8(v309, v311, v310);
    uint64_t v309 = v505;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v312 = (char *)&_swiftEmptyArrayStorage;
  }
  if (*(void *)&v520[104])
  {
    swift_bridgeObjectRetain();
    uint64_t v313 = swift_bridgeObjectRetain();
    v314 = sub_10014744C(v313, v309);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v314 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(void *)&v518[0] = v306;
  sub_10012D458((uint64_t)v308);
  sub_10012D458((uint64_t)v314);
  sub_10012D458((uint64_t)v312);
  sub_1001491BC(&qword_1003F0378, (void (*)(uint64_t))&type metadata accessor for PersonHandle);
  uint64_t v315 = Array<A>.uniqued()();
  swift_bridgeObjectRelease();
  *(void *)&long long v505 = v315;
  if (!*(void *)(v315 + 16))
  {
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v316 = v510;
    uint64_t v317 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v318 = v509;
    uint64_t v319 = v446;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v446, v317, v316);
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v518);
    sub_1000621F0((uint64_t)v518);
    v320 = Logger.logObject.getter();
    os_log_type_t v321 = static os_log_type_t.error.getter();
    int v322 = v321;
    if (os_log_type_enabled(v320, v321))
    {
      uint64_t v323 = swift_slowAlloc();
      *(void *)&long long v490 = swift_slowAlloc();
      *(void *)v517 = v490;
      *(_DWORD *)uint64_t v323 = 136446466;
      v513[0] = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v323 + 12) = 2082;
      if (*(void *)&v518[23]) {
        uint64_t v324 = *((void *)&v518[22] + 1);
      }
      else {
        uint64_t v324 = 0x3E6C696E3CLL;
      }
      LODWORD(v485) = v322;
      if (*(void *)&v518[23]) {
        unint64_t v325 = *(void *)&v518[23];
      }
      else {
        unint64_t v325 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v513[0] = sub_100037004(v324, v325, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v320, (os_log_type_t)v485, "%{public}s fence with no 'others': %{public}s", (uint8_t *)v323, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(void, uint64_t))(v509 + 8))(v446, v510);
    }
    else
    {
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);

      (*(void (**)(uint64_t, uint64_t))(v318 + 8))(v319, v316);
    }
  }
  Account.icloudIdentifier.getter();
  PersonHandle.init(id:)();
  uint64_t v326 = *(void *)(v505 + 16);
  if (v326)
  {
    uint64_t v327 = v505 + ((*(unsigned __int8 *)(v460 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v460 + 80));
    uint64_t v328 = *(void *)(v460 + 72);
    swift_bridgeObjectRetain();
    while ((static PersonHandle.== infix(_:_:)() & 1) == 0)
    {
      v327 += v328;
      if (!--v326)
      {
        swift_bridgeObjectRelease();
        goto LABEL_223;
      }
    }
    swift_bridgeObjectRelease();
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v329 = v510;
    uint64_t v330 = sub_100044058(v510, (uint64_t)qword_1003F0310);
    unint64_t v331 = v509;
    uint64_t v332 = v444;
    (*(void (**)(void, uint64_t, uint64_t))(v509 + 16))(v444, v330, v329);
    memcpy(v518, v520, 0x241uLL);
    sub_1000621F0((uint64_t)v518);
    sub_1000621F0((uint64_t)v518);
    v333 = Logger.logObject.getter();
    os_log_type_t v334 = static os_log_type_t.error.getter();
    int v335 = v334;
    if (os_log_type_enabled(v333, v334))
    {
      uint64_t v336 = swift_slowAlloc();
      *(void *)&long long v490 = swift_slowAlloc();
      *(void *)v517 = v490;
      *(_DWORD *)uint64_t v336 = 136446466;
      v513[0] = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, (uint64_t *)v517);
      LODWORD(v485) = v335;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v336 + 12) = 2082;
      if (*(void *)&v518[23]) {
        uint64_t v337 = *((void *)&v518[22] + 1);
      }
      else {
        uint64_t v337 = 0x3E6C696E3CLL;
      }
      if (*(void *)&v518[23]) {
        unint64_t v338 = *(void *)&v518[23];
      }
      else {
        unint64_t v338 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v513[0] = sub_100037004(v337, v338, (uint64_t *)v517);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v333, (os_log_type_t)v485, "%{public}s 'others' contain user's own handle: %{public}s", (uint8_t *)v336, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v339 = (*(uint64_t (**)(void, uint64_t))(v509 + 8))(v444, v510);
    }
    else
    {
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);

      uint64_t v339 = (*(uint64_t (**)(uint64_t, uint64_t))(v331 + 8))(v332, v329);
    }
    __chkstk_darwin(v339);
    *((void *)&v413 + 1) = v304;
    *(void *)&long long v505 = sub_10002BD24((uint64_t (*)(void))sub_100148778, (uint64_t)&v412 + 8, v505, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (void (*)(BOOL, uint64_t, uint64_t))sub_100245DA8);
  }
LABEL_223:
  uint64_t v340 = v493;
  uint64_t v341 = v448;
  sub_100013210(v246, v448, &qword_1003EE290);
  int v342 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v494)(v341, 1, v340);
  v343 = (char *)v442;
  if (v342 == 1)
  {
    sub_10000A520(v341, &qword_1003EE290);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v458 + 56))(v478, 1, 1, v459);
  }
  else
  {
    sub_100013210(v341 + *(int *)(v340 + 36), v478, (uint64_t *)&unk_1003EE800);
    sub_100148A8C(v341, (uint64_t (*)(void))type metadata accessor for FenceRecord);
  }
  unint64_t v344 = v509;
  uint64_t v345 = v510;
  v498 = *(unsigned char **)&v520[568];
  if (v343[152] == 1)
  {
    if (qword_1003EC058 != -1) {
      swift_once();
    }
    uint64_t v346 = sub_100044058(v345, (uint64_t)qword_1003F0310);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v344 + 16))(v449, v346, v345);
    long long v490 = *(_OWORD *)v520;
    long long v485 = *(_OWORD *)&v520[16];
    long long v482 = *(_OWORD *)&v520[48];
    long long v483 = *(_OWORD *)&v520[32];
    long long v480 = *(_OWORD *)&v520[80];
    long long v481 = *(_OWORD *)&v520[64];
    long long v494 = *(_OWORD *)&v520[96];
    uint64_t v347 = *(void *)&v520[112];
    v473 = *(unsigned char **)&v520[120];
    sub_100013B50(v491, (uint64_t)v517, &qword_1003ECD28);
    uint64_t v348 = *(void *)&v520[360];
    uint64_t v349 = *(void *)&v520[368];
    LODWORD(v461) = v520[376];
    long long v457 = *(_OWORD *)&v520[384];
    *(void *)&long long v493 = *(void *)&v520[416];
    char v350 = *v343;
    long long v447 = *(_OWORD *)&v520[432];
    long long v448 = *(_OWORD *)&v520[400];
    *(void *)&long long v446 = *(void *)&v520[448];
    char v351 = v343[32];
    LODWORD(v444) = v520[457];
    long long v440 = *(_OWORD *)&v520[464];
    *(void *)&long long v439 = *(void *)&v520[480];
    uint64_t v352 = *(void *)&v520[488];
    LODWORD(v438) = v343[72];
    long long v436 = *(_OWORD *)&v520[520];
    long long v437 = *(_OWORD *)&v520[504];
    long long v435 = *(_OWORD *)&v520[536];
    uint64_t v353 = *(void *)&v520[552];
    uint64_t v354 = *(void *)&v520[560];
    v518[0] = v490;
    v518[1] = v485;
    v518[2] = v483;
    v518[3] = v482;
    v518[4] = v481;
    v518[5] = v480;
    *(void *)&v518[7] = v347;
    *((void *)&v518[7] + 1) = v473;
    v518[6] = v494;
    sub_100013B50((uint64_t)v517, (uint64_t)&v518[8], &qword_1003ECD28);
    *(void *)&long long v490 = v348;
    *((void *)&v518[22] + 1) = v348;
    *(void *)&long long v494 = v349;
    *(void *)&v518[23] = v349;
    BYTE8(v518[23]) = (_BYTE)v461;
    v518[24] = v457;
    v518[25] = v448;
    v355 = v489;
    unsigned char *v489 = v350;
    v518[27] = v447;
    *(void *)&v518[26] = v493;
    *(void *)&v518[28] = v446;
    v355[32] = v351;
    BYTE9(v518[28]) = v444;
    v518[29] = v440;
    *(void *)&v518[30] = v439;
    *((void *)&v518[30] + 1) = v352;
    v355[72] = v438;
    *(_OWORD *)((char *)&v518[31] + 8) = v437;
    *(_OWORD *)((char *)&v518[32] + 8) = v436;
    *(_OWORD *)((char *)&v518[33] + 8) = v435;
    *((void *)&v518[34] + 1) = v353;
    *(void *)&v518[35] = v354;
    v356 = v449;
    *((void *)&v518[35] + 1) = v498;
    v355[152] = 1;
    sub_1000621F0((uint64_t)v518);
    sub_1000621F0((uint64_t)v518);
    v357 = Logger.logObject.getter();
    os_log_type_t v358 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v357, v358))
    {
      uint64_t v359 = swift_slowAlloc();
      v513[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v359 = 136446466;
      uint64_t v512 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, v513);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v359 + 12) = 2082;
      if ((void)v494) {
        uint64_t v360 = v490;
      }
      else {
        uint64_t v360 = 0x3E6C696E3CLL;
      }
      if ((void)v494) {
        unint64_t v361 = v494;
      }
      else {
        unint64_t v361 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v512 = sub_100037004(v360, v361, v513);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
      _os_log_impl((void *)&_mh_execute_header, v357, v358, "%{public}s fence with missing updateTimestamp: %{public}s", (uint8_t *)v359, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10006257C((uint64_t)v518);
      sub_10006257C((uint64_t)v518);
    }

    unint64_t v362 = v509;
    uint64_t v345 = v510;
    (*(void (**)(unsigned char *, uint64_t))(v509 + 8))(v356, v510);
    unint64_t v344 = v362;
    v498 = 0;
  }
  unint64_t v363 = *(void *)&v520[40];
  if (*(void *)&v520[40])
  {
    uint64_t v364 = *(void *)&v520[32];
    swift_bridgeObjectRetain();
    uint64_t v365 = v479;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v366 = type metadata accessor for UUID();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v366 - 8) + 48))(v365, 1, v366) == 1)
    {
      uint64_t v367 = HIBYTE(v363) & 0xF;
      if ((v363 & 0x2000000000000000) == 0) {
        uint64_t v367 = v364 & 0xFFFFFFFFFFFFLL;
      }
      if (v367)
      {
        if (qword_1003EC058 != -1) {
          swift_once();
        }
        uint64_t v368 = sub_100044058(v345, (uint64_t)qword_1003F0310);
        (*(void (**)(void, uint64_t, uint64_t))(v344 + 16))(v445, v368, v345);
        long long v434 = *(_OWORD *)v520;
        uint64_t v369 = *(void *)&v520[16];
        uint64_t v370 = *(void *)&v520[24];
        long long v490 = *(_OWORD *)&v520[48];
        long long v485 = *(_OWORD *)&v520[64];
        long long v482 = *(_OWORD *)&v520[96];
        long long v483 = *(_OWORD *)&v520[80];
        *(void *)&long long v494 = *(void *)&v520[112];
        *(void *)&long long v493 = *(void *)&v520[120];
        sub_100013B50(v491, (uint64_t)v513, &qword_1003ECD28);
        uint64_t v371 = *(void *)&v520[360];
        uint64_t v372 = *(void *)&v520[368];
        char v373 = v520[376];
        long long v480 = *(_OWORD *)&v520[400];
        long long v481 = *(_OWORD *)&v520[384];
        v473 = *(unsigned char **)&v520[416];
        LODWORD(v461) = *v442;
        long long v457 = *(_OWORD *)&v520[432];
        v449 = *(unsigned char **)&v520[448];
        LODWORD(v448) = v442[32];
        LODWORD(v447) = v520[457];
        long long v446 = *(_OWORD *)&v520[464];
        *(void *)&long long v444 = *(void *)&v520[480];
        *(void *)&long long v440 = *(void *)&v520[488];
        LODWORD(v439) = v442[72];
        long long v437 = *(_OWORD *)&v520[520];
        long long v438 = *(_OWORD *)&v520[504];
        long long v435 = *(_OWORD *)&v520[552];
        long long v436 = *(_OWORD *)&v520[536];
        uint64_t v374 = *(void *)&v520[568];
        unsigned __int8 v375 = v442[152];
        *(_OWORD *)v517 = v434;
        *(void *)&v517[16] = v369;
        *(void *)&v517[24] = v370;
        *(void *)&v517[32] = v364;
        *(void *)&v517[40] = v363;
        *(_OWORD *)&v517[48] = v490;
        *(_OWORD *)&v517[64] = v485;
        *(_OWORD *)&v517[80] = v483;
        *(_OWORD *)&v517[96] = v482;
        *(void *)&v517[112] = v494;
        *(void *)&v517[120] = v493;
        sub_100013B50((uint64_t)v513, (uint64_t)&v517[128], &qword_1003ECD28);
        *(void *)&long long v493 = v371;
        *(void *)&v517[360] = v371;
        *(void *)&long long v494 = v372;
        *(void *)&v517[368] = v372;
        v517[376] = v373;
        *(_OWORD *)&v517[384] = v481;
        *(_OWORD *)&v517[400] = v480;
        *(void *)&v517[416] = v473;
        v376 = (unsigned char *)v492;
        *(unsigned char *)long long v492 = (_BYTE)v461;
        *(_OWORD *)&v517[432] = v457;
        *(void *)&v517[448] = v449;
        v376[32] = v448;
        v517[457] = v447;
        *(_OWORD *)&v517[464] = v446;
        *(void *)&v517[480] = v444;
        *(void *)&v517[488] = v440;
        v376[72] = v439;
        *(_OWORD *)&v517[504] = v438;
        *(_OWORD *)&v517[520] = v437;
        *(_OWORD *)&v517[536] = v436;
        *(_OWORD *)&v517[552] = v435;
        *(void *)&v517[568] = v374;
        uint64_t v377 = v445;
        v376[152] = v375;
        memcpy(v518, v520, 0x241uLL);
        sub_1000621F0((uint64_t)v517);
        sub_1000621F0((uint64_t)v518);
        sub_1000621F0((uint64_t)v517);
        sub_1000621F0((uint64_t)v518);
        v378 = Logger.logObject.getter();
        os_log_type_t v379 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v378, v379))
        {
          uint64_t v380 = swift_slowAlloc();
          *(void *)&long long v492 = swift_slowAlloc();
          uint64_t v512 = v492;
          *(_DWORD *)uint64_t v380 = 136446722;
          uint64_t v511 = sub_100037004(0xD00000000000002ELL, 0x8000000100376090, &v512);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v380 + 12) = 2082;
          if ((void)v494) {
            uint64_t v381 = v493;
          }
          else {
            uint64_t v381 = 0x3E6C696E3CLL;
          }
          if ((void)v494) {
            unint64_t v382 = v494;
          }
          else {
            unint64_t v382 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v511 = sub_100037004(v381, v382, &v512);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006257C((uint64_t)v517);
          sub_10006257C((uint64_t)v517);
          *(_WORD *)(v380 + 22) = 2082;
          if (*((void *)&v518[2] + 1)) {
            uint64_t v383 = *(void *)&v518[2];
          }
          else {
            uint64_t v383 = 0x3E6C696E3CLL;
          }
          if (*((void *)&v518[2] + 1)) {
            unint64_t v384 = *((void *)&v518[2] + 1);
          }
          else {
            unint64_t v384 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v511 = sub_100037004(v383, v384, &v512);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006257C((uint64_t)v518);
          sub_10006257C((uint64_t)v518);
          _os_log_impl((void *)&_mh_execute_header, v378, v379, "%{public}s fence with invalid ckRecordName: %{public}s, ckRecordName: %{public}s", (uint8_t *)v380, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(void, uint64_t))(v509 + 8))(v445, v510);
        }
        else
        {
          sub_10006257C((uint64_t)v517);
          sub_10006257C((uint64_t)v517);
          sub_10006257C((uint64_t)v518);
          sub_10006257C((uint64_t)v518);

          (*(void (**)(uint64_t, uint64_t))(v509 + 8))(v377, v510);
        }
      }
    }
  }
  else
  {
    uint64_t v385 = type metadata accessor for UUID();
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v385 - 8) + 56))(v479, 1, 1, v385);
  }
  uint64_t v510 = *(void *)&v520[48];
  unint64_t v386 = *(void *)&v520[56];
  long long v438 = *(_OWORD *)&v520[16];
  long long v439 = *(_OWORD *)v520;
  uint64_t v387 = *(void *)&v520[32];
  uint64_t v388 = *(void *)&v520[40];
  long long v492 = *(_OWORD *)&v520[64];
  long long v490 = *(_OWORD *)&v520[80];
  long long v485 = *(_OWORD *)&v520[96];
  unint64_t v509 = *(void *)&v520[112];
  *(void *)&long long v494 = *(void *)&v520[120];
  sub_100013B50(v491, (uint64_t)v517, &qword_1003ECD28);
  uint64_t v389 = *(void *)&v520[360];
  uint64_t v390 = *(void *)&v520[368];
  LODWORD(v491) = v520[376];
  long long v482 = *(_OWORD *)&v520[400];
  long long v483 = *(_OWORD *)&v520[384];
  *(void *)&long long v493 = *(void *)&v520[416];
  LODWORD(v481) = *v442;
  long long v480 = *(_OWORD *)&v520[432];
  v473 = *(unsigned char **)&v520[448];
  unsigned __int8 v391 = v442[32];
  LODWORD(v461) = v520[457];
  long long v457 = *(_OWORD *)&v520[464];
  v449 = *(unsigned char **)&v520[480];
  *(void *)&long long v448 = *(void *)&v520[488];
  LODWORD(v447) = v442[72];
  long long v445 = *(_OWORD *)&v520[520];
  long long v446 = *(_OWORD *)&v520[504];
  long long v444 = *(_OWORD *)&v520[536];
  long long v440 = *(_OWORD *)&v520[552];
  uint64_t v392 = *(void *)&v520[568];
  unsigned __int8 v393 = v442[152];
  v518[0] = v439;
  v518[1] = v438;
  *(void *)&v518[2] = v387;
  *((void *)&v518[2] + 1) = v388;
  uint64_t v394 = v510;
  *(void *)&v518[3] = v510;
  *((void *)&v518[3] + 1) = v386;
  v518[4] = v492;
  v518[5] = v490;
  v518[6] = v485;
  *(void *)&v518[7] = v509;
  *((void *)&v518[7] + 1) = v494;
  sub_100013B50((uint64_t)v517, (uint64_t)&v518[8], &qword_1003ECD28);
  *((void *)&v518[22] + 1) = v389;
  *(void *)&v518[23] = v390;
  BYTE8(v518[23]) = v491;
  v518[24] = v483;
  v518[25] = v482;
  v395 = v489;
  unsigned char *v489 = v481;
  v518[27] = v480;
  *(void *)&v518[26] = v493;
  *(void *)&v518[28] = v473;
  v395[32] = v391;
  BYTE9(v518[28]) = (_BYTE)v461;
  v518[29] = v457;
  *(void *)&v518[30] = v449;
  *((void *)&v518[30] + 1) = v448;
  v395[72] = v447;
  *(_OWORD *)((char *)&v518[31] + 8) = v446;
  *(_OWORD *)((char *)&v518[32] + 8) = v445;
  *(_OWORD *)((char *)&v518[33] + 8) = v444;
  *(_OWORD *)((char *)&v518[34] + 8) = v440;
  *((void *)&v518[35] + 1) = v392;
  v395[152] = v393;
  swift_bridgeObjectRetain();
  sub_10006257C((uint64_t)v518);
  if (v386)
  {
    uint64_t v396 = HIBYTE(v386) & 0xF;
    if ((v386 & 0x2000000000000000) == 0) {
      uint64_t v396 = v394 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v397 = v507;
    if (v396)
    {
      unint64_t v509 = v386;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v510 = 0;
      unint64_t v509 = 0;
    }
  }
  else
  {
    uint64_t v510 = 0;
    unint64_t v509 = 0;
    uint64_t v397 = v507;
  }
  uint64_t v398 = v471;
  Date.init(timeIntervalSince1970:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v506 + 16))(v462, v504, v397);
  v399 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v502 + 16);
  uint64_t v400 = v501;
  v399(v463, v503, v501);
  v399(v464, v499, v400);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v496 + 16))(v465, v495, v497);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v487 + 16))(v466, v484, v486);
  uint64_t v401 = v452;
  (*(void (**)(unsigned char *, void, uint64_t))(v452 + 16))(v450, v476, v468);
  uint64_t v402 = v454;
  (*(void (**)(unsigned char *, void, void))(v454 + 16))(v451, v477, v469);
  sub_100013210(v478, (uint64_t)v453, (uint64_t *)&unk_1003EE800);
  sub_100013210(v479, (uint64_t)v455, &qword_1003ECFB8);
  uint64_t v403 = v458;
  v404 = v456;
  uint64_t v405 = v398;
  uint64_t v406 = v459;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v458 + 16))(v456, v405, v459);
  *((void *)&v413 + 1) = v404;
  *(void *)&long long v413 = v509;
  *((void *)&v412 + 1) = v510;
  uint64_t v407 = v488;
  Fence.init(id:label:createdBy:finder:variant:acceptanceStatus:region:placemark:others:muteEndDate:ckRecordIdentifier:ckRecordZoneOwnerName:updatedAt:)();
  uint64_t v408 = type metadata accessor for Account();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v408 - 8) + 8))(v508, v408);
  sub_10000A520(v500, &qword_1003EE290);
  (*(void (**)(void, uint64_t))(v403 + 8))(v471, v406);
  sub_10000A520(v478, (uint64_t *)&unk_1003EE800);
  (*(void (**)(void, void))(v402 + 8))(v477, v469);
  (*(void (**)(void, uint64_t))(v401 + 8))(v476, v468);
  (*(void (**)(unsigned char *, void))(v474 + 8))(v467, v475);
  (*(void (**)(unsigned char *, uint64_t))(v487 + 8))(v484, v486);
  (*(void (**)(unsigned char *, uint64_t))(v496 + 8))(v495, v497);
  v409 = *(void (**)(unsigned char *, uint64_t))(v502 + 8);
  uint64_t v410 = v501;
  v409(v499, v501);
  v409(v503, v410);
  (*(void (**)(unsigned char *, uint64_t))(v506 + 8))(v504, v507);
  sub_10000A520(v479, &qword_1003ECFB8);
  (*(void (**)(void, uint64_t))(v460 + 8))(v470, v472);
  uint64_t v411 = type metadata accessor for Fence();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v411 - 8) + 56))(v407, 0, 1, v411);
}

uint64_t sub_10013BFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return _swift_task_switch(sub_10013BFEC, a6, 0);
}

uint64_t sub_10013BFEC()
{
  uint64_t v1 = v0[9].i64[1];
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100146B3C(v2, v1);
  v0[11].i64[0] = (uint64_t)v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[2];
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677A0;
  *(unsigned char *)(inited + 32) = 31;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = 0xD00000000000001FLL;
  *(void *)(inited + 48) = 0x80000001003760C0;
  *(unsigned char *)(inited + 80) = 34;
  *(void *)(inited + 112) = &type metadata for Int;
  *(void *)(inited + 120) = &off_1003DDA88;
  *(void *)(inited + 88) = v4;
  unint64_t v6 = sub_1001013D8(inited);
  uint64_t v7 = sub_100050320(3, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v12 = (int8x16_t *)swift_task_alloc();
  v0[11].i64[1] = (uint64_t)v12;
  v12->i64[0] = (uint64_t)v0;
  v12->i64[1] = (uint64_t)sub_10013C1C8;
  int8x16_t v13 = v0[10];
  v12[4] = vextq_s8(v13, v13, 8uLL);
  v12[3].i64[1] = (uint64_t)v3;
  return _swift_task_switch(sub_10013C2FC, v13.i64[0], 0);
}

uint64_t sub_10013C1C8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10013C2D8(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return _swift_task_switch(sub_10013C2FC, v2, 0);
}

uint64_t sub_10013C2FC()
{
  uint64_t v11 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[10] = sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  if (v4)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446722;
    v0[4] = sub_100037004(0xD000000000000027, 0x80000001003760E0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2050;
    v0[5] = *(void *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2050;
    v0[6] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s serverFencesMissingCK: %{public}ld, allFences: %{public}ld", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  void *v8 = v0;
  v8[1] = sub_10013C57C;
  return daemon.getter();
}

uint64_t sub_10013C57C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 96) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 104) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1001491BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1001491BC(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10013C758;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10013C758(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[9];
    uint64_t v5 = sub_10013CAE8;
  }
  else
  {
    uint64_t v6 = v3[9];
    swift_release();
    uint64_t v5 = sub_10013C880;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013C880()
{
  if (*(void *)(v0[7] + 16))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[16] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10013C95C;
    uint64_t v2 = v0[7];
    return sub_1000EB940(v2);
  }
  else
  {
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10013C95C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v4 = sub_10013CD20;
  }
  else {
    uint64_t v4 = sub_10013CA88;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10013CA88()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013CAE8()
{
  uint64_t v9 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[2] = sub_100037004(0xD000000000000027, 0x80000001003760E0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s failed: %{public}@", (uint8_t *)v3, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10013CD20()
{
  uint64_t v9 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[2] = sub_100037004(0xD000000000000027, 0x80000001003760E0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s failed: %{public}@", (uint8_t *)v3, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10013CF58@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v33 = a4;
  uint64_t v31 = a3;
  uint64_t v30 = type metadata accessor for Account();
  uint64_t v28 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003EE290);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v27 = (uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  int8x16_t v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  memcpy(v34, a1, 0x241uLL);
  uint64_t v16 = type metadata accessor for FenceRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v18(v15, 1, 1, v16);
  uint64_t v19 = v34[5];
  if (v34[5])
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v20 = v34[4];
      swift_bridgeObjectRetain();
      unint64_t v21 = sub_10003B888(v20, v19);
      if (v22)
      {
        sub_100148858(*(void *)(a2 + 56) + *(void *)(v17 + 72) * v21, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for FenceRecord);
        uint64_t v23 = v13;
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v23 = v13;
        uint64_t v24 = 1;
      }
      v18(v23, v24, 1, v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18(v13, 1, 1, v16);
    }
    sub_10000A520((uint64_t)v15, &qword_1003EE290);
    sub_100013B50((uint64_t)v13, (uint64_t)v15, &qword_1003EE290);
  }
  sub_100013210((uint64_t)v15, v27, &qword_1003EE290);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v29, v31, v30);
  sub_1000621F0((uint64_t)v34);
  swift_bridgeObjectRetain();
  sub_100136D04((uint64_t)v34);
  return sub_10000A520((uint64_t)v15, &qword_1003EE290);
}

uint64_t sub_10013D264()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_1003F0310);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_1003F0310);
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B708);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10013D32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Fence.Participant();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  uint64_t v13 = v12;
  uint64_t v14 = enum case for Fence.Participant.me(_:);
  if (v12 != enum case for Fence.Participant.me(_:))
  {
    if (v12 == enum case for Fence.Participant.other(_:))
    {
      if (a3)
      {
        if (a2 == 0x654D796669746F4ELL && a3 == 0xE800000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          goto LABEL_15;
        }
        if (a2 == 0x744F796669746F4ELL && a3 == 0xEC00000073726568
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(a4, v14, v8);
          goto LABEL_16;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
LABEL_18:
    uint64_t v15 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v15, 1, v8);
  }
  if (!a3) {
    goto LABEL_18;
  }
  if (a2 == 0x654D796669746F4ELL && a3 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_15:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(a4, v13, v8);
    goto LABEL_16;
  }
  if ((a2 != 0x744F796669746F4ELL || a3 != 0xEC00000073726568)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_18;
  }
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(a4, enum case for Fence.Participant.other(_:), v8);
LABEL_16:
  uint64_t v15 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v15, 1, v8);
}

BOOL sub_10013D640()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_10013D6D4@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v45 = a5;
  int v8 = a1;
  uint64_t v9 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Fence.Schedule();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Fence.Variant();
  uint64_t v16 = *(void *)(v44 - 8);
  uint64_t v17 = __chkstk_darwin(v44);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  int v43 = v8;
  if (v8 != 2)
  {
    uint64_t v23 = a4;
    if (a3)
    {
      uint64_t v24 = v22;
      uint64_t v42 = (char *)&v42 - v21;
      if (a2 == 0x656C756465686373 && a3 == 0xE900000000000064
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_100013B50(v23, (uint64_t)v11, &qword_1003EE810);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          uint64_t v25 = (uint64_t)v11;
LABEL_10:
          sub_10000A520(v25, &qword_1003EE810);
          goto LABEL_11;
        }
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v30(v15, v11, v12);
        uint64_t v31 = v42;
        v30(v42, v15, v12);
        uint64_t v28 = v44;
        (*(void (**)(char *, void, uint64_t))(v16 + 104))(v31, enum case for Fence.Variant.scheduled(_:), v44);
        uint64_t v32 = v31;
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      }
      else
      {
        if (a2 == 1953069157 && a3 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          sub_10000A520(v23, &qword_1003EE810);
          swift_bridgeObjectRelease();
          uint64_t v34 = enum case for Fence.Trigger.leaving(_:);
          uint64_t v35 = type metadata accessor for Fence.Trigger();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v20, v34, v35);
          uint64_t v36 = (unsigned int *)&enum case for Fence.Variant.recurring(_:);
          if (v43) {
            uint64_t v36 = (unsigned int *)&enum case for Fence.Variant.oneTime(_:);
          }
          uint64_t v28 = v44;
          (*(void (**)(char *, void, uint64_t))(v16 + 104))(v20, *v36, v44);
          uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
          uint64_t v37 = v42;
          v33(v42, v20, v28);
        }
        else
        {
          if (a2 == 0x7265746E65 && a3 == 0xE500000000000000)
          {
            swift_bridgeObjectRelease();
            sub_10000A520(v23, &qword_1003EE810);
          }
          else
          {
            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            sub_10000A520(v23, &qword_1003EE810);
            if ((v38 & 1) == 0) {
              goto LABEL_11;
            }
          }
          uint64_t v39 = enum case for Fence.Trigger.arriving(_:);
          uint64_t v40 = type metadata accessor for Fence.Trigger();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v24, v39, v40);
          uint64_t v41 = (unsigned int *)&enum case for Fence.Variant.recurring(_:);
          if (v43) {
            uint64_t v41 = (unsigned int *)&enum case for Fence.Variant.oneTime(_:);
          }
          uint64_t v28 = v44;
          (*(void (**)(char *, void, uint64_t))(v16 + 104))(v24, *v41, v44);
          uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
          uint64_t v37 = v42;
          v33(v42, v24, v28);
        }
        uint64_t v32 = v37;
      }
      uint64_t v27 = v45;
      v33(v45, v32, v28);
      uint64_t v26 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v27, v26, 1, v28);
    }
    uint64_t v25 = a4;
    goto LABEL_10;
  }
  sub_10000A520(a4, &qword_1003EE810);
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v26 = 1;
  uint64_t v28 = v44;
  uint64_t v27 = v45;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v27, v26, 1, v28);
}

uint64_t sub_10013DC78(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F03F0, (uint64_t (*)(void))&type metadata accessor for Handle, (uint64_t (*)(void))&type metadata accessor for Handle);
}

void *sub_10013DCAC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100044014(&qword_1003F03C0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 584);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[73 * v8 + 4]) {
          memmove(v12, a4 + 4, 584 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100146EF4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013DDD4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003ECFC0, (uint64_t (*)(void))&type metadata accessor for Destination, (uint64_t (*)(void))&type metadata accessor for Destination);
}

uint64_t sub_10013DE08(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100044014(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100148EA0(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_10013E088(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100044014(&qword_1003F03D8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100146FE8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013E1AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F03E8, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_10013E1E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100044014(&qword_1003F0468);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100148918(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013E2F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F03B0, type metadata accessor for FriendRecord, type metadata accessor for FriendRecord);
}

uint64_t sub_10013E324(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F0408, (uint64_t (*)(void))&type metadata accessor for LocatePriority, (uint64_t (*)(void))&type metadata accessor for LocatePriority);
}

uint64_t sub_10013E358(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100044014(&qword_1003F0438);
  uint64_t v10 = *(void *)(sub_100044014(&qword_1003F0440) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100044014(&qword_1003F0440) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100149058(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_10013E5C8(uint64_t a1)
{
  return sub_1002284D0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10013E5D0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013E610(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EFF48);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_39;
        }
        if (v15 >= v12)
        {
LABEL_32:
          swift_release();
          uint64_t v3 = v2;
          if (v35)
          {
            uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
            if (v34 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v9 = -1 << v34;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        unint64_t v21 = v9[v15];
        if (!v21)
        {
          int64_t v22 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_32;
          }
          unint64_t v21 = v9[v22];
          if (!v21)
          {
            while (1)
            {
              int64_t v15 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_32;
              }
              unint64_t v21 = v9[v15];
              ++v22;
              if (v21) {
                goto LABEL_19;
              }
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_19:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      unint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      uint64_t v26 = (long long *)(*(void *)(v5 + 56) + 40 * v19);
      if (v35)
      {
        sub_100022CC0(v26, (uint64_t)v36);
      }
      else
      {
        sub_100050C1C((uint64_t)v26, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v13 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v13 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = (void *)(*(void *)(v7 + 48) + 16 * v16);
      *unint64_t v17 = v25;
      v17[1] = v24;
      uint64_t result = sub_100022CC0(v36, *(void *)(v7 + 56) + 40 * v16);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013E904(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EFFC8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 48 * v17);
    if (v37)
    {
      sub_100058DA0(v25, v38);
    }
    else
    {
      sub_100058D68((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    int64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *int64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = (uint64_t)sub_100058DA0(v38, (_OWORD *)(*(void *)(v7 + 56) + 48 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013EC2C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EFFD8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 48 * v17);
    if (v37)
    {
      sub_100058CFC(v25, v38);
    }
    else
    {
      sub_100058CC4((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    int64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *int64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = (uint64_t)sub_100058CFC(v38, (_OWORD *)(*(void *)(v7 + 56) + 48 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013EF54(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EC800);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013F264(uint64_t a1, int a2)
{
  return sub_10013F2C4(a1, a2, (uint64_t (*)(void))&type metadata accessor for IDSStatus, &qword_1003F0010);
}

uint64_t sub_10013F284(uint64_t a1, int a2)
{
  return sub_10013FDF8(a1, a2, (uint64_t (*)(void))&type metadata accessor for FriendshipRequestStatus, &qword_1003EFFE8);
}

uint64_t sub_10013F2A4(uint64_t a1, int a2)
{
  return sub_10013F2C4(a1, a2, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFFF0);
}

uint64_t sub_10013F2C4(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  sub_100044014(a4);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  unint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    uint64_t v30 = v10;
    uint64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    int64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    *int64_t v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  unint64_t v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t sub_10013F6B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EFFB0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v32 = v2;
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v18 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v19 = v18 | (v12 << 6);
    goto LABEL_31;
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_43;
  }
  if (v20 >= v33)
  {
    swift_release();
    uint64_t v3 = v32;
    unint64_t v21 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_38:
      uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
      if (v30 >= 64) {
        bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v21 = -1 << v30;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v21 = (void *)(v5 + 64);
    unint64_t v22 = *(void *)(v34 + 8 * v20);
    ++v12;
    if (v22) {
      goto LABEL_30;
    }
    int64_t v12 = v20 + 1;
    if (v20 + 1 >= v33) {
      goto LABEL_35;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v12);
    if (v22)
    {
LABEL_30:
      unint64_t v10 = (v22 - 1) & v22;
      unint64_t v19 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
      char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v19);
      if (a2) {
        sub_100023434(v29, v35);
      }
      else {
        sub_1000370D8((uint64_t)v29, (uint64_t)v35);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v14) >> 6;
      while (++v16 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v16);
        if (v27 != -1)
        {
          unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
LABEL_8:
          *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
          sub_100023434(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v17));
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      JUMPOUT(0x10013FA6CLL);
    }
    int64_t v23 = v20 + 2;
    if (v23 < v33)
    {
      unint64_t v22 = *(void *)(v34 + 8 * v23);
      if (!v22)
      {
        while (1)
        {
          int64_t v12 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_44;
          }
          if (v12 >= v33) {
            goto LABEL_35;
          }
          unint64_t v22 = *(void *)(v34 + 8 * v12);
          ++v23;
          if (v22) {
            goto LABEL_30;
          }
        }
      }
      int64_t v12 = v23;
      goto LABEL_30;
    }
LABEL_35:
    swift_release();
    uint64_t v3 = v32;
    if (a2) {
      goto LABEL_38;
    }
  }
LABEL_42:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013FA88(uint64_t a1, char a2)
{
  return sub_10013FAA8(a1, a2, &qword_1003EFFF8, (void (*)(uint64_t, unsigned char *))sub_100023434);
}

uint64_t sub_10013FAA8(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, unsigned char *))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v4;
  sub_100044014(a3);
  char v39 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v38 = v8 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v8 + 64);
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    unint64_t v22 = (void *)(v8 + 64);
    unint64_t v23 = *(void *)(v38 + 8 * v21);
    ++v16;
    if (!v23)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v38 + 8 * v16);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v38 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v16 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v16 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v38 + 8 * v16);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v24;
      }
    }
LABEL_21:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_22:
    unint64_t v25 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v8 + 56) + 32 * v20;
    if (v39)
    {
      a4(v28, v40);
    }
    else
    {
      sub_1000370D8(v28, (uint64_t)v40);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v10 + 48) + 16 * v17);
    *unint64_t v18 = v27;
    v18[1] = v26;
    uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))a4)(v40, *(void *)(v10 + 56) + 32 * v17);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v8 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v36;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v10;
  return result;
}

uint64_t sub_10013FDD8(uint64_t a1, int a2)
{
  return sub_10013FDF8(a1, a2, (uint64_t (*)(void))&type metadata accessor for Location, &qword_1003EFEC0);
}

uint64_t sub_10013FDF8(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = a3(0);
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v45 - v9;
  uint64_t v10 = type metadata accessor for Handle();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  sub_100044014(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  int64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    uint64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    sub_1001491BC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  uint64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

uint64_t sub_1001402F4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for FriendshipAction();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Friend();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100044014(&qword_1003EFEE0);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  BOOL v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  int64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    unint64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_1001491BC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_1001407F0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FenceRecord();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100044014(&qword_1003EFF40);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  BOOL v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_100148A24(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    }
    else
    {
      sub_100148858(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for FenceRecord);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *uint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_100148A24((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100140BD0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100044014(&qword_1003EFF38);
  int v72 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  os_log_type_t v120 = v8;
  char v12 = *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v68 = (void *)(v9 + 64);
  uint64_t v14 = 1 << v12;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  uint64_t v66 = v2;
  int64_t v67 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v69 = v6 + 16;
  uint64_t v73 = v6 + 32;
  uint64_t v74 = &v121[16];
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v70 = v9;
  uint64_t v71 = v6;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v67) {
      break;
    }
    unint64_t v24 = v68;
    unint64_t v25 = v68[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v67) {
        goto LABEL_34;
      }
      unint64_t v25 = v68[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v67)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v66;
          if ((v72 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v68[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v67) {
              goto LABEL_34;
            }
            unint64_t v25 = v68[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = 584 * v22;
    int64_t v119 = v19;
    if (v72)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v120, *(void *)(v9 + 48) + *(void *)(v6 + 72) * v22, v5);
      uint64_t v28 = *(void *)(v9 + 56) + v27;
      uint64_t v29 = *(void *)v28;
      uint64_t v79 = *(void *)(v28 + 8);
      uint64_t v30 = *(void *)(v28 + 16);
      uint64_t v31 = v5;
      uint64_t v80 = *(void *)(v28 + 24);
      uint64_t v81 = v29;
      uint64_t v32 = *(void *)(v28 + 32);
      uint64_t v82 = *(void *)(v28 + 40);
      uint64_t v83 = v30;
      uint64_t v33 = *(void *)(v28 + 48);
      uint64_t v84 = *(void *)(v28 + 56);
      uint64_t v85 = v32;
      uint64_t v34 = *(void *)(v28 + 64);
      uint64_t v86 = *(void *)(v28 + 72);
      uint64_t v87 = v33;
      uint64_t v35 = *(void *)(v28 + 80);
      uint64_t v36 = *(void *)(v28 + 88);
      uint64_t v37 = *(void *)(v28 + 104);
      uint64_t v88 = *(void *)(v28 + 96);
      uint64_t v89 = v35;
      uint64_t v38 = *(void *)(v28 + 112);
      uint64_t v77 = v36;
      uint64_t v78 = v38;
      uint64_t v39 = *(void *)(v28 + 120);
      uint64_t v75 = v34;
      uint64_t v76 = v39;
      sub_100013B50(v28 + 128, (uint64_t)v121, &qword_1003ECD28);
      uint64_t v40 = *(void *)(v28 + 360);
      uint64_t v41 = *(void *)(v28 + 368);
      int v92 = *(unsigned __int8 *)(v28 + 376);
      uint64_t v42 = *(void *)(v28 + 384);
      uint64_t v43 = *(void *)(v28 + 392);
      uint64_t v90 = v41;
      uint64_t v91 = v43;
      uint64_t v44 = *(void *)(v28 + 400);
      uint64_t v45 = *(void *)(v28 + 408);
      uint64_t v93 = v40;
      uint64_t v94 = v45;
      uint64_t v103 = *(void *)(v28 + 416);
      int v95 = *(unsigned __int8 *)(v28 + 424);
      uint64_t v46 = *(void *)(v28 + 432);
      uint64_t v98 = v44;
      uint64_t v99 = v46;
      uint64_t v47 = *(void *)(v28 + 440);
      uint64_t v48 = *(void *)(v28 + 448);
      uint64_t v96 = v42;
      uint64_t v97 = v47;
      int v100 = *(unsigned __int8 *)(v28 + 456);
      int v104 = *(unsigned __int8 *)(v28 + 457);
      uint64_t v49 = *(void *)(v28 + 472);
      uint64_t v105 = *(void *)(v28 + 464);
      uint64_t v106 = v49;
      uint64_t v50 = *(void *)(v28 + 480);
      uint64_t v101 = v48;
      uint64_t v102 = v50;
      uint64_t v51 = *(void *)(v28 + 488);
      int v107 = *(unsigned __int8 *)(v28 + 496);
      uint64_t v52 = *(void *)(v28 + 504);
      uint64_t v53 = *(void *)(v28 + 512);
      uint64_t v108 = v51;
      uint64_t v109 = v53;
      uint64_t v54 = *(void *)(v28 + 520);
      uint64_t v110 = *(void *)(v28 + 528);
      uint64_t v111 = v52;
      uint64_t v55 = *(void *)(v28 + 536);
      uint64_t v112 = *(void *)(v28 + 544);
      uint64_t v113 = v54;
      uint64_t v56 = *(void *)(v28 + 552);
      uint64_t v116 = v55;
      uint64_t v117 = v56;
      uint64_t v114 = *(void *)(v28 + 560);
      uint64_t v118 = *(void *)(v28 + 568);
      int v115 = *(unsigned __int8 *)(v28 + 576);
      uint64_t v57 = v121;
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v120, *(void *)(v9 + 48) + *(void *)(v6 + 72) * v22, v5);
      memcpy(v121, (const void *)(*(void *)(v9 + 56) + v27), 0x241uLL);
      int v115 = LOBYTE(v121[72]);
      uint64_t v117 = v121[69];
      uint64_t v118 = v121[71];
      uint64_t v116 = v121[67];
      uint64_t v113 = v121[65];
      uint64_t v114 = v121[70];
      uint64_t v111 = v121[63];
      uint64_t v112 = v121[68];
      uint64_t v109 = v121[64];
      uint64_t v110 = v121[66];
      int v107 = LOBYTE(v121[62]);
      uint64_t v108 = v121[61];
      uint64_t v105 = v121[58];
      uint64_t v106 = v121[59];
      int v104 = BYTE1(v121[57]);
      int v100 = LOBYTE(v121[57]);
      uint64_t v101 = v121[56];
      uint64_t v102 = v121[60];
      uint64_t v99 = v121[54];
      uint64_t v103 = v121[52];
      int v95 = LOBYTE(v121[53]);
      uint64_t v97 = v121[55];
      uint64_t v98 = v121[50];
      uint64_t v96 = v121[48];
      int v92 = LOBYTE(v121[47]);
      uint64_t v93 = v121[45];
      uint64_t v94 = v121[51];
      uint64_t v90 = v121[46];
      uint64_t v91 = v121[49];
      uint64_t v37 = v121[13];
      uint64_t v77 = v121[11];
      uint64_t v78 = v121[14];
      uint64_t v88 = v121[12];
      uint64_t v89 = v121[10];
      uint64_t v75 = v121[8];
      uint64_t v76 = v121[15];
      uint64_t v86 = v121[9];
      uint64_t v87 = v121[6];
      uint64_t v84 = v121[7];
      uint64_t v85 = v121[4];
      uint64_t v82 = v121[5];
      uint64_t v83 = v121[2];
      uint64_t v31 = v5;
      uint64_t v80 = v121[3];
      uint64_t v81 = v121[0];
      uint64_t v79 = v121[1];
      sub_1000621F0((uint64_t)v121);
      uint64_t v57 = v74;
    }
    sub_100013B50((uint64_t)v57, (uint64_t)v122, &qword_1003ECD28);
    sub_1001491BC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v5 = v31;
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v58 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v59 = result & ~v58;
    unint64_t v60 = v59 >> 6;
    if (((-1 << v59) & ~*(void *)(v17 + 8 * (v59 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v59) & ~*(void *)(v17 + 8 * (v59 >> 6)))) | v59 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v71;
    }
    else
    {
      char v61 = 0;
      unint64_t v62 = (unint64_t)(63 - v58) >> 6;
      uint64_t v6 = v71;
      do
      {
        if (++v60 == v62 && (v61 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v63 = v60 == v62;
        if (v60 == v62) {
          unint64_t v60 = 0;
        }
        v61 |= v63;
        uint64_t v64 = *(void *)(v17 + 8 * v60);
      }
      while (v64 == -1);
      unint64_t v20 = __clz(__rbit64(~v64)) + (v60 << 6);
    }
    v121[0] = v81;
    v121[1] = v79;
    v121[2] = v83;
    v121[3] = v80;
    v121[4] = v85;
    v121[5] = v82;
    v121[6] = v87;
    v121[7] = v84;
    v121[8] = v75;
    v121[9] = v86;
    v121[10] = v89;
    v121[11] = v77;
    v121[12] = v88;
    v121[13] = v37;
    v121[14] = v78;
    v121[15] = v76;
    sub_100013B50((uint64_t)v122, (uint64_t)v74, &qword_1003ECD28);
    v121[45] = v93;
    v121[46] = v90;
    LOBYTE(v121[47]) = v92;
    v121[48] = v96;
    v121[49] = v91;
    v121[50] = v98;
    v121[51] = v94;
    LOBYTE(v121[53]) = v95;
    v121[52] = v103;
    v121[54] = v99;
    v121[55] = v97;
    v121[56] = v101;
    LOBYTE(v121[57]) = v100;
    BYTE1(v121[57]) = v104;
    v121[58] = v105;
    v121[59] = v106;
    v121[60] = v102;
    v121[61] = v108;
    LOBYTE(v121[62]) = v107;
    v121[63] = v111;
    v121[64] = v109;
    v121[65] = v113;
    v121[66] = v110;
    v121[67] = v116;
    v121[68] = v112;
    v121[69] = v117;
    v121[70] = v114;
    v121[71] = v118;
    LOBYTE(v121[72]) = v115;
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + *(void *)(v6 + 72) * v20, v120, v5);
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v11 + 56) + 584 * v20), v121, 0x241uLL);
    ++*(void *)(v11 + 16);
    uint64_t v9 = v70;
    int64_t v19 = v119;
  }
  swift_release();
  uint64_t v3 = v66;
  unint64_t v24 = v68;
  if ((v72 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v65 = 1 << *(unsigned char *)(v9 + 32);
  if (v65 >= 64) {
    bzero(v24, ((unint64_t)(v65 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v65;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10014144C(uint64_t a1, char a2)
{
  return sub_100141D34(a1, a2, &qword_1003EFF68);
}

uint64_t sub_100141458(uint64_t a1, int a2, uint64_t *a3, void (*a4)(unint64_t, unsigned char *))
{
  uint64_t v51 = a4;
  uint64_t v6 = v4;
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v4;
  sub_100044014(a3);
  int v49 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v4;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v46 = v11;
  uint64_t v47 = v10;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    unint64_t v25 = v44;
    unint64_t v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v42;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v23;
    uint64_t v31 = v47;
    uint64_t v32 = v48;
    if (v49)
    {
      (*v50)(v47, v30, v48);
      v51(*(void *)(v11 + 56) + 40 * v23, v52);
    }
    else
    {
      (*v45)(v47, v30, v48);
      sub_100050C1C(*(void *)(v11 + 56) + 40 * v23, (uint64_t)v52);
    }
    sub_1001491BC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    (*v50)((char *)(*(void *)(v13 + 48) + v29 * v21), (unint64_t)v31, v32);
    uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))v51)(v52, *(void *)(v13 + 56) + 40 * v21);
    ++*(void *)(v13 + 16);
    uint64_t v8 = v28;
    uint64_t v11 = v46;
  }
  swift_release();
  uint64_t v6 = v42;
  unint64_t v25 = v44;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v40;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v13;
  return result;
}

uint64_t sub_1001418BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100044014(&qword_1003F00C8);
  int v49 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v52 = v8;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v45 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v43 = v2;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v47 = v6;
  uint64_t v48 = v9;
  uint64_t v53 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v44) {
      break;
    }
    int64_t v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v44) {
              goto LABEL_34;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    int64_t v51 = v18;
    if (v49)
    {
      (*v50)(v52, v28, v53);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 24 * v22);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
    }
    else
    {
      (*v46)(v52, v28, v53);
      uint64_t v33 = (uint64_t *)(*(void *)(v9 + 56) + 24 * v22);
      uint64_t v30 = *v33;
      uint64_t v31 = v33[1];
      uint64_t v32 = v33[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1001491BC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v19 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v50)(*(void *)(v11 + 48) + v27 * v19, v52, v53);
    int64_t v20 = (void *)(*(void *)(v11 + 56) + 24 * v19);
    *int64_t v20 = v30;
    v20[1] = v31;
    _OWORD v20[2] = v32;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v47;
    uint64_t v9 = v48;
    int64_t v18 = v51;
  }
  swift_release();
  uint64_t v3 = v43;
  int64_t v24 = v45;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v9 + 32);
  if (v41 >= 64) {
    bzero(v24, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v41;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100141D28(uint64_t a1, char a2)
{
  return sub_100141D34(a1, a2, &qword_1003F00D0);
}

uint64_t sub_100141D34(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100044014(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100142048(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = sub_100044014(a3);
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  sub_100044014(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  int v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  unint64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    uint64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    sub_1001491BC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  uint64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

uint64_t sub_100142544(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10003B888(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10012563C();
      goto LABEL_7;
    }
    sub_10013E904(v15, a4 & 1);
    unint64_t v21 = sub_10003B888(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 48 * v12;
    return sub_100058E2C((uint64_t)a1, v19);
  }
LABEL_13:
  sub_100143DE4(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100142690(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10003B888(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100125828();
      goto LABEL_7;
    }
    sub_10013EC2C(v15, a4 & 1);
    unint64_t v21 = sub_10003B888(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 48 * v12;
    return sub_100149204((uint64_t)a1, v19);
  }
LABEL_13:
  sub_100143E54(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001427DC(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1001220A4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100125BC8();
      goto LABEL_7;
    }
    sub_100141458(v17, a3 & 1, &qword_1003F00E0, (void (*)(unint64_t, unsigned char *))sub_100022CC0);
    unint64_t v23 = sub_1001220A4(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100143EC4(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 40 * v14;
  sub_1000233E4(v21);

  return sub_100022CC0(a1, v21);
}

uint64_t sub_1001429D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Handle();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100025614(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100125DC4();
      goto LABEL_7;
    }
    sub_10013FDF8(v17, a3 & 1, (uint64_t (*)(void))&type metadata accessor for FriendshipRequestStatus, &qword_1003EFFE8);
    unint64_t v28 = sub_100025614(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001440A4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for Handle, (uint64_t (*)(void))&type metadata accessor for FriendshipRequestStatus);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for FriendshipRequestStatus();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_100142C1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10003B888(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100125DF8();
      goto LABEL_7;
    }
    sub_10013F2C4(v15, a4 & 1, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003EFFF0);
    unint64_t v26 = sub_10003B888(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for Handle();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_100143F88(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

_OWORD *sub_100142DB8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10003B888(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10012629C();
      goto LABEL_7;
    }
    sub_10013FAA8(v15, a4 & 1, &qword_1003EFFA0, (void (*)(uint64_t, unsigned char *))sub_100023434);
    unint64_t v21 = sub_10003B888(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_1000233E4((uint64_t)v19);
    return sub_100023434(a1, v19);
  }
LABEL_13:
  sub_100144038(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_100142F28(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10003B888(a1, a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10012667C();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000382E0(result, a3 & 1);
  uint64_t result = sub_10003B888(a1, a2);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a1;
  v20[1] = a2;
  *(double *)(v18[7] + 8 * v12) = a4;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100143090(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Handle();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100025614(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10012682C();
      goto LABEL_7;
    }
    sub_10013FDF8(v17, a3 & 1, (uint64_t (*)(void))&type metadata accessor for Location, &qword_1003EFEC0);
    unint64_t v28 = sub_100025614(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001440A4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for Handle, (uint64_t (*)(void))&type metadata accessor for Location);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for Location();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_1001432D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Friend();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1001221BC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100126860();
      goto LABEL_7;
    }
    sub_1001402F4(v17, a3 & 1);
    unint64_t v28 = sub_1001221BC(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001440A4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for FriendshipAction);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for FriendshipAction();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_100143504(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10003B888(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100126C44();
      goto LABEL_7;
    }
    sub_1001407F0(v15, a4 & 1);
    unint64_t v22 = sub_10003B888(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for FenceRecord() - 8) + 72) * v12;
    return sub_1001487F4(a1, v20);
  }
LABEL_13:
  sub_1001441A4(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

void *sub_100143668(const void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1001220A4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100126ED8();
      goto LABEL_7;
    }
    sub_100140BD0(v17, a3 & 1);
    unint64_t v23 = sub_1001220A4(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100144250(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 584 * v14;

  return (void *)sub_100148798((uint64_t)a1, v21);
}

uint64_t sub_100143838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_1001220A4(a4);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      unint64_t v23 = (uint64_t *)(v22[7] + 24 * v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v25 = v28;
      uint64_t *v23 = a1;
      v23[1] = v25;
      v23[2] = v29;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_100127484();
    goto LABEL_7;
  }
  sub_1001418BC(v19, a5 & 1);
  unint64_t v26 = sub_1001220A4(a4);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  unint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  return sub_100144318(v16, (uint64_t)v13, a1, v28, v29, v22);
}

uint64_t sub_100143A10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Handle();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100025614(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100127A44();
    goto LABEL_7;
  }
  sub_100025B8C(v17, a3 & 1);
  unint64_t v23 = sub_100025614(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1001443EC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100143BB8(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), uint64_t *a5, uint64_t *a6)
{
  uint64_t v37 = a4;
  unint64_t v38 = a6;
  uint64_t v8 = (void **)v6;
  uint64_t v39 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)*v6;
  unint64_t v17 = sub_1001220A4(a2);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 < v20 || (a3 & 1) == 0)
  {
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      v37();
      goto LABEL_7;
    }
    int v33 = a3 & 1;
    unint64_t v23 = a5;
    sub_100142048(v20, v33, a5, v38);
    unint64_t v34 = sub_1001220A4(a2);
    if ((v21 & 1) == (v35 & 1))
    {
      unint64_t v17 = v34;
      char v24 = *v8;
      if (v21) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
      return sub_1001444A4(v17, (uint64_t)v14, v39, v24, v23);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v23 = a5;
  char v24 = *v8;
  if ((v21 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v25 = v24[7];
  uint64_t v26 = sub_100044014(v23);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  uint64_t v29 = v26;
  uint64_t v30 = v25 + *(void *)(v27 + 72) * v17;
  uint64_t v31 = v39;

  return v28(v30, v31, v29);
}

_OWORD *sub_100143DE4(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100058DA0(a4, (_OWORD *)(a5[7] + 48 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_100143E54(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100058CFC(a4, (_OWORD *)(a5[7] + 48 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100143EC4(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_100022CC0(a3, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100143F88(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Handle();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

_OWORD *sub_100144038(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100023434(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1001440A4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a2, v12);
  uint64_t v13 = a4[7];
  uint64_t v14 = a6(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13 + *(void *)(*(void *)(v14 - 8) + 72) * a1, a3, v14);
  uint64_t v16 = a4[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a4[2] = v18;
  }
  return result;
}

uint64_t sub_1001441A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for FenceRecord();
  uint64_t result = sub_100148A24(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for FenceRecord);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_100144250(unint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = memcpy((void *)(a4[7] + 584 * a1), a3, 0x241uLL);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100144318(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a6[6];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a2, v13);
  uint64_t v15 = (void *)(a6[7] + 24 * a1);
  *uint64_t v15 = a3;
  v15[1] = a4;
  void v15[2] = a5;
  uint64_t v16 = a6[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a6[2] = v18;
  }
  return result;
}

uint64_t sub_1001443EC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Handle();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1001444A4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = sub_100044014(a5);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a3, v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

Swift::Int sub_10014459C(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Fence() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1001591C8(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100144644(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100144644(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v170 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v170 - 8);
  uint64_t v5 = __chkstk_darwin(v170);
  uint64_t v169 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v168 = (char *)&v149 - v7;
  uint64_t v8 = type metadata accessor for Fence();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v155 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v174 = (char *)&v149 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v167 = (char *)&v149 - v15;
  __chkstk_darwin(v14);
  uint64_t v166 = (char *)&v149 - v16;
  Swift::Int v17 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v17);
  if (result >= v17)
  {
    if (v17 < 0) {
      goto LABEL_137;
    }
    if (v17) {
      return sub_1001453AC(0, v17, 1, a1);
    }
    return result;
  }
  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_145;
  }
  Swift::Int v20 = result;
  uint64_t v172 = a1;
  uint64_t v158 = (void *)v9;
  if (v17 < 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = (char *)_swiftEmptyArrayStorage;
    unint64_t v157 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v149 = _swiftEmptyArrayStorage;
    if (v17 != 1)
    {
      unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_103:
      if (v29 >= 2)
      {
        uint64_t v142 = *a1;
        do
        {
          unint64_t v143 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_132;
          }
          if (!v142) {
            goto LABEL_144;
          }
          uint64_t v144 = v26;
          uint64_t v145 = *(void *)&v26[16 * v143 + 32];
          uint64_t v146 = *(void *)&v26[16 * v29 + 24];
          sub_100145788(v142 + v158[9] * v145, v142 + v158[9] * *(void *)&v26[16 * v29 + 16], v142 + v158[9] * v146, v157);
          if (v2) {
            break;
          }
          if (v146 < v145) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v144 = sub_10015BDF8((uint64_t)v26);
          }
          if (v143 >= *((void *)v144 + 2)) {
            goto LABEL_134;
          }
          uint64_t v147 = &v144[16 * v143 + 32];
          *(void *)uint64_t v147 = v145;
          *((void *)v147 + 1) = v146;
          unint64_t v148 = *((void *)v144 + 2);
          if (v29 > v148) {
            goto LABEL_135;
          }
          memmove(&v144[16 * v29 + 16], &v144[16 * v29 + 32], 16 * (v148 - v29));
          *((void *)v144 + 2) = v148 - 1;
          unint64_t v29 = v148 - 1;
          uint64_t v26 = v144;
        }
        while (v148 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v149[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v21 = 1;
    uint64_t v4 = v25;
  }
  else
  {
    uint64_t v21 = v17;
    uint64_t v22 = v19 >> 1;
    uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v23 + 16) = v22;
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v149 = (void *)v23;
    unint64_t v157 = v23 + v24;
  }
  uint64_t v27 = 0;
  uint64_t v164 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v165 = v9 + 16;
  unint64_t v163 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v178 = (uint64_t *)(v9 + 32);
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  uint64_t v173 = v8;
  Swift::Int v151 = v20;
  uint64_t v28 = v21;
  while (1)
  {
    uint64_t v30 = v27 + 1;
    uint64_t v156 = v27;
    if (v27 + 1 >= v28)
    {
      a1 = v172;
    }
    else
    {
      char v150 = v26;
      uint64_t v31 = *v172;
      uint64_t v152 = v31;
      uint64_t v32 = v158[9];
      uint64_t v176 = v32;
      uint64_t v177 = v27 + 1;
      uint64_t v33 = v31 + v32 * v30;
      unint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v158[2];
      char v35 = v166;
      uint64_t v175 = (char *)v28;
      v34(v166, v33, v8);
      uint64_t v36 = v31 + v32 * v27;
      uint64_t v37 = v167;
      uint64_t v162 = v34;
      v34(v167, v36, v8);
      unint64_t v38 = v168;
      Fence.updatedAt.getter();
      uint64_t v39 = v169;
      Fence.updatedAt.getter();
      LODWORD(v171) = static Date.> infix(_:_:)();
      char v40 = (char *)*v164;
      uint64_t v41 = v170;
      (*v164)(v39, v170);
      uint64_t v161 = v40;
      ((void (*)(char *, uint64_t))v40)(v38, v41);
      BOOL v42 = (void (*)(char *, uint64_t))v158[1];
      uint64_t v43 = v37;
      uint64_t v27 = v156;
      v42(v43, v8);
      os_log_type_t v160 = (char *)v42;
      v42(v35, v8);
      uint64_t v28 = (uint64_t)v175;
      uint64_t v30 = v27 + 2;
      if (v27 + 2 < (uint64_t)v175)
      {
        uint64_t v154 = v2;
        uint64_t v159 = v176 * v177;
        uint64_t v44 = v152;
        uint64_t v153 = v176 * v30;
        while (1)
        {
          uint64_t v45 = v30;
          int64_t v46 = v166;
          uint64_t v47 = v173;
          uint64_t v48 = v162;
          v162(v166, v44 + v153, v173);
          int v49 = v167;
          v48(v167, v44 + v159, v47);
          uint64_t v50 = v168;
          Fence.updatedAt.getter();
          uint64_t v51 = v169;
          Fence.updatedAt.getter();
          LODWORD(v177) = static Date.> infix(_:_:)();
          uint64_t v52 = v51;
          uint64_t v53 = v170;
          uint64_t v54 = (void (*)(char *, uint64_t))v161;
          ((void (*)(char *, uint64_t))v161)(v52, v170);
          v54(v50, v53);
          uint64_t v55 = (void (*)(char *, uint64_t))v160;
          ((void (*)(char *, uint64_t))v160)(v49, v47);
          v55(v46, v47);
          if ((v171 ^ v177)) {
            break;
          }
          uint64_t v30 = v45 + 1;
          uint64_t v28 = (uint64_t)v175;
          v44 += v176;
          if (v175 == (char *)(v45 + 1))
          {
            uint64_t v30 = (uint64_t)v175;
            uint64_t v8 = v173;
            uint64_t v2 = v154;
            uint64_t v27 = v156;
            goto LABEL_24;
          }
        }
        uint64_t v8 = v173;
        uint64_t v2 = v154;
        uint64_t v30 = v45;
        uint64_t v27 = v156;
        uint64_t v28 = (uint64_t)v175;
      }
LABEL_24:
      a1 = v172;
      uint64_t v26 = v150;
      Swift::Int v20 = v151;
      if (v171)
      {
        if (v30 < v27) {
          goto LABEL_138;
        }
        if (v27 < v30)
        {
          uint64_t v56 = 0;
          uint64_t v57 = v176;
          uint64_t v58 = v176 * (v30 - 1);
          uint64_t v59 = v30 * v176;
          uint64_t v60 = v27 * v176;
          do
          {
            if (v27 != v30 + v56 - 1)
            {
              if (!v152) {
                goto LABEL_143;
              }
              uint64_t v154 = v2;
              unint64_t v62 = v152 + v60;
              uint64_t v63 = v152 + v58;
              uint64_t v64 = v152;
              uint64_t v177 = *v178;
              ((void (*)(char *, uint64_t, uint64_t))v177)(v155, v152 + v60, v173);
              if (v60 < v58 || v62 >= v64 + v59)
              {
                uint64_t v61 = v173;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v61 = v173;
                if (v60 != v58) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              ((void (*)(uint64_t, char *, uint64_t))v177)(v63, v155, v61);
              a1 = v172;
              uint64_t v2 = v154;
              uint64_t v57 = v176;
            }
            ++v27;
            --v56;
            v58 -= v57;
            v59 -= v57;
            v60 += v57;
          }
          while (v27 < v30 + v56);
          uint64_t v26 = v150;
          uint64_t v8 = v173;
          Swift::Int v20 = v151;
          uint64_t v27 = v156;
          uint64_t v28 = (uint64_t)v175;
        }
      }
    }
    if (v30 < v28)
    {
      if (__OFSUB__(v30, v27)) {
        goto LABEL_136;
      }
      if (v30 - v27 < v20) {
        break;
      }
    }
LABEL_55:
    if (v30 < v27) {
      goto LABEL_131;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v171 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v26 = sub_10015BA78(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v90 = *((void *)v26 + 2);
    unint64_t v89 = *((void *)v26 + 3);
    unint64_t v29 = v90 + 1;
    if (v90 >= v89 >> 1) {
      uint64_t v26 = sub_10015BA78((char *)(v89 > 1), v90 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v29;
    uint64_t v91 = v26 + 32;
    int v92 = &v26[16 * v90 + 32];
    uint64_t v93 = v171;
    *(void *)int v92 = v156;
    *((void *)v92 + 1) = v93;
    if (v90)
    {
      while (1)
      {
        unint64_t v94 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v99 = &v91[16 * v29];
          uint64_t v100 = *((void *)v99 - 8);
          uint64_t v101 = *((void *)v99 - 7);
          BOOL v105 = __OFSUB__(v101, v100);
          uint64_t v102 = v101 - v100;
          if (v105) {
            goto LABEL_120;
          }
          uint64_t v104 = *((void *)v99 - 6);
          uint64_t v103 = *((void *)v99 - 5);
          BOOL v105 = __OFSUB__(v103, v104);
          uint64_t v97 = v103 - v104;
          char v98 = v105;
          if (v105) {
            goto LABEL_121;
          }
          unint64_t v106 = v29 - 2;
          int v107 = &v91[16 * v29 - 32];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          BOOL v105 = __OFSUB__(v108, v109);
          uint64_t v110 = v108 - v109;
          if (v105) {
            goto LABEL_123;
          }
          BOOL v105 = __OFADD__(v97, v110);
          uint64_t v111 = v97 + v110;
          if (v105) {
            goto LABEL_126;
          }
          if (v111 >= v102)
          {
            uint64_t v129 = &v91[16 * v94];
            uint64_t v131 = *(void *)v129;
            uint64_t v130 = *((void *)v129 + 1);
            BOOL v105 = __OFSUB__(v130, v131);
            uint64_t v132 = v130 - v131;
            if (v105) {
              goto LABEL_130;
            }
            BOOL v122 = v97 < v132;
            goto LABEL_92;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v123 = *((void *)v26 + 4);
            uint64_t v124 = *((void *)v26 + 5);
            BOOL v105 = __OFSUB__(v124, v123);
            uint64_t v116 = v124 - v123;
            char v117 = v105;
            goto LABEL_86;
          }
          uint64_t v96 = *((void *)v26 + 4);
          uint64_t v95 = *((void *)v26 + 5);
          BOOL v105 = __OFSUB__(v95, v96);
          uint64_t v97 = v95 - v96;
          char v98 = v105;
        }
        if (v98) {
          goto LABEL_122;
        }
        unint64_t v106 = v29 - 2;
        uint64_t v112 = &v91[16 * v29 - 32];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        BOOL v115 = __OFSUB__(v113, v114);
        uint64_t v116 = v113 - v114;
        char v117 = v115;
        if (v115) {
          goto LABEL_125;
        }
        uint64_t v118 = &v91[16 * v94];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        BOOL v105 = __OFSUB__(v119, v120);
        uint64_t v121 = v119 - v120;
        if (v105) {
          goto LABEL_128;
        }
        if (__OFADD__(v116, v121)) {
          goto LABEL_129;
        }
        if (v116 + v121 >= v97)
        {
          BOOL v122 = v97 < v121;
LABEL_92:
          if (v122) {
            unint64_t v94 = v106;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v117) {
          goto LABEL_124;
        }
        uint64_t v125 = &v91[16 * v94];
        uint64_t v127 = *(void *)v125;
        uint64_t v126 = *((void *)v125 + 1);
        BOOL v105 = __OFSUB__(v126, v127);
        uint64_t v128 = v126 - v127;
        if (v105) {
          goto LABEL_127;
        }
        if (v128 < v116) {
          goto LABEL_15;
        }
LABEL_94:
        unint64_t v133 = v94 - 1;
        if (v94 - 1 >= v29)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        uint64_t v134 = *a1;
        if (!*a1) {
          goto LABEL_142;
        }
        uint64_t v135 = v26;
        uint64_t v136 = &v91[16 * v133];
        uint64_t v137 = *(void *)v136;
        uint64_t v138 = v91;
        os_log_type_t v139 = &v91[16 * v94];
        uint64_t v140 = *((void *)v139 + 1);
        sub_100145788(v134 + v158[9] * *(void *)v136, v134 + v158[9] * *(void *)v139, v134 + v158[9] * v140, v157);
        if (v2) {
          goto LABEL_114;
        }
        if (v140 < v137) {
          goto LABEL_117;
        }
        if (v94 > *((void *)v135 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v136 = v137;
        *(void *)&v138[16 * v133 + 8] = v140;
        unint64_t v141 = *((void *)v135 + 2);
        if (v94 >= v141) {
          goto LABEL_119;
        }
        uint64_t v26 = v135;
        unint64_t v29 = v141 - 1;
        memmove(v139, v139 + 16, 16 * (v141 - 1 - v94));
        uint64_t v91 = v138;
        *((void *)v135 + 2) = v141 - 1;
        a1 = v172;
        uint64_t v8 = v173;
        if (v141 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v29 = 1;
LABEL_15:
    uint64_t v28 = a1[1];
    uint64_t v27 = v171;
    Swift::Int v20 = v151;
    if (v171 >= v28) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v27, v20)) {
    goto LABEL_139;
  }
  if (v27 + v20 < v28) {
    uint64_t v28 = v27 + v20;
  }
  if (v28 >= v27)
  {
    if (v30 != v28)
    {
      char v150 = v26;
      uint64_t v154 = v2;
      uint64_t v65 = (char *)v158[9];
      uint64_t v159 = v158[2];
      os_log_type_t v160 = v65;
      uint64_t v66 = (void)v65 * (v30 - 1);
      int64_t v67 = (char *)(v30 * (void)v65);
      uint64_t v153 = v28;
      do
      {
        uint64_t v69 = 0;
        uint64_t v70 = v156;
        uint64_t v171 = v30;
        uint64_t v161 = v67;
        uint64_t v162 = (void (*)(char *, uint64_t, uint64_t))v66;
        while (1)
        {
          uint64_t v176 = v70;
          uint64_t v71 = *a1;
          uint64_t v175 = &v67[v69];
          int v72 = &v67[v69 + v71];
          uint64_t v73 = v166;
          uint64_t v74 = (void (*)(char *, uint64_t, uint64_t))v159;
          ((void (*)(char *, char *, uint64_t))v159)(v166, v72, v8);
          uint64_t v75 = v66 + v69 + v71;
          uint64_t v76 = v167;
          v74(v167, v75, v8);
          uint64_t v77 = v168;
          Fence.updatedAt.getter();
          uint64_t v78 = a1;
          uint64_t v79 = v169;
          Fence.updatedAt.getter();
          LODWORD(v177) = static Date.> infix(_:_:)();
          uint64_t v80 = *v164;
          uint64_t v81 = v79;
          uint64_t v82 = v170;
          (*v164)(v81, v170);
          uint64_t v83 = v77;
          uint64_t v8 = v173;
          v80(v83, v82);
          uint64_t v84 = *v163;
          (*v163)(v76, v8);
          v84(v73, v8);
          if ((v177 & 1) == 0) {
            break;
          }
          uint64_t v85 = *v78;
          if (!*v78) {
            goto LABEL_141;
          }
          int64_t v67 = v161;
          uint64_t v66 = (uint64_t)v162;
          uint64_t v86 = (char *)v162 + v85 + v69;
          uint64_t v87 = (void (*)(char *, char *, uint64_t))*v178;
          ((void (*)(char *, char *, uint64_t))*v178)(v174, &v161[v85 + v69], v8);
          swift_arrayInitWithTakeFrontToBack();
          v87(v86, v174, v8);
          v69 -= (uint64_t)v160;
          uint64_t v70 = v176 + 1;
          uint64_t v68 = v171;
          a1 = v172;
          if (v171 == v176 + 1) {
            goto LABEL_48;
          }
        }
        uint64_t v68 = v171;
        a1 = v78;
        int64_t v67 = v161;
        uint64_t v66 = (uint64_t)v162;
LABEL_48:
        uint64_t v30 = v68 + 1;
        v66 += (uint64_t)v160;
        int64_t v67 = &v160[(void)v67];
      }
      while (v30 != v153);
      uint64_t v30 = v153;
      uint64_t v2 = v154;
      uint64_t v26 = v150;
      uint64_t v27 = v156;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001453AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v56 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v56 - 8);
  uint64_t v8 = __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v44 - v10;
  uint64_t v11 = type metadata accessor for Fence();
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v62 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v53 = (char *)&v44 - v15;
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v52 = (char *)&v44 - v18;
  uint64_t v60 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    Swift::Int v20 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    uint64_t v19 = v17 + 16;
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    int v49 = v20;
    uint64_t v47 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v50 = v11;
    uint64_t v51 = v19;
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v22 = v21 * (v60 - 1);
    uint64_t v57 = v21;
    uint64_t v23 = v21 * v60;
LABEL_5:
    uint64_t v24 = 0;
    uint64_t v64 = v46;
    uint64_t v58 = v23;
    uint64_t v59 = v22;
    while (1)
    {
      uint64_t v25 = *a4;
      uint64_t v63 = v23 + v24;
      uint64_t v26 = v23 + v24 + v25;
      uint64_t v27 = v52;
      uint64_t v28 = v49;
      v49(v52, v26, v11);
      uint64_t v29 = v22 + v24 + v25;
      uint64_t v30 = v53;
      v28(v53, v29, v11);
      uint64_t v31 = v54;
      Fence.updatedAt.getter();
      uint64_t v32 = a4;
      uint64_t v33 = v55;
      Fence.updatedAt.getter();
      int v65 = static Date.> infix(_:_:)();
      unint64_t v34 = *v48;
      char v35 = v33;
      uint64_t v36 = v56;
      (*v48)(v35, v56);
      uint64_t v37 = v36;
      a4 = v32;
      uint64_t v11 = v50;
      v34(v31, v37);
      unint64_t v38 = *v47;
      uint64_t v39 = v30;
      uint64_t v22 = v59;
      (*v47)(v39, v11);
      char v40 = v27;
      uint64_t v23 = v58;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v38)(v40, v11);
      if ((v65 & 1) == 0)
      {
LABEL_4:
        v22 += v57;
        v23 += v57;
        if (++v60 == v45) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v41 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v42 = v41 + v22 + v24;
      uint64_t v43 = *v61;
      (*v61)(v62, v41 + v23 + v24, v11);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v42, v62, v11);
      v24 -= v57;
      if (v60 == ++v64) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100145788(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v75 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v75 - 8);
  uint64_t v9 = __chkstk_darwin(v75);
  uint64_t v74 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v61 - v11;
  uint64_t v77 = type metadata accessor for Fence();
  uint64_t v12 = *(void *)(v77 - 8);
  uint64_t v13 = __chkstk_darwin(v77);
  int v72 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v71 = (char *)&v61 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_61;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_62;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v17;
  unint64_t v80 = a1;
  unint64_t v79 = a4;
  uint64_t v20 = v18 / v17;
  if (v19 >= v18 / v17)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v17;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v41 = a4 + v22;
      unint64_t v78 = a4 + v22;
      unint64_t v80 = a2;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v43 = -v17;
        uint64_t v44 = *(void (**)(void))(v12 + 16);
        uint64_t v63 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v64 = (void (*)(char *))v44;
        uint64_t v70 = v12 + 16;
        unint64_t v62 = (void (**)(char *, uint64_t))(v12 + 8);
        int v65 = (void (**)(char *, uint64_t))a1;
        unint64_t v66 = a4;
        uint64_t v45 = v71;
        do
        {
          uint64_t v76 = (void (**)(char *, uint64_t))a3;
          uint64_t v68 = (void (**)(char *, uint64_t))a2;
          unint64_t v69 = a3 + v43;
          uint64_t v46 = v77;
          uint64_t v47 = v64;
          ((void (*)(char *, unint64_t, uint64_t))v64)(v45, v41 + v43, v77);
          uint64_t v48 = v72;
          int64_t v67 = (void (**)(char *, uint64_t))(a2 + v43);
          v47(v72);
          int v49 = v73;
          Fence.updatedAt.getter();
          uint64_t v50 = v74;
          Fence.updatedAt.getter();
          LOBYTE(v47) = static Date.> infix(_:_:)();
          uint64_t v51 = v43;
          uint64_t v52 = *v63;
          uint64_t v53 = v50;
          uint64_t v54 = v75;
          (*v63)(v53, v75);
          v52(v49, v54);
          uint64_t v55 = *v62;
          (*v62)(v48, v46);
          v55(v45, v46);
          if (v47)
          {
            a3 = v69;
            if (v76 < v68 || v69 >= (unint64_t)v68)
            {
              uint64_t v58 = v67;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              uint64_t v43 = v51;
            }
            else
            {
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              uint64_t v43 = v51;
              uint64_t v58 = v67;
              if (v76 != v68) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v80 += v43;
          }
          else
          {
            uint64_t v58 = v68;
            a3 = v69;
            unint64_t v59 = v78;
            v78 += v51;
            uint64_t v43 = v51;
            if ((unint64_t)v76 < v59 || v69 >= v59)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v57 = v65;
              unint64_t v56 = v66;
            }
            else
            {
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              if (v76 != (void (**)(char *, uint64_t))v59) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
          }
          unint64_t v41 = v78;
          if (v78 <= v56) {
            break;
          }
          a2 = (unint64_t)v58;
        }
        while (v58 > v57);
      }
      goto LABEL_59;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v17;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v69 = a4 + v21;
    unint64_t v78 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v24 = *(void (***)(char *, uint64_t))(v12 + 16);
      int64_t v67 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v68 = v24;
      uint64_t v70 = v12 + 16;
      uint64_t v64 = (void (*)(char *))v17;
      int v65 = (void (**)(char *, uint64_t))(v12 + 8);
      uint64_t v76 = (void (**)(char *, uint64_t))a3;
      uint64_t v26 = v71;
      uint64_t v25 = v72;
      do
      {
        unint64_t v27 = a4;
        uint64_t v28 = v77;
        uint64_t v29 = v68;
        ((void (*)(char *, unint64_t, uint64_t))v68)(v26, a2, v77);
        ((void (*)(char *, unint64_t, uint64_t))v29)(v25, v27, v28);
        uint64_t v30 = v73;
        Fence.updatedAt.getter();
        uint64_t v31 = v74;
        Fence.updatedAt.getter();
        LOBYTE(v27) = static Date.> infix(_:_:)();
        uint64_t v32 = *v67;
        uint64_t v33 = v31;
        uint64_t v34 = v75;
        (*v67)(v33, v75);
        v32(v30, v34);
        char v35 = *v65;
        (*v65)(v25, v28);
        v35(v26, v28);
        unint64_t v36 = v80;
        if (v27)
        {
          uint64_t v37 = (void (*)(void))v64;
          unint64_t v38 = (unint64_t)v64 + a2;
          if (v80 < a2 || v80 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v39 = (unint64_t)v76;
          }
          else
          {
            unint64_t v39 = (unint64_t)v76;
            if (v80 == a2) {
              unint64_t v36 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v37 = (void (*)(void))v64;
          unint64_t v40 = (unint64_t)v64 + v79;
          if (v80 < v79 || v80 >= v40)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v39 = (unint64_t)v76;
          }
          else
          {
            unint64_t v39 = (unint64_t)v76;
            if (v80 != v79) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v79 = v40;
          unint64_t v38 = a2;
        }
        unint64_t v80 = (unint64_t)v37 + v36;
        a4 = v79;
        if (v79 >= v69) {
          break;
        }
        a2 = v38;
      }
      while (v38 < v39);
    }
LABEL_59:
    sub_10015BB74(&v80, &v79, (uint64_t *)&v78);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100145E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[3] = &type metadata for FencesReliabilityMetric;
  v20[4] = &off_1003DD938;
  v20[0] = a1;
  v20[1] = a2;
  _OWORD v20[2] = a3;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100050C1C((uint64_t)v20, (uint64_t)v19);
  uint64_t v4 = swift_allocObject();
  sub_100022CC0(v19, v4 + 16);
  uint64_t v17 = sub_1001488F8;
  uint64_t v18 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012CCD8;
  uint64_t v16 = &unk_1003E0F30;
  uint64_t v5 = _Block_copy(aBlock);
  swift_release();
  char v6 = AnalyticsSendEventLazy();
  _Block_release(v5);

  if ((v6 & 1) == 0)
  {
    if (qword_1003EBF50 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B450);
    sub_100050C1C((uint64_t)v20, (uint64_t)aBlock);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(void *)&v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v11 = sub_100042524(aBlock, (uint64_t)v16);
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      swift_bridgeObjectRetain();
      sub_100037004(v12, v13, (uint64_t *)v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000233E4((uint64_t)aBlock);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s is not enabled in the current config", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000233E4((uint64_t)aBlock);
    }
  }
  return sub_1000233E4((uint64_t)v20);
}

uint64_t sub_100146154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[3] = &type metadata for IDSMessageValidityMetric;
  v20[4] = &off_1003DDA60;
  v20[0] = a1;
  v20[1] = a2;
  _OWORD v20[2] = a3;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100050C1C((uint64_t)v20, (uint64_t)v19);
  uint64_t v4 = swift_allocObject();
  sub_100022CC0(v19, v4 + 16);
  uint64_t v17 = sub_10014926C;
  uint64_t v18 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012CCD8;
  uint64_t v16 = &unk_1003E0F80;
  uint64_t v5 = _Block_copy(aBlock);
  swift_release();
  char v6 = AnalyticsSendEventLazy();
  _Block_release(v5);

  if ((v6 & 1) == 0)
  {
    if (qword_1003EBF50 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B450);
    sub_100050C1C((uint64_t)v20, (uint64_t)aBlock);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(void *)&v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v11 = sub_100042524(aBlock, (uint64_t)v16);
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      swift_bridgeObjectRetain();
      sub_100037004(v12, v13, (uint64_t *)v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000233E4((uint64_t)aBlock);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s is not enabled in the current config", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000233E4((uint64_t)aBlock);
    }
  }
  return sub_1000233E4((uint64_t)v20);
}

uint64_t sub_100146418(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100148FFC();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100044014(&qword_1003F0410);
          uint64_t v12 = sub_10014662C(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10005A548(0, (unint64_t *)&qword_1003F0418);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_10014662C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1001466DC(v6, a2, a3);
  return sub_100146694;
}

void sub_100146694(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1001466DC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  NSString v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)NSString v3 = v4;
    return sub_10014675C;
  }
  __break(1u);
  return result;
}

void sub_10014675C(id *a1)
{
}

uint64_t sub_100146764(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v15 = type metadata accessor for NITokenService_LocalMessaging();
  uint64_t v16 = sub_1001491BC(&qword_1003F0458, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  *(void *)&long long v14 = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_100022CC0(&v14, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100146870(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for NITokenService_LocalMessaging();
  uint64_t v32 = sub_1001491BC(&qword_1003F0458, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  *(void *)&long long v30 = a1;
  BOOL v12 = (void *)*a4;
  unint64_t v14 = sub_1001220A4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = (void *)*a4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 40 * v14;
      sub_1000233E4(v21);
      return sub_100022CC0(&v30, v21);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1001271B0();
    goto LABEL_7;
  }
  sub_100141458(v17, a3 & 1, &qword_1003F00D8, (void (*)(unint64_t, unsigned char *))sub_100022CC0);
  unint64_t v23 = sub_1001220A4(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*a4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t v25 = sub_1000CA5F8((uint64_t)&v30, v31);
  __chkstk_darwin(v25);
  unint64_t v27 = (uint64_t *)((char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  sub_100146764(v14, (uint64_t)v11, *v27, v20);
  return sub_1000233E4((uint64_t)&v30);
}

uint64_t sub_100146B34(uint64_t a1)
{
  return sub_1002276E4(a1, v1);
}

void *sub_100146B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003EE290);
  uint64_t result = (void *)__chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v9 = 0;
  uint64_t v10 = a1 + 32;
  unint64_t v28 = v8 - 1;
  long long v30 = _swiftEmptyArrayStorage;
  unint64_t v31 = v8;
  uint64_t v29 = a1 + 32;
  do
  {
    if (v9 <= v8) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v9;
    }
    unint64_t v33 = v11;
    BOOL v12 = (char *)(v10 + 584 * v9);
    unint64_t v13 = v9;
    while (1)
    {
      if (v33 == v13)
      {
        __break(1u);
        return result;
      }
      memcpy(v35, v12, 0x241uLL);
      uint64_t v14 = v35[5] ? v35[5] : 0xE000000000000000;
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v34 = v14;
      if (v15)
      {
        uint64_t v16 = v35[5] ? v35[4] : 0;
        sub_1000621F0((uint64_t)v35);
        swift_bridgeObjectRetain();
        unint64_t v17 = sub_10003B888(v16, v14);
        if (v18)
        {
          unint64_t v19 = v17;
          uint64_t v32 = *(void *)(a2 + 56);
          uint64_t v20 = type metadata accessor for FenceRecord();
          uint64_t v21 = (uint64_t)v7;
          uint64_t v22 = *(void *)(v20 - 8);
          sub_100148858(v32 + *(void *)(v22 + 72) * v19, v21, (uint64_t (*)(void))type metadata accessor for FenceRecord);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, v20);
          uint64_t v7 = (char *)v21;
          unint64_t v8 = v31;
        }
        else
        {
          uint64_t v20 = type metadata accessor for FenceRecord();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
        }
      }
      else
      {
        uint64_t v20 = type metadata accessor for FenceRecord();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
        sub_1000621F0((uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      type metadata accessor for FenceRecord();
      int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v7, 1, v20);
      sub_10000A520((uint64_t)v7, &qword_1003EE290);
      if (v23 == 1) {
        break;
      }
      ++v13;
      uint64_t result = (void *)sub_10006257C((uint64_t)v35);
      v12 += 584;
      if (v8 == v13) {
        return v30;
      }
    }
    char v24 = v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v36 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100245E68(0, v24[2] + 1, 1);
      char v24 = v36;
    }
    unint64_t v27 = v24[2];
    unint64_t v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      sub_100245E68(v26 > 1, v27 + 1, 1);
      char v24 = v36;
    }
    unint64_t v9 = v13 + 1;
    void v24[2] = v27 + 1;
    long long v30 = v24;
    uint64_t result = memcpy(&v24[73 * v27 + 4], v35, 0x241uLL);
    uint64_t v10 = v29;
  }
  while (v28 != v13);
  return v30;
}

uint64_t sub_100146EF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 584 * a1 + 32;
    unint64_t v6 = a3 + 584 * v4;
    if (v5 >= v6 || v5 + 584 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100146FE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100044014(&qword_1003F03E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001470F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for PersonHandle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v32 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  long long v30 = (char *)v27 - v10;
  __chkstk_darwin(v9);
  uint64_t v29 = (char *)v27 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  v27[2] = v3;
  uint64_t v13 = *(void *)(type metadata accessor for Handle() - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v28 = v6;
  uint64_t v16 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  v27[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v17 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    uint64_t v18 = Handle.serverIdentifier.getter();
    if (!v19) {
      goto LABEL_4;
    }
    if (v18 == v33 && v19 == v31)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0) {
        goto LABEL_4;
      }
    }
    Handle.identifier.getter();
    uint64_t v21 = v30;
    PersonHandle.init(id:)();
    uint64_t v22 = *v16;
    int v23 = v29;
    (*v16)(v29, v21, v5);
    v22(v32, v23, v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = (char *)sub_10013DE08(0, *((void *)v17 + 2) + 1, 1, (unint64_t)v17, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
    }
    unint64_t v25 = *((void *)v17 + 2);
    unint64_t v24 = *((void *)v17 + 3);
    if (v25 >= v24 >> 1) {
      unint64_t v17 = (char *)sub_10013DE08(v24 > 1, v25 + 1, 1, (unint64_t)v17, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
    }
    *((void *)v17 + 2) = v25 + 1;
    v22(&v17[((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v25], v32, v5);
LABEL_4:
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v17;
}

void *sub_10014744C(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = type metadata accessor for PersonHandle();
  uint64_t v5 = *(void *)(v62 - 8);
  uint64_t v6 = __chkstk_darwin(v62);
  uint64_t v61 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v58 = (char *)v50 - v9;
  __chkstk_darwin(v8);
  uint64_t v57 = (char *)v50 - v10;
  uint64_t v54 = *(void *)(a1 + 16);
  if (!v54) {
    return &_swiftEmptyArrayStorage;
  }
  v50[1] = a1;
  v50[2] = v2;
  uint64_t v52 = a1 + 32;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  uint64_t v14 = &_swiftEmptyArrayStorage;
  uint64_t v53 = a2;
  uint64_t v59 = v5;
  uint64_t v51 = v11;
  while (1)
  {
    uint64_t v56 = v13;
    if (v11)
    {
      uint64_t v55 = v14;
      uint64_t v16 = (uint64_t *)(v52 + 16 * v13);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v19 = *(void *)(type metadata accessor for Handle() - 8);
      uint64_t v20 = a2 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      uint64_t v21 = *(void *)(v19 + 72);
      uint64_t v60 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v22 = v11;
      int v23 = (char *)&_swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v24 = Handle.serverIdentifier.getter();
        if (v25)
        {
          if (v24 == v17 && v25 == v60)
          {
            swift_bridgeObjectRelease();
LABEL_14:
            Handle.identifier.getter();
            unint64_t v27 = v58;
            PersonHandle.init(id:)();
            uint64_t v28 = *v12;
            uint64_t v29 = v57;
            long long v30 = v27;
            uint64_t v31 = v62;
            (*v12)(v57, v30, v62);
            v28(v61, v29, v31);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v23 = (char *)sub_10013DE08(0, *((void *)v23 + 2) + 1, 1, (unint64_t)v23, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
            }
            unint64_t v33 = *((void *)v23 + 2);
            unint64_t v32 = *((void *)v23 + 3);
            if (v33 >= v32 >> 1) {
              int v23 = (char *)sub_10013DE08(v32 > 1, v33 + 1, 1, (unint64_t)v23, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
            }
            *((void *)v23 + 2) = v33 + 1;
            v28(&v23[((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v33], v61, v62);
            goto LABEL_8;
          }
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v26) {
            goto LABEL_14;
          }
        }
LABEL_8:
        v20 += v21;
        if (!--v22)
        {
          swift_bridgeObjectRelease();
          a2 = v53;
          swift_bridgeObjectRelease();
          uint64_t v5 = v59;
          uint64_t v11 = v51;
          uint64_t v14 = v55;
          goto LABEL_20;
        }
      }
    }
    int v23 = (char *)&_swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v34 = *((void *)v23 + 2);
    int64_t v35 = v14[2];
    int64_t v36 = v35 + v34;
    if (__OFADD__(v35, v34)) {
      break;
    }
    unint64_t v37 = (unint64_t)v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v36 <= *(void *)(v37 + 24) >> 1)
    {
      if (*((void *)v23 + 2)) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v35 <= v36) {
        int64_t v40 = v35 + v34;
      }
      else {
        int64_t v40 = v35;
      }
      uint64_t v39 = sub_10013DE08(isUniquelyReferenced_nonNull_native, v40, 1, v37, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
      if (*((void *)v23 + 2))
      {
LABEL_29:
        uint64_t v41 = *(void *)(v39 + 16);
        if ((*(void *)(v39 + 24) >> 1) - v41 < v34) {
          goto LABEL_42;
        }
        unint64_t v42 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v43 = *(void *)(v5 + 72);
        unint64_t v44 = v39 + v42 + v43 * v41;
        if ((unint64_t)&v23[v42] < v44 + v43 * v34 && v44 < (unint64_t)&v23[v42 + v43 * v34]) {
          goto LABEL_44;
        }
        uint64_t v15 = (void *)v39;
        swift_arrayInitWithCopy();
        if (v34)
        {
          uint64_t v46 = v15[2];
          BOOL v47 = __OFADD__(v46, v34);
          uint64_t v48 = v46 + v34;
          if (v47) {
            goto LABEL_43;
          }
          void v15[2] = v48;
        }
        goto LABEL_4;
      }
    }
    uint64_t v15 = (void *)v39;
    if (v34) {
      goto LABEL_41;
    }
LABEL_4:
    uint64_t v13 = v56 + 1;
    swift_bridgeObjectRelease();
    uint64_t v14 = v15;
    if (v13 == v54)
    {
      swift_bridgeObjectRelease();
      return v15;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  swift_bridgeObjectRelease();
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001479AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for FenceRecord();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v52 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003EE290);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v17 = sub_10003B888(v14, v15), (v18 & 1) != 0))
  {
    sub_100148858(*(void *)(v16 + 56) + *(void *)(v6 + 72) * v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v20 = v13;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v20 = v13;
    uint64_t v21 = 1;
  }
  uint64_t v53 = v19;
  v19(v20, v21, 1, v5);
  swift_bridgeObjectRelease();
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5);
  sub_10000A520((uint64_t)v13, &qword_1003EE290);
  if (v22 != 1)
  {
    uint64_t v50 = a1;
    uint64_t v51 = v2;
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    sub_100044014(&qword_1003EC580);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003677A0;
    *(unsigned char *)(inited + 32) = 31;
    *(void *)(inited + 64) = &type metadata for String;
    *(void *)(inited + 72) = &off_1003DDA78;
    *(void *)(inited + 40) = 0xD000000000000012;
    *(void *)(inited + 48) = 0x8000000100376110;
    *(unsigned char *)(inited + 80) = 32;
    *(void *)(inited + 112) = &type metadata for String;
    *(void *)(inited + 120) = &off_1003DDA78;
    *(void *)(inited + 88) = v23;
    *(void *)(inited + 96) = v25;
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1001013D8(inited);
    uint64_t v28 = sub_100050320(3, v27);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v28, v30, v32);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100044058(v33, (uint64_t)qword_10040B708);
    uint64_t v34 = v52;
    sub_100148858(a2, v52, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    int64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    int v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v55 = v49;
      *(_DWORD *)uint64_t v38 = 136446466;
      int v47 = v37;
      uint64_t v54 = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2082;
      uint64_t v46 = v38 + 14;
      type metadata accessor for UUID();
      sub_1001491BC(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v48 = v6;
      uint64_t v39 = v52;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_100037004(v40, v41, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100148A8C(v39, (uint64_t (*)(void))type metadata accessor for FenceRecord);
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v47, "%{public}s ckFence with duplicate ID: %{public}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100148A8C(v34, (uint64_t (*)(void))type metadata accessor for FenceRecord);
    }
  }
  uint64_t v42 = UUID.uuidString.getter();
  uint64_t v44 = v43;
  sub_100148858(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FenceRecord);
  v53(v11, 0, 1, v5);
  return sub_10012BFF8((uint64_t)v11, v42, v44);
}

void sub_100147F70(uint64_t a1, const void *a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v41 - v12;
  memcpy(v45, a2, 0x241uLL);
  sub_100013B50((uint64_t)&v45[4], (uint64_t)v46, &qword_1003ED120);
  sub_100013B50((uint64_t)v46, (uint64_t)&v47, &qword_1003ED120);
  if (v48)
  {
    uint64_t v14 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000) == 0) {
      uint64_t v14 = v47 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      UUID.init(uuidString:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_10000A520((uint64_t)v6, &qword_1003ECFB8);
        uint64_t v15 = sub_100050B10(v45[11], v45[12]);
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100145E90(v15, v17, v19);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        if (qword_1003EC030 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_100044058(v20, (uint64_t)qword_10040B708);
        sub_1000621F0((uint64_t)v45);
        sub_1000621F0((uint64_t)v45);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446466;
          uint64_t v44 = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v23 + 12) = 2082;
          if (v45[46]) {
            uint64_t v24 = v45[45];
          }
          else {
            uint64_t v24 = 0x3E6C696E3CLL;
          }
          if (v45[46]) {
            unint64_t v25 = v45[46];
          }
          else {
            unint64_t v25 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v44 = sub_100037004(v24, v25, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006257C((uint64_t)v45);
          sub_10006257C((uint64_t)v45);
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s fence with invalid UUID: %{public}s", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10006257C((uint64_t)v45);
          sub_10006257C((uint64_t)v45);
        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
        if (*(void *)(*(void *)a1 + 16))
        {
          sub_1001220A4((uint64_t)v13);
          if (v26)
          {
            uint64_t v27 = sub_100050AF4(v45[11], v45[12]);
            uint64_t v29 = v28;
            uint64_t v31 = v30;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_100145E90(v27, v29, v31);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            if (qword_1003EC030 != -1) {
              swift_once();
            }
            uint64_t v32 = type metadata accessor for Logger();
            sub_100044058(v32, (uint64_t)qword_10040B708);
            sub_1000621F0((uint64_t)v45);
            sub_1000621F0((uint64_t)v45);
            uint64_t v33 = Logger.logObject.getter();
            os_log_type_t v34 = static os_log_type_t.error.getter();
            int v35 = v34;
            if (os_log_type_enabled(v33, v34))
            {
              uint64_t v36 = swift_slowAlloc();
              uint64_t v43 = swift_slowAlloc();
              uint64_t v49 = v43;
              *(_DWORD *)uint64_t v36 = 136446466;
              uint64_t v42 = v36 + 4;
              uint64_t v44 = sub_100037004(0xD00000000000001FLL, 0x8000000100375EE0, &v49);
              v41[1] = v45;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v36 + 12) = 2082;
              if (v45[46]) {
                uint64_t v37 = v45[45];
              }
              else {
                uint64_t v37 = 0x3E6C696E3CLL;
              }
              LODWORD(v42) = v35;
              if (v45[46]) {
                unint64_t v38 = v45[46];
              }
              else {
                unint64_t v38 = 0xE500000000000000;
              }
              v41[0] = v36 + 14;
              swift_bridgeObjectRetain();
              uint64_t v44 = sub_100037004(v37, v38, &v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006257C((uint64_t)v45);
              sub_10006257C((uint64_t)v45);
              _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v42, "%{public}s fmsFence with duplicate ID: %{public}s", (uint8_t *)v36, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_10006257C((uint64_t)v45);
              sub_10006257C((uint64_t)v45);
            }
          }
        }
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
        sub_1000621F0((uint64_t)v45);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v49 = *(void *)a1;
        *(void *)a1 = 0x8000000000000000;
        sub_100143668(v45, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
        *(void *)a1 = v49;
        swift_bridgeObjectRelease();
        uint64_t v40 = *(void (**)(char *, uint64_t))(v8 + 8);
        v40(v11, v7);
        v40(v13, v7);
      }
    }
  }
}

uint64_t sub_100148654()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001486AC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100018CD0;
  *(_OWORD *)(v2 + 144) = v3;
  *(_OWORD *)(v2 + 160) = v4;
  return _swift_task_switch(sub_10013BFEC, v4, 0);
}

uint64_t sub_100148758@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10013CF58(a1, v2[2], v2[3], v2[4], a2);
}

BOOL sub_100148778()
{
  return sub_10013D640();
}

uint64_t sub_100148798(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001487F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100148858(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001488C0()
{
  sub_1000233E4(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001488F8()
{
  return sub_100052E9C((void *)(v0 + 16));
}

uint64_t sub_100148900(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100148910()
{
  return swift_release();
}

uint64_t sub_100148918(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100044014(&qword_1003F0470);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100148A24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100148A8C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100148AEC(uint64_t a1)
{
  return sub_100227ED8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t *sub_100148AF4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100148BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100062780(a17, a18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100148EA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100148FFC()
{
  unint64_t result = qword_1003F0420;
  if (!qword_1003F0420)
  {
    sub_10004AE58(&qword_1003F0410);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F0420);
  }
  return result;
}

uint64_t sub_100149058(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100044014(&qword_1003F0440) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001491B4()
{
  return swift_release();
}

uint64_t sub_1001491BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100149204(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100149270(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for FriendInfoOption(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (Hasher.init(_seed:)(),
        type metadata accessor for HandleType(),
        sub_1000471EC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType),
        dispatch thunk of Hashable.hash(into:)(),
        Swift::Int v7 = Hasher._finalize()(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = *(void *)(v4 + 72);
    do
    {
      sub_100045790(*(void *)(a2 + 48) + v11 * v9, (uint64_t)v6);
      char v12 = static HandleType.== infix(_:_:)();
      sub_100046744((uint64_t)v6);
      if (v12) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_100149418(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100149508(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  sub_10015F194();
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

unint64_t *sub_100149658(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  Swift::Int v6 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v19 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10003CB84(0, v5, 0);
    Swift::Int v6 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v8 = *(void *)(type metadata accessor for Fence.DaysOfWeek() - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v16 = *(void *)(v8 + 72);
    while (1)
    {
      a1(v18, v9);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      unint64_t v10 = v18[0];
      unint64_t v11 = v18[1];
      uint64_t v19 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_10003CB84(v12 > 1, v13 + 1, 1);
        Swift::Int v6 = v19;
      }
      void v6[2] = v13 + 1;
      unint64_t v14 = &v6[2 * v13];
      v14[4] = v10;
      v14[5] = v11;
      v9 += v16;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_1001497BC(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v17 = type metadata accessor for Friend();
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_10003BD78(0, v9, 0);
    unint64_t v10 = v21;
    uint64_t v16 = v6 + 32;
    unint64_t v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v12 = *v11;
      v20[0] = *(v11 - 1);
      v20[1] = v12;
      swift_bridgeObjectRetain();
      v18(v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v21 = v10;
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10003BD78(v13 > 1, v14 + 1, 1);
        unint64_t v10 = v21;
      }
      v11 += 2;
      v10[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v17);
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_100149988(uint64_t a1)
{
  uint64_t v45 = type metadata accessor for Friend();
  uint64_t v3 = *(void *)(v45 - 8);
  uint64_t v4 = __chkstk_darwin(v45);
  uint64_t v44 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)v32 - v6;
  uint64_t v42 = type metadata accessor for Handle();
  uint64_t v7 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  v32[1] = v1;
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_100020D44(0, v9, 0);
  uint64_t result = sub_10015DA40(a1);
  uint64_t v13 = result;
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 64;
  uint64_t v37 = v3 + 32;
  uint64_t v38 = v3 + 16;
  uint64_t v40 = a1;
  uint64_t v41 = v3;
  uint64_t v35 = v7 + 32;
  uint64_t v36 = v3 + 8;
  char v16 = *(unsigned char *)(a1 + 32);
  v32[0] = a1 + 88;
  uint64_t v39 = v7;
  uint64_t v33 = v12;
  uint64_t v34 = a1 + 64;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << v16)
  {
    unint64_t v18 = (unint64_t)v13 >> 6;
    if ((*(void *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_28;
    }
    int64_t v19 = v9;
    uint64_t v20 = v41;
    uint64_t v21 = *(void *)(a1 + 48) + *(void *)(v41 + 72) * v13;
    os_log_type_t v22 = v43;
    uint64_t v23 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v43, v21, v45);
    uint64_t v24 = v44;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v44, v22, v23);
    Friend.handle.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v23);
    unint64_t v10 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100020D44(0, v10[2] + 1, 1);
      unint64_t v10 = v47;
    }
    unint64_t v26 = v10[2];
    unint64_t v25 = v10[3];
    if (v26 >= v25 >> 1)
    {
      sub_100020D44(v25 > 1, v26 + 1, 1);
      unint64_t v10 = v47;
    }
    v10[2] = v26 + 1;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v39 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v26, v46, v42);
    uint64_t v47 = v10;
    a1 = v40;
    char v16 = *(unsigned char *)(v40 + 32);
    unint64_t v17 = 1 << v16;
    if (v13 >= 1 << v16) {
      goto LABEL_29;
    }
    uint64_t v15 = v34;
    uint64_t v27 = *(void *)(v34 + 8 * v18);
    if ((v27 & (1 << v13)) == 0) {
      goto LABEL_30;
    }
    LODWORD(v12) = v33;
    if (*(_DWORD *)(v40 + 36) != v33) {
      goto LABEL_31;
    }
    unint64_t v28 = v27 & (-2 << (v13 & 0x3F));
    if (v28)
    {
      unint64_t v17 = __clz(__rbit64(v28)) | v13 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v19;
    }
    else
    {
      unint64_t v29 = v18 + 1;
      unint64_t v30 = (v17 + 63) >> 6;
      int64_t v9 = v19;
      if (v18 + 1 < v30)
      {
        unint64_t v31 = *(void *)(v34 + 8 * v29);
        if (!v31)
        {
          unint64_t v29 = v18 + 2;
          if (v18 + 2 >= v30) {
            goto LABEL_4;
          }
          unint64_t v31 = *(void *)(v34 + 8 * v29);
          if (!v31)
          {
            while (v30 - 3 != v18)
            {
              unint64_t v31 = *(void *)(v32[0] + 8 * v18++);
              if (v31)
              {
                unint64_t v29 = v18 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v17 = __clz(__rbit64(v31)) + (v29 << 6);
      }
    }
LABEL_4:
    ++v14;
    uint64_t v13 = v17;
    if (v14 == v9) {
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100149DB4()
{
  unint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(&_swiftEmptyArrayStorage);
}

uint64_t sub_100149FD8()
{
  unint64_t v11 = v0;
  uint64_t v1 = v0[13];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(&_swiftEmptyArrayStorage);
}

uint64_t sub_10014A1FC()
{
  uint64_t v1 = v0[102];
  uint64_t v2 = v0[85];
  uint64_t v3 = swift_task_alloc();
  v0[104] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[105] = v4;
  uint64_t v5 = sub_100044014(&qword_1003F0530);
  v0[106] = v5;
  *os_log_type_t v4 = v0;
  v4[1] = sub_10014A30C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 79, 0, 0, 0x2873646E65697266, 0xEC000000293A666FLL, sub_10015F09C, v3, v5);
}

uint64_t sub_10014A30C()
{
  *(void *)(*(void *)v1 + 856) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10014AFA4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10014A428;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014A428()
{
  uint64_t v1 = v0[86];
  v0[108] = v0[79];
  return _swift_task_switch(sub_10014A44C, v1, 0);
}

uint64_t sub_10014A44C()
{
  uint64_t v85 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 912);
  *(void *)(v0 + 624) = *(void *)(v0 + 864);
  if (v1 != 1)
  {
    if (qword_1003EC030 == -1)
    {
LABEL_6:
      uint64_t v10 = type metadata accessor for Logger();
      sub_100044058(v10, (uint64_t)qword_10040B708);
      swift_bridgeObjectRetain_n();
      unint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        v84[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v14 = Array.description.getter();
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 640) = sub_100037004(v14, v16, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "DataManager load friends not checking expiry with types %{public}s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease_n();
      }

LABEL_44:
      uint64_t v66 = *(void *)(v0 + 624);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int64_t v67 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v67(v66);
    }
LABEL_55:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(v0 + 680);
  uint64_t v3 = *(void (**)(void, void, void))(*(void *)(v0 + 736) + 104);
  v3(*(void *)(v0 + 784), enum case for HandleType.follower(_:), *(void *)(v0 + 728));
  uint64_t v83 = *(void *)(v2 + 16);
  unint64_t v78 = v3;
  if (v83)
  {
    uint64_t v4 = *(void *)(v0 + 776);
    uint64_t v5 = *(void *)(v0 + 736);
    uint64_t v6 = *(void *)(v0 + 728);
    uint64_t v7 = *(void *)(v0 + 680);
    unint64_t v76 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v81 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    v81(v4, v7 + v76, v6);
    sub_1000471EC(&qword_1003EEBF8, (void (*)(uint64_t))&type metadata accessor for HandleType);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
    int64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v9(v4, v6);
    if (v8)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      v9(*(void *)(v0 + 784), *(void *)(v0 + 728));
      goto LABEL_33;
    }
    if (v83 != 1)
    {
      unint64_t v79 = v9;
      uint64_t v17 = *(void *)(*(void *)(v0 + 736) + 72);
      unint64_t v18 = v7 + v17 + v76;
      uint64_t v19 = 1;
      while (1)
      {
        v81(*(void *)(v0 + 776), v18, *(void *)(v0 + 728));
        uint64_t v20 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          break;
        }
        uint64_t v21 = *(void *)(v0 + 776);
        uint64_t v22 = *(void *)(v0 + 728);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        v79(v21, v22);
        if (v23)
        {
          swift_bridgeObjectRelease();
          int64_t v9 = v79;
          goto LABEL_32;
        }
        ++v19;
        v18 += v17;
        if (v20 == v83)
        {
          swift_bridgeObjectRelease();
          int64_t v9 = v79;
          goto LABEL_18;
        }
      }
      __break(1u);
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v3 = v78;
  }
  else
  {
    int64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 736) + 8);
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = *(void *)(v0 + 768);
  uint64_t v25 = *(void *)(v0 + 728);
  v9(*(void *)(v0 + 784), v25);
  v3(v24, enum case for HandleType.pendingOffer(_:), v25);
  if (!v83)
  {
    uint64_t v34 = *(void *)(v0 + 752);
    uint64_t v35 = *(void *)(v0 + 728);
    v9(*(void *)(v0 + 768), v35);
    v3(v34, enum case for HandleType.following(_:), v35);
LABEL_23:
    v9(*(void *)(v0 + 752), *(void *)(v0 + 728));
LABEL_38:
    swift_bridgeObjectRelease();
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100044058(v57, (uint64_t)qword_10040B708);
    uint64_t v58 = *(void *)(v0 + 624);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v62 = Array.description.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 656) = sub_100037004(v62, v64, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v61 + 12) = 2048;
      uint64_t v65 = *(void *)(v58 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 664) = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "DataManager load LocalStorage friends with types %{public}s count:%ld", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    swift_release();

    swift_beginAccess();
    goto LABEL_44;
  }
  uint64_t v26 = *(void *)(v0 + 760);
  uint64_t v27 = *(void *)(v0 + 736);
  uint64_t v28 = *(void *)(v0 + 728);
  uint64_t v29 = *(void *)(v0 + 680);
  unint64_t v75 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v80 = v29 + v75;
  uint64_t v82 = *(void (**)(uint64_t))(v27 + 16);
  v82(v26);
  sub_1000471EC(&qword_1003EEBF8, (void (*)(uint64_t))&type metadata accessor for HandleType);
  uint64_t v77 = v29;
  swift_bridgeObjectRetain();
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v31 = v9;
  v9(v26, v28);
  if (v30)
  {
LABEL_21:
    uint64_t v32 = *(void *)(v0 + 768);
    uint64_t v33 = *(void *)(v0 + 728);
    swift_bridgeObjectRelease();
    v31(v32, v33);
LABEL_33:
    uint64_t v49 = *(void *)(v0 + 864);
    uint64_t v50 = *(void *)(v0 + 720);
    uint64_t v51 = *(void *)(v0 + 696);
    static Date.trustedNow.getter(v50);
    uint64_t v52 = swift_task_alloc();
    *(void *)(v52 + 16) = v50;
    *(void *)(v52 + 24) = v51;
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_10002BCE4((uint64_t (*)(void))sub_10002BFE0, v52, v49);
    swift_task_dealloc();
    uint64_t v54 = *(void *)(v53 + 16);
    swift_bridgeObjectRelease();
    if (v54)
    {
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v55;
      *uint64_t v55 = v0;
      v55[1] = sub_10014B28C;
      return sub_10010B8B8(v0 + 16);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 712) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 704));
    goto LABEL_38;
  }
  if (v83 != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v0 + 736) + 72);
    unint64_t v37 = v29 + v36 + v75;
    uint64_t v38 = 1;
    while (1)
    {
      ((void (*)(void, unint64_t, void))v82)(*(void *)(v0 + 760), v37, *(void *)(v0 + 728));
      uint64_t v39 = v38 + 1;
      if (__OFADD__(v38, 1)) {
        break;
      }
      uint64_t v40 = *(void *)(v0 + 760);
      uint64_t v41 = *(void *)(v0 + 728);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v40, v41);
      if (v42) {
        goto LABEL_21;
      }
      ++v38;
      v37 += v36;
      if (v39 == v83) {
        goto LABEL_29;
      }
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
LABEL_29:
  uint64_t v43 = *(void *)(v0 + 768);
  uint64_t v44 = *(void *)(v0 + 752);
  uint64_t v45 = *(void *)(v0 + 744);
  uint64_t v46 = *(void *)(v0 + 728);
  swift_bridgeObjectRelease();
  int64_t v9 = v31;
  v31(v43, v46);
  v78(v44, enum case for HandleType.following(_:), v46);
  ((void (*)(uint64_t, uint64_t, uint64_t))v82)(v45, v80, v46);
  swift_bridgeObjectRetain();
  LOBYTE(v43) = dispatch thunk of static Equatable.== infix(_:_:)();
  v31(v45, v46);
  if (v43)
  {
LABEL_30:
    uint64_t v47 = *(void *)(v0 + 752);
    uint64_t v48 = *(void *)(v0 + 728);
    swift_bridgeObjectRelease();
    v9(v47, v48);
    goto LABEL_33;
  }
  if (v83 == 1)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v68 = *(void *)(*(void *)(v0 + 736) + 72);
  uint64_t v69 = v77 + v68 + v75;
  uint64_t v70 = 1;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(void, uint64_t, void))v82)(*(void *)(v0 + 744), v69, *(void *)(v0 + 728));
    uint64_t v71 = v70 + 1;
    if (__OFADD__(v70, 1)) {
      break;
    }
    uint64_t v72 = *(void *)(v0 + 744);
    uint64_t v73 = *(void *)(v0 + 728);
    char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
    v9(v72, v73);
    if (v74) {
      goto LABEL_30;
    }
    ++v70;
    v69 += v68;
    if (v71 == v83) {
      goto LABEL_52;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10014AFA4()
{
  uint64_t v1 = *(void *)(v0 + 688);
  swift_task_dealloc();
  return _swift_task_switch(sub_10014B010, v1, 0);
}

uint64_t sub_10014B010()
{
  unint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[107];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[81] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[77] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v8 = (uint64_t (*)(void *))v0[1];
  return v8(&_swiftEmptyArrayStorage);
}

uint64_t sub_10014B28C()
{
  uint64_t v1 = *(void *)v0 + 16;
  uint64_t v2 = *(void *)(*(void *)v0 + 688);
  swift_task_dealloc();
  sub_10015F0A4(v1);
  return _swift_task_switch(sub_10014B3A8, v2, 0);
}

uint64_t sub_10014B3A8()
{
  (*(void (**)(void, void))(v0[89] + 8))(v0[90], v0[88]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10014B438, 0, 0);
}

uint64_t sub_10014B438()
{
  uint64_t v1 = v0[102];
  uint64_t v2 = v0[85];
  uint64_t v3 = swift_task_alloc();
  v0[110] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[111] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10014B538;
  uint64_t v5 = v0[106];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 84, 0, 0, 0x2873646E65697266, 0xEC000000293A666FLL, sub_10015F210, v3, v5);
}

uint64_t sub_10014B538()
{
  *(void *)(*(void *)v1 + 896) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10014B970;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10014B654;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014B654()
{
  uint64_t v1 = v0[86];
  v0[113] = v0[84];
  return _swift_task_switch(sub_10014B678, v1, 0);
}

uint64_t sub_10014B678()
{
  uint64_t v14 = v0;
  v0[78] = v0[113];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = v0[78];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    v0[82] = sub_100037004(v6, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2048;
    uint64_t v9 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    v0[83] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager load LocalStorage friends with types %{public}s count:%ld", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  swift_beginAccess();
  uint64_t v10 = v0[78];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v10);
}

uint64_t sub_10014B970()
{
  uint64_t v1 = *(void *)(v0 + 688);
  swift_task_dealloc();
  return _swift_task_switch(sub_10014B9DC, v1, 0);
}

uint64_t sub_10014B9DC()
{
  unint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[112];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[81] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[77] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(&_swiftEmptyArrayStorage);
}

uint64_t sub_10014BC58()
{
  unint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[103];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[81] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[77] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(&_swiftEmptyArrayStorage);
}

uint64_t sub_10014BECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[79] = v3;
  v4[78] = a3;
  v4[77] = a2;
  v4[76] = a1;
  v4[80] = *v3;
  uint64_t v5 = type metadata accessor for Date();
  v4[81] = v5;
  v4[82] = *(void *)(v5 - 8);
  v4[83] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HandleType();
  v4[84] = v6;
  v4[85] = *(void *)(v6 - 8);
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[88] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  v4[89] = v7;
  v4[90] = *(void *)(v7 - 8);
  v4[91] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v4[92] = swift_task_alloc();
  v4[93] = swift_task_alloc();
  v4[94] = swift_task_alloc();
  unint64_t v8 = (void *)swift_task_alloc();
  v4[95] = v8;
  void *v8 = v4;
  v8[1] = sub_10014C110;
  return daemon.getter();
}

uint64_t sub_10014C110(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 768) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 776) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1000471EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471EC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10014C2EC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10014C2EC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[98] = a1;
  v3[99] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[79];
    return _swift_task_switch(sub_10014D0F0, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[100] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10014C484;
    uint64_t v7 = v3[94];
    uint64_t v8 = v3[78];
    uint64_t v9 = v3[77];
    return sub_100220348(v7, v9, v8);
  }
}

uint64_t sub_10014C484()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 808) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 632);
  if (v0) {
    uint64_t v4 = sub_10014D398;
  }
  else {
    uint64_t v4 = sub_10014C5B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10014C5B0()
{
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(v0 + 720);
  uint64_t v3 = *(void *)(v0 + 712);
  sub_100013210(*(void *)(v0 + 752), v1, &qword_1003ECFE8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 752);
    uint64_t v5 = *(void *)(v0 + 744);
    uint64_t v6 = *(void *)(v0 + 608);
    swift_release();
    sub_10000A520(v5, &qword_1003ECFE8);
    uint64_t v7 = v4;
    uint64_t v8 = v6;
LABEL_17:
    sub_100013B50(v7, v8, &qword_1003ECFE8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  uint64_t v9 = *(void *)(v0 + 704);
  uint64_t v10 = *(void *)(v0 + 696);
  uint64_t v11 = *(void **)(v0 + 680);
  uint64_t v12 = *(void *)(v0 + 672);
  uint64_t v13 = *(void *)(v0 + 624);
  (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 32))(*(void *)(v0 + 728), *(void *)(v0 + 744), *(void *)(v0 + 712));
  uint64_t v51 = (void (*)(uint64_t, void, uint64_t))v11[13];
  v51(v9, enum case for HandleType.follower(_:), v12);
  char v14 = static HandleType.== infix(_:_:)();
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v11[1];
  v15(v9, v12);
  unint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t))v11[2];
  v16(v10, v13, v12);
  if (v14)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v0 + 688);
    uint64_t v19 = *(void *)(v0 + 672);
    uint64_t v20 = *(void *)(v0 + 624);
    v15(*(void *)(v0 + 696), v19);
    v17(v18, v20, v19);
LABEL_6:
    v15(*(void *)(v0 + 688), *(void *)(v0 + 672));
    goto LABEL_7;
  }
  uint64_t v50 = v16;
  uint64_t v21 = *(void *)(v0 + 704);
  uint64_t v22 = *(void *)(v0 + 696);
  uint64_t v49 = *(void *)(v0 + 688);
  uint64_t v23 = *(void *)(v0 + 672);
  uint64_t v24 = *(void *)(v0 + 624);
  v51(v21, enum case for HandleType.pendingOffer(_:), v23);
  char v25 = static HandleType.== infix(_:_:)();
  v15(v21, v23);
  v15(v22, v23);
  v50(v49, v24, v23);
  if (v25) {
    goto LABEL_6;
  }
  uint64_t v44 = *(void *)(v0 + 704);
  uint64_t v45 = *(void *)(v0 + 688);
  uint64_t v46 = *(void *)(v0 + 672);
  v51(v44, enum case for HandleType.following(_:), v46);
  char v47 = static HandleType.== infix(_:_:)();
  v15(v44, v46);
  v15(v45, v46);
  if ((v47 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v26 = *(void *)(v0 + 728);
  uint64_t v27 = *(void *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 712);
  uint64_t v29 = *(void *)(v0 + 664);
  uint64_t v30 = *(void *)(v0 + 640);
  sub_100044014(&qword_1003F03A8);
  int v31 = *(_DWORD *)(v27 + 80);
  *(_DWORD *)(v0 + 856) = v31;
  unint64_t v32 = (v31 + 32) & ~(unint64_t)v31;
  uint64_t v33 = swift_allocObject();
  *(void *)(v0 + 816) = v33;
  *(_OWORD *)(v33 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 16))(v33 + v32, v26, v28);
  static Date.trustedNow.getter(v29);
  uint64_t v34 = swift_task_alloc();
  *(void *)(v34 + 16) = v29;
  *(void *)(v34 + 24) = v30;
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_10002BCE4((uint64_t (*)(void))sub_10015F1F4, v34, v33);
  swift_task_dealloc();
  uint64_t v36 = *(void *)(v35 + 16);
  *(void *)(v0 + 824) = v36;
  swift_bridgeObjectRelease();
  if (v36)
  {
    unint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v37;
    *unint64_t v37 = v0;
    v37[1] = sub_10014CB84;
    return sub_10010B8B8(v0 + 16);
  }
  uint64_t v39 = *(void *)(v0 + 824);
  (*(void (**)(void, void))(*(void *)(v0 + 656) + 8))(*(void *)(v0 + 664), *(void *)(v0 + 648));
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (!v39)
  {
LABEL_16:
    (*(void (**)(void, void))(*(void *)(v0 + 720) + 8))(*(void *)(v0 + 728), *(void *)(v0 + 712));
    swift_release();
    uint64_t v7 = *(void *)(v0 + 752);
    uint64_t v8 = *(void *)(v0 + 608);
    goto LABEL_17;
  }
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 840) = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_10014CE90;
  uint64_t v41 = *(void *)(v0 + 736);
  uint64_t v42 = *(void *)(v0 + 624);
  uint64_t v43 = *(void *)(v0 + 616);
  return sub_100220348(v41, v43, v42);
}

uint64_t sub_10014CB84()
{
  uint64_t v1 = *(void *)v0 + 16;
  uint64_t v2 = *(void *)(*(void *)v0 + 632);
  swift_task_dealloc();
  sub_10015F0A4(v1);
  return _swift_task_switch(sub_10014CCA0, v2, 0);
}

uint64_t sub_10014CCA0()
{
  uint64_t v1 = v0[103];
  (*(void (**)(void, void))(v0[82] + 8))(v0[83], v0[81]);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[105] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10014CE90;
    uint64_t v3 = v0[92];
    uint64_t v4 = v0[78];
    uint64_t v5 = v0[77];
    return sub_100220348(v3, v5, v4);
  }
  else
  {
    (*(void (**)(void, void))(v0[90] + 8))(v0[91], v0[89]);
    swift_release();
    sub_100013B50(v0[94], v0[76], &qword_1003ECFE8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10014CE90()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 848) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 632);
  if (v0) {
    uint64_t v4 = sub_10014D640;
  }
  else {
    uint64_t v4 = sub_10014CFBC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10014CFBC()
{
  uint64_t v1 = v0[94];
  uint64_t v2 = v0[92];
  uint64_t v3 = v0[91];
  uint64_t v4 = v0[90];
  uint64_t v5 = v0[89];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10000A520(v1, &qword_1003ECFE8);
  sub_100013B50(v2, v1, &qword_1003ECFE8);
  sub_100013B50(v0[94], v0[76], &qword_1003ECFE8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10014D0F0()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[99];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[74] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[75] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[90] + 56))(v0[76], 1, 1, v0[89]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10014D398()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[101];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[74] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[75] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager readFromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[90] + 56))(v0[76], 1, 1, v0[89]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10014D640()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[94];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  uint64_t v4 = v0[89];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10000A520(v1, &qword_1003ECFE8);
  uint64_t v5 = v0[106];
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    v0[74] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v10 = String.init<A>(describing:)();
    v0[75] = sub_100037004(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "DataManager readFromLocalStorage failed with error: %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[90] + 56))(v0[76], 1, 1, v0[89]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10014D920(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Handle();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for HandleType();
  v2[30] = v4;
  v2[31] = *(void *)(v4 - 8);
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FriendshipAction();
  v2[34] = v5;
  v2[35] = *(void *)(v5 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Friend();
  v2[38] = v6;
  v2[39] = *(void *)(v6 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  sub_100044014(&qword_1003EFEA0);
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  return _swift_task_switch(sub_10014DBFC, v1, 0);
}